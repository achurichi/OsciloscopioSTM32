
OsciloscopioSTM32.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   0000010c  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         000082e8  0800010c  0800010c  0001010c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       0000006c  080083f4  080083f4  000183f4  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08008460  08008460  00020180  2**0
                  CONTENTS
  4 .ARM          00000000  08008460  08008460  00020180  2**0
                  CONTENTS
  5 .preinit_array 00000000  08008460  08008460  00020180  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08008460  08008460  00018460  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08008464  08008464  00018464  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000180  20000000  08008468  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          000039c8  20000180  080085e8  00020180  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  20003b48  080085e8  00023b48  2**0
                  ALLOC
 11 .ARM.attributes 00000029  00000000  00000000  00020180  2**0
                  CONTENTS, READONLY
 12 .debug_info   00016ec8  00000000  00000000  000201a9  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_abbrev 000032d0  00000000  00000000  00037071  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_aranges 00001160  00000000  00000000  0003a348  2**3
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_ranges 00000fd8  00000000  00000000  0003b4a8  2**3
                  CONTENTS, READONLY, DEBUGGING
 16 .debug_macro  0001af14  00000000  00000000  0003c480  2**0
                  CONTENTS, READONLY, DEBUGGING
 17 .debug_line   00010e2f  00000000  00000000  00057394  2**0
                  CONTENTS, READONLY, DEBUGGING
 18 .debug_str    00091ce2  00000000  00000000  000681c3  2**0
                  CONTENTS, READONLY, DEBUGGING
 19 .comment      0000007b  00000000  00000000  000f9ea5  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00004728  00000000  00000000  000f9f20  2**2
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

0800010c <__do_global_dtors_aux>:
 800010c:	b510      	push	{r4, lr}
 800010e:	4c05      	ldr	r4, [pc, #20]	; (8000124 <__do_global_dtors_aux+0x18>)
 8000110:	7823      	ldrb	r3, [r4, #0]
 8000112:	b933      	cbnz	r3, 8000122 <__do_global_dtors_aux+0x16>
 8000114:	4b04      	ldr	r3, [pc, #16]	; (8000128 <__do_global_dtors_aux+0x1c>)
 8000116:	b113      	cbz	r3, 800011e <__do_global_dtors_aux+0x12>
 8000118:	4804      	ldr	r0, [pc, #16]	; (800012c <__do_global_dtors_aux+0x20>)
 800011a:	f3af 8000 	nop.w
 800011e:	2301      	movs	r3, #1
 8000120:	7023      	strb	r3, [r4, #0]
 8000122:	bd10      	pop	{r4, pc}
 8000124:	20000180 	.word	0x20000180
 8000128:	00000000 	.word	0x00000000
 800012c:	080083dc 	.word	0x080083dc

08000130 <frame_dummy>:
 8000130:	b508      	push	{r3, lr}
 8000132:	4b03      	ldr	r3, [pc, #12]	; (8000140 <frame_dummy+0x10>)
 8000134:	b11b      	cbz	r3, 800013e <frame_dummy+0xe>
 8000136:	4903      	ldr	r1, [pc, #12]	; (8000144 <frame_dummy+0x14>)
 8000138:	4803      	ldr	r0, [pc, #12]	; (8000148 <frame_dummy+0x18>)
 800013a:	f3af 8000 	nop.w
 800013e:	bd08      	pop	{r3, pc}
 8000140:	00000000 	.word	0x00000000
 8000144:	20000184 	.word	0x20000184
 8000148:	080083dc 	.word	0x080083dc

0800014c <VCP_read>:
static void MX_DMA_Init(void);
static void MX_ADC1_Init(void);
static void MX_TIM2_Init(void);
/* USER CODE BEGIN PFP */

uint8_t VCP_read(uint8_t* Buf, uint32_t Len) {
 800014c:	b480      	push	{r7}
 800014e:	b085      	sub	sp, #20
 8000150:	af00      	add	r7, sp, #0
 8000152:	6078      	str	r0, [r7, #4]
 8000154:	6039      	str	r1, [r7, #0]
	uint32_t count=0;
 8000156:	2300      	movs	r3, #0
 8000158:	60fb      	str	r3, [r7, #12]
	/* Check inputs */
	if ((Buf == NULL) || (Len == 0))
 800015a:	687b      	ldr	r3, [r7, #4]
 800015c:	2b00      	cmp	r3, #0
 800015e:	d002      	beq.n	8000166 <VCP_read+0x1a>
 8000160:	683b      	ldr	r3, [r7, #0]
 8000162:	2b00      	cmp	r3, #0
 8000164:	d11d      	bne.n	80001a2 <VCP_read+0x56>
		return 0;
 8000166:	2300      	movs	r3, #0
 8000168:	e022      	b.n	80001b0 <VCP_read+0x64>

	while (Len--) {
		if (RX_FIFO.head==RX_FIFO.tail)
 800016a:	4b14      	ldr	r3, [pc, #80]	; (80001bc <VCP_read+0x70>)
 800016c:	681a      	ldr	r2, [r3, #0]
 800016e:	4b13      	ldr	r3, [pc, #76]	; (80001bc <VCP_read+0x70>)
 8000170:	685b      	ldr	r3, [r3, #4]
 8000172:	429a      	cmp	r2, r3
 8000174:	d102      	bne.n	800017c <VCP_read+0x30>
			return count;
 8000176:	68fb      	ldr	r3, [r7, #12]
 8000178:	b2db      	uxtb	r3, r3
 800017a:	e019      	b.n	80001b0 <VCP_read+0x64>
		count++;
 800017c:	68fb      	ldr	r3, [r7, #12]
 800017e:	3301      	adds	r3, #1
 8000180:	60fb      	str	r3, [r7, #12]
		*Buf++=RX_FIFO.data[RX_FIFO.tail];
 8000182:	4b0e      	ldr	r3, [pc, #56]	; (80001bc <VCP_read+0x70>)
 8000184:	685a      	ldr	r2, [r3, #4]
 8000186:	687b      	ldr	r3, [r7, #4]
 8000188:	1c59      	adds	r1, r3, #1
 800018a:	6079      	str	r1, [r7, #4]
 800018c:	490b      	ldr	r1, [pc, #44]	; (80001bc <VCP_read+0x70>)
 800018e:	440a      	add	r2, r1
 8000190:	7a12      	ldrb	r2, [r2, #8]
 8000192:	701a      	strb	r2, [r3, #0]
		RX_FIFO.tail=FIFO_INCR(RX_FIFO.tail);
 8000194:	4b09      	ldr	r3, [pc, #36]	; (80001bc <VCP_read+0x70>)
 8000196:	685b      	ldr	r3, [r3, #4]
 8000198:	3301      	adds	r3, #1
 800019a:	f003 031f 	and.w	r3, r3, #31
 800019e:	4a07      	ldr	r2, [pc, #28]	; (80001bc <VCP_read+0x70>)
 80001a0:	6053      	str	r3, [r2, #4]
	while (Len--) {
 80001a2:	683b      	ldr	r3, [r7, #0]
 80001a4:	1e5a      	subs	r2, r3, #1
 80001a6:	603a      	str	r2, [r7, #0]
 80001a8:	2b00      	cmp	r3, #0
 80001aa:	d1de      	bne.n	800016a <VCP_read+0x1e>
	}

	return count;
 80001ac:	68fb      	ldr	r3, [r7, #12]
 80001ae:	b2db      	uxtb	r3, r3
}
 80001b0:	4618      	mov	r0, r3
 80001b2:	3714      	adds	r7, #20
 80001b4:	46bd      	mov	sp, r7
 80001b6:	bc80      	pop	{r7}
 80001b8:	4770      	bx	lr
 80001ba:	bf00      	nop
 80001bc:	2000019c 	.word	0x2000019c

080001c0 <HAL_TIM_PeriodElapsedCallback>:

void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim) {
 80001c0:	b580      	push	{r7, lr}
 80001c2:	b082      	sub	sp, #8
 80001c4:	af00      	add	r7, sp, #0
 80001c6:	6078      	str	r0, [r7, #4]
//	HAL_GPIO_WritePin(GPIOC, GPIO_PIN_13, GPIO_PIN_RESET);
	CDC_Transmit_FS((uint8_t *)adcSamples, NUM_SAMPLES_PLUS_ONE*2);
 80001c8:	f242 7112 	movw	r1, #10002	; 0x2712
 80001cc:	4803      	ldr	r0, [pc, #12]	; (80001dc <HAL_TIM_PeriodElapsedCallback+0x1c>)
 80001ce:	f007 fcfb 	bl	8007bc8 <CDC_Transmit_FS>
//	HAL_GPIO_WritePin(GPIOC, GPIO_PIN_13, GPIO_PIN_SET);
}
 80001d2:	bf00      	nop
 80001d4:	3708      	adds	r7, #8
 80001d6:	46bd      	mov	sp, r7
 80001d8:	bd80      	pop	{r7, pc}
 80001da:	bf00      	nop
 80001dc:	20000468 	.word	0x20000468

080001e0 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 80001e0:	b580      	push	{r7, lr}
 80001e2:	b082      	sub	sp, #8
 80001e4:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN 1 */
  adcSamples[NUM_SAMPLES] = (uint16_t)'\n';
 80001e6:	4b41      	ldr	r3, [pc, #260]	; (80002ec <main+0x10c>)
 80001e8:	f503 531c 	add.w	r3, r3, #9984	; 0x2700
 80001ec:	3310      	adds	r3, #16
 80001ee:	220a      	movs	r2, #10
 80001f0:	801a      	strh	r2, [r3, #0]
  time = HAL_GetTick();
 80001f2:	f000 fb67 	bl	80008c4 <HAL_GetTick>
 80001f6:	4602      	mov	r2, r0
 80001f8:	4b3d      	ldr	r3, [pc, #244]	; (80002f0 <main+0x110>)
 80001fa:	601a      	str	r2, [r3, #0]
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 80001fc:	f000 fb0a 	bl	8000814 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000200:	f000 f882 	bl	8000308 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000204:	f000 f986 	bl	8000514 <MX_GPIO_Init>
  MX_DMA_Init();
 8000208:	f000 f966 	bl	80004d8 <MX_DMA_Init>
  MX_ADC1_Init();
 800020c:	f000 f8da 	bl	80003c4 <MX_ADC1_Init>
  MX_TIM2_Init();
 8000210:	f000 f916 	bl	8000440 <MX_TIM2_Init>
  MX_USB_DEVICE_Init();
 8000214:	f007 fbd4 	bl	80079c0 <MX_USB_DEVICE_Init>
  /* USER CODE BEGIN 2 */

  HAL_ADC_Start_DMA(&hadc1, (uint32_t *)adcSamples, NUM_SAMPLES);
 8000218:	f241 3288 	movw	r2, #5000	; 0x1388
 800021c:	4933      	ldr	r1, [pc, #204]	; (80002ec <main+0x10c>)
 800021e:	4835      	ldr	r0, [pc, #212]	; (80002f4 <main+0x114>)
 8000220:	f000 fc32 	bl	8000a88 <HAL_ADC_Start_DMA>
  HAL_TIM_Base_Start_IT(&htim2); //MODO LIBRE
 8000224:	4834      	ldr	r0, [pc, #208]	; (80002f8 <main+0x118>)
 8000226:	f003 fc1b 	bl	8003a60 <HAL_TIM_Base_Start_IT>

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
  {
	VCP_read(rxBuffer, RX_DATA_BYTES);
 800022a:	2104      	movs	r1, #4
 800022c:	4833      	ldr	r0, [pc, #204]	; (80002fc <main+0x11c>)
 800022e:	f7ff ff8d 	bl	800014c <VCP_read>

	if (rxBuffer[RX_DATA_BYTES - 2] == '\n' || rxBuffer[RX_DATA_BYTES - 1] == '\n') {
 8000232:	4b32      	ldr	r3, [pc, #200]	; (80002fc <main+0x11c>)
 8000234:	789b      	ldrb	r3, [r3, #2]
 8000236:	2b0a      	cmp	r3, #10
 8000238:	d003      	beq.n	8000242 <main+0x62>
 800023a:	4b30      	ldr	r3, [pc, #192]	; (80002fc <main+0x11c>)
 800023c:	78db      	ldrb	r3, [r3, #3]
 800023e:	2b0a      	cmp	r3, #10
 8000240:	d133      	bne.n	80002aa <main+0xca>
		switch(rxBuffer[0]){
 8000242:	4b2e      	ldr	r3, [pc, #184]	; (80002fc <main+0x11c>)
 8000244:	781b      	ldrb	r3, [r3, #0]
 8000246:	2b31      	cmp	r3, #49	; 0x31
 8000248:	d002      	beq.n	8000250 <main+0x70>
 800024a:	2b32      	cmp	r3, #50	; 0x32
 800024c:	d007      	beq.n	800025e <main+0x7e>
				HAL_TIM_Base_Stop(&htim2);
				mode = 2;
				time = HAL_GetTick();
				break;
			default:
				break;
 800024e:	e01e      	b.n	800028e <main+0xae>
				HAL_TIM_Base_Start_IT(&htim2);
 8000250:	4829      	ldr	r0, [pc, #164]	; (80002f8 <main+0x118>)
 8000252:	f003 fc05 	bl	8003a60 <HAL_TIM_Base_Start_IT>
				mode = 1;
 8000256:	4b2a      	ldr	r3, [pc, #168]	; (8000300 <main+0x120>)
 8000258:	2201      	movs	r2, #1
 800025a:	701a      	strb	r2, [r3, #0]
				break;
 800025c:	e017      	b.n	800028e <main+0xae>
				triggerLevel = ((uint16_t)rxBuffer[2] << 8) | rxBuffer[1];
 800025e:	4b27      	ldr	r3, [pc, #156]	; (80002fc <main+0x11c>)
 8000260:	789b      	ldrb	r3, [r3, #2]
 8000262:	021b      	lsls	r3, r3, #8
 8000264:	b21a      	sxth	r2, r3
 8000266:	4b25      	ldr	r3, [pc, #148]	; (80002fc <main+0x11c>)
 8000268:	785b      	ldrb	r3, [r3, #1]
 800026a:	b21b      	sxth	r3, r3
 800026c:	4313      	orrs	r3, r2
 800026e:	b21b      	sxth	r3, r3
 8000270:	b29a      	uxth	r2, r3
 8000272:	4b24      	ldr	r3, [pc, #144]	; (8000304 <main+0x124>)
 8000274:	801a      	strh	r2, [r3, #0]
				HAL_TIM_Base_Stop(&htim2);
 8000276:	4820      	ldr	r0, [pc, #128]	; (80002f8 <main+0x118>)
 8000278:	f003 fbcb 	bl	8003a12 <HAL_TIM_Base_Stop>
				mode = 2;
 800027c:	4b20      	ldr	r3, [pc, #128]	; (8000300 <main+0x120>)
 800027e:	2202      	movs	r2, #2
 8000280:	701a      	strb	r2, [r3, #0]
				time = HAL_GetTick();
 8000282:	f000 fb1f 	bl	80008c4 <HAL_GetTick>
 8000286:	4602      	mov	r2, r0
 8000288:	4b19      	ldr	r3, [pc, #100]	; (80002f0 <main+0x110>)
 800028a:	601a      	str	r2, [r3, #0]
				break;
 800028c:	bf00      	nop
		}
		for (int i=0; i<RX_DATA_BYTES; i++)
 800028e:	2300      	movs	r3, #0
 8000290:	607b      	str	r3, [r7, #4]
 8000292:	e007      	b.n	80002a4 <main+0xc4>
			rxBuffer[i] = 0;
 8000294:	4a19      	ldr	r2, [pc, #100]	; (80002fc <main+0x11c>)
 8000296:	687b      	ldr	r3, [r7, #4]
 8000298:	4413      	add	r3, r2
 800029a:	2200      	movs	r2, #0
 800029c:	701a      	strb	r2, [r3, #0]
		for (int i=0; i<RX_DATA_BYTES; i++)
 800029e:	687b      	ldr	r3, [r7, #4]
 80002a0:	3301      	adds	r3, #1
 80002a2:	607b      	str	r3, [r7, #4]
 80002a4:	687b      	ldr	r3, [r7, #4]
 80002a6:	2b03      	cmp	r3, #3
 80002a8:	ddf4      	ble.n	8000294 <main+0xb4>
	}

	//MODO LIBRE
	if (mode == 2 && HAL_GetTick() >= (time + 40)) {
 80002aa:	4b15      	ldr	r3, [pc, #84]	; (8000300 <main+0x120>)
 80002ac:	781b      	ldrb	r3, [r3, #0]
 80002ae:	2b02      	cmp	r3, #2
 80002b0:	d1bb      	bne.n	800022a <main+0x4a>
 80002b2:	f000 fb07 	bl	80008c4 <HAL_GetTick>
 80002b6:	4602      	mov	r2, r0
 80002b8:	4b0d      	ldr	r3, [pc, #52]	; (80002f0 <main+0x110>)
 80002ba:	681b      	ldr	r3, [r3, #0]
 80002bc:	3328      	adds	r3, #40	; 0x28
 80002be:	429a      	cmp	r2, r3
 80002c0:	d3b3      	bcc.n	800022a <main+0x4a>
		if (adcSamples[(uint16_t)(NUM_SAMPLES/2)] >= triggerLevel){
 80002c2:	4b0a      	ldr	r3, [pc, #40]	; (80002ec <main+0x10c>)
 80002c4:	f503 539c 	add.w	r3, r3, #4992	; 0x1380
 80002c8:	3308      	adds	r3, #8
 80002ca:	881a      	ldrh	r2, [r3, #0]
 80002cc:	4b0d      	ldr	r3, [pc, #52]	; (8000304 <main+0x124>)
 80002ce:	881b      	ldrh	r3, [r3, #0]
 80002d0:	429a      	cmp	r2, r3
 80002d2:	d3aa      	bcc.n	800022a <main+0x4a>
			CDC_Transmit_FS((uint8_t *)adcSamples, NUM_SAMPLES_PLUS_ONE*2);
 80002d4:	f242 7112 	movw	r1, #10002	; 0x2712
 80002d8:	4804      	ldr	r0, [pc, #16]	; (80002ec <main+0x10c>)
 80002da:	f007 fc75 	bl	8007bc8 <CDC_Transmit_FS>
			time = HAL_GetTick();
 80002de:	f000 faf1 	bl	80008c4 <HAL_GetTick>
 80002e2:	4602      	mov	r2, r0
 80002e4:	4b02      	ldr	r3, [pc, #8]	; (80002f0 <main+0x110>)
 80002e6:	601a      	str	r2, [r3, #0]
	VCP_read(rxBuffer, RX_DATA_BYTES);
 80002e8:	e79f      	b.n	800022a <main+0x4a>
 80002ea:	bf00      	nop
 80002ec:	20000468 	.word	0x20000468
 80002f0:	20000460 	.word	0x20000460
 80002f4:	200003e8 	.word	0x200003e8
 80002f8:	20002b7c 	.word	0x20002b7c
 80002fc:	2000045c 	.word	0x2000045c
 8000300:	20000000 	.word	0x20000000
 8000304:	20000464 	.word	0x20000464

08000308 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000308:	b580      	push	{r7, lr}
 800030a:	b094      	sub	sp, #80	; 0x50
 800030c:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 800030e:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8000312:	2228      	movs	r2, #40	; 0x28
 8000314:	2100      	movs	r1, #0
 8000316:	4618      	mov	r0, r3
 8000318:	f008 f858 	bl	80083cc <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 800031c:	f107 0314 	add.w	r3, r7, #20
 8000320:	2200      	movs	r2, #0
 8000322:	601a      	str	r2, [r3, #0]
 8000324:	605a      	str	r2, [r3, #4]
 8000326:	609a      	str	r2, [r3, #8]
 8000328:	60da      	str	r2, [r3, #12]
 800032a:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 800032c:	1d3b      	adds	r3, r7, #4
 800032e:	2200      	movs	r2, #0
 8000330:	601a      	str	r2, [r3, #0]
 8000332:	605a      	str	r2, [r3, #4]
 8000334:	609a      	str	r2, [r3, #8]
 8000336:	60da      	str	r2, [r3, #12]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 8000338:	2301      	movs	r3, #1
 800033a:	62bb      	str	r3, [r7, #40]	; 0x28
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 800033c:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8000340:	62fb      	str	r3, [r7, #44]	; 0x2c
  RCC_OscInitStruct.HSEPredivValue = RCC_HSE_PREDIV_DIV1;
 8000342:	2300      	movs	r3, #0
 8000344:	633b      	str	r3, [r7, #48]	; 0x30
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8000346:	2301      	movs	r3, #1
 8000348:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 800034a:	2302      	movs	r3, #2
 800034c:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 800034e:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8000352:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLMUL = RCC_PLL_MUL6;
 8000354:	f44f 1380 	mov.w	r3, #1048576	; 0x100000
 8000358:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 800035a:	f107 0328 	add.w	r3, r7, #40	; 0x28
 800035e:	4618      	mov	r0, r3
 8000360:	f002 fe68 	bl	8003034 <HAL_RCC_OscConfig>
 8000364:	4603      	mov	r3, r0
 8000366:	2b00      	cmp	r3, #0
 8000368:	d001      	beq.n	800036e <SystemClock_Config+0x66>
  {
    Error_Handler();
 800036a:	f000 f91f 	bl	80005ac <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 800036e:	230f      	movs	r3, #15
 8000370:	617b      	str	r3, [r7, #20]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8000372:	2302      	movs	r3, #2
 8000374:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000376:	2300      	movs	r3, #0
 8000378:	61fb      	str	r3, [r7, #28]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 800037a:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800037e:	623b      	str	r3, [r7, #32]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8000380:	2300      	movs	r3, #0
 8000382:	627b      	str	r3, [r7, #36]	; 0x24

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_1) != HAL_OK)
 8000384:	f107 0314 	add.w	r3, r7, #20
 8000388:	2101      	movs	r1, #1
 800038a:	4618      	mov	r0, r3
 800038c:	f003 f8d2 	bl	8003534 <HAL_RCC_ClockConfig>
 8000390:	4603      	mov	r3, r0
 8000392:	2b00      	cmp	r3, #0
 8000394:	d001      	beq.n	800039a <SystemClock_Config+0x92>
  {
    Error_Handler();
 8000396:	f000 f909 	bl	80005ac <Error_Handler>
  }
  PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_ADC|RCC_PERIPHCLK_USB;
 800039a:	2312      	movs	r3, #18
 800039c:	607b      	str	r3, [r7, #4]
  PeriphClkInit.AdcClockSelection = RCC_ADCPCLK2_DIV4;
 800039e:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 80003a2:	60fb      	str	r3, [r7, #12]
  PeriphClkInit.UsbClockSelection = RCC_USBCLKSOURCE_PLL;
 80003a4:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 80003a8:	613b      	str	r3, [r7, #16]
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 80003aa:	1d3b      	adds	r3, r7, #4
 80003ac:	4618      	mov	r0, r3
 80003ae:	f003 fa2b 	bl	8003808 <HAL_RCCEx_PeriphCLKConfig>
 80003b2:	4603      	mov	r3, r0
 80003b4:	2b00      	cmp	r3, #0
 80003b6:	d001      	beq.n	80003bc <SystemClock_Config+0xb4>
  {
    Error_Handler();
 80003b8:	f000 f8f8 	bl	80005ac <Error_Handler>
  }
}
 80003bc:	bf00      	nop
 80003be:	3750      	adds	r7, #80	; 0x50
 80003c0:	46bd      	mov	sp, r7
 80003c2:	bd80      	pop	{r7, pc}

080003c4 <MX_ADC1_Init>:
  * @brief ADC1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_ADC1_Init(void)
{
 80003c4:	b580      	push	{r7, lr}
 80003c6:	b084      	sub	sp, #16
 80003c8:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC1_Init 0 */

  /* USER CODE END ADC1_Init 0 */

  ADC_ChannelConfTypeDef sConfig = {0};
 80003ca:	1d3b      	adds	r3, r7, #4
 80003cc:	2200      	movs	r2, #0
 80003ce:	601a      	str	r2, [r3, #0]
 80003d0:	605a      	str	r2, [r3, #4]
 80003d2:	609a      	str	r2, [r3, #8]
  /* USER CODE BEGIN ADC1_Init 1 */

  /* USER CODE END ADC1_Init 1 */
  /** Common config
  */
  hadc1.Instance = ADC1;
 80003d4:	4b18      	ldr	r3, [pc, #96]	; (8000438 <MX_ADC1_Init+0x74>)
 80003d6:	4a19      	ldr	r2, [pc, #100]	; (800043c <MX_ADC1_Init+0x78>)
 80003d8:	601a      	str	r2, [r3, #0]
  hadc1.Init.ScanConvMode = ADC_SCAN_DISABLE;
 80003da:	4b17      	ldr	r3, [pc, #92]	; (8000438 <MX_ADC1_Init+0x74>)
 80003dc:	2200      	movs	r2, #0
 80003de:	609a      	str	r2, [r3, #8]
  hadc1.Init.ContinuousConvMode = ENABLE;
 80003e0:	4b15      	ldr	r3, [pc, #84]	; (8000438 <MX_ADC1_Init+0x74>)
 80003e2:	2201      	movs	r2, #1
 80003e4:	731a      	strb	r2, [r3, #12]
  hadc1.Init.DiscontinuousConvMode = DISABLE;
 80003e6:	4b14      	ldr	r3, [pc, #80]	; (8000438 <MX_ADC1_Init+0x74>)
 80003e8:	2200      	movs	r2, #0
 80003ea:	751a      	strb	r2, [r3, #20]
  hadc1.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 80003ec:	4b12      	ldr	r3, [pc, #72]	; (8000438 <MX_ADC1_Init+0x74>)
 80003ee:	f44f 2260 	mov.w	r2, #917504	; 0xe0000
 80003f2:	61da      	str	r2, [r3, #28]
  hadc1.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 80003f4:	4b10      	ldr	r3, [pc, #64]	; (8000438 <MX_ADC1_Init+0x74>)
 80003f6:	2200      	movs	r2, #0
 80003f8:	605a      	str	r2, [r3, #4]
  hadc1.Init.NbrOfConversion = 1;
 80003fa:	4b0f      	ldr	r3, [pc, #60]	; (8000438 <MX_ADC1_Init+0x74>)
 80003fc:	2201      	movs	r2, #1
 80003fe:	611a      	str	r2, [r3, #16]
  if (HAL_ADC_Init(&hadc1) != HAL_OK)
 8000400:	480d      	ldr	r0, [pc, #52]	; (8000438 <MX_ADC1_Init+0x74>)
 8000402:	f000 fa69 	bl	80008d8 <HAL_ADC_Init>
 8000406:	4603      	mov	r3, r0
 8000408:	2b00      	cmp	r3, #0
 800040a:	d001      	beq.n	8000410 <MX_ADC1_Init+0x4c>
  {
    Error_Handler();
 800040c:	f000 f8ce 	bl	80005ac <Error_Handler>
  }
  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_1;
 8000410:	2301      	movs	r3, #1
 8000412:	607b      	str	r3, [r7, #4]
  sConfig.Rank = ADC_REGULAR_RANK_1;
 8000414:	2301      	movs	r3, #1
 8000416:	60bb      	str	r3, [r7, #8]
  sConfig.SamplingTime = ADC_SAMPLETIME_13CYCLES_5;
 8000418:	2302      	movs	r3, #2
 800041a:	60fb      	str	r3, [r7, #12]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 800041c:	1d3b      	adds	r3, r7, #4
 800041e:	4619      	mov	r1, r3
 8000420:	4805      	ldr	r0, [pc, #20]	; (8000438 <MX_ADC1_Init+0x74>)
 8000422:	f000 fc2b 	bl	8000c7c <HAL_ADC_ConfigChannel>
 8000426:	4603      	mov	r3, r0
 8000428:	2b00      	cmp	r3, #0
 800042a:	d001      	beq.n	8000430 <MX_ADC1_Init+0x6c>
  {
    Error_Handler();
 800042c:	f000 f8be 	bl	80005ac <Error_Handler>
  }
  /* USER CODE BEGIN ADC1_Init 2 */

  /* USER CODE END ADC1_Init 2 */

}
 8000430:	bf00      	nop
 8000432:	3710      	adds	r7, #16
 8000434:	46bd      	mov	sp, r7
 8000436:	bd80      	pop	{r7, pc}
 8000438:	200003e8 	.word	0x200003e8
 800043c:	40012400 	.word	0x40012400

08000440 <MX_TIM2_Init>:
  * @brief TIM2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM2_Init(void)
{
 8000440:	b580      	push	{r7, lr}
 8000442:	b086      	sub	sp, #24
 8000444:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM2_Init 0 */

  /* USER CODE END TIM2_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8000446:	f107 0308 	add.w	r3, r7, #8
 800044a:	2200      	movs	r2, #0
 800044c:	601a      	str	r2, [r3, #0]
 800044e:	605a      	str	r2, [r3, #4]
 8000450:	609a      	str	r2, [r3, #8]
 8000452:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8000454:	463b      	mov	r3, r7
 8000456:	2200      	movs	r2, #0
 8000458:	601a      	str	r2, [r3, #0]
 800045a:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM2_Init 1 */

  /* USER CODE END TIM2_Init 1 */
  htim2.Instance = TIM2;
 800045c:	4b1d      	ldr	r3, [pc, #116]	; (80004d4 <MX_TIM2_Init+0x94>)
 800045e:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 8000462:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 48000;
 8000464:	4b1b      	ldr	r3, [pc, #108]	; (80004d4 <MX_TIM2_Init+0x94>)
 8000466:	f64b 3280 	movw	r2, #48000	; 0xbb80
 800046a:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 800046c:	4b19      	ldr	r3, [pc, #100]	; (80004d4 <MX_TIM2_Init+0x94>)
 800046e:	2200      	movs	r2, #0
 8000470:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 39;
 8000472:	4b18      	ldr	r3, [pc, #96]	; (80004d4 <MX_TIM2_Init+0x94>)
 8000474:	2227      	movs	r2, #39	; 0x27
 8000476:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8000478:	4b16      	ldr	r3, [pc, #88]	; (80004d4 <MX_TIM2_Init+0x94>)
 800047a:	2200      	movs	r2, #0
 800047c:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_ENABLE;
 800047e:	4b15      	ldr	r3, [pc, #84]	; (80004d4 <MX_TIM2_Init+0x94>)
 8000480:	2280      	movs	r2, #128	; 0x80
 8000482:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim2) != HAL_OK)
 8000484:	4813      	ldr	r0, [pc, #76]	; (80004d4 <MX_TIM2_Init+0x94>)
 8000486:	f003 fa75 	bl	8003974 <HAL_TIM_Base_Init>
 800048a:	4603      	mov	r3, r0
 800048c:	2b00      	cmp	r3, #0
 800048e:	d001      	beq.n	8000494 <MX_TIM2_Init+0x54>
  {
    Error_Handler();
 8000490:	f000 f88c 	bl	80005ac <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8000494:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8000498:	60bb      	str	r3, [r7, #8]
  if (HAL_TIM_ConfigClockSource(&htim2, &sClockSourceConfig) != HAL_OK)
 800049a:	f107 0308 	add.w	r3, r7, #8
 800049e:	4619      	mov	r1, r3
 80004a0:	480c      	ldr	r0, [pc, #48]	; (80004d4 <MX_TIM2_Init+0x94>)
 80004a2:	f003 fc37 	bl	8003d14 <HAL_TIM_ConfigClockSource>
 80004a6:	4603      	mov	r3, r0
 80004a8:	2b00      	cmp	r3, #0
 80004aa:	d001      	beq.n	80004b0 <MX_TIM2_Init+0x70>
  {
    Error_Handler();
 80004ac:	f000 f87e 	bl	80005ac <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 80004b0:	2300      	movs	r3, #0
 80004b2:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80004b4:	2300      	movs	r3, #0
 80004b6:	607b      	str	r3, [r7, #4]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 80004b8:	463b      	mov	r3, r7
 80004ba:	4619      	mov	r1, r3
 80004bc:	4805      	ldr	r0, [pc, #20]	; (80004d4 <MX_TIM2_Init+0x94>)
 80004be:	f003 fdfd 	bl	80040bc <HAL_TIMEx_MasterConfigSynchronization>
 80004c2:	4603      	mov	r3, r0
 80004c4:	2b00      	cmp	r3, #0
 80004c6:	d001      	beq.n	80004cc <MX_TIM2_Init+0x8c>
  {
    Error_Handler();
 80004c8:	f000 f870 	bl	80005ac <Error_Handler>
  }
  /* USER CODE BEGIN TIM2_Init 2 */

  /* USER CODE END TIM2_Init 2 */

}
 80004cc:	bf00      	nop
 80004ce:	3718      	adds	r7, #24
 80004d0:	46bd      	mov	sp, r7
 80004d2:	bd80      	pop	{r7, pc}
 80004d4:	20002b7c 	.word	0x20002b7c

080004d8 <MX_DMA_Init>:

/**
  * Enable DMA controller clock
  */
static void MX_DMA_Init(void)
{
 80004d8:	b580      	push	{r7, lr}
 80004da:	b082      	sub	sp, #8
 80004dc:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMA1_CLK_ENABLE();
 80004de:	4b0c      	ldr	r3, [pc, #48]	; (8000510 <MX_DMA_Init+0x38>)
 80004e0:	695b      	ldr	r3, [r3, #20]
 80004e2:	4a0b      	ldr	r2, [pc, #44]	; (8000510 <MX_DMA_Init+0x38>)
 80004e4:	f043 0301 	orr.w	r3, r3, #1
 80004e8:	6153      	str	r3, [r2, #20]
 80004ea:	4b09      	ldr	r3, [pc, #36]	; (8000510 <MX_DMA_Init+0x38>)
 80004ec:	695b      	ldr	r3, [r3, #20]
 80004ee:	f003 0301 	and.w	r3, r3, #1
 80004f2:	607b      	str	r3, [r7, #4]
 80004f4:	687b      	ldr	r3, [r7, #4]

  /* DMA interrupt init */
  /* DMA1_Channel1_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Channel1_IRQn, 0, 0);
 80004f6:	2200      	movs	r2, #0
 80004f8:	2100      	movs	r1, #0
 80004fa:	200b      	movs	r0, #11
 80004fc:	f000 fe7f 	bl	80011fe <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Channel1_IRQn);
 8000500:	200b      	movs	r0, #11
 8000502:	f000 fe98 	bl	8001236 <HAL_NVIC_EnableIRQ>

}
 8000506:	bf00      	nop
 8000508:	3708      	adds	r7, #8
 800050a:	46bd      	mov	sp, r7
 800050c:	bd80      	pop	{r7, pc}
 800050e:	bf00      	nop
 8000510:	40021000 	.word	0x40021000

08000514 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8000514:	b580      	push	{r7, lr}
 8000516:	b088      	sub	sp, #32
 8000518:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800051a:	f107 0310 	add.w	r3, r7, #16
 800051e:	2200      	movs	r2, #0
 8000520:	601a      	str	r2, [r3, #0]
 8000522:	605a      	str	r2, [r3, #4]
 8000524:	609a      	str	r2, [r3, #8]
 8000526:	60da      	str	r2, [r3, #12]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8000528:	4b1e      	ldr	r3, [pc, #120]	; (80005a4 <MX_GPIO_Init+0x90>)
 800052a:	699b      	ldr	r3, [r3, #24]
 800052c:	4a1d      	ldr	r2, [pc, #116]	; (80005a4 <MX_GPIO_Init+0x90>)
 800052e:	f043 0310 	orr.w	r3, r3, #16
 8000532:	6193      	str	r3, [r2, #24]
 8000534:	4b1b      	ldr	r3, [pc, #108]	; (80005a4 <MX_GPIO_Init+0x90>)
 8000536:	699b      	ldr	r3, [r3, #24]
 8000538:	f003 0310 	and.w	r3, r3, #16
 800053c:	60fb      	str	r3, [r7, #12]
 800053e:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8000540:	4b18      	ldr	r3, [pc, #96]	; (80005a4 <MX_GPIO_Init+0x90>)
 8000542:	699b      	ldr	r3, [r3, #24]
 8000544:	4a17      	ldr	r2, [pc, #92]	; (80005a4 <MX_GPIO_Init+0x90>)
 8000546:	f043 0320 	orr.w	r3, r3, #32
 800054a:	6193      	str	r3, [r2, #24]
 800054c:	4b15      	ldr	r3, [pc, #84]	; (80005a4 <MX_GPIO_Init+0x90>)
 800054e:	699b      	ldr	r3, [r3, #24]
 8000550:	f003 0320 	and.w	r3, r3, #32
 8000554:	60bb      	str	r3, [r7, #8]
 8000556:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000558:	4b12      	ldr	r3, [pc, #72]	; (80005a4 <MX_GPIO_Init+0x90>)
 800055a:	699b      	ldr	r3, [r3, #24]
 800055c:	4a11      	ldr	r2, [pc, #68]	; (80005a4 <MX_GPIO_Init+0x90>)
 800055e:	f043 0304 	orr.w	r3, r3, #4
 8000562:	6193      	str	r3, [r2, #24]
 8000564:	4b0f      	ldr	r3, [pc, #60]	; (80005a4 <MX_GPIO_Init+0x90>)
 8000566:	699b      	ldr	r3, [r3, #24]
 8000568:	f003 0304 	and.w	r3, r3, #4
 800056c:	607b      	str	r3, [r7, #4]
 800056e:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOC, GPIO_PIN_13, GPIO_PIN_SET);
 8000570:	2201      	movs	r2, #1
 8000572:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8000576:	480c      	ldr	r0, [pc, #48]	; (80005a8 <MX_GPIO_Init+0x94>)
 8000578:	f001 f9c0 	bl	80018fc <HAL_GPIO_WritePin>

  /*Configure GPIO pin : PC13 */
  GPIO_InitStruct.Pin = GPIO_PIN_13;
 800057c:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8000580:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000582:	2301      	movs	r3, #1
 8000584:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000586:	2300      	movs	r3, #0
 8000588:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 800058a:	2303      	movs	r3, #3
 800058c:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 800058e:	f107 0310 	add.w	r3, r7, #16
 8000592:	4619      	mov	r1, r3
 8000594:	4804      	ldr	r0, [pc, #16]	; (80005a8 <MX_GPIO_Init+0x94>)
 8000596:	f001 f857 	bl	8001648 <HAL_GPIO_Init>

}
 800059a:	bf00      	nop
 800059c:	3720      	adds	r7, #32
 800059e:	46bd      	mov	sp, r7
 80005a0:	bd80      	pop	{r7, pc}
 80005a2:	bf00      	nop
 80005a4:	40021000 	.word	0x40021000
 80005a8:	40011000 	.word	0x40011000

080005ac <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 80005ac:	b480      	push	{r7}
 80005ae:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 80005b0:	b672      	cpsid	i
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 80005b2:	e7fe      	b.n	80005b2 <Error_Handler+0x6>

080005b4 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 80005b4:	b480      	push	{r7}
 80005b6:	b085      	sub	sp, #20
 80005b8:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_AFIO_CLK_ENABLE();
 80005ba:	4b15      	ldr	r3, [pc, #84]	; (8000610 <HAL_MspInit+0x5c>)
 80005bc:	699b      	ldr	r3, [r3, #24]
 80005be:	4a14      	ldr	r2, [pc, #80]	; (8000610 <HAL_MspInit+0x5c>)
 80005c0:	f043 0301 	orr.w	r3, r3, #1
 80005c4:	6193      	str	r3, [r2, #24]
 80005c6:	4b12      	ldr	r3, [pc, #72]	; (8000610 <HAL_MspInit+0x5c>)
 80005c8:	699b      	ldr	r3, [r3, #24]
 80005ca:	f003 0301 	and.w	r3, r3, #1
 80005ce:	60bb      	str	r3, [r7, #8]
 80005d0:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_PWR_CLK_ENABLE();
 80005d2:	4b0f      	ldr	r3, [pc, #60]	; (8000610 <HAL_MspInit+0x5c>)
 80005d4:	69db      	ldr	r3, [r3, #28]
 80005d6:	4a0e      	ldr	r2, [pc, #56]	; (8000610 <HAL_MspInit+0x5c>)
 80005d8:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80005dc:	61d3      	str	r3, [r2, #28]
 80005de:	4b0c      	ldr	r3, [pc, #48]	; (8000610 <HAL_MspInit+0x5c>)
 80005e0:	69db      	ldr	r3, [r3, #28]
 80005e2:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80005e6:	607b      	str	r3, [r7, #4]
 80005e8:	687b      	ldr	r3, [r7, #4]

  /* System interrupt init*/

  /** NOJTAG: JTAG-DP Disabled and SW-DP Enabled
  */
  __HAL_AFIO_REMAP_SWJ_NOJTAG();
 80005ea:	4b0a      	ldr	r3, [pc, #40]	; (8000614 <HAL_MspInit+0x60>)
 80005ec:	685b      	ldr	r3, [r3, #4]
 80005ee:	60fb      	str	r3, [r7, #12]
 80005f0:	68fb      	ldr	r3, [r7, #12]
 80005f2:	f023 63e0 	bic.w	r3, r3, #117440512	; 0x7000000
 80005f6:	60fb      	str	r3, [r7, #12]
 80005f8:	68fb      	ldr	r3, [r7, #12]
 80005fa:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 80005fe:	60fb      	str	r3, [r7, #12]
 8000600:	4a04      	ldr	r2, [pc, #16]	; (8000614 <HAL_MspInit+0x60>)
 8000602:	68fb      	ldr	r3, [r7, #12]
 8000604:	6053      	str	r3, [r2, #4]

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8000606:	bf00      	nop
 8000608:	3714      	adds	r7, #20
 800060a:	46bd      	mov	sp, r7
 800060c:	bc80      	pop	{r7}
 800060e:	4770      	bx	lr
 8000610:	40021000 	.word	0x40021000
 8000614:	40010000 	.word	0x40010000

08000618 <HAL_ADC_MspInit>:
* This function configures the hardware resources used in this example
* @param hadc: ADC handle pointer
* @retval None
*/
void HAL_ADC_MspInit(ADC_HandleTypeDef* hadc)
{
 8000618:	b580      	push	{r7, lr}
 800061a:	b088      	sub	sp, #32
 800061c:	af00      	add	r7, sp, #0
 800061e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000620:	f107 0310 	add.w	r3, r7, #16
 8000624:	2200      	movs	r2, #0
 8000626:	601a      	str	r2, [r3, #0]
 8000628:	605a      	str	r2, [r3, #4]
 800062a:	609a      	str	r2, [r3, #8]
 800062c:	60da      	str	r2, [r3, #12]
  if(hadc->Instance==ADC1)
 800062e:	687b      	ldr	r3, [r7, #4]
 8000630:	681b      	ldr	r3, [r3, #0]
 8000632:	4a28      	ldr	r2, [pc, #160]	; (80006d4 <HAL_ADC_MspInit+0xbc>)
 8000634:	4293      	cmp	r3, r2
 8000636:	d149      	bne.n	80006cc <HAL_ADC_MspInit+0xb4>
  {
  /* USER CODE BEGIN ADC1_MspInit 0 */

  /* USER CODE END ADC1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_ADC1_CLK_ENABLE();
 8000638:	4b27      	ldr	r3, [pc, #156]	; (80006d8 <HAL_ADC_MspInit+0xc0>)
 800063a:	699b      	ldr	r3, [r3, #24]
 800063c:	4a26      	ldr	r2, [pc, #152]	; (80006d8 <HAL_ADC_MspInit+0xc0>)
 800063e:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8000642:	6193      	str	r3, [r2, #24]
 8000644:	4b24      	ldr	r3, [pc, #144]	; (80006d8 <HAL_ADC_MspInit+0xc0>)
 8000646:	699b      	ldr	r3, [r3, #24]
 8000648:	f403 7300 	and.w	r3, r3, #512	; 0x200
 800064c:	60fb      	str	r3, [r7, #12]
 800064e:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000650:	4b21      	ldr	r3, [pc, #132]	; (80006d8 <HAL_ADC_MspInit+0xc0>)
 8000652:	699b      	ldr	r3, [r3, #24]
 8000654:	4a20      	ldr	r2, [pc, #128]	; (80006d8 <HAL_ADC_MspInit+0xc0>)
 8000656:	f043 0304 	orr.w	r3, r3, #4
 800065a:	6193      	str	r3, [r2, #24]
 800065c:	4b1e      	ldr	r3, [pc, #120]	; (80006d8 <HAL_ADC_MspInit+0xc0>)
 800065e:	699b      	ldr	r3, [r3, #24]
 8000660:	f003 0304 	and.w	r3, r3, #4
 8000664:	60bb      	str	r3, [r7, #8]
 8000666:	68bb      	ldr	r3, [r7, #8]
    /**ADC1 GPIO Configuration
    PA1     ------> ADC1_IN1
    */
    GPIO_InitStruct.Pin = GPIO_PIN_1;
 8000668:	2302      	movs	r3, #2
 800066a:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 800066c:	2303      	movs	r3, #3
 800066e:	617b      	str	r3, [r7, #20]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000670:	f107 0310 	add.w	r3, r7, #16
 8000674:	4619      	mov	r1, r3
 8000676:	4819      	ldr	r0, [pc, #100]	; (80006dc <HAL_ADC_MspInit+0xc4>)
 8000678:	f000 ffe6 	bl	8001648 <HAL_GPIO_Init>

    /* ADC1 DMA Init */
    /* ADC1 Init */
    hdma_adc1.Instance = DMA1_Channel1;
 800067c:	4b18      	ldr	r3, [pc, #96]	; (80006e0 <HAL_ADC_MspInit+0xc8>)
 800067e:	4a19      	ldr	r2, [pc, #100]	; (80006e4 <HAL_ADC_MspInit+0xcc>)
 8000680:	601a      	str	r2, [r3, #0]
    hdma_adc1.Init.Direction = DMA_PERIPH_TO_MEMORY;
 8000682:	4b17      	ldr	r3, [pc, #92]	; (80006e0 <HAL_ADC_MspInit+0xc8>)
 8000684:	2200      	movs	r2, #0
 8000686:	605a      	str	r2, [r3, #4]
    hdma_adc1.Init.PeriphInc = DMA_PINC_DISABLE;
 8000688:	4b15      	ldr	r3, [pc, #84]	; (80006e0 <HAL_ADC_MspInit+0xc8>)
 800068a:	2200      	movs	r2, #0
 800068c:	609a      	str	r2, [r3, #8]
    hdma_adc1.Init.MemInc = DMA_MINC_ENABLE;
 800068e:	4b14      	ldr	r3, [pc, #80]	; (80006e0 <HAL_ADC_MspInit+0xc8>)
 8000690:	2280      	movs	r2, #128	; 0x80
 8000692:	60da      	str	r2, [r3, #12]
    hdma_adc1.Init.PeriphDataAlignment = DMA_PDATAALIGN_HALFWORD;
 8000694:	4b12      	ldr	r3, [pc, #72]	; (80006e0 <HAL_ADC_MspInit+0xc8>)
 8000696:	f44f 7280 	mov.w	r2, #256	; 0x100
 800069a:	611a      	str	r2, [r3, #16]
    hdma_adc1.Init.MemDataAlignment = DMA_MDATAALIGN_HALFWORD;
 800069c:	4b10      	ldr	r3, [pc, #64]	; (80006e0 <HAL_ADC_MspInit+0xc8>)
 800069e:	f44f 6280 	mov.w	r2, #1024	; 0x400
 80006a2:	615a      	str	r2, [r3, #20]
    hdma_adc1.Init.Mode = DMA_CIRCULAR;
 80006a4:	4b0e      	ldr	r3, [pc, #56]	; (80006e0 <HAL_ADC_MspInit+0xc8>)
 80006a6:	2220      	movs	r2, #32
 80006a8:	619a      	str	r2, [r3, #24]
    hdma_adc1.Init.Priority = DMA_PRIORITY_LOW;
 80006aa:	4b0d      	ldr	r3, [pc, #52]	; (80006e0 <HAL_ADC_MspInit+0xc8>)
 80006ac:	2200      	movs	r2, #0
 80006ae:	61da      	str	r2, [r3, #28]
    if (HAL_DMA_Init(&hdma_adc1) != HAL_OK)
 80006b0:	480b      	ldr	r0, [pc, #44]	; (80006e0 <HAL_ADC_MspInit+0xc8>)
 80006b2:	f000 fddb 	bl	800126c <HAL_DMA_Init>
 80006b6:	4603      	mov	r3, r0
 80006b8:	2b00      	cmp	r3, #0
 80006ba:	d001      	beq.n	80006c0 <HAL_ADC_MspInit+0xa8>
    {
      Error_Handler();
 80006bc:	f7ff ff76 	bl	80005ac <Error_Handler>
    }

    __HAL_LINKDMA(hadc,DMA_Handle,hdma_adc1);
 80006c0:	687b      	ldr	r3, [r7, #4]
 80006c2:	4a07      	ldr	r2, [pc, #28]	; (80006e0 <HAL_ADC_MspInit+0xc8>)
 80006c4:	621a      	str	r2, [r3, #32]
 80006c6:	4a06      	ldr	r2, [pc, #24]	; (80006e0 <HAL_ADC_MspInit+0xc8>)
 80006c8:	687b      	ldr	r3, [r7, #4]
 80006ca:	6253      	str	r3, [r2, #36]	; 0x24
  /* USER CODE BEGIN ADC1_MspInit 1 */

  /* USER CODE END ADC1_MspInit 1 */
  }

}
 80006cc:	bf00      	nop
 80006ce:	3720      	adds	r7, #32
 80006d0:	46bd      	mov	sp, r7
 80006d2:	bd80      	pop	{r7, pc}
 80006d4:	40012400 	.word	0x40012400
 80006d8:	40021000 	.word	0x40021000
 80006dc:	40010800 	.word	0x40010800
 80006e0:	20000418 	.word	0x20000418
 80006e4:	40020008 	.word	0x40020008

080006e8 <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 80006e8:	b580      	push	{r7, lr}
 80006ea:	b084      	sub	sp, #16
 80006ec:	af00      	add	r7, sp, #0
 80006ee:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM2)
 80006f0:	687b      	ldr	r3, [r7, #4]
 80006f2:	681b      	ldr	r3, [r3, #0]
 80006f4:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80006f8:	d113      	bne.n	8000722 <HAL_TIM_Base_MspInit+0x3a>
  {
  /* USER CODE BEGIN TIM2_MspInit 0 */

  /* USER CODE END TIM2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM2_CLK_ENABLE();
 80006fa:	4b0c      	ldr	r3, [pc, #48]	; (800072c <HAL_TIM_Base_MspInit+0x44>)
 80006fc:	69db      	ldr	r3, [r3, #28]
 80006fe:	4a0b      	ldr	r2, [pc, #44]	; (800072c <HAL_TIM_Base_MspInit+0x44>)
 8000700:	f043 0301 	orr.w	r3, r3, #1
 8000704:	61d3      	str	r3, [r2, #28]
 8000706:	4b09      	ldr	r3, [pc, #36]	; (800072c <HAL_TIM_Base_MspInit+0x44>)
 8000708:	69db      	ldr	r3, [r3, #28]
 800070a:	f003 0301 	and.w	r3, r3, #1
 800070e:	60fb      	str	r3, [r7, #12]
 8000710:	68fb      	ldr	r3, [r7, #12]
    /* TIM2 interrupt Init */
    HAL_NVIC_SetPriority(TIM2_IRQn, 0, 0);
 8000712:	2200      	movs	r2, #0
 8000714:	2100      	movs	r1, #0
 8000716:	201c      	movs	r0, #28
 8000718:	f000 fd71 	bl	80011fe <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM2_IRQn);
 800071c:	201c      	movs	r0, #28
 800071e:	f000 fd8a 	bl	8001236 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN TIM2_MspInit 1 */

  /* USER CODE END TIM2_MspInit 1 */
  }

}
 8000722:	bf00      	nop
 8000724:	3710      	adds	r7, #16
 8000726:	46bd      	mov	sp, r7
 8000728:	bd80      	pop	{r7, pc}
 800072a:	bf00      	nop
 800072c:	40021000 	.word	0x40021000

08000730 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8000730:	b480      	push	{r7}
 8000732:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8000734:	e7fe      	b.n	8000734 <NMI_Handler+0x4>

08000736 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8000736:	b480      	push	{r7}
 8000738:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 800073a:	e7fe      	b.n	800073a <HardFault_Handler+0x4>

0800073c <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 800073c:	b480      	push	{r7}
 800073e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8000740:	e7fe      	b.n	8000740 <MemManage_Handler+0x4>

08000742 <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8000742:	b480      	push	{r7}
 8000744:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8000746:	e7fe      	b.n	8000746 <BusFault_Handler+0x4>

08000748 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8000748:	b480      	push	{r7}
 800074a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 800074c:	e7fe      	b.n	800074c <UsageFault_Handler+0x4>

0800074e <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 800074e:	b480      	push	{r7}
 8000750:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8000752:	bf00      	nop
 8000754:	46bd      	mov	sp, r7
 8000756:	bc80      	pop	{r7}
 8000758:	4770      	bx	lr

0800075a <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 800075a:	b480      	push	{r7}
 800075c:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 800075e:	bf00      	nop
 8000760:	46bd      	mov	sp, r7
 8000762:	bc80      	pop	{r7}
 8000764:	4770      	bx	lr

08000766 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8000766:	b480      	push	{r7}
 8000768:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 800076a:	bf00      	nop
 800076c:	46bd      	mov	sp, r7
 800076e:	bc80      	pop	{r7}
 8000770:	4770      	bx	lr

08000772 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8000772:	b580      	push	{r7, lr}
 8000774:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8000776:	f000 f893 	bl	80008a0 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 800077a:	bf00      	nop
 800077c:	bd80      	pop	{r7, pc}
	...

08000780 <DMA1_Channel1_IRQHandler>:

/**
  * @brief This function handles DMA1 channel1 global interrupt.
  */
void DMA1_Channel1_IRQHandler(void)
{
 8000780:	b580      	push	{r7, lr}
 8000782:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Channel1_IRQn 0 */

  /* USER CODE END DMA1_Channel1_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_adc1);
 8000784:	4802      	ldr	r0, [pc, #8]	; (8000790 <DMA1_Channel1_IRQHandler+0x10>)
 8000786:	f000 fe2b 	bl	80013e0 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Channel1_IRQn 1 */

  /* USER CODE END DMA1_Channel1_IRQn 1 */
}
 800078a:	bf00      	nop
 800078c:	bd80      	pop	{r7, pc}
 800078e:	bf00      	nop
 8000790:	20000418 	.word	0x20000418

08000794 <USB_LP_CAN1_RX0_IRQHandler>:

/**
  * @brief This function handles USB low priority or CAN RX0 interrupts.
  */
void USB_LP_CAN1_RX0_IRQHandler(void)
{
 8000794:	b580      	push	{r7, lr}
 8000796:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USB_LP_CAN1_RX0_IRQn 0 */

  /* USER CODE END USB_LP_CAN1_RX0_IRQn 0 */
  HAL_PCD_IRQHandler(&hpcd_USB_FS);
 8000798:	4802      	ldr	r0, [pc, #8]	; (80007a4 <USB_LP_CAN1_RX0_IRQHandler+0x10>)
 800079a:	f001 f9f8 	bl	8001b8e <HAL_PCD_IRQHandler>
  /* USER CODE BEGIN USB_LP_CAN1_RX0_IRQn 1 */

  /* USER CODE END USB_LP_CAN1_RX0_IRQn 1 */
}
 800079e:	bf00      	nop
 80007a0:	bd80      	pop	{r7, pc}
 80007a2:	bf00      	nop
 80007a4:	2000385c 	.word	0x2000385c

080007a8 <TIM2_IRQHandler>:

/**
  * @brief This function handles TIM2 global interrupt.
  */
void TIM2_IRQHandler(void)
{
 80007a8:	b580      	push	{r7, lr}
 80007aa:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM2_IRQn 0 */

  /* USER CODE END TIM2_IRQn 0 */
  HAL_TIM_IRQHandler(&htim2);
 80007ac:	4802      	ldr	r0, [pc, #8]	; (80007b8 <TIM2_IRQHandler+0x10>)
 80007ae:	f003 f9a9 	bl	8003b04 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM2_IRQn 1 */

  /* USER CODE END TIM2_IRQn 1 */
}
 80007b2:	bf00      	nop
 80007b4:	bd80      	pop	{r7, pc}
 80007b6:	bf00      	nop
 80007b8:	20002b7c 	.word	0x20002b7c

080007bc <SystemInit>:
  * @note   This function should be used only after reset.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 80007bc:	b480      	push	{r7}
 80007be:	af00      	add	r7, sp, #0

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM. */
#endif /* USER_VECT_TAB_ADDRESS */
}
 80007c0:	bf00      	nop
 80007c2:	46bd      	mov	sp, r7
 80007c4:	bc80      	pop	{r7}
 80007c6:	4770      	bx	lr

080007c8 <Reset_Handler>:
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:

/* Copy the data segment initializers from flash to SRAM */
  movs r1, #0
 80007c8:	2100      	movs	r1, #0
  b LoopCopyDataInit
 80007ca:	e003      	b.n	80007d4 <LoopCopyDataInit>

080007cc <CopyDataInit>:

CopyDataInit:
  ldr r3, =_sidata
 80007cc:	4b0b      	ldr	r3, [pc, #44]	; (80007fc <LoopFillZerobss+0x14>)
  ldr r3, [r3, r1]
 80007ce:	585b      	ldr	r3, [r3, r1]
  str r3, [r0, r1]
 80007d0:	5043      	str	r3, [r0, r1]
  adds r1, r1, #4
 80007d2:	3104      	adds	r1, #4

080007d4 <LoopCopyDataInit>:

LoopCopyDataInit:
  ldr r0, =_sdata
 80007d4:	480a      	ldr	r0, [pc, #40]	; (8000800 <LoopFillZerobss+0x18>)
  ldr r3, =_edata
 80007d6:	4b0b      	ldr	r3, [pc, #44]	; (8000804 <LoopFillZerobss+0x1c>)
  adds r2, r0, r1
 80007d8:	1842      	adds	r2, r0, r1
  cmp r2, r3
 80007da:	429a      	cmp	r2, r3
  bcc CopyDataInit
 80007dc:	d3f6      	bcc.n	80007cc <CopyDataInit>
  ldr r2, =_sbss
 80007de:	4a0a      	ldr	r2, [pc, #40]	; (8000808 <LoopFillZerobss+0x20>)
  b LoopFillZerobss
 80007e0:	e002      	b.n	80007e8 <LoopFillZerobss>

080007e2 <FillZerobss>:
/* Zero fill the bss segment. */
FillZerobss:
  movs r3, #0
 80007e2:	2300      	movs	r3, #0
  str r3, [r2], #4
 80007e4:	f842 3b04 	str.w	r3, [r2], #4

080007e8 <LoopFillZerobss>:

LoopFillZerobss:
  ldr r3, = _ebss
 80007e8:	4b08      	ldr	r3, [pc, #32]	; (800080c <LoopFillZerobss+0x24>)
  cmp r2, r3
 80007ea:	429a      	cmp	r2, r3
  bcc FillZerobss
 80007ec:	d3f9      	bcc.n	80007e2 <FillZerobss>

/* Call the clock system intitialization function.*/
    bl  SystemInit
 80007ee:	f7ff ffe5 	bl	80007bc <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 80007f2:	f007 fdc7 	bl	8008384 <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 80007f6:	f7ff fcf3 	bl	80001e0 <main>
  bx lr
 80007fa:	4770      	bx	lr
  ldr r3, =_sidata
 80007fc:	08008468 	.word	0x08008468
  ldr r0, =_sdata
 8000800:	20000000 	.word	0x20000000
  ldr r3, =_edata
 8000804:	20000180 	.word	0x20000180
  ldr r2, =_sbss
 8000808:	20000180 	.word	0x20000180
  ldr r3, = _ebss
 800080c:	20003b48 	.word	0x20003b48

08000810 <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 8000810:	e7fe      	b.n	8000810 <ADC1_2_IRQHandler>
	...

08000814 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8000814:	b580      	push	{r7, lr}
 8000816:	af00      	add	r7, sp, #0
    defined(STM32F102x6) || defined(STM32F102xB) || \
    defined(STM32F103x6) || defined(STM32F103xB) || defined(STM32F103xE) || defined(STM32F103xG) || \
    defined(STM32F105xC) || defined(STM32F107xC)

  /* Prefetch buffer is not available on value line devices */
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8000818:	4b08      	ldr	r3, [pc, #32]	; (800083c <HAL_Init+0x28>)
 800081a:	681b      	ldr	r3, [r3, #0]
 800081c:	4a07      	ldr	r2, [pc, #28]	; (800083c <HAL_Init+0x28>)
 800081e:	f043 0310 	orr.w	r3, r3, #16
 8000822:	6013      	str	r3, [r2, #0]
#endif
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8000824:	2003      	movs	r0, #3
 8000826:	f000 fcdf 	bl	80011e8 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 800082a:	2000      	movs	r0, #0
 800082c:	f000 f808 	bl	8000840 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8000830:	f7ff fec0 	bl	80005b4 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8000834:	2300      	movs	r3, #0
}
 8000836:	4618      	mov	r0, r3
 8000838:	bd80      	pop	{r7, pc}
 800083a:	bf00      	nop
 800083c:	40022000 	.word	0x40022000

08000840 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8000840:	b580      	push	{r7, lr}
 8000842:	b082      	sub	sp, #8
 8000844:	af00      	add	r7, sp, #0
 8000846:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8000848:	4b12      	ldr	r3, [pc, #72]	; (8000894 <HAL_InitTick+0x54>)
 800084a:	681a      	ldr	r2, [r3, #0]
 800084c:	4b12      	ldr	r3, [pc, #72]	; (8000898 <HAL_InitTick+0x58>)
 800084e:	781b      	ldrb	r3, [r3, #0]
 8000850:	4619      	mov	r1, r3
 8000852:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8000856:	fbb3 f3f1 	udiv	r3, r3, r1
 800085a:	fbb2 f3f3 	udiv	r3, r2, r3
 800085e:	4618      	mov	r0, r3
 8000860:	f000 fcf7 	bl	8001252 <HAL_SYSTICK_Config>
 8000864:	4603      	mov	r3, r0
 8000866:	2b00      	cmp	r3, #0
 8000868:	d001      	beq.n	800086e <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 800086a:	2301      	movs	r3, #1
 800086c:	e00e      	b.n	800088c <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 800086e:	687b      	ldr	r3, [r7, #4]
 8000870:	2b0f      	cmp	r3, #15
 8000872:	d80a      	bhi.n	800088a <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8000874:	2200      	movs	r2, #0
 8000876:	6879      	ldr	r1, [r7, #4]
 8000878:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 800087c:	f000 fcbf 	bl	80011fe <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8000880:	4a06      	ldr	r2, [pc, #24]	; (800089c <HAL_InitTick+0x5c>)
 8000882:	687b      	ldr	r3, [r7, #4]
 8000884:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8000886:	2300      	movs	r3, #0
 8000888:	e000      	b.n	800088c <HAL_InitTick+0x4c>
    return HAL_ERROR;
 800088a:	2301      	movs	r3, #1
}
 800088c:	4618      	mov	r0, r3
 800088e:	3708      	adds	r7, #8
 8000890:	46bd      	mov	sp, r7
 8000892:	bd80      	pop	{r7, pc}
 8000894:	20000004 	.word	0x20000004
 8000898:	2000000c 	.word	0x2000000c
 800089c:	20000008 	.word	0x20000008

080008a0 <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 80008a0:	b480      	push	{r7}
 80008a2:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 80008a4:	4b05      	ldr	r3, [pc, #20]	; (80008bc <HAL_IncTick+0x1c>)
 80008a6:	781b      	ldrb	r3, [r3, #0]
 80008a8:	461a      	mov	r2, r3
 80008aa:	4b05      	ldr	r3, [pc, #20]	; (80008c0 <HAL_IncTick+0x20>)
 80008ac:	681b      	ldr	r3, [r3, #0]
 80008ae:	4413      	add	r3, r2
 80008b0:	4a03      	ldr	r2, [pc, #12]	; (80008c0 <HAL_IncTick+0x20>)
 80008b2:	6013      	str	r3, [r2, #0]
}
 80008b4:	bf00      	nop
 80008b6:	46bd      	mov	sp, r7
 80008b8:	bc80      	pop	{r7}
 80008ba:	4770      	bx	lr
 80008bc:	2000000c 	.word	0x2000000c
 80008c0:	20002bc4 	.word	0x20002bc4

080008c4 <HAL_GetTick>:
  * @note  This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 80008c4:	b480      	push	{r7}
 80008c6:	af00      	add	r7, sp, #0
  return uwTick;
 80008c8:	4b02      	ldr	r3, [pc, #8]	; (80008d4 <HAL_GetTick+0x10>)
 80008ca:	681b      	ldr	r3, [r3, #0]
}
 80008cc:	4618      	mov	r0, r3
 80008ce:	46bd      	mov	sp, r7
 80008d0:	bc80      	pop	{r7}
 80008d2:	4770      	bx	lr
 80008d4:	20002bc4 	.word	0x20002bc4

080008d8 <HAL_ADC_Init>:
  *         of structure "ADC_InitTypeDef".
  * @param  hadc: ADC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef* hadc)
{
 80008d8:	b580      	push	{r7, lr}
 80008da:	b086      	sub	sp, #24
 80008dc:	af00      	add	r7, sp, #0
 80008de:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 80008e0:	2300      	movs	r3, #0
 80008e2:	75fb      	strb	r3, [r7, #23]
  uint32_t tmp_cr1 = 0U;
 80008e4:	2300      	movs	r3, #0
 80008e6:	613b      	str	r3, [r7, #16]
  uint32_t tmp_cr2 = 0U;
 80008e8:	2300      	movs	r3, #0
 80008ea:	60bb      	str	r3, [r7, #8]
  uint32_t tmp_sqr1 = 0U;
 80008ec:	2300      	movs	r3, #0
 80008ee:	60fb      	str	r3, [r7, #12]
  
  /* Check ADC handle */
  if(hadc == NULL)
 80008f0:	687b      	ldr	r3, [r7, #4]
 80008f2:	2b00      	cmp	r3, #0
 80008f4:	d101      	bne.n	80008fa <HAL_ADC_Init+0x22>
  {
    return HAL_ERROR;
 80008f6:	2301      	movs	r3, #1
 80008f8:	e0be      	b.n	8000a78 <HAL_ADC_Init+0x1a0>
  assert_param(IS_ADC_DATA_ALIGN(hadc->Init.DataAlign));
  assert_param(IS_ADC_SCAN_MODE(hadc->Init.ScanConvMode));
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.ContinuousConvMode));
  assert_param(IS_ADC_EXTTRIG(hadc->Init.ExternalTrigConv));
  
  if(hadc->Init.ScanConvMode != ADC_SCAN_DISABLE)
 80008fa:	687b      	ldr	r3, [r7, #4]
 80008fc:	689b      	ldr	r3, [r3, #8]
 80008fe:	2b00      	cmp	r3, #0
  /* Refer to header of this file for more details on clock enabling          */
  /* procedure.                                                               */

  /* Actions performed only if ADC is coming from state reset:                */
  /* - Initialization of ADC MSP                                              */
  if (hadc->State == HAL_ADC_STATE_RESET)
 8000900:	687b      	ldr	r3, [r7, #4]
 8000902:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8000904:	2b00      	cmp	r3, #0
 8000906:	d109      	bne.n	800091c <HAL_ADC_Init+0x44>
  {
    /* Initialize ADC error code */
    ADC_CLEAR_ERRORCODE(hadc);
 8000908:	687b      	ldr	r3, [r7, #4]
 800090a:	2200      	movs	r2, #0
 800090c:	62da      	str	r2, [r3, #44]	; 0x2c
    
    /* Allocate lock resource and initialize it */
    hadc->Lock = HAL_UNLOCKED;
 800090e:	687b      	ldr	r3, [r7, #4]
 8000910:	2200      	movs	r2, #0
 8000912:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
    
    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 8000916:	6878      	ldr	r0, [r7, #4]
 8000918:	f7ff fe7e 	bl	8000618 <HAL_ADC_MspInit>
  /* Stop potential conversion on going, on regular and injected groups */
  /* Disable ADC peripheral */
  /* Note: In case of ADC already enabled, precaution to not launch an        */
  /*       unwanted conversion while modifying register CR2 by writing 1 to   */
  /*       bit ADON.                                                          */
  tmp_hal_status = ADC_ConversionStop_Disable(hadc);
 800091c:	6878      	ldr	r0, [r7, #4]
 800091e:	f000 faf7 	bl	8000f10 <ADC_ConversionStop_Disable>
 8000922:	4603      	mov	r3, r0
 8000924:	75fb      	strb	r3, [r7, #23]
  
  
  /* Configuration of ADC parameters if previous preliminary actions are      */ 
  /* correctly completed.                                                     */
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL) &&
 8000926:	687b      	ldr	r3, [r7, #4]
 8000928:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800092a:	f003 0310 	and.w	r3, r3, #16
 800092e:	2b00      	cmp	r3, #0
 8000930:	f040 8099 	bne.w	8000a66 <HAL_ADC_Init+0x18e>
 8000934:	7dfb      	ldrb	r3, [r7, #23]
 8000936:	2b00      	cmp	r3, #0
 8000938:	f040 8095 	bne.w	8000a66 <HAL_ADC_Init+0x18e>
      (tmp_hal_status == HAL_OK)                                  )
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 800093c:	687b      	ldr	r3, [r7, #4]
 800093e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8000940:	f423 5388 	bic.w	r3, r3, #4352	; 0x1100
 8000944:	f023 0302 	bic.w	r3, r3, #2
 8000948:	f043 0202 	orr.w	r2, r3, #2
 800094c:	687b      	ldr	r3, [r7, #4]
 800094e:	629a      	str	r2, [r3, #40]	; 0x28
    /*  - continuous conversion mode                                          */
    /* Note: External trigger polarity (ADC_CR2_EXTTRIG) is set into          */
    /*       HAL_ADC_Start_xxx functions because if set in this function,     */
    /*       a conversion on injected group would start a conversion also on  */
    /*       regular group after ADC enabling.                                */
    tmp_cr2 |= (hadc->Init.DataAlign                                          |
 8000950:	687b      	ldr	r3, [r7, #4]
 8000952:	685a      	ldr	r2, [r3, #4]
                ADC_CFGR_EXTSEL(hadc, hadc->Init.ExternalTrigConv)            |
 8000954:	687b      	ldr	r3, [r7, #4]
 8000956:	69db      	ldr	r3, [r3, #28]
    tmp_cr2 |= (hadc->Init.DataAlign                                          |
 8000958:	431a      	orrs	r2, r3
                ADC_CR2_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)   );
 800095a:	687b      	ldr	r3, [r7, #4]
 800095c:	7b1b      	ldrb	r3, [r3, #12]
 800095e:	005b      	lsls	r3, r3, #1
                ADC_CFGR_EXTSEL(hadc, hadc->Init.ExternalTrigConv)            |
 8000960:	4313      	orrs	r3, r2
    tmp_cr2 |= (hadc->Init.DataAlign                                          |
 8000962:	68ba      	ldr	r2, [r7, #8]
 8000964:	4313      	orrs	r3, r2
 8000966:	60bb      	str	r3, [r7, #8]

    /* Configuration of ADC:                                                  */
    /*  - scan mode                                                           */
    /*  - discontinuous mode disable/enable                                   */
    /*  - discontinuous mode number of conversions                            */
    tmp_cr1 |= (ADC_CR1_SCAN_SET(hadc->Init.ScanConvMode));
 8000968:	687b      	ldr	r3, [r7, #4]
 800096a:	689b      	ldr	r3, [r3, #8]
 800096c:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8000970:	d003      	beq.n	800097a <HAL_ADC_Init+0xa2>
 8000972:	687b      	ldr	r3, [r7, #4]
 8000974:	689b      	ldr	r3, [r3, #8]
 8000976:	2b01      	cmp	r3, #1
 8000978:	d102      	bne.n	8000980 <HAL_ADC_Init+0xa8>
 800097a:	f44f 7380 	mov.w	r3, #256	; 0x100
 800097e:	e000      	b.n	8000982 <HAL_ADC_Init+0xaa>
 8000980:	2300      	movs	r3, #0
 8000982:	693a      	ldr	r2, [r7, #16]
 8000984:	4313      	orrs	r3, r2
 8000986:	613b      	str	r3, [r7, #16]
    
    /* Enable discontinuous mode only if continuous mode is disabled */
    /* Note: If parameter "Init.ScanConvMode" is set to disable, parameter    */
    /*       discontinuous is set anyway, but will have no effect on ADC HW.  */
    if (hadc->Init.DiscontinuousConvMode == ENABLE)
 8000988:	687b      	ldr	r3, [r7, #4]
 800098a:	7d1b      	ldrb	r3, [r3, #20]
 800098c:	2b01      	cmp	r3, #1
 800098e:	d119      	bne.n	80009c4 <HAL_ADC_Init+0xec>
    {
      if (hadc->Init.ContinuousConvMode == DISABLE)
 8000990:	687b      	ldr	r3, [r7, #4]
 8000992:	7b1b      	ldrb	r3, [r3, #12]
 8000994:	2b00      	cmp	r3, #0
 8000996:	d109      	bne.n	80009ac <HAL_ADC_Init+0xd4>
      {
        /* Enable the selected ADC regular discontinuous mode */
        /* Set the number of channels to be converted in discontinuous mode */
        SET_BIT(tmp_cr1, ADC_CR1_DISCEN                                            |
 8000998:	687b      	ldr	r3, [r7, #4]
 800099a:	699b      	ldr	r3, [r3, #24]
 800099c:	3b01      	subs	r3, #1
 800099e:	035a      	lsls	r2, r3, #13
 80009a0:	693b      	ldr	r3, [r7, #16]
 80009a2:	4313      	orrs	r3, r2
 80009a4:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 80009a8:	613b      	str	r3, [r7, #16]
 80009aa:	e00b      	b.n	80009c4 <HAL_ADC_Init+0xec>
      {
        /* ADC regular group settings continuous and sequencer discontinuous*/
        /* cannot be enabled simultaneously.                                */
        
        /* Update ADC state machine to error */
        SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 80009ac:	687b      	ldr	r3, [r7, #4]
 80009ae:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80009b0:	f043 0220 	orr.w	r2, r3, #32
 80009b4:	687b      	ldr	r3, [r7, #4]
 80009b6:	629a      	str	r2, [r3, #40]	; 0x28
        
        /* Set ADC error code to ADC IP internal error */
        SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 80009b8:	687b      	ldr	r3, [r7, #4]
 80009ba:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80009bc:	f043 0201 	orr.w	r2, r3, #1
 80009c0:	687b      	ldr	r3, [r7, #4]
 80009c2:	62da      	str	r2, [r3, #44]	; 0x2c
      }
    }
    
    /* Update ADC configuration register CR1 with previous settings */
      MODIFY_REG(hadc->Instance->CR1,
 80009c4:	687b      	ldr	r3, [r7, #4]
 80009c6:	681b      	ldr	r3, [r3, #0]
 80009c8:	685b      	ldr	r3, [r3, #4]
 80009ca:	f423 4169 	bic.w	r1, r3, #59648	; 0xe900
 80009ce:	687b      	ldr	r3, [r7, #4]
 80009d0:	681b      	ldr	r3, [r3, #0]
 80009d2:	693a      	ldr	r2, [r7, #16]
 80009d4:	430a      	orrs	r2, r1
 80009d6:	605a      	str	r2, [r3, #4]
                 ADC_CR1_DISCEN  |
                 ADC_CR1_DISCNUM    ,
                 tmp_cr1             );
    
    /* Update ADC configuration register CR2 with previous settings */
      MODIFY_REG(hadc->Instance->CR2,
 80009d8:	687b      	ldr	r3, [r7, #4]
 80009da:	681b      	ldr	r3, [r3, #0]
 80009dc:	689a      	ldr	r2, [r3, #8]
 80009de:	4b28      	ldr	r3, [pc, #160]	; (8000a80 <HAL_ADC_Init+0x1a8>)
 80009e0:	4013      	ands	r3, r2
 80009e2:	687a      	ldr	r2, [r7, #4]
 80009e4:	6812      	ldr	r2, [r2, #0]
 80009e6:	68b9      	ldr	r1, [r7, #8]
 80009e8:	430b      	orrs	r3, r1
 80009ea:	6093      	str	r3, [r2, #8]
    /*   Note: Scan mode is present by hardware on this device and, if        */
    /*   disabled, discards automatically nb of conversions. Anyway, nb of    */
    /*   conversions is forced to 0x00 for alignment over all STM32 devices.  */
    /* - if scan mode is enabled, regular channels sequence length is set to  */
    /*   parameter "NbrOfConversion"                                          */
    if (ADC_CR1_SCAN_SET(hadc->Init.ScanConvMode) == ADC_SCAN_ENABLE)
 80009ec:	687b      	ldr	r3, [r7, #4]
 80009ee:	689b      	ldr	r3, [r3, #8]
 80009f0:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80009f4:	d003      	beq.n	80009fe <HAL_ADC_Init+0x126>
 80009f6:	687b      	ldr	r3, [r7, #4]
 80009f8:	689b      	ldr	r3, [r3, #8]
 80009fa:	2b01      	cmp	r3, #1
 80009fc:	d104      	bne.n	8000a08 <HAL_ADC_Init+0x130>
    {
      tmp_sqr1 = ADC_SQR1_L_SHIFT(hadc->Init.NbrOfConversion);
 80009fe:	687b      	ldr	r3, [r7, #4]
 8000a00:	691b      	ldr	r3, [r3, #16]
 8000a02:	3b01      	subs	r3, #1
 8000a04:	051b      	lsls	r3, r3, #20
 8000a06:	60fb      	str	r3, [r7, #12]
    }
      
    MODIFY_REG(hadc->Instance->SQR1,
 8000a08:	687b      	ldr	r3, [r7, #4]
 8000a0a:	681b      	ldr	r3, [r3, #0]
 8000a0c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8000a0e:	f423 0170 	bic.w	r1, r3, #15728640	; 0xf00000
 8000a12:	687b      	ldr	r3, [r7, #4]
 8000a14:	681b      	ldr	r3, [r3, #0]
 8000a16:	68fa      	ldr	r2, [r7, #12]
 8000a18:	430a      	orrs	r2, r1
 8000a1a:	62da      	str	r2, [r3, #44]	; 0x2c
    /* ensure of no potential problem of ADC core IP clocking.                */
    /* Check through register CR2 (excluding bits set in other functions:     */
    /* execution control bits (ADON, JSWSTART, SWSTART), regular group bits   */
    /* (DMA), injected group bits (JEXTTRIG and JEXTSEL), channel internal    */
    /* measurement path bit (TSVREFE).                                        */
    if (READ_BIT(hadc->Instance->CR2, ~(ADC_CR2_ADON | ADC_CR2_DMA |
 8000a1c:	687b      	ldr	r3, [r7, #4]
 8000a1e:	681b      	ldr	r3, [r3, #0]
 8000a20:	689a      	ldr	r2, [r3, #8]
 8000a22:	4b18      	ldr	r3, [pc, #96]	; (8000a84 <HAL_ADC_Init+0x1ac>)
 8000a24:	4013      	ands	r3, r2
 8000a26:	68ba      	ldr	r2, [r7, #8]
 8000a28:	429a      	cmp	r2, r3
 8000a2a:	d10b      	bne.n	8000a44 <HAL_ADC_Init+0x16c>
                                        ADC_CR2_JEXTTRIG | ADC_CR2_JEXTSEL |
                                        ADC_CR2_TSVREFE                     ))
         == tmp_cr2)
    {
      /* Set ADC error code to none */
      ADC_CLEAR_ERRORCODE(hadc);
 8000a2c:	687b      	ldr	r3, [r7, #4]
 8000a2e:	2200      	movs	r2, #0
 8000a30:	62da      	str	r2, [r3, #44]	; 0x2c
      
      /* Set the ADC state */
      ADC_STATE_CLR_SET(hadc->State,
 8000a32:	687b      	ldr	r3, [r7, #4]
 8000a34:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8000a36:	f023 0303 	bic.w	r3, r3, #3
 8000a3a:	f043 0201 	orr.w	r2, r3, #1
 8000a3e:	687b      	ldr	r3, [r7, #4]
 8000a40:	629a      	str	r2, [r3, #40]	; 0x28
    if (READ_BIT(hadc->Instance->CR2, ~(ADC_CR2_ADON | ADC_CR2_DMA |
 8000a42:	e018      	b.n	8000a76 <HAL_ADC_Init+0x19e>
                        HAL_ADC_STATE_READY);
    }
    else
    {
      /* Update ADC state machine to error */
      ADC_STATE_CLR_SET(hadc->State,
 8000a44:	687b      	ldr	r3, [r7, #4]
 8000a46:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8000a48:	f023 0312 	bic.w	r3, r3, #18
 8000a4c:	f043 0210 	orr.w	r2, r3, #16
 8000a50:	687b      	ldr	r3, [r7, #4]
 8000a52:	629a      	str	r2, [r3, #40]	; 0x28
                        HAL_ADC_STATE_BUSY_INTERNAL,
                        HAL_ADC_STATE_ERROR_INTERNAL);
      
      /* Set ADC error code to ADC IP internal error */
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8000a54:	687b      	ldr	r3, [r7, #4]
 8000a56:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8000a58:	f043 0201 	orr.w	r2, r3, #1
 8000a5c:	687b      	ldr	r3, [r7, #4]
 8000a5e:	62da      	str	r2, [r3, #44]	; 0x2c
      
      tmp_hal_status = HAL_ERROR;
 8000a60:	2301      	movs	r3, #1
 8000a62:	75fb      	strb	r3, [r7, #23]
    if (READ_BIT(hadc->Instance->CR2, ~(ADC_CR2_ADON | ADC_CR2_DMA |
 8000a64:	e007      	b.n	8000a76 <HAL_ADC_Init+0x19e>
  
  }
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8000a66:	687b      	ldr	r3, [r7, #4]
 8000a68:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8000a6a:	f043 0210 	orr.w	r2, r3, #16
 8000a6e:	687b      	ldr	r3, [r7, #4]
 8000a70:	629a      	str	r2, [r3, #40]	; 0x28
        
    tmp_hal_status = HAL_ERROR;
 8000a72:	2301      	movs	r3, #1
 8000a74:	75fb      	strb	r3, [r7, #23]
  }
  
  /* Return function status */
  return tmp_hal_status;
 8000a76:	7dfb      	ldrb	r3, [r7, #23]
}
 8000a78:	4618      	mov	r0, r3
 8000a7a:	3718      	adds	r7, #24
 8000a7c:	46bd      	mov	sp, r7
 8000a7e:	bd80      	pop	{r7, pc}
 8000a80:	ffe1f7fd 	.word	0xffe1f7fd
 8000a84:	ff1f0efe 	.word	0xff1f0efe

08000a88 <HAL_ADC_Start_DMA>:
  * @param  pData: The destination Buffer address.
  * @param  Length: The length of data to be transferred from ADC peripheral to memory.
  * @retval None
  */
HAL_StatusTypeDef HAL_ADC_Start_DMA(ADC_HandleTypeDef* hadc, uint32_t* pData, uint32_t Length)
{
 8000a88:	b580      	push	{r7, lr}
 8000a8a:	b086      	sub	sp, #24
 8000a8c:	af00      	add	r7, sp, #0
 8000a8e:	60f8      	str	r0, [r7, #12]
 8000a90:	60b9      	str	r1, [r7, #8]
 8000a92:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8000a94:	2300      	movs	r3, #0
 8000a96:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_ADC_DMA_CAPABILITY_INSTANCE(hadc->Instance));
    
  /* Verification if multimode is disabled (for devices with several ADC)     */
  /* If multimode is enabled, dedicated function multimode conversion         */
  /* start DMA must be used.                                                  */
  if(ADC_MULTIMODE_IS_ENABLE(hadc) == RESET)
 8000a98:	68fb      	ldr	r3, [r7, #12]
 8000a9a:	681b      	ldr	r3, [r3, #0]
 8000a9c:	4a64      	ldr	r2, [pc, #400]	; (8000c30 <HAL_ADC_Start_DMA+0x1a8>)
 8000a9e:	4293      	cmp	r3, r2
 8000aa0:	d004      	beq.n	8000aac <HAL_ADC_Start_DMA+0x24>
 8000aa2:	68fb      	ldr	r3, [r7, #12]
 8000aa4:	681b      	ldr	r3, [r3, #0]
 8000aa6:	4a63      	ldr	r2, [pc, #396]	; (8000c34 <HAL_ADC_Start_DMA+0x1ac>)
 8000aa8:	4293      	cmp	r3, r2
 8000aaa:	d106      	bne.n	8000aba <HAL_ADC_Start_DMA+0x32>
 8000aac:	4b60      	ldr	r3, [pc, #384]	; (8000c30 <HAL_ADC_Start_DMA+0x1a8>)
 8000aae:	685b      	ldr	r3, [r3, #4]
 8000ab0:	f403 2370 	and.w	r3, r3, #983040	; 0xf0000
 8000ab4:	2b00      	cmp	r3, #0
 8000ab6:	f040 80b3 	bne.w	8000c20 <HAL_ADC_Start_DMA+0x198>
  {
    /* Process locked */
    __HAL_LOCK(hadc);
 8000aba:	68fb      	ldr	r3, [r7, #12]
 8000abc:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 8000ac0:	2b01      	cmp	r3, #1
 8000ac2:	d101      	bne.n	8000ac8 <HAL_ADC_Start_DMA+0x40>
 8000ac4:	2302      	movs	r3, #2
 8000ac6:	e0ae      	b.n	8000c26 <HAL_ADC_Start_DMA+0x19e>
 8000ac8:	68fb      	ldr	r3, [r7, #12]
 8000aca:	2201      	movs	r2, #1
 8000acc:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
    
    /* Enable the ADC peripheral */
    tmp_hal_status = ADC_Enable(hadc);
 8000ad0:	68f8      	ldr	r0, [r7, #12]
 8000ad2:	f000 f9cb 	bl	8000e6c <ADC_Enable>
 8000ad6:	4603      	mov	r3, r0
 8000ad8:	75fb      	strb	r3, [r7, #23]
    
    /* Start conversion if ADC is effectively enabled */
    if (tmp_hal_status == HAL_OK)
 8000ada:	7dfb      	ldrb	r3, [r7, #23]
 8000adc:	2b00      	cmp	r3, #0
 8000ade:	f040 809a 	bne.w	8000c16 <HAL_ADC_Start_DMA+0x18e>
    {
      /* Set ADC state                                                        */
      /* - Clear state bitfield related to regular group conversion results   */
      /* - Set state bitfield related to regular operation                    */
      ADC_STATE_CLR_SET(hadc->State,
 8000ae2:	68fb      	ldr	r3, [r7, #12]
 8000ae4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8000ae6:	f423 6370 	bic.w	r3, r3, #3840	; 0xf00
 8000aea:	f023 0301 	bic.w	r3, r3, #1
 8000aee:	f443 7280 	orr.w	r2, r3, #256	; 0x100
 8000af2:	68fb      	ldr	r3, [r7, #12]
 8000af4:	629a      	str	r2, [r3, #40]	; 0x28
                        HAL_ADC_STATE_REG_BUSY);
    
    /* Set group injected state (from auto-injection) and multimode state     */
    /* for all cases of multimode: independent mode, multimode ADC master     */
    /* or multimode ADC slave (for devices with several ADCs):                */
    if (ADC_NONMULTIMODE_OR_MULTIMODEMASTER(hadc))
 8000af6:	68fb      	ldr	r3, [r7, #12]
 8000af8:	681b      	ldr	r3, [r3, #0]
 8000afa:	4a4e      	ldr	r2, [pc, #312]	; (8000c34 <HAL_ADC_Start_DMA+0x1ac>)
 8000afc:	4293      	cmp	r3, r2
 8000afe:	d105      	bne.n	8000b0c <HAL_ADC_Start_DMA+0x84>
 8000b00:	4b4b      	ldr	r3, [pc, #300]	; (8000c30 <HAL_ADC_Start_DMA+0x1a8>)
 8000b02:	685b      	ldr	r3, [r3, #4]
 8000b04:	f403 2370 	and.w	r3, r3, #983040	; 0xf0000
 8000b08:	2b00      	cmp	r3, #0
 8000b0a:	d115      	bne.n	8000b38 <HAL_ADC_Start_DMA+0xb0>
    {
      /* Set ADC state (ADC independent or master) */
      CLEAR_BIT(hadc->State, HAL_ADC_STATE_MULTIMODE_SLAVE);
 8000b0c:	68fb      	ldr	r3, [r7, #12]
 8000b0e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8000b10:	f423 1280 	bic.w	r2, r3, #1048576	; 0x100000
 8000b14:	68fb      	ldr	r3, [r7, #12]
 8000b16:	629a      	str	r2, [r3, #40]	; 0x28
      
      /* If conversions on group regular are also triggering group injected,  */
      /* update ADC state.                                                    */
      if (READ_BIT(hadc->Instance->CR1, ADC_CR1_JAUTO) != RESET)
 8000b18:	68fb      	ldr	r3, [r7, #12]
 8000b1a:	681b      	ldr	r3, [r3, #0]
 8000b1c:	685b      	ldr	r3, [r3, #4]
 8000b1e:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8000b22:	2b00      	cmp	r3, #0
 8000b24:	d026      	beq.n	8000b74 <HAL_ADC_Start_DMA+0xec>
      {
        ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_INJ_EOC, HAL_ADC_STATE_INJ_BUSY);  
 8000b26:	68fb      	ldr	r3, [r7, #12]
 8000b28:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8000b2a:	f423 5340 	bic.w	r3, r3, #12288	; 0x3000
 8000b2e:	f443 5280 	orr.w	r2, r3, #4096	; 0x1000
 8000b32:	68fb      	ldr	r3, [r7, #12]
 8000b34:	629a      	str	r2, [r3, #40]	; 0x28
      if (READ_BIT(hadc->Instance->CR1, ADC_CR1_JAUTO) != RESET)
 8000b36:	e01d      	b.n	8000b74 <HAL_ADC_Start_DMA+0xec>
      }
    }
    else
    {
      /* Set ADC state (ADC slave) */
      SET_BIT(hadc->State, HAL_ADC_STATE_MULTIMODE_SLAVE);
 8000b38:	68fb      	ldr	r3, [r7, #12]
 8000b3a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8000b3c:	f443 1280 	orr.w	r2, r3, #1048576	; 0x100000
 8000b40:	68fb      	ldr	r3, [r7, #12]
 8000b42:	629a      	str	r2, [r3, #40]	; 0x28
      
      /* If conversions on group regular are also triggering group injected,  */
      /* update ADC state.                                                    */
      if (ADC_MULTIMODE_AUTO_INJECTED(hadc))
 8000b44:	68fb      	ldr	r3, [r7, #12]
 8000b46:	681b      	ldr	r3, [r3, #0]
 8000b48:	4a39      	ldr	r2, [pc, #228]	; (8000c30 <HAL_ADC_Start_DMA+0x1a8>)
 8000b4a:	4293      	cmp	r3, r2
 8000b4c:	d004      	beq.n	8000b58 <HAL_ADC_Start_DMA+0xd0>
 8000b4e:	68fb      	ldr	r3, [r7, #12]
 8000b50:	681b      	ldr	r3, [r3, #0]
 8000b52:	4a38      	ldr	r2, [pc, #224]	; (8000c34 <HAL_ADC_Start_DMA+0x1ac>)
 8000b54:	4293      	cmp	r3, r2
 8000b56:	d10d      	bne.n	8000b74 <HAL_ADC_Start_DMA+0xec>
 8000b58:	4b35      	ldr	r3, [pc, #212]	; (8000c30 <HAL_ADC_Start_DMA+0x1a8>)
 8000b5a:	685b      	ldr	r3, [r3, #4]
 8000b5c:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8000b60:	2b00      	cmp	r3, #0
 8000b62:	d007      	beq.n	8000b74 <HAL_ADC_Start_DMA+0xec>
      {
        ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_INJ_EOC, HAL_ADC_STATE_INJ_BUSY);
 8000b64:	68fb      	ldr	r3, [r7, #12]
 8000b66:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8000b68:	f423 5340 	bic.w	r3, r3, #12288	; 0x3000
 8000b6c:	f443 5280 	orr.w	r2, r3, #4096	; 0x1000
 8000b70:	68fb      	ldr	r3, [r7, #12]
 8000b72:	629a      	str	r2, [r3, #40]	; 0x28
      }
    }
      
      /* State machine update: Check if an injected conversion is ongoing */
      if (HAL_IS_BIT_SET(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 8000b74:	68fb      	ldr	r3, [r7, #12]
 8000b76:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8000b78:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8000b7c:	2b00      	cmp	r3, #0
 8000b7e:	d006      	beq.n	8000b8e <HAL_ADC_Start_DMA+0x106>
      {
        /* Reset ADC error code fields related to conversions on group regular */
        CLEAR_BIT(hadc->ErrorCode, (HAL_ADC_ERROR_OVR | HAL_ADC_ERROR_DMA));         
 8000b80:	68fb      	ldr	r3, [r7, #12]
 8000b82:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8000b84:	f023 0206 	bic.w	r2, r3, #6
 8000b88:	68fb      	ldr	r3, [r7, #12]
 8000b8a:	62da      	str	r2, [r3, #44]	; 0x2c
 8000b8c:	e002      	b.n	8000b94 <HAL_ADC_Start_DMA+0x10c>
      }
      else
      {
        /* Reset ADC all error code fields */
        ADC_CLEAR_ERRORCODE(hadc);
 8000b8e:	68fb      	ldr	r3, [r7, #12]
 8000b90:	2200      	movs	r2, #0
 8000b92:	62da      	str	r2, [r3, #44]	; 0x2c
      }
      
      /* Process unlocked */
      /* Unlock before starting ADC conversions: in case of potential         */
      /* interruption, to let the process to ADC IRQ Handler.                 */
      __HAL_UNLOCK(hadc);
 8000b94:	68fb      	ldr	r3, [r7, #12]
 8000b96:	2200      	movs	r2, #0
 8000b98:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
      
      /* Set the DMA transfer complete callback */
      hadc->DMA_Handle->XferCpltCallback = ADC_DMAConvCplt;
 8000b9c:	68fb      	ldr	r3, [r7, #12]
 8000b9e:	6a1b      	ldr	r3, [r3, #32]
 8000ba0:	4a25      	ldr	r2, [pc, #148]	; (8000c38 <HAL_ADC_Start_DMA+0x1b0>)
 8000ba2:	629a      	str	r2, [r3, #40]	; 0x28

      /* Set the DMA half transfer complete callback */
      hadc->DMA_Handle->XferHalfCpltCallback = ADC_DMAHalfConvCplt;
 8000ba4:	68fb      	ldr	r3, [r7, #12]
 8000ba6:	6a1b      	ldr	r3, [r3, #32]
 8000ba8:	4a24      	ldr	r2, [pc, #144]	; (8000c3c <HAL_ADC_Start_DMA+0x1b4>)
 8000baa:	62da      	str	r2, [r3, #44]	; 0x2c
      
      /* Set the DMA error callback */
      hadc->DMA_Handle->XferErrorCallback = ADC_DMAError;
 8000bac:	68fb      	ldr	r3, [r7, #12]
 8000bae:	6a1b      	ldr	r3, [r3, #32]
 8000bb0:	4a23      	ldr	r2, [pc, #140]	; (8000c40 <HAL_ADC_Start_DMA+0x1b8>)
 8000bb2:	631a      	str	r2, [r3, #48]	; 0x30
      /* start (in case of SW start):                                         */
      
      /* Clear regular group conversion flag and overrun flag */
      /* (To ensure of no unknown state from potential previous ADC           */
      /* operations)                                                          */
      __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_EOC);
 8000bb4:	68fb      	ldr	r3, [r7, #12]
 8000bb6:	681b      	ldr	r3, [r3, #0]
 8000bb8:	f06f 0202 	mvn.w	r2, #2
 8000bbc:	601a      	str	r2, [r3, #0]
      
      /* Enable ADC DMA mode */
      SET_BIT(hadc->Instance->CR2, ADC_CR2_DMA);
 8000bbe:	68fb      	ldr	r3, [r7, #12]
 8000bc0:	681b      	ldr	r3, [r3, #0]
 8000bc2:	689a      	ldr	r2, [r3, #8]
 8000bc4:	68fb      	ldr	r3, [r7, #12]
 8000bc6:	681b      	ldr	r3, [r3, #0]
 8000bc8:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8000bcc:	609a      	str	r2, [r3, #8]
      
      /* Start the DMA channel */
      HAL_DMA_Start_IT(hadc->DMA_Handle, (uint32_t)&hadc->Instance->DR, (uint32_t)pData, Length);
 8000bce:	68fb      	ldr	r3, [r7, #12]
 8000bd0:	6a18      	ldr	r0, [r3, #32]
 8000bd2:	68fb      	ldr	r3, [r7, #12]
 8000bd4:	681b      	ldr	r3, [r3, #0]
 8000bd6:	334c      	adds	r3, #76	; 0x4c
 8000bd8:	4619      	mov	r1, r3
 8000bda:	68ba      	ldr	r2, [r7, #8]
 8000bdc:	687b      	ldr	r3, [r7, #4]
 8000bde:	f000 fb9f 	bl	8001320 <HAL_DMA_Start_IT>
      
      /* Enable conversion of regular group.                                  */
      /* If software start has been selected, conversion starts immediately.  */
      /* If external trigger has been selected, conversion will start at next */
      /* trigger event.                                                       */
      if (ADC_IS_SOFTWARE_START_REGULAR(hadc))
 8000be2:	68fb      	ldr	r3, [r7, #12]
 8000be4:	681b      	ldr	r3, [r3, #0]
 8000be6:	689b      	ldr	r3, [r3, #8]
 8000be8:	f403 2360 	and.w	r3, r3, #917504	; 0xe0000
 8000bec:	f5b3 2f60 	cmp.w	r3, #917504	; 0xe0000
 8000bf0:	d108      	bne.n	8000c04 <HAL_ADC_Start_DMA+0x17c>
      {
        /* Start ADC conversion on regular group with SW start */
        SET_BIT(hadc->Instance->CR2, (ADC_CR2_SWSTART | ADC_CR2_EXTTRIG));
 8000bf2:	68fb      	ldr	r3, [r7, #12]
 8000bf4:	681b      	ldr	r3, [r3, #0]
 8000bf6:	689a      	ldr	r2, [r3, #8]
 8000bf8:	68fb      	ldr	r3, [r7, #12]
 8000bfa:	681b      	ldr	r3, [r3, #0]
 8000bfc:	f442 02a0 	orr.w	r2, r2, #5242880	; 0x500000
 8000c00:	609a      	str	r2, [r3, #8]
    if (tmp_hal_status == HAL_OK)
 8000c02:	e00f      	b.n	8000c24 <HAL_ADC_Start_DMA+0x19c>
      }
      else
      {
        /* Start ADC conversion on regular group with external trigger */
        SET_BIT(hadc->Instance->CR2, ADC_CR2_EXTTRIG);
 8000c04:	68fb      	ldr	r3, [r7, #12]
 8000c06:	681b      	ldr	r3, [r3, #0]
 8000c08:	689a      	ldr	r2, [r3, #8]
 8000c0a:	68fb      	ldr	r3, [r7, #12]
 8000c0c:	681b      	ldr	r3, [r3, #0]
 8000c0e:	f442 1280 	orr.w	r2, r2, #1048576	; 0x100000
 8000c12:	609a      	str	r2, [r3, #8]
    if (tmp_hal_status == HAL_OK)
 8000c14:	e006      	b.n	8000c24 <HAL_ADC_Start_DMA+0x19c>
      }
    }
    else
    {
      /* Process unlocked */
      __HAL_UNLOCK(hadc);
 8000c16:	68fb      	ldr	r3, [r7, #12]
 8000c18:	2200      	movs	r2, #0
 8000c1a:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
    if (tmp_hal_status == HAL_OK)
 8000c1e:	e001      	b.n	8000c24 <HAL_ADC_Start_DMA+0x19c>
    }
  }
  else
  {
    tmp_hal_status = HAL_ERROR;
 8000c20:	2301      	movs	r3, #1
 8000c22:	75fb      	strb	r3, [r7, #23]
  }
  
  /* Return function status */
  return tmp_hal_status;
 8000c24:	7dfb      	ldrb	r3, [r7, #23]
}
 8000c26:	4618      	mov	r0, r3
 8000c28:	3718      	adds	r7, #24
 8000c2a:	46bd      	mov	sp, r7
 8000c2c:	bd80      	pop	{r7, pc}
 8000c2e:	bf00      	nop
 8000c30:	40012400 	.word	0x40012400
 8000c34:	40012800 	.word	0x40012800
 8000c38:	08000f85 	.word	0x08000f85
 8000c3c:	08001001 	.word	0x08001001
 8000c40:	0800101d 	.word	0x0800101d

08000c44 <HAL_ADC_ConvCpltCallback>:
  * @brief  Conversion complete callback in non blocking mode 
  * @param  hadc: ADC handle
  * @retval None
  */
__weak void HAL_ADC_ConvCpltCallback(ADC_HandleTypeDef* hadc)
{
 8000c44:	b480      	push	{r7}
 8000c46:	b083      	sub	sp, #12
 8000c48:	af00      	add	r7, sp, #0
 8000c4a:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(hadc);
  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADC_ConvCpltCallback must be implemented in the user file.
   */
}
 8000c4c:	bf00      	nop
 8000c4e:	370c      	adds	r7, #12
 8000c50:	46bd      	mov	sp, r7
 8000c52:	bc80      	pop	{r7}
 8000c54:	4770      	bx	lr

08000c56 <HAL_ADC_ConvHalfCpltCallback>:
  * @brief  Conversion DMA half-transfer callback in non blocking mode 
  * @param  hadc: ADC handle
  * @retval None
  */
__weak void HAL_ADC_ConvHalfCpltCallback(ADC_HandleTypeDef* hadc)
{
 8000c56:	b480      	push	{r7}
 8000c58:	b083      	sub	sp, #12
 8000c5a:	af00      	add	r7, sp, #0
 8000c5c:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(hadc);
  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADC_ConvHalfCpltCallback must be implemented in the user file.
  */
}
 8000c5e:	bf00      	nop
 8000c60:	370c      	adds	r7, #12
 8000c62:	46bd      	mov	sp, r7
 8000c64:	bc80      	pop	{r7}
 8000c66:	4770      	bx	lr

08000c68 <HAL_ADC_ErrorCallback>:
  *        (ADC conversion with interruption or transfer by DMA)
  * @param  hadc: ADC handle
  * @retval None
  */
__weak void HAL_ADC_ErrorCallback(ADC_HandleTypeDef *hadc)
{
 8000c68:	b480      	push	{r7}
 8000c6a:	b083      	sub	sp, #12
 8000c6c:	af00      	add	r7, sp, #0
 8000c6e:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(hadc);
  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADC_ErrorCallback must be implemented in the user file.
  */
}
 8000c70:	bf00      	nop
 8000c72:	370c      	adds	r7, #12
 8000c74:	46bd      	mov	sp, r7
 8000c76:	bc80      	pop	{r7}
 8000c78:	4770      	bx	lr
	...

08000c7c <HAL_ADC_ConfigChannel>:
  * @param  hadc: ADC handle
  * @param  sConfig: Structure of ADC channel for regular group.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef* hadc, ADC_ChannelConfTypeDef* sConfig)
{ 
 8000c7c:	b480      	push	{r7}
 8000c7e:	b085      	sub	sp, #20
 8000c80:	af00      	add	r7, sp, #0
 8000c82:	6078      	str	r0, [r7, #4]
 8000c84:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8000c86:	2300      	movs	r3, #0
 8000c88:	73fb      	strb	r3, [r7, #15]
  __IO uint32_t wait_loop_index = 0U;
 8000c8a:	2300      	movs	r3, #0
 8000c8c:	60bb      	str	r3, [r7, #8]
  assert_param(IS_ADC_CHANNEL(sConfig->Channel));
  assert_param(IS_ADC_REGULAR_RANK(sConfig->Rank));
  assert_param(IS_ADC_SAMPLE_TIME(sConfig->SamplingTime));
  
  /* Process locked */
  __HAL_LOCK(hadc);
 8000c8e:	687b      	ldr	r3, [r7, #4]
 8000c90:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 8000c94:	2b01      	cmp	r3, #1
 8000c96:	d101      	bne.n	8000c9c <HAL_ADC_ConfigChannel+0x20>
 8000c98:	2302      	movs	r3, #2
 8000c9a:	e0dc      	b.n	8000e56 <HAL_ADC_ConfigChannel+0x1da>
 8000c9c:	687b      	ldr	r3, [r7, #4]
 8000c9e:	2201      	movs	r2, #1
 8000ca0:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
  
  
  /* Regular sequence configuration */
  /* For Rank 1 to 6 */
  if (sConfig->Rank < 7U)
 8000ca4:	683b      	ldr	r3, [r7, #0]
 8000ca6:	685b      	ldr	r3, [r3, #4]
 8000ca8:	2b06      	cmp	r3, #6
 8000caa:	d81c      	bhi.n	8000ce6 <HAL_ADC_ConfigChannel+0x6a>
  {
    MODIFY_REG(hadc->Instance->SQR3                        ,
 8000cac:	687b      	ldr	r3, [r7, #4]
 8000cae:	681b      	ldr	r3, [r3, #0]
 8000cb0:	6b59      	ldr	r1, [r3, #52]	; 0x34
 8000cb2:	683b      	ldr	r3, [r7, #0]
 8000cb4:	685a      	ldr	r2, [r3, #4]
 8000cb6:	4613      	mov	r3, r2
 8000cb8:	009b      	lsls	r3, r3, #2
 8000cba:	4413      	add	r3, r2
 8000cbc:	3b05      	subs	r3, #5
 8000cbe:	221f      	movs	r2, #31
 8000cc0:	fa02 f303 	lsl.w	r3, r2, r3
 8000cc4:	43db      	mvns	r3, r3
 8000cc6:	4019      	ands	r1, r3
 8000cc8:	683b      	ldr	r3, [r7, #0]
 8000cca:	6818      	ldr	r0, [r3, #0]
 8000ccc:	683b      	ldr	r3, [r7, #0]
 8000cce:	685a      	ldr	r2, [r3, #4]
 8000cd0:	4613      	mov	r3, r2
 8000cd2:	009b      	lsls	r3, r3, #2
 8000cd4:	4413      	add	r3, r2
 8000cd6:	3b05      	subs	r3, #5
 8000cd8:	fa00 f203 	lsl.w	r2, r0, r3
 8000cdc:	687b      	ldr	r3, [r7, #4]
 8000cde:	681b      	ldr	r3, [r3, #0]
 8000ce0:	430a      	orrs	r2, r1
 8000ce2:	635a      	str	r2, [r3, #52]	; 0x34
 8000ce4:	e03c      	b.n	8000d60 <HAL_ADC_ConfigChannel+0xe4>
               ADC_SQR3_RK(ADC_SQR3_SQ1, sConfig->Rank)    ,
               ADC_SQR3_RK(sConfig->Channel, sConfig->Rank) );
  }
  /* For Rank 7 to 12 */
  else if (sConfig->Rank < 13U)
 8000ce6:	683b      	ldr	r3, [r7, #0]
 8000ce8:	685b      	ldr	r3, [r3, #4]
 8000cea:	2b0c      	cmp	r3, #12
 8000cec:	d81c      	bhi.n	8000d28 <HAL_ADC_ConfigChannel+0xac>
  {
    MODIFY_REG(hadc->Instance->SQR2                        ,
 8000cee:	687b      	ldr	r3, [r7, #4]
 8000cf0:	681b      	ldr	r3, [r3, #0]
 8000cf2:	6b19      	ldr	r1, [r3, #48]	; 0x30
 8000cf4:	683b      	ldr	r3, [r7, #0]
 8000cf6:	685a      	ldr	r2, [r3, #4]
 8000cf8:	4613      	mov	r3, r2
 8000cfa:	009b      	lsls	r3, r3, #2
 8000cfc:	4413      	add	r3, r2
 8000cfe:	3b23      	subs	r3, #35	; 0x23
 8000d00:	221f      	movs	r2, #31
 8000d02:	fa02 f303 	lsl.w	r3, r2, r3
 8000d06:	43db      	mvns	r3, r3
 8000d08:	4019      	ands	r1, r3
 8000d0a:	683b      	ldr	r3, [r7, #0]
 8000d0c:	6818      	ldr	r0, [r3, #0]
 8000d0e:	683b      	ldr	r3, [r7, #0]
 8000d10:	685a      	ldr	r2, [r3, #4]
 8000d12:	4613      	mov	r3, r2
 8000d14:	009b      	lsls	r3, r3, #2
 8000d16:	4413      	add	r3, r2
 8000d18:	3b23      	subs	r3, #35	; 0x23
 8000d1a:	fa00 f203 	lsl.w	r2, r0, r3
 8000d1e:	687b      	ldr	r3, [r7, #4]
 8000d20:	681b      	ldr	r3, [r3, #0]
 8000d22:	430a      	orrs	r2, r1
 8000d24:	631a      	str	r2, [r3, #48]	; 0x30
 8000d26:	e01b      	b.n	8000d60 <HAL_ADC_ConfigChannel+0xe4>
               ADC_SQR2_RK(sConfig->Channel, sConfig->Rank) );
  }
  /* For Rank 13 to 16 */
  else
  {
    MODIFY_REG(hadc->Instance->SQR1                        ,
 8000d28:	687b      	ldr	r3, [r7, #4]
 8000d2a:	681b      	ldr	r3, [r3, #0]
 8000d2c:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 8000d2e:	683b      	ldr	r3, [r7, #0]
 8000d30:	685a      	ldr	r2, [r3, #4]
 8000d32:	4613      	mov	r3, r2
 8000d34:	009b      	lsls	r3, r3, #2
 8000d36:	4413      	add	r3, r2
 8000d38:	3b41      	subs	r3, #65	; 0x41
 8000d3a:	221f      	movs	r2, #31
 8000d3c:	fa02 f303 	lsl.w	r3, r2, r3
 8000d40:	43db      	mvns	r3, r3
 8000d42:	4019      	ands	r1, r3
 8000d44:	683b      	ldr	r3, [r7, #0]
 8000d46:	6818      	ldr	r0, [r3, #0]
 8000d48:	683b      	ldr	r3, [r7, #0]
 8000d4a:	685a      	ldr	r2, [r3, #4]
 8000d4c:	4613      	mov	r3, r2
 8000d4e:	009b      	lsls	r3, r3, #2
 8000d50:	4413      	add	r3, r2
 8000d52:	3b41      	subs	r3, #65	; 0x41
 8000d54:	fa00 f203 	lsl.w	r2, r0, r3
 8000d58:	687b      	ldr	r3, [r7, #4]
 8000d5a:	681b      	ldr	r3, [r3, #0]
 8000d5c:	430a      	orrs	r2, r1
 8000d5e:	62da      	str	r2, [r3, #44]	; 0x2c
  }
  
  
  /* Channel sampling time configuration */
  /* For channels 10 to 17 */
  if (sConfig->Channel >= ADC_CHANNEL_10)
 8000d60:	683b      	ldr	r3, [r7, #0]
 8000d62:	681b      	ldr	r3, [r3, #0]
 8000d64:	2b09      	cmp	r3, #9
 8000d66:	d91c      	bls.n	8000da2 <HAL_ADC_ConfigChannel+0x126>
  {
    MODIFY_REG(hadc->Instance->SMPR1                             ,
 8000d68:	687b      	ldr	r3, [r7, #4]
 8000d6a:	681b      	ldr	r3, [r3, #0]
 8000d6c:	68d9      	ldr	r1, [r3, #12]
 8000d6e:	683b      	ldr	r3, [r7, #0]
 8000d70:	681a      	ldr	r2, [r3, #0]
 8000d72:	4613      	mov	r3, r2
 8000d74:	005b      	lsls	r3, r3, #1
 8000d76:	4413      	add	r3, r2
 8000d78:	3b1e      	subs	r3, #30
 8000d7a:	2207      	movs	r2, #7
 8000d7c:	fa02 f303 	lsl.w	r3, r2, r3
 8000d80:	43db      	mvns	r3, r3
 8000d82:	4019      	ands	r1, r3
 8000d84:	683b      	ldr	r3, [r7, #0]
 8000d86:	6898      	ldr	r0, [r3, #8]
 8000d88:	683b      	ldr	r3, [r7, #0]
 8000d8a:	681a      	ldr	r2, [r3, #0]
 8000d8c:	4613      	mov	r3, r2
 8000d8e:	005b      	lsls	r3, r3, #1
 8000d90:	4413      	add	r3, r2
 8000d92:	3b1e      	subs	r3, #30
 8000d94:	fa00 f203 	lsl.w	r2, r0, r3
 8000d98:	687b      	ldr	r3, [r7, #4]
 8000d9a:	681b      	ldr	r3, [r3, #0]
 8000d9c:	430a      	orrs	r2, r1
 8000d9e:	60da      	str	r2, [r3, #12]
 8000da0:	e019      	b.n	8000dd6 <HAL_ADC_ConfigChannel+0x15a>
               ADC_SMPR1(ADC_SMPR1_SMP10, sConfig->Channel)      ,
               ADC_SMPR1(sConfig->SamplingTime, sConfig->Channel) );
  }
  else /* For channels 0 to 9 */
  {
    MODIFY_REG(hadc->Instance->SMPR2                             ,
 8000da2:	687b      	ldr	r3, [r7, #4]
 8000da4:	681b      	ldr	r3, [r3, #0]
 8000da6:	6919      	ldr	r1, [r3, #16]
 8000da8:	683b      	ldr	r3, [r7, #0]
 8000daa:	681a      	ldr	r2, [r3, #0]
 8000dac:	4613      	mov	r3, r2
 8000dae:	005b      	lsls	r3, r3, #1
 8000db0:	4413      	add	r3, r2
 8000db2:	2207      	movs	r2, #7
 8000db4:	fa02 f303 	lsl.w	r3, r2, r3
 8000db8:	43db      	mvns	r3, r3
 8000dba:	4019      	ands	r1, r3
 8000dbc:	683b      	ldr	r3, [r7, #0]
 8000dbe:	6898      	ldr	r0, [r3, #8]
 8000dc0:	683b      	ldr	r3, [r7, #0]
 8000dc2:	681a      	ldr	r2, [r3, #0]
 8000dc4:	4613      	mov	r3, r2
 8000dc6:	005b      	lsls	r3, r3, #1
 8000dc8:	4413      	add	r3, r2
 8000dca:	fa00 f203 	lsl.w	r2, r0, r3
 8000dce:	687b      	ldr	r3, [r7, #4]
 8000dd0:	681b      	ldr	r3, [r3, #0]
 8000dd2:	430a      	orrs	r2, r1
 8000dd4:	611a      	str	r2, [r3, #16]
               ADC_SMPR2(sConfig->SamplingTime, sConfig->Channel) );
  }
  
  /* If ADC1 Channel_16 or Channel_17 is selected, enable Temperature sensor  */
  /* and VREFINT measurement path.                                            */
  if ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) ||
 8000dd6:	683b      	ldr	r3, [r7, #0]
 8000dd8:	681b      	ldr	r3, [r3, #0]
 8000dda:	2b10      	cmp	r3, #16
 8000ddc:	d003      	beq.n	8000de6 <HAL_ADC_ConfigChannel+0x16a>
      (sConfig->Channel == ADC_CHANNEL_VREFINT)      )
 8000dde:	683b      	ldr	r3, [r7, #0]
 8000de0:	681b      	ldr	r3, [r3, #0]
  if ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) ||
 8000de2:	2b11      	cmp	r3, #17
 8000de4:	d132      	bne.n	8000e4c <HAL_ADC_ConfigChannel+0x1d0>
  {
    /* For STM32F1 devices with several ADC: Only ADC1 can access internal    */
    /* measurement channels (VrefInt/TempSensor). If these channels are       */
    /* intended to be set on other ADC instances, an error is reported.       */
    if (hadc->Instance == ADC1)
 8000de6:	687b      	ldr	r3, [r7, #4]
 8000de8:	681b      	ldr	r3, [r3, #0]
 8000dea:	4a1d      	ldr	r2, [pc, #116]	; (8000e60 <HAL_ADC_ConfigChannel+0x1e4>)
 8000dec:	4293      	cmp	r3, r2
 8000dee:	d125      	bne.n	8000e3c <HAL_ADC_ConfigChannel+0x1c0>
    {
      if (READ_BIT(hadc->Instance->CR2, ADC_CR2_TSVREFE) == RESET)
 8000df0:	687b      	ldr	r3, [r7, #4]
 8000df2:	681b      	ldr	r3, [r3, #0]
 8000df4:	689b      	ldr	r3, [r3, #8]
 8000df6:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8000dfa:	2b00      	cmp	r3, #0
 8000dfc:	d126      	bne.n	8000e4c <HAL_ADC_ConfigChannel+0x1d0>
      {
        SET_BIT(hadc->Instance->CR2, ADC_CR2_TSVREFE);
 8000dfe:	687b      	ldr	r3, [r7, #4]
 8000e00:	681b      	ldr	r3, [r3, #0]
 8000e02:	689a      	ldr	r2, [r3, #8]
 8000e04:	687b      	ldr	r3, [r7, #4]
 8000e06:	681b      	ldr	r3, [r3, #0]
 8000e08:	f442 0200 	orr.w	r2, r2, #8388608	; 0x800000
 8000e0c:	609a      	str	r2, [r3, #8]
        
        if ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR))
 8000e0e:	683b      	ldr	r3, [r7, #0]
 8000e10:	681b      	ldr	r3, [r3, #0]
 8000e12:	2b10      	cmp	r3, #16
 8000e14:	d11a      	bne.n	8000e4c <HAL_ADC_ConfigChannel+0x1d0>
        {
          /* Delay for temperature sensor stabilization time */
          /* Compute number of CPU cycles to wait for */
          wait_loop_index = (ADC_TEMPSENSOR_DELAY_US * (SystemCoreClock / 1000000U));
 8000e16:	4b13      	ldr	r3, [pc, #76]	; (8000e64 <HAL_ADC_ConfigChannel+0x1e8>)
 8000e18:	681b      	ldr	r3, [r3, #0]
 8000e1a:	4a13      	ldr	r2, [pc, #76]	; (8000e68 <HAL_ADC_ConfigChannel+0x1ec>)
 8000e1c:	fba2 2303 	umull	r2, r3, r2, r3
 8000e20:	0c9a      	lsrs	r2, r3, #18
 8000e22:	4613      	mov	r3, r2
 8000e24:	009b      	lsls	r3, r3, #2
 8000e26:	4413      	add	r3, r2
 8000e28:	005b      	lsls	r3, r3, #1
 8000e2a:	60bb      	str	r3, [r7, #8]
          while(wait_loop_index != 0U)
 8000e2c:	e002      	b.n	8000e34 <HAL_ADC_ConfigChannel+0x1b8>
          {
            wait_loop_index--;
 8000e2e:	68bb      	ldr	r3, [r7, #8]
 8000e30:	3b01      	subs	r3, #1
 8000e32:	60bb      	str	r3, [r7, #8]
          while(wait_loop_index != 0U)
 8000e34:	68bb      	ldr	r3, [r7, #8]
 8000e36:	2b00      	cmp	r3, #0
 8000e38:	d1f9      	bne.n	8000e2e <HAL_ADC_ConfigChannel+0x1b2>
 8000e3a:	e007      	b.n	8000e4c <HAL_ADC_ConfigChannel+0x1d0>
      }
    }
    else
    {
      /* Update ADC state machine to error */
      SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8000e3c:	687b      	ldr	r3, [r7, #4]
 8000e3e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8000e40:	f043 0220 	orr.w	r2, r3, #32
 8000e44:	687b      	ldr	r3, [r7, #4]
 8000e46:	629a      	str	r2, [r3, #40]	; 0x28
      
      tmp_hal_status = HAL_ERROR;
 8000e48:	2301      	movs	r3, #1
 8000e4a:	73fb      	strb	r3, [r7, #15]
    }
  }
  
  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 8000e4c:	687b      	ldr	r3, [r7, #4]
 8000e4e:	2200      	movs	r2, #0
 8000e50:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
  
  /* Return function status */
  return tmp_hal_status;
 8000e54:	7bfb      	ldrb	r3, [r7, #15]
}
 8000e56:	4618      	mov	r0, r3
 8000e58:	3714      	adds	r7, #20
 8000e5a:	46bd      	mov	sp, r7
 8000e5c:	bc80      	pop	{r7}
 8000e5e:	4770      	bx	lr
 8000e60:	40012400 	.word	0x40012400
 8000e64:	20000004 	.word	0x20000004
 8000e68:	431bde83 	.word	0x431bde83

08000e6c <ADC_Enable>:
  *         and voltage regulator must be enabled (done into HAL_ADC_Init()).
  * @param  hadc: ADC handle
  * @retval HAL status.
  */
HAL_StatusTypeDef ADC_Enable(ADC_HandleTypeDef* hadc)
{
 8000e6c:	b580      	push	{r7, lr}
 8000e6e:	b084      	sub	sp, #16
 8000e70:	af00      	add	r7, sp, #0
 8000e72:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 8000e74:	2300      	movs	r3, #0
 8000e76:	60fb      	str	r3, [r7, #12]
  __IO uint32_t wait_loop_index = 0U;
 8000e78:	2300      	movs	r3, #0
 8000e7a:	60bb      	str	r3, [r7, #8]
  
  /* ADC enable and wait for ADC ready (in case of ADC is disabled or         */
  /* enabling phase not yet completed: flag ADC ready not yet set).           */
  /* Timeout implemented to not be stuck if ADC cannot be enabled (possible   */
  /* causes: ADC clock not running, ...).                                     */
  if (ADC_IS_ENABLE(hadc) == RESET)
 8000e7c:	687b      	ldr	r3, [r7, #4]
 8000e7e:	681b      	ldr	r3, [r3, #0]
 8000e80:	689b      	ldr	r3, [r3, #8]
 8000e82:	f003 0301 	and.w	r3, r3, #1
 8000e86:	2b01      	cmp	r3, #1
 8000e88:	d039      	beq.n	8000efe <ADC_Enable+0x92>
  {
    /* Enable the Peripheral */
    __HAL_ADC_ENABLE(hadc);
 8000e8a:	687b      	ldr	r3, [r7, #4]
 8000e8c:	681b      	ldr	r3, [r3, #0]
 8000e8e:	689a      	ldr	r2, [r3, #8]
 8000e90:	687b      	ldr	r3, [r7, #4]
 8000e92:	681b      	ldr	r3, [r3, #0]
 8000e94:	f042 0201 	orr.w	r2, r2, #1
 8000e98:	609a      	str	r2, [r3, #8]
    
    /* Delay for ADC stabilization time */
    /* Compute number of CPU cycles to wait for */
    wait_loop_index = (ADC_STAB_DELAY_US * (SystemCoreClock / 1000000U));
 8000e9a:	4b1b      	ldr	r3, [pc, #108]	; (8000f08 <ADC_Enable+0x9c>)
 8000e9c:	681b      	ldr	r3, [r3, #0]
 8000e9e:	4a1b      	ldr	r2, [pc, #108]	; (8000f0c <ADC_Enable+0xa0>)
 8000ea0:	fba2 2303 	umull	r2, r3, r2, r3
 8000ea4:	0c9b      	lsrs	r3, r3, #18
 8000ea6:	60bb      	str	r3, [r7, #8]
    while(wait_loop_index != 0U)
 8000ea8:	e002      	b.n	8000eb0 <ADC_Enable+0x44>
    {
      wait_loop_index--;
 8000eaa:	68bb      	ldr	r3, [r7, #8]
 8000eac:	3b01      	subs	r3, #1
 8000eae:	60bb      	str	r3, [r7, #8]
    while(wait_loop_index != 0U)
 8000eb0:	68bb      	ldr	r3, [r7, #8]
 8000eb2:	2b00      	cmp	r3, #0
 8000eb4:	d1f9      	bne.n	8000eaa <ADC_Enable+0x3e>
    }
    
    /* Get tick count */
    tickstart = HAL_GetTick();
 8000eb6:	f7ff fd05 	bl	80008c4 <HAL_GetTick>
 8000eba:	60f8      	str	r0, [r7, #12]

    /* Wait for ADC effectively enabled */
    while(ADC_IS_ENABLE(hadc) == RESET)
 8000ebc:	e018      	b.n	8000ef0 <ADC_Enable+0x84>
    {
      if((HAL_GetTick() - tickstart) > ADC_ENABLE_TIMEOUT)
 8000ebe:	f7ff fd01 	bl	80008c4 <HAL_GetTick>
 8000ec2:	4602      	mov	r2, r0
 8000ec4:	68fb      	ldr	r3, [r7, #12]
 8000ec6:	1ad3      	subs	r3, r2, r3
 8000ec8:	2b02      	cmp	r3, #2
 8000eca:	d911      	bls.n	8000ef0 <ADC_Enable+0x84>
      {
        /* Update ADC state machine to error */
        SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8000ecc:	687b      	ldr	r3, [r7, #4]
 8000ece:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8000ed0:	f043 0210 	orr.w	r2, r3, #16
 8000ed4:	687b      	ldr	r3, [r7, #4]
 8000ed6:	629a      	str	r2, [r3, #40]	; 0x28
      
        /* Set ADC error code to ADC IP internal error */
        SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8000ed8:	687b      	ldr	r3, [r7, #4]
 8000eda:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8000edc:	f043 0201 	orr.w	r2, r3, #1
 8000ee0:	687b      	ldr	r3, [r7, #4]
 8000ee2:	62da      	str	r2, [r3, #44]	; 0x2c
        
        /* Process unlocked */
        __HAL_UNLOCK(hadc);
 8000ee4:	687b      	ldr	r3, [r7, #4]
 8000ee6:	2200      	movs	r2, #0
 8000ee8:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
      
        return HAL_ERROR;
 8000eec:	2301      	movs	r3, #1
 8000eee:	e007      	b.n	8000f00 <ADC_Enable+0x94>
    while(ADC_IS_ENABLE(hadc) == RESET)
 8000ef0:	687b      	ldr	r3, [r7, #4]
 8000ef2:	681b      	ldr	r3, [r3, #0]
 8000ef4:	689b      	ldr	r3, [r3, #8]
 8000ef6:	f003 0301 	and.w	r3, r3, #1
 8000efa:	2b01      	cmp	r3, #1
 8000efc:	d1df      	bne.n	8000ebe <ADC_Enable+0x52>
      }
    }
  }
   
  /* Return HAL status */
  return HAL_OK;
 8000efe:	2300      	movs	r3, #0
}
 8000f00:	4618      	mov	r0, r3
 8000f02:	3710      	adds	r7, #16
 8000f04:	46bd      	mov	sp, r7
 8000f06:	bd80      	pop	{r7, pc}
 8000f08:	20000004 	.word	0x20000004
 8000f0c:	431bde83 	.word	0x431bde83

08000f10 <ADC_ConversionStop_Disable>:
  *         stopped to disable the ADC.
  * @param  hadc: ADC handle
  * @retval HAL status.
  */
HAL_StatusTypeDef ADC_ConversionStop_Disable(ADC_HandleTypeDef* hadc)
{
 8000f10:	b580      	push	{r7, lr}
 8000f12:	b084      	sub	sp, #16
 8000f14:	af00      	add	r7, sp, #0
 8000f16:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 8000f18:	2300      	movs	r3, #0
 8000f1a:	60fb      	str	r3, [r7, #12]
  
  /* Verification if ADC is not already disabled */
  if (ADC_IS_ENABLE(hadc) != RESET)
 8000f1c:	687b      	ldr	r3, [r7, #4]
 8000f1e:	681b      	ldr	r3, [r3, #0]
 8000f20:	689b      	ldr	r3, [r3, #8]
 8000f22:	f003 0301 	and.w	r3, r3, #1
 8000f26:	2b01      	cmp	r3, #1
 8000f28:	d127      	bne.n	8000f7a <ADC_ConversionStop_Disable+0x6a>
  {
    /* Disable the ADC peripheral */
    __HAL_ADC_DISABLE(hadc);
 8000f2a:	687b      	ldr	r3, [r7, #4]
 8000f2c:	681b      	ldr	r3, [r3, #0]
 8000f2e:	689a      	ldr	r2, [r3, #8]
 8000f30:	687b      	ldr	r3, [r7, #4]
 8000f32:	681b      	ldr	r3, [r3, #0]
 8000f34:	f022 0201 	bic.w	r2, r2, #1
 8000f38:	609a      	str	r2, [r3, #8]
     
    /* Get tick count */
    tickstart = HAL_GetTick();
 8000f3a:	f7ff fcc3 	bl	80008c4 <HAL_GetTick>
 8000f3e:	60f8      	str	r0, [r7, #12]
    
    /* Wait for ADC effectively disabled */
    while(ADC_IS_ENABLE(hadc) != RESET)
 8000f40:	e014      	b.n	8000f6c <ADC_ConversionStop_Disable+0x5c>
    {
      if((HAL_GetTick() - tickstart) > ADC_DISABLE_TIMEOUT)
 8000f42:	f7ff fcbf 	bl	80008c4 <HAL_GetTick>
 8000f46:	4602      	mov	r2, r0
 8000f48:	68fb      	ldr	r3, [r7, #12]
 8000f4a:	1ad3      	subs	r3, r2, r3
 8000f4c:	2b02      	cmp	r3, #2
 8000f4e:	d90d      	bls.n	8000f6c <ADC_ConversionStop_Disable+0x5c>
      {
        /* Update ADC state machine to error */
        SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8000f50:	687b      	ldr	r3, [r7, #4]
 8000f52:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8000f54:	f043 0210 	orr.w	r2, r3, #16
 8000f58:	687b      	ldr	r3, [r7, #4]
 8000f5a:	629a      	str	r2, [r3, #40]	; 0x28
        
        /* Set ADC error code to ADC IP internal error */
        SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8000f5c:	687b      	ldr	r3, [r7, #4]
 8000f5e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8000f60:	f043 0201 	orr.w	r2, r3, #1
 8000f64:	687b      	ldr	r3, [r7, #4]
 8000f66:	62da      	str	r2, [r3, #44]	; 0x2c
        
        return HAL_ERROR;
 8000f68:	2301      	movs	r3, #1
 8000f6a:	e007      	b.n	8000f7c <ADC_ConversionStop_Disable+0x6c>
    while(ADC_IS_ENABLE(hadc) != RESET)
 8000f6c:	687b      	ldr	r3, [r7, #4]
 8000f6e:	681b      	ldr	r3, [r3, #0]
 8000f70:	689b      	ldr	r3, [r3, #8]
 8000f72:	f003 0301 	and.w	r3, r3, #1
 8000f76:	2b01      	cmp	r3, #1
 8000f78:	d0e3      	beq.n	8000f42 <ADC_ConversionStop_Disable+0x32>
      }
    }
  }
  
  /* Return HAL status */
  return HAL_OK;
 8000f7a:	2300      	movs	r3, #0
}
 8000f7c:	4618      	mov	r0, r3
 8000f7e:	3710      	adds	r7, #16
 8000f80:	46bd      	mov	sp, r7
 8000f82:	bd80      	pop	{r7, pc}

08000f84 <ADC_DMAConvCplt>:
  * @brief  DMA transfer complete callback. 
  * @param  hdma: pointer to DMA handle.
  * @retval None
  */
void ADC_DMAConvCplt(DMA_HandleTypeDef *hdma)
{
 8000f84:	b580      	push	{r7, lr}
 8000f86:	b084      	sub	sp, #16
 8000f88:	af00      	add	r7, sp, #0
 8000f8a:	6078      	str	r0, [r7, #4]
  /* Retrieve ADC handle corresponding to current DMA handle */
  ADC_HandleTypeDef* hadc = ( ADC_HandleTypeDef* )((DMA_HandleTypeDef* )hdma)->Parent;
 8000f8c:	687b      	ldr	r3, [r7, #4]
 8000f8e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8000f90:	60fb      	str	r3, [r7, #12]
 
  /* Update state machine on conversion status if not in error state */
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL | HAL_ADC_STATE_ERROR_DMA))
 8000f92:	68fb      	ldr	r3, [r7, #12]
 8000f94:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8000f96:	f003 0350 	and.w	r3, r3, #80	; 0x50
 8000f9a:	2b00      	cmp	r3, #0
 8000f9c:	d127      	bne.n	8000fee <ADC_DMAConvCplt+0x6a>
  {
    /* Update ADC state machine */
    SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC);
 8000f9e:	68fb      	ldr	r3, [r7, #12]
 8000fa0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8000fa2:	f443 7200 	orr.w	r2, r3, #512	; 0x200
 8000fa6:	68fb      	ldr	r3, [r7, #12]
 8000fa8:	629a      	str	r2, [r3, #40]	; 0x28
    /* Determine whether any further conversion upcoming on group regular     */
    /* by external trigger, continuous mode or scan sequence on going.        */
    /* Note: On STM32F1 devices, in case of sequencer enabled                 */
    /*       (several ranks selected), end of conversion flag is raised       */
    /*       at the end of the sequence.                                      */
    if(ADC_IS_SOFTWARE_START_REGULAR(hadc)        && 
 8000faa:	68fb      	ldr	r3, [r7, #12]
 8000fac:	681b      	ldr	r3, [r3, #0]
 8000fae:	689b      	ldr	r3, [r3, #8]
 8000fb0:	f403 2360 	and.w	r3, r3, #917504	; 0xe0000
 8000fb4:	f5b3 2f60 	cmp.w	r3, #917504	; 0xe0000
 8000fb8:	d115      	bne.n	8000fe6 <ADC_DMAConvCplt+0x62>
       (hadc->Init.ContinuousConvMode == DISABLE)   )
 8000fba:	68fb      	ldr	r3, [r7, #12]
 8000fbc:	7b1b      	ldrb	r3, [r3, #12]
    if(ADC_IS_SOFTWARE_START_REGULAR(hadc)        && 
 8000fbe:	2b00      	cmp	r3, #0
 8000fc0:	d111      	bne.n	8000fe6 <ADC_DMAConvCplt+0x62>
    {
      /* Set ADC state */
      CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);   
 8000fc2:	68fb      	ldr	r3, [r7, #12]
 8000fc4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8000fc6:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 8000fca:	68fb      	ldr	r3, [r7, #12]
 8000fcc:	629a      	str	r2, [r3, #40]	; 0x28
      
      if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 8000fce:	68fb      	ldr	r3, [r7, #12]
 8000fd0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8000fd2:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8000fd6:	2b00      	cmp	r3, #0
 8000fd8:	d105      	bne.n	8000fe6 <ADC_DMAConvCplt+0x62>
      {
        SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 8000fda:	68fb      	ldr	r3, [r7, #12]
 8000fdc:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8000fde:	f043 0201 	orr.w	r2, r3, #1
 8000fe2:	68fb      	ldr	r3, [r7, #12]
 8000fe4:	629a      	str	r2, [r3, #40]	; 0x28
    
    /* Conversion complete callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->ConvCpltCallback(hadc);
#else
    HAL_ADC_ConvCpltCallback(hadc);
 8000fe6:	68f8      	ldr	r0, [r7, #12]
 8000fe8:	f7ff fe2c 	bl	8000c44 <HAL_ADC_ConvCpltCallback>
  else
  {
    /* Call DMA error callback */
    hadc->DMA_Handle->XferErrorCallback(hdma);
  }
}
 8000fec:	e004      	b.n	8000ff8 <ADC_DMAConvCplt+0x74>
    hadc->DMA_Handle->XferErrorCallback(hdma);
 8000fee:	68fb      	ldr	r3, [r7, #12]
 8000ff0:	6a1b      	ldr	r3, [r3, #32]
 8000ff2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000ff4:	6878      	ldr	r0, [r7, #4]
 8000ff6:	4798      	blx	r3
}
 8000ff8:	bf00      	nop
 8000ffa:	3710      	adds	r7, #16
 8000ffc:	46bd      	mov	sp, r7
 8000ffe:	bd80      	pop	{r7, pc}

08001000 <ADC_DMAHalfConvCplt>:
  * @brief  DMA half transfer complete callback. 
  * @param  hdma: pointer to DMA handle.
  * @retval None
  */
void ADC_DMAHalfConvCplt(DMA_HandleTypeDef *hdma)   
{
 8001000:	b580      	push	{r7, lr}
 8001002:	b084      	sub	sp, #16
 8001004:	af00      	add	r7, sp, #0
 8001006:	6078      	str	r0, [r7, #4]
  /* Retrieve ADC handle corresponding to current DMA handle */
  ADC_HandleTypeDef* hadc = ( ADC_HandleTypeDef* )((DMA_HandleTypeDef* )hdma)->Parent;
 8001008:	687b      	ldr	r3, [r7, #4]
 800100a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800100c:	60fb      	str	r3, [r7, #12]
  
  /* Half conversion callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->ConvHalfCpltCallback(hadc);
#else
  HAL_ADC_ConvHalfCpltCallback(hadc);
 800100e:	68f8      	ldr	r0, [r7, #12]
 8001010:	f7ff fe21 	bl	8000c56 <HAL_ADC_ConvHalfCpltCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
}
 8001014:	bf00      	nop
 8001016:	3710      	adds	r7, #16
 8001018:	46bd      	mov	sp, r7
 800101a:	bd80      	pop	{r7, pc}

0800101c <ADC_DMAError>:
  * @brief  DMA error callback 
  * @param  hdma: pointer to DMA handle.
  * @retval None
  */
void ADC_DMAError(DMA_HandleTypeDef *hdma)   
{
 800101c:	b580      	push	{r7, lr}
 800101e:	b084      	sub	sp, #16
 8001020:	af00      	add	r7, sp, #0
 8001022:	6078      	str	r0, [r7, #4]
  /* Retrieve ADC handle corresponding to current DMA handle */
  ADC_HandleTypeDef* hadc = ( ADC_HandleTypeDef* )((DMA_HandleTypeDef* )hdma)->Parent;
 8001024:	687b      	ldr	r3, [r7, #4]
 8001026:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001028:	60fb      	str	r3, [r7, #12]
  
  /* Set ADC state */
  SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_DMA);
 800102a:	68fb      	ldr	r3, [r7, #12]
 800102c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800102e:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 8001032:	68fb      	ldr	r3, [r7, #12]
 8001034:	629a      	str	r2, [r3, #40]	; 0x28
  
  /* Set ADC error code to DMA error */
  SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_DMA);
 8001036:	68fb      	ldr	r3, [r7, #12]
 8001038:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800103a:	f043 0204 	orr.w	r2, r3, #4
 800103e:	68fb      	ldr	r3, [r7, #12]
 8001040:	62da      	str	r2, [r3, #44]	; 0x2c
  
  /* Error callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
  hadc->ErrorCallback(hadc);
#else
  HAL_ADC_ErrorCallback(hadc);
 8001042:	68f8      	ldr	r0, [r7, #12]
 8001044:	f7ff fe10 	bl	8000c68 <HAL_ADC_ErrorCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
}
 8001048:	bf00      	nop
 800104a:	3710      	adds	r7, #16
 800104c:	46bd      	mov	sp, r7
 800104e:	bd80      	pop	{r7, pc}

08001050 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001050:	b480      	push	{r7}
 8001052:	b085      	sub	sp, #20
 8001054:	af00      	add	r7, sp, #0
 8001056:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8001058:	687b      	ldr	r3, [r7, #4]
 800105a:	f003 0307 	and.w	r3, r3, #7
 800105e:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8001060:	4b0c      	ldr	r3, [pc, #48]	; (8001094 <__NVIC_SetPriorityGrouping+0x44>)
 8001062:	68db      	ldr	r3, [r3, #12]
 8001064:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8001066:	68ba      	ldr	r2, [r7, #8]
 8001068:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 800106c:	4013      	ands	r3, r2
 800106e:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos) );               /* Insert write key and priority group */
 8001070:	68fb      	ldr	r3, [r7, #12]
 8001072:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8001074:	68bb      	ldr	r3, [r7, #8]
 8001076:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8001078:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 800107c:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8001080:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8001082:	4a04      	ldr	r2, [pc, #16]	; (8001094 <__NVIC_SetPriorityGrouping+0x44>)
 8001084:	68bb      	ldr	r3, [r7, #8]
 8001086:	60d3      	str	r3, [r2, #12]
}
 8001088:	bf00      	nop
 800108a:	3714      	adds	r7, #20
 800108c:	46bd      	mov	sp, r7
 800108e:	bc80      	pop	{r7}
 8001090:	4770      	bx	lr
 8001092:	bf00      	nop
 8001094:	e000ed00 	.word	0xe000ed00

08001098 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8001098:	b480      	push	{r7}
 800109a:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 800109c:	4b04      	ldr	r3, [pc, #16]	; (80010b0 <__NVIC_GetPriorityGrouping+0x18>)
 800109e:	68db      	ldr	r3, [r3, #12]
 80010a0:	0a1b      	lsrs	r3, r3, #8
 80010a2:	f003 0307 	and.w	r3, r3, #7
}
 80010a6:	4618      	mov	r0, r3
 80010a8:	46bd      	mov	sp, r7
 80010aa:	bc80      	pop	{r7}
 80010ac:	4770      	bx	lr
 80010ae:	bf00      	nop
 80010b0:	e000ed00 	.word	0xe000ed00

080010b4 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80010b4:	b480      	push	{r7}
 80010b6:	b083      	sub	sp, #12
 80010b8:	af00      	add	r7, sp, #0
 80010ba:	4603      	mov	r3, r0
 80010bc:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80010be:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80010c2:	2b00      	cmp	r3, #0
 80010c4:	db0b      	blt.n	80010de <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 80010c6:	79fb      	ldrb	r3, [r7, #7]
 80010c8:	f003 021f 	and.w	r2, r3, #31
 80010cc:	4906      	ldr	r1, [pc, #24]	; (80010e8 <__NVIC_EnableIRQ+0x34>)
 80010ce:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80010d2:	095b      	lsrs	r3, r3, #5
 80010d4:	2001      	movs	r0, #1
 80010d6:	fa00 f202 	lsl.w	r2, r0, r2
 80010da:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 80010de:	bf00      	nop
 80010e0:	370c      	adds	r7, #12
 80010e2:	46bd      	mov	sp, r7
 80010e4:	bc80      	pop	{r7}
 80010e6:	4770      	bx	lr
 80010e8:	e000e100 	.word	0xe000e100

080010ec <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 80010ec:	b480      	push	{r7}
 80010ee:	b083      	sub	sp, #12
 80010f0:	af00      	add	r7, sp, #0
 80010f2:	4603      	mov	r3, r0
 80010f4:	6039      	str	r1, [r7, #0]
 80010f6:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80010f8:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80010fc:	2b00      	cmp	r3, #0
 80010fe:	db0a      	blt.n	8001116 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001100:	683b      	ldr	r3, [r7, #0]
 8001102:	b2da      	uxtb	r2, r3
 8001104:	490c      	ldr	r1, [pc, #48]	; (8001138 <__NVIC_SetPriority+0x4c>)
 8001106:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800110a:	0112      	lsls	r2, r2, #4
 800110c:	b2d2      	uxtb	r2, r2
 800110e:	440b      	add	r3, r1
 8001110:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8001114:	e00a      	b.n	800112c <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001116:	683b      	ldr	r3, [r7, #0]
 8001118:	b2da      	uxtb	r2, r3
 800111a:	4908      	ldr	r1, [pc, #32]	; (800113c <__NVIC_SetPriority+0x50>)
 800111c:	79fb      	ldrb	r3, [r7, #7]
 800111e:	f003 030f 	and.w	r3, r3, #15
 8001122:	3b04      	subs	r3, #4
 8001124:	0112      	lsls	r2, r2, #4
 8001126:	b2d2      	uxtb	r2, r2
 8001128:	440b      	add	r3, r1
 800112a:	761a      	strb	r2, [r3, #24]
}
 800112c:	bf00      	nop
 800112e:	370c      	adds	r7, #12
 8001130:	46bd      	mov	sp, r7
 8001132:	bc80      	pop	{r7}
 8001134:	4770      	bx	lr
 8001136:	bf00      	nop
 8001138:	e000e100 	.word	0xe000e100
 800113c:	e000ed00 	.word	0xe000ed00

08001140 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8001140:	b480      	push	{r7}
 8001142:	b089      	sub	sp, #36	; 0x24
 8001144:	af00      	add	r7, sp, #0
 8001146:	60f8      	str	r0, [r7, #12]
 8001148:	60b9      	str	r1, [r7, #8]
 800114a:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 800114c:	68fb      	ldr	r3, [r7, #12]
 800114e:	f003 0307 	and.w	r3, r3, #7
 8001152:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8001154:	69fb      	ldr	r3, [r7, #28]
 8001156:	f1c3 0307 	rsb	r3, r3, #7
 800115a:	2b04      	cmp	r3, #4
 800115c:	bf28      	it	cs
 800115e:	2304      	movcs	r3, #4
 8001160:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8001162:	69fb      	ldr	r3, [r7, #28]
 8001164:	3304      	adds	r3, #4
 8001166:	2b06      	cmp	r3, #6
 8001168:	d902      	bls.n	8001170 <NVIC_EncodePriority+0x30>
 800116a:	69fb      	ldr	r3, [r7, #28]
 800116c:	3b03      	subs	r3, #3
 800116e:	e000      	b.n	8001172 <NVIC_EncodePriority+0x32>
 8001170:	2300      	movs	r3, #0
 8001172:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001174:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8001178:	69bb      	ldr	r3, [r7, #24]
 800117a:	fa02 f303 	lsl.w	r3, r2, r3
 800117e:	43da      	mvns	r2, r3
 8001180:	68bb      	ldr	r3, [r7, #8]
 8001182:	401a      	ands	r2, r3
 8001184:	697b      	ldr	r3, [r7, #20]
 8001186:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8001188:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
 800118c:	697b      	ldr	r3, [r7, #20]
 800118e:	fa01 f303 	lsl.w	r3, r1, r3
 8001192:	43d9      	mvns	r1, r3
 8001194:	687b      	ldr	r3, [r7, #4]
 8001196:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001198:	4313      	orrs	r3, r2
         );
}
 800119a:	4618      	mov	r0, r3
 800119c:	3724      	adds	r7, #36	; 0x24
 800119e:	46bd      	mov	sp, r7
 80011a0:	bc80      	pop	{r7}
 80011a2:	4770      	bx	lr

080011a4 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 80011a4:	b580      	push	{r7, lr}
 80011a6:	b082      	sub	sp, #8
 80011a8:	af00      	add	r7, sp, #0
 80011aa:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 80011ac:	687b      	ldr	r3, [r7, #4]
 80011ae:	3b01      	subs	r3, #1
 80011b0:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 80011b4:	d301      	bcc.n	80011ba <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 80011b6:	2301      	movs	r3, #1
 80011b8:	e00f      	b.n	80011da <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 80011ba:	4a0a      	ldr	r2, [pc, #40]	; (80011e4 <SysTick_Config+0x40>)
 80011bc:	687b      	ldr	r3, [r7, #4]
 80011be:	3b01      	subs	r3, #1
 80011c0:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 80011c2:	210f      	movs	r1, #15
 80011c4:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 80011c8:	f7ff ff90 	bl	80010ec <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 80011cc:	4b05      	ldr	r3, [pc, #20]	; (80011e4 <SysTick_Config+0x40>)
 80011ce:	2200      	movs	r2, #0
 80011d0:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 80011d2:	4b04      	ldr	r3, [pc, #16]	; (80011e4 <SysTick_Config+0x40>)
 80011d4:	2207      	movs	r2, #7
 80011d6:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 80011d8:	2300      	movs	r3, #0
}
 80011da:	4618      	mov	r0, r3
 80011dc:	3708      	adds	r7, #8
 80011de:	46bd      	mov	sp, r7
 80011e0:	bd80      	pop	{r7, pc}
 80011e2:	bf00      	nop
 80011e4:	e000e010 	.word	0xe000e010

080011e8 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80011e8:	b580      	push	{r7, lr}
 80011ea:	b082      	sub	sp, #8
 80011ec:	af00      	add	r7, sp, #0
 80011ee:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 80011f0:	6878      	ldr	r0, [r7, #4]
 80011f2:	f7ff ff2d 	bl	8001050 <__NVIC_SetPriorityGrouping>
}
 80011f6:	bf00      	nop
 80011f8:	3708      	adds	r7, #8
 80011fa:	46bd      	mov	sp, r7
 80011fc:	bd80      	pop	{r7, pc}

080011fe <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 80011fe:	b580      	push	{r7, lr}
 8001200:	b086      	sub	sp, #24
 8001202:	af00      	add	r7, sp, #0
 8001204:	4603      	mov	r3, r0
 8001206:	60b9      	str	r1, [r7, #8]
 8001208:	607a      	str	r2, [r7, #4]
 800120a:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 800120c:	2300      	movs	r3, #0
 800120e:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8001210:	f7ff ff42 	bl	8001098 <__NVIC_GetPriorityGrouping>
 8001214:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8001216:	687a      	ldr	r2, [r7, #4]
 8001218:	68b9      	ldr	r1, [r7, #8]
 800121a:	6978      	ldr	r0, [r7, #20]
 800121c:	f7ff ff90 	bl	8001140 <NVIC_EncodePriority>
 8001220:	4602      	mov	r2, r0
 8001222:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8001226:	4611      	mov	r1, r2
 8001228:	4618      	mov	r0, r3
 800122a:	f7ff ff5f 	bl	80010ec <__NVIC_SetPriority>
}
 800122e:	bf00      	nop
 8001230:	3718      	adds	r7, #24
 8001232:	46bd      	mov	sp, r7
 8001234:	bd80      	pop	{r7, pc}

08001236 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f10xxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001236:	b580      	push	{r7, lr}
 8001238:	b082      	sub	sp, #8
 800123a:	af00      	add	r7, sp, #0
 800123c:	4603      	mov	r3, r0
 800123e:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8001240:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001244:	4618      	mov	r0, r3
 8001246:	f7ff ff35 	bl	80010b4 <__NVIC_EnableIRQ>
}
 800124a:	bf00      	nop
 800124c:	3708      	adds	r7, #8
 800124e:	46bd      	mov	sp, r7
 8001250:	bd80      	pop	{r7, pc}

08001252 <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8001252:	b580      	push	{r7, lr}
 8001254:	b082      	sub	sp, #8
 8001256:	af00      	add	r7, sp, #0
 8001258:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 800125a:	6878      	ldr	r0, [r7, #4]
 800125c:	f7ff ffa2 	bl	80011a4 <SysTick_Config>
 8001260:	4603      	mov	r3, r0
}
 8001262:	4618      	mov	r0, r3
 8001264:	3708      	adds	r7, #8
 8001266:	46bd      	mov	sp, r7
 8001268:	bd80      	pop	{r7, pc}
	...

0800126c <HAL_DMA_Init>:
  * @param  hdma: Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 800126c:	b480      	push	{r7}
 800126e:	b085      	sub	sp, #20
 8001270:	af00      	add	r7, sp, #0
 8001272:	6078      	str	r0, [r7, #4]
  uint32_t tmp = 0U;
 8001274:	2300      	movs	r3, #0
 8001276:	60fb      	str	r3, [r7, #12]

  /* Check the DMA handle allocation */
  if(hdma == NULL)
 8001278:	687b      	ldr	r3, [r7, #4]
 800127a:	2b00      	cmp	r3, #0
 800127c:	d101      	bne.n	8001282 <HAL_DMA_Init+0x16>
  {
    return HAL_ERROR;
 800127e:	2301      	movs	r3, #1
 8001280:	e043      	b.n	800130a <HAL_DMA_Init+0x9e>
    hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA2_Channel1) / ((uint32_t)DMA2_Channel2 - (uint32_t)DMA2_Channel1)) << 2;
    hdma->DmaBaseAddress = DMA2;
  }
#else
  /* DMA1 */
  hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA1_Channel1) / ((uint32_t)DMA1_Channel2 - (uint32_t)DMA1_Channel1)) << 2;
 8001282:	687b      	ldr	r3, [r7, #4]
 8001284:	681b      	ldr	r3, [r3, #0]
 8001286:	461a      	mov	r2, r3
 8001288:	4b22      	ldr	r3, [pc, #136]	; (8001314 <HAL_DMA_Init+0xa8>)
 800128a:	4413      	add	r3, r2
 800128c:	4a22      	ldr	r2, [pc, #136]	; (8001318 <HAL_DMA_Init+0xac>)
 800128e:	fba2 2303 	umull	r2, r3, r2, r3
 8001292:	091b      	lsrs	r3, r3, #4
 8001294:	009a      	lsls	r2, r3, #2
 8001296:	687b      	ldr	r3, [r7, #4]
 8001298:	641a      	str	r2, [r3, #64]	; 0x40
  hdma->DmaBaseAddress = DMA1;
 800129a:	687b      	ldr	r3, [r7, #4]
 800129c:	4a1f      	ldr	r2, [pc, #124]	; (800131c <HAL_DMA_Init+0xb0>)
 800129e:	63da      	str	r2, [r3, #60]	; 0x3c
#endif /* DMA2 */

  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 80012a0:	687b      	ldr	r3, [r7, #4]
 80012a2:	2202      	movs	r2, #2
 80012a4:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21

  /* Get the CR register value */
  tmp = hdma->Instance->CCR;
 80012a8:	687b      	ldr	r3, [r7, #4]
 80012aa:	681b      	ldr	r3, [r3, #0]
 80012ac:	681b      	ldr	r3, [r3, #0]
 80012ae:	60fb      	str	r3, [r7, #12]

  /* Clear PL, MSIZE, PSIZE, MINC, PINC, CIRC and DIR bits */
  tmp &= ((uint32_t)~(DMA_CCR_PL    | DMA_CCR_MSIZE  | DMA_CCR_PSIZE  | \
 80012b0:	68fb      	ldr	r3, [r7, #12]
 80012b2:	f423 537f 	bic.w	r3, r3, #16320	; 0x3fc0
 80012b6:	f023 0330 	bic.w	r3, r3, #48	; 0x30
 80012ba:	60fb      	str	r3, [r7, #12]
                      DMA_CCR_MINC  | DMA_CCR_PINC   | DMA_CCR_CIRC   | \
                      DMA_CCR_DIR));

  /* Prepare the DMA Channel configuration */
  tmp |=  hdma->Init.Direction        |
 80012bc:	687b      	ldr	r3, [r7, #4]
 80012be:	685a      	ldr	r2, [r3, #4]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 80012c0:	687b      	ldr	r3, [r7, #4]
 80012c2:	689b      	ldr	r3, [r3, #8]
  tmp |=  hdma->Init.Direction        |
 80012c4:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 80012c6:	687b      	ldr	r3, [r7, #4]
 80012c8:	68db      	ldr	r3, [r3, #12]
 80012ca:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 80012cc:	687b      	ldr	r3, [r7, #4]
 80012ce:	691b      	ldr	r3, [r3, #16]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 80012d0:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 80012d2:	687b      	ldr	r3, [r7, #4]
 80012d4:	695b      	ldr	r3, [r3, #20]
 80012d6:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 80012d8:	687b      	ldr	r3, [r7, #4]
 80012da:	699b      	ldr	r3, [r3, #24]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 80012dc:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 80012de:	687b      	ldr	r3, [r7, #4]
 80012e0:	69db      	ldr	r3, [r3, #28]
 80012e2:	4313      	orrs	r3, r2
  tmp |=  hdma->Init.Direction        |
 80012e4:	68fa      	ldr	r2, [r7, #12]
 80012e6:	4313      	orrs	r3, r2
 80012e8:	60fb      	str	r3, [r7, #12]

  /* Write to DMA Channel CR register */
  hdma->Instance->CCR = tmp;
 80012ea:	687b      	ldr	r3, [r7, #4]
 80012ec:	681b      	ldr	r3, [r3, #0]
 80012ee:	68fa      	ldr	r2, [r7, #12]
 80012f0:	601a      	str	r2, [r3, #0]

  /* Initialise the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 80012f2:	687b      	ldr	r3, [r7, #4]
 80012f4:	2200      	movs	r2, #0
 80012f6:	639a      	str	r2, [r3, #56]	; 0x38

  /* Initialize the DMA state*/
  hdma->State = HAL_DMA_STATE_READY;
 80012f8:	687b      	ldr	r3, [r7, #4]
 80012fa:	2201      	movs	r2, #1
 80012fc:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21
  /* Allocate lock resource and initialize it */
  hdma->Lock = HAL_UNLOCKED;
 8001300:	687b      	ldr	r3, [r7, #4]
 8001302:	2200      	movs	r2, #0
 8001304:	f883 2020 	strb.w	r2, [r3, #32]

  return HAL_OK;
 8001308:	2300      	movs	r3, #0
}
 800130a:	4618      	mov	r0, r3
 800130c:	3714      	adds	r7, #20
 800130e:	46bd      	mov	sp, r7
 8001310:	bc80      	pop	{r7}
 8001312:	4770      	bx	lr
 8001314:	bffdfff8 	.word	0xbffdfff8
 8001318:	cccccccd 	.word	0xcccccccd
 800131c:	40020000 	.word	0x40020000

08001320 <HAL_DMA_Start_IT>:
  * @param  DstAddress: The destination memory Buffer address
  * @param  DataLength: The length of data to be transferred from source to destination
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Start_IT(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8001320:	b580      	push	{r7, lr}
 8001322:	b086      	sub	sp, #24
 8001324:	af00      	add	r7, sp, #0
 8001326:	60f8      	str	r0, [r7, #12]
 8001328:	60b9      	str	r1, [r7, #8]
 800132a:	607a      	str	r2, [r7, #4]
 800132c:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 800132e:	2300      	movs	r3, #0
 8001330:	75fb      	strb	r3, [r7, #23]

  /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));

  /* Process locked */
  __HAL_LOCK(hdma);
 8001332:	68fb      	ldr	r3, [r7, #12]
 8001334:	f893 3020 	ldrb.w	r3, [r3, #32]
 8001338:	2b01      	cmp	r3, #1
 800133a:	d101      	bne.n	8001340 <HAL_DMA_Start_IT+0x20>
 800133c:	2302      	movs	r3, #2
 800133e:	e04a      	b.n	80013d6 <HAL_DMA_Start_IT+0xb6>
 8001340:	68fb      	ldr	r3, [r7, #12]
 8001342:	2201      	movs	r2, #1
 8001344:	f883 2020 	strb.w	r2, [r3, #32]
  
  if(HAL_DMA_STATE_READY == hdma->State)
 8001348:	68fb      	ldr	r3, [r7, #12]
 800134a:	f893 3021 	ldrb.w	r3, [r3, #33]	; 0x21
 800134e:	2b01      	cmp	r3, #1
 8001350:	d13a      	bne.n	80013c8 <HAL_DMA_Start_IT+0xa8>
  {
    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 8001352:	68fb      	ldr	r3, [r7, #12]
 8001354:	2202      	movs	r2, #2
 8001356:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 800135a:	68fb      	ldr	r3, [r7, #12]
 800135c:	2200      	movs	r2, #0
 800135e:	639a      	str	r2, [r3, #56]	; 0x38
    
    /* Disable the peripheral */
    __HAL_DMA_DISABLE(hdma);
 8001360:	68fb      	ldr	r3, [r7, #12]
 8001362:	681b      	ldr	r3, [r3, #0]
 8001364:	681a      	ldr	r2, [r3, #0]
 8001366:	68fb      	ldr	r3, [r7, #12]
 8001368:	681b      	ldr	r3, [r3, #0]
 800136a:	f022 0201 	bic.w	r2, r2, #1
 800136e:	601a      	str	r2, [r3, #0]
    
    /* Configure the source, destination address and the data length & clear flags*/
    DMA_SetConfig(hdma, SrcAddress, DstAddress, DataLength);
 8001370:	683b      	ldr	r3, [r7, #0]
 8001372:	687a      	ldr	r2, [r7, #4]
 8001374:	68b9      	ldr	r1, [r7, #8]
 8001376:	68f8      	ldr	r0, [r7, #12]
 8001378:	f000 f938 	bl	80015ec <DMA_SetConfig>
    
    /* Enable the transfer complete interrupt */
    /* Enable the transfer Error interrupt */
    if(NULL != hdma->XferHalfCpltCallback)
 800137c:	68fb      	ldr	r3, [r7, #12]
 800137e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001380:	2b00      	cmp	r3, #0
 8001382:	d008      	beq.n	8001396 <HAL_DMA_Start_IT+0x76>
    {
      /* Enable the Half transfer complete interrupt as well */
      __HAL_DMA_ENABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8001384:	68fb      	ldr	r3, [r7, #12]
 8001386:	681b      	ldr	r3, [r3, #0]
 8001388:	681a      	ldr	r2, [r3, #0]
 800138a:	68fb      	ldr	r3, [r7, #12]
 800138c:	681b      	ldr	r3, [r3, #0]
 800138e:	f042 020e 	orr.w	r2, r2, #14
 8001392:	601a      	str	r2, [r3, #0]
 8001394:	e00f      	b.n	80013b6 <HAL_DMA_Start_IT+0x96>
    }
    else
    {
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 8001396:	68fb      	ldr	r3, [r7, #12]
 8001398:	681b      	ldr	r3, [r3, #0]
 800139a:	681a      	ldr	r2, [r3, #0]
 800139c:	68fb      	ldr	r3, [r7, #12]
 800139e:	681b      	ldr	r3, [r3, #0]
 80013a0:	f022 0204 	bic.w	r2, r2, #4
 80013a4:	601a      	str	r2, [r3, #0]
      __HAL_DMA_ENABLE_IT(hdma, (DMA_IT_TC | DMA_IT_TE));
 80013a6:	68fb      	ldr	r3, [r7, #12]
 80013a8:	681b      	ldr	r3, [r3, #0]
 80013aa:	681a      	ldr	r2, [r3, #0]
 80013ac:	68fb      	ldr	r3, [r7, #12]
 80013ae:	681b      	ldr	r3, [r3, #0]
 80013b0:	f042 020a 	orr.w	r2, r2, #10
 80013b4:	601a      	str	r2, [r3, #0]
    }
    /* Enable the Peripheral */
    __HAL_DMA_ENABLE(hdma);
 80013b6:	68fb      	ldr	r3, [r7, #12]
 80013b8:	681b      	ldr	r3, [r3, #0]
 80013ba:	681a      	ldr	r2, [r3, #0]
 80013bc:	68fb      	ldr	r3, [r7, #12]
 80013be:	681b      	ldr	r3, [r3, #0]
 80013c0:	f042 0201 	orr.w	r2, r2, #1
 80013c4:	601a      	str	r2, [r3, #0]
 80013c6:	e005      	b.n	80013d4 <HAL_DMA_Start_IT+0xb4>
  }
  else
  {      
    /* Process Unlocked */
    __HAL_UNLOCK(hdma); 
 80013c8:	68fb      	ldr	r3, [r7, #12]
 80013ca:	2200      	movs	r2, #0
 80013cc:	f883 2020 	strb.w	r2, [r3, #32]

    /* Remain BUSY */
    status = HAL_BUSY;
 80013d0:	2302      	movs	r3, #2
 80013d2:	75fb      	strb	r3, [r7, #23]
  }    
  return status;
 80013d4:	7dfb      	ldrb	r3, [r7, #23]
}
 80013d6:	4618      	mov	r0, r3
 80013d8:	3718      	adds	r7, #24
 80013da:	46bd      	mov	sp, r7
 80013dc:	bd80      	pop	{r7, pc}
	...

080013e0 <HAL_DMA_IRQHandler>:
  * @param  hdma: pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.  
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 80013e0:	b580      	push	{r7, lr}
 80013e2:	b084      	sub	sp, #16
 80013e4:	af00      	add	r7, sp, #0
 80013e6:	6078      	str	r0, [r7, #4]
  uint32_t flag_it = hdma->DmaBaseAddress->ISR;
 80013e8:	687b      	ldr	r3, [r7, #4]
 80013ea:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80013ec:	681b      	ldr	r3, [r3, #0]
 80013ee:	60fb      	str	r3, [r7, #12]
  uint32_t source_it = hdma->Instance->CCR;
 80013f0:	687b      	ldr	r3, [r7, #4]
 80013f2:	681b      	ldr	r3, [r3, #0]
 80013f4:	681b      	ldr	r3, [r3, #0]
 80013f6:	60bb      	str	r3, [r7, #8]
  
  /* Half Transfer Complete Interrupt management ******************************/
  if (((flag_it & (DMA_FLAG_HT1 << hdma->ChannelIndex)) != RESET) && ((source_it & DMA_IT_HT) != RESET))
 80013f8:	687b      	ldr	r3, [r7, #4]
 80013fa:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80013fc:	2204      	movs	r2, #4
 80013fe:	409a      	lsls	r2, r3
 8001400:	68fb      	ldr	r3, [r7, #12]
 8001402:	4013      	ands	r3, r2
 8001404:	2b00      	cmp	r3, #0
 8001406:	d04f      	beq.n	80014a8 <HAL_DMA_IRQHandler+0xc8>
 8001408:	68bb      	ldr	r3, [r7, #8]
 800140a:	f003 0304 	and.w	r3, r3, #4
 800140e:	2b00      	cmp	r3, #0
 8001410:	d04a      	beq.n	80014a8 <HAL_DMA_IRQHandler+0xc8>
  {
    /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
    if((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 8001412:	687b      	ldr	r3, [r7, #4]
 8001414:	681b      	ldr	r3, [r3, #0]
 8001416:	681b      	ldr	r3, [r3, #0]
 8001418:	f003 0320 	and.w	r3, r3, #32
 800141c:	2b00      	cmp	r3, #0
 800141e:	d107      	bne.n	8001430 <HAL_DMA_IRQHandler+0x50>
    {
      /* Disable the half transfer interrupt */
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 8001420:	687b      	ldr	r3, [r7, #4]
 8001422:	681b      	ldr	r3, [r3, #0]
 8001424:	681a      	ldr	r2, [r3, #0]
 8001426:	687b      	ldr	r3, [r7, #4]
 8001428:	681b      	ldr	r3, [r3, #0]
 800142a:	f022 0204 	bic.w	r2, r2, #4
 800142e:	601a      	str	r2, [r3, #0]
    }
    /* Clear the half transfer complete flag */
    __HAL_DMA_CLEAR_FLAG(hdma, __HAL_DMA_GET_HT_FLAG_INDEX(hdma));
 8001430:	687b      	ldr	r3, [r7, #4]
 8001432:	681b      	ldr	r3, [r3, #0]
 8001434:	4a66      	ldr	r2, [pc, #408]	; (80015d0 <HAL_DMA_IRQHandler+0x1f0>)
 8001436:	4293      	cmp	r3, r2
 8001438:	d029      	beq.n	800148e <HAL_DMA_IRQHandler+0xae>
 800143a:	687b      	ldr	r3, [r7, #4]
 800143c:	681b      	ldr	r3, [r3, #0]
 800143e:	4a65      	ldr	r2, [pc, #404]	; (80015d4 <HAL_DMA_IRQHandler+0x1f4>)
 8001440:	4293      	cmp	r3, r2
 8001442:	d022      	beq.n	800148a <HAL_DMA_IRQHandler+0xaa>
 8001444:	687b      	ldr	r3, [r7, #4]
 8001446:	681b      	ldr	r3, [r3, #0]
 8001448:	4a63      	ldr	r2, [pc, #396]	; (80015d8 <HAL_DMA_IRQHandler+0x1f8>)
 800144a:	4293      	cmp	r3, r2
 800144c:	d01a      	beq.n	8001484 <HAL_DMA_IRQHandler+0xa4>
 800144e:	687b      	ldr	r3, [r7, #4]
 8001450:	681b      	ldr	r3, [r3, #0]
 8001452:	4a62      	ldr	r2, [pc, #392]	; (80015dc <HAL_DMA_IRQHandler+0x1fc>)
 8001454:	4293      	cmp	r3, r2
 8001456:	d012      	beq.n	800147e <HAL_DMA_IRQHandler+0x9e>
 8001458:	687b      	ldr	r3, [r7, #4]
 800145a:	681b      	ldr	r3, [r3, #0]
 800145c:	4a60      	ldr	r2, [pc, #384]	; (80015e0 <HAL_DMA_IRQHandler+0x200>)
 800145e:	4293      	cmp	r3, r2
 8001460:	d00a      	beq.n	8001478 <HAL_DMA_IRQHandler+0x98>
 8001462:	687b      	ldr	r3, [r7, #4]
 8001464:	681b      	ldr	r3, [r3, #0]
 8001466:	4a5f      	ldr	r2, [pc, #380]	; (80015e4 <HAL_DMA_IRQHandler+0x204>)
 8001468:	4293      	cmp	r3, r2
 800146a:	d102      	bne.n	8001472 <HAL_DMA_IRQHandler+0x92>
 800146c:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 8001470:	e00e      	b.n	8001490 <HAL_DMA_IRQHandler+0xb0>
 8001472:	f04f 6380 	mov.w	r3, #67108864	; 0x4000000
 8001476:	e00b      	b.n	8001490 <HAL_DMA_IRQHandler+0xb0>
 8001478:	f44f 2380 	mov.w	r3, #262144	; 0x40000
 800147c:	e008      	b.n	8001490 <HAL_DMA_IRQHandler+0xb0>
 800147e:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 8001482:	e005      	b.n	8001490 <HAL_DMA_IRQHandler+0xb0>
 8001484:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8001488:	e002      	b.n	8001490 <HAL_DMA_IRQHandler+0xb0>
 800148a:	2340      	movs	r3, #64	; 0x40
 800148c:	e000      	b.n	8001490 <HAL_DMA_IRQHandler+0xb0>
 800148e:	2304      	movs	r3, #4
 8001490:	4a55      	ldr	r2, [pc, #340]	; (80015e8 <HAL_DMA_IRQHandler+0x208>)
 8001492:	6053      	str	r3, [r2, #4]

    /* DMA peripheral state is not updated in Half Transfer */
    /* but in Transfer Complete case */

    if(hdma->XferHalfCpltCallback != NULL)
 8001494:	687b      	ldr	r3, [r7, #4]
 8001496:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001498:	2b00      	cmp	r3, #0
 800149a:	f000 8094 	beq.w	80015c6 <HAL_DMA_IRQHandler+0x1e6>
    {
      /* Half transfer callback */
      hdma->XferHalfCpltCallback(hdma);
 800149e:	687b      	ldr	r3, [r7, #4]
 80014a0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80014a2:	6878      	ldr	r0, [r7, #4]
 80014a4:	4798      	blx	r3
    if(hdma->XferHalfCpltCallback != NULL)
 80014a6:	e08e      	b.n	80015c6 <HAL_DMA_IRQHandler+0x1e6>
    }
  }

  /* Transfer Complete Interrupt management ***********************************/
  else if (((flag_it & (DMA_FLAG_TC1 << hdma->ChannelIndex)) != RESET) && ((source_it & DMA_IT_TC) != RESET))
 80014a8:	687b      	ldr	r3, [r7, #4]
 80014aa:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80014ac:	2202      	movs	r2, #2
 80014ae:	409a      	lsls	r2, r3
 80014b0:	68fb      	ldr	r3, [r7, #12]
 80014b2:	4013      	ands	r3, r2
 80014b4:	2b00      	cmp	r3, #0
 80014b6:	d056      	beq.n	8001566 <HAL_DMA_IRQHandler+0x186>
 80014b8:	68bb      	ldr	r3, [r7, #8]
 80014ba:	f003 0302 	and.w	r3, r3, #2
 80014be:	2b00      	cmp	r3, #0
 80014c0:	d051      	beq.n	8001566 <HAL_DMA_IRQHandler+0x186>
  {
    if((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 80014c2:	687b      	ldr	r3, [r7, #4]
 80014c4:	681b      	ldr	r3, [r3, #0]
 80014c6:	681b      	ldr	r3, [r3, #0]
 80014c8:	f003 0320 	and.w	r3, r3, #32
 80014cc:	2b00      	cmp	r3, #0
 80014ce:	d10b      	bne.n	80014e8 <HAL_DMA_IRQHandler+0x108>
    {
      /* Disable the transfer complete and error interrupt */
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_TE | DMA_IT_TC);  
 80014d0:	687b      	ldr	r3, [r7, #4]
 80014d2:	681b      	ldr	r3, [r3, #0]
 80014d4:	681a      	ldr	r2, [r3, #0]
 80014d6:	687b      	ldr	r3, [r7, #4]
 80014d8:	681b      	ldr	r3, [r3, #0]
 80014da:	f022 020a 	bic.w	r2, r2, #10
 80014de:	601a      	str	r2, [r3, #0]

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 80014e0:	687b      	ldr	r3, [r7, #4]
 80014e2:	2201      	movs	r2, #1
 80014e4:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21
    }
    /* Clear the transfer complete flag */
      __HAL_DMA_CLEAR_FLAG(hdma, __HAL_DMA_GET_TC_FLAG_INDEX(hdma));
 80014e8:	687b      	ldr	r3, [r7, #4]
 80014ea:	681b      	ldr	r3, [r3, #0]
 80014ec:	4a38      	ldr	r2, [pc, #224]	; (80015d0 <HAL_DMA_IRQHandler+0x1f0>)
 80014ee:	4293      	cmp	r3, r2
 80014f0:	d029      	beq.n	8001546 <HAL_DMA_IRQHandler+0x166>
 80014f2:	687b      	ldr	r3, [r7, #4]
 80014f4:	681b      	ldr	r3, [r3, #0]
 80014f6:	4a37      	ldr	r2, [pc, #220]	; (80015d4 <HAL_DMA_IRQHandler+0x1f4>)
 80014f8:	4293      	cmp	r3, r2
 80014fa:	d022      	beq.n	8001542 <HAL_DMA_IRQHandler+0x162>
 80014fc:	687b      	ldr	r3, [r7, #4]
 80014fe:	681b      	ldr	r3, [r3, #0]
 8001500:	4a35      	ldr	r2, [pc, #212]	; (80015d8 <HAL_DMA_IRQHandler+0x1f8>)
 8001502:	4293      	cmp	r3, r2
 8001504:	d01a      	beq.n	800153c <HAL_DMA_IRQHandler+0x15c>
 8001506:	687b      	ldr	r3, [r7, #4]
 8001508:	681b      	ldr	r3, [r3, #0]
 800150a:	4a34      	ldr	r2, [pc, #208]	; (80015dc <HAL_DMA_IRQHandler+0x1fc>)
 800150c:	4293      	cmp	r3, r2
 800150e:	d012      	beq.n	8001536 <HAL_DMA_IRQHandler+0x156>
 8001510:	687b      	ldr	r3, [r7, #4]
 8001512:	681b      	ldr	r3, [r3, #0]
 8001514:	4a32      	ldr	r2, [pc, #200]	; (80015e0 <HAL_DMA_IRQHandler+0x200>)
 8001516:	4293      	cmp	r3, r2
 8001518:	d00a      	beq.n	8001530 <HAL_DMA_IRQHandler+0x150>
 800151a:	687b      	ldr	r3, [r7, #4]
 800151c:	681b      	ldr	r3, [r3, #0]
 800151e:	4a31      	ldr	r2, [pc, #196]	; (80015e4 <HAL_DMA_IRQHandler+0x204>)
 8001520:	4293      	cmp	r3, r2
 8001522:	d102      	bne.n	800152a <HAL_DMA_IRQHandler+0x14a>
 8001524:	f44f 1300 	mov.w	r3, #2097152	; 0x200000
 8001528:	e00e      	b.n	8001548 <HAL_DMA_IRQHandler+0x168>
 800152a:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 800152e:	e00b      	b.n	8001548 <HAL_DMA_IRQHandler+0x168>
 8001530:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8001534:	e008      	b.n	8001548 <HAL_DMA_IRQHandler+0x168>
 8001536:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 800153a:	e005      	b.n	8001548 <HAL_DMA_IRQHandler+0x168>
 800153c:	f44f 7300 	mov.w	r3, #512	; 0x200
 8001540:	e002      	b.n	8001548 <HAL_DMA_IRQHandler+0x168>
 8001542:	2320      	movs	r3, #32
 8001544:	e000      	b.n	8001548 <HAL_DMA_IRQHandler+0x168>
 8001546:	2302      	movs	r3, #2
 8001548:	4a27      	ldr	r2, [pc, #156]	; (80015e8 <HAL_DMA_IRQHandler+0x208>)
 800154a:	6053      	str	r3, [r2, #4]

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 800154c:	687b      	ldr	r3, [r7, #4]
 800154e:	2200      	movs	r2, #0
 8001550:	f883 2020 	strb.w	r2, [r3, #32]

    if(hdma->XferCpltCallback != NULL)
 8001554:	687b      	ldr	r3, [r7, #4]
 8001556:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001558:	2b00      	cmp	r3, #0
 800155a:	d034      	beq.n	80015c6 <HAL_DMA_IRQHandler+0x1e6>
    {
      /* Transfer complete callback */
      hdma->XferCpltCallback(hdma);
 800155c:	687b      	ldr	r3, [r7, #4]
 800155e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001560:	6878      	ldr	r0, [r7, #4]
 8001562:	4798      	blx	r3
    if(hdma->XferCpltCallback != NULL)
 8001564:	e02f      	b.n	80015c6 <HAL_DMA_IRQHandler+0x1e6>
    }
  }

  /* Transfer Error Interrupt management **************************************/
  else if (( RESET != (flag_it & (DMA_FLAG_TE1 << hdma->ChannelIndex))) && (RESET != (source_it & DMA_IT_TE)))
 8001566:	687b      	ldr	r3, [r7, #4]
 8001568:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800156a:	2208      	movs	r2, #8
 800156c:	409a      	lsls	r2, r3
 800156e:	68fb      	ldr	r3, [r7, #12]
 8001570:	4013      	ands	r3, r2
 8001572:	2b00      	cmp	r3, #0
 8001574:	d028      	beq.n	80015c8 <HAL_DMA_IRQHandler+0x1e8>
 8001576:	68bb      	ldr	r3, [r7, #8]
 8001578:	f003 0308 	and.w	r3, r3, #8
 800157c:	2b00      	cmp	r3, #0
 800157e:	d023      	beq.n	80015c8 <HAL_DMA_IRQHandler+0x1e8>
  {
    /* When a DMA transfer error occurs */
    /* A hardware clear of its EN bits is performed */
    /* Disable ALL DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8001580:	687b      	ldr	r3, [r7, #4]
 8001582:	681b      	ldr	r3, [r3, #0]
 8001584:	681a      	ldr	r2, [r3, #0]
 8001586:	687b      	ldr	r3, [r7, #4]
 8001588:	681b      	ldr	r3, [r3, #0]
 800158a:	f022 020e 	bic.w	r2, r2, #14
 800158e:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << hdma->ChannelIndex);
 8001590:	687b      	ldr	r3, [r7, #4]
 8001592:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8001594:	687b      	ldr	r3, [r7, #4]
 8001596:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8001598:	2101      	movs	r1, #1
 800159a:	fa01 f202 	lsl.w	r2, r1, r2
 800159e:	605a      	str	r2, [r3, #4]

    /* Update error code */
    hdma->ErrorCode = HAL_DMA_ERROR_TE;
 80015a0:	687b      	ldr	r3, [r7, #4]
 80015a2:	2201      	movs	r2, #1
 80015a4:	639a      	str	r2, [r3, #56]	; 0x38

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 80015a6:	687b      	ldr	r3, [r7, #4]
 80015a8:	2201      	movs	r2, #1
 80015aa:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 80015ae:	687b      	ldr	r3, [r7, #4]
 80015b0:	2200      	movs	r2, #0
 80015b2:	f883 2020 	strb.w	r2, [r3, #32]

    if (hdma->XferErrorCallback != NULL)
 80015b6:	687b      	ldr	r3, [r7, #4]
 80015b8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80015ba:	2b00      	cmp	r3, #0
 80015bc:	d004      	beq.n	80015c8 <HAL_DMA_IRQHandler+0x1e8>
    {
      /* Transfer error callback */
      hdma->XferErrorCallback(hdma);
 80015be:	687b      	ldr	r3, [r7, #4]
 80015c0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80015c2:	6878      	ldr	r0, [r7, #4]
 80015c4:	4798      	blx	r3
    }
  }
  return;
 80015c6:	bf00      	nop
 80015c8:	bf00      	nop
}
 80015ca:	3710      	adds	r7, #16
 80015cc:	46bd      	mov	sp, r7
 80015ce:	bd80      	pop	{r7, pc}
 80015d0:	40020008 	.word	0x40020008
 80015d4:	4002001c 	.word	0x4002001c
 80015d8:	40020030 	.word	0x40020030
 80015dc:	40020044 	.word	0x40020044
 80015e0:	40020058 	.word	0x40020058
 80015e4:	4002006c 	.word	0x4002006c
 80015e8:	40020000 	.word	0x40020000

080015ec <DMA_SetConfig>:
  * @param  DstAddress: The destination memory Buffer address
  * @param  DataLength: The length of data to be transferred from source to destination
  * @retval HAL status
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 80015ec:	b480      	push	{r7}
 80015ee:	b085      	sub	sp, #20
 80015f0:	af00      	add	r7, sp, #0
 80015f2:	60f8      	str	r0, [r7, #12]
 80015f4:	60b9      	str	r1, [r7, #8]
 80015f6:	607a      	str	r2, [r7, #4]
 80015f8:	603b      	str	r3, [r7, #0]
  /* Clear all flags */
  hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << hdma->ChannelIndex);
 80015fa:	68fb      	ldr	r3, [r7, #12]
 80015fc:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 80015fe:	68fb      	ldr	r3, [r7, #12]
 8001600:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8001602:	2101      	movs	r1, #1
 8001604:	fa01 f202 	lsl.w	r2, r1, r2
 8001608:	605a      	str	r2, [r3, #4]

  /* Configure DMA Channel data length */
  hdma->Instance->CNDTR = DataLength;
 800160a:	68fb      	ldr	r3, [r7, #12]
 800160c:	681b      	ldr	r3, [r3, #0]
 800160e:	683a      	ldr	r2, [r7, #0]
 8001610:	605a      	str	r2, [r3, #4]

  /* Memory to Peripheral */
  if((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 8001612:	68fb      	ldr	r3, [r7, #12]
 8001614:	685b      	ldr	r3, [r3, #4]
 8001616:	2b10      	cmp	r3, #16
 8001618:	d108      	bne.n	800162c <DMA_SetConfig+0x40>
  {
    /* Configure DMA Channel destination address */
    hdma->Instance->CPAR = DstAddress;
 800161a:	68fb      	ldr	r3, [r7, #12]
 800161c:	681b      	ldr	r3, [r3, #0]
 800161e:	687a      	ldr	r2, [r7, #4]
 8001620:	609a      	str	r2, [r3, #8]

    /* Configure DMA Channel source address */
    hdma->Instance->CMAR = SrcAddress;
 8001622:	68fb      	ldr	r3, [r7, #12]
 8001624:	681b      	ldr	r3, [r3, #0]
 8001626:	68ba      	ldr	r2, [r7, #8]
 8001628:	60da      	str	r2, [r3, #12]
    hdma->Instance->CPAR = SrcAddress;

    /* Configure DMA Channel destination address */
    hdma->Instance->CMAR = DstAddress;
  }
}
 800162a:	e007      	b.n	800163c <DMA_SetConfig+0x50>
    hdma->Instance->CPAR = SrcAddress;
 800162c:	68fb      	ldr	r3, [r7, #12]
 800162e:	681b      	ldr	r3, [r3, #0]
 8001630:	68ba      	ldr	r2, [r7, #8]
 8001632:	609a      	str	r2, [r3, #8]
    hdma->Instance->CMAR = DstAddress;
 8001634:	68fb      	ldr	r3, [r7, #12]
 8001636:	681b      	ldr	r3, [r3, #0]
 8001638:	687a      	ldr	r2, [r7, #4]
 800163a:	60da      	str	r2, [r3, #12]
}
 800163c:	bf00      	nop
 800163e:	3714      	adds	r7, #20
 8001640:	46bd      	mov	sp, r7
 8001642:	bc80      	pop	{r7}
 8001644:	4770      	bx	lr
	...

08001648 <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8001648:	b480      	push	{r7}
 800164a:	b08b      	sub	sp, #44	; 0x2c
 800164c:	af00      	add	r7, sp, #0
 800164e:	6078      	str	r0, [r7, #4]
 8001650:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 8001652:	2300      	movs	r3, #0
 8001654:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t ioposition;
  uint32_t iocurrent;
  uint32_t temp;
  uint32_t config = 0x00u;
 8001656:	2300      	movs	r3, #0
 8001658:	623b      	str	r3, [r7, #32]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 800165a:	e127      	b.n	80018ac <HAL_GPIO_Init+0x264>
  {
    /* Get the IO position */
    ioposition = (0x01uL << position);
 800165c:	2201      	movs	r2, #1
 800165e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001660:	fa02 f303 	lsl.w	r3, r2, r3
 8001664:	61fb      	str	r3, [r7, #28]

    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8001666:	683b      	ldr	r3, [r7, #0]
 8001668:	681b      	ldr	r3, [r3, #0]
 800166a:	69fa      	ldr	r2, [r7, #28]
 800166c:	4013      	ands	r3, r2
 800166e:	61bb      	str	r3, [r7, #24]

    if (iocurrent == ioposition)
 8001670:	69ba      	ldr	r2, [r7, #24]
 8001672:	69fb      	ldr	r3, [r7, #28]
 8001674:	429a      	cmp	r2, r3
 8001676:	f040 8116 	bne.w	80018a6 <HAL_GPIO_Init+0x25e>
    {
      /* Check the Alternate function parameters */
      assert_param(IS_GPIO_AF_INSTANCE(GPIOx));

      /* Based on the required mode, filling config variable with MODEy[1:0] and CNFy[3:2] corresponding bits */
      switch (GPIO_Init->Mode)
 800167a:	683b      	ldr	r3, [r7, #0]
 800167c:	685b      	ldr	r3, [r3, #4]
 800167e:	2b12      	cmp	r3, #18
 8001680:	d034      	beq.n	80016ec <HAL_GPIO_Init+0xa4>
 8001682:	2b12      	cmp	r3, #18
 8001684:	d80d      	bhi.n	80016a2 <HAL_GPIO_Init+0x5a>
 8001686:	2b02      	cmp	r3, #2
 8001688:	d02b      	beq.n	80016e2 <HAL_GPIO_Init+0x9a>
 800168a:	2b02      	cmp	r3, #2
 800168c:	d804      	bhi.n	8001698 <HAL_GPIO_Init+0x50>
 800168e:	2b00      	cmp	r3, #0
 8001690:	d031      	beq.n	80016f6 <HAL_GPIO_Init+0xae>
 8001692:	2b01      	cmp	r3, #1
 8001694:	d01c      	beq.n	80016d0 <HAL_GPIO_Init+0x88>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
          break;

        /* Parameters are checked with assert_param */
        default:
          break;
 8001696:	e048      	b.n	800172a <HAL_GPIO_Init+0xe2>
      switch (GPIO_Init->Mode)
 8001698:	2b03      	cmp	r3, #3
 800169a:	d043      	beq.n	8001724 <HAL_GPIO_Init+0xdc>
 800169c:	2b11      	cmp	r3, #17
 800169e:	d01b      	beq.n	80016d8 <HAL_GPIO_Init+0x90>
          break;
 80016a0:	e043      	b.n	800172a <HAL_GPIO_Init+0xe2>
      switch (GPIO_Init->Mode)
 80016a2:	4a89      	ldr	r2, [pc, #548]	; (80018c8 <HAL_GPIO_Init+0x280>)
 80016a4:	4293      	cmp	r3, r2
 80016a6:	d026      	beq.n	80016f6 <HAL_GPIO_Init+0xae>
 80016a8:	4a87      	ldr	r2, [pc, #540]	; (80018c8 <HAL_GPIO_Init+0x280>)
 80016aa:	4293      	cmp	r3, r2
 80016ac:	d806      	bhi.n	80016bc <HAL_GPIO_Init+0x74>
 80016ae:	4a87      	ldr	r2, [pc, #540]	; (80018cc <HAL_GPIO_Init+0x284>)
 80016b0:	4293      	cmp	r3, r2
 80016b2:	d020      	beq.n	80016f6 <HAL_GPIO_Init+0xae>
 80016b4:	4a86      	ldr	r2, [pc, #536]	; (80018d0 <HAL_GPIO_Init+0x288>)
 80016b6:	4293      	cmp	r3, r2
 80016b8:	d01d      	beq.n	80016f6 <HAL_GPIO_Init+0xae>
          break;
 80016ba:	e036      	b.n	800172a <HAL_GPIO_Init+0xe2>
      switch (GPIO_Init->Mode)
 80016bc:	4a85      	ldr	r2, [pc, #532]	; (80018d4 <HAL_GPIO_Init+0x28c>)
 80016be:	4293      	cmp	r3, r2
 80016c0:	d019      	beq.n	80016f6 <HAL_GPIO_Init+0xae>
 80016c2:	4a85      	ldr	r2, [pc, #532]	; (80018d8 <HAL_GPIO_Init+0x290>)
 80016c4:	4293      	cmp	r3, r2
 80016c6:	d016      	beq.n	80016f6 <HAL_GPIO_Init+0xae>
 80016c8:	4a84      	ldr	r2, [pc, #528]	; (80018dc <HAL_GPIO_Init+0x294>)
 80016ca:	4293      	cmp	r3, r2
 80016cc:	d013      	beq.n	80016f6 <HAL_GPIO_Init+0xae>
          break;
 80016ce:	e02c      	b.n	800172a <HAL_GPIO_Init+0xe2>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_PP;
 80016d0:	683b      	ldr	r3, [r7, #0]
 80016d2:	68db      	ldr	r3, [r3, #12]
 80016d4:	623b      	str	r3, [r7, #32]
          break;
 80016d6:	e028      	b.n	800172a <HAL_GPIO_Init+0xe2>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_OD;
 80016d8:	683b      	ldr	r3, [r7, #0]
 80016da:	68db      	ldr	r3, [r3, #12]
 80016dc:	3304      	adds	r3, #4
 80016de:	623b      	str	r3, [r7, #32]
          break;
 80016e0:	e023      	b.n	800172a <HAL_GPIO_Init+0xe2>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_PP;
 80016e2:	683b      	ldr	r3, [r7, #0]
 80016e4:	68db      	ldr	r3, [r3, #12]
 80016e6:	3308      	adds	r3, #8
 80016e8:	623b      	str	r3, [r7, #32]
          break;
 80016ea:	e01e      	b.n	800172a <HAL_GPIO_Init+0xe2>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_OD;
 80016ec:	683b      	ldr	r3, [r7, #0]
 80016ee:	68db      	ldr	r3, [r3, #12]
 80016f0:	330c      	adds	r3, #12
 80016f2:	623b      	str	r3, [r7, #32]
          break;
 80016f4:	e019      	b.n	800172a <HAL_GPIO_Init+0xe2>
          if (GPIO_Init->Pull == GPIO_NOPULL)
 80016f6:	683b      	ldr	r3, [r7, #0]
 80016f8:	689b      	ldr	r3, [r3, #8]
 80016fa:	2b00      	cmp	r3, #0
 80016fc:	d102      	bne.n	8001704 <HAL_GPIO_Init+0xbc>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_FLOATING;
 80016fe:	2304      	movs	r3, #4
 8001700:	623b      	str	r3, [r7, #32]
          break;
 8001702:	e012      	b.n	800172a <HAL_GPIO_Init+0xe2>
          else if (GPIO_Init->Pull == GPIO_PULLUP)
 8001704:	683b      	ldr	r3, [r7, #0]
 8001706:	689b      	ldr	r3, [r3, #8]
 8001708:	2b01      	cmp	r3, #1
 800170a:	d105      	bne.n	8001718 <HAL_GPIO_Init+0xd0>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 800170c:	2308      	movs	r3, #8
 800170e:	623b      	str	r3, [r7, #32]
            GPIOx->BSRR = ioposition;
 8001710:	687b      	ldr	r3, [r7, #4]
 8001712:	69fa      	ldr	r2, [r7, #28]
 8001714:	611a      	str	r2, [r3, #16]
          break;
 8001716:	e008      	b.n	800172a <HAL_GPIO_Init+0xe2>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 8001718:	2308      	movs	r3, #8
 800171a:	623b      	str	r3, [r7, #32]
            GPIOx->BRR = ioposition;
 800171c:	687b      	ldr	r3, [r7, #4]
 800171e:	69fa      	ldr	r2, [r7, #28]
 8001720:	615a      	str	r2, [r3, #20]
          break;
 8001722:	e002      	b.n	800172a <HAL_GPIO_Init+0xe2>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
 8001724:	2300      	movs	r3, #0
 8001726:	623b      	str	r3, [r7, #32]
          break;
 8001728:	bf00      	nop
      }

      /* Check if the current bit belongs to first half or last half of the pin count number
       in order to address CRH or CRL register*/
      configregister = (iocurrent < GPIO_PIN_8) ? &GPIOx->CRL     : &GPIOx->CRH;
 800172a:	69bb      	ldr	r3, [r7, #24]
 800172c:	2bff      	cmp	r3, #255	; 0xff
 800172e:	d801      	bhi.n	8001734 <HAL_GPIO_Init+0xec>
 8001730:	687b      	ldr	r3, [r7, #4]
 8001732:	e001      	b.n	8001738 <HAL_GPIO_Init+0xf0>
 8001734:	687b      	ldr	r3, [r7, #4]
 8001736:	3304      	adds	r3, #4
 8001738:	617b      	str	r3, [r7, #20]
      registeroffset = (iocurrent < GPIO_PIN_8) ? (position << 2u) : ((position - 8u) << 2u);
 800173a:	69bb      	ldr	r3, [r7, #24]
 800173c:	2bff      	cmp	r3, #255	; 0xff
 800173e:	d802      	bhi.n	8001746 <HAL_GPIO_Init+0xfe>
 8001740:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001742:	009b      	lsls	r3, r3, #2
 8001744:	e002      	b.n	800174c <HAL_GPIO_Init+0x104>
 8001746:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001748:	3b08      	subs	r3, #8
 800174a:	009b      	lsls	r3, r3, #2
 800174c:	613b      	str	r3, [r7, #16]

      /* Apply the new configuration of the pin to the register */
      MODIFY_REG((*configregister), ((GPIO_CRL_MODE0 | GPIO_CRL_CNF0) << registeroffset), (config << registeroffset));
 800174e:	697b      	ldr	r3, [r7, #20]
 8001750:	681a      	ldr	r2, [r3, #0]
 8001752:	210f      	movs	r1, #15
 8001754:	693b      	ldr	r3, [r7, #16]
 8001756:	fa01 f303 	lsl.w	r3, r1, r3
 800175a:	43db      	mvns	r3, r3
 800175c:	401a      	ands	r2, r3
 800175e:	6a39      	ldr	r1, [r7, #32]
 8001760:	693b      	ldr	r3, [r7, #16]
 8001762:	fa01 f303 	lsl.w	r3, r1, r3
 8001766:	431a      	orrs	r2, r3
 8001768:	697b      	ldr	r3, [r7, #20]
 800176a:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 800176c:	683b      	ldr	r3, [r7, #0]
 800176e:	685b      	ldr	r3, [r3, #4]
 8001770:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001774:	2b00      	cmp	r3, #0
 8001776:	f000 8096 	beq.w	80018a6 <HAL_GPIO_Init+0x25e>
      {
        /* Enable AFIO Clock */
        __HAL_RCC_AFIO_CLK_ENABLE();
 800177a:	4b59      	ldr	r3, [pc, #356]	; (80018e0 <HAL_GPIO_Init+0x298>)
 800177c:	699b      	ldr	r3, [r3, #24]
 800177e:	4a58      	ldr	r2, [pc, #352]	; (80018e0 <HAL_GPIO_Init+0x298>)
 8001780:	f043 0301 	orr.w	r3, r3, #1
 8001784:	6193      	str	r3, [r2, #24]
 8001786:	4b56      	ldr	r3, [pc, #344]	; (80018e0 <HAL_GPIO_Init+0x298>)
 8001788:	699b      	ldr	r3, [r3, #24]
 800178a:	f003 0301 	and.w	r3, r3, #1
 800178e:	60bb      	str	r3, [r7, #8]
 8001790:	68bb      	ldr	r3, [r7, #8]
        temp = AFIO->EXTICR[position >> 2u];
 8001792:	4a54      	ldr	r2, [pc, #336]	; (80018e4 <HAL_GPIO_Init+0x29c>)
 8001794:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001796:	089b      	lsrs	r3, r3, #2
 8001798:	3302      	adds	r3, #2
 800179a:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800179e:	60fb      	str	r3, [r7, #12]
        CLEAR_BIT(temp, (0x0Fu) << (4u * (position & 0x03u)));
 80017a0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80017a2:	f003 0303 	and.w	r3, r3, #3
 80017a6:	009b      	lsls	r3, r3, #2
 80017a8:	220f      	movs	r2, #15
 80017aa:	fa02 f303 	lsl.w	r3, r2, r3
 80017ae:	43db      	mvns	r3, r3
 80017b0:	68fa      	ldr	r2, [r7, #12]
 80017b2:	4013      	ands	r3, r2
 80017b4:	60fb      	str	r3, [r7, #12]
        SET_BIT(temp, (GPIO_GET_INDEX(GPIOx)) << (4u * (position & 0x03u)));
 80017b6:	687b      	ldr	r3, [r7, #4]
 80017b8:	4a4b      	ldr	r2, [pc, #300]	; (80018e8 <HAL_GPIO_Init+0x2a0>)
 80017ba:	4293      	cmp	r3, r2
 80017bc:	d013      	beq.n	80017e6 <HAL_GPIO_Init+0x19e>
 80017be:	687b      	ldr	r3, [r7, #4]
 80017c0:	4a4a      	ldr	r2, [pc, #296]	; (80018ec <HAL_GPIO_Init+0x2a4>)
 80017c2:	4293      	cmp	r3, r2
 80017c4:	d00d      	beq.n	80017e2 <HAL_GPIO_Init+0x19a>
 80017c6:	687b      	ldr	r3, [r7, #4]
 80017c8:	4a49      	ldr	r2, [pc, #292]	; (80018f0 <HAL_GPIO_Init+0x2a8>)
 80017ca:	4293      	cmp	r3, r2
 80017cc:	d007      	beq.n	80017de <HAL_GPIO_Init+0x196>
 80017ce:	687b      	ldr	r3, [r7, #4]
 80017d0:	4a48      	ldr	r2, [pc, #288]	; (80018f4 <HAL_GPIO_Init+0x2ac>)
 80017d2:	4293      	cmp	r3, r2
 80017d4:	d101      	bne.n	80017da <HAL_GPIO_Init+0x192>
 80017d6:	2303      	movs	r3, #3
 80017d8:	e006      	b.n	80017e8 <HAL_GPIO_Init+0x1a0>
 80017da:	2304      	movs	r3, #4
 80017dc:	e004      	b.n	80017e8 <HAL_GPIO_Init+0x1a0>
 80017de:	2302      	movs	r3, #2
 80017e0:	e002      	b.n	80017e8 <HAL_GPIO_Init+0x1a0>
 80017e2:	2301      	movs	r3, #1
 80017e4:	e000      	b.n	80017e8 <HAL_GPIO_Init+0x1a0>
 80017e6:	2300      	movs	r3, #0
 80017e8:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80017ea:	f002 0203 	and.w	r2, r2, #3
 80017ee:	0092      	lsls	r2, r2, #2
 80017f0:	4093      	lsls	r3, r2
 80017f2:	68fa      	ldr	r2, [r7, #12]
 80017f4:	4313      	orrs	r3, r2
 80017f6:	60fb      	str	r3, [r7, #12]
        AFIO->EXTICR[position >> 2u] = temp;
 80017f8:	493a      	ldr	r1, [pc, #232]	; (80018e4 <HAL_GPIO_Init+0x29c>)
 80017fa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80017fc:	089b      	lsrs	r3, r3, #2
 80017fe:	3302      	adds	r3, #2
 8001800:	68fa      	ldr	r2, [r7, #12]
 8001802:	f841 2023 	str.w	r2, [r1, r3, lsl #2]


        /* Configure the interrupt mask */
        if ((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 8001806:	683b      	ldr	r3, [r7, #0]
 8001808:	685b      	ldr	r3, [r3, #4]
 800180a:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800180e:	2b00      	cmp	r3, #0
 8001810:	d006      	beq.n	8001820 <HAL_GPIO_Init+0x1d8>
        {
          SET_BIT(EXTI->IMR, iocurrent);
 8001812:	4b39      	ldr	r3, [pc, #228]	; (80018f8 <HAL_GPIO_Init+0x2b0>)
 8001814:	681a      	ldr	r2, [r3, #0]
 8001816:	4938      	ldr	r1, [pc, #224]	; (80018f8 <HAL_GPIO_Init+0x2b0>)
 8001818:	69bb      	ldr	r3, [r7, #24]
 800181a:	4313      	orrs	r3, r2
 800181c:	600b      	str	r3, [r1, #0]
 800181e:	e006      	b.n	800182e <HAL_GPIO_Init+0x1e6>
        }
        else
        {
          CLEAR_BIT(EXTI->IMR, iocurrent);
 8001820:	4b35      	ldr	r3, [pc, #212]	; (80018f8 <HAL_GPIO_Init+0x2b0>)
 8001822:	681a      	ldr	r2, [r3, #0]
 8001824:	69bb      	ldr	r3, [r7, #24]
 8001826:	43db      	mvns	r3, r3
 8001828:	4933      	ldr	r1, [pc, #204]	; (80018f8 <HAL_GPIO_Init+0x2b0>)
 800182a:	4013      	ands	r3, r2
 800182c:	600b      	str	r3, [r1, #0]
        }

        /* Configure the event mask */
        if ((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 800182e:	683b      	ldr	r3, [r7, #0]
 8001830:	685b      	ldr	r3, [r3, #4]
 8001832:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001836:	2b00      	cmp	r3, #0
 8001838:	d006      	beq.n	8001848 <HAL_GPIO_Init+0x200>
        {
          SET_BIT(EXTI->EMR, iocurrent);
 800183a:	4b2f      	ldr	r3, [pc, #188]	; (80018f8 <HAL_GPIO_Init+0x2b0>)
 800183c:	685a      	ldr	r2, [r3, #4]
 800183e:	492e      	ldr	r1, [pc, #184]	; (80018f8 <HAL_GPIO_Init+0x2b0>)
 8001840:	69bb      	ldr	r3, [r7, #24]
 8001842:	4313      	orrs	r3, r2
 8001844:	604b      	str	r3, [r1, #4]
 8001846:	e006      	b.n	8001856 <HAL_GPIO_Init+0x20e>
        }
        else
        {
          CLEAR_BIT(EXTI->EMR, iocurrent);
 8001848:	4b2b      	ldr	r3, [pc, #172]	; (80018f8 <HAL_GPIO_Init+0x2b0>)
 800184a:	685a      	ldr	r2, [r3, #4]
 800184c:	69bb      	ldr	r3, [r7, #24]
 800184e:	43db      	mvns	r3, r3
 8001850:	4929      	ldr	r1, [pc, #164]	; (80018f8 <HAL_GPIO_Init+0x2b0>)
 8001852:	4013      	ands	r3, r2
 8001854:	604b      	str	r3, [r1, #4]
        }

        /* Enable or disable the rising trigger */
        if ((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 8001856:	683b      	ldr	r3, [r7, #0]
 8001858:	685b      	ldr	r3, [r3, #4]
 800185a:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 800185e:	2b00      	cmp	r3, #0
 8001860:	d006      	beq.n	8001870 <HAL_GPIO_Init+0x228>
        {
          SET_BIT(EXTI->RTSR, iocurrent);
 8001862:	4b25      	ldr	r3, [pc, #148]	; (80018f8 <HAL_GPIO_Init+0x2b0>)
 8001864:	689a      	ldr	r2, [r3, #8]
 8001866:	4924      	ldr	r1, [pc, #144]	; (80018f8 <HAL_GPIO_Init+0x2b0>)
 8001868:	69bb      	ldr	r3, [r7, #24]
 800186a:	4313      	orrs	r3, r2
 800186c:	608b      	str	r3, [r1, #8]
 800186e:	e006      	b.n	800187e <HAL_GPIO_Init+0x236>
        }
        else
        {
          CLEAR_BIT(EXTI->RTSR, iocurrent);
 8001870:	4b21      	ldr	r3, [pc, #132]	; (80018f8 <HAL_GPIO_Init+0x2b0>)
 8001872:	689a      	ldr	r2, [r3, #8]
 8001874:	69bb      	ldr	r3, [r7, #24]
 8001876:	43db      	mvns	r3, r3
 8001878:	491f      	ldr	r1, [pc, #124]	; (80018f8 <HAL_GPIO_Init+0x2b0>)
 800187a:	4013      	ands	r3, r2
 800187c:	608b      	str	r3, [r1, #8]
        }

        /* Enable or disable the falling trigger */
        if ((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 800187e:	683b      	ldr	r3, [r7, #0]
 8001880:	685b      	ldr	r3, [r3, #4]
 8001882:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8001886:	2b00      	cmp	r3, #0
 8001888:	d006      	beq.n	8001898 <HAL_GPIO_Init+0x250>
        {
          SET_BIT(EXTI->FTSR, iocurrent);
 800188a:	4b1b      	ldr	r3, [pc, #108]	; (80018f8 <HAL_GPIO_Init+0x2b0>)
 800188c:	68da      	ldr	r2, [r3, #12]
 800188e:	491a      	ldr	r1, [pc, #104]	; (80018f8 <HAL_GPIO_Init+0x2b0>)
 8001890:	69bb      	ldr	r3, [r7, #24]
 8001892:	4313      	orrs	r3, r2
 8001894:	60cb      	str	r3, [r1, #12]
 8001896:	e006      	b.n	80018a6 <HAL_GPIO_Init+0x25e>
        }
        else
        {
          CLEAR_BIT(EXTI->FTSR, iocurrent);
 8001898:	4b17      	ldr	r3, [pc, #92]	; (80018f8 <HAL_GPIO_Init+0x2b0>)
 800189a:	68da      	ldr	r2, [r3, #12]
 800189c:	69bb      	ldr	r3, [r7, #24]
 800189e:	43db      	mvns	r3, r3
 80018a0:	4915      	ldr	r1, [pc, #84]	; (80018f8 <HAL_GPIO_Init+0x2b0>)
 80018a2:	4013      	ands	r3, r2
 80018a4:	60cb      	str	r3, [r1, #12]
        }
      }
    }

	position++;
 80018a6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80018a8:	3301      	adds	r3, #1
 80018aa:	627b      	str	r3, [r7, #36]	; 0x24
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 80018ac:	683b      	ldr	r3, [r7, #0]
 80018ae:	681a      	ldr	r2, [r3, #0]
 80018b0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80018b2:	fa22 f303 	lsr.w	r3, r2, r3
 80018b6:	2b00      	cmp	r3, #0
 80018b8:	f47f aed0 	bne.w	800165c <HAL_GPIO_Init+0x14>
  }
}
 80018bc:	bf00      	nop
 80018be:	372c      	adds	r7, #44	; 0x2c
 80018c0:	46bd      	mov	sp, r7
 80018c2:	bc80      	pop	{r7}
 80018c4:	4770      	bx	lr
 80018c6:	bf00      	nop
 80018c8:	10210000 	.word	0x10210000
 80018cc:	10110000 	.word	0x10110000
 80018d0:	10120000 	.word	0x10120000
 80018d4:	10310000 	.word	0x10310000
 80018d8:	10320000 	.word	0x10320000
 80018dc:	10220000 	.word	0x10220000
 80018e0:	40021000 	.word	0x40021000
 80018e4:	40010000 	.word	0x40010000
 80018e8:	40010800 	.word	0x40010800
 80018ec:	40010c00 	.word	0x40010c00
 80018f0:	40011000 	.word	0x40011000
 80018f4:	40011400 	.word	0x40011400
 80018f8:	40010400 	.word	0x40010400

080018fc <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 80018fc:	b480      	push	{r7}
 80018fe:	b083      	sub	sp, #12
 8001900:	af00      	add	r7, sp, #0
 8001902:	6078      	str	r0, [r7, #4]
 8001904:	460b      	mov	r3, r1
 8001906:	807b      	strh	r3, [r7, #2]
 8001908:	4613      	mov	r3, r2
 800190a:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 800190c:	787b      	ldrb	r3, [r7, #1]
 800190e:	2b00      	cmp	r3, #0
 8001910:	d003      	beq.n	800191a <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8001912:	887a      	ldrh	r2, [r7, #2]
 8001914:	687b      	ldr	r3, [r7, #4]
 8001916:	611a      	str	r2, [r3, #16]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
  }
}
 8001918:	e003      	b.n	8001922 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
 800191a:	887b      	ldrh	r3, [r7, #2]
 800191c:	041a      	lsls	r2, r3, #16
 800191e:	687b      	ldr	r3, [r7, #4]
 8001920:	611a      	str	r2, [r3, #16]
}
 8001922:	bf00      	nop
 8001924:	370c      	adds	r7, #12
 8001926:	46bd      	mov	sp, r7
 8001928:	bc80      	pop	{r7}
 800192a:	4770      	bx	lr

0800192c <HAL_PCD_Init>:
  *         parameters in the PCD_InitTypeDef and initialize the associated handle.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Init(PCD_HandleTypeDef *hpcd)
{
 800192c:	b5f0      	push	{r4, r5, r6, r7, lr}
 800192e:	b08b      	sub	sp, #44	; 0x2c
 8001930:	af06      	add	r7, sp, #24
 8001932:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx;
#endif /* defined (USB_OTG_FS) */
  uint8_t i;

  /* Check the PCD handle allocation */
  if (hpcd == NULL)
 8001934:	687b      	ldr	r3, [r7, #4]
 8001936:	2b00      	cmp	r3, #0
 8001938:	d101      	bne.n	800193e <HAL_PCD_Init+0x12>
  {
    return HAL_ERROR;
 800193a:	2301      	movs	r3, #1
 800193c:	e0fd      	b.n	8001b3a <HAL_PCD_Init+0x20e>

#if defined (USB_OTG_FS)
  USBx = hpcd->Instance;
#endif /* defined (USB_OTG_FS) */

  if (hpcd->State == HAL_PCD_STATE_RESET)
 800193e:	687b      	ldr	r3, [r7, #4]
 8001940:	f893 32a9 	ldrb.w	r3, [r3, #681]	; 0x2a9
 8001944:	b2db      	uxtb	r3, r3
 8001946:	2b00      	cmp	r3, #0
 8001948:	d106      	bne.n	8001958 <HAL_PCD_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hpcd->Lock = HAL_UNLOCKED;
 800194a:	687b      	ldr	r3, [r7, #4]
 800194c:	2200      	movs	r2, #0
 800194e:	f883 22a8 	strb.w	r2, [r3, #680]	; 0x2a8

    /* Init the low level hardware */
    hpcd->MspInitCallback(hpcd);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_PCD_MspInit(hpcd);
 8001952:	6878      	ldr	r0, [r7, #4]
 8001954:	f006 fa6c 	bl	8007e30 <HAL_PCD_MspInit>
#endif /* (USE_HAL_PCD_REGISTER_CALLBACKS) */
  }

  hpcd->State = HAL_PCD_STATE_BUSY;
 8001958:	687b      	ldr	r3, [r7, #4]
 800195a:	2203      	movs	r2, #3
 800195c:	f883 22a9 	strb.w	r2, [r3, #681]	; 0x2a9
    hpcd->Init.dma_enable = 0U;
  }
#endif /* defined (USB_OTG_FS) */

  /* Disable the Interrupts */
  __HAL_PCD_DISABLE(hpcd);
 8001960:	687b      	ldr	r3, [r7, #4]
 8001962:	681b      	ldr	r3, [r3, #0]
 8001964:	4618      	mov	r0, r3
 8001966:	f002 fc3f 	bl	80041e8 <USB_DisableGlobalInt>

  /*Init the Core (common init.) */
  if (USB_CoreInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 800196a:	687b      	ldr	r3, [r7, #4]
 800196c:	681b      	ldr	r3, [r3, #0]
 800196e:	603b      	str	r3, [r7, #0]
 8001970:	687e      	ldr	r6, [r7, #4]
 8001972:	466d      	mov	r5, sp
 8001974:	f106 0410 	add.w	r4, r6, #16
 8001978:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 800197a:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 800197c:	6823      	ldr	r3, [r4, #0]
 800197e:	602b      	str	r3, [r5, #0]
 8001980:	1d33      	adds	r3, r6, #4
 8001982:	cb0e      	ldmia	r3, {r1, r2, r3}
 8001984:	6838      	ldr	r0, [r7, #0]
 8001986:	f002 fc09 	bl	800419c <USB_CoreInit>
 800198a:	4603      	mov	r3, r0
 800198c:	2b00      	cmp	r3, #0
 800198e:	d005      	beq.n	800199c <HAL_PCD_Init+0x70>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 8001990:	687b      	ldr	r3, [r7, #4]
 8001992:	2202      	movs	r2, #2
 8001994:	f883 22a9 	strb.w	r2, [r3, #681]	; 0x2a9
    return HAL_ERROR;
 8001998:	2301      	movs	r3, #1
 800199a:	e0ce      	b.n	8001b3a <HAL_PCD_Init+0x20e>
  }

  /* Force Device Mode*/
  (void)USB_SetCurrentMode(hpcd->Instance, USB_DEVICE_MODE);
 800199c:	687b      	ldr	r3, [r7, #4]
 800199e:	681b      	ldr	r3, [r3, #0]
 80019a0:	2100      	movs	r1, #0
 80019a2:	4618      	mov	r0, r3
 80019a4:	f002 fc3a 	bl	800421c <USB_SetCurrentMode>

  /* Init endpoints structures */
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 80019a8:	2300      	movs	r3, #0
 80019aa:	73fb      	strb	r3, [r7, #15]
 80019ac:	e04c      	b.n	8001a48 <HAL_PCD_Init+0x11c>
  {
    /* Init ep structure */
    hpcd->IN_ep[i].is_in = 1U;
 80019ae:	7bfb      	ldrb	r3, [r7, #15]
 80019b0:	6879      	ldr	r1, [r7, #4]
 80019b2:	1c5a      	adds	r2, r3, #1
 80019b4:	4613      	mov	r3, r2
 80019b6:	009b      	lsls	r3, r3, #2
 80019b8:	4413      	add	r3, r2
 80019ba:	00db      	lsls	r3, r3, #3
 80019bc:	440b      	add	r3, r1
 80019be:	3301      	adds	r3, #1
 80019c0:	2201      	movs	r2, #1
 80019c2:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].num = i;
 80019c4:	7bfb      	ldrb	r3, [r7, #15]
 80019c6:	6879      	ldr	r1, [r7, #4]
 80019c8:	1c5a      	adds	r2, r3, #1
 80019ca:	4613      	mov	r3, r2
 80019cc:	009b      	lsls	r3, r3, #2
 80019ce:	4413      	add	r3, r2
 80019d0:	00db      	lsls	r3, r3, #3
 80019d2:	440b      	add	r3, r1
 80019d4:	7bfa      	ldrb	r2, [r7, #15]
 80019d6:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].tx_fifo_num = i;
 80019d8:	7bfa      	ldrb	r2, [r7, #15]
 80019da:	7bfb      	ldrb	r3, [r7, #15]
 80019dc:	b298      	uxth	r0, r3
 80019de:	6879      	ldr	r1, [r7, #4]
 80019e0:	4613      	mov	r3, r2
 80019e2:	009b      	lsls	r3, r3, #2
 80019e4:	4413      	add	r3, r2
 80019e6:	00db      	lsls	r3, r3, #3
 80019e8:	440b      	add	r3, r1
 80019ea:	3336      	adds	r3, #54	; 0x36
 80019ec:	4602      	mov	r2, r0
 80019ee:	801a      	strh	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->IN_ep[i].type = EP_TYPE_CTRL;
 80019f0:	7bfb      	ldrb	r3, [r7, #15]
 80019f2:	6879      	ldr	r1, [r7, #4]
 80019f4:	1c5a      	adds	r2, r3, #1
 80019f6:	4613      	mov	r3, r2
 80019f8:	009b      	lsls	r3, r3, #2
 80019fa:	4413      	add	r3, r2
 80019fc:	00db      	lsls	r3, r3, #3
 80019fe:	440b      	add	r3, r1
 8001a00:	3303      	adds	r3, #3
 8001a02:	2200      	movs	r2, #0
 8001a04:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].maxpacket = 0U;
 8001a06:	7bfa      	ldrb	r2, [r7, #15]
 8001a08:	6879      	ldr	r1, [r7, #4]
 8001a0a:	4613      	mov	r3, r2
 8001a0c:	009b      	lsls	r3, r3, #2
 8001a0e:	4413      	add	r3, r2
 8001a10:	00db      	lsls	r3, r3, #3
 8001a12:	440b      	add	r3, r1
 8001a14:	3338      	adds	r3, #56	; 0x38
 8001a16:	2200      	movs	r2, #0
 8001a18:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_buff = 0U;
 8001a1a:	7bfa      	ldrb	r2, [r7, #15]
 8001a1c:	6879      	ldr	r1, [r7, #4]
 8001a1e:	4613      	mov	r3, r2
 8001a20:	009b      	lsls	r3, r3, #2
 8001a22:	4413      	add	r3, r2
 8001a24:	00db      	lsls	r3, r3, #3
 8001a26:	440b      	add	r3, r1
 8001a28:	333c      	adds	r3, #60	; 0x3c
 8001a2a:	2200      	movs	r2, #0
 8001a2c:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_len = 0U;
 8001a2e:	7bfa      	ldrb	r2, [r7, #15]
 8001a30:	6879      	ldr	r1, [r7, #4]
 8001a32:	4613      	mov	r3, r2
 8001a34:	009b      	lsls	r3, r3, #2
 8001a36:	4413      	add	r3, r2
 8001a38:	00db      	lsls	r3, r3, #3
 8001a3a:	440b      	add	r3, r1
 8001a3c:	3340      	adds	r3, #64	; 0x40
 8001a3e:	2200      	movs	r2, #0
 8001a40:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8001a42:	7bfb      	ldrb	r3, [r7, #15]
 8001a44:	3301      	adds	r3, #1
 8001a46:	73fb      	strb	r3, [r7, #15]
 8001a48:	7bfa      	ldrb	r2, [r7, #15]
 8001a4a:	687b      	ldr	r3, [r7, #4]
 8001a4c:	685b      	ldr	r3, [r3, #4]
 8001a4e:	429a      	cmp	r2, r3
 8001a50:	d3ad      	bcc.n	80019ae <HAL_PCD_Init+0x82>
  }

  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8001a52:	2300      	movs	r3, #0
 8001a54:	73fb      	strb	r3, [r7, #15]
 8001a56:	e044      	b.n	8001ae2 <HAL_PCD_Init+0x1b6>
  {
    hpcd->OUT_ep[i].is_in = 0U;
 8001a58:	7bfa      	ldrb	r2, [r7, #15]
 8001a5a:	6879      	ldr	r1, [r7, #4]
 8001a5c:	4613      	mov	r3, r2
 8001a5e:	009b      	lsls	r3, r3, #2
 8001a60:	4413      	add	r3, r2
 8001a62:	00db      	lsls	r3, r3, #3
 8001a64:	440b      	add	r3, r1
 8001a66:	f203 1369 	addw	r3, r3, #361	; 0x169
 8001a6a:	2200      	movs	r2, #0
 8001a6c:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].num = i;
 8001a6e:	7bfa      	ldrb	r2, [r7, #15]
 8001a70:	6879      	ldr	r1, [r7, #4]
 8001a72:	4613      	mov	r3, r2
 8001a74:	009b      	lsls	r3, r3, #2
 8001a76:	4413      	add	r3, r2
 8001a78:	00db      	lsls	r3, r3, #3
 8001a7a:	440b      	add	r3, r1
 8001a7c:	f503 73b4 	add.w	r3, r3, #360	; 0x168
 8001a80:	7bfa      	ldrb	r2, [r7, #15]
 8001a82:	701a      	strb	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->OUT_ep[i].type = EP_TYPE_CTRL;
 8001a84:	7bfa      	ldrb	r2, [r7, #15]
 8001a86:	6879      	ldr	r1, [r7, #4]
 8001a88:	4613      	mov	r3, r2
 8001a8a:	009b      	lsls	r3, r3, #2
 8001a8c:	4413      	add	r3, r2
 8001a8e:	00db      	lsls	r3, r3, #3
 8001a90:	440b      	add	r3, r1
 8001a92:	f203 136b 	addw	r3, r3, #363	; 0x16b
 8001a96:	2200      	movs	r2, #0
 8001a98:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].maxpacket = 0U;
 8001a9a:	7bfa      	ldrb	r2, [r7, #15]
 8001a9c:	6879      	ldr	r1, [r7, #4]
 8001a9e:	4613      	mov	r3, r2
 8001aa0:	009b      	lsls	r3, r3, #2
 8001aa2:	4413      	add	r3, r2
 8001aa4:	00db      	lsls	r3, r3, #3
 8001aa6:	440b      	add	r3, r1
 8001aa8:	f503 73bc 	add.w	r3, r3, #376	; 0x178
 8001aac:	2200      	movs	r2, #0
 8001aae:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_buff = 0U;
 8001ab0:	7bfa      	ldrb	r2, [r7, #15]
 8001ab2:	6879      	ldr	r1, [r7, #4]
 8001ab4:	4613      	mov	r3, r2
 8001ab6:	009b      	lsls	r3, r3, #2
 8001ab8:	4413      	add	r3, r2
 8001aba:	00db      	lsls	r3, r3, #3
 8001abc:	440b      	add	r3, r1
 8001abe:	f503 73be 	add.w	r3, r3, #380	; 0x17c
 8001ac2:	2200      	movs	r2, #0
 8001ac4:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_len = 0U;
 8001ac6:	7bfa      	ldrb	r2, [r7, #15]
 8001ac8:	6879      	ldr	r1, [r7, #4]
 8001aca:	4613      	mov	r3, r2
 8001acc:	009b      	lsls	r3, r3, #2
 8001ace:	4413      	add	r3, r2
 8001ad0:	00db      	lsls	r3, r3, #3
 8001ad2:	440b      	add	r3, r1
 8001ad4:	f503 73c0 	add.w	r3, r3, #384	; 0x180
 8001ad8:	2200      	movs	r2, #0
 8001ada:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8001adc:	7bfb      	ldrb	r3, [r7, #15]
 8001ade:	3301      	adds	r3, #1
 8001ae0:	73fb      	strb	r3, [r7, #15]
 8001ae2:	7bfa      	ldrb	r2, [r7, #15]
 8001ae4:	687b      	ldr	r3, [r7, #4]
 8001ae6:	685b      	ldr	r3, [r3, #4]
 8001ae8:	429a      	cmp	r2, r3
 8001aea:	d3b5      	bcc.n	8001a58 <HAL_PCD_Init+0x12c>
  }

  /* Init Device */
  if (USB_DevInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 8001aec:	687b      	ldr	r3, [r7, #4]
 8001aee:	681b      	ldr	r3, [r3, #0]
 8001af0:	603b      	str	r3, [r7, #0]
 8001af2:	687e      	ldr	r6, [r7, #4]
 8001af4:	466d      	mov	r5, sp
 8001af6:	f106 0410 	add.w	r4, r6, #16
 8001afa:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8001afc:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8001afe:	6823      	ldr	r3, [r4, #0]
 8001b00:	602b      	str	r3, [r5, #0]
 8001b02:	1d33      	adds	r3, r6, #4
 8001b04:	cb0e      	ldmia	r3, {r1, r2, r3}
 8001b06:	6838      	ldr	r0, [r7, #0]
 8001b08:	f002 fb94 	bl	8004234 <USB_DevInit>
 8001b0c:	4603      	mov	r3, r0
 8001b0e:	2b00      	cmp	r3, #0
 8001b10:	d005      	beq.n	8001b1e <HAL_PCD_Init+0x1f2>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 8001b12:	687b      	ldr	r3, [r7, #4]
 8001b14:	2202      	movs	r2, #2
 8001b16:	f883 22a9 	strb.w	r2, [r3, #681]	; 0x2a9
    return HAL_ERROR;
 8001b1a:	2301      	movs	r3, #1
 8001b1c:	e00d      	b.n	8001b3a <HAL_PCD_Init+0x20e>
  }

  hpcd->USB_Address = 0U;
 8001b1e:	687b      	ldr	r3, [r7, #4]
 8001b20:	2200      	movs	r2, #0
 8001b22:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
  hpcd->State = HAL_PCD_STATE_READY;
 8001b26:	687b      	ldr	r3, [r7, #4]
 8001b28:	2201      	movs	r2, #1
 8001b2a:	f883 22a9 	strb.w	r2, [r3, #681]	; 0x2a9
  (void)USB_DevDisconnect(hpcd->Instance);
 8001b2e:	687b      	ldr	r3, [r7, #4]
 8001b30:	681b      	ldr	r3, [r3, #0]
 8001b32:	4618      	mov	r0, r3
 8001b34:	f004 fb2e 	bl	8006194 <USB_DevDisconnect>

  return HAL_OK;
 8001b38:	2300      	movs	r3, #0
}
 8001b3a:	4618      	mov	r0, r3
 8001b3c:	3714      	adds	r7, #20
 8001b3e:	46bd      	mov	sp, r7
 8001b40:	bdf0      	pop	{r4, r5, r6, r7, pc}

08001b42 <HAL_PCD_Start>:
  * @brief  Start the USB device
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Start(PCD_HandleTypeDef *hpcd)
{
 8001b42:	b580      	push	{r7, lr}
 8001b44:	b082      	sub	sp, #8
 8001b46:	af00      	add	r7, sp, #0
 8001b48:	6078      	str	r0, [r7, #4]
  __HAL_LOCK(hpcd);
 8001b4a:	687b      	ldr	r3, [r7, #4]
 8001b4c:	f893 32a8 	ldrb.w	r3, [r3, #680]	; 0x2a8
 8001b50:	2b01      	cmp	r3, #1
 8001b52:	d101      	bne.n	8001b58 <HAL_PCD_Start+0x16>
 8001b54:	2302      	movs	r3, #2
 8001b56:	e016      	b.n	8001b86 <HAL_PCD_Start+0x44>
 8001b58:	687b      	ldr	r3, [r7, #4]
 8001b5a:	2201      	movs	r2, #1
 8001b5c:	f883 22a8 	strb.w	r2, [r3, #680]	; 0x2a8
  __HAL_PCD_ENABLE(hpcd);
 8001b60:	687b      	ldr	r3, [r7, #4]
 8001b62:	681b      	ldr	r3, [r3, #0]
 8001b64:	4618      	mov	r0, r3
 8001b66:	f002 fb29 	bl	80041bc <USB_EnableGlobalInt>

#if defined (USB)
  HAL_PCDEx_SetConnectionState(hpcd, 1U);
 8001b6a:	2101      	movs	r1, #1
 8001b6c:	6878      	ldr	r0, [r7, #4]
 8001b6e:	f006 fbd2 	bl	8008316 <HAL_PCDEx_SetConnectionState>
#endif /* defined (USB) */

  (void)USB_DevConnect(hpcd->Instance);
 8001b72:	687b      	ldr	r3, [r7, #4]
 8001b74:	681b      	ldr	r3, [r3, #0]
 8001b76:	4618      	mov	r0, r3
 8001b78:	f004 fb02 	bl	8006180 <USB_DevConnect>
  __HAL_UNLOCK(hpcd);
 8001b7c:	687b      	ldr	r3, [r7, #4]
 8001b7e:	2200      	movs	r2, #0
 8001b80:	f883 22a8 	strb.w	r2, [r3, #680]	; 0x2a8

  return HAL_OK;
 8001b84:	2300      	movs	r3, #0
}
 8001b86:	4618      	mov	r0, r3
 8001b88:	3708      	adds	r7, #8
 8001b8a:	46bd      	mov	sp, r7
 8001b8c:	bd80      	pop	{r7, pc}

08001b8e <HAL_PCD_IRQHandler>:
  * @brief  This function handles PCD interrupt request.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
void HAL_PCD_IRQHandler(PCD_HandleTypeDef *hpcd)
{
 8001b8e:	b580      	push	{r7, lr}
 8001b90:	b088      	sub	sp, #32
 8001b92:	af00      	add	r7, sp, #0
 8001b94:	6078      	str	r0, [r7, #4]
  uint16_t store_ep[8];
  uint8_t i;

  if (__HAL_PCD_GET_FLAG(hpcd, USB_ISTR_CTR))
 8001b96:	687b      	ldr	r3, [r7, #4]
 8001b98:	681b      	ldr	r3, [r3, #0]
 8001b9a:	4618      	mov	r0, r3
 8001b9c:	f004 fb04 	bl	80061a8 <USB_ReadInterrupts>
 8001ba0:	4603      	mov	r3, r0
 8001ba2:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8001ba6:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8001baa:	d102      	bne.n	8001bb2 <HAL_PCD_IRQHandler+0x24>
  {
    /* servicing of the endpoint correct transfer interrupt */
    /* clear of the CTR flag into the sub */
    (void)PCD_EP_ISR_Handler(hpcd);
 8001bac:	6878      	ldr	r0, [r7, #4]
 8001bae:	f000 fb61 	bl	8002274 <PCD_EP_ISR_Handler>
  }

  if (__HAL_PCD_GET_FLAG(hpcd, USB_ISTR_RESET))
 8001bb2:	687b      	ldr	r3, [r7, #4]
 8001bb4:	681b      	ldr	r3, [r3, #0]
 8001bb6:	4618      	mov	r0, r3
 8001bb8:	f004 faf6 	bl	80061a8 <USB_ReadInterrupts>
 8001bbc:	4603      	mov	r3, r0
 8001bbe:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8001bc2:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8001bc6:	d112      	bne.n	8001bee <HAL_PCD_IRQHandler+0x60>
  {
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_RESET);
 8001bc8:	687b      	ldr	r3, [r7, #4]
 8001bca:	681b      	ldr	r3, [r3, #0]
 8001bcc:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 8001bd0:	b29a      	uxth	r2, r3
 8001bd2:	687b      	ldr	r3, [r7, #4]
 8001bd4:	681b      	ldr	r3, [r3, #0]
 8001bd6:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8001bda:	b292      	uxth	r2, r2
 8001bdc:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
    hpcd->ResetCallback(hpcd);
#else
    HAL_PCD_ResetCallback(hpcd);
 8001be0:	6878      	ldr	r0, [r7, #4]
 8001be2:	f006 f9a0 	bl	8007f26 <HAL_PCD_ResetCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

    (void)HAL_PCD_SetAddress(hpcd, 0U);
 8001be6:	2100      	movs	r1, #0
 8001be8:	6878      	ldr	r0, [r7, #4]
 8001bea:	f000 f925 	bl	8001e38 <HAL_PCD_SetAddress>
  }

  if (__HAL_PCD_GET_FLAG(hpcd, USB_ISTR_PMAOVR))
 8001bee:	687b      	ldr	r3, [r7, #4]
 8001bf0:	681b      	ldr	r3, [r3, #0]
 8001bf2:	4618      	mov	r0, r3
 8001bf4:	f004 fad8 	bl	80061a8 <USB_ReadInterrupts>
 8001bf8:	4603      	mov	r3, r0
 8001bfa:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8001bfe:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8001c02:	d10b      	bne.n	8001c1c <HAL_PCD_IRQHandler+0x8e>
  {
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_PMAOVR);
 8001c04:	687b      	ldr	r3, [r7, #4]
 8001c06:	681b      	ldr	r3, [r3, #0]
 8001c08:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 8001c0c:	b29a      	uxth	r2, r3
 8001c0e:	687b      	ldr	r3, [r7, #4]
 8001c10:	681b      	ldr	r3, [r3, #0]
 8001c12:	f422 4280 	bic.w	r2, r2, #16384	; 0x4000
 8001c16:	b292      	uxth	r2, r2
 8001c18:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44
  }

  if (__HAL_PCD_GET_FLAG(hpcd, USB_ISTR_ERR))
 8001c1c:	687b      	ldr	r3, [r7, #4]
 8001c1e:	681b      	ldr	r3, [r3, #0]
 8001c20:	4618      	mov	r0, r3
 8001c22:	f004 fac1 	bl	80061a8 <USB_ReadInterrupts>
 8001c26:	4603      	mov	r3, r0
 8001c28:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8001c2c:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8001c30:	d10b      	bne.n	8001c4a <HAL_PCD_IRQHandler+0xbc>
  {
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_ERR);
 8001c32:	687b      	ldr	r3, [r7, #4]
 8001c34:	681b      	ldr	r3, [r3, #0]
 8001c36:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 8001c3a:	b29a      	uxth	r2, r3
 8001c3c:	687b      	ldr	r3, [r7, #4]
 8001c3e:	681b      	ldr	r3, [r3, #0]
 8001c40:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8001c44:	b292      	uxth	r2, r2
 8001c46:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44
  }

  if (__HAL_PCD_GET_FLAG(hpcd, USB_ISTR_WKUP))
 8001c4a:	687b      	ldr	r3, [r7, #4]
 8001c4c:	681b      	ldr	r3, [r3, #0]
 8001c4e:	4618      	mov	r0, r3
 8001c50:	f004 faaa 	bl	80061a8 <USB_ReadInterrupts>
 8001c54:	4603      	mov	r3, r0
 8001c56:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8001c5a:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8001c5e:	d126      	bne.n	8001cae <HAL_PCD_IRQHandler+0x120>
  {
    hpcd->Instance->CNTR &= (uint16_t) ~(USB_CNTR_LP_MODE);
 8001c60:	687b      	ldr	r3, [r7, #4]
 8001c62:	681b      	ldr	r3, [r3, #0]
 8001c64:	f8b3 3040 	ldrh.w	r3, [r3, #64]	; 0x40
 8001c68:	b29a      	uxth	r2, r3
 8001c6a:	687b      	ldr	r3, [r7, #4]
 8001c6c:	681b      	ldr	r3, [r3, #0]
 8001c6e:	f022 0204 	bic.w	r2, r2, #4
 8001c72:	b292      	uxth	r2, r2
 8001c74:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40
    hpcd->Instance->CNTR &= (uint16_t) ~(USB_CNTR_FSUSP);
 8001c78:	687b      	ldr	r3, [r7, #4]
 8001c7a:	681b      	ldr	r3, [r3, #0]
 8001c7c:	f8b3 3040 	ldrh.w	r3, [r3, #64]	; 0x40
 8001c80:	b29a      	uxth	r2, r3
 8001c82:	687b      	ldr	r3, [r7, #4]
 8001c84:	681b      	ldr	r3, [r3, #0]
 8001c86:	f022 0208 	bic.w	r2, r2, #8
 8001c8a:	b292      	uxth	r2, r2
 8001c8c:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
    hpcd->ResumeCallback(hpcd);
#else
    HAL_PCD_ResumeCallback(hpcd);
 8001c90:	6878      	ldr	r0, [r7, #4]
 8001c92:	f006 f981 	bl	8007f98 <HAL_PCD_ResumeCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_WKUP);
 8001c96:	687b      	ldr	r3, [r7, #4]
 8001c98:	681b      	ldr	r3, [r3, #0]
 8001c9a:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 8001c9e:	b29a      	uxth	r2, r3
 8001ca0:	687b      	ldr	r3, [r7, #4]
 8001ca2:	681b      	ldr	r3, [r3, #0]
 8001ca4:	f422 5280 	bic.w	r2, r2, #4096	; 0x1000
 8001ca8:	b292      	uxth	r2, r2
 8001caa:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44
  }

  if (__HAL_PCD_GET_FLAG(hpcd, USB_ISTR_SUSP))
 8001cae:	687b      	ldr	r3, [r7, #4]
 8001cb0:	681b      	ldr	r3, [r3, #0]
 8001cb2:	4618      	mov	r0, r3
 8001cb4:	f004 fa78 	bl	80061a8 <USB_ReadInterrupts>
 8001cb8:	4603      	mov	r3, r0
 8001cba:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8001cbe:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8001cc2:	f040 8084 	bne.w	8001dce <HAL_PCD_IRQHandler+0x240>
  {
    /* WA: To Clear Wakeup flag if raised with suspend signal */

    /* Store Endpoint register */
    for (i = 0U; i < 8U; i++)
 8001cc6:	2300      	movs	r3, #0
 8001cc8:	77fb      	strb	r3, [r7, #31]
 8001cca:	e011      	b.n	8001cf0 <HAL_PCD_IRQHandler+0x162>
    {
      store_ep[i] = PCD_GET_ENDPOINT(hpcd->Instance, i);
 8001ccc:	687b      	ldr	r3, [r7, #4]
 8001cce:	681b      	ldr	r3, [r3, #0]
 8001cd0:	461a      	mov	r2, r3
 8001cd2:	7ffb      	ldrb	r3, [r7, #31]
 8001cd4:	009b      	lsls	r3, r3, #2
 8001cd6:	441a      	add	r2, r3
 8001cd8:	7ffb      	ldrb	r3, [r7, #31]
 8001cda:	8812      	ldrh	r2, [r2, #0]
 8001cdc:	b292      	uxth	r2, r2
 8001cde:	005b      	lsls	r3, r3, #1
 8001ce0:	f107 0120 	add.w	r1, r7, #32
 8001ce4:	440b      	add	r3, r1
 8001ce6:	f823 2c14 	strh.w	r2, [r3, #-20]
    for (i = 0U; i < 8U; i++)
 8001cea:	7ffb      	ldrb	r3, [r7, #31]
 8001cec:	3301      	adds	r3, #1
 8001cee:	77fb      	strb	r3, [r7, #31]
 8001cf0:	7ffb      	ldrb	r3, [r7, #31]
 8001cf2:	2b07      	cmp	r3, #7
 8001cf4:	d9ea      	bls.n	8001ccc <HAL_PCD_IRQHandler+0x13e>
    }

    /* FORCE RESET */
    hpcd->Instance->CNTR |= (uint16_t)(USB_CNTR_FRES);
 8001cf6:	687b      	ldr	r3, [r7, #4]
 8001cf8:	681b      	ldr	r3, [r3, #0]
 8001cfa:	f8b3 3040 	ldrh.w	r3, [r3, #64]	; 0x40
 8001cfe:	b29a      	uxth	r2, r3
 8001d00:	687b      	ldr	r3, [r7, #4]
 8001d02:	681b      	ldr	r3, [r3, #0]
 8001d04:	f042 0201 	orr.w	r2, r2, #1
 8001d08:	b292      	uxth	r2, r2
 8001d0a:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40

    /* CLEAR RESET */
    hpcd->Instance->CNTR &= (uint16_t)(~USB_CNTR_FRES);
 8001d0e:	687b      	ldr	r3, [r7, #4]
 8001d10:	681b      	ldr	r3, [r3, #0]
 8001d12:	f8b3 3040 	ldrh.w	r3, [r3, #64]	; 0x40
 8001d16:	b29a      	uxth	r2, r3
 8001d18:	687b      	ldr	r3, [r7, #4]
 8001d1a:	681b      	ldr	r3, [r3, #0]
 8001d1c:	f022 0201 	bic.w	r2, r2, #1
 8001d20:	b292      	uxth	r2, r2
 8001d22:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40

    /* wait for reset flag in ISTR */
    while ((hpcd->Instance->ISTR & USB_ISTR_RESET) == 0U)
 8001d26:	bf00      	nop
 8001d28:	687b      	ldr	r3, [r7, #4]
 8001d2a:	681b      	ldr	r3, [r3, #0]
 8001d2c:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 8001d30:	b29b      	uxth	r3, r3
 8001d32:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8001d36:	2b00      	cmp	r3, #0
 8001d38:	d0f6      	beq.n	8001d28 <HAL_PCD_IRQHandler+0x19a>
    {
    }

    /* Clear Reset Flag */
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_RESET);
 8001d3a:	687b      	ldr	r3, [r7, #4]
 8001d3c:	681b      	ldr	r3, [r3, #0]
 8001d3e:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 8001d42:	b29a      	uxth	r2, r3
 8001d44:	687b      	ldr	r3, [r7, #4]
 8001d46:	681b      	ldr	r3, [r3, #0]
 8001d48:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8001d4c:	b292      	uxth	r2, r2
 8001d4e:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44

    /* Restore Registre */
    for (i = 0U; i < 8U; i++)
 8001d52:	2300      	movs	r3, #0
 8001d54:	77fb      	strb	r3, [r7, #31]
 8001d56:	e010      	b.n	8001d7a <HAL_PCD_IRQHandler+0x1ec>
    {
      PCD_SET_ENDPOINT(hpcd->Instance, i, store_ep[i]);
 8001d58:	7ffb      	ldrb	r3, [r7, #31]
 8001d5a:	687a      	ldr	r2, [r7, #4]
 8001d5c:	6812      	ldr	r2, [r2, #0]
 8001d5e:	4611      	mov	r1, r2
 8001d60:	7ffa      	ldrb	r2, [r7, #31]
 8001d62:	0092      	lsls	r2, r2, #2
 8001d64:	440a      	add	r2, r1
 8001d66:	005b      	lsls	r3, r3, #1
 8001d68:	f107 0120 	add.w	r1, r7, #32
 8001d6c:	440b      	add	r3, r1
 8001d6e:	f833 3c14 	ldrh.w	r3, [r3, #-20]
 8001d72:	8013      	strh	r3, [r2, #0]
    for (i = 0U; i < 8U; i++)
 8001d74:	7ffb      	ldrb	r3, [r7, #31]
 8001d76:	3301      	adds	r3, #1
 8001d78:	77fb      	strb	r3, [r7, #31]
 8001d7a:	7ffb      	ldrb	r3, [r7, #31]
 8001d7c:	2b07      	cmp	r3, #7
 8001d7e:	d9eb      	bls.n	8001d58 <HAL_PCD_IRQHandler+0x1ca>
    }

    /* Force low-power mode in the macrocell */
    hpcd->Instance->CNTR |= (uint16_t)USB_CNTR_FSUSP;
 8001d80:	687b      	ldr	r3, [r7, #4]
 8001d82:	681b      	ldr	r3, [r3, #0]
 8001d84:	f8b3 3040 	ldrh.w	r3, [r3, #64]	; 0x40
 8001d88:	b29a      	uxth	r2, r3
 8001d8a:	687b      	ldr	r3, [r7, #4]
 8001d8c:	681b      	ldr	r3, [r3, #0]
 8001d8e:	f042 0208 	orr.w	r2, r2, #8
 8001d92:	b292      	uxth	r2, r2
 8001d94:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40

    /* clear of the ISTR bit must be done after setting of CNTR_FSUSP */
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_SUSP);
 8001d98:	687b      	ldr	r3, [r7, #4]
 8001d9a:	681b      	ldr	r3, [r3, #0]
 8001d9c:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 8001da0:	b29a      	uxth	r2, r3
 8001da2:	687b      	ldr	r3, [r7, #4]
 8001da4:	681b      	ldr	r3, [r3, #0]
 8001da6:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8001daa:	b292      	uxth	r2, r2
 8001dac:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44

    hpcd->Instance->CNTR |= (uint16_t)USB_CNTR_LP_MODE;
 8001db0:	687b      	ldr	r3, [r7, #4]
 8001db2:	681b      	ldr	r3, [r3, #0]
 8001db4:	f8b3 3040 	ldrh.w	r3, [r3, #64]	; 0x40
 8001db8:	b29a      	uxth	r2, r3
 8001dba:	687b      	ldr	r3, [r7, #4]
 8001dbc:	681b      	ldr	r3, [r3, #0]
 8001dbe:	f042 0204 	orr.w	r2, r2, #4
 8001dc2:	b292      	uxth	r2, r2
 8001dc4:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
    hpcd->SuspendCallback(hpcd);
#else
    HAL_PCD_SuspendCallback(hpcd);
 8001dc8:	6878      	ldr	r0, [r7, #4]
 8001dca:	f006 f8cb 	bl	8007f64 <HAL_PCD_SuspendCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
  }

  if (__HAL_PCD_GET_FLAG(hpcd, USB_ISTR_SOF))
 8001dce:	687b      	ldr	r3, [r7, #4]
 8001dd0:	681b      	ldr	r3, [r3, #0]
 8001dd2:	4618      	mov	r0, r3
 8001dd4:	f004 f9e8 	bl	80061a8 <USB_ReadInterrupts>
 8001dd8:	4603      	mov	r3, r0
 8001dda:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8001dde:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8001de2:	d10e      	bne.n	8001e02 <HAL_PCD_IRQHandler+0x274>
  {
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_SOF);
 8001de4:	687b      	ldr	r3, [r7, #4]
 8001de6:	681b      	ldr	r3, [r3, #0]
 8001de8:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 8001dec:	b29a      	uxth	r2, r3
 8001dee:	687b      	ldr	r3, [r7, #4]
 8001df0:	681b      	ldr	r3, [r3, #0]
 8001df2:	f422 7200 	bic.w	r2, r2, #512	; 0x200
 8001df6:	b292      	uxth	r2, r2
 8001df8:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
    hpcd->SOFCallback(hpcd);
#else
    HAL_PCD_SOFCallback(hpcd);
 8001dfc:	6878      	ldr	r0, [r7, #4]
 8001dfe:	f006 f884 	bl	8007f0a <HAL_PCD_SOFCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
  }

  if (__HAL_PCD_GET_FLAG(hpcd, USB_ISTR_ESOF))
 8001e02:	687b      	ldr	r3, [r7, #4]
 8001e04:	681b      	ldr	r3, [r3, #0]
 8001e06:	4618      	mov	r0, r3
 8001e08:	f004 f9ce 	bl	80061a8 <USB_ReadInterrupts>
 8001e0c:	4603      	mov	r3, r0
 8001e0e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001e12:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8001e16:	d10b      	bne.n	8001e30 <HAL_PCD_IRQHandler+0x2a2>
  {
    /* clear ESOF flag in ISTR */
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_ESOF);
 8001e18:	687b      	ldr	r3, [r7, #4]
 8001e1a:	681b      	ldr	r3, [r3, #0]
 8001e1c:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 8001e20:	b29a      	uxth	r2, r3
 8001e22:	687b      	ldr	r3, [r7, #4]
 8001e24:	681b      	ldr	r3, [r3, #0]
 8001e26:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8001e2a:	b292      	uxth	r2, r2
 8001e2c:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44
  }
}
 8001e30:	bf00      	nop
 8001e32:	3720      	adds	r7, #32
 8001e34:	46bd      	mov	sp, r7
 8001e36:	bd80      	pop	{r7, pc}

08001e38 <HAL_PCD_SetAddress>:
  * @param  hpcd PCD handle
  * @param  address new device address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_SetAddress(PCD_HandleTypeDef *hpcd, uint8_t address)
{
 8001e38:	b580      	push	{r7, lr}
 8001e3a:	b082      	sub	sp, #8
 8001e3c:	af00      	add	r7, sp, #0
 8001e3e:	6078      	str	r0, [r7, #4]
 8001e40:	460b      	mov	r3, r1
 8001e42:	70fb      	strb	r3, [r7, #3]
  __HAL_LOCK(hpcd);
 8001e44:	687b      	ldr	r3, [r7, #4]
 8001e46:	f893 32a8 	ldrb.w	r3, [r3, #680]	; 0x2a8
 8001e4a:	2b01      	cmp	r3, #1
 8001e4c:	d101      	bne.n	8001e52 <HAL_PCD_SetAddress+0x1a>
 8001e4e:	2302      	movs	r3, #2
 8001e50:	e013      	b.n	8001e7a <HAL_PCD_SetAddress+0x42>
 8001e52:	687b      	ldr	r3, [r7, #4]
 8001e54:	2201      	movs	r2, #1
 8001e56:	f883 22a8 	strb.w	r2, [r3, #680]	; 0x2a8
  hpcd->USB_Address = address;
 8001e5a:	687b      	ldr	r3, [r7, #4]
 8001e5c:	78fa      	ldrb	r2, [r7, #3]
 8001e5e:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
  (void)USB_SetDevAddress(hpcd->Instance, address);
 8001e62:	687b      	ldr	r3, [r7, #4]
 8001e64:	681b      	ldr	r3, [r3, #0]
 8001e66:	78fa      	ldrb	r2, [r7, #3]
 8001e68:	4611      	mov	r1, r2
 8001e6a:	4618      	mov	r0, r3
 8001e6c:	f004 f975 	bl	800615a <USB_SetDevAddress>
  __HAL_UNLOCK(hpcd);
 8001e70:	687b      	ldr	r3, [r7, #4]
 8001e72:	2200      	movs	r2, #0
 8001e74:	f883 22a8 	strb.w	r2, [r3, #680]	; 0x2a8

  return HAL_OK;
 8001e78:	2300      	movs	r3, #0
}
 8001e7a:	4618      	mov	r0, r3
 8001e7c:	3708      	adds	r7, #8
 8001e7e:	46bd      	mov	sp, r7
 8001e80:	bd80      	pop	{r7, pc}

08001e82 <HAL_PCD_EP_Open>:
  * @param  ep_type endpoint type
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Open(PCD_HandleTypeDef *hpcd, uint8_t ep_addr,
                                  uint16_t ep_mps, uint8_t ep_type)
{
 8001e82:	b580      	push	{r7, lr}
 8001e84:	b084      	sub	sp, #16
 8001e86:	af00      	add	r7, sp, #0
 8001e88:	6078      	str	r0, [r7, #4]
 8001e8a:	4608      	mov	r0, r1
 8001e8c:	4611      	mov	r1, r2
 8001e8e:	461a      	mov	r2, r3
 8001e90:	4603      	mov	r3, r0
 8001e92:	70fb      	strb	r3, [r7, #3]
 8001e94:	460b      	mov	r3, r1
 8001e96:	803b      	strh	r3, [r7, #0]
 8001e98:	4613      	mov	r3, r2
 8001e9a:	70bb      	strb	r3, [r7, #2]
  HAL_StatusTypeDef  ret = HAL_OK;
 8001e9c:	2300      	movs	r3, #0
 8001e9e:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  if ((ep_addr & 0x80U) == 0x80U)
 8001ea0:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8001ea4:	2b00      	cmp	r3, #0
 8001ea6:	da0e      	bge.n	8001ec6 <HAL_PCD_EP_Open+0x44>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8001ea8:	78fb      	ldrb	r3, [r7, #3]
 8001eaa:	f003 0307 	and.w	r3, r3, #7
 8001eae:	1c5a      	adds	r2, r3, #1
 8001eb0:	4613      	mov	r3, r2
 8001eb2:	009b      	lsls	r3, r3, #2
 8001eb4:	4413      	add	r3, r2
 8001eb6:	00db      	lsls	r3, r3, #3
 8001eb8:	687a      	ldr	r2, [r7, #4]
 8001eba:	4413      	add	r3, r2
 8001ebc:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 8001ebe:	68fb      	ldr	r3, [r7, #12]
 8001ec0:	2201      	movs	r2, #1
 8001ec2:	705a      	strb	r2, [r3, #1]
 8001ec4:	e00e      	b.n	8001ee4 <HAL_PCD_EP_Open+0x62>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8001ec6:	78fb      	ldrb	r3, [r7, #3]
 8001ec8:	f003 0207 	and.w	r2, r3, #7
 8001ecc:	4613      	mov	r3, r2
 8001ece:	009b      	lsls	r3, r3, #2
 8001ed0:	4413      	add	r3, r2
 8001ed2:	00db      	lsls	r3, r3, #3
 8001ed4:	f503 73b4 	add.w	r3, r3, #360	; 0x168
 8001ed8:	687a      	ldr	r2, [r7, #4]
 8001eda:	4413      	add	r3, r2
 8001edc:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 8001ede:	68fb      	ldr	r3, [r7, #12]
 8001ee0:	2200      	movs	r2, #0
 8001ee2:	705a      	strb	r2, [r3, #1]
  }

  ep->num = ep_addr & EP_ADDR_MSK;
 8001ee4:	78fb      	ldrb	r3, [r7, #3]
 8001ee6:	f003 0307 	and.w	r3, r3, #7
 8001eea:	b2da      	uxtb	r2, r3
 8001eec:	68fb      	ldr	r3, [r7, #12]
 8001eee:	701a      	strb	r2, [r3, #0]
  ep->maxpacket = ep_mps;
 8001ef0:	883a      	ldrh	r2, [r7, #0]
 8001ef2:	68fb      	ldr	r3, [r7, #12]
 8001ef4:	611a      	str	r2, [r3, #16]
  ep->type = ep_type;
 8001ef6:	68fb      	ldr	r3, [r7, #12]
 8001ef8:	78ba      	ldrb	r2, [r7, #2]
 8001efa:	70da      	strb	r2, [r3, #3]

  if (ep->is_in != 0U)
 8001efc:	68fb      	ldr	r3, [r7, #12]
 8001efe:	785b      	ldrb	r3, [r3, #1]
 8001f00:	2b00      	cmp	r3, #0
 8001f02:	d004      	beq.n	8001f0e <HAL_PCD_EP_Open+0x8c>
  {
    /* Assign a Tx FIFO */
    ep->tx_fifo_num = ep->num;
 8001f04:	68fb      	ldr	r3, [r7, #12]
 8001f06:	781b      	ldrb	r3, [r3, #0]
 8001f08:	b29a      	uxth	r2, r3
 8001f0a:	68fb      	ldr	r3, [r7, #12]
 8001f0c:	81da      	strh	r2, [r3, #14]
  }
  /* Set initial data PID. */
  if (ep_type == EP_TYPE_BULK)
 8001f0e:	78bb      	ldrb	r3, [r7, #2]
 8001f10:	2b02      	cmp	r3, #2
 8001f12:	d102      	bne.n	8001f1a <HAL_PCD_EP_Open+0x98>
  {
    ep->data_pid_start = 0U;
 8001f14:	68fb      	ldr	r3, [r7, #12]
 8001f16:	2200      	movs	r2, #0
 8001f18:	711a      	strb	r2, [r3, #4]
  }

  __HAL_LOCK(hpcd);
 8001f1a:	687b      	ldr	r3, [r7, #4]
 8001f1c:	f893 32a8 	ldrb.w	r3, [r3, #680]	; 0x2a8
 8001f20:	2b01      	cmp	r3, #1
 8001f22:	d101      	bne.n	8001f28 <HAL_PCD_EP_Open+0xa6>
 8001f24:	2302      	movs	r3, #2
 8001f26:	e00e      	b.n	8001f46 <HAL_PCD_EP_Open+0xc4>
 8001f28:	687b      	ldr	r3, [r7, #4]
 8001f2a:	2201      	movs	r2, #1
 8001f2c:	f883 22a8 	strb.w	r2, [r3, #680]	; 0x2a8
  (void)USB_ActivateEndpoint(hpcd->Instance, ep);
 8001f30:	687b      	ldr	r3, [r7, #4]
 8001f32:	681b      	ldr	r3, [r3, #0]
 8001f34:	68f9      	ldr	r1, [r7, #12]
 8001f36:	4618      	mov	r0, r3
 8001f38:	f002 f99c 	bl	8004274 <USB_ActivateEndpoint>
  __HAL_UNLOCK(hpcd);
 8001f3c:	687b      	ldr	r3, [r7, #4]
 8001f3e:	2200      	movs	r2, #0
 8001f40:	f883 22a8 	strb.w	r2, [r3, #680]	; 0x2a8

  return ret;
 8001f44:	7afb      	ldrb	r3, [r7, #11]
}
 8001f46:	4618      	mov	r0, r3
 8001f48:	3710      	adds	r7, #16
 8001f4a:	46bd      	mov	sp, r7
 8001f4c:	bd80      	pop	{r7, pc}

08001f4e <HAL_PCD_EP_Close>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Close(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 8001f4e:	b580      	push	{r7, lr}
 8001f50:	b084      	sub	sp, #16
 8001f52:	af00      	add	r7, sp, #0
 8001f54:	6078      	str	r0, [r7, #4]
 8001f56:	460b      	mov	r3, r1
 8001f58:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if ((ep_addr & 0x80U) == 0x80U)
 8001f5a:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8001f5e:	2b00      	cmp	r3, #0
 8001f60:	da0e      	bge.n	8001f80 <HAL_PCD_EP_Close+0x32>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8001f62:	78fb      	ldrb	r3, [r7, #3]
 8001f64:	f003 0307 	and.w	r3, r3, #7
 8001f68:	1c5a      	adds	r2, r3, #1
 8001f6a:	4613      	mov	r3, r2
 8001f6c:	009b      	lsls	r3, r3, #2
 8001f6e:	4413      	add	r3, r2
 8001f70:	00db      	lsls	r3, r3, #3
 8001f72:	687a      	ldr	r2, [r7, #4]
 8001f74:	4413      	add	r3, r2
 8001f76:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 8001f78:	68fb      	ldr	r3, [r7, #12]
 8001f7a:	2201      	movs	r2, #1
 8001f7c:	705a      	strb	r2, [r3, #1]
 8001f7e:	e00e      	b.n	8001f9e <HAL_PCD_EP_Close+0x50>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8001f80:	78fb      	ldrb	r3, [r7, #3]
 8001f82:	f003 0207 	and.w	r2, r3, #7
 8001f86:	4613      	mov	r3, r2
 8001f88:	009b      	lsls	r3, r3, #2
 8001f8a:	4413      	add	r3, r2
 8001f8c:	00db      	lsls	r3, r3, #3
 8001f8e:	f503 73b4 	add.w	r3, r3, #360	; 0x168
 8001f92:	687a      	ldr	r2, [r7, #4]
 8001f94:	4413      	add	r3, r2
 8001f96:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 8001f98:	68fb      	ldr	r3, [r7, #12]
 8001f9a:	2200      	movs	r2, #0
 8001f9c:	705a      	strb	r2, [r3, #1]
  }
  ep->num   = ep_addr & EP_ADDR_MSK;
 8001f9e:	78fb      	ldrb	r3, [r7, #3]
 8001fa0:	f003 0307 	and.w	r3, r3, #7
 8001fa4:	b2da      	uxtb	r2, r3
 8001fa6:	68fb      	ldr	r3, [r7, #12]
 8001fa8:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 8001faa:	687b      	ldr	r3, [r7, #4]
 8001fac:	f893 32a8 	ldrb.w	r3, [r3, #680]	; 0x2a8
 8001fb0:	2b01      	cmp	r3, #1
 8001fb2:	d101      	bne.n	8001fb8 <HAL_PCD_EP_Close+0x6a>
 8001fb4:	2302      	movs	r3, #2
 8001fb6:	e00e      	b.n	8001fd6 <HAL_PCD_EP_Close+0x88>
 8001fb8:	687b      	ldr	r3, [r7, #4]
 8001fba:	2201      	movs	r2, #1
 8001fbc:	f883 22a8 	strb.w	r2, [r3, #680]	; 0x2a8
  (void)USB_DeactivateEndpoint(hpcd->Instance, ep);
 8001fc0:	687b      	ldr	r3, [r7, #4]
 8001fc2:	681b      	ldr	r3, [r3, #0]
 8001fc4:	68f9      	ldr	r1, [r7, #12]
 8001fc6:	4618      	mov	r0, r3
 8001fc8:	f002 fcbe 	bl	8004948 <USB_DeactivateEndpoint>
  __HAL_UNLOCK(hpcd);
 8001fcc:	687b      	ldr	r3, [r7, #4]
 8001fce:	2200      	movs	r2, #0
 8001fd0:	f883 22a8 	strb.w	r2, [r3, #680]	; 0x2a8
  return HAL_OK;
 8001fd4:	2300      	movs	r3, #0
}
 8001fd6:	4618      	mov	r0, r3
 8001fd8:	3710      	adds	r7, #16
 8001fda:	46bd      	mov	sp, r7
 8001fdc:	bd80      	pop	{r7, pc}

08001fde <HAL_PCD_EP_Receive>:
  * @param  pBuf pointer to the reception buffer
  * @param  len amount of data to be received
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Receive(PCD_HandleTypeDef *hpcd, uint8_t ep_addr, uint8_t *pBuf, uint32_t len)
{
 8001fde:	b580      	push	{r7, lr}
 8001fe0:	b086      	sub	sp, #24
 8001fe2:	af00      	add	r7, sp, #0
 8001fe4:	60f8      	str	r0, [r7, #12]
 8001fe6:	607a      	str	r2, [r7, #4]
 8001fe8:	603b      	str	r3, [r7, #0]
 8001fea:	460b      	mov	r3, r1
 8001fec:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8001fee:	7afb      	ldrb	r3, [r7, #11]
 8001ff0:	f003 0207 	and.w	r2, r3, #7
 8001ff4:	4613      	mov	r3, r2
 8001ff6:	009b      	lsls	r3, r3, #2
 8001ff8:	4413      	add	r3, r2
 8001ffa:	00db      	lsls	r3, r3, #3
 8001ffc:	f503 73b4 	add.w	r3, r3, #360	; 0x168
 8002000:	68fa      	ldr	r2, [r7, #12]
 8002002:	4413      	add	r3, r2
 8002004:	617b      	str	r3, [r7, #20]

  /*setup and start the Xfer */
  ep->xfer_buff = pBuf;
 8002006:	697b      	ldr	r3, [r7, #20]
 8002008:	687a      	ldr	r2, [r7, #4]
 800200a:	615a      	str	r2, [r3, #20]
  ep->xfer_len = len;
 800200c:	697b      	ldr	r3, [r7, #20]
 800200e:	683a      	ldr	r2, [r7, #0]
 8002010:	619a      	str	r2, [r3, #24]
  ep->xfer_count = 0U;
 8002012:	697b      	ldr	r3, [r7, #20]
 8002014:	2200      	movs	r2, #0
 8002016:	61da      	str	r2, [r3, #28]
  ep->is_in = 0U;
 8002018:	697b      	ldr	r3, [r7, #20]
 800201a:	2200      	movs	r2, #0
 800201c:	705a      	strb	r2, [r3, #1]
  ep->num = ep_addr & EP_ADDR_MSK;
 800201e:	7afb      	ldrb	r3, [r7, #11]
 8002020:	f003 0307 	and.w	r3, r3, #7
 8002024:	b2da      	uxtb	r2, r3
 8002026:	697b      	ldr	r3, [r7, #20]
 8002028:	701a      	strb	r2, [r3, #0]

  if ((ep_addr & EP_ADDR_MSK) == 0U)
 800202a:	7afb      	ldrb	r3, [r7, #11]
 800202c:	f003 0307 	and.w	r3, r3, #7
 8002030:	2b00      	cmp	r3, #0
 8002032:	d106      	bne.n	8002042 <HAL_PCD_EP_Receive+0x64>
  {
    (void)USB_EP0StartXfer(hpcd->Instance, ep);
 8002034:	68fb      	ldr	r3, [r7, #12]
 8002036:	681b      	ldr	r3, [r3, #0]
 8002038:	6979      	ldr	r1, [r7, #20]
 800203a:	4618      	mov	r0, r3
 800203c:	f002 fe70 	bl	8004d20 <USB_EPStartXfer>
 8002040:	e005      	b.n	800204e <HAL_PCD_EP_Receive+0x70>
  }
  else
  {
    (void)USB_EPStartXfer(hpcd->Instance, ep);
 8002042:	68fb      	ldr	r3, [r7, #12]
 8002044:	681b      	ldr	r3, [r3, #0]
 8002046:	6979      	ldr	r1, [r7, #20]
 8002048:	4618      	mov	r0, r3
 800204a:	f002 fe69 	bl	8004d20 <USB_EPStartXfer>
  }

  return HAL_OK;
 800204e:	2300      	movs	r3, #0
}
 8002050:	4618      	mov	r0, r3
 8002052:	3718      	adds	r7, #24
 8002054:	46bd      	mov	sp, r7
 8002056:	bd80      	pop	{r7, pc}

08002058 <HAL_PCD_EP_GetRxCount>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval Data Size
  */
uint32_t HAL_PCD_EP_GetRxCount(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 8002058:	b480      	push	{r7}
 800205a:	b083      	sub	sp, #12
 800205c:	af00      	add	r7, sp, #0
 800205e:	6078      	str	r0, [r7, #4]
 8002060:	460b      	mov	r3, r1
 8002062:	70fb      	strb	r3, [r7, #3]
  return hpcd->OUT_ep[ep_addr & EP_ADDR_MSK].xfer_count;
 8002064:	78fb      	ldrb	r3, [r7, #3]
 8002066:	f003 0207 	and.w	r2, r3, #7
 800206a:	6879      	ldr	r1, [r7, #4]
 800206c:	4613      	mov	r3, r2
 800206e:	009b      	lsls	r3, r3, #2
 8002070:	4413      	add	r3, r2
 8002072:	00db      	lsls	r3, r3, #3
 8002074:	440b      	add	r3, r1
 8002076:	f503 73c2 	add.w	r3, r3, #388	; 0x184
 800207a:	681b      	ldr	r3, [r3, #0]
}
 800207c:	4618      	mov	r0, r3
 800207e:	370c      	adds	r7, #12
 8002080:	46bd      	mov	sp, r7
 8002082:	bc80      	pop	{r7}
 8002084:	4770      	bx	lr

08002086 <HAL_PCD_EP_Transmit>:
  * @param  pBuf pointer to the transmission buffer
  * @param  len amount of data to be sent
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Transmit(PCD_HandleTypeDef *hpcd, uint8_t ep_addr, uint8_t *pBuf, uint32_t len)
{
 8002086:	b580      	push	{r7, lr}
 8002088:	b086      	sub	sp, #24
 800208a:	af00      	add	r7, sp, #0
 800208c:	60f8      	str	r0, [r7, #12]
 800208e:	607a      	str	r2, [r7, #4]
 8002090:	603b      	str	r3, [r7, #0]
 8002092:	460b      	mov	r3, r1
 8002094:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8002096:	7afb      	ldrb	r3, [r7, #11]
 8002098:	f003 0307 	and.w	r3, r3, #7
 800209c:	1c5a      	adds	r2, r3, #1
 800209e:	4613      	mov	r3, r2
 80020a0:	009b      	lsls	r3, r3, #2
 80020a2:	4413      	add	r3, r2
 80020a4:	00db      	lsls	r3, r3, #3
 80020a6:	68fa      	ldr	r2, [r7, #12]
 80020a8:	4413      	add	r3, r2
 80020aa:	617b      	str	r3, [r7, #20]

  /*setup and start the Xfer */
  ep->xfer_buff = pBuf;
 80020ac:	697b      	ldr	r3, [r7, #20]
 80020ae:	687a      	ldr	r2, [r7, #4]
 80020b0:	615a      	str	r2, [r3, #20]
  ep->xfer_len = len;
 80020b2:	697b      	ldr	r3, [r7, #20]
 80020b4:	683a      	ldr	r2, [r7, #0]
 80020b6:	619a      	str	r2, [r3, #24]
#if defined (USB)
  ep->xfer_fill_db = 1U;
 80020b8:	697b      	ldr	r3, [r7, #20]
 80020ba:	2201      	movs	r2, #1
 80020bc:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
  ep->xfer_len_db = len;
 80020c0:	697b      	ldr	r3, [r7, #20]
 80020c2:	683a      	ldr	r2, [r7, #0]
 80020c4:	621a      	str	r2, [r3, #32]
#endif /* defined (USB) */
  ep->xfer_count = 0U;
 80020c6:	697b      	ldr	r3, [r7, #20]
 80020c8:	2200      	movs	r2, #0
 80020ca:	61da      	str	r2, [r3, #28]
  ep->is_in = 1U;
 80020cc:	697b      	ldr	r3, [r7, #20]
 80020ce:	2201      	movs	r2, #1
 80020d0:	705a      	strb	r2, [r3, #1]
  ep->num = ep_addr & EP_ADDR_MSK;
 80020d2:	7afb      	ldrb	r3, [r7, #11]
 80020d4:	f003 0307 	and.w	r3, r3, #7
 80020d8:	b2da      	uxtb	r2, r3
 80020da:	697b      	ldr	r3, [r7, #20]
 80020dc:	701a      	strb	r2, [r3, #0]

  if ((ep_addr & EP_ADDR_MSK) == 0U)
 80020de:	7afb      	ldrb	r3, [r7, #11]
 80020e0:	f003 0307 	and.w	r3, r3, #7
 80020e4:	2b00      	cmp	r3, #0
 80020e6:	d106      	bne.n	80020f6 <HAL_PCD_EP_Transmit+0x70>
  {
    (void)USB_EP0StartXfer(hpcd->Instance, ep);
 80020e8:	68fb      	ldr	r3, [r7, #12]
 80020ea:	681b      	ldr	r3, [r3, #0]
 80020ec:	6979      	ldr	r1, [r7, #20]
 80020ee:	4618      	mov	r0, r3
 80020f0:	f002 fe16 	bl	8004d20 <USB_EPStartXfer>
 80020f4:	e005      	b.n	8002102 <HAL_PCD_EP_Transmit+0x7c>
  }
  else
  {
    (void)USB_EPStartXfer(hpcd->Instance, ep);
 80020f6:	68fb      	ldr	r3, [r7, #12]
 80020f8:	681b      	ldr	r3, [r3, #0]
 80020fa:	6979      	ldr	r1, [r7, #20]
 80020fc:	4618      	mov	r0, r3
 80020fe:	f002 fe0f 	bl	8004d20 <USB_EPStartXfer>
  }

  return HAL_OK;
 8002102:	2300      	movs	r3, #0
}
 8002104:	4618      	mov	r0, r3
 8002106:	3718      	adds	r7, #24
 8002108:	46bd      	mov	sp, r7
 800210a:	bd80      	pop	{r7, pc}

0800210c <HAL_PCD_EP_SetStall>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_SetStall(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 800210c:	b580      	push	{r7, lr}
 800210e:	b084      	sub	sp, #16
 8002110:	af00      	add	r7, sp, #0
 8002112:	6078      	str	r0, [r7, #4]
 8002114:	460b      	mov	r3, r1
 8002116:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if (((uint32_t)ep_addr & EP_ADDR_MSK) > hpcd->Init.dev_endpoints)
 8002118:	78fb      	ldrb	r3, [r7, #3]
 800211a:	f003 0207 	and.w	r2, r3, #7
 800211e:	687b      	ldr	r3, [r7, #4]
 8002120:	685b      	ldr	r3, [r3, #4]
 8002122:	429a      	cmp	r2, r3
 8002124:	d901      	bls.n	800212a <HAL_PCD_EP_SetStall+0x1e>
  {
    return HAL_ERROR;
 8002126:	2301      	movs	r3, #1
 8002128:	e04c      	b.n	80021c4 <HAL_PCD_EP_SetStall+0xb8>
  }

  if ((0x80U & ep_addr) == 0x80U)
 800212a:	f997 3003 	ldrsb.w	r3, [r7, #3]
 800212e:	2b00      	cmp	r3, #0
 8002130:	da0e      	bge.n	8002150 <HAL_PCD_EP_SetStall+0x44>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8002132:	78fb      	ldrb	r3, [r7, #3]
 8002134:	f003 0307 	and.w	r3, r3, #7
 8002138:	1c5a      	adds	r2, r3, #1
 800213a:	4613      	mov	r3, r2
 800213c:	009b      	lsls	r3, r3, #2
 800213e:	4413      	add	r3, r2
 8002140:	00db      	lsls	r3, r3, #3
 8002142:	687a      	ldr	r2, [r7, #4]
 8002144:	4413      	add	r3, r2
 8002146:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 8002148:	68fb      	ldr	r3, [r7, #12]
 800214a:	2201      	movs	r2, #1
 800214c:	705a      	strb	r2, [r3, #1]
 800214e:	e00c      	b.n	800216a <HAL_PCD_EP_SetStall+0x5e>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr];
 8002150:	78fa      	ldrb	r2, [r7, #3]
 8002152:	4613      	mov	r3, r2
 8002154:	009b      	lsls	r3, r3, #2
 8002156:	4413      	add	r3, r2
 8002158:	00db      	lsls	r3, r3, #3
 800215a:	f503 73b4 	add.w	r3, r3, #360	; 0x168
 800215e:	687a      	ldr	r2, [r7, #4]
 8002160:	4413      	add	r3, r2
 8002162:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 8002164:	68fb      	ldr	r3, [r7, #12]
 8002166:	2200      	movs	r2, #0
 8002168:	705a      	strb	r2, [r3, #1]
  }

  ep->is_stall = 1U;
 800216a:	68fb      	ldr	r3, [r7, #12]
 800216c:	2201      	movs	r2, #1
 800216e:	709a      	strb	r2, [r3, #2]
  ep->num = ep_addr & EP_ADDR_MSK;
 8002170:	78fb      	ldrb	r3, [r7, #3]
 8002172:	f003 0307 	and.w	r3, r3, #7
 8002176:	b2da      	uxtb	r2, r3
 8002178:	68fb      	ldr	r3, [r7, #12]
 800217a:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 800217c:	687b      	ldr	r3, [r7, #4]
 800217e:	f893 32a8 	ldrb.w	r3, [r3, #680]	; 0x2a8
 8002182:	2b01      	cmp	r3, #1
 8002184:	d101      	bne.n	800218a <HAL_PCD_EP_SetStall+0x7e>
 8002186:	2302      	movs	r3, #2
 8002188:	e01c      	b.n	80021c4 <HAL_PCD_EP_SetStall+0xb8>
 800218a:	687b      	ldr	r3, [r7, #4]
 800218c:	2201      	movs	r2, #1
 800218e:	f883 22a8 	strb.w	r2, [r3, #680]	; 0x2a8

  (void)USB_EPSetStall(hpcd->Instance, ep);
 8002192:	687b      	ldr	r3, [r7, #4]
 8002194:	681b      	ldr	r3, [r3, #0]
 8002196:	68f9      	ldr	r1, [r7, #12]
 8002198:	4618      	mov	r0, r3
 800219a:	f003 fee1 	bl	8005f60 <USB_EPSetStall>

  if ((ep_addr & EP_ADDR_MSK) == 0U)
 800219e:	78fb      	ldrb	r3, [r7, #3]
 80021a0:	f003 0307 	and.w	r3, r3, #7
 80021a4:	2b00      	cmp	r3, #0
 80021a6:	d108      	bne.n	80021ba <HAL_PCD_EP_SetStall+0xae>
  {
    (void)USB_EP0_OutStart(hpcd->Instance, (uint8_t *)hpcd->Setup);
 80021a8:	687b      	ldr	r3, [r7, #4]
 80021aa:	681a      	ldr	r2, [r3, #0]
 80021ac:	687b      	ldr	r3, [r7, #4]
 80021ae:	f503 732c 	add.w	r3, r3, #688	; 0x2b0
 80021b2:	4619      	mov	r1, r3
 80021b4:	4610      	mov	r0, r2
 80021b6:	f004 f806 	bl	80061c6 <USB_EP0_OutStart>
  }

  __HAL_UNLOCK(hpcd);
 80021ba:	687b      	ldr	r3, [r7, #4]
 80021bc:	2200      	movs	r2, #0
 80021be:	f883 22a8 	strb.w	r2, [r3, #680]	; 0x2a8

  return HAL_OK;
 80021c2:	2300      	movs	r3, #0
}
 80021c4:	4618      	mov	r0, r3
 80021c6:	3710      	adds	r7, #16
 80021c8:	46bd      	mov	sp, r7
 80021ca:	bd80      	pop	{r7, pc}

080021cc <HAL_PCD_EP_ClrStall>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_ClrStall(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 80021cc:	b580      	push	{r7, lr}
 80021ce:	b084      	sub	sp, #16
 80021d0:	af00      	add	r7, sp, #0
 80021d2:	6078      	str	r0, [r7, #4]
 80021d4:	460b      	mov	r3, r1
 80021d6:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if (((uint32_t)ep_addr & 0x0FU) > hpcd->Init.dev_endpoints)
 80021d8:	78fb      	ldrb	r3, [r7, #3]
 80021da:	f003 020f 	and.w	r2, r3, #15
 80021de:	687b      	ldr	r3, [r7, #4]
 80021e0:	685b      	ldr	r3, [r3, #4]
 80021e2:	429a      	cmp	r2, r3
 80021e4:	d901      	bls.n	80021ea <HAL_PCD_EP_ClrStall+0x1e>
  {
    return HAL_ERROR;
 80021e6:	2301      	movs	r3, #1
 80021e8:	e040      	b.n	800226c <HAL_PCD_EP_ClrStall+0xa0>
  }

  if ((0x80U & ep_addr) == 0x80U)
 80021ea:	f997 3003 	ldrsb.w	r3, [r7, #3]
 80021ee:	2b00      	cmp	r3, #0
 80021f0:	da0e      	bge.n	8002210 <HAL_PCD_EP_ClrStall+0x44>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 80021f2:	78fb      	ldrb	r3, [r7, #3]
 80021f4:	f003 0307 	and.w	r3, r3, #7
 80021f8:	1c5a      	adds	r2, r3, #1
 80021fa:	4613      	mov	r3, r2
 80021fc:	009b      	lsls	r3, r3, #2
 80021fe:	4413      	add	r3, r2
 8002200:	00db      	lsls	r3, r3, #3
 8002202:	687a      	ldr	r2, [r7, #4]
 8002204:	4413      	add	r3, r2
 8002206:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 8002208:	68fb      	ldr	r3, [r7, #12]
 800220a:	2201      	movs	r2, #1
 800220c:	705a      	strb	r2, [r3, #1]
 800220e:	e00e      	b.n	800222e <HAL_PCD_EP_ClrStall+0x62>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8002210:	78fb      	ldrb	r3, [r7, #3]
 8002212:	f003 0207 	and.w	r2, r3, #7
 8002216:	4613      	mov	r3, r2
 8002218:	009b      	lsls	r3, r3, #2
 800221a:	4413      	add	r3, r2
 800221c:	00db      	lsls	r3, r3, #3
 800221e:	f503 73b4 	add.w	r3, r3, #360	; 0x168
 8002222:	687a      	ldr	r2, [r7, #4]
 8002224:	4413      	add	r3, r2
 8002226:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 8002228:	68fb      	ldr	r3, [r7, #12]
 800222a:	2200      	movs	r2, #0
 800222c:	705a      	strb	r2, [r3, #1]
  }

  ep->is_stall = 0U;
 800222e:	68fb      	ldr	r3, [r7, #12]
 8002230:	2200      	movs	r2, #0
 8002232:	709a      	strb	r2, [r3, #2]
  ep->num = ep_addr & EP_ADDR_MSK;
 8002234:	78fb      	ldrb	r3, [r7, #3]
 8002236:	f003 0307 	and.w	r3, r3, #7
 800223a:	b2da      	uxtb	r2, r3
 800223c:	68fb      	ldr	r3, [r7, #12]
 800223e:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 8002240:	687b      	ldr	r3, [r7, #4]
 8002242:	f893 32a8 	ldrb.w	r3, [r3, #680]	; 0x2a8
 8002246:	2b01      	cmp	r3, #1
 8002248:	d101      	bne.n	800224e <HAL_PCD_EP_ClrStall+0x82>
 800224a:	2302      	movs	r3, #2
 800224c:	e00e      	b.n	800226c <HAL_PCD_EP_ClrStall+0xa0>
 800224e:	687b      	ldr	r3, [r7, #4]
 8002250:	2201      	movs	r2, #1
 8002252:	f883 22a8 	strb.w	r2, [r3, #680]	; 0x2a8
  (void)USB_EPClearStall(hpcd->Instance, ep);
 8002256:	687b      	ldr	r3, [r7, #4]
 8002258:	681b      	ldr	r3, [r3, #0]
 800225a:	68f9      	ldr	r1, [r7, #12]
 800225c:	4618      	mov	r0, r3
 800225e:	f003 fecf 	bl	8006000 <USB_EPClearStall>
  __HAL_UNLOCK(hpcd);
 8002262:	687b      	ldr	r3, [r7, #4]
 8002264:	2200      	movs	r2, #0
 8002266:	f883 22a8 	strb.w	r2, [r3, #680]	; 0x2a8

  return HAL_OK;
 800226a:	2300      	movs	r3, #0
}
 800226c:	4618      	mov	r0, r3
 800226e:	3710      	adds	r7, #16
 8002270:	46bd      	mov	sp, r7
 8002272:	bd80      	pop	{r7, pc}

08002274 <PCD_EP_ISR_Handler>:
  * @brief  This function handles PCD Endpoint interrupt request.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
static HAL_StatusTypeDef PCD_EP_ISR_Handler(PCD_HandleTypeDef *hpcd)
{
 8002274:	b580      	push	{r7, lr}
 8002276:	b08e      	sub	sp, #56	; 0x38
 8002278:	af00      	add	r7, sp, #0
 800227a:	6078      	str	r0, [r7, #4]
  PCD_EPTypeDef *ep;
  uint16_t count, wIstr, wEPVal, TxByteNbre;
  uint8_t epindex;

  /* stay in loop while pending interrupts */
  while ((hpcd->Instance->ISTR & USB_ISTR_CTR) != 0U)
 800227c:	e2df      	b.n	800283e <PCD_EP_ISR_Handler+0x5ca>
  {
    wIstr = hpcd->Instance->ISTR;
 800227e:	687b      	ldr	r3, [r7, #4]
 8002280:	681b      	ldr	r3, [r3, #0]
 8002282:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 8002286:	85fb      	strh	r3, [r7, #46]	; 0x2e

    /* extract highest priority endpoint number */
    epindex = (uint8_t)(wIstr & USB_ISTR_EP_ID);
 8002288:	8dfb      	ldrh	r3, [r7, #46]	; 0x2e
 800228a:	b2db      	uxtb	r3, r3
 800228c:	f003 030f 	and.w	r3, r3, #15
 8002290:	f887 302d 	strb.w	r3, [r7, #45]	; 0x2d

    if (epindex == 0U)
 8002294:	f897 302d 	ldrb.w	r3, [r7, #45]	; 0x2d
 8002298:	2b00      	cmp	r3, #0
 800229a:	f040 8158 	bne.w	800254e <PCD_EP_ISR_Handler+0x2da>
    {
      /* Decode and service control endpoint interrupt */

      /* DIR bit = origin of the interrupt */
      if ((wIstr & USB_ISTR_DIR) == 0U)
 800229e:	8dfb      	ldrh	r3, [r7, #46]	; 0x2e
 80022a0:	f003 0310 	and.w	r3, r3, #16
 80022a4:	2b00      	cmp	r3, #0
 80022a6:	d152      	bne.n	800234e <PCD_EP_ISR_Handler+0xda>
      {
        /* DIR = 0 */

        /* DIR = 0 => IN  int */
        /* DIR = 0 implies that (EP_CTR_TX = 1) always */
        PCD_CLEAR_TX_EP_CTR(hpcd->Instance, PCD_ENDP0);
 80022a8:	687b      	ldr	r3, [r7, #4]
 80022aa:	681b      	ldr	r3, [r3, #0]
 80022ac:	881b      	ldrh	r3, [r3, #0]
 80022ae:	b29b      	uxth	r3, r3
 80022b0:	f423 43e1 	bic.w	r3, r3, #28800	; 0x7080
 80022b4:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80022b8:	81fb      	strh	r3, [r7, #14]
 80022ba:	687b      	ldr	r3, [r7, #4]
 80022bc:	681a      	ldr	r2, [r3, #0]
 80022be:	89fb      	ldrh	r3, [r7, #14]
 80022c0:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 80022c4:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 80022c8:	b29b      	uxth	r3, r3
 80022ca:	8013      	strh	r3, [r2, #0]
        ep = &hpcd->IN_ep[0];
 80022cc:	687b      	ldr	r3, [r7, #4]
 80022ce:	3328      	adds	r3, #40	; 0x28
 80022d0:	627b      	str	r3, [r7, #36]	; 0x24

        ep->xfer_count = PCD_GET_EP_TX_CNT(hpcd->Instance, ep->num);
 80022d2:	687b      	ldr	r3, [r7, #4]
 80022d4:	681b      	ldr	r3, [r3, #0]
 80022d6:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 80022da:	b29b      	uxth	r3, r3
 80022dc:	461a      	mov	r2, r3
 80022de:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80022e0:	781b      	ldrb	r3, [r3, #0]
 80022e2:	00db      	lsls	r3, r3, #3
 80022e4:	4413      	add	r3, r2
 80022e6:	3302      	adds	r3, #2
 80022e8:	005b      	lsls	r3, r3, #1
 80022ea:	687a      	ldr	r2, [r7, #4]
 80022ec:	6812      	ldr	r2, [r2, #0]
 80022ee:	4413      	add	r3, r2
 80022f0:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 80022f4:	881b      	ldrh	r3, [r3, #0]
 80022f6:	f3c3 0209 	ubfx	r2, r3, #0, #10
 80022fa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80022fc:	61da      	str	r2, [r3, #28]
        ep->xfer_buff += ep->xfer_count;
 80022fe:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002300:	695a      	ldr	r2, [r3, #20]
 8002302:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002304:	69db      	ldr	r3, [r3, #28]
 8002306:	441a      	add	r2, r3
 8002308:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800230a:	615a      	str	r2, [r3, #20]

        /* TX COMPLETE */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->DataInStageCallback(hpcd, 0U);
#else
        HAL_PCD_DataInStageCallback(hpcd, 0U);
 800230c:	2100      	movs	r1, #0
 800230e:	6878      	ldr	r0, [r7, #4]
 8002310:	f005 fde1 	bl	8007ed6 <HAL_PCD_DataInStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

        if ((hpcd->USB_Address > 0U) && (ep->xfer_len == 0U))
 8002314:	687b      	ldr	r3, [r7, #4]
 8002316:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 800231a:	b2db      	uxtb	r3, r3
 800231c:	2b00      	cmp	r3, #0
 800231e:	f000 828e 	beq.w	800283e <PCD_EP_ISR_Handler+0x5ca>
 8002322:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002324:	699b      	ldr	r3, [r3, #24]
 8002326:	2b00      	cmp	r3, #0
 8002328:	f040 8289 	bne.w	800283e <PCD_EP_ISR_Handler+0x5ca>
        {
          hpcd->Instance->DADDR = ((uint16_t)hpcd->USB_Address | USB_DADDR_EF);
 800232c:	687b      	ldr	r3, [r7, #4]
 800232e:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 8002332:	b2db      	uxtb	r3, r3
 8002334:	f063 037f 	orn	r3, r3, #127	; 0x7f
 8002338:	b2da      	uxtb	r2, r3
 800233a:	687b      	ldr	r3, [r7, #4]
 800233c:	681b      	ldr	r3, [r3, #0]
 800233e:	b292      	uxth	r2, r2
 8002340:	f8a3 204c 	strh.w	r2, [r3, #76]	; 0x4c
          hpcd->USB_Address = 0U;
 8002344:	687b      	ldr	r3, [r7, #4]
 8002346:	2200      	movs	r2, #0
 8002348:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
 800234c:	e277      	b.n	800283e <PCD_EP_ISR_Handler+0x5ca>
      {
        /* DIR = 1 */

        /* DIR = 1 & CTR_RX => SETUP or OUT int */
        /* DIR = 1 & (CTR_TX | CTR_RX) => 2 int pending */
        ep = &hpcd->OUT_ep[0];
 800234e:	687b      	ldr	r3, [r7, #4]
 8002350:	f503 73b4 	add.w	r3, r3, #360	; 0x168
 8002354:	627b      	str	r3, [r7, #36]	; 0x24
        wEPVal = PCD_GET_ENDPOINT(hpcd->Instance, PCD_ENDP0);
 8002356:	687b      	ldr	r3, [r7, #4]
 8002358:	681b      	ldr	r3, [r3, #0]
 800235a:	881b      	ldrh	r3, [r3, #0]
 800235c:	857b      	strh	r3, [r7, #42]	; 0x2a

        if ((wEPVal & USB_EP_SETUP) != 0U)
 800235e:	8d7b      	ldrh	r3, [r7, #42]	; 0x2a
 8002360:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8002364:	2b00      	cmp	r3, #0
 8002366:	d034      	beq.n	80023d2 <PCD_EP_ISR_Handler+0x15e>
        {
          /* Get SETUP Packet */
          ep->xfer_count = PCD_GET_EP_RX_CNT(hpcd->Instance, ep->num);
 8002368:	687b      	ldr	r3, [r7, #4]
 800236a:	681b      	ldr	r3, [r3, #0]
 800236c:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8002370:	b29b      	uxth	r3, r3
 8002372:	461a      	mov	r2, r3
 8002374:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002376:	781b      	ldrb	r3, [r3, #0]
 8002378:	00db      	lsls	r3, r3, #3
 800237a:	4413      	add	r3, r2
 800237c:	3306      	adds	r3, #6
 800237e:	005b      	lsls	r3, r3, #1
 8002380:	687a      	ldr	r2, [r7, #4]
 8002382:	6812      	ldr	r2, [r2, #0]
 8002384:	4413      	add	r3, r2
 8002386:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 800238a:	881b      	ldrh	r3, [r3, #0]
 800238c:	f3c3 0209 	ubfx	r2, r3, #0, #10
 8002390:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002392:	61da      	str	r2, [r3, #28]

          USB_ReadPMA(hpcd->Instance, (uint8_t *)hpcd->Setup,
 8002394:	687b      	ldr	r3, [r7, #4]
 8002396:	6818      	ldr	r0, [r3, #0]
 8002398:	687b      	ldr	r3, [r7, #4]
 800239a:	f503 712c 	add.w	r1, r3, #688	; 0x2b0
 800239e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80023a0:	88da      	ldrh	r2, [r3, #6]
                      ep->pmaadress, (uint16_t)ep->xfer_count);
 80023a2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80023a4:	69db      	ldr	r3, [r3, #28]
          USB_ReadPMA(hpcd->Instance, (uint8_t *)hpcd->Setup,
 80023a6:	b29b      	uxth	r3, r3
 80023a8:	f003 ff5c 	bl	8006264 <USB_ReadPMA>

          /* SETUP bit kept frozen while CTR_RX = 1 */
          PCD_CLEAR_RX_EP_CTR(hpcd->Instance, PCD_ENDP0);
 80023ac:	687b      	ldr	r3, [r7, #4]
 80023ae:	681b      	ldr	r3, [r3, #0]
 80023b0:	881b      	ldrh	r3, [r3, #0]
 80023b2:	b29a      	uxth	r2, r3
 80023b4:	f640 738f 	movw	r3, #3983	; 0xf8f
 80023b8:	4013      	ands	r3, r2
 80023ba:	823b      	strh	r3, [r7, #16]
 80023bc:	687b      	ldr	r3, [r7, #4]
 80023be:	681b      	ldr	r3, [r3, #0]
 80023c0:	8a3a      	ldrh	r2, [r7, #16]
 80023c2:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 80023c6:	b292      	uxth	r2, r2
 80023c8:	801a      	strh	r2, [r3, #0]

          /* Process SETUP Packet*/
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
          hpcd->SetupStageCallback(hpcd);
#else
          HAL_PCD_SetupStageCallback(hpcd);
 80023ca:	6878      	ldr	r0, [r7, #4]
 80023cc:	f005 fd56 	bl	8007e7c <HAL_PCD_SetupStageCallback>
 80023d0:	e235      	b.n	800283e <PCD_EP_ISR_Handler+0x5ca>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
        }
        else if ((wEPVal & USB_EP_CTR_RX) != 0U)
 80023d2:	f9b7 302a 	ldrsh.w	r3, [r7, #42]	; 0x2a
 80023d6:	2b00      	cmp	r3, #0
 80023d8:	f280 8231 	bge.w	800283e <PCD_EP_ISR_Handler+0x5ca>
        {
          PCD_CLEAR_RX_EP_CTR(hpcd->Instance, PCD_ENDP0);
 80023dc:	687b      	ldr	r3, [r7, #4]
 80023de:	681b      	ldr	r3, [r3, #0]
 80023e0:	881b      	ldrh	r3, [r3, #0]
 80023e2:	b29a      	uxth	r2, r3
 80023e4:	f640 738f 	movw	r3, #3983	; 0xf8f
 80023e8:	4013      	ands	r3, r2
 80023ea:	83bb      	strh	r3, [r7, #28]
 80023ec:	687b      	ldr	r3, [r7, #4]
 80023ee:	681b      	ldr	r3, [r3, #0]
 80023f0:	8bba      	ldrh	r2, [r7, #28]
 80023f2:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 80023f6:	b292      	uxth	r2, r2
 80023f8:	801a      	strh	r2, [r3, #0]

          /* Get Control Data OUT Packet */
          ep->xfer_count = PCD_GET_EP_RX_CNT(hpcd->Instance, ep->num);
 80023fa:	687b      	ldr	r3, [r7, #4]
 80023fc:	681b      	ldr	r3, [r3, #0]
 80023fe:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8002402:	b29b      	uxth	r3, r3
 8002404:	461a      	mov	r2, r3
 8002406:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002408:	781b      	ldrb	r3, [r3, #0]
 800240a:	00db      	lsls	r3, r3, #3
 800240c:	4413      	add	r3, r2
 800240e:	3306      	adds	r3, #6
 8002410:	005b      	lsls	r3, r3, #1
 8002412:	687a      	ldr	r2, [r7, #4]
 8002414:	6812      	ldr	r2, [r2, #0]
 8002416:	4413      	add	r3, r2
 8002418:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 800241c:	881b      	ldrh	r3, [r3, #0]
 800241e:	f3c3 0209 	ubfx	r2, r3, #0, #10
 8002422:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002424:	61da      	str	r2, [r3, #28]

          if ((ep->xfer_count != 0U) && (ep->xfer_buff != 0U))
 8002426:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002428:	69db      	ldr	r3, [r3, #28]
 800242a:	2b00      	cmp	r3, #0
 800242c:	d019      	beq.n	8002462 <PCD_EP_ISR_Handler+0x1ee>
 800242e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002430:	695b      	ldr	r3, [r3, #20]
 8002432:	2b00      	cmp	r3, #0
 8002434:	d015      	beq.n	8002462 <PCD_EP_ISR_Handler+0x1ee>
          {
            USB_ReadPMA(hpcd->Instance, ep->xfer_buff,
 8002436:	687b      	ldr	r3, [r7, #4]
 8002438:	6818      	ldr	r0, [r3, #0]
 800243a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800243c:	6959      	ldr	r1, [r3, #20]
 800243e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002440:	88da      	ldrh	r2, [r3, #6]
                        ep->pmaadress, (uint16_t)ep->xfer_count);
 8002442:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002444:	69db      	ldr	r3, [r3, #28]
            USB_ReadPMA(hpcd->Instance, ep->xfer_buff,
 8002446:	b29b      	uxth	r3, r3
 8002448:	f003 ff0c 	bl	8006264 <USB_ReadPMA>

            ep->xfer_buff += ep->xfer_count;
 800244c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800244e:	695a      	ldr	r2, [r3, #20]
 8002450:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002452:	69db      	ldr	r3, [r3, #28]
 8002454:	441a      	add	r2, r3
 8002456:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002458:	615a      	str	r2, [r3, #20]

            /* Process Control Data OUT Packet */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
            hpcd->DataOutStageCallback(hpcd, 0U);
#else
            HAL_PCD_DataOutStageCallback(hpcd, 0U);
 800245a:	2100      	movs	r1, #0
 800245c:	6878      	ldr	r0, [r7, #4]
 800245e:	f005 fd1f 	bl	8007ea0 <HAL_PCD_DataOutStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
          }

          PCD_SET_EP_RX_CNT(hpcd->Instance, PCD_ENDP0, ep->maxpacket);
 8002462:	687b      	ldr	r3, [r7, #4]
 8002464:	681b      	ldr	r3, [r3, #0]
 8002466:	61bb      	str	r3, [r7, #24]
 8002468:	687b      	ldr	r3, [r7, #4]
 800246a:	681b      	ldr	r3, [r3, #0]
 800246c:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8002470:	b29b      	uxth	r3, r3
 8002472:	461a      	mov	r2, r3
 8002474:	69bb      	ldr	r3, [r7, #24]
 8002476:	4413      	add	r3, r2
 8002478:	61bb      	str	r3, [r7, #24]
 800247a:	69bb      	ldr	r3, [r7, #24]
 800247c:	f203 430c 	addw	r3, r3, #1036	; 0x40c
 8002480:	617b      	str	r3, [r7, #20]
 8002482:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002484:	691b      	ldr	r3, [r3, #16]
 8002486:	2b00      	cmp	r3, #0
 8002488:	d112      	bne.n	80024b0 <PCD_EP_ISR_Handler+0x23c>
 800248a:	697b      	ldr	r3, [r7, #20]
 800248c:	881b      	ldrh	r3, [r3, #0]
 800248e:	b29b      	uxth	r3, r3
 8002490:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 8002494:	b29a      	uxth	r2, r3
 8002496:	697b      	ldr	r3, [r7, #20]
 8002498:	801a      	strh	r2, [r3, #0]
 800249a:	697b      	ldr	r3, [r7, #20]
 800249c:	881b      	ldrh	r3, [r3, #0]
 800249e:	b29b      	uxth	r3, r3
 80024a0:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 80024a4:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 80024a8:	b29a      	uxth	r2, r3
 80024aa:	697b      	ldr	r3, [r7, #20]
 80024ac:	801a      	strh	r2, [r3, #0]
 80024ae:	e02f      	b.n	8002510 <PCD_EP_ISR_Handler+0x29c>
 80024b0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80024b2:	691b      	ldr	r3, [r3, #16]
 80024b4:	2b3e      	cmp	r3, #62	; 0x3e
 80024b6:	d813      	bhi.n	80024e0 <PCD_EP_ISR_Handler+0x26c>
 80024b8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80024ba:	691b      	ldr	r3, [r3, #16]
 80024bc:	085b      	lsrs	r3, r3, #1
 80024be:	633b      	str	r3, [r7, #48]	; 0x30
 80024c0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80024c2:	691b      	ldr	r3, [r3, #16]
 80024c4:	f003 0301 	and.w	r3, r3, #1
 80024c8:	2b00      	cmp	r3, #0
 80024ca:	d002      	beq.n	80024d2 <PCD_EP_ISR_Handler+0x25e>
 80024cc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80024ce:	3301      	adds	r3, #1
 80024d0:	633b      	str	r3, [r7, #48]	; 0x30
 80024d2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80024d4:	b29b      	uxth	r3, r3
 80024d6:	029b      	lsls	r3, r3, #10
 80024d8:	b29a      	uxth	r2, r3
 80024da:	697b      	ldr	r3, [r7, #20]
 80024dc:	801a      	strh	r2, [r3, #0]
 80024de:	e017      	b.n	8002510 <PCD_EP_ISR_Handler+0x29c>
 80024e0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80024e2:	691b      	ldr	r3, [r3, #16]
 80024e4:	095b      	lsrs	r3, r3, #5
 80024e6:	633b      	str	r3, [r7, #48]	; 0x30
 80024e8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80024ea:	691b      	ldr	r3, [r3, #16]
 80024ec:	f003 031f 	and.w	r3, r3, #31
 80024f0:	2b00      	cmp	r3, #0
 80024f2:	d102      	bne.n	80024fa <PCD_EP_ISR_Handler+0x286>
 80024f4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80024f6:	3b01      	subs	r3, #1
 80024f8:	633b      	str	r3, [r7, #48]	; 0x30
 80024fa:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80024fc:	b29b      	uxth	r3, r3
 80024fe:	029b      	lsls	r3, r3, #10
 8002500:	b29b      	uxth	r3, r3
 8002502:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8002506:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800250a:	b29a      	uxth	r2, r3
 800250c:	697b      	ldr	r3, [r7, #20]
 800250e:	801a      	strh	r2, [r3, #0]
          PCD_SET_EP_RX_STATUS(hpcd->Instance, PCD_ENDP0, USB_EP_RX_VALID);
 8002510:	687b      	ldr	r3, [r7, #4]
 8002512:	681b      	ldr	r3, [r3, #0]
 8002514:	881b      	ldrh	r3, [r3, #0]
 8002516:	b29b      	uxth	r3, r3
 8002518:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 800251c:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8002520:	827b      	strh	r3, [r7, #18]
 8002522:	8a7b      	ldrh	r3, [r7, #18]
 8002524:	f483 5380 	eor.w	r3, r3, #4096	; 0x1000
 8002528:	827b      	strh	r3, [r7, #18]
 800252a:	8a7b      	ldrh	r3, [r7, #18]
 800252c:	f483 5300 	eor.w	r3, r3, #8192	; 0x2000
 8002530:	827b      	strh	r3, [r7, #18]
 8002532:	687b      	ldr	r3, [r7, #4]
 8002534:	681a      	ldr	r2, [r3, #0]
 8002536:	8a7b      	ldrh	r3, [r7, #18]
 8002538:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 800253c:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8002540:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8002544:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8002548:	b29b      	uxth	r3, r3
 800254a:	8013      	strh	r3, [r2, #0]
 800254c:	e177      	b.n	800283e <PCD_EP_ISR_Handler+0x5ca>
    }
    else
    {
      /* Decode and service non control endpoints interrupt */
      /* process related endpoint register */
      wEPVal = PCD_GET_ENDPOINT(hpcd->Instance, epindex);
 800254e:	687b      	ldr	r3, [r7, #4]
 8002550:	681b      	ldr	r3, [r3, #0]
 8002552:	461a      	mov	r2, r3
 8002554:	f897 302d 	ldrb.w	r3, [r7, #45]	; 0x2d
 8002558:	009b      	lsls	r3, r3, #2
 800255a:	4413      	add	r3, r2
 800255c:	881b      	ldrh	r3, [r3, #0]
 800255e:	857b      	strh	r3, [r7, #42]	; 0x2a

      if ((wEPVal & USB_EP_CTR_RX) != 0U)
 8002560:	f9b7 302a 	ldrsh.w	r3, [r7, #42]	; 0x2a
 8002564:	2b00      	cmp	r3, #0
 8002566:	f280 80ea 	bge.w	800273e <PCD_EP_ISR_Handler+0x4ca>
      {
        /* clear int flag */
        PCD_CLEAR_RX_EP_CTR(hpcd->Instance, epindex);
 800256a:	687b      	ldr	r3, [r7, #4]
 800256c:	681b      	ldr	r3, [r3, #0]
 800256e:	461a      	mov	r2, r3
 8002570:	f897 302d 	ldrb.w	r3, [r7, #45]	; 0x2d
 8002574:	009b      	lsls	r3, r3, #2
 8002576:	4413      	add	r3, r2
 8002578:	881b      	ldrh	r3, [r3, #0]
 800257a:	b29a      	uxth	r2, r3
 800257c:	f640 738f 	movw	r3, #3983	; 0xf8f
 8002580:	4013      	ands	r3, r2
 8002582:	853b      	strh	r3, [r7, #40]	; 0x28
 8002584:	687b      	ldr	r3, [r7, #4]
 8002586:	681b      	ldr	r3, [r3, #0]
 8002588:	461a      	mov	r2, r3
 800258a:	f897 302d 	ldrb.w	r3, [r7, #45]	; 0x2d
 800258e:	009b      	lsls	r3, r3, #2
 8002590:	4413      	add	r3, r2
 8002592:	8d3a      	ldrh	r2, [r7, #40]	; 0x28
 8002594:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 8002598:	b292      	uxth	r2, r2
 800259a:	801a      	strh	r2, [r3, #0]
        ep = &hpcd->OUT_ep[epindex];
 800259c:	f897 202d 	ldrb.w	r2, [r7, #45]	; 0x2d
 80025a0:	4613      	mov	r3, r2
 80025a2:	009b      	lsls	r3, r3, #2
 80025a4:	4413      	add	r3, r2
 80025a6:	00db      	lsls	r3, r3, #3
 80025a8:	f503 73b4 	add.w	r3, r3, #360	; 0x168
 80025ac:	687a      	ldr	r2, [r7, #4]
 80025ae:	4413      	add	r3, r2
 80025b0:	627b      	str	r3, [r7, #36]	; 0x24

        /* OUT Single Buffering */
        if (ep->doublebuffer == 0U)
 80025b2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80025b4:	7b1b      	ldrb	r3, [r3, #12]
 80025b6:	2b00      	cmp	r3, #0
 80025b8:	d122      	bne.n	8002600 <PCD_EP_ISR_Handler+0x38c>
        {
          count = (uint16_t)PCD_GET_EP_RX_CNT(hpcd->Instance, ep->num);
 80025ba:	687b      	ldr	r3, [r7, #4]
 80025bc:	681b      	ldr	r3, [r3, #0]
 80025be:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 80025c2:	b29b      	uxth	r3, r3
 80025c4:	461a      	mov	r2, r3
 80025c6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80025c8:	781b      	ldrb	r3, [r3, #0]
 80025ca:	00db      	lsls	r3, r3, #3
 80025cc:	4413      	add	r3, r2
 80025ce:	3306      	adds	r3, #6
 80025d0:	005b      	lsls	r3, r3, #1
 80025d2:	687a      	ldr	r2, [r7, #4]
 80025d4:	6812      	ldr	r2, [r2, #0]
 80025d6:	4413      	add	r3, r2
 80025d8:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 80025dc:	881b      	ldrh	r3, [r3, #0]
 80025de:	f3c3 0309 	ubfx	r3, r3, #0, #10
 80025e2:	86fb      	strh	r3, [r7, #54]	; 0x36

          if (count != 0U)
 80025e4:	8efb      	ldrh	r3, [r7, #54]	; 0x36
 80025e6:	2b00      	cmp	r3, #0
 80025e8:	f000 8087 	beq.w	80026fa <PCD_EP_ISR_Handler+0x486>
          {
            USB_ReadPMA(hpcd->Instance, ep->xfer_buff, ep->pmaadress, count);
 80025ec:	687b      	ldr	r3, [r7, #4]
 80025ee:	6818      	ldr	r0, [r3, #0]
 80025f0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80025f2:	6959      	ldr	r1, [r3, #20]
 80025f4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80025f6:	88da      	ldrh	r2, [r3, #6]
 80025f8:	8efb      	ldrh	r3, [r7, #54]	; 0x36
 80025fa:	f003 fe33 	bl	8006264 <USB_ReadPMA>
 80025fe:	e07c      	b.n	80026fa <PCD_EP_ISR_Handler+0x486>
          }
        }
        else
        {
          /* manage double buffer bulk out */
          if (ep->type == EP_TYPE_BULK)
 8002600:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002602:	78db      	ldrb	r3, [r3, #3]
 8002604:	2b02      	cmp	r3, #2
 8002606:	d108      	bne.n	800261a <PCD_EP_ISR_Handler+0x3a6>
          {
            count = HAL_PCD_EP_DB_Receive(hpcd, ep, wEPVal);
 8002608:	8d7b      	ldrh	r3, [r7, #42]	; 0x2a
 800260a:	461a      	mov	r2, r3
 800260c:	6a79      	ldr	r1, [r7, #36]	; 0x24
 800260e:	6878      	ldr	r0, [r7, #4]
 8002610:	f000 f923 	bl	800285a <HAL_PCD_EP_DB_Receive>
 8002614:	4603      	mov	r3, r0
 8002616:	86fb      	strh	r3, [r7, #54]	; 0x36
 8002618:	e06f      	b.n	80026fa <PCD_EP_ISR_Handler+0x486>
          }
          else /* manage double buffer iso out */
          {
            /* free EP OUT Buffer */
            PCD_FreeUserBuffer(hpcd->Instance, ep->num, 0U);
 800261a:	687b      	ldr	r3, [r7, #4]
 800261c:	681b      	ldr	r3, [r3, #0]
 800261e:	461a      	mov	r2, r3
 8002620:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002622:	781b      	ldrb	r3, [r3, #0]
 8002624:	009b      	lsls	r3, r3, #2
 8002626:	4413      	add	r3, r2
 8002628:	881b      	ldrh	r3, [r3, #0]
 800262a:	b29b      	uxth	r3, r3
 800262c:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8002630:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8002634:	847b      	strh	r3, [r7, #34]	; 0x22
 8002636:	687b      	ldr	r3, [r7, #4]
 8002638:	681b      	ldr	r3, [r3, #0]
 800263a:	461a      	mov	r2, r3
 800263c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800263e:	781b      	ldrb	r3, [r3, #0]
 8002640:	009b      	lsls	r3, r3, #2
 8002642:	441a      	add	r2, r3
 8002644:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 8002646:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 800264a:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 800264e:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8002652:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 8002656:	b29b      	uxth	r3, r3
 8002658:	8013      	strh	r3, [r2, #0]

            if ((PCD_GET_ENDPOINT(hpcd->Instance, ep->num) & USB_EP_DTOG_RX) != 0U)
 800265a:	687b      	ldr	r3, [r7, #4]
 800265c:	681b      	ldr	r3, [r3, #0]
 800265e:	461a      	mov	r2, r3
 8002660:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002662:	781b      	ldrb	r3, [r3, #0]
 8002664:	009b      	lsls	r3, r3, #2
 8002666:	4413      	add	r3, r2
 8002668:	881b      	ldrh	r3, [r3, #0]
 800266a:	b29b      	uxth	r3, r3
 800266c:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8002670:	2b00      	cmp	r3, #0
 8002672:	d021      	beq.n	80026b8 <PCD_EP_ISR_Handler+0x444>
            {
              /* read from endpoint BUF0Addr buffer */
              count = (uint16_t)PCD_GET_EP_DBUF0_CNT(hpcd->Instance, ep->num);
 8002674:	687b      	ldr	r3, [r7, #4]
 8002676:	681b      	ldr	r3, [r3, #0]
 8002678:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 800267c:	b29b      	uxth	r3, r3
 800267e:	461a      	mov	r2, r3
 8002680:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002682:	781b      	ldrb	r3, [r3, #0]
 8002684:	00db      	lsls	r3, r3, #3
 8002686:	4413      	add	r3, r2
 8002688:	3302      	adds	r3, #2
 800268a:	005b      	lsls	r3, r3, #1
 800268c:	687a      	ldr	r2, [r7, #4]
 800268e:	6812      	ldr	r2, [r2, #0]
 8002690:	4413      	add	r3, r2
 8002692:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8002696:	881b      	ldrh	r3, [r3, #0]
 8002698:	f3c3 0309 	ubfx	r3, r3, #0, #10
 800269c:	86fb      	strh	r3, [r7, #54]	; 0x36

              if (count != 0U)
 800269e:	8efb      	ldrh	r3, [r7, #54]	; 0x36
 80026a0:	2b00      	cmp	r3, #0
 80026a2:	d02a      	beq.n	80026fa <PCD_EP_ISR_Handler+0x486>
              {
                USB_ReadPMA(hpcd->Instance, ep->xfer_buff, ep->pmaaddr0, count);
 80026a4:	687b      	ldr	r3, [r7, #4]
 80026a6:	6818      	ldr	r0, [r3, #0]
 80026a8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80026aa:	6959      	ldr	r1, [r3, #20]
 80026ac:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80026ae:	891a      	ldrh	r2, [r3, #8]
 80026b0:	8efb      	ldrh	r3, [r7, #54]	; 0x36
 80026b2:	f003 fdd7 	bl	8006264 <USB_ReadPMA>
 80026b6:	e020      	b.n	80026fa <PCD_EP_ISR_Handler+0x486>
              }
            }
            else
            {
              /* read from endpoint BUF1Addr buffer */
              count = (uint16_t)PCD_GET_EP_DBUF1_CNT(hpcd->Instance, ep->num);
 80026b8:	687b      	ldr	r3, [r7, #4]
 80026ba:	681b      	ldr	r3, [r3, #0]
 80026bc:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 80026c0:	b29b      	uxth	r3, r3
 80026c2:	461a      	mov	r2, r3
 80026c4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80026c6:	781b      	ldrb	r3, [r3, #0]
 80026c8:	00db      	lsls	r3, r3, #3
 80026ca:	4413      	add	r3, r2
 80026cc:	3306      	adds	r3, #6
 80026ce:	005b      	lsls	r3, r3, #1
 80026d0:	687a      	ldr	r2, [r7, #4]
 80026d2:	6812      	ldr	r2, [r2, #0]
 80026d4:	4413      	add	r3, r2
 80026d6:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 80026da:	881b      	ldrh	r3, [r3, #0]
 80026dc:	f3c3 0309 	ubfx	r3, r3, #0, #10
 80026e0:	86fb      	strh	r3, [r7, #54]	; 0x36

              if (count != 0U)
 80026e2:	8efb      	ldrh	r3, [r7, #54]	; 0x36
 80026e4:	2b00      	cmp	r3, #0
 80026e6:	d008      	beq.n	80026fa <PCD_EP_ISR_Handler+0x486>
              {
                USB_ReadPMA(hpcd->Instance, ep->xfer_buff, ep->pmaaddr1, count);
 80026e8:	687b      	ldr	r3, [r7, #4]
 80026ea:	6818      	ldr	r0, [r3, #0]
 80026ec:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80026ee:	6959      	ldr	r1, [r3, #20]
 80026f0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80026f2:	895a      	ldrh	r2, [r3, #10]
 80026f4:	8efb      	ldrh	r3, [r7, #54]	; 0x36
 80026f6:	f003 fdb5 	bl	8006264 <USB_ReadPMA>
              }
            }
          }
        }
        /* multi-packet on the NON control OUT endpoint */
        ep->xfer_count += count;
 80026fa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80026fc:	69da      	ldr	r2, [r3, #28]
 80026fe:	8efb      	ldrh	r3, [r7, #54]	; 0x36
 8002700:	441a      	add	r2, r3
 8002702:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002704:	61da      	str	r2, [r3, #28]
        ep->xfer_buff += count;
 8002706:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002708:	695a      	ldr	r2, [r3, #20]
 800270a:	8efb      	ldrh	r3, [r7, #54]	; 0x36
 800270c:	441a      	add	r2, r3
 800270e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002710:	615a      	str	r2, [r3, #20]

        if ((ep->xfer_len == 0U) || (count < ep->maxpacket))
 8002712:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002714:	699b      	ldr	r3, [r3, #24]
 8002716:	2b00      	cmp	r3, #0
 8002718:	d004      	beq.n	8002724 <PCD_EP_ISR_Handler+0x4b0>
 800271a:	8efa      	ldrh	r2, [r7, #54]	; 0x36
 800271c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800271e:	691b      	ldr	r3, [r3, #16]
 8002720:	429a      	cmp	r2, r3
 8002722:	d206      	bcs.n	8002732 <PCD_EP_ISR_Handler+0x4be>
        {
          /* RX COMPLETE */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
          hpcd->DataOutStageCallback(hpcd, ep->num);
#else
          HAL_PCD_DataOutStageCallback(hpcd, ep->num);
 8002724:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002726:	781b      	ldrb	r3, [r3, #0]
 8002728:	4619      	mov	r1, r3
 800272a:	6878      	ldr	r0, [r7, #4]
 800272c:	f005 fbb8 	bl	8007ea0 <HAL_PCD_DataOutStageCallback>
 8002730:	e005      	b.n	800273e <PCD_EP_ISR_Handler+0x4ca>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
        }
        else
        {
          (void) USB_EPStartXfer(hpcd->Instance, ep);
 8002732:	687b      	ldr	r3, [r7, #4]
 8002734:	681b      	ldr	r3, [r3, #0]
 8002736:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8002738:	4618      	mov	r0, r3
 800273a:	f002 faf1 	bl	8004d20 <USB_EPStartXfer>
        }

      }

      if ((wEPVal & USB_EP_CTR_TX) != 0U)
 800273e:	8d7b      	ldrh	r3, [r7, #42]	; 0x2a
 8002740:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002744:	2b00      	cmp	r3, #0
 8002746:	d07a      	beq.n	800283e <PCD_EP_ISR_Handler+0x5ca>
      {
        ep = &hpcd->IN_ep[epindex];
 8002748:	f897 302d 	ldrb.w	r3, [r7, #45]	; 0x2d
 800274c:	1c5a      	adds	r2, r3, #1
 800274e:	4613      	mov	r3, r2
 8002750:	009b      	lsls	r3, r3, #2
 8002752:	4413      	add	r3, r2
 8002754:	00db      	lsls	r3, r3, #3
 8002756:	687a      	ldr	r2, [r7, #4]
 8002758:	4413      	add	r3, r2
 800275a:	627b      	str	r3, [r7, #36]	; 0x24

        /* clear int flag */
        PCD_CLEAR_TX_EP_CTR(hpcd->Instance, epindex);
 800275c:	687b      	ldr	r3, [r7, #4]
 800275e:	681b      	ldr	r3, [r3, #0]
 8002760:	461a      	mov	r2, r3
 8002762:	f897 302d 	ldrb.w	r3, [r7, #45]	; 0x2d
 8002766:	009b      	lsls	r3, r3, #2
 8002768:	4413      	add	r3, r2
 800276a:	881b      	ldrh	r3, [r3, #0]
 800276c:	b29b      	uxth	r3, r3
 800276e:	f423 43e1 	bic.w	r3, r3, #28800	; 0x7080
 8002772:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8002776:	843b      	strh	r3, [r7, #32]
 8002778:	687b      	ldr	r3, [r7, #4]
 800277a:	681b      	ldr	r3, [r3, #0]
 800277c:	461a      	mov	r2, r3
 800277e:	f897 302d 	ldrb.w	r3, [r7, #45]	; 0x2d
 8002782:	009b      	lsls	r3, r3, #2
 8002784:	441a      	add	r2, r3
 8002786:	8c3b      	ldrh	r3, [r7, #32]
 8002788:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800278c:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8002790:	b29b      	uxth	r3, r3
 8002792:	8013      	strh	r3, [r2, #0]

        /* Manage all non bulk transaction or Bulk Single Buffer Transaction */
        if ((ep->type != EP_TYPE_BULK) ||
 8002794:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002796:	78db      	ldrb	r3, [r3, #3]
 8002798:	2b02      	cmp	r3, #2
 800279a:	d108      	bne.n	80027ae <PCD_EP_ISR_Handler+0x53a>
            ((ep->type == EP_TYPE_BULK) && ((wEPVal & USB_EP_KIND) == 0U)))
 800279c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800279e:	78db      	ldrb	r3, [r3, #3]
        if ((ep->type != EP_TYPE_BULK) ||
 80027a0:	2b02      	cmp	r3, #2
 80027a2:	d146      	bne.n	8002832 <PCD_EP_ISR_Handler+0x5be>
            ((ep->type == EP_TYPE_BULK) && ((wEPVal & USB_EP_KIND) == 0U)))
 80027a4:	8d7b      	ldrh	r3, [r7, #42]	; 0x2a
 80027a6:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80027aa:	2b00      	cmp	r3, #0
 80027ac:	d141      	bne.n	8002832 <PCD_EP_ISR_Handler+0x5be>
        {
          /* multi-packet on the NON control IN endpoint */
          TxByteNbre = (uint16_t)PCD_GET_EP_TX_CNT(hpcd->Instance, ep->num);
 80027ae:	687b      	ldr	r3, [r7, #4]
 80027b0:	681b      	ldr	r3, [r3, #0]
 80027b2:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 80027b6:	b29b      	uxth	r3, r3
 80027b8:	461a      	mov	r2, r3
 80027ba:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80027bc:	781b      	ldrb	r3, [r3, #0]
 80027be:	00db      	lsls	r3, r3, #3
 80027c0:	4413      	add	r3, r2
 80027c2:	3302      	adds	r3, #2
 80027c4:	005b      	lsls	r3, r3, #1
 80027c6:	687a      	ldr	r2, [r7, #4]
 80027c8:	6812      	ldr	r2, [r2, #0]
 80027ca:	4413      	add	r3, r2
 80027cc:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 80027d0:	881b      	ldrh	r3, [r3, #0]
 80027d2:	f3c3 0309 	ubfx	r3, r3, #0, #10
 80027d6:	83fb      	strh	r3, [r7, #30]

          if (ep->xfer_len > TxByteNbre)
 80027d8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80027da:	699a      	ldr	r2, [r3, #24]
 80027dc:	8bfb      	ldrh	r3, [r7, #30]
 80027de:	429a      	cmp	r2, r3
 80027e0:	d906      	bls.n	80027f0 <PCD_EP_ISR_Handler+0x57c>
          {
            ep->xfer_len -= TxByteNbre;
 80027e2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80027e4:	699a      	ldr	r2, [r3, #24]
 80027e6:	8bfb      	ldrh	r3, [r7, #30]
 80027e8:	1ad2      	subs	r2, r2, r3
 80027ea:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80027ec:	619a      	str	r2, [r3, #24]
 80027ee:	e002      	b.n	80027f6 <PCD_EP_ISR_Handler+0x582>
          }
          else
          {
            ep->xfer_len = 0U;
 80027f0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80027f2:	2200      	movs	r2, #0
 80027f4:	619a      	str	r2, [r3, #24]
          }

          /* Zero Length Packet? */
          if (ep->xfer_len == 0U)
 80027f6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80027f8:	699b      	ldr	r3, [r3, #24]
 80027fa:	2b00      	cmp	r3, #0
 80027fc:	d106      	bne.n	800280c <PCD_EP_ISR_Handler+0x598>
          {
            /* TX COMPLETE */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
            hpcd->DataInStageCallback(hpcd, ep->num);
#else
            HAL_PCD_DataInStageCallback(hpcd, ep->num);
 80027fe:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002800:	781b      	ldrb	r3, [r3, #0]
 8002802:	4619      	mov	r1, r3
 8002804:	6878      	ldr	r0, [r7, #4]
 8002806:	f005 fb66 	bl	8007ed6 <HAL_PCD_DataInStageCallback>
 800280a:	e018      	b.n	800283e <PCD_EP_ISR_Handler+0x5ca>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
          }
          else
          {
            /* Transfer is not yet Done */
            ep->xfer_buff += TxByteNbre;
 800280c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800280e:	695a      	ldr	r2, [r3, #20]
 8002810:	8bfb      	ldrh	r3, [r7, #30]
 8002812:	441a      	add	r2, r3
 8002814:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002816:	615a      	str	r2, [r3, #20]
            ep->xfer_count += TxByteNbre;
 8002818:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800281a:	69da      	ldr	r2, [r3, #28]
 800281c:	8bfb      	ldrh	r3, [r7, #30]
 800281e:	441a      	add	r2, r3
 8002820:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002822:	61da      	str	r2, [r3, #28]
            (void)USB_EPStartXfer(hpcd->Instance, ep);
 8002824:	687b      	ldr	r3, [r7, #4]
 8002826:	681b      	ldr	r3, [r3, #0]
 8002828:	6a79      	ldr	r1, [r7, #36]	; 0x24
 800282a:	4618      	mov	r0, r3
 800282c:	f002 fa78 	bl	8004d20 <USB_EPStartXfer>
          if (ep->xfer_len == 0U)
 8002830:	e005      	b.n	800283e <PCD_EP_ISR_Handler+0x5ca>
          }
        }
        /* bulk in double buffer enable in case of transferLen> Ep_Mps */
        else
        {
          (void)HAL_PCD_EP_DB_Transmit(hpcd, ep, wEPVal);
 8002832:	8d7b      	ldrh	r3, [r7, #42]	; 0x2a
 8002834:	461a      	mov	r2, r3
 8002836:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8002838:	6878      	ldr	r0, [r7, #4]
 800283a:	f000 f91b 	bl	8002a74 <HAL_PCD_EP_DB_Transmit>
  while ((hpcd->Instance->ISTR & USB_ISTR_CTR) != 0U)
 800283e:	687b      	ldr	r3, [r7, #4]
 8002840:	681b      	ldr	r3, [r3, #0]
 8002842:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 8002846:	b29b      	uxth	r3, r3
 8002848:	b21b      	sxth	r3, r3
 800284a:	2b00      	cmp	r3, #0
 800284c:	f6ff ad17 	blt.w	800227e <PCD_EP_ISR_Handler+0xa>
        }
      }
    }
  }

  return HAL_OK;
 8002850:	2300      	movs	r3, #0
}
 8002852:	4618      	mov	r0, r3
 8002854:	3738      	adds	r7, #56	; 0x38
 8002856:	46bd      	mov	sp, r7
 8002858:	bd80      	pop	{r7, pc}

0800285a <HAL_PCD_EP_DB_Receive>:
  * @param  wEPVal Last snapshot of EPRx register value taken in ISR
  * @retval HAL status
  */
static uint16_t HAL_PCD_EP_DB_Receive(PCD_HandleTypeDef *hpcd,
                                      PCD_EPTypeDef *ep, uint16_t wEPVal)
{
 800285a:	b580      	push	{r7, lr}
 800285c:	b088      	sub	sp, #32
 800285e:	af00      	add	r7, sp, #0
 8002860:	60f8      	str	r0, [r7, #12]
 8002862:	60b9      	str	r1, [r7, #8]
 8002864:	4613      	mov	r3, r2
 8002866:	80fb      	strh	r3, [r7, #6]
  uint16_t count;

  /* Manage Buffer0 OUT */
  if ((wEPVal & USB_EP_DTOG_RX) != 0U)
 8002868:	88fb      	ldrh	r3, [r7, #6]
 800286a:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800286e:	2b00      	cmp	r3, #0
 8002870:	d07e      	beq.n	8002970 <HAL_PCD_EP_DB_Receive+0x116>
  {
    /* Get count of received Data on buffer0 */
    count = (uint16_t)PCD_GET_EP_DBUF0_CNT(hpcd->Instance, ep->num);
 8002872:	68fb      	ldr	r3, [r7, #12]
 8002874:	681b      	ldr	r3, [r3, #0]
 8002876:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 800287a:	b29b      	uxth	r3, r3
 800287c:	461a      	mov	r2, r3
 800287e:	68bb      	ldr	r3, [r7, #8]
 8002880:	781b      	ldrb	r3, [r3, #0]
 8002882:	00db      	lsls	r3, r3, #3
 8002884:	4413      	add	r3, r2
 8002886:	3302      	adds	r3, #2
 8002888:	005b      	lsls	r3, r3, #1
 800288a:	68fa      	ldr	r2, [r7, #12]
 800288c:	6812      	ldr	r2, [r2, #0]
 800288e:	4413      	add	r3, r2
 8002890:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8002894:	881b      	ldrh	r3, [r3, #0]
 8002896:	f3c3 0309 	ubfx	r3, r3, #0, #10
 800289a:	837b      	strh	r3, [r7, #26]

    if (ep->xfer_len >= count)
 800289c:	68bb      	ldr	r3, [r7, #8]
 800289e:	699a      	ldr	r2, [r3, #24]
 80028a0:	8b7b      	ldrh	r3, [r7, #26]
 80028a2:	429a      	cmp	r2, r3
 80028a4:	d306      	bcc.n	80028b4 <HAL_PCD_EP_DB_Receive+0x5a>
    {
      ep->xfer_len -= count;
 80028a6:	68bb      	ldr	r3, [r7, #8]
 80028a8:	699a      	ldr	r2, [r3, #24]
 80028aa:	8b7b      	ldrh	r3, [r7, #26]
 80028ac:	1ad2      	subs	r2, r2, r3
 80028ae:	68bb      	ldr	r3, [r7, #8]
 80028b0:	619a      	str	r2, [r3, #24]
 80028b2:	e002      	b.n	80028ba <HAL_PCD_EP_DB_Receive+0x60>
    }
    else
    {
      ep->xfer_len = 0U;
 80028b4:	68bb      	ldr	r3, [r7, #8]
 80028b6:	2200      	movs	r2, #0
 80028b8:	619a      	str	r2, [r3, #24]
    }

    if (ep->xfer_len == 0U)
 80028ba:	68bb      	ldr	r3, [r7, #8]
 80028bc:	699b      	ldr	r3, [r3, #24]
 80028be:	2b00      	cmp	r3, #0
 80028c0:	d123      	bne.n	800290a <HAL_PCD_EP_DB_Receive+0xb0>
    {
      /* set NAK to OUT endpoint since double buffer is enabled */
      PCD_SET_EP_RX_STATUS(hpcd->Instance, ep->num, USB_EP_RX_NAK);
 80028c2:	68fb      	ldr	r3, [r7, #12]
 80028c4:	681b      	ldr	r3, [r3, #0]
 80028c6:	461a      	mov	r2, r3
 80028c8:	68bb      	ldr	r3, [r7, #8]
 80028ca:	781b      	ldrb	r3, [r3, #0]
 80028cc:	009b      	lsls	r3, r3, #2
 80028ce:	4413      	add	r3, r2
 80028d0:	881b      	ldrh	r3, [r3, #0]
 80028d2:	b29b      	uxth	r3, r3
 80028d4:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 80028d8:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80028dc:	833b      	strh	r3, [r7, #24]
 80028de:	8b3b      	ldrh	r3, [r7, #24]
 80028e0:	f483 5300 	eor.w	r3, r3, #8192	; 0x2000
 80028e4:	833b      	strh	r3, [r7, #24]
 80028e6:	68fb      	ldr	r3, [r7, #12]
 80028e8:	681b      	ldr	r3, [r3, #0]
 80028ea:	461a      	mov	r2, r3
 80028ec:	68bb      	ldr	r3, [r7, #8]
 80028ee:	781b      	ldrb	r3, [r3, #0]
 80028f0:	009b      	lsls	r3, r3, #2
 80028f2:	441a      	add	r2, r3
 80028f4:	8b3b      	ldrh	r3, [r7, #24]
 80028f6:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 80028fa:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 80028fe:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8002902:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8002906:	b29b      	uxth	r3, r3
 8002908:	8013      	strh	r3, [r2, #0]
    }

    /* Check if Buffer1 is in blocked sate which requires to toggle */
    if ((wEPVal & USB_EP_DTOG_TX) != 0U)
 800290a:	88fb      	ldrh	r3, [r7, #6]
 800290c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002910:	2b00      	cmp	r3, #0
 8002912:	d01f      	beq.n	8002954 <HAL_PCD_EP_DB_Receive+0xfa>
    {
      PCD_FreeUserBuffer(hpcd->Instance, ep->num, 0U);
 8002914:	68fb      	ldr	r3, [r7, #12]
 8002916:	681b      	ldr	r3, [r3, #0]
 8002918:	461a      	mov	r2, r3
 800291a:	68bb      	ldr	r3, [r7, #8]
 800291c:	781b      	ldrb	r3, [r3, #0]
 800291e:	009b      	lsls	r3, r3, #2
 8002920:	4413      	add	r3, r2
 8002922:	881b      	ldrh	r3, [r3, #0]
 8002924:	b29b      	uxth	r3, r3
 8002926:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800292a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800292e:	82fb      	strh	r3, [r7, #22]
 8002930:	68fb      	ldr	r3, [r7, #12]
 8002932:	681b      	ldr	r3, [r3, #0]
 8002934:	461a      	mov	r2, r3
 8002936:	68bb      	ldr	r3, [r7, #8]
 8002938:	781b      	ldrb	r3, [r3, #0]
 800293a:	009b      	lsls	r3, r3, #2
 800293c:	441a      	add	r2, r3
 800293e:	8afb      	ldrh	r3, [r7, #22]
 8002940:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8002944:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8002948:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800294c:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 8002950:	b29b      	uxth	r3, r3
 8002952:	8013      	strh	r3, [r2, #0]
    }

    if (count != 0U)
 8002954:	8b7b      	ldrh	r3, [r7, #26]
 8002956:	2b00      	cmp	r3, #0
 8002958:	f000 8087 	beq.w	8002a6a <HAL_PCD_EP_DB_Receive+0x210>
    {
      USB_ReadPMA(hpcd->Instance, ep->xfer_buff, ep->pmaaddr0, count);
 800295c:	68fb      	ldr	r3, [r7, #12]
 800295e:	6818      	ldr	r0, [r3, #0]
 8002960:	68bb      	ldr	r3, [r7, #8]
 8002962:	6959      	ldr	r1, [r3, #20]
 8002964:	68bb      	ldr	r3, [r7, #8]
 8002966:	891a      	ldrh	r2, [r3, #8]
 8002968:	8b7b      	ldrh	r3, [r7, #26]
 800296a:	f003 fc7b 	bl	8006264 <USB_ReadPMA>
 800296e:	e07c      	b.n	8002a6a <HAL_PCD_EP_DB_Receive+0x210>
  }
  /* Manage Buffer 1 DTOG_RX=0 */
  else
  {
    /* Get count of received data */
    count = (uint16_t)PCD_GET_EP_DBUF1_CNT(hpcd->Instance, ep->num);
 8002970:	68fb      	ldr	r3, [r7, #12]
 8002972:	681b      	ldr	r3, [r3, #0]
 8002974:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8002978:	b29b      	uxth	r3, r3
 800297a:	461a      	mov	r2, r3
 800297c:	68bb      	ldr	r3, [r7, #8]
 800297e:	781b      	ldrb	r3, [r3, #0]
 8002980:	00db      	lsls	r3, r3, #3
 8002982:	4413      	add	r3, r2
 8002984:	3306      	adds	r3, #6
 8002986:	005b      	lsls	r3, r3, #1
 8002988:	68fa      	ldr	r2, [r7, #12]
 800298a:	6812      	ldr	r2, [r2, #0]
 800298c:	4413      	add	r3, r2
 800298e:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8002992:	881b      	ldrh	r3, [r3, #0]
 8002994:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8002998:	837b      	strh	r3, [r7, #26]

    if (ep->xfer_len >= count)
 800299a:	68bb      	ldr	r3, [r7, #8]
 800299c:	699a      	ldr	r2, [r3, #24]
 800299e:	8b7b      	ldrh	r3, [r7, #26]
 80029a0:	429a      	cmp	r2, r3
 80029a2:	d306      	bcc.n	80029b2 <HAL_PCD_EP_DB_Receive+0x158>
    {
      ep->xfer_len -= count;
 80029a4:	68bb      	ldr	r3, [r7, #8]
 80029a6:	699a      	ldr	r2, [r3, #24]
 80029a8:	8b7b      	ldrh	r3, [r7, #26]
 80029aa:	1ad2      	subs	r2, r2, r3
 80029ac:	68bb      	ldr	r3, [r7, #8]
 80029ae:	619a      	str	r2, [r3, #24]
 80029b0:	e002      	b.n	80029b8 <HAL_PCD_EP_DB_Receive+0x15e>
    }
    else
    {
      ep->xfer_len = 0U;
 80029b2:	68bb      	ldr	r3, [r7, #8]
 80029b4:	2200      	movs	r2, #0
 80029b6:	619a      	str	r2, [r3, #24]
    }

    if (ep->xfer_len == 0U)
 80029b8:	68bb      	ldr	r3, [r7, #8]
 80029ba:	699b      	ldr	r3, [r3, #24]
 80029bc:	2b00      	cmp	r3, #0
 80029be:	d123      	bne.n	8002a08 <HAL_PCD_EP_DB_Receive+0x1ae>
    {
      /* set NAK on the current endpoint */
      PCD_SET_EP_RX_STATUS(hpcd->Instance, ep->num, USB_EP_RX_NAK);
 80029c0:	68fb      	ldr	r3, [r7, #12]
 80029c2:	681b      	ldr	r3, [r3, #0]
 80029c4:	461a      	mov	r2, r3
 80029c6:	68bb      	ldr	r3, [r7, #8]
 80029c8:	781b      	ldrb	r3, [r3, #0]
 80029ca:	009b      	lsls	r3, r3, #2
 80029cc:	4413      	add	r3, r2
 80029ce:	881b      	ldrh	r3, [r3, #0]
 80029d0:	b29b      	uxth	r3, r3
 80029d2:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 80029d6:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80029da:	83fb      	strh	r3, [r7, #30]
 80029dc:	8bfb      	ldrh	r3, [r7, #30]
 80029de:	f483 5300 	eor.w	r3, r3, #8192	; 0x2000
 80029e2:	83fb      	strh	r3, [r7, #30]
 80029e4:	68fb      	ldr	r3, [r7, #12]
 80029e6:	681b      	ldr	r3, [r3, #0]
 80029e8:	461a      	mov	r2, r3
 80029ea:	68bb      	ldr	r3, [r7, #8]
 80029ec:	781b      	ldrb	r3, [r3, #0]
 80029ee:	009b      	lsls	r3, r3, #2
 80029f0:	441a      	add	r2, r3
 80029f2:	8bfb      	ldrh	r3, [r7, #30]
 80029f4:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 80029f8:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 80029fc:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8002a00:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8002a04:	b29b      	uxth	r3, r3
 8002a06:	8013      	strh	r3, [r2, #0]
    }

    /*Need to FreeUser Buffer*/
    if ((wEPVal & USB_EP_DTOG_TX) == 0U)
 8002a08:	88fb      	ldrh	r3, [r7, #6]
 8002a0a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002a0e:	2b00      	cmp	r3, #0
 8002a10:	d11f      	bne.n	8002a52 <HAL_PCD_EP_DB_Receive+0x1f8>
    {
      PCD_FreeUserBuffer(hpcd->Instance, ep->num, 0U);
 8002a12:	68fb      	ldr	r3, [r7, #12]
 8002a14:	681b      	ldr	r3, [r3, #0]
 8002a16:	461a      	mov	r2, r3
 8002a18:	68bb      	ldr	r3, [r7, #8]
 8002a1a:	781b      	ldrb	r3, [r3, #0]
 8002a1c:	009b      	lsls	r3, r3, #2
 8002a1e:	4413      	add	r3, r2
 8002a20:	881b      	ldrh	r3, [r3, #0]
 8002a22:	b29b      	uxth	r3, r3
 8002a24:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8002a28:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8002a2c:	83bb      	strh	r3, [r7, #28]
 8002a2e:	68fb      	ldr	r3, [r7, #12]
 8002a30:	681b      	ldr	r3, [r3, #0]
 8002a32:	461a      	mov	r2, r3
 8002a34:	68bb      	ldr	r3, [r7, #8]
 8002a36:	781b      	ldrb	r3, [r3, #0]
 8002a38:	009b      	lsls	r3, r3, #2
 8002a3a:	441a      	add	r2, r3
 8002a3c:	8bbb      	ldrh	r3, [r7, #28]
 8002a3e:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8002a42:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8002a46:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8002a4a:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 8002a4e:	b29b      	uxth	r3, r3
 8002a50:	8013      	strh	r3, [r2, #0]
    }

    if (count != 0U)
 8002a52:	8b7b      	ldrh	r3, [r7, #26]
 8002a54:	2b00      	cmp	r3, #0
 8002a56:	d008      	beq.n	8002a6a <HAL_PCD_EP_DB_Receive+0x210>
    {
      USB_ReadPMA(hpcd->Instance, ep->xfer_buff, ep->pmaaddr1, count);
 8002a58:	68fb      	ldr	r3, [r7, #12]
 8002a5a:	6818      	ldr	r0, [r3, #0]
 8002a5c:	68bb      	ldr	r3, [r7, #8]
 8002a5e:	6959      	ldr	r1, [r3, #20]
 8002a60:	68bb      	ldr	r3, [r7, #8]
 8002a62:	895a      	ldrh	r2, [r3, #10]
 8002a64:	8b7b      	ldrh	r3, [r7, #26]
 8002a66:	f003 fbfd 	bl	8006264 <USB_ReadPMA>
    }
  }

  return count;
 8002a6a:	8b7b      	ldrh	r3, [r7, #26]
}
 8002a6c:	4618      	mov	r0, r3
 8002a6e:	3720      	adds	r7, #32
 8002a70:	46bd      	mov	sp, r7
 8002a72:	bd80      	pop	{r7, pc}

08002a74 <HAL_PCD_EP_DB_Transmit>:
  * @param  wEPVal Last snapshot of EPRx register value taken in ISR
  * @retval HAL status
  */
static HAL_StatusTypeDef HAL_PCD_EP_DB_Transmit(PCD_HandleTypeDef *hpcd,
                                                PCD_EPTypeDef *ep, uint16_t wEPVal)
{
 8002a74:	b580      	push	{r7, lr}
 8002a76:	b092      	sub	sp, #72	; 0x48
 8002a78:	af00      	add	r7, sp, #0
 8002a7a:	60f8      	str	r0, [r7, #12]
 8002a7c:	60b9      	str	r1, [r7, #8]
 8002a7e:	4613      	mov	r3, r2
 8002a80:	80fb      	strh	r3, [r7, #6]
  uint32_t len;
  uint16_t TxByteNbre;

  /* Data Buffer0 ACK received */
  if ((wEPVal & USB_EP_DTOG_TX) != 0U)
 8002a82:	88fb      	ldrh	r3, [r7, #6]
 8002a84:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002a88:	2b00      	cmp	r3, #0
 8002a8a:	f000 8132 	beq.w	8002cf2 <HAL_PCD_EP_DB_Transmit+0x27e>
  {
    /* multi-packet on the NON control IN endpoint */
    TxByteNbre = (uint16_t)PCD_GET_EP_DBUF0_CNT(hpcd->Instance, ep->num);
 8002a8e:	68fb      	ldr	r3, [r7, #12]
 8002a90:	681b      	ldr	r3, [r3, #0]
 8002a92:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8002a96:	b29b      	uxth	r3, r3
 8002a98:	461a      	mov	r2, r3
 8002a9a:	68bb      	ldr	r3, [r7, #8]
 8002a9c:	781b      	ldrb	r3, [r3, #0]
 8002a9e:	00db      	lsls	r3, r3, #3
 8002aa0:	4413      	add	r3, r2
 8002aa2:	3302      	adds	r3, #2
 8002aa4:	005b      	lsls	r3, r3, #1
 8002aa6:	68fa      	ldr	r2, [r7, #12]
 8002aa8:	6812      	ldr	r2, [r2, #0]
 8002aaa:	4413      	add	r3, r2
 8002aac:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8002ab0:	881b      	ldrh	r3, [r3, #0]
 8002ab2:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8002ab6:	85fb      	strh	r3, [r7, #46]	; 0x2e

    if (ep->xfer_len > TxByteNbre)
 8002ab8:	68bb      	ldr	r3, [r7, #8]
 8002aba:	699a      	ldr	r2, [r3, #24]
 8002abc:	8dfb      	ldrh	r3, [r7, #46]	; 0x2e
 8002abe:	429a      	cmp	r2, r3
 8002ac0:	d906      	bls.n	8002ad0 <HAL_PCD_EP_DB_Transmit+0x5c>
    {
      ep->xfer_len -= TxByteNbre;
 8002ac2:	68bb      	ldr	r3, [r7, #8]
 8002ac4:	699a      	ldr	r2, [r3, #24]
 8002ac6:	8dfb      	ldrh	r3, [r7, #46]	; 0x2e
 8002ac8:	1ad2      	subs	r2, r2, r3
 8002aca:	68bb      	ldr	r3, [r7, #8]
 8002acc:	619a      	str	r2, [r3, #24]
 8002ace:	e002      	b.n	8002ad6 <HAL_PCD_EP_DB_Transmit+0x62>
    }
    else
    {
      ep->xfer_len = 0U;
 8002ad0:	68bb      	ldr	r3, [r7, #8]
 8002ad2:	2200      	movs	r2, #0
 8002ad4:	619a      	str	r2, [r3, #24]
    }
    /* Transfer is completed */
    if (ep->xfer_len == 0U)
 8002ad6:	68bb      	ldr	r3, [r7, #8]
 8002ad8:	699b      	ldr	r3, [r3, #24]
 8002ada:	2b00      	cmp	r3, #0
 8002adc:	d12c      	bne.n	8002b38 <HAL_PCD_EP_DB_Transmit+0xc4>
    {
      /* TX COMPLETE */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->DataInStageCallback(hpcd, ep->num);
#else
      HAL_PCD_DataInStageCallback(hpcd, ep->num);
 8002ade:	68bb      	ldr	r3, [r7, #8]
 8002ae0:	781b      	ldrb	r3, [r3, #0]
 8002ae2:	4619      	mov	r1, r3
 8002ae4:	68f8      	ldr	r0, [r7, #12]
 8002ae6:	f005 f9f6 	bl	8007ed6 <HAL_PCD_DataInStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      if ((wEPVal & USB_EP_DTOG_RX) != 0U)
 8002aea:	88fb      	ldrh	r3, [r7, #6]
 8002aec:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8002af0:	2b00      	cmp	r3, #0
 8002af2:	f000 822f 	beq.w	8002f54 <HAL_PCD_EP_DB_Transmit+0x4e0>
      {
        PCD_FreeUserBuffer(hpcd->Instance, ep->num, 1U);
 8002af6:	68fb      	ldr	r3, [r7, #12]
 8002af8:	681b      	ldr	r3, [r3, #0]
 8002afa:	461a      	mov	r2, r3
 8002afc:	68bb      	ldr	r3, [r7, #8]
 8002afe:	781b      	ldrb	r3, [r3, #0]
 8002b00:	009b      	lsls	r3, r3, #2
 8002b02:	4413      	add	r3, r2
 8002b04:	881b      	ldrh	r3, [r3, #0]
 8002b06:	b29b      	uxth	r3, r3
 8002b08:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8002b0c:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8002b10:	827b      	strh	r3, [r7, #18]
 8002b12:	68fb      	ldr	r3, [r7, #12]
 8002b14:	681b      	ldr	r3, [r3, #0]
 8002b16:	461a      	mov	r2, r3
 8002b18:	68bb      	ldr	r3, [r7, #8]
 8002b1a:	781b      	ldrb	r3, [r3, #0]
 8002b1c:	009b      	lsls	r3, r3, #2
 8002b1e:	441a      	add	r2, r3
 8002b20:	8a7b      	ldrh	r3, [r7, #18]
 8002b22:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8002b26:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8002b2a:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8002b2e:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8002b32:	b29b      	uxth	r3, r3
 8002b34:	8013      	strh	r3, [r2, #0]
 8002b36:	e20d      	b.n	8002f54 <HAL_PCD_EP_DB_Transmit+0x4e0>
      }
    }
    else /* Transfer is not yet Done */
    {
      /* need to Free USB Buff */
      if ((wEPVal & USB_EP_DTOG_RX) != 0U)
 8002b38:	88fb      	ldrh	r3, [r7, #6]
 8002b3a:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8002b3e:	2b00      	cmp	r3, #0
 8002b40:	d01f      	beq.n	8002b82 <HAL_PCD_EP_DB_Transmit+0x10e>
      {
        PCD_FreeUserBuffer(hpcd->Instance, ep->num, 1U);
 8002b42:	68fb      	ldr	r3, [r7, #12]
 8002b44:	681b      	ldr	r3, [r3, #0]
 8002b46:	461a      	mov	r2, r3
 8002b48:	68bb      	ldr	r3, [r7, #8]
 8002b4a:	781b      	ldrb	r3, [r3, #0]
 8002b4c:	009b      	lsls	r3, r3, #2
 8002b4e:	4413      	add	r3, r2
 8002b50:	881b      	ldrh	r3, [r3, #0]
 8002b52:	b29b      	uxth	r3, r3
 8002b54:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8002b58:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8002b5c:	84bb      	strh	r3, [r7, #36]	; 0x24
 8002b5e:	68fb      	ldr	r3, [r7, #12]
 8002b60:	681b      	ldr	r3, [r3, #0]
 8002b62:	461a      	mov	r2, r3
 8002b64:	68bb      	ldr	r3, [r7, #8]
 8002b66:	781b      	ldrb	r3, [r3, #0]
 8002b68:	009b      	lsls	r3, r3, #2
 8002b6a:	441a      	add	r2, r3
 8002b6c:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8002b6e:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8002b72:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8002b76:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8002b7a:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8002b7e:	b29b      	uxth	r3, r3
 8002b80:	8013      	strh	r3, [r2, #0]
      }

      /* Still there is data to Fill in the next Buffer */
      if (ep->xfer_fill_db == 1U)
 8002b82:	68bb      	ldr	r3, [r7, #8]
 8002b84:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 8002b88:	2b01      	cmp	r3, #1
 8002b8a:	f040 81e3 	bne.w	8002f54 <HAL_PCD_EP_DB_Transmit+0x4e0>
      {
        ep->xfer_buff += TxByteNbre;
 8002b8e:	68bb      	ldr	r3, [r7, #8]
 8002b90:	695a      	ldr	r2, [r3, #20]
 8002b92:	8dfb      	ldrh	r3, [r7, #46]	; 0x2e
 8002b94:	441a      	add	r2, r3
 8002b96:	68bb      	ldr	r3, [r7, #8]
 8002b98:	615a      	str	r2, [r3, #20]
        ep->xfer_count += TxByteNbre;
 8002b9a:	68bb      	ldr	r3, [r7, #8]
 8002b9c:	69da      	ldr	r2, [r3, #28]
 8002b9e:	8dfb      	ldrh	r3, [r7, #46]	; 0x2e
 8002ba0:	441a      	add	r2, r3
 8002ba2:	68bb      	ldr	r3, [r7, #8]
 8002ba4:	61da      	str	r2, [r3, #28]

        /* Calculate the len of the new buffer to fill */
        if (ep->xfer_len_db >= ep->maxpacket)
 8002ba6:	68bb      	ldr	r3, [r7, #8]
 8002ba8:	6a1a      	ldr	r2, [r3, #32]
 8002baa:	68bb      	ldr	r3, [r7, #8]
 8002bac:	691b      	ldr	r3, [r3, #16]
 8002bae:	429a      	cmp	r2, r3
 8002bb0:	d309      	bcc.n	8002bc6 <HAL_PCD_EP_DB_Transmit+0x152>
        {
          len = ep->maxpacket;
 8002bb2:	68bb      	ldr	r3, [r7, #8]
 8002bb4:	691b      	ldr	r3, [r3, #16]
 8002bb6:	63bb      	str	r3, [r7, #56]	; 0x38
          ep->xfer_len_db -= len;
 8002bb8:	68bb      	ldr	r3, [r7, #8]
 8002bba:	6a1a      	ldr	r2, [r3, #32]
 8002bbc:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8002bbe:	1ad2      	subs	r2, r2, r3
 8002bc0:	68bb      	ldr	r3, [r7, #8]
 8002bc2:	621a      	str	r2, [r3, #32]
 8002bc4:	e014      	b.n	8002bf0 <HAL_PCD_EP_DB_Transmit+0x17c>
        }
        else if (ep->xfer_len_db == 0U)
 8002bc6:	68bb      	ldr	r3, [r7, #8]
 8002bc8:	6a1b      	ldr	r3, [r3, #32]
 8002bca:	2b00      	cmp	r3, #0
 8002bcc:	d106      	bne.n	8002bdc <HAL_PCD_EP_DB_Transmit+0x168>
        {
          len = TxByteNbre;
 8002bce:	8dfb      	ldrh	r3, [r7, #46]	; 0x2e
 8002bd0:	63bb      	str	r3, [r7, #56]	; 0x38
          ep->xfer_fill_db = 0U;
 8002bd2:	68bb      	ldr	r3, [r7, #8]
 8002bd4:	2200      	movs	r2, #0
 8002bd6:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
 8002bda:	e009      	b.n	8002bf0 <HAL_PCD_EP_DB_Transmit+0x17c>
        }
        else
        {
          ep->xfer_fill_db = 0U;
 8002bdc:	68bb      	ldr	r3, [r7, #8]
 8002bde:	2200      	movs	r2, #0
 8002be0:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
          len = ep->xfer_len_db;
 8002be4:	68bb      	ldr	r3, [r7, #8]
 8002be6:	6a1b      	ldr	r3, [r3, #32]
 8002be8:	63bb      	str	r3, [r7, #56]	; 0x38
          ep->xfer_len_db = 0U;
 8002bea:	68bb      	ldr	r3, [r7, #8]
 8002bec:	2200      	movs	r2, #0
 8002bee:	621a      	str	r2, [r3, #32]
        }

        /* Write remaining Data to Buffer */
        /* Set the Double buffer counter for pma buffer1 */
        PCD_SET_EP_DBUF0_CNT(hpcd->Instance, ep->num, ep->is_in, len);
 8002bf0:	68bb      	ldr	r3, [r7, #8]
 8002bf2:	785b      	ldrb	r3, [r3, #1]
 8002bf4:	2b00      	cmp	r3, #0
 8002bf6:	d155      	bne.n	8002ca4 <HAL_PCD_EP_DB_Transmit+0x230>
 8002bf8:	68fb      	ldr	r3, [r7, #12]
 8002bfa:	681b      	ldr	r3, [r3, #0]
 8002bfc:	61bb      	str	r3, [r7, #24]
 8002bfe:	68fb      	ldr	r3, [r7, #12]
 8002c00:	681b      	ldr	r3, [r3, #0]
 8002c02:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8002c06:	b29b      	uxth	r3, r3
 8002c08:	461a      	mov	r2, r3
 8002c0a:	69bb      	ldr	r3, [r7, #24]
 8002c0c:	4413      	add	r3, r2
 8002c0e:	61bb      	str	r3, [r7, #24]
 8002c10:	68bb      	ldr	r3, [r7, #8]
 8002c12:	781b      	ldrb	r3, [r3, #0]
 8002c14:	011a      	lsls	r2, r3, #4
 8002c16:	69bb      	ldr	r3, [r7, #24]
 8002c18:	4413      	add	r3, r2
 8002c1a:	f203 4304 	addw	r3, r3, #1028	; 0x404
 8002c1e:	617b      	str	r3, [r7, #20]
 8002c20:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8002c22:	2b00      	cmp	r3, #0
 8002c24:	d112      	bne.n	8002c4c <HAL_PCD_EP_DB_Transmit+0x1d8>
 8002c26:	697b      	ldr	r3, [r7, #20]
 8002c28:	881b      	ldrh	r3, [r3, #0]
 8002c2a:	b29b      	uxth	r3, r3
 8002c2c:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 8002c30:	b29a      	uxth	r2, r3
 8002c32:	697b      	ldr	r3, [r7, #20]
 8002c34:	801a      	strh	r2, [r3, #0]
 8002c36:	697b      	ldr	r3, [r7, #20]
 8002c38:	881b      	ldrh	r3, [r3, #0]
 8002c3a:	b29b      	uxth	r3, r3
 8002c3c:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8002c40:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8002c44:	b29a      	uxth	r2, r3
 8002c46:	697b      	ldr	r3, [r7, #20]
 8002c48:	801a      	strh	r2, [r3, #0]
 8002c4a:	e047      	b.n	8002cdc <HAL_PCD_EP_DB_Transmit+0x268>
 8002c4c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8002c4e:	2b3e      	cmp	r3, #62	; 0x3e
 8002c50:	d811      	bhi.n	8002c76 <HAL_PCD_EP_DB_Transmit+0x202>
 8002c52:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8002c54:	085b      	lsrs	r3, r3, #1
 8002c56:	62bb      	str	r3, [r7, #40]	; 0x28
 8002c58:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8002c5a:	f003 0301 	and.w	r3, r3, #1
 8002c5e:	2b00      	cmp	r3, #0
 8002c60:	d002      	beq.n	8002c68 <HAL_PCD_EP_DB_Transmit+0x1f4>
 8002c62:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002c64:	3301      	adds	r3, #1
 8002c66:	62bb      	str	r3, [r7, #40]	; 0x28
 8002c68:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002c6a:	b29b      	uxth	r3, r3
 8002c6c:	029b      	lsls	r3, r3, #10
 8002c6e:	b29a      	uxth	r2, r3
 8002c70:	697b      	ldr	r3, [r7, #20]
 8002c72:	801a      	strh	r2, [r3, #0]
 8002c74:	e032      	b.n	8002cdc <HAL_PCD_EP_DB_Transmit+0x268>
 8002c76:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8002c78:	095b      	lsrs	r3, r3, #5
 8002c7a:	62bb      	str	r3, [r7, #40]	; 0x28
 8002c7c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8002c7e:	f003 031f 	and.w	r3, r3, #31
 8002c82:	2b00      	cmp	r3, #0
 8002c84:	d102      	bne.n	8002c8c <HAL_PCD_EP_DB_Transmit+0x218>
 8002c86:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002c88:	3b01      	subs	r3, #1
 8002c8a:	62bb      	str	r3, [r7, #40]	; 0x28
 8002c8c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002c8e:	b29b      	uxth	r3, r3
 8002c90:	029b      	lsls	r3, r3, #10
 8002c92:	b29b      	uxth	r3, r3
 8002c94:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8002c98:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8002c9c:	b29a      	uxth	r2, r3
 8002c9e:	697b      	ldr	r3, [r7, #20]
 8002ca0:	801a      	strh	r2, [r3, #0]
 8002ca2:	e01b      	b.n	8002cdc <HAL_PCD_EP_DB_Transmit+0x268>
 8002ca4:	68bb      	ldr	r3, [r7, #8]
 8002ca6:	785b      	ldrb	r3, [r3, #1]
 8002ca8:	2b01      	cmp	r3, #1
 8002caa:	d117      	bne.n	8002cdc <HAL_PCD_EP_DB_Transmit+0x268>
 8002cac:	68fb      	ldr	r3, [r7, #12]
 8002cae:	681b      	ldr	r3, [r3, #0]
 8002cb0:	623b      	str	r3, [r7, #32]
 8002cb2:	68fb      	ldr	r3, [r7, #12]
 8002cb4:	681b      	ldr	r3, [r3, #0]
 8002cb6:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8002cba:	b29b      	uxth	r3, r3
 8002cbc:	461a      	mov	r2, r3
 8002cbe:	6a3b      	ldr	r3, [r7, #32]
 8002cc0:	4413      	add	r3, r2
 8002cc2:	623b      	str	r3, [r7, #32]
 8002cc4:	68bb      	ldr	r3, [r7, #8]
 8002cc6:	781b      	ldrb	r3, [r3, #0]
 8002cc8:	011a      	lsls	r2, r3, #4
 8002cca:	6a3b      	ldr	r3, [r7, #32]
 8002ccc:	4413      	add	r3, r2
 8002cce:	f203 4304 	addw	r3, r3, #1028	; 0x404
 8002cd2:	61fb      	str	r3, [r7, #28]
 8002cd4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8002cd6:	b29a      	uxth	r2, r3
 8002cd8:	69fb      	ldr	r3, [r7, #28]
 8002cda:	801a      	strh	r2, [r3, #0]

        /* Copy user buffer to USB PMA */
        USB_WritePMA(hpcd->Instance, ep->xfer_buff,  ep->pmaaddr0, (uint16_t)len);
 8002cdc:	68fb      	ldr	r3, [r7, #12]
 8002cde:	6818      	ldr	r0, [r3, #0]
 8002ce0:	68bb      	ldr	r3, [r7, #8]
 8002ce2:	6959      	ldr	r1, [r3, #20]
 8002ce4:	68bb      	ldr	r3, [r7, #8]
 8002ce6:	891a      	ldrh	r2, [r3, #8]
 8002ce8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8002cea:	b29b      	uxth	r3, r3
 8002cec:	f003 fa76 	bl	80061dc <USB_WritePMA>
 8002cf0:	e130      	b.n	8002f54 <HAL_PCD_EP_DB_Transmit+0x4e0>
    }
  }
  else /* Data Buffer1 ACK received */
  {
    /* multi-packet on the NON control IN endpoint */
    TxByteNbre = (uint16_t)PCD_GET_EP_DBUF1_CNT(hpcd->Instance, ep->num);
 8002cf2:	68fb      	ldr	r3, [r7, #12]
 8002cf4:	681b      	ldr	r3, [r3, #0]
 8002cf6:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8002cfa:	b29b      	uxth	r3, r3
 8002cfc:	461a      	mov	r2, r3
 8002cfe:	68bb      	ldr	r3, [r7, #8]
 8002d00:	781b      	ldrb	r3, [r3, #0]
 8002d02:	00db      	lsls	r3, r3, #3
 8002d04:	4413      	add	r3, r2
 8002d06:	3306      	adds	r3, #6
 8002d08:	005b      	lsls	r3, r3, #1
 8002d0a:	68fa      	ldr	r2, [r7, #12]
 8002d0c:	6812      	ldr	r2, [r2, #0]
 8002d0e:	4413      	add	r3, r2
 8002d10:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8002d14:	881b      	ldrh	r3, [r3, #0]
 8002d16:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8002d1a:	85fb      	strh	r3, [r7, #46]	; 0x2e

    if (ep->xfer_len >= TxByteNbre)
 8002d1c:	68bb      	ldr	r3, [r7, #8]
 8002d1e:	699a      	ldr	r2, [r3, #24]
 8002d20:	8dfb      	ldrh	r3, [r7, #46]	; 0x2e
 8002d22:	429a      	cmp	r2, r3
 8002d24:	d306      	bcc.n	8002d34 <HAL_PCD_EP_DB_Transmit+0x2c0>
    {
      ep->xfer_len -= TxByteNbre;
 8002d26:	68bb      	ldr	r3, [r7, #8]
 8002d28:	699a      	ldr	r2, [r3, #24]
 8002d2a:	8dfb      	ldrh	r3, [r7, #46]	; 0x2e
 8002d2c:	1ad2      	subs	r2, r2, r3
 8002d2e:	68bb      	ldr	r3, [r7, #8]
 8002d30:	619a      	str	r2, [r3, #24]
 8002d32:	e002      	b.n	8002d3a <HAL_PCD_EP_DB_Transmit+0x2c6>
    }
    else
    {
      ep->xfer_len = 0U;
 8002d34:	68bb      	ldr	r3, [r7, #8]
 8002d36:	2200      	movs	r2, #0
 8002d38:	619a      	str	r2, [r3, #24]
    }

    /* Transfer is completed */
    if (ep->xfer_len == 0U)
 8002d3a:	68bb      	ldr	r3, [r7, #8]
 8002d3c:	699b      	ldr	r3, [r3, #24]
 8002d3e:	2b00      	cmp	r3, #0
 8002d40:	d12c      	bne.n	8002d9c <HAL_PCD_EP_DB_Transmit+0x328>
    {
      /* TX COMPLETE */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->DataInStageCallback(hpcd, ep->num);
#else
      HAL_PCD_DataInStageCallback(hpcd, ep->num);
 8002d42:	68bb      	ldr	r3, [r7, #8]
 8002d44:	781b      	ldrb	r3, [r3, #0]
 8002d46:	4619      	mov	r1, r3
 8002d48:	68f8      	ldr	r0, [r7, #12]
 8002d4a:	f005 f8c4 	bl	8007ed6 <HAL_PCD_DataInStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      /*need to Free USB Buff*/
      if ((wEPVal & USB_EP_DTOG_RX) == 0U)
 8002d4e:	88fb      	ldrh	r3, [r7, #6]
 8002d50:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8002d54:	2b00      	cmp	r3, #0
 8002d56:	f040 80fd 	bne.w	8002f54 <HAL_PCD_EP_DB_Transmit+0x4e0>
      {
        PCD_FreeUserBuffer(hpcd->Instance, ep->num, 1U);
 8002d5a:	68fb      	ldr	r3, [r7, #12]
 8002d5c:	681b      	ldr	r3, [r3, #0]
 8002d5e:	461a      	mov	r2, r3
 8002d60:	68bb      	ldr	r3, [r7, #8]
 8002d62:	781b      	ldrb	r3, [r3, #0]
 8002d64:	009b      	lsls	r3, r3, #2
 8002d66:	4413      	add	r3, r2
 8002d68:	881b      	ldrh	r3, [r3, #0]
 8002d6a:	b29b      	uxth	r3, r3
 8002d6c:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8002d70:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8002d74:	84fb      	strh	r3, [r7, #38]	; 0x26
 8002d76:	68fb      	ldr	r3, [r7, #12]
 8002d78:	681b      	ldr	r3, [r3, #0]
 8002d7a:	461a      	mov	r2, r3
 8002d7c:	68bb      	ldr	r3, [r7, #8]
 8002d7e:	781b      	ldrb	r3, [r3, #0]
 8002d80:	009b      	lsls	r3, r3, #2
 8002d82:	441a      	add	r2, r3
 8002d84:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 8002d86:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8002d8a:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8002d8e:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8002d92:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8002d96:	b29b      	uxth	r3, r3
 8002d98:	8013      	strh	r3, [r2, #0]
 8002d9a:	e0db      	b.n	8002f54 <HAL_PCD_EP_DB_Transmit+0x4e0>
      }
    }
    else /* Transfer is not yet Done */
    {
      /* need to Free USB Buff */
      if ((wEPVal & USB_EP_DTOG_RX) == 0U)
 8002d9c:	88fb      	ldrh	r3, [r7, #6]
 8002d9e:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8002da2:	2b00      	cmp	r3, #0
 8002da4:	d11f      	bne.n	8002de6 <HAL_PCD_EP_DB_Transmit+0x372>
      {
        PCD_FreeUserBuffer(hpcd->Instance, ep->num, 1U);
 8002da6:	68fb      	ldr	r3, [r7, #12]
 8002da8:	681b      	ldr	r3, [r3, #0]
 8002daa:	461a      	mov	r2, r3
 8002dac:	68bb      	ldr	r3, [r7, #8]
 8002dae:	781b      	ldrb	r3, [r3, #0]
 8002db0:	009b      	lsls	r3, r3, #2
 8002db2:	4413      	add	r3, r2
 8002db4:	881b      	ldrh	r3, [r3, #0]
 8002db6:	b29b      	uxth	r3, r3
 8002db8:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8002dbc:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8002dc0:	85bb      	strh	r3, [r7, #44]	; 0x2c
 8002dc2:	68fb      	ldr	r3, [r7, #12]
 8002dc4:	681b      	ldr	r3, [r3, #0]
 8002dc6:	461a      	mov	r2, r3
 8002dc8:	68bb      	ldr	r3, [r7, #8]
 8002dca:	781b      	ldrb	r3, [r3, #0]
 8002dcc:	009b      	lsls	r3, r3, #2
 8002dce:	441a      	add	r2, r3
 8002dd0:	8dbb      	ldrh	r3, [r7, #44]	; 0x2c
 8002dd2:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8002dd6:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8002dda:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8002dde:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8002de2:	b29b      	uxth	r3, r3
 8002de4:	8013      	strh	r3, [r2, #0]
      }

      /* Still there is data to Fill in the next Buffer */
      if (ep->xfer_fill_db == 1U)
 8002de6:	68bb      	ldr	r3, [r7, #8]
 8002de8:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 8002dec:	2b01      	cmp	r3, #1
 8002dee:	f040 80b1 	bne.w	8002f54 <HAL_PCD_EP_DB_Transmit+0x4e0>
      {
        ep->xfer_buff += TxByteNbre;
 8002df2:	68bb      	ldr	r3, [r7, #8]
 8002df4:	695a      	ldr	r2, [r3, #20]
 8002df6:	8dfb      	ldrh	r3, [r7, #46]	; 0x2e
 8002df8:	441a      	add	r2, r3
 8002dfa:	68bb      	ldr	r3, [r7, #8]
 8002dfc:	615a      	str	r2, [r3, #20]
        ep->xfer_count += TxByteNbre;
 8002dfe:	68bb      	ldr	r3, [r7, #8]
 8002e00:	69da      	ldr	r2, [r3, #28]
 8002e02:	8dfb      	ldrh	r3, [r7, #46]	; 0x2e
 8002e04:	441a      	add	r2, r3
 8002e06:	68bb      	ldr	r3, [r7, #8]
 8002e08:	61da      	str	r2, [r3, #28]

        /* Calculate the len of the new buffer to fill */
        if (ep->xfer_len_db >= ep->maxpacket)
 8002e0a:	68bb      	ldr	r3, [r7, #8]
 8002e0c:	6a1a      	ldr	r2, [r3, #32]
 8002e0e:	68bb      	ldr	r3, [r7, #8]
 8002e10:	691b      	ldr	r3, [r3, #16]
 8002e12:	429a      	cmp	r2, r3
 8002e14:	d309      	bcc.n	8002e2a <HAL_PCD_EP_DB_Transmit+0x3b6>
        {
          len = ep->maxpacket;
 8002e16:	68bb      	ldr	r3, [r7, #8]
 8002e18:	691b      	ldr	r3, [r3, #16]
 8002e1a:	63bb      	str	r3, [r7, #56]	; 0x38
          ep->xfer_len_db -= len;
 8002e1c:	68bb      	ldr	r3, [r7, #8]
 8002e1e:	6a1a      	ldr	r2, [r3, #32]
 8002e20:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8002e22:	1ad2      	subs	r2, r2, r3
 8002e24:	68bb      	ldr	r3, [r7, #8]
 8002e26:	621a      	str	r2, [r3, #32]
 8002e28:	e014      	b.n	8002e54 <HAL_PCD_EP_DB_Transmit+0x3e0>
        }
        else if (ep->xfer_len_db == 0U)
 8002e2a:	68bb      	ldr	r3, [r7, #8]
 8002e2c:	6a1b      	ldr	r3, [r3, #32]
 8002e2e:	2b00      	cmp	r3, #0
 8002e30:	d106      	bne.n	8002e40 <HAL_PCD_EP_DB_Transmit+0x3cc>
        {
          len = TxByteNbre;
 8002e32:	8dfb      	ldrh	r3, [r7, #46]	; 0x2e
 8002e34:	63bb      	str	r3, [r7, #56]	; 0x38
          ep->xfer_fill_db = 0U;
 8002e36:	68bb      	ldr	r3, [r7, #8]
 8002e38:	2200      	movs	r2, #0
 8002e3a:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
 8002e3e:	e009      	b.n	8002e54 <HAL_PCD_EP_DB_Transmit+0x3e0>
        }
        else
        {
          len = ep->xfer_len_db;
 8002e40:	68bb      	ldr	r3, [r7, #8]
 8002e42:	6a1b      	ldr	r3, [r3, #32]
 8002e44:	63bb      	str	r3, [r7, #56]	; 0x38
          ep->xfer_len_db = 0U;
 8002e46:	68bb      	ldr	r3, [r7, #8]
 8002e48:	2200      	movs	r2, #0
 8002e4a:	621a      	str	r2, [r3, #32]
          ep->xfer_fill_db = 0;
 8002e4c:	68bb      	ldr	r3, [r7, #8]
 8002e4e:	2200      	movs	r2, #0
 8002e50:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
        }

        /* Set the Double buffer counter for pmabuffer1 */
        PCD_SET_EP_DBUF1_CNT(hpcd->Instance, ep->num, ep->is_in, len);
 8002e54:	68fb      	ldr	r3, [r7, #12]
 8002e56:	681b      	ldr	r3, [r3, #0]
 8002e58:	637b      	str	r3, [r7, #52]	; 0x34
 8002e5a:	68bb      	ldr	r3, [r7, #8]
 8002e5c:	785b      	ldrb	r3, [r3, #1]
 8002e5e:	2b00      	cmp	r3, #0
 8002e60:	d155      	bne.n	8002f0e <HAL_PCD_EP_DB_Transmit+0x49a>
 8002e62:	68fb      	ldr	r3, [r7, #12]
 8002e64:	681b      	ldr	r3, [r3, #0]
 8002e66:	647b      	str	r3, [r7, #68]	; 0x44
 8002e68:	68fb      	ldr	r3, [r7, #12]
 8002e6a:	681b      	ldr	r3, [r3, #0]
 8002e6c:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8002e70:	b29b      	uxth	r3, r3
 8002e72:	461a      	mov	r2, r3
 8002e74:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8002e76:	4413      	add	r3, r2
 8002e78:	647b      	str	r3, [r7, #68]	; 0x44
 8002e7a:	68bb      	ldr	r3, [r7, #8]
 8002e7c:	781b      	ldrb	r3, [r3, #0]
 8002e7e:	011a      	lsls	r2, r3, #4
 8002e80:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8002e82:	4413      	add	r3, r2
 8002e84:	f203 430c 	addw	r3, r3, #1036	; 0x40c
 8002e88:	643b      	str	r3, [r7, #64]	; 0x40
 8002e8a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8002e8c:	2b00      	cmp	r3, #0
 8002e8e:	d112      	bne.n	8002eb6 <HAL_PCD_EP_DB_Transmit+0x442>
 8002e90:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8002e92:	881b      	ldrh	r3, [r3, #0]
 8002e94:	b29b      	uxth	r3, r3
 8002e96:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 8002e9a:	b29a      	uxth	r2, r3
 8002e9c:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8002e9e:	801a      	strh	r2, [r3, #0]
 8002ea0:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8002ea2:	881b      	ldrh	r3, [r3, #0]
 8002ea4:	b29b      	uxth	r3, r3
 8002ea6:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8002eaa:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8002eae:	b29a      	uxth	r2, r3
 8002eb0:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8002eb2:	801a      	strh	r2, [r3, #0]
 8002eb4:	e044      	b.n	8002f40 <HAL_PCD_EP_DB_Transmit+0x4cc>
 8002eb6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8002eb8:	2b3e      	cmp	r3, #62	; 0x3e
 8002eba:	d811      	bhi.n	8002ee0 <HAL_PCD_EP_DB_Transmit+0x46c>
 8002ebc:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8002ebe:	085b      	lsrs	r3, r3, #1
 8002ec0:	63fb      	str	r3, [r7, #60]	; 0x3c
 8002ec2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8002ec4:	f003 0301 	and.w	r3, r3, #1
 8002ec8:	2b00      	cmp	r3, #0
 8002eca:	d002      	beq.n	8002ed2 <HAL_PCD_EP_DB_Transmit+0x45e>
 8002ecc:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8002ece:	3301      	adds	r3, #1
 8002ed0:	63fb      	str	r3, [r7, #60]	; 0x3c
 8002ed2:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8002ed4:	b29b      	uxth	r3, r3
 8002ed6:	029b      	lsls	r3, r3, #10
 8002ed8:	b29a      	uxth	r2, r3
 8002eda:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8002edc:	801a      	strh	r2, [r3, #0]
 8002ede:	e02f      	b.n	8002f40 <HAL_PCD_EP_DB_Transmit+0x4cc>
 8002ee0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8002ee2:	095b      	lsrs	r3, r3, #5
 8002ee4:	63fb      	str	r3, [r7, #60]	; 0x3c
 8002ee6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8002ee8:	f003 031f 	and.w	r3, r3, #31
 8002eec:	2b00      	cmp	r3, #0
 8002eee:	d102      	bne.n	8002ef6 <HAL_PCD_EP_DB_Transmit+0x482>
 8002ef0:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8002ef2:	3b01      	subs	r3, #1
 8002ef4:	63fb      	str	r3, [r7, #60]	; 0x3c
 8002ef6:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8002ef8:	b29b      	uxth	r3, r3
 8002efa:	029b      	lsls	r3, r3, #10
 8002efc:	b29b      	uxth	r3, r3
 8002efe:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8002f02:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8002f06:	b29a      	uxth	r2, r3
 8002f08:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8002f0a:	801a      	strh	r2, [r3, #0]
 8002f0c:	e018      	b.n	8002f40 <HAL_PCD_EP_DB_Transmit+0x4cc>
 8002f0e:	68bb      	ldr	r3, [r7, #8]
 8002f10:	785b      	ldrb	r3, [r3, #1]
 8002f12:	2b01      	cmp	r3, #1
 8002f14:	d114      	bne.n	8002f40 <HAL_PCD_EP_DB_Transmit+0x4cc>
 8002f16:	68fb      	ldr	r3, [r7, #12]
 8002f18:	681b      	ldr	r3, [r3, #0]
 8002f1a:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8002f1e:	b29b      	uxth	r3, r3
 8002f20:	461a      	mov	r2, r3
 8002f22:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8002f24:	4413      	add	r3, r2
 8002f26:	637b      	str	r3, [r7, #52]	; 0x34
 8002f28:	68bb      	ldr	r3, [r7, #8]
 8002f2a:	781b      	ldrb	r3, [r3, #0]
 8002f2c:	011a      	lsls	r2, r3, #4
 8002f2e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8002f30:	4413      	add	r3, r2
 8002f32:	f203 430c 	addw	r3, r3, #1036	; 0x40c
 8002f36:	633b      	str	r3, [r7, #48]	; 0x30
 8002f38:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8002f3a:	b29a      	uxth	r2, r3
 8002f3c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002f3e:	801a      	strh	r2, [r3, #0]

        /* Copy the user buffer to USB PMA */
        USB_WritePMA(hpcd->Instance, ep->xfer_buff,  ep->pmaaddr1, (uint16_t)len);
 8002f40:	68fb      	ldr	r3, [r7, #12]
 8002f42:	6818      	ldr	r0, [r3, #0]
 8002f44:	68bb      	ldr	r3, [r7, #8]
 8002f46:	6959      	ldr	r1, [r3, #20]
 8002f48:	68bb      	ldr	r3, [r7, #8]
 8002f4a:	895a      	ldrh	r2, [r3, #10]
 8002f4c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8002f4e:	b29b      	uxth	r3, r3
 8002f50:	f003 f944 	bl	80061dc <USB_WritePMA>
      }
    }
  }

  /*enable endpoint IN*/
  PCD_SET_EP_TX_STATUS(hpcd->Instance, ep->num, USB_EP_TX_VALID);
 8002f54:	68fb      	ldr	r3, [r7, #12]
 8002f56:	681b      	ldr	r3, [r3, #0]
 8002f58:	461a      	mov	r2, r3
 8002f5a:	68bb      	ldr	r3, [r7, #8]
 8002f5c:	781b      	ldrb	r3, [r3, #0]
 8002f5e:	009b      	lsls	r3, r3, #2
 8002f60:	4413      	add	r3, r2
 8002f62:	881b      	ldrh	r3, [r3, #0]
 8002f64:	b29b      	uxth	r3, r3
 8002f66:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8002f6a:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8002f6e:	823b      	strh	r3, [r7, #16]
 8002f70:	8a3b      	ldrh	r3, [r7, #16]
 8002f72:	f083 0310 	eor.w	r3, r3, #16
 8002f76:	823b      	strh	r3, [r7, #16]
 8002f78:	8a3b      	ldrh	r3, [r7, #16]
 8002f7a:	f083 0320 	eor.w	r3, r3, #32
 8002f7e:	823b      	strh	r3, [r7, #16]
 8002f80:	68fb      	ldr	r3, [r7, #12]
 8002f82:	681b      	ldr	r3, [r3, #0]
 8002f84:	461a      	mov	r2, r3
 8002f86:	68bb      	ldr	r3, [r7, #8]
 8002f88:	781b      	ldrb	r3, [r3, #0]
 8002f8a:	009b      	lsls	r3, r3, #2
 8002f8c:	441a      	add	r2, r3
 8002f8e:	8a3b      	ldrh	r3, [r7, #16]
 8002f90:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8002f94:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8002f98:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8002f9c:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8002fa0:	b29b      	uxth	r3, r3
 8002fa2:	8013      	strh	r3, [r2, #0]

  return HAL_OK;
 8002fa4:	2300      	movs	r3, #0
}
 8002fa6:	4618      	mov	r0, r3
 8002fa8:	3748      	adds	r7, #72	; 0x48
 8002faa:	46bd      	mov	sp, r7
 8002fac:	bd80      	pop	{r7, pc}

08002fae <HAL_PCDEx_PMAConfig>:
  * @retval HAL status
  */

HAL_StatusTypeDef  HAL_PCDEx_PMAConfig(PCD_HandleTypeDef *hpcd, uint16_t ep_addr,
                                       uint16_t ep_kind, uint32_t pmaadress)
{
 8002fae:	b480      	push	{r7}
 8002fb0:	b087      	sub	sp, #28
 8002fb2:	af00      	add	r7, sp, #0
 8002fb4:	60f8      	str	r0, [r7, #12]
 8002fb6:	607b      	str	r3, [r7, #4]
 8002fb8:	460b      	mov	r3, r1
 8002fba:	817b      	strh	r3, [r7, #10]
 8002fbc:	4613      	mov	r3, r2
 8002fbe:	813b      	strh	r3, [r7, #8]
  PCD_EPTypeDef *ep;

  /* initialize ep structure*/
  if ((0x80U & ep_addr) == 0x80U)
 8002fc0:	897b      	ldrh	r3, [r7, #10]
 8002fc2:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002fc6:	b29b      	uxth	r3, r3
 8002fc8:	2b00      	cmp	r3, #0
 8002fca:	d00b      	beq.n	8002fe4 <HAL_PCDEx_PMAConfig+0x36>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8002fcc:	897b      	ldrh	r3, [r7, #10]
 8002fce:	f003 0307 	and.w	r3, r3, #7
 8002fd2:	1c5a      	adds	r2, r3, #1
 8002fd4:	4613      	mov	r3, r2
 8002fd6:	009b      	lsls	r3, r3, #2
 8002fd8:	4413      	add	r3, r2
 8002fda:	00db      	lsls	r3, r3, #3
 8002fdc:	68fa      	ldr	r2, [r7, #12]
 8002fde:	4413      	add	r3, r2
 8002fe0:	617b      	str	r3, [r7, #20]
 8002fe2:	e009      	b.n	8002ff8 <HAL_PCDEx_PMAConfig+0x4a>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr];
 8002fe4:	897a      	ldrh	r2, [r7, #10]
 8002fe6:	4613      	mov	r3, r2
 8002fe8:	009b      	lsls	r3, r3, #2
 8002fea:	4413      	add	r3, r2
 8002fec:	00db      	lsls	r3, r3, #3
 8002fee:	f503 73b4 	add.w	r3, r3, #360	; 0x168
 8002ff2:	68fa      	ldr	r2, [r7, #12]
 8002ff4:	4413      	add	r3, r2
 8002ff6:	617b      	str	r3, [r7, #20]
  }

  /* Here we check if the endpoint is single or double Buffer*/
  if (ep_kind == PCD_SNG_BUF)
 8002ff8:	893b      	ldrh	r3, [r7, #8]
 8002ffa:	2b00      	cmp	r3, #0
 8002ffc:	d107      	bne.n	800300e <HAL_PCDEx_PMAConfig+0x60>
  {
    /* Single Buffer */
    ep->doublebuffer = 0U;
 8002ffe:	697b      	ldr	r3, [r7, #20]
 8003000:	2200      	movs	r2, #0
 8003002:	731a      	strb	r2, [r3, #12]
    /* Configure the PMA */
    ep->pmaadress = (uint16_t)pmaadress;
 8003004:	687b      	ldr	r3, [r7, #4]
 8003006:	b29a      	uxth	r2, r3
 8003008:	697b      	ldr	r3, [r7, #20]
 800300a:	80da      	strh	r2, [r3, #6]
 800300c:	e00b      	b.n	8003026 <HAL_PCDEx_PMAConfig+0x78>
  }
  else /* USB_DBL_BUF */
  {
    /* Double Buffer Endpoint */
    ep->doublebuffer = 1U;
 800300e:	697b      	ldr	r3, [r7, #20]
 8003010:	2201      	movs	r2, #1
 8003012:	731a      	strb	r2, [r3, #12]
    /* Configure the PMA */
    ep->pmaaddr0 = (uint16_t)(pmaadress & 0xFFFFU);
 8003014:	687b      	ldr	r3, [r7, #4]
 8003016:	b29a      	uxth	r2, r3
 8003018:	697b      	ldr	r3, [r7, #20]
 800301a:	811a      	strh	r2, [r3, #8]
    ep->pmaaddr1 = (uint16_t)((pmaadress & 0xFFFF0000U) >> 16);
 800301c:	687b      	ldr	r3, [r7, #4]
 800301e:	0c1b      	lsrs	r3, r3, #16
 8003020:	b29a      	uxth	r2, r3
 8003022:	697b      	ldr	r3, [r7, #20]
 8003024:	815a      	strh	r2, [r3, #10]
  }

  return HAL_OK;
 8003026:	2300      	movs	r3, #0
}
 8003028:	4618      	mov	r0, r3
 800302a:	371c      	adds	r7, #28
 800302c:	46bd      	mov	sp, r7
 800302e:	bc80      	pop	{r7}
 8003030:	4770      	bx	lr
	...

08003034 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8003034:	b580      	push	{r7, lr}
 8003036:	b086      	sub	sp, #24
 8003038:	af00      	add	r7, sp, #0
 800303a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 800303c:	687b      	ldr	r3, [r7, #4]
 800303e:	2b00      	cmp	r3, #0
 8003040:	d101      	bne.n	8003046 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8003042:	2301      	movs	r3, #1
 8003044:	e26c      	b.n	8003520 <HAL_RCC_OscConfig+0x4ec>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8003046:	687b      	ldr	r3, [r7, #4]
 8003048:	681b      	ldr	r3, [r3, #0]
 800304a:	f003 0301 	and.w	r3, r3, #1
 800304e:	2b00      	cmp	r3, #0
 8003050:	f000 8087 	beq.w	8003162 <HAL_RCC_OscConfig+0x12e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 8003054:	4b92      	ldr	r3, [pc, #584]	; (80032a0 <HAL_RCC_OscConfig+0x26c>)
 8003056:	685b      	ldr	r3, [r3, #4]
 8003058:	f003 030c 	and.w	r3, r3, #12
 800305c:	2b04      	cmp	r3, #4
 800305e:	d00c      	beq.n	800307a <HAL_RCC_OscConfig+0x46>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 8003060:	4b8f      	ldr	r3, [pc, #572]	; (80032a0 <HAL_RCC_OscConfig+0x26c>)
 8003062:	685b      	ldr	r3, [r3, #4]
 8003064:	f003 030c 	and.w	r3, r3, #12
 8003068:	2b08      	cmp	r3, #8
 800306a:	d112      	bne.n	8003092 <HAL_RCC_OscConfig+0x5e>
 800306c:	4b8c      	ldr	r3, [pc, #560]	; (80032a0 <HAL_RCC_OscConfig+0x26c>)
 800306e:	685b      	ldr	r3, [r3, #4]
 8003070:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8003074:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8003078:	d10b      	bne.n	8003092 <HAL_RCC_OscConfig+0x5e>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800307a:	4b89      	ldr	r3, [pc, #548]	; (80032a0 <HAL_RCC_OscConfig+0x26c>)
 800307c:	681b      	ldr	r3, [r3, #0]
 800307e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003082:	2b00      	cmp	r3, #0
 8003084:	d06c      	beq.n	8003160 <HAL_RCC_OscConfig+0x12c>
 8003086:	687b      	ldr	r3, [r7, #4]
 8003088:	685b      	ldr	r3, [r3, #4]
 800308a:	2b00      	cmp	r3, #0
 800308c:	d168      	bne.n	8003160 <HAL_RCC_OscConfig+0x12c>
      {
        return HAL_ERROR;
 800308e:	2301      	movs	r3, #1
 8003090:	e246      	b.n	8003520 <HAL_RCC_OscConfig+0x4ec>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8003092:	687b      	ldr	r3, [r7, #4]
 8003094:	685b      	ldr	r3, [r3, #4]
 8003096:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800309a:	d106      	bne.n	80030aa <HAL_RCC_OscConfig+0x76>
 800309c:	4b80      	ldr	r3, [pc, #512]	; (80032a0 <HAL_RCC_OscConfig+0x26c>)
 800309e:	681b      	ldr	r3, [r3, #0]
 80030a0:	4a7f      	ldr	r2, [pc, #508]	; (80032a0 <HAL_RCC_OscConfig+0x26c>)
 80030a2:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80030a6:	6013      	str	r3, [r2, #0]
 80030a8:	e02e      	b.n	8003108 <HAL_RCC_OscConfig+0xd4>
 80030aa:	687b      	ldr	r3, [r7, #4]
 80030ac:	685b      	ldr	r3, [r3, #4]
 80030ae:	2b00      	cmp	r3, #0
 80030b0:	d10c      	bne.n	80030cc <HAL_RCC_OscConfig+0x98>
 80030b2:	4b7b      	ldr	r3, [pc, #492]	; (80032a0 <HAL_RCC_OscConfig+0x26c>)
 80030b4:	681b      	ldr	r3, [r3, #0]
 80030b6:	4a7a      	ldr	r2, [pc, #488]	; (80032a0 <HAL_RCC_OscConfig+0x26c>)
 80030b8:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80030bc:	6013      	str	r3, [r2, #0]
 80030be:	4b78      	ldr	r3, [pc, #480]	; (80032a0 <HAL_RCC_OscConfig+0x26c>)
 80030c0:	681b      	ldr	r3, [r3, #0]
 80030c2:	4a77      	ldr	r2, [pc, #476]	; (80032a0 <HAL_RCC_OscConfig+0x26c>)
 80030c4:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 80030c8:	6013      	str	r3, [r2, #0]
 80030ca:	e01d      	b.n	8003108 <HAL_RCC_OscConfig+0xd4>
 80030cc:	687b      	ldr	r3, [r7, #4]
 80030ce:	685b      	ldr	r3, [r3, #4]
 80030d0:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 80030d4:	d10c      	bne.n	80030f0 <HAL_RCC_OscConfig+0xbc>
 80030d6:	4b72      	ldr	r3, [pc, #456]	; (80032a0 <HAL_RCC_OscConfig+0x26c>)
 80030d8:	681b      	ldr	r3, [r3, #0]
 80030da:	4a71      	ldr	r2, [pc, #452]	; (80032a0 <HAL_RCC_OscConfig+0x26c>)
 80030dc:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 80030e0:	6013      	str	r3, [r2, #0]
 80030e2:	4b6f      	ldr	r3, [pc, #444]	; (80032a0 <HAL_RCC_OscConfig+0x26c>)
 80030e4:	681b      	ldr	r3, [r3, #0]
 80030e6:	4a6e      	ldr	r2, [pc, #440]	; (80032a0 <HAL_RCC_OscConfig+0x26c>)
 80030e8:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80030ec:	6013      	str	r3, [r2, #0]
 80030ee:	e00b      	b.n	8003108 <HAL_RCC_OscConfig+0xd4>
 80030f0:	4b6b      	ldr	r3, [pc, #428]	; (80032a0 <HAL_RCC_OscConfig+0x26c>)
 80030f2:	681b      	ldr	r3, [r3, #0]
 80030f4:	4a6a      	ldr	r2, [pc, #424]	; (80032a0 <HAL_RCC_OscConfig+0x26c>)
 80030f6:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80030fa:	6013      	str	r3, [r2, #0]
 80030fc:	4b68      	ldr	r3, [pc, #416]	; (80032a0 <HAL_RCC_OscConfig+0x26c>)
 80030fe:	681b      	ldr	r3, [r3, #0]
 8003100:	4a67      	ldr	r2, [pc, #412]	; (80032a0 <HAL_RCC_OscConfig+0x26c>)
 8003102:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8003106:	6013      	str	r3, [r2, #0]


      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8003108:	687b      	ldr	r3, [r7, #4]
 800310a:	685b      	ldr	r3, [r3, #4]
 800310c:	2b00      	cmp	r3, #0
 800310e:	d013      	beq.n	8003138 <HAL_RCC_OscConfig+0x104>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003110:	f7fd fbd8 	bl	80008c4 <HAL_GetTick>
 8003114:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8003116:	e008      	b.n	800312a <HAL_RCC_OscConfig+0xf6>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8003118:	f7fd fbd4 	bl	80008c4 <HAL_GetTick>
 800311c:	4602      	mov	r2, r0
 800311e:	693b      	ldr	r3, [r7, #16]
 8003120:	1ad3      	subs	r3, r2, r3
 8003122:	2b64      	cmp	r3, #100	; 0x64
 8003124:	d901      	bls.n	800312a <HAL_RCC_OscConfig+0xf6>
          {
            return HAL_TIMEOUT;
 8003126:	2303      	movs	r3, #3
 8003128:	e1fa      	b.n	8003520 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800312a:	4b5d      	ldr	r3, [pc, #372]	; (80032a0 <HAL_RCC_OscConfig+0x26c>)
 800312c:	681b      	ldr	r3, [r3, #0]
 800312e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003132:	2b00      	cmp	r3, #0
 8003134:	d0f0      	beq.n	8003118 <HAL_RCC_OscConfig+0xe4>
 8003136:	e014      	b.n	8003162 <HAL_RCC_OscConfig+0x12e>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003138:	f7fd fbc4 	bl	80008c4 <HAL_GetTick>
 800313c:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800313e:	e008      	b.n	8003152 <HAL_RCC_OscConfig+0x11e>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8003140:	f7fd fbc0 	bl	80008c4 <HAL_GetTick>
 8003144:	4602      	mov	r2, r0
 8003146:	693b      	ldr	r3, [r7, #16]
 8003148:	1ad3      	subs	r3, r2, r3
 800314a:	2b64      	cmp	r3, #100	; 0x64
 800314c:	d901      	bls.n	8003152 <HAL_RCC_OscConfig+0x11e>
          {
            return HAL_TIMEOUT;
 800314e:	2303      	movs	r3, #3
 8003150:	e1e6      	b.n	8003520 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8003152:	4b53      	ldr	r3, [pc, #332]	; (80032a0 <HAL_RCC_OscConfig+0x26c>)
 8003154:	681b      	ldr	r3, [r3, #0]
 8003156:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800315a:	2b00      	cmp	r3, #0
 800315c:	d1f0      	bne.n	8003140 <HAL_RCC_OscConfig+0x10c>
 800315e:	e000      	b.n	8003162 <HAL_RCC_OscConfig+0x12e>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8003160:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8003162:	687b      	ldr	r3, [r7, #4]
 8003164:	681b      	ldr	r3, [r3, #0]
 8003166:	f003 0302 	and.w	r3, r3, #2
 800316a:	2b00      	cmp	r3, #0
 800316c:	d063      	beq.n	8003236 <HAL_RCC_OscConfig+0x202>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 800316e:	4b4c      	ldr	r3, [pc, #304]	; (80032a0 <HAL_RCC_OscConfig+0x26c>)
 8003170:	685b      	ldr	r3, [r3, #4]
 8003172:	f003 030c 	and.w	r3, r3, #12
 8003176:	2b00      	cmp	r3, #0
 8003178:	d00b      	beq.n	8003192 <HAL_RCC_OscConfig+0x15e>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI_DIV2)))
 800317a:	4b49      	ldr	r3, [pc, #292]	; (80032a0 <HAL_RCC_OscConfig+0x26c>)
 800317c:	685b      	ldr	r3, [r3, #4]
 800317e:	f003 030c 	and.w	r3, r3, #12
 8003182:	2b08      	cmp	r3, #8
 8003184:	d11c      	bne.n	80031c0 <HAL_RCC_OscConfig+0x18c>
 8003186:	4b46      	ldr	r3, [pc, #280]	; (80032a0 <HAL_RCC_OscConfig+0x26c>)
 8003188:	685b      	ldr	r3, [r3, #4]
 800318a:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800318e:	2b00      	cmp	r3, #0
 8003190:	d116      	bne.n	80031c0 <HAL_RCC_OscConfig+0x18c>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8003192:	4b43      	ldr	r3, [pc, #268]	; (80032a0 <HAL_RCC_OscConfig+0x26c>)
 8003194:	681b      	ldr	r3, [r3, #0]
 8003196:	f003 0302 	and.w	r3, r3, #2
 800319a:	2b00      	cmp	r3, #0
 800319c:	d005      	beq.n	80031aa <HAL_RCC_OscConfig+0x176>
 800319e:	687b      	ldr	r3, [r7, #4]
 80031a0:	691b      	ldr	r3, [r3, #16]
 80031a2:	2b01      	cmp	r3, #1
 80031a4:	d001      	beq.n	80031aa <HAL_RCC_OscConfig+0x176>
      {
        return HAL_ERROR;
 80031a6:	2301      	movs	r3, #1
 80031a8:	e1ba      	b.n	8003520 <HAL_RCC_OscConfig+0x4ec>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80031aa:	4b3d      	ldr	r3, [pc, #244]	; (80032a0 <HAL_RCC_OscConfig+0x26c>)
 80031ac:	681b      	ldr	r3, [r3, #0]
 80031ae:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 80031b2:	687b      	ldr	r3, [r7, #4]
 80031b4:	695b      	ldr	r3, [r3, #20]
 80031b6:	00db      	lsls	r3, r3, #3
 80031b8:	4939      	ldr	r1, [pc, #228]	; (80032a0 <HAL_RCC_OscConfig+0x26c>)
 80031ba:	4313      	orrs	r3, r2
 80031bc:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80031be:	e03a      	b.n	8003236 <HAL_RCC_OscConfig+0x202>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 80031c0:	687b      	ldr	r3, [r7, #4]
 80031c2:	691b      	ldr	r3, [r3, #16]
 80031c4:	2b00      	cmp	r3, #0
 80031c6:	d020      	beq.n	800320a <HAL_RCC_OscConfig+0x1d6>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 80031c8:	4b36      	ldr	r3, [pc, #216]	; (80032a4 <HAL_RCC_OscConfig+0x270>)
 80031ca:	2201      	movs	r2, #1
 80031cc:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80031ce:	f7fd fb79 	bl	80008c4 <HAL_GetTick>
 80031d2:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80031d4:	e008      	b.n	80031e8 <HAL_RCC_OscConfig+0x1b4>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80031d6:	f7fd fb75 	bl	80008c4 <HAL_GetTick>
 80031da:	4602      	mov	r2, r0
 80031dc:	693b      	ldr	r3, [r7, #16]
 80031de:	1ad3      	subs	r3, r2, r3
 80031e0:	2b02      	cmp	r3, #2
 80031e2:	d901      	bls.n	80031e8 <HAL_RCC_OscConfig+0x1b4>
          {
            return HAL_TIMEOUT;
 80031e4:	2303      	movs	r3, #3
 80031e6:	e19b      	b.n	8003520 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80031e8:	4b2d      	ldr	r3, [pc, #180]	; (80032a0 <HAL_RCC_OscConfig+0x26c>)
 80031ea:	681b      	ldr	r3, [r3, #0]
 80031ec:	f003 0302 	and.w	r3, r3, #2
 80031f0:	2b00      	cmp	r3, #0
 80031f2:	d0f0      	beq.n	80031d6 <HAL_RCC_OscConfig+0x1a2>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80031f4:	4b2a      	ldr	r3, [pc, #168]	; (80032a0 <HAL_RCC_OscConfig+0x26c>)
 80031f6:	681b      	ldr	r3, [r3, #0]
 80031f8:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 80031fc:	687b      	ldr	r3, [r7, #4]
 80031fe:	695b      	ldr	r3, [r3, #20]
 8003200:	00db      	lsls	r3, r3, #3
 8003202:	4927      	ldr	r1, [pc, #156]	; (80032a0 <HAL_RCC_OscConfig+0x26c>)
 8003204:	4313      	orrs	r3, r2
 8003206:	600b      	str	r3, [r1, #0]
 8003208:	e015      	b.n	8003236 <HAL_RCC_OscConfig+0x202>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 800320a:	4b26      	ldr	r3, [pc, #152]	; (80032a4 <HAL_RCC_OscConfig+0x270>)
 800320c:	2200      	movs	r2, #0
 800320e:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003210:	f7fd fb58 	bl	80008c4 <HAL_GetTick>
 8003214:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8003216:	e008      	b.n	800322a <HAL_RCC_OscConfig+0x1f6>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8003218:	f7fd fb54 	bl	80008c4 <HAL_GetTick>
 800321c:	4602      	mov	r2, r0
 800321e:	693b      	ldr	r3, [r7, #16]
 8003220:	1ad3      	subs	r3, r2, r3
 8003222:	2b02      	cmp	r3, #2
 8003224:	d901      	bls.n	800322a <HAL_RCC_OscConfig+0x1f6>
          {
            return HAL_TIMEOUT;
 8003226:	2303      	movs	r3, #3
 8003228:	e17a      	b.n	8003520 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800322a:	4b1d      	ldr	r3, [pc, #116]	; (80032a0 <HAL_RCC_OscConfig+0x26c>)
 800322c:	681b      	ldr	r3, [r3, #0]
 800322e:	f003 0302 	and.w	r3, r3, #2
 8003232:	2b00      	cmp	r3, #0
 8003234:	d1f0      	bne.n	8003218 <HAL_RCC_OscConfig+0x1e4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8003236:	687b      	ldr	r3, [r7, #4]
 8003238:	681b      	ldr	r3, [r3, #0]
 800323a:	f003 0308 	and.w	r3, r3, #8
 800323e:	2b00      	cmp	r3, #0
 8003240:	d03a      	beq.n	80032b8 <HAL_RCC_OscConfig+0x284>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if (RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8003242:	687b      	ldr	r3, [r7, #4]
 8003244:	699b      	ldr	r3, [r3, #24]
 8003246:	2b00      	cmp	r3, #0
 8003248:	d019      	beq.n	800327e <HAL_RCC_OscConfig+0x24a>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 800324a:	4b17      	ldr	r3, [pc, #92]	; (80032a8 <HAL_RCC_OscConfig+0x274>)
 800324c:	2201      	movs	r2, #1
 800324e:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8003250:	f7fd fb38 	bl	80008c4 <HAL_GetTick>
 8003254:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8003256:	e008      	b.n	800326a <HAL_RCC_OscConfig+0x236>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8003258:	f7fd fb34 	bl	80008c4 <HAL_GetTick>
 800325c:	4602      	mov	r2, r0
 800325e:	693b      	ldr	r3, [r7, #16]
 8003260:	1ad3      	subs	r3, r2, r3
 8003262:	2b02      	cmp	r3, #2
 8003264:	d901      	bls.n	800326a <HAL_RCC_OscConfig+0x236>
        {
          return HAL_TIMEOUT;
 8003266:	2303      	movs	r3, #3
 8003268:	e15a      	b.n	8003520 <HAL_RCC_OscConfig+0x4ec>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800326a:	4b0d      	ldr	r3, [pc, #52]	; (80032a0 <HAL_RCC_OscConfig+0x26c>)
 800326c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800326e:	f003 0302 	and.w	r3, r3, #2
 8003272:	2b00      	cmp	r3, #0
 8003274:	d0f0      	beq.n	8003258 <HAL_RCC_OscConfig+0x224>
        }
      }
      /*  To have a fully stabilized clock in the specified range, a software delay of 1ms
          should be added.*/
      RCC_Delay(1);
 8003276:	2001      	movs	r0, #1
 8003278:	f000 faa8 	bl	80037cc <RCC_Delay>
 800327c:	e01c      	b.n	80032b8 <HAL_RCC_OscConfig+0x284>
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 800327e:	4b0a      	ldr	r3, [pc, #40]	; (80032a8 <HAL_RCC_OscConfig+0x274>)
 8003280:	2200      	movs	r2, #0
 8003282:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8003284:	f7fd fb1e 	bl	80008c4 <HAL_GetTick>
 8003288:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 800328a:	e00f      	b.n	80032ac <HAL_RCC_OscConfig+0x278>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 800328c:	f7fd fb1a 	bl	80008c4 <HAL_GetTick>
 8003290:	4602      	mov	r2, r0
 8003292:	693b      	ldr	r3, [r7, #16]
 8003294:	1ad3      	subs	r3, r2, r3
 8003296:	2b02      	cmp	r3, #2
 8003298:	d908      	bls.n	80032ac <HAL_RCC_OscConfig+0x278>
        {
          return HAL_TIMEOUT;
 800329a:	2303      	movs	r3, #3
 800329c:	e140      	b.n	8003520 <HAL_RCC_OscConfig+0x4ec>
 800329e:	bf00      	nop
 80032a0:	40021000 	.word	0x40021000
 80032a4:	42420000 	.word	0x42420000
 80032a8:	42420480 	.word	0x42420480
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80032ac:	4b9e      	ldr	r3, [pc, #632]	; (8003528 <HAL_RCC_OscConfig+0x4f4>)
 80032ae:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80032b0:	f003 0302 	and.w	r3, r3, #2
 80032b4:	2b00      	cmp	r3, #0
 80032b6:	d1e9      	bne.n	800328c <HAL_RCC_OscConfig+0x258>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 80032b8:	687b      	ldr	r3, [r7, #4]
 80032ba:	681b      	ldr	r3, [r3, #0]
 80032bc:	f003 0304 	and.w	r3, r3, #4
 80032c0:	2b00      	cmp	r3, #0
 80032c2:	f000 80a6 	beq.w	8003412 <HAL_RCC_OscConfig+0x3de>
  {
    FlagStatus       pwrclkchanged = RESET;
 80032c6:	2300      	movs	r3, #0
 80032c8:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 80032ca:	4b97      	ldr	r3, [pc, #604]	; (8003528 <HAL_RCC_OscConfig+0x4f4>)
 80032cc:	69db      	ldr	r3, [r3, #28]
 80032ce:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80032d2:	2b00      	cmp	r3, #0
 80032d4:	d10d      	bne.n	80032f2 <HAL_RCC_OscConfig+0x2be>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 80032d6:	4b94      	ldr	r3, [pc, #592]	; (8003528 <HAL_RCC_OscConfig+0x4f4>)
 80032d8:	69db      	ldr	r3, [r3, #28]
 80032da:	4a93      	ldr	r2, [pc, #588]	; (8003528 <HAL_RCC_OscConfig+0x4f4>)
 80032dc:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80032e0:	61d3      	str	r3, [r2, #28]
 80032e2:	4b91      	ldr	r3, [pc, #580]	; (8003528 <HAL_RCC_OscConfig+0x4f4>)
 80032e4:	69db      	ldr	r3, [r3, #28]
 80032e6:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80032ea:	60bb      	str	r3, [r7, #8]
 80032ec:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 80032ee:	2301      	movs	r3, #1
 80032f0:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80032f2:	4b8e      	ldr	r3, [pc, #568]	; (800352c <HAL_RCC_OscConfig+0x4f8>)
 80032f4:	681b      	ldr	r3, [r3, #0]
 80032f6:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80032fa:	2b00      	cmp	r3, #0
 80032fc:	d118      	bne.n	8003330 <HAL_RCC_OscConfig+0x2fc>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 80032fe:	4b8b      	ldr	r3, [pc, #556]	; (800352c <HAL_RCC_OscConfig+0x4f8>)
 8003300:	681b      	ldr	r3, [r3, #0]
 8003302:	4a8a      	ldr	r2, [pc, #552]	; (800352c <HAL_RCC_OscConfig+0x4f8>)
 8003304:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8003308:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 800330a:	f7fd fadb 	bl	80008c4 <HAL_GetTick>
 800330e:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003310:	e008      	b.n	8003324 <HAL_RCC_OscConfig+0x2f0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8003312:	f7fd fad7 	bl	80008c4 <HAL_GetTick>
 8003316:	4602      	mov	r2, r0
 8003318:	693b      	ldr	r3, [r7, #16]
 800331a:	1ad3      	subs	r3, r2, r3
 800331c:	2b64      	cmp	r3, #100	; 0x64
 800331e:	d901      	bls.n	8003324 <HAL_RCC_OscConfig+0x2f0>
        {
          return HAL_TIMEOUT;
 8003320:	2303      	movs	r3, #3
 8003322:	e0fd      	b.n	8003520 <HAL_RCC_OscConfig+0x4ec>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003324:	4b81      	ldr	r3, [pc, #516]	; (800352c <HAL_RCC_OscConfig+0x4f8>)
 8003326:	681b      	ldr	r3, [r3, #0]
 8003328:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800332c:	2b00      	cmp	r3, #0
 800332e:	d0f0      	beq.n	8003312 <HAL_RCC_OscConfig+0x2de>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8003330:	687b      	ldr	r3, [r7, #4]
 8003332:	68db      	ldr	r3, [r3, #12]
 8003334:	2b01      	cmp	r3, #1
 8003336:	d106      	bne.n	8003346 <HAL_RCC_OscConfig+0x312>
 8003338:	4b7b      	ldr	r3, [pc, #492]	; (8003528 <HAL_RCC_OscConfig+0x4f4>)
 800333a:	6a1b      	ldr	r3, [r3, #32]
 800333c:	4a7a      	ldr	r2, [pc, #488]	; (8003528 <HAL_RCC_OscConfig+0x4f4>)
 800333e:	f043 0301 	orr.w	r3, r3, #1
 8003342:	6213      	str	r3, [r2, #32]
 8003344:	e02d      	b.n	80033a2 <HAL_RCC_OscConfig+0x36e>
 8003346:	687b      	ldr	r3, [r7, #4]
 8003348:	68db      	ldr	r3, [r3, #12]
 800334a:	2b00      	cmp	r3, #0
 800334c:	d10c      	bne.n	8003368 <HAL_RCC_OscConfig+0x334>
 800334e:	4b76      	ldr	r3, [pc, #472]	; (8003528 <HAL_RCC_OscConfig+0x4f4>)
 8003350:	6a1b      	ldr	r3, [r3, #32]
 8003352:	4a75      	ldr	r2, [pc, #468]	; (8003528 <HAL_RCC_OscConfig+0x4f4>)
 8003354:	f023 0301 	bic.w	r3, r3, #1
 8003358:	6213      	str	r3, [r2, #32]
 800335a:	4b73      	ldr	r3, [pc, #460]	; (8003528 <HAL_RCC_OscConfig+0x4f4>)
 800335c:	6a1b      	ldr	r3, [r3, #32]
 800335e:	4a72      	ldr	r2, [pc, #456]	; (8003528 <HAL_RCC_OscConfig+0x4f4>)
 8003360:	f023 0304 	bic.w	r3, r3, #4
 8003364:	6213      	str	r3, [r2, #32]
 8003366:	e01c      	b.n	80033a2 <HAL_RCC_OscConfig+0x36e>
 8003368:	687b      	ldr	r3, [r7, #4]
 800336a:	68db      	ldr	r3, [r3, #12]
 800336c:	2b05      	cmp	r3, #5
 800336e:	d10c      	bne.n	800338a <HAL_RCC_OscConfig+0x356>
 8003370:	4b6d      	ldr	r3, [pc, #436]	; (8003528 <HAL_RCC_OscConfig+0x4f4>)
 8003372:	6a1b      	ldr	r3, [r3, #32]
 8003374:	4a6c      	ldr	r2, [pc, #432]	; (8003528 <HAL_RCC_OscConfig+0x4f4>)
 8003376:	f043 0304 	orr.w	r3, r3, #4
 800337a:	6213      	str	r3, [r2, #32]
 800337c:	4b6a      	ldr	r3, [pc, #424]	; (8003528 <HAL_RCC_OscConfig+0x4f4>)
 800337e:	6a1b      	ldr	r3, [r3, #32]
 8003380:	4a69      	ldr	r2, [pc, #420]	; (8003528 <HAL_RCC_OscConfig+0x4f4>)
 8003382:	f043 0301 	orr.w	r3, r3, #1
 8003386:	6213      	str	r3, [r2, #32]
 8003388:	e00b      	b.n	80033a2 <HAL_RCC_OscConfig+0x36e>
 800338a:	4b67      	ldr	r3, [pc, #412]	; (8003528 <HAL_RCC_OscConfig+0x4f4>)
 800338c:	6a1b      	ldr	r3, [r3, #32]
 800338e:	4a66      	ldr	r2, [pc, #408]	; (8003528 <HAL_RCC_OscConfig+0x4f4>)
 8003390:	f023 0301 	bic.w	r3, r3, #1
 8003394:	6213      	str	r3, [r2, #32]
 8003396:	4b64      	ldr	r3, [pc, #400]	; (8003528 <HAL_RCC_OscConfig+0x4f4>)
 8003398:	6a1b      	ldr	r3, [r3, #32]
 800339a:	4a63      	ldr	r2, [pc, #396]	; (8003528 <HAL_RCC_OscConfig+0x4f4>)
 800339c:	f023 0304 	bic.w	r3, r3, #4
 80033a0:	6213      	str	r3, [r2, #32]
    /* Check the LSE State */
    if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 80033a2:	687b      	ldr	r3, [r7, #4]
 80033a4:	68db      	ldr	r3, [r3, #12]
 80033a6:	2b00      	cmp	r3, #0
 80033a8:	d015      	beq.n	80033d6 <HAL_RCC_OscConfig+0x3a2>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80033aa:	f7fd fa8b 	bl	80008c4 <HAL_GetTick>
 80033ae:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80033b0:	e00a      	b.n	80033c8 <HAL_RCC_OscConfig+0x394>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80033b2:	f7fd fa87 	bl	80008c4 <HAL_GetTick>
 80033b6:	4602      	mov	r2, r0
 80033b8:	693b      	ldr	r3, [r7, #16]
 80033ba:	1ad3      	subs	r3, r2, r3
 80033bc:	f241 3288 	movw	r2, #5000	; 0x1388
 80033c0:	4293      	cmp	r3, r2
 80033c2:	d901      	bls.n	80033c8 <HAL_RCC_OscConfig+0x394>
        {
          return HAL_TIMEOUT;
 80033c4:	2303      	movs	r3, #3
 80033c6:	e0ab      	b.n	8003520 <HAL_RCC_OscConfig+0x4ec>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80033c8:	4b57      	ldr	r3, [pc, #348]	; (8003528 <HAL_RCC_OscConfig+0x4f4>)
 80033ca:	6a1b      	ldr	r3, [r3, #32]
 80033cc:	f003 0302 	and.w	r3, r3, #2
 80033d0:	2b00      	cmp	r3, #0
 80033d2:	d0ee      	beq.n	80033b2 <HAL_RCC_OscConfig+0x37e>
 80033d4:	e014      	b.n	8003400 <HAL_RCC_OscConfig+0x3cc>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80033d6:	f7fd fa75 	bl	80008c4 <HAL_GetTick>
 80033da:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80033dc:	e00a      	b.n	80033f4 <HAL_RCC_OscConfig+0x3c0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80033de:	f7fd fa71 	bl	80008c4 <HAL_GetTick>
 80033e2:	4602      	mov	r2, r0
 80033e4:	693b      	ldr	r3, [r7, #16]
 80033e6:	1ad3      	subs	r3, r2, r3
 80033e8:	f241 3288 	movw	r2, #5000	; 0x1388
 80033ec:	4293      	cmp	r3, r2
 80033ee:	d901      	bls.n	80033f4 <HAL_RCC_OscConfig+0x3c0>
        {
          return HAL_TIMEOUT;
 80033f0:	2303      	movs	r3, #3
 80033f2:	e095      	b.n	8003520 <HAL_RCC_OscConfig+0x4ec>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80033f4:	4b4c      	ldr	r3, [pc, #304]	; (8003528 <HAL_RCC_OscConfig+0x4f4>)
 80033f6:	6a1b      	ldr	r3, [r3, #32]
 80033f8:	f003 0302 	and.w	r3, r3, #2
 80033fc:	2b00      	cmp	r3, #0
 80033fe:	d1ee      	bne.n	80033de <HAL_RCC_OscConfig+0x3aa>
        }
      }
    }

    /* Require to disable power clock if necessary */
    if (pwrclkchanged == SET)
 8003400:	7dfb      	ldrb	r3, [r7, #23]
 8003402:	2b01      	cmp	r3, #1
 8003404:	d105      	bne.n	8003412 <HAL_RCC_OscConfig+0x3de>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8003406:	4b48      	ldr	r3, [pc, #288]	; (8003528 <HAL_RCC_OscConfig+0x4f4>)
 8003408:	69db      	ldr	r3, [r3, #28]
 800340a:	4a47      	ldr	r2, [pc, #284]	; (8003528 <HAL_RCC_OscConfig+0x4f4>)
 800340c:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8003410:	61d3      	str	r3, [r2, #28]

#endif /* RCC_CR_PLL2ON */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8003412:	687b      	ldr	r3, [r7, #4]
 8003414:	69db      	ldr	r3, [r3, #28]
 8003416:	2b00      	cmp	r3, #0
 8003418:	f000 8081 	beq.w	800351e <HAL_RCC_OscConfig+0x4ea>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 800341c:	4b42      	ldr	r3, [pc, #264]	; (8003528 <HAL_RCC_OscConfig+0x4f4>)
 800341e:	685b      	ldr	r3, [r3, #4]
 8003420:	f003 030c 	and.w	r3, r3, #12
 8003424:	2b08      	cmp	r3, #8
 8003426:	d061      	beq.n	80034ec <HAL_RCC_OscConfig+0x4b8>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8003428:	687b      	ldr	r3, [r7, #4]
 800342a:	69db      	ldr	r3, [r3, #28]
 800342c:	2b02      	cmp	r3, #2
 800342e:	d146      	bne.n	80034be <HAL_RCC_OscConfig+0x48a>
        /* Check the parameters */
        assert_param(IS_RCC_PLLSOURCE(RCC_OscInitStruct->PLL.PLLSource));
        assert_param(IS_RCC_PLL_MUL(RCC_OscInitStruct->PLL.PLLMUL));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8003430:	4b3f      	ldr	r3, [pc, #252]	; (8003530 <HAL_RCC_OscConfig+0x4fc>)
 8003432:	2200      	movs	r2, #0
 8003434:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003436:	f7fd fa45 	bl	80008c4 <HAL_GetTick>
 800343a:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 800343c:	e008      	b.n	8003450 <HAL_RCC_OscConfig+0x41c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800343e:	f7fd fa41 	bl	80008c4 <HAL_GetTick>
 8003442:	4602      	mov	r2, r0
 8003444:	693b      	ldr	r3, [r7, #16]
 8003446:	1ad3      	subs	r3, r2, r3
 8003448:	2b02      	cmp	r3, #2
 800344a:	d901      	bls.n	8003450 <HAL_RCC_OscConfig+0x41c>
          {
            return HAL_TIMEOUT;
 800344c:	2303      	movs	r3, #3
 800344e:	e067      	b.n	8003520 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8003450:	4b35      	ldr	r3, [pc, #212]	; (8003528 <HAL_RCC_OscConfig+0x4f4>)
 8003452:	681b      	ldr	r3, [r3, #0]
 8003454:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003458:	2b00      	cmp	r3, #0
 800345a:	d1f0      	bne.n	800343e <HAL_RCC_OscConfig+0x40a>
          }
        }

        /* Configure the HSE prediv factor --------------------------------*/
        /* It can be written only when the PLL is disabled. Not used in PLL source is different than HSE */
        if (RCC_OscInitStruct->PLL.PLLSource == RCC_PLLSOURCE_HSE)
 800345c:	687b      	ldr	r3, [r7, #4]
 800345e:	6a1b      	ldr	r3, [r3, #32]
 8003460:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8003464:	d108      	bne.n	8003478 <HAL_RCC_OscConfig+0x444>
          /* Set PREDIV1 source */
          SET_BIT(RCC->CFGR2, RCC_OscInitStruct->Prediv1Source);
#endif /* RCC_CFGR2_PREDIV1SRC */

          /* Set PREDIV1 Value */
          __HAL_RCC_HSE_PREDIV_CONFIG(RCC_OscInitStruct->HSEPredivValue);
 8003466:	4b30      	ldr	r3, [pc, #192]	; (8003528 <HAL_RCC_OscConfig+0x4f4>)
 8003468:	685b      	ldr	r3, [r3, #4]
 800346a:	f423 3200 	bic.w	r2, r3, #131072	; 0x20000
 800346e:	687b      	ldr	r3, [r7, #4]
 8003470:	689b      	ldr	r3, [r3, #8]
 8003472:	492d      	ldr	r1, [pc, #180]	; (8003528 <HAL_RCC_OscConfig+0x4f4>)
 8003474:	4313      	orrs	r3, r2
 8003476:	604b      	str	r3, [r1, #4]
        }

        /* Configure the main PLL clock source and multiplication factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8003478:	4b2b      	ldr	r3, [pc, #172]	; (8003528 <HAL_RCC_OscConfig+0x4f4>)
 800347a:	685b      	ldr	r3, [r3, #4]
 800347c:	f423 1274 	bic.w	r2, r3, #3997696	; 0x3d0000
 8003480:	687b      	ldr	r3, [r7, #4]
 8003482:	6a19      	ldr	r1, [r3, #32]
 8003484:	687b      	ldr	r3, [r7, #4]
 8003486:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003488:	430b      	orrs	r3, r1
 800348a:	4927      	ldr	r1, [pc, #156]	; (8003528 <HAL_RCC_OscConfig+0x4f4>)
 800348c:	4313      	orrs	r3, r2
 800348e:	604b      	str	r3, [r1, #4]
                             RCC_OscInitStruct->PLL.PLLMUL);
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8003490:	4b27      	ldr	r3, [pc, #156]	; (8003530 <HAL_RCC_OscConfig+0x4fc>)
 8003492:	2201      	movs	r2, #1
 8003494:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003496:	f7fd fa15 	bl	80008c4 <HAL_GetTick>
 800349a:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 800349c:	e008      	b.n	80034b0 <HAL_RCC_OscConfig+0x47c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800349e:	f7fd fa11 	bl	80008c4 <HAL_GetTick>
 80034a2:	4602      	mov	r2, r0
 80034a4:	693b      	ldr	r3, [r7, #16]
 80034a6:	1ad3      	subs	r3, r2, r3
 80034a8:	2b02      	cmp	r3, #2
 80034aa:	d901      	bls.n	80034b0 <HAL_RCC_OscConfig+0x47c>
          {
            return HAL_TIMEOUT;
 80034ac:	2303      	movs	r3, #3
 80034ae:	e037      	b.n	8003520 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 80034b0:	4b1d      	ldr	r3, [pc, #116]	; (8003528 <HAL_RCC_OscConfig+0x4f4>)
 80034b2:	681b      	ldr	r3, [r3, #0]
 80034b4:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80034b8:	2b00      	cmp	r3, #0
 80034ba:	d0f0      	beq.n	800349e <HAL_RCC_OscConfig+0x46a>
 80034bc:	e02f      	b.n	800351e <HAL_RCC_OscConfig+0x4ea>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80034be:	4b1c      	ldr	r3, [pc, #112]	; (8003530 <HAL_RCC_OscConfig+0x4fc>)
 80034c0:	2200      	movs	r2, #0
 80034c2:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80034c4:	f7fd f9fe 	bl	80008c4 <HAL_GetTick>
 80034c8:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 80034ca:	e008      	b.n	80034de <HAL_RCC_OscConfig+0x4aa>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80034cc:	f7fd f9fa 	bl	80008c4 <HAL_GetTick>
 80034d0:	4602      	mov	r2, r0
 80034d2:	693b      	ldr	r3, [r7, #16]
 80034d4:	1ad3      	subs	r3, r2, r3
 80034d6:	2b02      	cmp	r3, #2
 80034d8:	d901      	bls.n	80034de <HAL_RCC_OscConfig+0x4aa>
          {
            return HAL_TIMEOUT;
 80034da:	2303      	movs	r3, #3
 80034dc:	e020      	b.n	8003520 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 80034de:	4b12      	ldr	r3, [pc, #72]	; (8003528 <HAL_RCC_OscConfig+0x4f4>)
 80034e0:	681b      	ldr	r3, [r3, #0]
 80034e2:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80034e6:	2b00      	cmp	r3, #0
 80034e8:	d1f0      	bne.n	80034cc <HAL_RCC_OscConfig+0x498>
 80034ea:	e018      	b.n	800351e <HAL_RCC_OscConfig+0x4ea>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 80034ec:	687b      	ldr	r3, [r7, #4]
 80034ee:	69db      	ldr	r3, [r3, #28]
 80034f0:	2b01      	cmp	r3, #1
 80034f2:	d101      	bne.n	80034f8 <HAL_RCC_OscConfig+0x4c4>
      {
        return HAL_ERROR;
 80034f4:	2301      	movs	r3, #1
 80034f6:	e013      	b.n	8003520 <HAL_RCC_OscConfig+0x4ec>
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->CFGR;
 80034f8:	4b0b      	ldr	r3, [pc, #44]	; (8003528 <HAL_RCC_OscConfig+0x4f4>)
 80034fa:	685b      	ldr	r3, [r3, #4]
 80034fc:	60fb      	str	r3, [r7, #12]
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80034fe:	68fb      	ldr	r3, [r7, #12]
 8003500:	f403 3280 	and.w	r2, r3, #65536	; 0x10000
 8003504:	687b      	ldr	r3, [r7, #4]
 8003506:	6a1b      	ldr	r3, [r3, #32]
 8003508:	429a      	cmp	r2, r3
 800350a:	d106      	bne.n	800351a <HAL_RCC_OscConfig+0x4e6>
            (READ_BIT(pll_config, RCC_CFGR_PLLMULL) != RCC_OscInitStruct->PLL.PLLMUL))
 800350c:	68fb      	ldr	r3, [r7, #12]
 800350e:	f403 1270 	and.w	r2, r3, #3932160	; 0x3c0000
 8003512:	687b      	ldr	r3, [r7, #4]
 8003514:	6a5b      	ldr	r3, [r3, #36]	; 0x24
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8003516:	429a      	cmp	r2, r3
 8003518:	d001      	beq.n	800351e <HAL_RCC_OscConfig+0x4ea>
        {
          return HAL_ERROR;
 800351a:	2301      	movs	r3, #1
 800351c:	e000      	b.n	8003520 <HAL_RCC_OscConfig+0x4ec>
        }
      }
    }
  }

  return HAL_OK;
 800351e:	2300      	movs	r3, #0
}
 8003520:	4618      	mov	r0, r3
 8003522:	3718      	adds	r7, #24
 8003524:	46bd      	mov	sp, r7
 8003526:	bd80      	pop	{r7, pc}
 8003528:	40021000 	.word	0x40021000
 800352c:	40007000 	.word	0x40007000
 8003530:	42420060 	.word	0x42420060

08003534 <HAL_RCC_ClockConfig>:
  *         You can use @ref HAL_RCC_GetClockConfig() function to know which clock is
  *         currently used as system clock source.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8003534:	b580      	push	{r7, lr}
 8003536:	b084      	sub	sp, #16
 8003538:	af00      	add	r7, sp, #0
 800353a:	6078      	str	r0, [r7, #4]
 800353c:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 800353e:	687b      	ldr	r3, [r7, #4]
 8003540:	2b00      	cmp	r3, #0
 8003542:	d101      	bne.n	8003548 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8003544:	2301      	movs	r3, #1
 8003546:	e0d0      	b.n	80036ea <HAL_RCC_ClockConfig+0x1b6>
  must be correctly programmed according to the frequency of the CPU clock
    (HCLK) of the device. */

#if defined(FLASH_ACR_LATENCY)
  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8003548:	4b6a      	ldr	r3, [pc, #424]	; (80036f4 <HAL_RCC_ClockConfig+0x1c0>)
 800354a:	681b      	ldr	r3, [r3, #0]
 800354c:	f003 0307 	and.w	r3, r3, #7
 8003550:	683a      	ldr	r2, [r7, #0]
 8003552:	429a      	cmp	r2, r3
 8003554:	d910      	bls.n	8003578 <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8003556:	4b67      	ldr	r3, [pc, #412]	; (80036f4 <HAL_RCC_ClockConfig+0x1c0>)
 8003558:	681b      	ldr	r3, [r3, #0]
 800355a:	f023 0207 	bic.w	r2, r3, #7
 800355e:	4965      	ldr	r1, [pc, #404]	; (80036f4 <HAL_RCC_ClockConfig+0x1c0>)
 8003560:	683b      	ldr	r3, [r7, #0]
 8003562:	4313      	orrs	r3, r2
 8003564:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8003566:	4b63      	ldr	r3, [pc, #396]	; (80036f4 <HAL_RCC_ClockConfig+0x1c0>)
 8003568:	681b      	ldr	r3, [r3, #0]
 800356a:	f003 0307 	and.w	r3, r3, #7
 800356e:	683a      	ldr	r2, [r7, #0]
 8003570:	429a      	cmp	r2, r3
 8003572:	d001      	beq.n	8003578 <HAL_RCC_ClockConfig+0x44>
  {
    return HAL_ERROR;
 8003574:	2301      	movs	r3, #1
 8003576:	e0b8      	b.n	80036ea <HAL_RCC_ClockConfig+0x1b6>
  }
}

#endif /* FLASH_ACR_LATENCY */
/*-------------------------- HCLK Configuration --------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8003578:	687b      	ldr	r3, [r7, #4]
 800357a:	681b      	ldr	r3, [r3, #0]
 800357c:	f003 0302 	and.w	r3, r3, #2
 8003580:	2b00      	cmp	r3, #0
 8003582:	d020      	beq.n	80035c6 <HAL_RCC_ClockConfig+0x92>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
    a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8003584:	687b      	ldr	r3, [r7, #4]
 8003586:	681b      	ldr	r3, [r3, #0]
 8003588:	f003 0304 	and.w	r3, r3, #4
 800358c:	2b00      	cmp	r3, #0
 800358e:	d005      	beq.n	800359c <HAL_RCC_ClockConfig+0x68>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8003590:	4b59      	ldr	r3, [pc, #356]	; (80036f8 <HAL_RCC_ClockConfig+0x1c4>)
 8003592:	685b      	ldr	r3, [r3, #4]
 8003594:	4a58      	ldr	r2, [pc, #352]	; (80036f8 <HAL_RCC_ClockConfig+0x1c4>)
 8003596:	f443 63e0 	orr.w	r3, r3, #1792	; 0x700
 800359a:	6053      	str	r3, [r2, #4]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800359c:	687b      	ldr	r3, [r7, #4]
 800359e:	681b      	ldr	r3, [r3, #0]
 80035a0:	f003 0308 	and.w	r3, r3, #8
 80035a4:	2b00      	cmp	r3, #0
 80035a6:	d005      	beq.n	80035b4 <HAL_RCC_ClockConfig+0x80>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 80035a8:	4b53      	ldr	r3, [pc, #332]	; (80036f8 <HAL_RCC_ClockConfig+0x1c4>)
 80035aa:	685b      	ldr	r3, [r3, #4]
 80035ac:	4a52      	ldr	r2, [pc, #328]	; (80036f8 <HAL_RCC_ClockConfig+0x1c4>)
 80035ae:	f443 5360 	orr.w	r3, r3, #14336	; 0x3800
 80035b2:	6053      	str	r3, [r2, #4]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 80035b4:	4b50      	ldr	r3, [pc, #320]	; (80036f8 <HAL_RCC_ClockConfig+0x1c4>)
 80035b6:	685b      	ldr	r3, [r3, #4]
 80035b8:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 80035bc:	687b      	ldr	r3, [r7, #4]
 80035be:	689b      	ldr	r3, [r3, #8]
 80035c0:	494d      	ldr	r1, [pc, #308]	; (80036f8 <HAL_RCC_ClockConfig+0x1c4>)
 80035c2:	4313      	orrs	r3, r2
 80035c4:	604b      	str	r3, [r1, #4]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 80035c6:	687b      	ldr	r3, [r7, #4]
 80035c8:	681b      	ldr	r3, [r3, #0]
 80035ca:	f003 0301 	and.w	r3, r3, #1
 80035ce:	2b00      	cmp	r3, #0
 80035d0:	d040      	beq.n	8003654 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 80035d2:	687b      	ldr	r3, [r7, #4]
 80035d4:	685b      	ldr	r3, [r3, #4]
 80035d6:	2b01      	cmp	r3, #1
 80035d8:	d107      	bne.n	80035ea <HAL_RCC_ClockConfig+0xb6>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80035da:	4b47      	ldr	r3, [pc, #284]	; (80036f8 <HAL_RCC_ClockConfig+0x1c4>)
 80035dc:	681b      	ldr	r3, [r3, #0]
 80035de:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80035e2:	2b00      	cmp	r3, #0
 80035e4:	d115      	bne.n	8003612 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80035e6:	2301      	movs	r3, #1
 80035e8:	e07f      	b.n	80036ea <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 80035ea:	687b      	ldr	r3, [r7, #4]
 80035ec:	685b      	ldr	r3, [r3, #4]
 80035ee:	2b02      	cmp	r3, #2
 80035f0:	d107      	bne.n	8003602 <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80035f2:	4b41      	ldr	r3, [pc, #260]	; (80036f8 <HAL_RCC_ClockConfig+0x1c4>)
 80035f4:	681b      	ldr	r3, [r3, #0]
 80035f6:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80035fa:	2b00      	cmp	r3, #0
 80035fc:	d109      	bne.n	8003612 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80035fe:	2301      	movs	r3, #1
 8003600:	e073      	b.n	80036ea <HAL_RCC_ClockConfig+0x1b6>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8003602:	4b3d      	ldr	r3, [pc, #244]	; (80036f8 <HAL_RCC_ClockConfig+0x1c4>)
 8003604:	681b      	ldr	r3, [r3, #0]
 8003606:	f003 0302 	and.w	r3, r3, #2
 800360a:	2b00      	cmp	r3, #0
 800360c:	d101      	bne.n	8003612 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800360e:	2301      	movs	r3, #1
 8003610:	e06b      	b.n	80036ea <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8003612:	4b39      	ldr	r3, [pc, #228]	; (80036f8 <HAL_RCC_ClockConfig+0x1c4>)
 8003614:	685b      	ldr	r3, [r3, #4]
 8003616:	f023 0203 	bic.w	r2, r3, #3
 800361a:	687b      	ldr	r3, [r7, #4]
 800361c:	685b      	ldr	r3, [r3, #4]
 800361e:	4936      	ldr	r1, [pc, #216]	; (80036f8 <HAL_RCC_ClockConfig+0x1c4>)
 8003620:	4313      	orrs	r3, r2
 8003622:	604b      	str	r3, [r1, #4]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8003624:	f7fd f94e 	bl	80008c4 <HAL_GetTick>
 8003628:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800362a:	e00a      	b.n	8003642 <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 800362c:	f7fd f94a 	bl	80008c4 <HAL_GetTick>
 8003630:	4602      	mov	r2, r0
 8003632:	68fb      	ldr	r3, [r7, #12]
 8003634:	1ad3      	subs	r3, r2, r3
 8003636:	f241 3288 	movw	r2, #5000	; 0x1388
 800363a:	4293      	cmp	r3, r2
 800363c:	d901      	bls.n	8003642 <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 800363e:	2303      	movs	r3, #3
 8003640:	e053      	b.n	80036ea <HAL_RCC_ClockConfig+0x1b6>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8003642:	4b2d      	ldr	r3, [pc, #180]	; (80036f8 <HAL_RCC_ClockConfig+0x1c4>)
 8003644:	685b      	ldr	r3, [r3, #4]
 8003646:	f003 020c 	and.w	r2, r3, #12
 800364a:	687b      	ldr	r3, [r7, #4]
 800364c:	685b      	ldr	r3, [r3, #4]
 800364e:	009b      	lsls	r3, r3, #2
 8003650:	429a      	cmp	r2, r3
 8003652:	d1eb      	bne.n	800362c <HAL_RCC_ClockConfig+0xf8>
    }
  }

#if defined(FLASH_ACR_LATENCY)
  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8003654:	4b27      	ldr	r3, [pc, #156]	; (80036f4 <HAL_RCC_ClockConfig+0x1c0>)
 8003656:	681b      	ldr	r3, [r3, #0]
 8003658:	f003 0307 	and.w	r3, r3, #7
 800365c:	683a      	ldr	r2, [r7, #0]
 800365e:	429a      	cmp	r2, r3
 8003660:	d210      	bcs.n	8003684 <HAL_RCC_ClockConfig+0x150>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8003662:	4b24      	ldr	r3, [pc, #144]	; (80036f4 <HAL_RCC_ClockConfig+0x1c0>)
 8003664:	681b      	ldr	r3, [r3, #0]
 8003666:	f023 0207 	bic.w	r2, r3, #7
 800366a:	4922      	ldr	r1, [pc, #136]	; (80036f4 <HAL_RCC_ClockConfig+0x1c0>)
 800366c:	683b      	ldr	r3, [r7, #0]
 800366e:	4313      	orrs	r3, r2
 8003670:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8003672:	4b20      	ldr	r3, [pc, #128]	; (80036f4 <HAL_RCC_ClockConfig+0x1c0>)
 8003674:	681b      	ldr	r3, [r3, #0]
 8003676:	f003 0307 	and.w	r3, r3, #7
 800367a:	683a      	ldr	r2, [r7, #0]
 800367c:	429a      	cmp	r2, r3
 800367e:	d001      	beq.n	8003684 <HAL_RCC_ClockConfig+0x150>
  {
    return HAL_ERROR;
 8003680:	2301      	movs	r3, #1
 8003682:	e032      	b.n	80036ea <HAL_RCC_ClockConfig+0x1b6>
  }
}
#endif /* FLASH_ACR_LATENCY */

/*-------------------------- PCLK1 Configuration ---------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8003684:	687b      	ldr	r3, [r7, #4]
 8003686:	681b      	ldr	r3, [r3, #0]
 8003688:	f003 0304 	and.w	r3, r3, #4
 800368c:	2b00      	cmp	r3, #0
 800368e:	d008      	beq.n	80036a2 <HAL_RCC_ClockConfig+0x16e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8003690:	4b19      	ldr	r3, [pc, #100]	; (80036f8 <HAL_RCC_ClockConfig+0x1c4>)
 8003692:	685b      	ldr	r3, [r3, #4]
 8003694:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 8003698:	687b      	ldr	r3, [r7, #4]
 800369a:	68db      	ldr	r3, [r3, #12]
 800369c:	4916      	ldr	r1, [pc, #88]	; (80036f8 <HAL_RCC_ClockConfig+0x1c4>)
 800369e:	4313      	orrs	r3, r2
 80036a0:	604b      	str	r3, [r1, #4]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80036a2:	687b      	ldr	r3, [r7, #4]
 80036a4:	681b      	ldr	r3, [r3, #0]
 80036a6:	f003 0308 	and.w	r3, r3, #8
 80036aa:	2b00      	cmp	r3, #0
 80036ac:	d009      	beq.n	80036c2 <HAL_RCC_ClockConfig+0x18e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 80036ae:	4b12      	ldr	r3, [pc, #72]	; (80036f8 <HAL_RCC_ClockConfig+0x1c4>)
 80036b0:	685b      	ldr	r3, [r3, #4]
 80036b2:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 80036b6:	687b      	ldr	r3, [r7, #4]
 80036b8:	691b      	ldr	r3, [r3, #16]
 80036ba:	00db      	lsls	r3, r3, #3
 80036bc:	490e      	ldr	r1, [pc, #56]	; (80036f8 <HAL_RCC_ClockConfig+0x1c4>)
 80036be:	4313      	orrs	r3, r2
 80036c0:	604b      	str	r3, [r1, #4]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 80036c2:	f000 f821 	bl	8003708 <HAL_RCC_GetSysClockFreq>
 80036c6:	4601      	mov	r1, r0
 80036c8:	4b0b      	ldr	r3, [pc, #44]	; (80036f8 <HAL_RCC_ClockConfig+0x1c4>)
 80036ca:	685b      	ldr	r3, [r3, #4]
 80036cc:	091b      	lsrs	r3, r3, #4
 80036ce:	f003 030f 	and.w	r3, r3, #15
 80036d2:	4a0a      	ldr	r2, [pc, #40]	; (80036fc <HAL_RCC_ClockConfig+0x1c8>)
 80036d4:	5cd3      	ldrb	r3, [r2, r3]
 80036d6:	fa21 f303 	lsr.w	r3, r1, r3
 80036da:	4a09      	ldr	r2, [pc, #36]	; (8003700 <HAL_RCC_ClockConfig+0x1cc>)
 80036dc:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick(uwTickPrio);
 80036de:	4b09      	ldr	r3, [pc, #36]	; (8003704 <HAL_RCC_ClockConfig+0x1d0>)
 80036e0:	681b      	ldr	r3, [r3, #0]
 80036e2:	4618      	mov	r0, r3
 80036e4:	f7fd f8ac 	bl	8000840 <HAL_InitTick>

  return HAL_OK;
 80036e8:	2300      	movs	r3, #0
}
 80036ea:	4618      	mov	r0, r3
 80036ec:	3710      	adds	r7, #16
 80036ee:	46bd      	mov	sp, r7
 80036f0:	bd80      	pop	{r7, pc}
 80036f2:	bf00      	nop
 80036f4:	40022000 	.word	0x40022000
 80036f8:	40021000 	.word	0x40021000
 80036fc:	08008450 	.word	0x08008450
 8003700:	20000004 	.word	0x20000004
 8003704:	20000008 	.word	0x20000008

08003708 <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8003708:	b490      	push	{r4, r7}
 800370a:	b08a      	sub	sp, #40	; 0x28
 800370c:	af00      	add	r7, sp, #0
#if defined(RCC_CFGR2_PREDIV1SRC)
  const uint8_t aPLLMULFactorTable[14] = {0, 0, 4, 5, 6, 7, 8, 9, 0, 0, 0, 0, 0, 13};
  const uint8_t aPredivFactorTable[16] = {1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16};
#else
  const uint8_t aPLLMULFactorTable[16] = {2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 16};
 800370e:	4b2a      	ldr	r3, [pc, #168]	; (80037b8 <HAL_RCC_GetSysClockFreq+0xb0>)
 8003710:	1d3c      	adds	r4, r7, #4
 8003712:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8003714:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
#if defined(RCC_CFGR2_PREDIV1)
  const uint8_t aPredivFactorTable[16] = {1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16};
#else
  const uint8_t aPredivFactorTable[2] = {1, 2};
 8003718:	4b28      	ldr	r3, [pc, #160]	; (80037bc <HAL_RCC_GetSysClockFreq+0xb4>)
 800371a:	881b      	ldrh	r3, [r3, #0]
 800371c:	803b      	strh	r3, [r7, #0]
#endif /*RCC_CFGR2_PREDIV1*/

#endif
  uint32_t tmpreg = 0U, prediv = 0U, pllclk = 0U, pllmul = 0U;
 800371e:	2300      	movs	r3, #0
 8003720:	61fb      	str	r3, [r7, #28]
 8003722:	2300      	movs	r3, #0
 8003724:	61bb      	str	r3, [r7, #24]
 8003726:	2300      	movs	r3, #0
 8003728:	627b      	str	r3, [r7, #36]	; 0x24
 800372a:	2300      	movs	r3, #0
 800372c:	617b      	str	r3, [r7, #20]
  uint32_t sysclockfreq = 0U;
 800372e:	2300      	movs	r3, #0
 8003730:	623b      	str	r3, [r7, #32]
#if defined(RCC_CFGR2_PREDIV1SRC)
  uint32_t prediv2 = 0U, pll2mul = 0U;
#endif /*RCC_CFGR2_PREDIV1SRC*/

  tmpreg = RCC->CFGR;
 8003732:	4b23      	ldr	r3, [pc, #140]	; (80037c0 <HAL_RCC_GetSysClockFreq+0xb8>)
 8003734:	685b      	ldr	r3, [r3, #4]
 8003736:	61fb      	str	r3, [r7, #28]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 8003738:	69fb      	ldr	r3, [r7, #28]
 800373a:	f003 030c 	and.w	r3, r3, #12
 800373e:	2b04      	cmp	r3, #4
 8003740:	d002      	beq.n	8003748 <HAL_RCC_GetSysClockFreq+0x40>
 8003742:	2b08      	cmp	r3, #8
 8003744:	d003      	beq.n	800374e <HAL_RCC_GetSysClockFreq+0x46>
 8003746:	e02d      	b.n	80037a4 <HAL_RCC_GetSysClockFreq+0x9c>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 8003748:	4b1e      	ldr	r3, [pc, #120]	; (80037c4 <HAL_RCC_GetSysClockFreq+0xbc>)
 800374a:	623b      	str	r3, [r7, #32]
      break;
 800374c:	e02d      	b.n	80037aa <HAL_RCC_GetSysClockFreq+0xa2>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMULL) >> RCC_CFGR_PLLMULL_Pos];
 800374e:	69fb      	ldr	r3, [r7, #28]
 8003750:	0c9b      	lsrs	r3, r3, #18
 8003752:	f003 030f 	and.w	r3, r3, #15
 8003756:	f107 0228 	add.w	r2, r7, #40	; 0x28
 800375a:	4413      	add	r3, r2
 800375c:	f813 3c24 	ldrb.w	r3, [r3, #-36]
 8003760:	617b      	str	r3, [r7, #20]
      if ((tmpreg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI_DIV2)
 8003762:	69fb      	ldr	r3, [r7, #28]
 8003764:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8003768:	2b00      	cmp	r3, #0
 800376a:	d013      	beq.n	8003794 <HAL_RCC_GetSysClockFreq+0x8c>
      {
#if defined(RCC_CFGR2_PREDIV1)
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR2 & RCC_CFGR2_PREDIV1) >> RCC_CFGR2_PREDIV1_Pos];
#else
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR & RCC_CFGR_PLLXTPRE) >> RCC_CFGR_PLLXTPRE_Pos];
 800376c:	4b14      	ldr	r3, [pc, #80]	; (80037c0 <HAL_RCC_GetSysClockFreq+0xb8>)
 800376e:	685b      	ldr	r3, [r3, #4]
 8003770:	0c5b      	lsrs	r3, r3, #17
 8003772:	f003 0301 	and.w	r3, r3, #1
 8003776:	f107 0228 	add.w	r2, r7, #40	; 0x28
 800377a:	4413      	add	r3, r2
 800377c:	f813 3c28 	ldrb.w	r3, [r3, #-40]
 8003780:	61bb      	str	r3, [r7, #24]
        {
          pllclk = pllclk / 2;
        }
#else
        /* HSE used as PLL clock source : PLLCLK = HSE/PREDIV1 * PLLMUL */
        pllclk = (uint32_t)((HSE_VALUE  * pllmul) / prediv);
 8003782:	697b      	ldr	r3, [r7, #20]
 8003784:	4a0f      	ldr	r2, [pc, #60]	; (80037c4 <HAL_RCC_GetSysClockFreq+0xbc>)
 8003786:	fb02 f203 	mul.w	r2, r2, r3
 800378a:	69bb      	ldr	r3, [r7, #24]
 800378c:	fbb2 f3f3 	udiv	r3, r2, r3
 8003790:	627b      	str	r3, [r7, #36]	; 0x24
 8003792:	e004      	b.n	800379e <HAL_RCC_GetSysClockFreq+0x96>
#endif /*RCC_CFGR2_PREDIV1SRC*/
      }
      else
      {
        /* HSI used as PLL clock source : PLLCLK = HSI/2 * PLLMUL */
        pllclk = (uint32_t)((HSI_VALUE >> 1) * pllmul);
 8003794:	697b      	ldr	r3, [r7, #20]
 8003796:	4a0c      	ldr	r2, [pc, #48]	; (80037c8 <HAL_RCC_GetSysClockFreq+0xc0>)
 8003798:	fb02 f303 	mul.w	r3, r2, r3
 800379c:	627b      	str	r3, [r7, #36]	; 0x24
      }
      sysclockfreq = pllclk;
 800379e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80037a0:	623b      	str	r3, [r7, #32]
      break;
 80037a2:	e002      	b.n	80037aa <HAL_RCC_GetSysClockFreq+0xa2>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    default: /* HSI used as system clock */
    {
      sysclockfreq = HSI_VALUE;
 80037a4:	4b07      	ldr	r3, [pc, #28]	; (80037c4 <HAL_RCC_GetSysClockFreq+0xbc>)
 80037a6:	623b      	str	r3, [r7, #32]
      break;
 80037a8:	bf00      	nop
    }
  }
  return sysclockfreq;
 80037aa:	6a3b      	ldr	r3, [r7, #32]
}
 80037ac:	4618      	mov	r0, r3
 80037ae:	3728      	adds	r7, #40	; 0x28
 80037b0:	46bd      	mov	sp, r7
 80037b2:	bc90      	pop	{r4, r7}
 80037b4:	4770      	bx	lr
 80037b6:	bf00      	nop
 80037b8:	080083f4 	.word	0x080083f4
 80037bc:	08008404 	.word	0x08008404
 80037c0:	40021000 	.word	0x40021000
 80037c4:	007a1200 	.word	0x007a1200
 80037c8:	003d0900 	.word	0x003d0900

080037cc <RCC_Delay>:
  * @brief  This function provides delay (in milliseconds) based on CPU cycles method.
  * @param  mdelay: specifies the delay time length, in milliseconds.
  * @retval None
  */
static void RCC_Delay(uint32_t mdelay)
{
 80037cc:	b480      	push	{r7}
 80037ce:	b085      	sub	sp, #20
 80037d0:	af00      	add	r7, sp, #0
 80037d2:	6078      	str	r0, [r7, #4]
  __IO uint32_t Delay = mdelay * (SystemCoreClock / 8U / 1000U);
 80037d4:	4b0a      	ldr	r3, [pc, #40]	; (8003800 <RCC_Delay+0x34>)
 80037d6:	681b      	ldr	r3, [r3, #0]
 80037d8:	4a0a      	ldr	r2, [pc, #40]	; (8003804 <RCC_Delay+0x38>)
 80037da:	fba2 2303 	umull	r2, r3, r2, r3
 80037de:	0a5b      	lsrs	r3, r3, #9
 80037e0:	687a      	ldr	r2, [r7, #4]
 80037e2:	fb02 f303 	mul.w	r3, r2, r3
 80037e6:	60fb      	str	r3, [r7, #12]
  do
  {
    __NOP();
 80037e8:	bf00      	nop
  }
  while (Delay --);
 80037ea:	68fb      	ldr	r3, [r7, #12]
 80037ec:	1e5a      	subs	r2, r3, #1
 80037ee:	60fa      	str	r2, [r7, #12]
 80037f0:	2b00      	cmp	r3, #0
 80037f2:	d1f9      	bne.n	80037e8 <RCC_Delay+0x1c>
}
 80037f4:	bf00      	nop
 80037f6:	3714      	adds	r7, #20
 80037f8:	46bd      	mov	sp, r7
 80037fa:	bc80      	pop	{r7}
 80037fc:	4770      	bx	lr
 80037fe:	bf00      	nop
 8003800:	20000004 	.word	0x20000004
 8003804:	10624dd3 	.word	0x10624dd3

08003808 <HAL_RCCEx_PeriphCLKConfig>:
  *         manually disable it.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8003808:	b580      	push	{r7, lr}
 800380a:	b086      	sub	sp, #24
 800380c:	af00      	add	r7, sp, #0
 800380e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U, temp_reg = 0U;
 8003810:	2300      	movs	r3, #0
 8003812:	613b      	str	r3, [r7, #16]
 8003814:	2300      	movs	r3, #0
 8003816:	60fb      	str	r3, [r7, #12]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*------------------------------- RTC/LCD Configuration ------------------------*/
  if ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC))
 8003818:	687b      	ldr	r3, [r7, #4]
 800381a:	681b      	ldr	r3, [r3, #0]
 800381c:	f003 0301 	and.w	r3, r3, #1
 8003820:	2b00      	cmp	r3, #0
 8003822:	d07d      	beq.n	8003920 <HAL_RCCEx_PeriphCLKConfig+0x118>
  {
    /* check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    FlagStatus       pwrclkchanged = RESET;
 8003824:	2300      	movs	r3, #0
 8003826:	75fb      	strb	r3, [r7, #23]

    /* As soon as function is called to change RTC clock source, activation of the
       power domain is done. */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 8003828:	4b4f      	ldr	r3, [pc, #316]	; (8003968 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 800382a:	69db      	ldr	r3, [r3, #28]
 800382c:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003830:	2b00      	cmp	r3, #0
 8003832:	d10d      	bne.n	8003850 <HAL_RCCEx_PeriphCLKConfig+0x48>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8003834:	4b4c      	ldr	r3, [pc, #304]	; (8003968 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8003836:	69db      	ldr	r3, [r3, #28]
 8003838:	4a4b      	ldr	r2, [pc, #300]	; (8003968 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 800383a:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800383e:	61d3      	str	r3, [r2, #28]
 8003840:	4b49      	ldr	r3, [pc, #292]	; (8003968 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8003842:	69db      	ldr	r3, [r3, #28]
 8003844:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003848:	60bb      	str	r3, [r7, #8]
 800384a:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 800384c:	2301      	movs	r3, #1
 800384e:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003850:	4b46      	ldr	r3, [pc, #280]	; (800396c <HAL_RCCEx_PeriphCLKConfig+0x164>)
 8003852:	681b      	ldr	r3, [r3, #0]
 8003854:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003858:	2b00      	cmp	r3, #0
 800385a:	d118      	bne.n	800388e <HAL_RCCEx_PeriphCLKConfig+0x86>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 800385c:	4b43      	ldr	r3, [pc, #268]	; (800396c <HAL_RCCEx_PeriphCLKConfig+0x164>)
 800385e:	681b      	ldr	r3, [r3, #0]
 8003860:	4a42      	ldr	r2, [pc, #264]	; (800396c <HAL_RCCEx_PeriphCLKConfig+0x164>)
 8003862:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8003866:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8003868:	f7fd f82c 	bl	80008c4 <HAL_GetTick>
 800386c:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800386e:	e008      	b.n	8003882 <HAL_RCCEx_PeriphCLKConfig+0x7a>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8003870:	f7fd f828 	bl	80008c4 <HAL_GetTick>
 8003874:	4602      	mov	r2, r0
 8003876:	693b      	ldr	r3, [r7, #16]
 8003878:	1ad3      	subs	r3, r2, r3
 800387a:	2b64      	cmp	r3, #100	; 0x64
 800387c:	d901      	bls.n	8003882 <HAL_RCCEx_PeriphCLKConfig+0x7a>
        {
          return HAL_TIMEOUT;
 800387e:	2303      	movs	r3, #3
 8003880:	e06d      	b.n	800395e <HAL_RCCEx_PeriphCLKConfig+0x156>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003882:	4b3a      	ldr	r3, [pc, #232]	; (800396c <HAL_RCCEx_PeriphCLKConfig+0x164>)
 8003884:	681b      	ldr	r3, [r3, #0]
 8003886:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800388a:	2b00      	cmp	r3, #0
 800388c:	d0f0      	beq.n	8003870 <HAL_RCCEx_PeriphCLKConfig+0x68>
        }
      }
    }

    /* Reset the Backup domain only if the RTC Clock source selection is modified from reset value */
    temp_reg = (RCC->BDCR & RCC_BDCR_RTCSEL);
 800388e:	4b36      	ldr	r3, [pc, #216]	; (8003968 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8003890:	6a1b      	ldr	r3, [r3, #32]
 8003892:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8003896:	60fb      	str	r3, [r7, #12]
    if ((temp_reg != 0x00000000U) && (temp_reg != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 8003898:	68fb      	ldr	r3, [r7, #12]
 800389a:	2b00      	cmp	r3, #0
 800389c:	d02e      	beq.n	80038fc <HAL_RCCEx_PeriphCLKConfig+0xf4>
 800389e:	687b      	ldr	r3, [r7, #4]
 80038a0:	685b      	ldr	r3, [r3, #4]
 80038a2:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80038a6:	68fa      	ldr	r2, [r7, #12]
 80038a8:	429a      	cmp	r2, r3
 80038aa:	d027      	beq.n	80038fc <HAL_RCCEx_PeriphCLKConfig+0xf4>
    {
      /* Store the content of BDCR register before the reset of Backup Domain */
      temp_reg = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 80038ac:	4b2e      	ldr	r3, [pc, #184]	; (8003968 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 80038ae:	6a1b      	ldr	r3, [r3, #32]
 80038b0:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80038b4:	60fb      	str	r3, [r7, #12]
      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 80038b6:	4b2e      	ldr	r3, [pc, #184]	; (8003970 <HAL_RCCEx_PeriphCLKConfig+0x168>)
 80038b8:	2201      	movs	r2, #1
 80038ba:	601a      	str	r2, [r3, #0]
      __HAL_RCC_BACKUPRESET_RELEASE();
 80038bc:	4b2c      	ldr	r3, [pc, #176]	; (8003970 <HAL_RCCEx_PeriphCLKConfig+0x168>)
 80038be:	2200      	movs	r2, #0
 80038c0:	601a      	str	r2, [r3, #0]
      /* Restore the Content of BDCR register */
      RCC->BDCR = temp_reg;
 80038c2:	4a29      	ldr	r2, [pc, #164]	; (8003968 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 80038c4:	68fb      	ldr	r3, [r7, #12]
 80038c6:	6213      	str	r3, [r2, #32]

      /* Wait for LSERDY if LSE was enabled */
      if (HAL_IS_BIT_SET(temp_reg, RCC_BDCR_LSEON))
 80038c8:	68fb      	ldr	r3, [r7, #12]
 80038ca:	f003 0301 	and.w	r3, r3, #1
 80038ce:	2b00      	cmp	r3, #0
 80038d0:	d014      	beq.n	80038fc <HAL_RCCEx_PeriphCLKConfig+0xf4>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80038d2:	f7fc fff7 	bl	80008c4 <HAL_GetTick>
 80038d6:	6138      	str	r0, [r7, #16]

        /* Wait till LSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80038d8:	e00a      	b.n	80038f0 <HAL_RCCEx_PeriphCLKConfig+0xe8>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80038da:	f7fc fff3 	bl	80008c4 <HAL_GetTick>
 80038de:	4602      	mov	r2, r0
 80038e0:	693b      	ldr	r3, [r7, #16]
 80038e2:	1ad3      	subs	r3, r2, r3
 80038e4:	f241 3288 	movw	r2, #5000	; 0x1388
 80038e8:	4293      	cmp	r3, r2
 80038ea:	d901      	bls.n	80038f0 <HAL_RCCEx_PeriphCLKConfig+0xe8>
          {
            return HAL_TIMEOUT;
 80038ec:	2303      	movs	r3, #3
 80038ee:	e036      	b.n	800395e <HAL_RCCEx_PeriphCLKConfig+0x156>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80038f0:	4b1d      	ldr	r3, [pc, #116]	; (8003968 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 80038f2:	6a1b      	ldr	r3, [r3, #32]
 80038f4:	f003 0302 	and.w	r3, r3, #2
 80038f8:	2b00      	cmp	r3, #0
 80038fa:	d0ee      	beq.n	80038da <HAL_RCCEx_PeriphCLKConfig+0xd2>
          }
        }
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 80038fc:	4b1a      	ldr	r3, [pc, #104]	; (8003968 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 80038fe:	6a1b      	ldr	r3, [r3, #32]
 8003900:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8003904:	687b      	ldr	r3, [r7, #4]
 8003906:	685b      	ldr	r3, [r3, #4]
 8003908:	4917      	ldr	r1, [pc, #92]	; (8003968 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 800390a:	4313      	orrs	r3, r2
 800390c:	620b      	str	r3, [r1, #32]

    /* Require to disable power clock if necessary */
    if (pwrclkchanged == SET)
 800390e:	7dfb      	ldrb	r3, [r7, #23]
 8003910:	2b01      	cmp	r3, #1
 8003912:	d105      	bne.n	8003920 <HAL_RCCEx_PeriphCLKConfig+0x118>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8003914:	4b14      	ldr	r3, [pc, #80]	; (8003968 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8003916:	69db      	ldr	r3, [r3, #28]
 8003918:	4a13      	ldr	r2, [pc, #76]	; (8003968 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 800391a:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 800391e:	61d3      	str	r3, [r2, #28]
    }
  }

  /*------------------------------ ADC clock Configuration ------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 8003920:	687b      	ldr	r3, [r7, #4]
 8003922:	681b      	ldr	r3, [r3, #0]
 8003924:	f003 0302 	and.w	r3, r3, #2
 8003928:	2b00      	cmp	r3, #0
 800392a:	d008      	beq.n	800393e <HAL_RCCEx_PeriphCLKConfig+0x136>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADCPLLCLK_DIV(PeriphClkInit->AdcClockSelection));

    /* Configure the ADC clock source */
    __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 800392c:	4b0e      	ldr	r3, [pc, #56]	; (8003968 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 800392e:	685b      	ldr	r3, [r3, #4]
 8003930:	f423 4240 	bic.w	r2, r3, #49152	; 0xc000
 8003934:	687b      	ldr	r3, [r7, #4]
 8003936:	689b      	ldr	r3, [r3, #8]
 8003938:	490b      	ldr	r1, [pc, #44]	; (8003968 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 800393a:	4313      	orrs	r3, r2
 800393c:	604b      	str	r3, [r1, #4]

#if defined(STM32F102x6) || defined(STM32F102xB) || defined(STM32F103x6)\
 || defined(STM32F103xB) || defined(STM32F103xE) || defined(STM32F103xG)\
 || defined(STM32F105xC) || defined(STM32F107xC)
  /*------------------------------ USB clock Configuration ------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == RCC_PERIPHCLK_USB)
 800393e:	687b      	ldr	r3, [r7, #4]
 8003940:	681b      	ldr	r3, [r3, #0]
 8003942:	f003 0310 	and.w	r3, r3, #16
 8003946:	2b00      	cmp	r3, #0
 8003948:	d008      	beq.n	800395c <HAL_RCCEx_PeriphCLKConfig+0x154>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USBPLLCLK_DIV(PeriphClkInit->UsbClockSelection));

    /* Configure the USB clock source */
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 800394a:	4b07      	ldr	r3, [pc, #28]	; (8003968 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 800394c:	685b      	ldr	r3, [r3, #4]
 800394e:	f423 0280 	bic.w	r2, r3, #4194304	; 0x400000
 8003952:	687b      	ldr	r3, [r7, #4]
 8003954:	68db      	ldr	r3, [r3, #12]
 8003956:	4904      	ldr	r1, [pc, #16]	; (8003968 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8003958:	4313      	orrs	r3, r2
 800395a:	604b      	str	r3, [r1, #4]
  }
#endif /* STM32F102x6 || STM32F102xB || STM32F103x6 || STM32F103xB || STM32F103xE || STM32F103xG || STM32F105xC || STM32F107xC */

  return HAL_OK;
 800395c:	2300      	movs	r3, #0
}
 800395e:	4618      	mov	r0, r3
 8003960:	3718      	adds	r7, #24
 8003962:	46bd      	mov	sp, r7
 8003964:	bd80      	pop	{r7, pc}
 8003966:	bf00      	nop
 8003968:	40021000 	.word	0x40021000
 800396c:	40007000 	.word	0x40007000
 8003970:	42420440 	.word	0x42420440

08003974 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8003974:	b580      	push	{r7, lr}
 8003976:	b082      	sub	sp, #8
 8003978:	af00      	add	r7, sp, #0
 800397a:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 800397c:	687b      	ldr	r3, [r7, #4]
 800397e:	2b00      	cmp	r3, #0
 8003980:	d101      	bne.n	8003986 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8003982:	2301      	movs	r3, #1
 8003984:	e041      	b.n	8003a0a <HAL_TIM_Base_Init+0x96>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8003986:	687b      	ldr	r3, [r7, #4]
 8003988:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800398c:	b2db      	uxtb	r3, r3
 800398e:	2b00      	cmp	r3, #0
 8003990:	d106      	bne.n	80039a0 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8003992:	687b      	ldr	r3, [r7, #4]
 8003994:	2200      	movs	r2, #0
 8003996:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 800399a:	6878      	ldr	r0, [r7, #4]
 800399c:	f7fc fea4 	bl	80006e8 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80039a0:	687b      	ldr	r3, [r7, #4]
 80039a2:	2202      	movs	r2, #2
 80039a4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 80039a8:	687b      	ldr	r3, [r7, #4]
 80039aa:	681a      	ldr	r2, [r3, #0]
 80039ac:	687b      	ldr	r3, [r7, #4]
 80039ae:	3304      	adds	r3, #4
 80039b0:	4619      	mov	r1, r3
 80039b2:	4610      	mov	r0, r2
 80039b4:	f000 fa8a 	bl	8003ecc <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 80039b8:	687b      	ldr	r3, [r7, #4]
 80039ba:	2201      	movs	r2, #1
 80039bc:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80039c0:	687b      	ldr	r3, [r7, #4]
 80039c2:	2201      	movs	r2, #1
 80039c4:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 80039c8:	687b      	ldr	r3, [r7, #4]
 80039ca:	2201      	movs	r2, #1
 80039cc:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 80039d0:	687b      	ldr	r3, [r7, #4]
 80039d2:	2201      	movs	r2, #1
 80039d4:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 80039d8:	687b      	ldr	r3, [r7, #4]
 80039da:	2201      	movs	r2, #1
 80039dc:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80039e0:	687b      	ldr	r3, [r7, #4]
 80039e2:	2201      	movs	r2, #1
 80039e4:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 80039e8:	687b      	ldr	r3, [r7, #4]
 80039ea:	2201      	movs	r2, #1
 80039ec:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 80039f0:	687b      	ldr	r3, [r7, #4]
 80039f2:	2201      	movs	r2, #1
 80039f4:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 80039f8:	687b      	ldr	r3, [r7, #4]
 80039fa:	2201      	movs	r2, #1
 80039fc:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8003a00:	687b      	ldr	r3, [r7, #4]
 8003a02:	2201      	movs	r2, #1
 8003a04:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8003a08:	2300      	movs	r3, #0
}
 8003a0a:	4618      	mov	r0, r3
 8003a0c:	3708      	adds	r7, #8
 8003a0e:	46bd      	mov	sp, r7
 8003a10:	bd80      	pop	{r7, pc}

08003a12 <HAL_TIM_Base_Stop>:
  * @brief  Stops the TIM Base generation.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Stop(TIM_HandleTypeDef *htim)
{
 8003a12:	b480      	push	{r7}
 8003a14:	b083      	sub	sp, #12
 8003a16:	af00      	add	r7, sp, #0
 8003a18:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Disable the Peripheral */
  __HAL_TIM_DISABLE(htim);
 8003a1a:	687b      	ldr	r3, [r7, #4]
 8003a1c:	681b      	ldr	r3, [r3, #0]
 8003a1e:	6a1a      	ldr	r2, [r3, #32]
 8003a20:	f241 1311 	movw	r3, #4369	; 0x1111
 8003a24:	4013      	ands	r3, r2
 8003a26:	2b00      	cmp	r3, #0
 8003a28:	d10f      	bne.n	8003a4a <HAL_TIM_Base_Stop+0x38>
 8003a2a:	687b      	ldr	r3, [r7, #4]
 8003a2c:	681b      	ldr	r3, [r3, #0]
 8003a2e:	6a1a      	ldr	r2, [r3, #32]
 8003a30:	f240 4344 	movw	r3, #1092	; 0x444
 8003a34:	4013      	ands	r3, r2
 8003a36:	2b00      	cmp	r3, #0
 8003a38:	d107      	bne.n	8003a4a <HAL_TIM_Base_Stop+0x38>
 8003a3a:	687b      	ldr	r3, [r7, #4]
 8003a3c:	681b      	ldr	r3, [r3, #0]
 8003a3e:	681a      	ldr	r2, [r3, #0]
 8003a40:	687b      	ldr	r3, [r7, #4]
 8003a42:	681b      	ldr	r3, [r3, #0]
 8003a44:	f022 0201 	bic.w	r2, r2, #1
 8003a48:	601a      	str	r2, [r3, #0]

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_READY;
 8003a4a:	687b      	ldr	r3, [r7, #4]
 8003a4c:	2201      	movs	r2, #1
 8003a4e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Return function status */
  return HAL_OK;
 8003a52:	2300      	movs	r3, #0
}
 8003a54:	4618      	mov	r0, r3
 8003a56:	370c      	adds	r7, #12
 8003a58:	46bd      	mov	sp, r7
 8003a5a:	bc80      	pop	{r7}
 8003a5c:	4770      	bx	lr
	...

08003a60 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 8003a60:	b480      	push	{r7}
 8003a62:	b085      	sub	sp, #20
 8003a64:	af00      	add	r7, sp, #0
 8003a66:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8003a68:	687b      	ldr	r3, [r7, #4]
 8003a6a:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8003a6e:	b2db      	uxtb	r3, r3
 8003a70:	2b01      	cmp	r3, #1
 8003a72:	d001      	beq.n	8003a78 <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 8003a74:	2301      	movs	r3, #1
 8003a76:	e03a      	b.n	8003aee <HAL_TIM_Base_Start_IT+0x8e>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8003a78:	687b      	ldr	r3, [r7, #4]
 8003a7a:	2202      	movs	r2, #2
 8003a7c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8003a80:	687b      	ldr	r3, [r7, #4]
 8003a82:	681b      	ldr	r3, [r3, #0]
 8003a84:	68da      	ldr	r2, [r3, #12]
 8003a86:	687b      	ldr	r3, [r7, #4]
 8003a88:	681b      	ldr	r3, [r3, #0]
 8003a8a:	f042 0201 	orr.w	r2, r2, #1
 8003a8e:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8003a90:	687b      	ldr	r3, [r7, #4]
 8003a92:	681b      	ldr	r3, [r3, #0]
 8003a94:	4a18      	ldr	r2, [pc, #96]	; (8003af8 <HAL_TIM_Base_Start_IT+0x98>)
 8003a96:	4293      	cmp	r3, r2
 8003a98:	d00e      	beq.n	8003ab8 <HAL_TIM_Base_Start_IT+0x58>
 8003a9a:	687b      	ldr	r3, [r7, #4]
 8003a9c:	681b      	ldr	r3, [r3, #0]
 8003a9e:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8003aa2:	d009      	beq.n	8003ab8 <HAL_TIM_Base_Start_IT+0x58>
 8003aa4:	687b      	ldr	r3, [r7, #4]
 8003aa6:	681b      	ldr	r3, [r3, #0]
 8003aa8:	4a14      	ldr	r2, [pc, #80]	; (8003afc <HAL_TIM_Base_Start_IT+0x9c>)
 8003aaa:	4293      	cmp	r3, r2
 8003aac:	d004      	beq.n	8003ab8 <HAL_TIM_Base_Start_IT+0x58>
 8003aae:	687b      	ldr	r3, [r7, #4]
 8003ab0:	681b      	ldr	r3, [r3, #0]
 8003ab2:	4a13      	ldr	r2, [pc, #76]	; (8003b00 <HAL_TIM_Base_Start_IT+0xa0>)
 8003ab4:	4293      	cmp	r3, r2
 8003ab6:	d111      	bne.n	8003adc <HAL_TIM_Base_Start_IT+0x7c>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8003ab8:	687b      	ldr	r3, [r7, #4]
 8003aba:	681b      	ldr	r3, [r3, #0]
 8003abc:	689b      	ldr	r3, [r3, #8]
 8003abe:	f003 0307 	and.w	r3, r3, #7
 8003ac2:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8003ac4:	68fb      	ldr	r3, [r7, #12]
 8003ac6:	2b06      	cmp	r3, #6
 8003ac8:	d010      	beq.n	8003aec <HAL_TIM_Base_Start_IT+0x8c>
    {
      __HAL_TIM_ENABLE(htim);
 8003aca:	687b      	ldr	r3, [r7, #4]
 8003acc:	681b      	ldr	r3, [r3, #0]
 8003ace:	681a      	ldr	r2, [r3, #0]
 8003ad0:	687b      	ldr	r3, [r7, #4]
 8003ad2:	681b      	ldr	r3, [r3, #0]
 8003ad4:	f042 0201 	orr.w	r2, r2, #1
 8003ad8:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8003ada:	e007      	b.n	8003aec <HAL_TIM_Base_Start_IT+0x8c>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8003adc:	687b      	ldr	r3, [r7, #4]
 8003ade:	681b      	ldr	r3, [r3, #0]
 8003ae0:	681a      	ldr	r2, [r3, #0]
 8003ae2:	687b      	ldr	r3, [r7, #4]
 8003ae4:	681b      	ldr	r3, [r3, #0]
 8003ae6:	f042 0201 	orr.w	r2, r2, #1
 8003aea:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8003aec:	2300      	movs	r3, #0
}
 8003aee:	4618      	mov	r0, r3
 8003af0:	3714      	adds	r7, #20
 8003af2:	46bd      	mov	sp, r7
 8003af4:	bc80      	pop	{r7}
 8003af6:	4770      	bx	lr
 8003af8:	40012c00 	.word	0x40012c00
 8003afc:	40000400 	.word	0x40000400
 8003b00:	40000800 	.word	0x40000800

08003b04 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8003b04:	b580      	push	{r7, lr}
 8003b06:	b082      	sub	sp, #8
 8003b08:	af00      	add	r7, sp, #0
 8003b0a:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 8003b0c:	687b      	ldr	r3, [r7, #4]
 8003b0e:	681b      	ldr	r3, [r3, #0]
 8003b10:	691b      	ldr	r3, [r3, #16]
 8003b12:	f003 0302 	and.w	r3, r3, #2
 8003b16:	2b02      	cmp	r3, #2
 8003b18:	d122      	bne.n	8003b60 <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 8003b1a:	687b      	ldr	r3, [r7, #4]
 8003b1c:	681b      	ldr	r3, [r3, #0]
 8003b1e:	68db      	ldr	r3, [r3, #12]
 8003b20:	f003 0302 	and.w	r3, r3, #2
 8003b24:	2b02      	cmp	r3, #2
 8003b26:	d11b      	bne.n	8003b60 <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 8003b28:	687b      	ldr	r3, [r7, #4]
 8003b2a:	681b      	ldr	r3, [r3, #0]
 8003b2c:	f06f 0202 	mvn.w	r2, #2
 8003b30:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8003b32:	687b      	ldr	r3, [r7, #4]
 8003b34:	2201      	movs	r2, #1
 8003b36:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8003b38:	687b      	ldr	r3, [r7, #4]
 8003b3a:	681b      	ldr	r3, [r3, #0]
 8003b3c:	699b      	ldr	r3, [r3, #24]
 8003b3e:	f003 0303 	and.w	r3, r3, #3
 8003b42:	2b00      	cmp	r3, #0
 8003b44:	d003      	beq.n	8003b4e <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 8003b46:	6878      	ldr	r0, [r7, #4]
 8003b48:	f000 f9a4 	bl	8003e94 <HAL_TIM_IC_CaptureCallback>
 8003b4c:	e005      	b.n	8003b5a <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8003b4e:	6878      	ldr	r0, [r7, #4]
 8003b50:	f000 f997 	bl	8003e82 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8003b54:	6878      	ldr	r0, [r7, #4]
 8003b56:	f000 f9a6 	bl	8003ea6 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8003b5a:	687b      	ldr	r3, [r7, #4]
 8003b5c:	2200      	movs	r2, #0
 8003b5e:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 8003b60:	687b      	ldr	r3, [r7, #4]
 8003b62:	681b      	ldr	r3, [r3, #0]
 8003b64:	691b      	ldr	r3, [r3, #16]
 8003b66:	f003 0304 	and.w	r3, r3, #4
 8003b6a:	2b04      	cmp	r3, #4
 8003b6c:	d122      	bne.n	8003bb4 <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 8003b6e:	687b      	ldr	r3, [r7, #4]
 8003b70:	681b      	ldr	r3, [r3, #0]
 8003b72:	68db      	ldr	r3, [r3, #12]
 8003b74:	f003 0304 	and.w	r3, r3, #4
 8003b78:	2b04      	cmp	r3, #4
 8003b7a:	d11b      	bne.n	8003bb4 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 8003b7c:	687b      	ldr	r3, [r7, #4]
 8003b7e:	681b      	ldr	r3, [r3, #0]
 8003b80:	f06f 0204 	mvn.w	r2, #4
 8003b84:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8003b86:	687b      	ldr	r3, [r7, #4]
 8003b88:	2202      	movs	r2, #2
 8003b8a:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8003b8c:	687b      	ldr	r3, [r7, #4]
 8003b8e:	681b      	ldr	r3, [r3, #0]
 8003b90:	699b      	ldr	r3, [r3, #24]
 8003b92:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8003b96:	2b00      	cmp	r3, #0
 8003b98:	d003      	beq.n	8003ba2 <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8003b9a:	6878      	ldr	r0, [r7, #4]
 8003b9c:	f000 f97a 	bl	8003e94 <HAL_TIM_IC_CaptureCallback>
 8003ba0:	e005      	b.n	8003bae <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8003ba2:	6878      	ldr	r0, [r7, #4]
 8003ba4:	f000 f96d 	bl	8003e82 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8003ba8:	6878      	ldr	r0, [r7, #4]
 8003baa:	f000 f97c 	bl	8003ea6 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8003bae:	687b      	ldr	r3, [r7, #4]
 8003bb0:	2200      	movs	r2, #0
 8003bb2:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 8003bb4:	687b      	ldr	r3, [r7, #4]
 8003bb6:	681b      	ldr	r3, [r3, #0]
 8003bb8:	691b      	ldr	r3, [r3, #16]
 8003bba:	f003 0308 	and.w	r3, r3, #8
 8003bbe:	2b08      	cmp	r3, #8
 8003bc0:	d122      	bne.n	8003c08 <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 8003bc2:	687b      	ldr	r3, [r7, #4]
 8003bc4:	681b      	ldr	r3, [r3, #0]
 8003bc6:	68db      	ldr	r3, [r3, #12]
 8003bc8:	f003 0308 	and.w	r3, r3, #8
 8003bcc:	2b08      	cmp	r3, #8
 8003bce:	d11b      	bne.n	8003c08 <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 8003bd0:	687b      	ldr	r3, [r7, #4]
 8003bd2:	681b      	ldr	r3, [r3, #0]
 8003bd4:	f06f 0208 	mvn.w	r2, #8
 8003bd8:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8003bda:	687b      	ldr	r3, [r7, #4]
 8003bdc:	2204      	movs	r2, #4
 8003bde:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8003be0:	687b      	ldr	r3, [r7, #4]
 8003be2:	681b      	ldr	r3, [r3, #0]
 8003be4:	69db      	ldr	r3, [r3, #28]
 8003be6:	f003 0303 	and.w	r3, r3, #3
 8003bea:	2b00      	cmp	r3, #0
 8003bec:	d003      	beq.n	8003bf6 <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8003bee:	6878      	ldr	r0, [r7, #4]
 8003bf0:	f000 f950 	bl	8003e94 <HAL_TIM_IC_CaptureCallback>
 8003bf4:	e005      	b.n	8003c02 <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8003bf6:	6878      	ldr	r0, [r7, #4]
 8003bf8:	f000 f943 	bl	8003e82 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8003bfc:	6878      	ldr	r0, [r7, #4]
 8003bfe:	f000 f952 	bl	8003ea6 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8003c02:	687b      	ldr	r3, [r7, #4]
 8003c04:	2200      	movs	r2, #0
 8003c06:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 8003c08:	687b      	ldr	r3, [r7, #4]
 8003c0a:	681b      	ldr	r3, [r3, #0]
 8003c0c:	691b      	ldr	r3, [r3, #16]
 8003c0e:	f003 0310 	and.w	r3, r3, #16
 8003c12:	2b10      	cmp	r3, #16
 8003c14:	d122      	bne.n	8003c5c <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 8003c16:	687b      	ldr	r3, [r7, #4]
 8003c18:	681b      	ldr	r3, [r3, #0]
 8003c1a:	68db      	ldr	r3, [r3, #12]
 8003c1c:	f003 0310 	and.w	r3, r3, #16
 8003c20:	2b10      	cmp	r3, #16
 8003c22:	d11b      	bne.n	8003c5c <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 8003c24:	687b      	ldr	r3, [r7, #4]
 8003c26:	681b      	ldr	r3, [r3, #0]
 8003c28:	f06f 0210 	mvn.w	r2, #16
 8003c2c:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8003c2e:	687b      	ldr	r3, [r7, #4]
 8003c30:	2208      	movs	r2, #8
 8003c32:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8003c34:	687b      	ldr	r3, [r7, #4]
 8003c36:	681b      	ldr	r3, [r3, #0]
 8003c38:	69db      	ldr	r3, [r3, #28]
 8003c3a:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8003c3e:	2b00      	cmp	r3, #0
 8003c40:	d003      	beq.n	8003c4a <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8003c42:	6878      	ldr	r0, [r7, #4]
 8003c44:	f000 f926 	bl	8003e94 <HAL_TIM_IC_CaptureCallback>
 8003c48:	e005      	b.n	8003c56 <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8003c4a:	6878      	ldr	r0, [r7, #4]
 8003c4c:	f000 f919 	bl	8003e82 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8003c50:	6878      	ldr	r0, [r7, #4]
 8003c52:	f000 f928 	bl	8003ea6 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8003c56:	687b      	ldr	r3, [r7, #4]
 8003c58:	2200      	movs	r2, #0
 8003c5a:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 8003c5c:	687b      	ldr	r3, [r7, #4]
 8003c5e:	681b      	ldr	r3, [r3, #0]
 8003c60:	691b      	ldr	r3, [r3, #16]
 8003c62:	f003 0301 	and.w	r3, r3, #1
 8003c66:	2b01      	cmp	r3, #1
 8003c68:	d10e      	bne.n	8003c88 <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 8003c6a:	687b      	ldr	r3, [r7, #4]
 8003c6c:	681b      	ldr	r3, [r3, #0]
 8003c6e:	68db      	ldr	r3, [r3, #12]
 8003c70:	f003 0301 	and.w	r3, r3, #1
 8003c74:	2b01      	cmp	r3, #1
 8003c76:	d107      	bne.n	8003c88 <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 8003c78:	687b      	ldr	r3, [r7, #4]
 8003c7a:	681b      	ldr	r3, [r3, #0]
 8003c7c:	f06f 0201 	mvn.w	r2, #1
 8003c80:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 8003c82:	6878      	ldr	r0, [r7, #4]
 8003c84:	f7fc fa9c 	bl	80001c0 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 8003c88:	687b      	ldr	r3, [r7, #4]
 8003c8a:	681b      	ldr	r3, [r3, #0]
 8003c8c:	691b      	ldr	r3, [r3, #16]
 8003c8e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003c92:	2b80      	cmp	r3, #128	; 0x80
 8003c94:	d10e      	bne.n	8003cb4 <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 8003c96:	687b      	ldr	r3, [r7, #4]
 8003c98:	681b      	ldr	r3, [r3, #0]
 8003c9a:	68db      	ldr	r3, [r3, #12]
 8003c9c:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003ca0:	2b80      	cmp	r3, #128	; 0x80
 8003ca2:	d107      	bne.n	8003cb4 <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 8003ca4:	687b      	ldr	r3, [r7, #4]
 8003ca6:	681b      	ldr	r3, [r3, #0]
 8003ca8:	f06f 0280 	mvn.w	r2, #128	; 0x80
 8003cac:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 8003cae:	6878      	ldr	r0, [r7, #4]
 8003cb0:	f000 fa6b 	bl	800418a <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 8003cb4:	687b      	ldr	r3, [r7, #4]
 8003cb6:	681b      	ldr	r3, [r3, #0]
 8003cb8:	691b      	ldr	r3, [r3, #16]
 8003cba:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003cbe:	2b40      	cmp	r3, #64	; 0x40
 8003cc0:	d10e      	bne.n	8003ce0 <HAL_TIM_IRQHandler+0x1dc>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 8003cc2:	687b      	ldr	r3, [r7, #4]
 8003cc4:	681b      	ldr	r3, [r3, #0]
 8003cc6:	68db      	ldr	r3, [r3, #12]
 8003cc8:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003ccc:	2b40      	cmp	r3, #64	; 0x40
 8003cce:	d107      	bne.n	8003ce0 <HAL_TIM_IRQHandler+0x1dc>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 8003cd0:	687b      	ldr	r3, [r7, #4]
 8003cd2:	681b      	ldr	r3, [r3, #0]
 8003cd4:	f06f 0240 	mvn.w	r2, #64	; 0x40
 8003cd8:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 8003cda:	6878      	ldr	r0, [r7, #4]
 8003cdc:	f000 f8ec 	bl	8003eb8 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 8003ce0:	687b      	ldr	r3, [r7, #4]
 8003ce2:	681b      	ldr	r3, [r3, #0]
 8003ce4:	691b      	ldr	r3, [r3, #16]
 8003ce6:	f003 0320 	and.w	r3, r3, #32
 8003cea:	2b20      	cmp	r3, #32
 8003cec:	d10e      	bne.n	8003d0c <HAL_TIM_IRQHandler+0x208>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 8003cee:	687b      	ldr	r3, [r7, #4]
 8003cf0:	681b      	ldr	r3, [r3, #0]
 8003cf2:	68db      	ldr	r3, [r3, #12]
 8003cf4:	f003 0320 	and.w	r3, r3, #32
 8003cf8:	2b20      	cmp	r3, #32
 8003cfa:	d107      	bne.n	8003d0c <HAL_TIM_IRQHandler+0x208>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 8003cfc:	687b      	ldr	r3, [r7, #4]
 8003cfe:	681b      	ldr	r3, [r3, #0]
 8003d00:	f06f 0220 	mvn.w	r2, #32
 8003d04:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 8003d06:	6878      	ldr	r0, [r7, #4]
 8003d08:	f000 fa36 	bl	8004178 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8003d0c:	bf00      	nop
 8003d0e:	3708      	adds	r7, #8
 8003d10:	46bd      	mov	sp, r7
 8003d12:	bd80      	pop	{r7, pc}

08003d14 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 8003d14:	b580      	push	{r7, lr}
 8003d16:	b084      	sub	sp, #16
 8003d18:	af00      	add	r7, sp, #0
 8003d1a:	6078      	str	r0, [r7, #4]
 8003d1c:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 8003d1e:	687b      	ldr	r3, [r7, #4]
 8003d20:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8003d24:	2b01      	cmp	r3, #1
 8003d26:	d101      	bne.n	8003d2c <HAL_TIM_ConfigClockSource+0x18>
 8003d28:	2302      	movs	r3, #2
 8003d2a:	e0a6      	b.n	8003e7a <HAL_TIM_ConfigClockSource+0x166>
 8003d2c:	687b      	ldr	r3, [r7, #4]
 8003d2e:	2201      	movs	r2, #1
 8003d30:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 8003d34:	687b      	ldr	r3, [r7, #4]
 8003d36:	2202      	movs	r2, #2
 8003d38:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 8003d3c:	687b      	ldr	r3, [r7, #4]
 8003d3e:	681b      	ldr	r3, [r3, #0]
 8003d40:	689b      	ldr	r3, [r3, #8]
 8003d42:	60fb      	str	r3, [r7, #12]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 8003d44:	68fb      	ldr	r3, [r7, #12]
 8003d46:	f023 0377 	bic.w	r3, r3, #119	; 0x77
 8003d4a:	60fb      	str	r3, [r7, #12]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8003d4c:	68fb      	ldr	r3, [r7, #12]
 8003d4e:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8003d52:	60fb      	str	r3, [r7, #12]
  htim->Instance->SMCR = tmpsmcr;
 8003d54:	687b      	ldr	r3, [r7, #4]
 8003d56:	681b      	ldr	r3, [r3, #0]
 8003d58:	68fa      	ldr	r2, [r7, #12]
 8003d5a:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 8003d5c:	683b      	ldr	r3, [r7, #0]
 8003d5e:	681b      	ldr	r3, [r3, #0]
 8003d60:	2b40      	cmp	r3, #64	; 0x40
 8003d62:	d067      	beq.n	8003e34 <HAL_TIM_ConfigClockSource+0x120>
 8003d64:	2b40      	cmp	r3, #64	; 0x40
 8003d66:	d80b      	bhi.n	8003d80 <HAL_TIM_ConfigClockSource+0x6c>
 8003d68:	2b10      	cmp	r3, #16
 8003d6a:	d073      	beq.n	8003e54 <HAL_TIM_ConfigClockSource+0x140>
 8003d6c:	2b10      	cmp	r3, #16
 8003d6e:	d802      	bhi.n	8003d76 <HAL_TIM_ConfigClockSource+0x62>
 8003d70:	2b00      	cmp	r3, #0
 8003d72:	d06f      	beq.n	8003e54 <HAL_TIM_ConfigClockSource+0x140>
        TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
        break;
      }

    default:
      break;
 8003d74:	e078      	b.n	8003e68 <HAL_TIM_ConfigClockSource+0x154>
  switch (sClockSourceConfig->ClockSource)
 8003d76:	2b20      	cmp	r3, #32
 8003d78:	d06c      	beq.n	8003e54 <HAL_TIM_ConfigClockSource+0x140>
 8003d7a:	2b30      	cmp	r3, #48	; 0x30
 8003d7c:	d06a      	beq.n	8003e54 <HAL_TIM_ConfigClockSource+0x140>
      break;
 8003d7e:	e073      	b.n	8003e68 <HAL_TIM_ConfigClockSource+0x154>
  switch (sClockSourceConfig->ClockSource)
 8003d80:	2b70      	cmp	r3, #112	; 0x70
 8003d82:	d00d      	beq.n	8003da0 <HAL_TIM_ConfigClockSource+0x8c>
 8003d84:	2b70      	cmp	r3, #112	; 0x70
 8003d86:	d804      	bhi.n	8003d92 <HAL_TIM_ConfigClockSource+0x7e>
 8003d88:	2b50      	cmp	r3, #80	; 0x50
 8003d8a:	d033      	beq.n	8003df4 <HAL_TIM_ConfigClockSource+0xe0>
 8003d8c:	2b60      	cmp	r3, #96	; 0x60
 8003d8e:	d041      	beq.n	8003e14 <HAL_TIM_ConfigClockSource+0x100>
      break;
 8003d90:	e06a      	b.n	8003e68 <HAL_TIM_ConfigClockSource+0x154>
  switch (sClockSourceConfig->ClockSource)
 8003d92:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8003d96:	d066      	beq.n	8003e66 <HAL_TIM_ConfigClockSource+0x152>
 8003d98:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8003d9c:	d017      	beq.n	8003dce <HAL_TIM_ConfigClockSource+0xba>
      break;
 8003d9e:	e063      	b.n	8003e68 <HAL_TIM_ConfigClockSource+0x154>
      TIM_ETR_SetConfig(htim->Instance,
 8003da0:	687b      	ldr	r3, [r7, #4]
 8003da2:	6818      	ldr	r0, [r3, #0]
 8003da4:	683b      	ldr	r3, [r7, #0]
 8003da6:	6899      	ldr	r1, [r3, #8]
 8003da8:	683b      	ldr	r3, [r7, #0]
 8003daa:	685a      	ldr	r2, [r3, #4]
 8003dac:	683b      	ldr	r3, [r7, #0]
 8003dae:	68db      	ldr	r3, [r3, #12]
 8003db0:	f000 f965 	bl	800407e <TIM_ETR_SetConfig>
      tmpsmcr = htim->Instance->SMCR;
 8003db4:	687b      	ldr	r3, [r7, #4]
 8003db6:	681b      	ldr	r3, [r3, #0]
 8003db8:	689b      	ldr	r3, [r3, #8]
 8003dba:	60fb      	str	r3, [r7, #12]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 8003dbc:	68fb      	ldr	r3, [r7, #12]
 8003dbe:	f043 0377 	orr.w	r3, r3, #119	; 0x77
 8003dc2:	60fb      	str	r3, [r7, #12]
      htim->Instance->SMCR = tmpsmcr;
 8003dc4:	687b      	ldr	r3, [r7, #4]
 8003dc6:	681b      	ldr	r3, [r3, #0]
 8003dc8:	68fa      	ldr	r2, [r7, #12]
 8003dca:	609a      	str	r2, [r3, #8]
      break;
 8003dcc:	e04c      	b.n	8003e68 <HAL_TIM_ConfigClockSource+0x154>
      TIM_ETR_SetConfig(htim->Instance,
 8003dce:	687b      	ldr	r3, [r7, #4]
 8003dd0:	6818      	ldr	r0, [r3, #0]
 8003dd2:	683b      	ldr	r3, [r7, #0]
 8003dd4:	6899      	ldr	r1, [r3, #8]
 8003dd6:	683b      	ldr	r3, [r7, #0]
 8003dd8:	685a      	ldr	r2, [r3, #4]
 8003dda:	683b      	ldr	r3, [r7, #0]
 8003ddc:	68db      	ldr	r3, [r3, #12]
 8003dde:	f000 f94e 	bl	800407e <TIM_ETR_SetConfig>
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 8003de2:	687b      	ldr	r3, [r7, #4]
 8003de4:	681b      	ldr	r3, [r3, #0]
 8003de6:	689a      	ldr	r2, [r3, #8]
 8003de8:	687b      	ldr	r3, [r7, #4]
 8003dea:	681b      	ldr	r3, [r3, #0]
 8003dec:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8003df0:	609a      	str	r2, [r3, #8]
      break;
 8003df2:	e039      	b.n	8003e68 <HAL_TIM_ConfigClockSource+0x154>
      TIM_TI1_ConfigInputStage(htim->Instance,
 8003df4:	687b      	ldr	r3, [r7, #4]
 8003df6:	6818      	ldr	r0, [r3, #0]
 8003df8:	683b      	ldr	r3, [r7, #0]
 8003dfa:	6859      	ldr	r1, [r3, #4]
 8003dfc:	683b      	ldr	r3, [r7, #0]
 8003dfe:	68db      	ldr	r3, [r3, #12]
 8003e00:	461a      	mov	r2, r3
 8003e02:	f000 f8c5 	bl	8003f90 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 8003e06:	687b      	ldr	r3, [r7, #4]
 8003e08:	681b      	ldr	r3, [r3, #0]
 8003e0a:	2150      	movs	r1, #80	; 0x50
 8003e0c:	4618      	mov	r0, r3
 8003e0e:	f000 f91c 	bl	800404a <TIM_ITRx_SetConfig>
      break;
 8003e12:	e029      	b.n	8003e68 <HAL_TIM_ConfigClockSource+0x154>
      TIM_TI2_ConfigInputStage(htim->Instance,
 8003e14:	687b      	ldr	r3, [r7, #4]
 8003e16:	6818      	ldr	r0, [r3, #0]
 8003e18:	683b      	ldr	r3, [r7, #0]
 8003e1a:	6859      	ldr	r1, [r3, #4]
 8003e1c:	683b      	ldr	r3, [r7, #0]
 8003e1e:	68db      	ldr	r3, [r3, #12]
 8003e20:	461a      	mov	r2, r3
 8003e22:	f000 f8e3 	bl	8003fec <TIM_TI2_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 8003e26:	687b      	ldr	r3, [r7, #4]
 8003e28:	681b      	ldr	r3, [r3, #0]
 8003e2a:	2160      	movs	r1, #96	; 0x60
 8003e2c:	4618      	mov	r0, r3
 8003e2e:	f000 f90c 	bl	800404a <TIM_ITRx_SetConfig>
      break;
 8003e32:	e019      	b.n	8003e68 <HAL_TIM_ConfigClockSource+0x154>
      TIM_TI1_ConfigInputStage(htim->Instance,
 8003e34:	687b      	ldr	r3, [r7, #4]
 8003e36:	6818      	ldr	r0, [r3, #0]
 8003e38:	683b      	ldr	r3, [r7, #0]
 8003e3a:	6859      	ldr	r1, [r3, #4]
 8003e3c:	683b      	ldr	r3, [r7, #0]
 8003e3e:	68db      	ldr	r3, [r3, #12]
 8003e40:	461a      	mov	r2, r3
 8003e42:	f000 f8a5 	bl	8003f90 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 8003e46:	687b      	ldr	r3, [r7, #4]
 8003e48:	681b      	ldr	r3, [r3, #0]
 8003e4a:	2140      	movs	r1, #64	; 0x40
 8003e4c:	4618      	mov	r0, r3
 8003e4e:	f000 f8fc 	bl	800404a <TIM_ITRx_SetConfig>
      break;
 8003e52:	e009      	b.n	8003e68 <HAL_TIM_ConfigClockSource+0x154>
        TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 8003e54:	687b      	ldr	r3, [r7, #4]
 8003e56:	681a      	ldr	r2, [r3, #0]
 8003e58:	683b      	ldr	r3, [r7, #0]
 8003e5a:	681b      	ldr	r3, [r3, #0]
 8003e5c:	4619      	mov	r1, r3
 8003e5e:	4610      	mov	r0, r2
 8003e60:	f000 f8f3 	bl	800404a <TIM_ITRx_SetConfig>
        break;
 8003e64:	e000      	b.n	8003e68 <HAL_TIM_ConfigClockSource+0x154>
      break;
 8003e66:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 8003e68:	687b      	ldr	r3, [r7, #4]
 8003e6a:	2201      	movs	r2, #1
 8003e6c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8003e70:	687b      	ldr	r3, [r7, #4]
 8003e72:	2200      	movs	r2, #0
 8003e74:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8003e78:	2300      	movs	r3, #0
}
 8003e7a:	4618      	mov	r0, r3
 8003e7c:	3710      	adds	r7, #16
 8003e7e:	46bd      	mov	sp, r7
 8003e80:	bd80      	pop	{r7, pc}

08003e82 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 8003e82:	b480      	push	{r7}
 8003e84:	b083      	sub	sp, #12
 8003e86:	af00      	add	r7, sp, #0
 8003e88:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 8003e8a:	bf00      	nop
 8003e8c:	370c      	adds	r7, #12
 8003e8e:	46bd      	mov	sp, r7
 8003e90:	bc80      	pop	{r7}
 8003e92:	4770      	bx	lr

08003e94 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 8003e94:	b480      	push	{r7}
 8003e96:	b083      	sub	sp, #12
 8003e98:	af00      	add	r7, sp, #0
 8003e9a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 8003e9c:	bf00      	nop
 8003e9e:	370c      	adds	r7, #12
 8003ea0:	46bd      	mov	sp, r7
 8003ea2:	bc80      	pop	{r7}
 8003ea4:	4770      	bx	lr

08003ea6 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 8003ea6:	b480      	push	{r7}
 8003ea8:	b083      	sub	sp, #12
 8003eaa:	af00      	add	r7, sp, #0
 8003eac:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 8003eae:	bf00      	nop
 8003eb0:	370c      	adds	r7, #12
 8003eb2:	46bd      	mov	sp, r7
 8003eb4:	bc80      	pop	{r7}
 8003eb6:	4770      	bx	lr

08003eb8 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 8003eb8:	b480      	push	{r7}
 8003eba:	b083      	sub	sp, #12
 8003ebc:	af00      	add	r7, sp, #0
 8003ebe:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 8003ec0:	bf00      	nop
 8003ec2:	370c      	adds	r7, #12
 8003ec4:	46bd      	mov	sp, r7
 8003ec6:	bc80      	pop	{r7}
 8003ec8:	4770      	bx	lr
	...

08003ecc <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 8003ecc:	b480      	push	{r7}
 8003ece:	b085      	sub	sp, #20
 8003ed0:	af00      	add	r7, sp, #0
 8003ed2:	6078      	str	r0, [r7, #4]
 8003ed4:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8003ed6:	687b      	ldr	r3, [r7, #4]
 8003ed8:	681b      	ldr	r3, [r3, #0]
 8003eda:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8003edc:	687b      	ldr	r3, [r7, #4]
 8003ede:	4a29      	ldr	r2, [pc, #164]	; (8003f84 <TIM_Base_SetConfig+0xb8>)
 8003ee0:	4293      	cmp	r3, r2
 8003ee2:	d00b      	beq.n	8003efc <TIM_Base_SetConfig+0x30>
 8003ee4:	687b      	ldr	r3, [r7, #4]
 8003ee6:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8003eea:	d007      	beq.n	8003efc <TIM_Base_SetConfig+0x30>
 8003eec:	687b      	ldr	r3, [r7, #4]
 8003eee:	4a26      	ldr	r2, [pc, #152]	; (8003f88 <TIM_Base_SetConfig+0xbc>)
 8003ef0:	4293      	cmp	r3, r2
 8003ef2:	d003      	beq.n	8003efc <TIM_Base_SetConfig+0x30>
 8003ef4:	687b      	ldr	r3, [r7, #4]
 8003ef6:	4a25      	ldr	r2, [pc, #148]	; (8003f8c <TIM_Base_SetConfig+0xc0>)
 8003ef8:	4293      	cmp	r3, r2
 8003efa:	d108      	bne.n	8003f0e <TIM_Base_SetConfig+0x42>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8003efc:	68fb      	ldr	r3, [r7, #12]
 8003efe:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8003f02:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8003f04:	683b      	ldr	r3, [r7, #0]
 8003f06:	685b      	ldr	r3, [r3, #4]
 8003f08:	68fa      	ldr	r2, [r7, #12]
 8003f0a:	4313      	orrs	r3, r2
 8003f0c:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8003f0e:	687b      	ldr	r3, [r7, #4]
 8003f10:	4a1c      	ldr	r2, [pc, #112]	; (8003f84 <TIM_Base_SetConfig+0xb8>)
 8003f12:	4293      	cmp	r3, r2
 8003f14:	d00b      	beq.n	8003f2e <TIM_Base_SetConfig+0x62>
 8003f16:	687b      	ldr	r3, [r7, #4]
 8003f18:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8003f1c:	d007      	beq.n	8003f2e <TIM_Base_SetConfig+0x62>
 8003f1e:	687b      	ldr	r3, [r7, #4]
 8003f20:	4a19      	ldr	r2, [pc, #100]	; (8003f88 <TIM_Base_SetConfig+0xbc>)
 8003f22:	4293      	cmp	r3, r2
 8003f24:	d003      	beq.n	8003f2e <TIM_Base_SetConfig+0x62>
 8003f26:	687b      	ldr	r3, [r7, #4]
 8003f28:	4a18      	ldr	r2, [pc, #96]	; (8003f8c <TIM_Base_SetConfig+0xc0>)
 8003f2a:	4293      	cmp	r3, r2
 8003f2c:	d108      	bne.n	8003f40 <TIM_Base_SetConfig+0x74>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8003f2e:	68fb      	ldr	r3, [r7, #12]
 8003f30:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8003f34:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8003f36:	683b      	ldr	r3, [r7, #0]
 8003f38:	68db      	ldr	r3, [r3, #12]
 8003f3a:	68fa      	ldr	r2, [r7, #12]
 8003f3c:	4313      	orrs	r3, r2
 8003f3e:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8003f40:	68fb      	ldr	r3, [r7, #12]
 8003f42:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 8003f46:	683b      	ldr	r3, [r7, #0]
 8003f48:	695b      	ldr	r3, [r3, #20]
 8003f4a:	4313      	orrs	r3, r2
 8003f4c:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8003f4e:	687b      	ldr	r3, [r7, #4]
 8003f50:	68fa      	ldr	r2, [r7, #12]
 8003f52:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8003f54:	683b      	ldr	r3, [r7, #0]
 8003f56:	689a      	ldr	r2, [r3, #8]
 8003f58:	687b      	ldr	r3, [r7, #4]
 8003f5a:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8003f5c:	683b      	ldr	r3, [r7, #0]
 8003f5e:	681a      	ldr	r2, [r3, #0]
 8003f60:	687b      	ldr	r3, [r7, #4]
 8003f62:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8003f64:	687b      	ldr	r3, [r7, #4]
 8003f66:	4a07      	ldr	r2, [pc, #28]	; (8003f84 <TIM_Base_SetConfig+0xb8>)
 8003f68:	4293      	cmp	r3, r2
 8003f6a:	d103      	bne.n	8003f74 <TIM_Base_SetConfig+0xa8>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8003f6c:	683b      	ldr	r3, [r7, #0]
 8003f6e:	691a      	ldr	r2, [r3, #16]
 8003f70:	687b      	ldr	r3, [r7, #4]
 8003f72:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8003f74:	687b      	ldr	r3, [r7, #4]
 8003f76:	2201      	movs	r2, #1
 8003f78:	615a      	str	r2, [r3, #20]
}
 8003f7a:	bf00      	nop
 8003f7c:	3714      	adds	r7, #20
 8003f7e:	46bd      	mov	sp, r7
 8003f80:	bc80      	pop	{r7}
 8003f82:	4770      	bx	lr
 8003f84:	40012c00 	.word	0x40012c00
 8003f88:	40000400 	.word	0x40000400
 8003f8c:	40000800 	.word	0x40000800

08003f90 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8003f90:	b480      	push	{r7}
 8003f92:	b087      	sub	sp, #28
 8003f94:	af00      	add	r7, sp, #0
 8003f96:	60f8      	str	r0, [r7, #12]
 8003f98:	60b9      	str	r1, [r7, #8]
 8003f9a:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 8003f9c:	68fb      	ldr	r3, [r7, #12]
 8003f9e:	6a1b      	ldr	r3, [r3, #32]
 8003fa0:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8003fa2:	68fb      	ldr	r3, [r7, #12]
 8003fa4:	6a1b      	ldr	r3, [r3, #32]
 8003fa6:	f023 0201 	bic.w	r2, r3, #1
 8003faa:	68fb      	ldr	r3, [r7, #12]
 8003fac:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8003fae:	68fb      	ldr	r3, [r7, #12]
 8003fb0:	699b      	ldr	r3, [r3, #24]
 8003fb2:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8003fb4:	693b      	ldr	r3, [r7, #16]
 8003fb6:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8003fba:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 8003fbc:	687b      	ldr	r3, [r7, #4]
 8003fbe:	011b      	lsls	r3, r3, #4
 8003fc0:	693a      	ldr	r2, [r7, #16]
 8003fc2:	4313      	orrs	r3, r2
 8003fc4:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 8003fc6:	697b      	ldr	r3, [r7, #20]
 8003fc8:	f023 030a 	bic.w	r3, r3, #10
 8003fcc:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 8003fce:	697a      	ldr	r2, [r7, #20]
 8003fd0:	68bb      	ldr	r3, [r7, #8]
 8003fd2:	4313      	orrs	r3, r2
 8003fd4:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 8003fd6:	68fb      	ldr	r3, [r7, #12]
 8003fd8:	693a      	ldr	r2, [r7, #16]
 8003fda:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8003fdc:	68fb      	ldr	r3, [r7, #12]
 8003fde:	697a      	ldr	r2, [r7, #20]
 8003fe0:	621a      	str	r2, [r3, #32]
}
 8003fe2:	bf00      	nop
 8003fe4:	371c      	adds	r7, #28
 8003fe6:	46bd      	mov	sp, r7
 8003fe8:	bc80      	pop	{r7}
 8003fea:	4770      	bx	lr

08003fec <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8003fec:	b480      	push	{r7}
 8003fee:	b087      	sub	sp, #28
 8003ff0:	af00      	add	r7, sp, #0
 8003ff2:	60f8      	str	r0, [r7, #12]
 8003ff4:	60b9      	str	r1, [r7, #8]
 8003ff6:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8003ff8:	68fb      	ldr	r3, [r7, #12]
 8003ffa:	6a1b      	ldr	r3, [r3, #32]
 8003ffc:	f023 0210 	bic.w	r2, r3, #16
 8004000:	68fb      	ldr	r3, [r7, #12]
 8004002:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8004004:	68fb      	ldr	r3, [r7, #12]
 8004006:	699b      	ldr	r3, [r3, #24]
 8004008:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 800400a:	68fb      	ldr	r3, [r7, #12]
 800400c:	6a1b      	ldr	r3, [r3, #32]
 800400e:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 8004010:	697b      	ldr	r3, [r7, #20]
 8004012:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 8004016:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 8004018:	687b      	ldr	r3, [r7, #4]
 800401a:	031b      	lsls	r3, r3, #12
 800401c:	697a      	ldr	r2, [r7, #20]
 800401e:	4313      	orrs	r3, r2
 8004020:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8004022:	693b      	ldr	r3, [r7, #16]
 8004024:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 8004028:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity << 4U);
 800402a:	68bb      	ldr	r3, [r7, #8]
 800402c:	011b      	lsls	r3, r3, #4
 800402e:	693a      	ldr	r2, [r7, #16]
 8004030:	4313      	orrs	r3, r2
 8004032:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 8004034:	68fb      	ldr	r3, [r7, #12]
 8004036:	697a      	ldr	r2, [r7, #20]
 8004038:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 800403a:	68fb      	ldr	r3, [r7, #12]
 800403c:	693a      	ldr	r2, [r7, #16]
 800403e:	621a      	str	r2, [r3, #32]
}
 8004040:	bf00      	nop
 8004042:	371c      	adds	r7, #28
 8004044:	46bd      	mov	sp, r7
 8004046:	bc80      	pop	{r7}
 8004048:	4770      	bx	lr

0800404a <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 800404a:	b480      	push	{r7}
 800404c:	b085      	sub	sp, #20
 800404e:	af00      	add	r7, sp, #0
 8004050:	6078      	str	r0, [r7, #4]
 8004052:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 8004054:	687b      	ldr	r3, [r7, #4]
 8004056:	689b      	ldr	r3, [r3, #8]
 8004058:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 800405a:	68fb      	ldr	r3, [r7, #12]
 800405c:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8004060:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 8004062:	683a      	ldr	r2, [r7, #0]
 8004064:	68fb      	ldr	r3, [r7, #12]
 8004066:	4313      	orrs	r3, r2
 8004068:	f043 0307 	orr.w	r3, r3, #7
 800406c:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 800406e:	687b      	ldr	r3, [r7, #4]
 8004070:	68fa      	ldr	r2, [r7, #12]
 8004072:	609a      	str	r2, [r3, #8]
}
 8004074:	bf00      	nop
 8004076:	3714      	adds	r7, #20
 8004078:	46bd      	mov	sp, r7
 800407a:	bc80      	pop	{r7}
 800407c:	4770      	bx	lr

0800407e <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 800407e:	b480      	push	{r7}
 8004080:	b087      	sub	sp, #28
 8004082:	af00      	add	r7, sp, #0
 8004084:	60f8      	str	r0, [r7, #12]
 8004086:	60b9      	str	r1, [r7, #8]
 8004088:	607a      	str	r2, [r7, #4]
 800408a:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 800408c:	68fb      	ldr	r3, [r7, #12]
 800408e:	689b      	ldr	r3, [r3, #8]
 8004090:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8004092:	697b      	ldr	r3, [r7, #20]
 8004094:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8004098:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 800409a:	683b      	ldr	r3, [r7, #0]
 800409c:	021a      	lsls	r2, r3, #8
 800409e:	687b      	ldr	r3, [r7, #4]
 80040a0:	431a      	orrs	r2, r3
 80040a2:	68bb      	ldr	r3, [r7, #8]
 80040a4:	4313      	orrs	r3, r2
 80040a6:	697a      	ldr	r2, [r7, #20]
 80040a8:	4313      	orrs	r3, r2
 80040aa:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 80040ac:	68fb      	ldr	r3, [r7, #12]
 80040ae:	697a      	ldr	r2, [r7, #20]
 80040b0:	609a      	str	r2, [r3, #8]
}
 80040b2:	bf00      	nop
 80040b4:	371c      	adds	r7, #28
 80040b6:	46bd      	mov	sp, r7
 80040b8:	bc80      	pop	{r7}
 80040ba:	4770      	bx	lr

080040bc <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        TIM_MasterConfigTypeDef *sMasterConfig)
{
 80040bc:	b480      	push	{r7}
 80040be:	b085      	sub	sp, #20
 80040c0:	af00      	add	r7, sp, #0
 80040c2:	6078      	str	r0, [r7, #4]
 80040c4:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 80040c6:	687b      	ldr	r3, [r7, #4]
 80040c8:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80040cc:	2b01      	cmp	r3, #1
 80040ce:	d101      	bne.n	80040d4 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 80040d0:	2302      	movs	r3, #2
 80040d2:	e046      	b.n	8004162 <HAL_TIMEx_MasterConfigSynchronization+0xa6>
 80040d4:	687b      	ldr	r3, [r7, #4]
 80040d6:	2201      	movs	r2, #1
 80040d8:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 80040dc:	687b      	ldr	r3, [r7, #4]
 80040de:	2202      	movs	r2, #2
 80040e0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 80040e4:	687b      	ldr	r3, [r7, #4]
 80040e6:	681b      	ldr	r3, [r3, #0]
 80040e8:	685b      	ldr	r3, [r3, #4]
 80040ea:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 80040ec:	687b      	ldr	r3, [r7, #4]
 80040ee:	681b      	ldr	r3, [r3, #0]
 80040f0:	689b      	ldr	r3, [r3, #8]
 80040f2:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 80040f4:	68fb      	ldr	r3, [r7, #12]
 80040f6:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80040fa:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 80040fc:	683b      	ldr	r3, [r7, #0]
 80040fe:	681b      	ldr	r3, [r3, #0]
 8004100:	68fa      	ldr	r2, [r7, #12]
 8004102:	4313      	orrs	r3, r2
 8004104:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8004106:	687b      	ldr	r3, [r7, #4]
 8004108:	681b      	ldr	r3, [r3, #0]
 800410a:	68fa      	ldr	r2, [r7, #12]
 800410c:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800410e:	687b      	ldr	r3, [r7, #4]
 8004110:	681b      	ldr	r3, [r3, #0]
 8004112:	4a16      	ldr	r2, [pc, #88]	; (800416c <HAL_TIMEx_MasterConfigSynchronization+0xb0>)
 8004114:	4293      	cmp	r3, r2
 8004116:	d00e      	beq.n	8004136 <HAL_TIMEx_MasterConfigSynchronization+0x7a>
 8004118:	687b      	ldr	r3, [r7, #4]
 800411a:	681b      	ldr	r3, [r3, #0]
 800411c:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8004120:	d009      	beq.n	8004136 <HAL_TIMEx_MasterConfigSynchronization+0x7a>
 8004122:	687b      	ldr	r3, [r7, #4]
 8004124:	681b      	ldr	r3, [r3, #0]
 8004126:	4a12      	ldr	r2, [pc, #72]	; (8004170 <HAL_TIMEx_MasterConfigSynchronization+0xb4>)
 8004128:	4293      	cmp	r3, r2
 800412a:	d004      	beq.n	8004136 <HAL_TIMEx_MasterConfigSynchronization+0x7a>
 800412c:	687b      	ldr	r3, [r7, #4]
 800412e:	681b      	ldr	r3, [r3, #0]
 8004130:	4a10      	ldr	r2, [pc, #64]	; (8004174 <HAL_TIMEx_MasterConfigSynchronization+0xb8>)
 8004132:	4293      	cmp	r3, r2
 8004134:	d10c      	bne.n	8004150 <HAL_TIMEx_MasterConfigSynchronization+0x94>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 8004136:	68bb      	ldr	r3, [r7, #8]
 8004138:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 800413c:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 800413e:	683b      	ldr	r3, [r7, #0]
 8004140:	685b      	ldr	r3, [r3, #4]
 8004142:	68ba      	ldr	r2, [r7, #8]
 8004144:	4313      	orrs	r3, r2
 8004146:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8004148:	687b      	ldr	r3, [r7, #4]
 800414a:	681b      	ldr	r3, [r3, #0]
 800414c:	68ba      	ldr	r2, [r7, #8]
 800414e:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8004150:	687b      	ldr	r3, [r7, #4]
 8004152:	2201      	movs	r2, #1
 8004154:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8004158:	687b      	ldr	r3, [r7, #4]
 800415a:	2200      	movs	r2, #0
 800415c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8004160:	2300      	movs	r3, #0
}
 8004162:	4618      	mov	r0, r3
 8004164:	3714      	adds	r7, #20
 8004166:	46bd      	mov	sp, r7
 8004168:	bc80      	pop	{r7}
 800416a:	4770      	bx	lr
 800416c:	40012c00 	.word	0x40012c00
 8004170:	40000400 	.word	0x40000400
 8004174:	40000800 	.word	0x40000800

08004178 <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8004178:	b480      	push	{r7}
 800417a:	b083      	sub	sp, #12
 800417c:	af00      	add	r7, sp, #0
 800417e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8004180:	bf00      	nop
 8004182:	370c      	adds	r7, #12
 8004184:	46bd      	mov	sp, r7
 8004186:	bc80      	pop	{r7}
 8004188:	4770      	bx	lr

0800418a <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 800418a:	b480      	push	{r7}
 800418c:	b083      	sub	sp, #12
 800418e:	af00      	add	r7, sp, #0
 8004190:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8004192:	bf00      	nop
 8004194:	370c      	adds	r7, #12
 8004196:	46bd      	mov	sp, r7
 8004198:	bc80      	pop	{r7}
 800419a:	4770      	bx	lr

0800419c <USB_CoreInit>:
  * @param  cfg pointer to a USB_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_CoreInit(USB_TypeDef *USBx, USB_CfgTypeDef cfg)
{
 800419c:	b084      	sub	sp, #16
 800419e:	b480      	push	{r7}
 80041a0:	b083      	sub	sp, #12
 80041a2:	af00      	add	r7, sp, #0
 80041a4:	6078      	str	r0, [r7, #4]
 80041a6:	f107 0014 	add.w	r0, r7, #20
 80041aa:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  /* NOTE : - This function is not required by USB Device FS peripheral, it is used
              only by USB OTG FS peripheral.
            - This function is added to ensure compatibility across platforms.
   */

  return HAL_OK;
 80041ae:	2300      	movs	r3, #0
}
 80041b0:	4618      	mov	r0, r3
 80041b2:	370c      	adds	r7, #12
 80041b4:	46bd      	mov	sp, r7
 80041b6:	bc80      	pop	{r7}
 80041b8:	b004      	add	sp, #16
 80041ba:	4770      	bx	lr

080041bc <USB_EnableGlobalInt>:
  *         Enables the controller's Global Int in the AHB Config reg
  * @param  USBx Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EnableGlobalInt(USB_TypeDef *USBx)
{
 80041bc:	b480      	push	{r7}
 80041be:	b085      	sub	sp, #20
 80041c0:	af00      	add	r7, sp, #0
 80041c2:	6078      	str	r0, [r7, #4]
  uint32_t winterruptmask;

  /* Clear pending interrupts */
  USBx->ISTR = 0U;
 80041c4:	687b      	ldr	r3, [r7, #4]
 80041c6:	2200      	movs	r2, #0
 80041c8:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44

  /* Set winterruptmask variable */
  winterruptmask = USB_CNTR_CTRM  | USB_CNTR_WKUPM |
 80041cc:	f44f 433f 	mov.w	r3, #48896	; 0xbf00
 80041d0:	60fb      	str	r3, [r7, #12]
                   USB_CNTR_SUSPM | USB_CNTR_ERRM |
                   USB_CNTR_SOFM | USB_CNTR_ESOFM |
                   USB_CNTR_RESETM;

  /* Set interrupt mask */
  USBx->CNTR = (uint16_t)winterruptmask;
 80041d2:	68fb      	ldr	r3, [r7, #12]
 80041d4:	b29a      	uxth	r2, r3
 80041d6:	687b      	ldr	r3, [r7, #4]
 80041d8:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40

  return HAL_OK;
 80041dc:	2300      	movs	r3, #0
}
 80041de:	4618      	mov	r0, r3
 80041e0:	3714      	adds	r7, #20
 80041e2:	46bd      	mov	sp, r7
 80041e4:	bc80      	pop	{r7}
 80041e6:	4770      	bx	lr

080041e8 <USB_DisableGlobalInt>:
  *         Disable the controller's Global Int in the AHB Config reg
  * @param  USBx Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DisableGlobalInt(USB_TypeDef *USBx)
{
 80041e8:	b480      	push	{r7}
 80041ea:	b085      	sub	sp, #20
 80041ec:	af00      	add	r7, sp, #0
 80041ee:	6078      	str	r0, [r7, #4]
  uint32_t winterruptmask;

  /* Set winterruptmask variable */
  winterruptmask = USB_CNTR_CTRM  | USB_CNTR_WKUPM |
 80041f0:	f44f 433f 	mov.w	r3, #48896	; 0xbf00
 80041f4:	60fb      	str	r3, [r7, #12]
                   USB_CNTR_SUSPM | USB_CNTR_ERRM |
                   USB_CNTR_SOFM | USB_CNTR_ESOFM |
                   USB_CNTR_RESETM;

  /* Clear interrupt mask */
  USBx->CNTR &= (uint16_t)(~winterruptmask);
 80041f6:	687b      	ldr	r3, [r7, #4]
 80041f8:	f8b3 3040 	ldrh.w	r3, [r3, #64]	; 0x40
 80041fc:	b29a      	uxth	r2, r3
 80041fe:	68fb      	ldr	r3, [r7, #12]
 8004200:	b29b      	uxth	r3, r3
 8004202:	43db      	mvns	r3, r3
 8004204:	b29b      	uxth	r3, r3
 8004206:	4013      	ands	r3, r2
 8004208:	b29a      	uxth	r2, r3
 800420a:	687b      	ldr	r3, [r7, #4]
 800420c:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40

  return HAL_OK;
 8004210:	2300      	movs	r3, #0
}
 8004212:	4618      	mov	r0, r3
 8004214:	3714      	adds	r7, #20
 8004216:	46bd      	mov	sp, r7
 8004218:	bc80      	pop	{r7}
 800421a:	4770      	bx	lr

0800421c <USB_SetCurrentMode>:
  *          This parameter can be one of the these values:
  *            @arg USB_DEVICE_MODE Peripheral mode
  * @retval HAL status
  */
HAL_StatusTypeDef USB_SetCurrentMode(USB_TypeDef *USBx, USB_ModeTypeDef mode)
{
 800421c:	b480      	push	{r7}
 800421e:	b083      	sub	sp, #12
 8004220:	af00      	add	r7, sp, #0
 8004222:	6078      	str	r0, [r7, #4]
 8004224:	460b      	mov	r3, r1
 8004226:	70fb      	strb	r3, [r7, #3]

  /* NOTE : - This function is not required by USB Device FS peripheral, it is used
              only by USB OTG FS peripheral.
            - This function is added to ensure compatibility across platforms.
   */
  return HAL_OK;
 8004228:	2300      	movs	r3, #0
}
 800422a:	4618      	mov	r0, r3
 800422c:	370c      	adds	r7, #12
 800422e:	46bd      	mov	sp, r7
 8004230:	bc80      	pop	{r7}
 8004232:	4770      	bx	lr

08004234 <USB_DevInit>:
  * @param  cfg  pointer to a USB_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DevInit(USB_TypeDef *USBx, USB_CfgTypeDef cfg)
{
 8004234:	b084      	sub	sp, #16
 8004236:	b480      	push	{r7}
 8004238:	b083      	sub	sp, #12
 800423a:	af00      	add	r7, sp, #0
 800423c:	6078      	str	r0, [r7, #4]
 800423e:	f107 0014 	add.w	r0, r7, #20
 8004242:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  /* Prevent unused argument(s) compilation warning */
  UNUSED(cfg);

  /* Init Device */
  /* CNTR_FRES = 1 */
  USBx->CNTR = (uint16_t)USB_CNTR_FRES;
 8004246:	687b      	ldr	r3, [r7, #4]
 8004248:	2201      	movs	r2, #1
 800424a:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40

  /* CNTR_FRES = 0 */
  USBx->CNTR = 0U;
 800424e:	687b      	ldr	r3, [r7, #4]
 8004250:	2200      	movs	r2, #0
 8004252:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40

  /* Clear pending interrupts */
  USBx->ISTR = 0U;
 8004256:	687b      	ldr	r3, [r7, #4]
 8004258:	2200      	movs	r2, #0
 800425a:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44

  /*Set Btable Address*/
  USBx->BTABLE = BTABLE_ADDRESS;
 800425e:	687b      	ldr	r3, [r7, #4]
 8004260:	2200      	movs	r2, #0
 8004262:	f8a3 2050 	strh.w	r2, [r3, #80]	; 0x50

  return HAL_OK;
 8004266:	2300      	movs	r3, #0
}
 8004268:	4618      	mov	r0, r3
 800426a:	370c      	adds	r7, #12
 800426c:	46bd      	mov	sp, r7
 800426e:	bc80      	pop	{r7}
 8004270:	b004      	add	sp, #16
 8004272:	4770      	bx	lr

08004274 <USB_ActivateEndpoint>:
  * @param  USBx Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_ActivateEndpoint(USB_TypeDef *USBx, USB_EPTypeDef *ep)
{
 8004274:	b480      	push	{r7}
 8004276:	b09b      	sub	sp, #108	; 0x6c
 8004278:	af00      	add	r7, sp, #0
 800427a:	6078      	str	r0, [r7, #4]
 800427c:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef ret = HAL_OK;
 800427e:	2300      	movs	r3, #0
 8004280:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
  uint16_t wEpRegVal;

  wEpRegVal = PCD_GET_ENDPOINT(USBx, ep->num) & USB_EP_T_MASK;
 8004284:	687a      	ldr	r2, [r7, #4]
 8004286:	683b      	ldr	r3, [r7, #0]
 8004288:	781b      	ldrb	r3, [r3, #0]
 800428a:	009b      	lsls	r3, r3, #2
 800428c:	4413      	add	r3, r2
 800428e:	881b      	ldrh	r3, [r3, #0]
 8004290:	b29b      	uxth	r3, r3
 8004292:	f423 43ec 	bic.w	r3, r3, #30208	; 0x7600
 8004296:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800429a:	f8a7 3064 	strh.w	r3, [r7, #100]	; 0x64

  /* initialize Endpoint */
  switch (ep->type)
 800429e:	683b      	ldr	r3, [r7, #0]
 80042a0:	78db      	ldrb	r3, [r3, #3]
 80042a2:	2b03      	cmp	r3, #3
 80042a4:	d81f      	bhi.n	80042e6 <USB_ActivateEndpoint+0x72>
 80042a6:	a201      	add	r2, pc, #4	; (adr r2, 80042ac <USB_ActivateEndpoint+0x38>)
 80042a8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80042ac:	080042bd 	.word	0x080042bd
 80042b0:	080042d9 	.word	0x080042d9
 80042b4:	080042ef 	.word	0x080042ef
 80042b8:	080042cb 	.word	0x080042cb
  {
    case EP_TYPE_CTRL:
      wEpRegVal |= USB_EP_CONTROL;
 80042bc:	f8b7 3064 	ldrh.w	r3, [r7, #100]	; 0x64
 80042c0:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 80042c4:	f8a7 3064 	strh.w	r3, [r7, #100]	; 0x64
      break;
 80042c8:	e012      	b.n	80042f0 <USB_ActivateEndpoint+0x7c>
    case EP_TYPE_BULK:
      wEpRegVal |= USB_EP_BULK;
      break;

    case EP_TYPE_INTR:
      wEpRegVal |= USB_EP_INTERRUPT;
 80042ca:	f8b7 3064 	ldrh.w	r3, [r7, #100]	; 0x64
 80042ce:	f443 63c0 	orr.w	r3, r3, #1536	; 0x600
 80042d2:	f8a7 3064 	strh.w	r3, [r7, #100]	; 0x64
      break;
 80042d6:	e00b      	b.n	80042f0 <USB_ActivateEndpoint+0x7c>

    case EP_TYPE_ISOC:
      wEpRegVal |= USB_EP_ISOCHRONOUS;
 80042d8:	f8b7 3064 	ldrh.w	r3, [r7, #100]	; 0x64
 80042dc:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 80042e0:	f8a7 3064 	strh.w	r3, [r7, #100]	; 0x64
      break;
 80042e4:	e004      	b.n	80042f0 <USB_ActivateEndpoint+0x7c>

    default:
      ret = HAL_ERROR;
 80042e6:	2301      	movs	r3, #1
 80042e8:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
      break;
 80042ec:	e000      	b.n	80042f0 <USB_ActivateEndpoint+0x7c>
      break;
 80042ee:	bf00      	nop
  }

  PCD_SET_ENDPOINT(USBx, ep->num, (wEpRegVal | USB_EP_CTR_RX | USB_EP_CTR_TX));
 80042f0:	687a      	ldr	r2, [r7, #4]
 80042f2:	683b      	ldr	r3, [r7, #0]
 80042f4:	781b      	ldrb	r3, [r3, #0]
 80042f6:	009b      	lsls	r3, r3, #2
 80042f8:	441a      	add	r2, r3
 80042fa:	f8b7 3064 	ldrh.w	r3, [r7, #100]	; 0x64
 80042fe:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8004302:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8004306:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800430a:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800430e:	b29b      	uxth	r3, r3
 8004310:	8013      	strh	r3, [r2, #0]

  PCD_SET_EP_ADDRESS(USBx, ep->num, ep->num);
 8004312:	687a      	ldr	r2, [r7, #4]
 8004314:	683b      	ldr	r3, [r7, #0]
 8004316:	781b      	ldrb	r3, [r3, #0]
 8004318:	009b      	lsls	r3, r3, #2
 800431a:	4413      	add	r3, r2
 800431c:	881b      	ldrh	r3, [r3, #0]
 800431e:	b29b      	uxth	r3, r3
 8004320:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8004324:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8004328:	b29a      	uxth	r2, r3
 800432a:	683b      	ldr	r3, [r7, #0]
 800432c:	781b      	ldrb	r3, [r3, #0]
 800432e:	b29b      	uxth	r3, r3
 8004330:	4313      	orrs	r3, r2
 8004332:	f8a7 305e 	strh.w	r3, [r7, #94]	; 0x5e
 8004336:	687a      	ldr	r2, [r7, #4]
 8004338:	683b      	ldr	r3, [r7, #0]
 800433a:	781b      	ldrb	r3, [r3, #0]
 800433c:	009b      	lsls	r3, r3, #2
 800433e:	441a      	add	r2, r3
 8004340:	f8b7 305e 	ldrh.w	r3, [r7, #94]	; 0x5e
 8004344:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8004348:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 800434c:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8004350:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8004354:	b29b      	uxth	r3, r3
 8004356:	8013      	strh	r3, [r2, #0]

  if (ep->doublebuffer == 0U)
 8004358:	683b      	ldr	r3, [r7, #0]
 800435a:	7b1b      	ldrb	r3, [r3, #12]
 800435c:	2b00      	cmp	r3, #0
 800435e:	f040 8149 	bne.w	80045f4 <USB_ActivateEndpoint+0x380>
  {
    if (ep->is_in != 0U)
 8004362:	683b      	ldr	r3, [r7, #0]
 8004364:	785b      	ldrb	r3, [r3, #1]
 8004366:	2b00      	cmp	r3, #0
 8004368:	f000 8084 	beq.w	8004474 <USB_ActivateEndpoint+0x200>
    {
      /*Set the endpoint Transmit buffer address */
      PCD_SET_EP_TX_ADDRESS(USBx, ep->num, ep->pmaadress);
 800436c:	687b      	ldr	r3, [r7, #4]
 800436e:	617b      	str	r3, [r7, #20]
 8004370:	687b      	ldr	r3, [r7, #4]
 8004372:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8004376:	b29b      	uxth	r3, r3
 8004378:	461a      	mov	r2, r3
 800437a:	697b      	ldr	r3, [r7, #20]
 800437c:	4413      	add	r3, r2
 800437e:	617b      	str	r3, [r7, #20]
 8004380:	683b      	ldr	r3, [r7, #0]
 8004382:	781b      	ldrb	r3, [r3, #0]
 8004384:	011a      	lsls	r2, r3, #4
 8004386:	697b      	ldr	r3, [r7, #20]
 8004388:	4413      	add	r3, r2
 800438a:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 800438e:	613b      	str	r3, [r7, #16]
 8004390:	683b      	ldr	r3, [r7, #0]
 8004392:	88db      	ldrh	r3, [r3, #6]
 8004394:	085b      	lsrs	r3, r3, #1
 8004396:	b29b      	uxth	r3, r3
 8004398:	005b      	lsls	r3, r3, #1
 800439a:	b29a      	uxth	r2, r3
 800439c:	693b      	ldr	r3, [r7, #16]
 800439e:	801a      	strh	r2, [r3, #0]
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 80043a0:	687a      	ldr	r2, [r7, #4]
 80043a2:	683b      	ldr	r3, [r7, #0]
 80043a4:	781b      	ldrb	r3, [r3, #0]
 80043a6:	009b      	lsls	r3, r3, #2
 80043a8:	4413      	add	r3, r2
 80043aa:	881b      	ldrh	r3, [r3, #0]
 80043ac:	81fb      	strh	r3, [r7, #14]
 80043ae:	89fb      	ldrh	r3, [r7, #14]
 80043b0:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80043b4:	2b00      	cmp	r3, #0
 80043b6:	d01b      	beq.n	80043f0 <USB_ActivateEndpoint+0x17c>
 80043b8:	687a      	ldr	r2, [r7, #4]
 80043ba:	683b      	ldr	r3, [r7, #0]
 80043bc:	781b      	ldrb	r3, [r3, #0]
 80043be:	009b      	lsls	r3, r3, #2
 80043c0:	4413      	add	r3, r2
 80043c2:	881b      	ldrh	r3, [r3, #0]
 80043c4:	b29b      	uxth	r3, r3
 80043c6:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80043ca:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80043ce:	81bb      	strh	r3, [r7, #12]
 80043d0:	687a      	ldr	r2, [r7, #4]
 80043d2:	683b      	ldr	r3, [r7, #0]
 80043d4:	781b      	ldrb	r3, [r3, #0]
 80043d6:	009b      	lsls	r3, r3, #2
 80043d8:	441a      	add	r2, r3
 80043da:	89bb      	ldrh	r3, [r7, #12]
 80043dc:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 80043e0:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 80043e4:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80043e8:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 80043ec:	b29b      	uxth	r3, r3
 80043ee:	8013      	strh	r3, [r2, #0]

      if (ep->type != EP_TYPE_ISOC)
 80043f0:	683b      	ldr	r3, [r7, #0]
 80043f2:	78db      	ldrb	r3, [r3, #3]
 80043f4:	2b01      	cmp	r3, #1
 80043f6:	d020      	beq.n	800443a <USB_ActivateEndpoint+0x1c6>
      {
        /* Configure NAK status for the Endpoint */
        PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_NAK);
 80043f8:	687a      	ldr	r2, [r7, #4]
 80043fa:	683b      	ldr	r3, [r7, #0]
 80043fc:	781b      	ldrb	r3, [r3, #0]
 80043fe:	009b      	lsls	r3, r3, #2
 8004400:	4413      	add	r3, r2
 8004402:	881b      	ldrh	r3, [r3, #0]
 8004404:	b29b      	uxth	r3, r3
 8004406:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800440a:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800440e:	813b      	strh	r3, [r7, #8]
 8004410:	893b      	ldrh	r3, [r7, #8]
 8004412:	f083 0320 	eor.w	r3, r3, #32
 8004416:	813b      	strh	r3, [r7, #8]
 8004418:	687a      	ldr	r2, [r7, #4]
 800441a:	683b      	ldr	r3, [r7, #0]
 800441c:	781b      	ldrb	r3, [r3, #0]
 800441e:	009b      	lsls	r3, r3, #2
 8004420:	441a      	add	r2, r3
 8004422:	893b      	ldrh	r3, [r7, #8]
 8004424:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8004428:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 800442c:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8004430:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8004434:	b29b      	uxth	r3, r3
 8004436:	8013      	strh	r3, [r2, #0]
 8004438:	e27f      	b.n	800493a <USB_ActivateEndpoint+0x6c6>
      }
      else
      {
        /* Configure TX Endpoint to disabled state */
        PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_DIS);
 800443a:	687a      	ldr	r2, [r7, #4]
 800443c:	683b      	ldr	r3, [r7, #0]
 800443e:	781b      	ldrb	r3, [r3, #0]
 8004440:	009b      	lsls	r3, r3, #2
 8004442:	4413      	add	r3, r2
 8004444:	881b      	ldrh	r3, [r3, #0]
 8004446:	b29b      	uxth	r3, r3
 8004448:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800444c:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8004450:	817b      	strh	r3, [r7, #10]
 8004452:	687a      	ldr	r2, [r7, #4]
 8004454:	683b      	ldr	r3, [r7, #0]
 8004456:	781b      	ldrb	r3, [r3, #0]
 8004458:	009b      	lsls	r3, r3, #2
 800445a:	441a      	add	r2, r3
 800445c:	897b      	ldrh	r3, [r7, #10]
 800445e:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8004462:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8004466:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800446a:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800446e:	b29b      	uxth	r3, r3
 8004470:	8013      	strh	r3, [r2, #0]
 8004472:	e262      	b.n	800493a <USB_ActivateEndpoint+0x6c6>
      }
    }
    else
    {
      /*Set the endpoint Receive buffer address */
      PCD_SET_EP_RX_ADDRESS(USBx, ep->num, ep->pmaadress);
 8004474:	687b      	ldr	r3, [r7, #4]
 8004476:	62fb      	str	r3, [r7, #44]	; 0x2c
 8004478:	687b      	ldr	r3, [r7, #4]
 800447a:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 800447e:	b29b      	uxth	r3, r3
 8004480:	461a      	mov	r2, r3
 8004482:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004484:	4413      	add	r3, r2
 8004486:	62fb      	str	r3, [r7, #44]	; 0x2c
 8004488:	683b      	ldr	r3, [r7, #0]
 800448a:	781b      	ldrb	r3, [r3, #0]
 800448c:	011a      	lsls	r2, r3, #4
 800448e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004490:	4413      	add	r3, r2
 8004492:	f503 6381 	add.w	r3, r3, #1032	; 0x408
 8004496:	62bb      	str	r3, [r7, #40]	; 0x28
 8004498:	683b      	ldr	r3, [r7, #0]
 800449a:	88db      	ldrh	r3, [r3, #6]
 800449c:	085b      	lsrs	r3, r3, #1
 800449e:	b29b      	uxth	r3, r3
 80044a0:	005b      	lsls	r3, r3, #1
 80044a2:	b29a      	uxth	r2, r3
 80044a4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80044a6:	801a      	strh	r2, [r3, #0]

      /*Set the endpoint Receive buffer counter*/
      PCD_SET_EP_RX_CNT(USBx, ep->num, ep->maxpacket);
 80044a8:	687b      	ldr	r3, [r7, #4]
 80044aa:	627b      	str	r3, [r7, #36]	; 0x24
 80044ac:	687b      	ldr	r3, [r7, #4]
 80044ae:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 80044b2:	b29b      	uxth	r3, r3
 80044b4:	461a      	mov	r2, r3
 80044b6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80044b8:	4413      	add	r3, r2
 80044ba:	627b      	str	r3, [r7, #36]	; 0x24
 80044bc:	683b      	ldr	r3, [r7, #0]
 80044be:	781b      	ldrb	r3, [r3, #0]
 80044c0:	011a      	lsls	r2, r3, #4
 80044c2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80044c4:	4413      	add	r3, r2
 80044c6:	f203 430c 	addw	r3, r3, #1036	; 0x40c
 80044ca:	623b      	str	r3, [r7, #32]
 80044cc:	683b      	ldr	r3, [r7, #0]
 80044ce:	691b      	ldr	r3, [r3, #16]
 80044d0:	2b00      	cmp	r3, #0
 80044d2:	d112      	bne.n	80044fa <USB_ActivateEndpoint+0x286>
 80044d4:	6a3b      	ldr	r3, [r7, #32]
 80044d6:	881b      	ldrh	r3, [r3, #0]
 80044d8:	b29b      	uxth	r3, r3
 80044da:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 80044de:	b29a      	uxth	r2, r3
 80044e0:	6a3b      	ldr	r3, [r7, #32]
 80044e2:	801a      	strh	r2, [r3, #0]
 80044e4:	6a3b      	ldr	r3, [r7, #32]
 80044e6:	881b      	ldrh	r3, [r3, #0]
 80044e8:	b29b      	uxth	r3, r3
 80044ea:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 80044ee:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 80044f2:	b29a      	uxth	r2, r3
 80044f4:	6a3b      	ldr	r3, [r7, #32]
 80044f6:	801a      	strh	r2, [r3, #0]
 80044f8:	e02f      	b.n	800455a <USB_ActivateEndpoint+0x2e6>
 80044fa:	683b      	ldr	r3, [r7, #0]
 80044fc:	691b      	ldr	r3, [r3, #16]
 80044fe:	2b3e      	cmp	r3, #62	; 0x3e
 8004500:	d813      	bhi.n	800452a <USB_ActivateEndpoint+0x2b6>
 8004502:	683b      	ldr	r3, [r7, #0]
 8004504:	691b      	ldr	r3, [r3, #16]
 8004506:	085b      	lsrs	r3, r3, #1
 8004508:	663b      	str	r3, [r7, #96]	; 0x60
 800450a:	683b      	ldr	r3, [r7, #0]
 800450c:	691b      	ldr	r3, [r3, #16]
 800450e:	f003 0301 	and.w	r3, r3, #1
 8004512:	2b00      	cmp	r3, #0
 8004514:	d002      	beq.n	800451c <USB_ActivateEndpoint+0x2a8>
 8004516:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8004518:	3301      	adds	r3, #1
 800451a:	663b      	str	r3, [r7, #96]	; 0x60
 800451c:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 800451e:	b29b      	uxth	r3, r3
 8004520:	029b      	lsls	r3, r3, #10
 8004522:	b29a      	uxth	r2, r3
 8004524:	6a3b      	ldr	r3, [r7, #32]
 8004526:	801a      	strh	r2, [r3, #0]
 8004528:	e017      	b.n	800455a <USB_ActivateEndpoint+0x2e6>
 800452a:	683b      	ldr	r3, [r7, #0]
 800452c:	691b      	ldr	r3, [r3, #16]
 800452e:	095b      	lsrs	r3, r3, #5
 8004530:	663b      	str	r3, [r7, #96]	; 0x60
 8004532:	683b      	ldr	r3, [r7, #0]
 8004534:	691b      	ldr	r3, [r3, #16]
 8004536:	f003 031f 	and.w	r3, r3, #31
 800453a:	2b00      	cmp	r3, #0
 800453c:	d102      	bne.n	8004544 <USB_ActivateEndpoint+0x2d0>
 800453e:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8004540:	3b01      	subs	r3, #1
 8004542:	663b      	str	r3, [r7, #96]	; 0x60
 8004544:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8004546:	b29b      	uxth	r3, r3
 8004548:	029b      	lsls	r3, r3, #10
 800454a:	b29b      	uxth	r3, r3
 800454c:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8004550:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8004554:	b29a      	uxth	r2, r3
 8004556:	6a3b      	ldr	r3, [r7, #32]
 8004558:	801a      	strh	r2, [r3, #0]
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 800455a:	687a      	ldr	r2, [r7, #4]
 800455c:	683b      	ldr	r3, [r7, #0]
 800455e:	781b      	ldrb	r3, [r3, #0]
 8004560:	009b      	lsls	r3, r3, #2
 8004562:	4413      	add	r3, r2
 8004564:	881b      	ldrh	r3, [r3, #0]
 8004566:	83fb      	strh	r3, [r7, #30]
 8004568:	8bfb      	ldrh	r3, [r7, #30]
 800456a:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800456e:	2b00      	cmp	r3, #0
 8004570:	d01b      	beq.n	80045aa <USB_ActivateEndpoint+0x336>
 8004572:	687a      	ldr	r2, [r7, #4]
 8004574:	683b      	ldr	r3, [r7, #0]
 8004576:	781b      	ldrb	r3, [r3, #0]
 8004578:	009b      	lsls	r3, r3, #2
 800457a:	4413      	add	r3, r2
 800457c:	881b      	ldrh	r3, [r3, #0]
 800457e:	b29b      	uxth	r3, r3
 8004580:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8004584:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8004588:	83bb      	strh	r3, [r7, #28]
 800458a:	687a      	ldr	r2, [r7, #4]
 800458c:	683b      	ldr	r3, [r7, #0]
 800458e:	781b      	ldrb	r3, [r3, #0]
 8004590:	009b      	lsls	r3, r3, #2
 8004592:	441a      	add	r2, r3
 8004594:	8bbb      	ldrh	r3, [r7, #28]
 8004596:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 800459a:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 800459e:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 80045a2:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80045a6:	b29b      	uxth	r3, r3
 80045a8:	8013      	strh	r3, [r2, #0]

      /* Configure VALID status for the Endpoint*/
      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_VALID);
 80045aa:	687a      	ldr	r2, [r7, #4]
 80045ac:	683b      	ldr	r3, [r7, #0]
 80045ae:	781b      	ldrb	r3, [r3, #0]
 80045b0:	009b      	lsls	r3, r3, #2
 80045b2:	4413      	add	r3, r2
 80045b4:	881b      	ldrh	r3, [r3, #0]
 80045b6:	b29b      	uxth	r3, r3
 80045b8:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 80045bc:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80045c0:	837b      	strh	r3, [r7, #26]
 80045c2:	8b7b      	ldrh	r3, [r7, #26]
 80045c4:	f483 5380 	eor.w	r3, r3, #4096	; 0x1000
 80045c8:	837b      	strh	r3, [r7, #26]
 80045ca:	8b7b      	ldrh	r3, [r7, #26]
 80045cc:	f483 5300 	eor.w	r3, r3, #8192	; 0x2000
 80045d0:	837b      	strh	r3, [r7, #26]
 80045d2:	687a      	ldr	r2, [r7, #4]
 80045d4:	683b      	ldr	r3, [r7, #0]
 80045d6:	781b      	ldrb	r3, [r3, #0]
 80045d8:	009b      	lsls	r3, r3, #2
 80045da:	441a      	add	r2, r3
 80045dc:	8b7b      	ldrh	r3, [r7, #26]
 80045de:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 80045e2:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 80045e6:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80045ea:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80045ee:	b29b      	uxth	r3, r3
 80045f0:	8013      	strh	r3, [r2, #0]
 80045f2:	e1a2      	b.n	800493a <USB_ActivateEndpoint+0x6c6>
  }
  /*Double Buffer*/
  else
  {
    /* Set the endpoint as double buffered */
    PCD_SET_EP_DBUF(USBx, ep->num);
 80045f4:	687a      	ldr	r2, [r7, #4]
 80045f6:	683b      	ldr	r3, [r7, #0]
 80045f8:	781b      	ldrb	r3, [r3, #0]
 80045fa:	009b      	lsls	r3, r3, #2
 80045fc:	4413      	add	r3, r2
 80045fe:	881b      	ldrh	r3, [r3, #0]
 8004600:	b29b      	uxth	r3, r3
 8004602:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8004606:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800460a:	f8a7 305c 	strh.w	r3, [r7, #92]	; 0x5c
 800460e:	687a      	ldr	r2, [r7, #4]
 8004610:	683b      	ldr	r3, [r7, #0]
 8004612:	781b      	ldrb	r3, [r3, #0]
 8004614:	009b      	lsls	r3, r3, #2
 8004616:	441a      	add	r2, r3
 8004618:	f8b7 305c 	ldrh.w	r3, [r7, #92]	; 0x5c
 800461c:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8004620:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8004624:	f443 4301 	orr.w	r3, r3, #33024	; 0x8100
 8004628:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800462c:	b29b      	uxth	r3, r3
 800462e:	8013      	strh	r3, [r2, #0]

    /* Set buffer address for double buffered mode */
    PCD_SET_EP_DBUF_ADDR(USBx, ep->num, ep->pmaaddr0, ep->pmaaddr1);
 8004630:	687b      	ldr	r3, [r7, #4]
 8004632:	65bb      	str	r3, [r7, #88]	; 0x58
 8004634:	687b      	ldr	r3, [r7, #4]
 8004636:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 800463a:	b29b      	uxth	r3, r3
 800463c:	461a      	mov	r2, r3
 800463e:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8004640:	4413      	add	r3, r2
 8004642:	65bb      	str	r3, [r7, #88]	; 0x58
 8004644:	683b      	ldr	r3, [r7, #0]
 8004646:	781b      	ldrb	r3, [r3, #0]
 8004648:	011a      	lsls	r2, r3, #4
 800464a:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 800464c:	4413      	add	r3, r2
 800464e:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8004652:	657b      	str	r3, [r7, #84]	; 0x54
 8004654:	683b      	ldr	r3, [r7, #0]
 8004656:	891b      	ldrh	r3, [r3, #8]
 8004658:	085b      	lsrs	r3, r3, #1
 800465a:	b29b      	uxth	r3, r3
 800465c:	005b      	lsls	r3, r3, #1
 800465e:	b29a      	uxth	r2, r3
 8004660:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8004662:	801a      	strh	r2, [r3, #0]
 8004664:	687b      	ldr	r3, [r7, #4]
 8004666:	653b      	str	r3, [r7, #80]	; 0x50
 8004668:	687b      	ldr	r3, [r7, #4]
 800466a:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 800466e:	b29b      	uxth	r3, r3
 8004670:	461a      	mov	r2, r3
 8004672:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8004674:	4413      	add	r3, r2
 8004676:	653b      	str	r3, [r7, #80]	; 0x50
 8004678:	683b      	ldr	r3, [r7, #0]
 800467a:	781b      	ldrb	r3, [r3, #0]
 800467c:	011a      	lsls	r2, r3, #4
 800467e:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8004680:	4413      	add	r3, r2
 8004682:	f503 6381 	add.w	r3, r3, #1032	; 0x408
 8004686:	64fb      	str	r3, [r7, #76]	; 0x4c
 8004688:	683b      	ldr	r3, [r7, #0]
 800468a:	895b      	ldrh	r3, [r3, #10]
 800468c:	085b      	lsrs	r3, r3, #1
 800468e:	b29b      	uxth	r3, r3
 8004690:	005b      	lsls	r3, r3, #1
 8004692:	b29a      	uxth	r2, r3
 8004694:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8004696:	801a      	strh	r2, [r3, #0]

    if (ep->is_in == 0U)
 8004698:	683b      	ldr	r3, [r7, #0]
 800469a:	785b      	ldrb	r3, [r3, #1]
 800469c:	2b00      	cmp	r3, #0
 800469e:	f040 8091 	bne.w	80047c4 <USB_ActivateEndpoint+0x550>
    {
      /* Clear the data toggle bits for the endpoint IN/OUT */
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 80046a2:	687a      	ldr	r2, [r7, #4]
 80046a4:	683b      	ldr	r3, [r7, #0]
 80046a6:	781b      	ldrb	r3, [r3, #0]
 80046a8:	009b      	lsls	r3, r3, #2
 80046aa:	4413      	add	r3, r2
 80046ac:	881b      	ldrh	r3, [r3, #0]
 80046ae:	87bb      	strh	r3, [r7, #60]	; 0x3c
 80046b0:	8fbb      	ldrh	r3, [r7, #60]	; 0x3c
 80046b2:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80046b6:	2b00      	cmp	r3, #0
 80046b8:	d01b      	beq.n	80046f2 <USB_ActivateEndpoint+0x47e>
 80046ba:	687a      	ldr	r2, [r7, #4]
 80046bc:	683b      	ldr	r3, [r7, #0]
 80046be:	781b      	ldrb	r3, [r3, #0]
 80046c0:	009b      	lsls	r3, r3, #2
 80046c2:	4413      	add	r3, r2
 80046c4:	881b      	ldrh	r3, [r3, #0]
 80046c6:	b29b      	uxth	r3, r3
 80046c8:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80046cc:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80046d0:	877b      	strh	r3, [r7, #58]	; 0x3a
 80046d2:	687a      	ldr	r2, [r7, #4]
 80046d4:	683b      	ldr	r3, [r7, #0]
 80046d6:	781b      	ldrb	r3, [r3, #0]
 80046d8:	009b      	lsls	r3, r3, #2
 80046da:	441a      	add	r2, r3
 80046dc:	8f7b      	ldrh	r3, [r7, #58]	; 0x3a
 80046de:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 80046e2:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 80046e6:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 80046ea:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80046ee:	b29b      	uxth	r3, r3
 80046f0:	8013      	strh	r3, [r2, #0]
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 80046f2:	687a      	ldr	r2, [r7, #4]
 80046f4:	683b      	ldr	r3, [r7, #0]
 80046f6:	781b      	ldrb	r3, [r3, #0]
 80046f8:	009b      	lsls	r3, r3, #2
 80046fa:	4413      	add	r3, r2
 80046fc:	881b      	ldrh	r3, [r3, #0]
 80046fe:	873b      	strh	r3, [r7, #56]	; 0x38
 8004700:	8f3b      	ldrh	r3, [r7, #56]	; 0x38
 8004702:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004706:	2b00      	cmp	r3, #0
 8004708:	d01b      	beq.n	8004742 <USB_ActivateEndpoint+0x4ce>
 800470a:	687a      	ldr	r2, [r7, #4]
 800470c:	683b      	ldr	r3, [r7, #0]
 800470e:	781b      	ldrb	r3, [r3, #0]
 8004710:	009b      	lsls	r3, r3, #2
 8004712:	4413      	add	r3, r2
 8004714:	881b      	ldrh	r3, [r3, #0]
 8004716:	b29b      	uxth	r3, r3
 8004718:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800471c:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8004720:	86fb      	strh	r3, [r7, #54]	; 0x36
 8004722:	687a      	ldr	r2, [r7, #4]
 8004724:	683b      	ldr	r3, [r7, #0]
 8004726:	781b      	ldrb	r3, [r3, #0]
 8004728:	009b      	lsls	r3, r3, #2
 800472a:	441a      	add	r2, r3
 800472c:	8efb      	ldrh	r3, [r7, #54]	; 0x36
 800472e:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8004732:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8004736:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800473a:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 800473e:	b29b      	uxth	r3, r3
 8004740:	8013      	strh	r3, [r2, #0]

      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_VALID);
 8004742:	687a      	ldr	r2, [r7, #4]
 8004744:	683b      	ldr	r3, [r7, #0]
 8004746:	781b      	ldrb	r3, [r3, #0]
 8004748:	009b      	lsls	r3, r3, #2
 800474a:	4413      	add	r3, r2
 800474c:	881b      	ldrh	r3, [r3, #0]
 800474e:	b29b      	uxth	r3, r3
 8004750:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8004754:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8004758:	86bb      	strh	r3, [r7, #52]	; 0x34
 800475a:	8ebb      	ldrh	r3, [r7, #52]	; 0x34
 800475c:	f483 5380 	eor.w	r3, r3, #4096	; 0x1000
 8004760:	86bb      	strh	r3, [r7, #52]	; 0x34
 8004762:	8ebb      	ldrh	r3, [r7, #52]	; 0x34
 8004764:	f483 5300 	eor.w	r3, r3, #8192	; 0x2000
 8004768:	86bb      	strh	r3, [r7, #52]	; 0x34
 800476a:	687a      	ldr	r2, [r7, #4]
 800476c:	683b      	ldr	r3, [r7, #0]
 800476e:	781b      	ldrb	r3, [r3, #0]
 8004770:	009b      	lsls	r3, r3, #2
 8004772:	441a      	add	r2, r3
 8004774:	8ebb      	ldrh	r3, [r7, #52]	; 0x34
 8004776:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 800477a:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 800477e:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8004782:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8004786:	b29b      	uxth	r3, r3
 8004788:	8013      	strh	r3, [r2, #0]
      PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_DIS);
 800478a:	687a      	ldr	r2, [r7, #4]
 800478c:	683b      	ldr	r3, [r7, #0]
 800478e:	781b      	ldrb	r3, [r3, #0]
 8004790:	009b      	lsls	r3, r3, #2
 8004792:	4413      	add	r3, r2
 8004794:	881b      	ldrh	r3, [r3, #0]
 8004796:	b29b      	uxth	r3, r3
 8004798:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800479c:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 80047a0:	867b      	strh	r3, [r7, #50]	; 0x32
 80047a2:	687a      	ldr	r2, [r7, #4]
 80047a4:	683b      	ldr	r3, [r7, #0]
 80047a6:	781b      	ldrb	r3, [r3, #0]
 80047a8:	009b      	lsls	r3, r3, #2
 80047aa:	441a      	add	r2, r3
 80047ac:	8e7b      	ldrh	r3, [r7, #50]	; 0x32
 80047ae:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 80047b2:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 80047b6:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80047ba:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80047be:	b29b      	uxth	r3, r3
 80047c0:	8013      	strh	r3, [r2, #0]
 80047c2:	e0ba      	b.n	800493a <USB_ActivateEndpoint+0x6c6>
    }
    else
    {
      /* Clear the data toggle bits for the endpoint IN/OUT */
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 80047c4:	687a      	ldr	r2, [r7, #4]
 80047c6:	683b      	ldr	r3, [r7, #0]
 80047c8:	781b      	ldrb	r3, [r3, #0]
 80047ca:	009b      	lsls	r3, r3, #2
 80047cc:	4413      	add	r3, r2
 80047ce:	881b      	ldrh	r3, [r3, #0]
 80047d0:	f8a7 304a 	strh.w	r3, [r7, #74]	; 0x4a
 80047d4:	f8b7 304a 	ldrh.w	r3, [r7, #74]	; 0x4a
 80047d8:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80047dc:	2b00      	cmp	r3, #0
 80047de:	d01d      	beq.n	800481c <USB_ActivateEndpoint+0x5a8>
 80047e0:	687a      	ldr	r2, [r7, #4]
 80047e2:	683b      	ldr	r3, [r7, #0]
 80047e4:	781b      	ldrb	r3, [r3, #0]
 80047e6:	009b      	lsls	r3, r3, #2
 80047e8:	4413      	add	r3, r2
 80047ea:	881b      	ldrh	r3, [r3, #0]
 80047ec:	b29b      	uxth	r3, r3
 80047ee:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80047f2:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80047f6:	f8a7 3048 	strh.w	r3, [r7, #72]	; 0x48
 80047fa:	687a      	ldr	r2, [r7, #4]
 80047fc:	683b      	ldr	r3, [r7, #0]
 80047fe:	781b      	ldrb	r3, [r3, #0]
 8004800:	009b      	lsls	r3, r3, #2
 8004802:	441a      	add	r2, r3
 8004804:	f8b7 3048 	ldrh.w	r3, [r7, #72]	; 0x48
 8004808:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 800480c:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8004810:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8004814:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8004818:	b29b      	uxth	r3, r3
 800481a:	8013      	strh	r3, [r2, #0]
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 800481c:	687a      	ldr	r2, [r7, #4]
 800481e:	683b      	ldr	r3, [r7, #0]
 8004820:	781b      	ldrb	r3, [r3, #0]
 8004822:	009b      	lsls	r3, r3, #2
 8004824:	4413      	add	r3, r2
 8004826:	881b      	ldrh	r3, [r3, #0]
 8004828:	f8a7 3046 	strh.w	r3, [r7, #70]	; 0x46
 800482c:	f8b7 3046 	ldrh.w	r3, [r7, #70]	; 0x46
 8004830:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004834:	2b00      	cmp	r3, #0
 8004836:	d01d      	beq.n	8004874 <USB_ActivateEndpoint+0x600>
 8004838:	687a      	ldr	r2, [r7, #4]
 800483a:	683b      	ldr	r3, [r7, #0]
 800483c:	781b      	ldrb	r3, [r3, #0]
 800483e:	009b      	lsls	r3, r3, #2
 8004840:	4413      	add	r3, r2
 8004842:	881b      	ldrh	r3, [r3, #0]
 8004844:	b29b      	uxth	r3, r3
 8004846:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800484a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800484e:	f8a7 3044 	strh.w	r3, [r7, #68]	; 0x44
 8004852:	687a      	ldr	r2, [r7, #4]
 8004854:	683b      	ldr	r3, [r7, #0]
 8004856:	781b      	ldrb	r3, [r3, #0]
 8004858:	009b      	lsls	r3, r3, #2
 800485a:	441a      	add	r2, r3
 800485c:	f8b7 3044 	ldrh.w	r3, [r7, #68]	; 0x44
 8004860:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8004864:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8004868:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800486c:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 8004870:	b29b      	uxth	r3, r3
 8004872:	8013      	strh	r3, [r2, #0]

      if (ep->type != EP_TYPE_ISOC)
 8004874:	683b      	ldr	r3, [r7, #0]
 8004876:	78db      	ldrb	r3, [r3, #3]
 8004878:	2b01      	cmp	r3, #1
 800487a:	d024      	beq.n	80048c6 <USB_ActivateEndpoint+0x652>
      {
        /* Configure NAK status for the Endpoint */
        PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_NAK);
 800487c:	687a      	ldr	r2, [r7, #4]
 800487e:	683b      	ldr	r3, [r7, #0]
 8004880:	781b      	ldrb	r3, [r3, #0]
 8004882:	009b      	lsls	r3, r3, #2
 8004884:	4413      	add	r3, r2
 8004886:	881b      	ldrh	r3, [r3, #0]
 8004888:	b29b      	uxth	r3, r3
 800488a:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800488e:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8004892:	f8a7 3040 	strh.w	r3, [r7, #64]	; 0x40
 8004896:	f8b7 3040 	ldrh.w	r3, [r7, #64]	; 0x40
 800489a:	f083 0320 	eor.w	r3, r3, #32
 800489e:	f8a7 3040 	strh.w	r3, [r7, #64]	; 0x40
 80048a2:	687a      	ldr	r2, [r7, #4]
 80048a4:	683b      	ldr	r3, [r7, #0]
 80048a6:	781b      	ldrb	r3, [r3, #0]
 80048a8:	009b      	lsls	r3, r3, #2
 80048aa:	441a      	add	r2, r3
 80048ac:	f8b7 3040 	ldrh.w	r3, [r7, #64]	; 0x40
 80048b0:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 80048b4:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 80048b8:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80048bc:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80048c0:	b29b      	uxth	r3, r3
 80048c2:	8013      	strh	r3, [r2, #0]
 80048c4:	e01d      	b.n	8004902 <USB_ActivateEndpoint+0x68e>
      }
      else
      {
        /* Configure TX Endpoint to disabled state */
        PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_DIS);
 80048c6:	687a      	ldr	r2, [r7, #4]
 80048c8:	683b      	ldr	r3, [r7, #0]
 80048ca:	781b      	ldrb	r3, [r3, #0]
 80048cc:	009b      	lsls	r3, r3, #2
 80048ce:	4413      	add	r3, r2
 80048d0:	881b      	ldrh	r3, [r3, #0]
 80048d2:	b29b      	uxth	r3, r3
 80048d4:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80048d8:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 80048dc:	f8a7 3042 	strh.w	r3, [r7, #66]	; 0x42
 80048e0:	687a      	ldr	r2, [r7, #4]
 80048e2:	683b      	ldr	r3, [r7, #0]
 80048e4:	781b      	ldrb	r3, [r3, #0]
 80048e6:	009b      	lsls	r3, r3, #2
 80048e8:	441a      	add	r2, r3
 80048ea:	f8b7 3042 	ldrh.w	r3, [r7, #66]	; 0x42
 80048ee:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 80048f2:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 80048f6:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80048fa:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80048fe:	b29b      	uxth	r3, r3
 8004900:	8013      	strh	r3, [r2, #0]
      }

      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_DIS);
 8004902:	687a      	ldr	r2, [r7, #4]
 8004904:	683b      	ldr	r3, [r7, #0]
 8004906:	781b      	ldrb	r3, [r3, #0]
 8004908:	009b      	lsls	r3, r3, #2
 800490a:	4413      	add	r3, r2
 800490c:	881b      	ldrh	r3, [r3, #0]
 800490e:	b29b      	uxth	r3, r3
 8004910:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8004914:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8004918:	87fb      	strh	r3, [r7, #62]	; 0x3e
 800491a:	687a      	ldr	r2, [r7, #4]
 800491c:	683b      	ldr	r3, [r7, #0]
 800491e:	781b      	ldrb	r3, [r3, #0]
 8004920:	009b      	lsls	r3, r3, #2
 8004922:	441a      	add	r2, r3
 8004924:	8ffb      	ldrh	r3, [r7, #62]	; 0x3e
 8004926:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 800492a:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 800492e:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8004932:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8004936:	b29b      	uxth	r3, r3
 8004938:	8013      	strh	r3, [r2, #0]
    }
  }

  return ret;
 800493a:	f897 3067 	ldrb.w	r3, [r7, #103]	; 0x67
}
 800493e:	4618      	mov	r0, r3
 8004940:	376c      	adds	r7, #108	; 0x6c
 8004942:	46bd      	mov	sp, r7
 8004944:	bc80      	pop	{r7}
 8004946:	4770      	bx	lr

08004948 <USB_DeactivateEndpoint>:
  * @param  USBx Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DeactivateEndpoint(USB_TypeDef *USBx, USB_EPTypeDef *ep)
{
 8004948:	b480      	push	{r7}
 800494a:	b08d      	sub	sp, #52	; 0x34
 800494c:	af00      	add	r7, sp, #0
 800494e:	6078      	str	r0, [r7, #4]
 8004950:	6039      	str	r1, [r7, #0]
  if (ep->doublebuffer == 0U)
 8004952:	683b      	ldr	r3, [r7, #0]
 8004954:	7b1b      	ldrb	r3, [r3, #12]
 8004956:	2b00      	cmp	r3, #0
 8004958:	f040 808e 	bne.w	8004a78 <USB_DeactivateEndpoint+0x130>
  {
    if (ep->is_in != 0U)
 800495c:	683b      	ldr	r3, [r7, #0]
 800495e:	785b      	ldrb	r3, [r3, #1]
 8004960:	2b00      	cmp	r3, #0
 8004962:	d044      	beq.n	80049ee <USB_DeactivateEndpoint+0xa6>
    {
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 8004964:	687a      	ldr	r2, [r7, #4]
 8004966:	683b      	ldr	r3, [r7, #0]
 8004968:	781b      	ldrb	r3, [r3, #0]
 800496a:	009b      	lsls	r3, r3, #2
 800496c:	4413      	add	r3, r2
 800496e:	881b      	ldrh	r3, [r3, #0]
 8004970:	81bb      	strh	r3, [r7, #12]
 8004972:	89bb      	ldrh	r3, [r7, #12]
 8004974:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004978:	2b00      	cmp	r3, #0
 800497a:	d01b      	beq.n	80049b4 <USB_DeactivateEndpoint+0x6c>
 800497c:	687a      	ldr	r2, [r7, #4]
 800497e:	683b      	ldr	r3, [r7, #0]
 8004980:	781b      	ldrb	r3, [r3, #0]
 8004982:	009b      	lsls	r3, r3, #2
 8004984:	4413      	add	r3, r2
 8004986:	881b      	ldrh	r3, [r3, #0]
 8004988:	b29b      	uxth	r3, r3
 800498a:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800498e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8004992:	817b      	strh	r3, [r7, #10]
 8004994:	687a      	ldr	r2, [r7, #4]
 8004996:	683b      	ldr	r3, [r7, #0]
 8004998:	781b      	ldrb	r3, [r3, #0]
 800499a:	009b      	lsls	r3, r3, #2
 800499c:	441a      	add	r2, r3
 800499e:	897b      	ldrh	r3, [r7, #10]
 80049a0:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 80049a4:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 80049a8:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80049ac:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 80049b0:	b29b      	uxth	r3, r3
 80049b2:	8013      	strh	r3, [r2, #0]

      /* Configure DISABLE status for the Endpoint*/
      PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_DIS);
 80049b4:	687a      	ldr	r2, [r7, #4]
 80049b6:	683b      	ldr	r3, [r7, #0]
 80049b8:	781b      	ldrb	r3, [r3, #0]
 80049ba:	009b      	lsls	r3, r3, #2
 80049bc:	4413      	add	r3, r2
 80049be:	881b      	ldrh	r3, [r3, #0]
 80049c0:	b29b      	uxth	r3, r3
 80049c2:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80049c6:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 80049ca:	813b      	strh	r3, [r7, #8]
 80049cc:	687a      	ldr	r2, [r7, #4]
 80049ce:	683b      	ldr	r3, [r7, #0]
 80049d0:	781b      	ldrb	r3, [r3, #0]
 80049d2:	009b      	lsls	r3, r3, #2
 80049d4:	441a      	add	r2, r3
 80049d6:	893b      	ldrh	r3, [r7, #8]
 80049d8:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 80049dc:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 80049e0:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80049e4:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80049e8:	b29b      	uxth	r3, r3
 80049ea:	8013      	strh	r3, [r2, #0]
 80049ec:	e192      	b.n	8004d14 <USB_DeactivateEndpoint+0x3cc>
    }
    else
    {
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 80049ee:	687a      	ldr	r2, [r7, #4]
 80049f0:	683b      	ldr	r3, [r7, #0]
 80049f2:	781b      	ldrb	r3, [r3, #0]
 80049f4:	009b      	lsls	r3, r3, #2
 80049f6:	4413      	add	r3, r2
 80049f8:	881b      	ldrh	r3, [r3, #0]
 80049fa:	827b      	strh	r3, [r7, #18]
 80049fc:	8a7b      	ldrh	r3, [r7, #18]
 80049fe:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8004a02:	2b00      	cmp	r3, #0
 8004a04:	d01b      	beq.n	8004a3e <USB_DeactivateEndpoint+0xf6>
 8004a06:	687a      	ldr	r2, [r7, #4]
 8004a08:	683b      	ldr	r3, [r7, #0]
 8004a0a:	781b      	ldrb	r3, [r3, #0]
 8004a0c:	009b      	lsls	r3, r3, #2
 8004a0e:	4413      	add	r3, r2
 8004a10:	881b      	ldrh	r3, [r3, #0]
 8004a12:	b29b      	uxth	r3, r3
 8004a14:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8004a18:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8004a1c:	823b      	strh	r3, [r7, #16]
 8004a1e:	687a      	ldr	r2, [r7, #4]
 8004a20:	683b      	ldr	r3, [r7, #0]
 8004a22:	781b      	ldrb	r3, [r3, #0]
 8004a24:	009b      	lsls	r3, r3, #2
 8004a26:	441a      	add	r2, r3
 8004a28:	8a3b      	ldrh	r3, [r7, #16]
 8004a2a:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8004a2e:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8004a32:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8004a36:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8004a3a:	b29b      	uxth	r3, r3
 8004a3c:	8013      	strh	r3, [r2, #0]

      /* Configure DISABLE status for the Endpoint*/
      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_DIS);
 8004a3e:	687a      	ldr	r2, [r7, #4]
 8004a40:	683b      	ldr	r3, [r7, #0]
 8004a42:	781b      	ldrb	r3, [r3, #0]
 8004a44:	009b      	lsls	r3, r3, #2
 8004a46:	4413      	add	r3, r2
 8004a48:	881b      	ldrh	r3, [r3, #0]
 8004a4a:	b29b      	uxth	r3, r3
 8004a4c:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8004a50:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8004a54:	81fb      	strh	r3, [r7, #14]
 8004a56:	687a      	ldr	r2, [r7, #4]
 8004a58:	683b      	ldr	r3, [r7, #0]
 8004a5a:	781b      	ldrb	r3, [r3, #0]
 8004a5c:	009b      	lsls	r3, r3, #2
 8004a5e:	441a      	add	r2, r3
 8004a60:	89fb      	ldrh	r3, [r7, #14]
 8004a62:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8004a66:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8004a6a:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8004a6e:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8004a72:	b29b      	uxth	r3, r3
 8004a74:	8013      	strh	r3, [r2, #0]
 8004a76:	e14d      	b.n	8004d14 <USB_DeactivateEndpoint+0x3cc>
    }
  }
  /*Double Buffer*/
  else
  {
    if (ep->is_in == 0U)
 8004a78:	683b      	ldr	r3, [r7, #0]
 8004a7a:	785b      	ldrb	r3, [r3, #1]
 8004a7c:	2b00      	cmp	r3, #0
 8004a7e:	f040 80a5 	bne.w	8004bcc <USB_DeactivateEndpoint+0x284>
    {
      /* Clear the data toggle bits for the endpoint IN/OUT*/
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 8004a82:	687a      	ldr	r2, [r7, #4]
 8004a84:	683b      	ldr	r3, [r7, #0]
 8004a86:	781b      	ldrb	r3, [r3, #0]
 8004a88:	009b      	lsls	r3, r3, #2
 8004a8a:	4413      	add	r3, r2
 8004a8c:	881b      	ldrh	r3, [r3, #0]
 8004a8e:	843b      	strh	r3, [r7, #32]
 8004a90:	8c3b      	ldrh	r3, [r7, #32]
 8004a92:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8004a96:	2b00      	cmp	r3, #0
 8004a98:	d01b      	beq.n	8004ad2 <USB_DeactivateEndpoint+0x18a>
 8004a9a:	687a      	ldr	r2, [r7, #4]
 8004a9c:	683b      	ldr	r3, [r7, #0]
 8004a9e:	781b      	ldrb	r3, [r3, #0]
 8004aa0:	009b      	lsls	r3, r3, #2
 8004aa2:	4413      	add	r3, r2
 8004aa4:	881b      	ldrh	r3, [r3, #0]
 8004aa6:	b29b      	uxth	r3, r3
 8004aa8:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8004aac:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8004ab0:	83fb      	strh	r3, [r7, #30]
 8004ab2:	687a      	ldr	r2, [r7, #4]
 8004ab4:	683b      	ldr	r3, [r7, #0]
 8004ab6:	781b      	ldrb	r3, [r3, #0]
 8004ab8:	009b      	lsls	r3, r3, #2
 8004aba:	441a      	add	r2, r3
 8004abc:	8bfb      	ldrh	r3, [r7, #30]
 8004abe:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8004ac2:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8004ac6:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8004aca:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8004ace:	b29b      	uxth	r3, r3
 8004ad0:	8013      	strh	r3, [r2, #0]
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 8004ad2:	687a      	ldr	r2, [r7, #4]
 8004ad4:	683b      	ldr	r3, [r7, #0]
 8004ad6:	781b      	ldrb	r3, [r3, #0]
 8004ad8:	009b      	lsls	r3, r3, #2
 8004ada:	4413      	add	r3, r2
 8004adc:	881b      	ldrh	r3, [r3, #0]
 8004ade:	83bb      	strh	r3, [r7, #28]
 8004ae0:	8bbb      	ldrh	r3, [r7, #28]
 8004ae2:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004ae6:	2b00      	cmp	r3, #0
 8004ae8:	d01b      	beq.n	8004b22 <USB_DeactivateEndpoint+0x1da>
 8004aea:	687a      	ldr	r2, [r7, #4]
 8004aec:	683b      	ldr	r3, [r7, #0]
 8004aee:	781b      	ldrb	r3, [r3, #0]
 8004af0:	009b      	lsls	r3, r3, #2
 8004af2:	4413      	add	r3, r2
 8004af4:	881b      	ldrh	r3, [r3, #0]
 8004af6:	b29b      	uxth	r3, r3
 8004af8:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8004afc:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8004b00:	837b      	strh	r3, [r7, #26]
 8004b02:	687a      	ldr	r2, [r7, #4]
 8004b04:	683b      	ldr	r3, [r7, #0]
 8004b06:	781b      	ldrb	r3, [r3, #0]
 8004b08:	009b      	lsls	r3, r3, #2
 8004b0a:	441a      	add	r2, r3
 8004b0c:	8b7b      	ldrh	r3, [r7, #26]
 8004b0e:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8004b12:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8004b16:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8004b1a:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 8004b1e:	b29b      	uxth	r3, r3
 8004b20:	8013      	strh	r3, [r2, #0]

      /* Reset value of the data toggle bits for the endpoint out*/
      PCD_TX_DTOG(USBx, ep->num);
 8004b22:	687a      	ldr	r2, [r7, #4]
 8004b24:	683b      	ldr	r3, [r7, #0]
 8004b26:	781b      	ldrb	r3, [r3, #0]
 8004b28:	009b      	lsls	r3, r3, #2
 8004b2a:	4413      	add	r3, r2
 8004b2c:	881b      	ldrh	r3, [r3, #0]
 8004b2e:	b29b      	uxth	r3, r3
 8004b30:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8004b34:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8004b38:	833b      	strh	r3, [r7, #24]
 8004b3a:	687a      	ldr	r2, [r7, #4]
 8004b3c:	683b      	ldr	r3, [r7, #0]
 8004b3e:	781b      	ldrb	r3, [r3, #0]
 8004b40:	009b      	lsls	r3, r3, #2
 8004b42:	441a      	add	r2, r3
 8004b44:	8b3b      	ldrh	r3, [r7, #24]
 8004b46:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8004b4a:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8004b4e:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8004b52:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 8004b56:	b29b      	uxth	r3, r3
 8004b58:	8013      	strh	r3, [r2, #0]

      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_DIS);
 8004b5a:	687a      	ldr	r2, [r7, #4]
 8004b5c:	683b      	ldr	r3, [r7, #0]
 8004b5e:	781b      	ldrb	r3, [r3, #0]
 8004b60:	009b      	lsls	r3, r3, #2
 8004b62:	4413      	add	r3, r2
 8004b64:	881b      	ldrh	r3, [r3, #0]
 8004b66:	b29b      	uxth	r3, r3
 8004b68:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8004b6c:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8004b70:	82fb      	strh	r3, [r7, #22]
 8004b72:	687a      	ldr	r2, [r7, #4]
 8004b74:	683b      	ldr	r3, [r7, #0]
 8004b76:	781b      	ldrb	r3, [r3, #0]
 8004b78:	009b      	lsls	r3, r3, #2
 8004b7a:	441a      	add	r2, r3
 8004b7c:	8afb      	ldrh	r3, [r7, #22]
 8004b7e:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8004b82:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8004b86:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8004b8a:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8004b8e:	b29b      	uxth	r3, r3
 8004b90:	8013      	strh	r3, [r2, #0]
      PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_DIS);
 8004b92:	687a      	ldr	r2, [r7, #4]
 8004b94:	683b      	ldr	r3, [r7, #0]
 8004b96:	781b      	ldrb	r3, [r3, #0]
 8004b98:	009b      	lsls	r3, r3, #2
 8004b9a:	4413      	add	r3, r2
 8004b9c:	881b      	ldrh	r3, [r3, #0]
 8004b9e:	b29b      	uxth	r3, r3
 8004ba0:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8004ba4:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8004ba8:	82bb      	strh	r3, [r7, #20]
 8004baa:	687a      	ldr	r2, [r7, #4]
 8004bac:	683b      	ldr	r3, [r7, #0]
 8004bae:	781b      	ldrb	r3, [r3, #0]
 8004bb0:	009b      	lsls	r3, r3, #2
 8004bb2:	441a      	add	r2, r3
 8004bb4:	8abb      	ldrh	r3, [r7, #20]
 8004bb6:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8004bba:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8004bbe:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8004bc2:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8004bc6:	b29b      	uxth	r3, r3
 8004bc8:	8013      	strh	r3, [r2, #0]
 8004bca:	e0a3      	b.n	8004d14 <USB_DeactivateEndpoint+0x3cc>
    }
    else
    {
      /* Clear the data toggle bits for the endpoint IN/OUT*/
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 8004bcc:	687a      	ldr	r2, [r7, #4]
 8004bce:	683b      	ldr	r3, [r7, #0]
 8004bd0:	781b      	ldrb	r3, [r3, #0]
 8004bd2:	009b      	lsls	r3, r3, #2
 8004bd4:	4413      	add	r3, r2
 8004bd6:	881b      	ldrh	r3, [r3, #0]
 8004bd8:	85fb      	strh	r3, [r7, #46]	; 0x2e
 8004bda:	8dfb      	ldrh	r3, [r7, #46]	; 0x2e
 8004bdc:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8004be0:	2b00      	cmp	r3, #0
 8004be2:	d01b      	beq.n	8004c1c <USB_DeactivateEndpoint+0x2d4>
 8004be4:	687a      	ldr	r2, [r7, #4]
 8004be6:	683b      	ldr	r3, [r7, #0]
 8004be8:	781b      	ldrb	r3, [r3, #0]
 8004bea:	009b      	lsls	r3, r3, #2
 8004bec:	4413      	add	r3, r2
 8004bee:	881b      	ldrh	r3, [r3, #0]
 8004bf0:	b29b      	uxth	r3, r3
 8004bf2:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8004bf6:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8004bfa:	85bb      	strh	r3, [r7, #44]	; 0x2c
 8004bfc:	687a      	ldr	r2, [r7, #4]
 8004bfe:	683b      	ldr	r3, [r7, #0]
 8004c00:	781b      	ldrb	r3, [r3, #0]
 8004c02:	009b      	lsls	r3, r3, #2
 8004c04:	441a      	add	r2, r3
 8004c06:	8dbb      	ldrh	r3, [r7, #44]	; 0x2c
 8004c08:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8004c0c:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8004c10:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8004c14:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8004c18:	b29b      	uxth	r3, r3
 8004c1a:	8013      	strh	r3, [r2, #0]
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 8004c1c:	687a      	ldr	r2, [r7, #4]
 8004c1e:	683b      	ldr	r3, [r7, #0]
 8004c20:	781b      	ldrb	r3, [r3, #0]
 8004c22:	009b      	lsls	r3, r3, #2
 8004c24:	4413      	add	r3, r2
 8004c26:	881b      	ldrh	r3, [r3, #0]
 8004c28:	857b      	strh	r3, [r7, #42]	; 0x2a
 8004c2a:	8d7b      	ldrh	r3, [r7, #42]	; 0x2a
 8004c2c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004c30:	2b00      	cmp	r3, #0
 8004c32:	d01b      	beq.n	8004c6c <USB_DeactivateEndpoint+0x324>
 8004c34:	687a      	ldr	r2, [r7, #4]
 8004c36:	683b      	ldr	r3, [r7, #0]
 8004c38:	781b      	ldrb	r3, [r3, #0]
 8004c3a:	009b      	lsls	r3, r3, #2
 8004c3c:	4413      	add	r3, r2
 8004c3e:	881b      	ldrh	r3, [r3, #0]
 8004c40:	b29b      	uxth	r3, r3
 8004c42:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8004c46:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8004c4a:	853b      	strh	r3, [r7, #40]	; 0x28
 8004c4c:	687a      	ldr	r2, [r7, #4]
 8004c4e:	683b      	ldr	r3, [r7, #0]
 8004c50:	781b      	ldrb	r3, [r3, #0]
 8004c52:	009b      	lsls	r3, r3, #2
 8004c54:	441a      	add	r2, r3
 8004c56:	8d3b      	ldrh	r3, [r7, #40]	; 0x28
 8004c58:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8004c5c:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8004c60:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8004c64:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 8004c68:	b29b      	uxth	r3, r3
 8004c6a:	8013      	strh	r3, [r2, #0]
      PCD_RX_DTOG(USBx, ep->num);
 8004c6c:	687a      	ldr	r2, [r7, #4]
 8004c6e:	683b      	ldr	r3, [r7, #0]
 8004c70:	781b      	ldrb	r3, [r3, #0]
 8004c72:	009b      	lsls	r3, r3, #2
 8004c74:	4413      	add	r3, r2
 8004c76:	881b      	ldrh	r3, [r3, #0]
 8004c78:	b29b      	uxth	r3, r3
 8004c7a:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8004c7e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8004c82:	84fb      	strh	r3, [r7, #38]	; 0x26
 8004c84:	687a      	ldr	r2, [r7, #4]
 8004c86:	683b      	ldr	r3, [r7, #0]
 8004c88:	781b      	ldrb	r3, [r3, #0]
 8004c8a:	009b      	lsls	r3, r3, #2
 8004c8c:	441a      	add	r2, r3
 8004c8e:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 8004c90:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8004c94:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8004c98:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8004c9c:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8004ca0:	b29b      	uxth	r3, r3
 8004ca2:	8013      	strh	r3, [r2, #0]

      /* Configure DISABLE status for the Endpoint*/
      PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_DIS);
 8004ca4:	687a      	ldr	r2, [r7, #4]
 8004ca6:	683b      	ldr	r3, [r7, #0]
 8004ca8:	781b      	ldrb	r3, [r3, #0]
 8004caa:	009b      	lsls	r3, r3, #2
 8004cac:	4413      	add	r3, r2
 8004cae:	881b      	ldrh	r3, [r3, #0]
 8004cb0:	b29b      	uxth	r3, r3
 8004cb2:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8004cb6:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8004cba:	84bb      	strh	r3, [r7, #36]	; 0x24
 8004cbc:	687a      	ldr	r2, [r7, #4]
 8004cbe:	683b      	ldr	r3, [r7, #0]
 8004cc0:	781b      	ldrb	r3, [r3, #0]
 8004cc2:	009b      	lsls	r3, r3, #2
 8004cc4:	441a      	add	r2, r3
 8004cc6:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8004cc8:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8004ccc:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8004cd0:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8004cd4:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8004cd8:	b29b      	uxth	r3, r3
 8004cda:	8013      	strh	r3, [r2, #0]
      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_DIS);
 8004cdc:	687a      	ldr	r2, [r7, #4]
 8004cde:	683b      	ldr	r3, [r7, #0]
 8004ce0:	781b      	ldrb	r3, [r3, #0]
 8004ce2:	009b      	lsls	r3, r3, #2
 8004ce4:	4413      	add	r3, r2
 8004ce6:	881b      	ldrh	r3, [r3, #0]
 8004ce8:	b29b      	uxth	r3, r3
 8004cea:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8004cee:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8004cf2:	847b      	strh	r3, [r7, #34]	; 0x22
 8004cf4:	687a      	ldr	r2, [r7, #4]
 8004cf6:	683b      	ldr	r3, [r7, #0]
 8004cf8:	781b      	ldrb	r3, [r3, #0]
 8004cfa:	009b      	lsls	r3, r3, #2
 8004cfc:	441a      	add	r2, r3
 8004cfe:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 8004d00:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8004d04:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8004d08:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8004d0c:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8004d10:	b29b      	uxth	r3, r3
 8004d12:	8013      	strh	r3, [r2, #0]
    }
  }

  return HAL_OK;
 8004d14:	2300      	movs	r3, #0
}
 8004d16:	4618      	mov	r0, r3
 8004d18:	3734      	adds	r7, #52	; 0x34
 8004d1a:	46bd      	mov	sp, r7
 8004d1c:	bc80      	pop	{r7}
 8004d1e:	4770      	bx	lr

08004d20 <USB_EPStartXfer>:
  * @param  USBx Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPStartXfer(USB_TypeDef *USBx, USB_EPTypeDef *ep)
{
 8004d20:	b580      	push	{r7, lr}
 8004d22:	b0c4      	sub	sp, #272	; 0x110
 8004d24:	af00      	add	r7, sp, #0
 8004d26:	1d3b      	adds	r3, r7, #4
 8004d28:	6018      	str	r0, [r3, #0]
 8004d2a:	463b      	mov	r3, r7
 8004d2c:	6019      	str	r1, [r3, #0]
  uint32_t len;
  uint16_t pmabuffer;
  uint16_t wEPVal;

  /* IN endpoint */
  if (ep->is_in == 1U)
 8004d2e:	463b      	mov	r3, r7
 8004d30:	681b      	ldr	r3, [r3, #0]
 8004d32:	785b      	ldrb	r3, [r3, #1]
 8004d34:	2b01      	cmp	r3, #1
 8004d36:	f040 8557 	bne.w	80057e8 <USB_EPStartXfer+0xac8>
  {
    /*Multi packet transfer*/
    if (ep->xfer_len > ep->maxpacket)
 8004d3a:	463b      	mov	r3, r7
 8004d3c:	681b      	ldr	r3, [r3, #0]
 8004d3e:	699a      	ldr	r2, [r3, #24]
 8004d40:	463b      	mov	r3, r7
 8004d42:	681b      	ldr	r3, [r3, #0]
 8004d44:	691b      	ldr	r3, [r3, #16]
 8004d46:	429a      	cmp	r2, r3
 8004d48:	d905      	bls.n	8004d56 <USB_EPStartXfer+0x36>
    {
      len = ep->maxpacket;
 8004d4a:	463b      	mov	r3, r7
 8004d4c:	681b      	ldr	r3, [r3, #0]
 8004d4e:	691b      	ldr	r3, [r3, #16]
 8004d50:	f8c7 310c 	str.w	r3, [r7, #268]	; 0x10c
 8004d54:	e004      	b.n	8004d60 <USB_EPStartXfer+0x40>
    }
    else
    {
      len = ep->xfer_len;
 8004d56:	463b      	mov	r3, r7
 8004d58:	681b      	ldr	r3, [r3, #0]
 8004d5a:	699b      	ldr	r3, [r3, #24]
 8004d5c:	f8c7 310c 	str.w	r3, [r7, #268]	; 0x10c
    }

    /* configure and validate Tx endpoint */
    if (ep->doublebuffer == 0U)
 8004d60:	463b      	mov	r3, r7
 8004d62:	681b      	ldr	r3, [r3, #0]
 8004d64:	7b1b      	ldrb	r3, [r3, #12]
 8004d66:	2b00      	cmp	r3, #0
 8004d68:	d12c      	bne.n	8004dc4 <USB_EPStartXfer+0xa4>
    {
      USB_WritePMA(USBx, ep->xfer_buff, ep->pmaadress, (uint16_t)len);
 8004d6a:	463b      	mov	r3, r7
 8004d6c:	681b      	ldr	r3, [r3, #0]
 8004d6e:	6959      	ldr	r1, [r3, #20]
 8004d70:	463b      	mov	r3, r7
 8004d72:	681b      	ldr	r3, [r3, #0]
 8004d74:	88da      	ldrh	r2, [r3, #6]
 8004d76:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8004d7a:	b29b      	uxth	r3, r3
 8004d7c:	1d38      	adds	r0, r7, #4
 8004d7e:	6800      	ldr	r0, [r0, #0]
 8004d80:	f001 fa2c 	bl	80061dc <USB_WritePMA>
      PCD_SET_EP_TX_CNT(USBx, ep->num, len);
 8004d84:	1d3b      	adds	r3, r7, #4
 8004d86:	681b      	ldr	r3, [r3, #0]
 8004d88:	617b      	str	r3, [r7, #20]
 8004d8a:	1d3b      	adds	r3, r7, #4
 8004d8c:	681b      	ldr	r3, [r3, #0]
 8004d8e:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8004d92:	b29b      	uxth	r3, r3
 8004d94:	461a      	mov	r2, r3
 8004d96:	697b      	ldr	r3, [r7, #20]
 8004d98:	4413      	add	r3, r2
 8004d9a:	617b      	str	r3, [r7, #20]
 8004d9c:	463b      	mov	r3, r7
 8004d9e:	681b      	ldr	r3, [r3, #0]
 8004da0:	781b      	ldrb	r3, [r3, #0]
 8004da2:	011a      	lsls	r2, r3, #4
 8004da4:	697b      	ldr	r3, [r7, #20]
 8004da6:	4413      	add	r3, r2
 8004da8:	f203 4204 	addw	r2, r3, #1028	; 0x404
 8004dac:	f107 0310 	add.w	r3, r7, #16
 8004db0:	601a      	str	r2, [r3, #0]
 8004db2:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8004db6:	b29a      	uxth	r2, r3
 8004db8:	f107 0310 	add.w	r3, r7, #16
 8004dbc:	681b      	ldr	r3, [r3, #0]
 8004dbe:	801a      	strh	r2, [r3, #0]
 8004dc0:	f000 bcdd 	b.w	800577e <USB_EPStartXfer+0xa5e>
    }
    else
    {
      /* double buffer bulk management */
      if (ep->type == EP_TYPE_BULK)
 8004dc4:	463b      	mov	r3, r7
 8004dc6:	681b      	ldr	r3, [r3, #0]
 8004dc8:	78db      	ldrb	r3, [r3, #3]
 8004dca:	2b02      	cmp	r3, #2
 8004dcc:	f040 8347 	bne.w	800545e <USB_EPStartXfer+0x73e>
      {
        if (ep->xfer_len_db > ep->maxpacket)
 8004dd0:	463b      	mov	r3, r7
 8004dd2:	681b      	ldr	r3, [r3, #0]
 8004dd4:	6a1a      	ldr	r2, [r3, #32]
 8004dd6:	463b      	mov	r3, r7
 8004dd8:	681b      	ldr	r3, [r3, #0]
 8004dda:	691b      	ldr	r3, [r3, #16]
 8004ddc:	429a      	cmp	r2, r3
 8004dde:	f240 82eb 	bls.w	80053b8 <USB_EPStartXfer+0x698>
        {
          /* enable double buffer */
          PCD_SET_EP_DBUF(USBx, ep->num);
 8004de2:	1d3b      	adds	r3, r7, #4
 8004de4:	681a      	ldr	r2, [r3, #0]
 8004de6:	463b      	mov	r3, r7
 8004de8:	681b      	ldr	r3, [r3, #0]
 8004dea:	781b      	ldrb	r3, [r3, #0]
 8004dec:	009b      	lsls	r3, r3, #2
 8004dee:	4413      	add	r3, r2
 8004df0:	881b      	ldrh	r3, [r3, #0]
 8004df2:	b29b      	uxth	r3, r3
 8004df4:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8004df8:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8004dfc:	f8a7 305a 	strh.w	r3, [r7, #90]	; 0x5a
 8004e00:	1d3b      	adds	r3, r7, #4
 8004e02:	681a      	ldr	r2, [r3, #0]
 8004e04:	463b      	mov	r3, r7
 8004e06:	681b      	ldr	r3, [r3, #0]
 8004e08:	781b      	ldrb	r3, [r3, #0]
 8004e0a:	009b      	lsls	r3, r3, #2
 8004e0c:	441a      	add	r2, r3
 8004e0e:	f8b7 305a 	ldrh.w	r3, [r7, #90]	; 0x5a
 8004e12:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8004e16:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8004e1a:	f443 4301 	orr.w	r3, r3, #33024	; 0x8100
 8004e1e:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8004e22:	b29b      	uxth	r3, r3
 8004e24:	8013      	strh	r3, [r2, #0]

          /* each Time to write in PMA xfer_len_db will */
          ep->xfer_len_db -= len;
 8004e26:	463b      	mov	r3, r7
 8004e28:	681b      	ldr	r3, [r3, #0]
 8004e2a:	6a1a      	ldr	r2, [r3, #32]
 8004e2c:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8004e30:	1ad2      	subs	r2, r2, r3
 8004e32:	463b      	mov	r3, r7
 8004e34:	681b      	ldr	r3, [r3, #0]
 8004e36:	621a      	str	r2, [r3, #32]

          /* Fill the two first buffer in the Buffer0 & Buffer1 */
          if ((PCD_GET_ENDPOINT(USBx, ep->num) & USB_EP_DTOG_TX) != 0U)
 8004e38:	1d3b      	adds	r3, r7, #4
 8004e3a:	681a      	ldr	r2, [r3, #0]
 8004e3c:	463b      	mov	r3, r7
 8004e3e:	681b      	ldr	r3, [r3, #0]
 8004e40:	781b      	ldrb	r3, [r3, #0]
 8004e42:	009b      	lsls	r3, r3, #2
 8004e44:	4413      	add	r3, r2
 8004e46:	881b      	ldrh	r3, [r3, #0]
 8004e48:	b29b      	uxth	r3, r3
 8004e4a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004e4e:	2b00      	cmp	r3, #0
 8004e50:	f000 8159 	beq.w	8005106 <USB_EPStartXfer+0x3e6>
          {
            /* Set the Double buffer counter for pmabuffer1 */
            PCD_SET_EP_DBUF1_CNT(USBx, ep->num, ep->is_in, len);
 8004e54:	1d3b      	adds	r3, r7, #4
 8004e56:	681b      	ldr	r3, [r3, #0]
 8004e58:	637b      	str	r3, [r7, #52]	; 0x34
 8004e5a:	463b      	mov	r3, r7
 8004e5c:	681b      	ldr	r3, [r3, #0]
 8004e5e:	785b      	ldrb	r3, [r3, #1]
 8004e60:	2b00      	cmp	r3, #0
 8004e62:	d164      	bne.n	8004f2e <USB_EPStartXfer+0x20e>
 8004e64:	1d3b      	adds	r3, r7, #4
 8004e66:	681b      	ldr	r3, [r3, #0]
 8004e68:	62fb      	str	r3, [r7, #44]	; 0x2c
 8004e6a:	1d3b      	adds	r3, r7, #4
 8004e6c:	681b      	ldr	r3, [r3, #0]
 8004e6e:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8004e72:	b29b      	uxth	r3, r3
 8004e74:	461a      	mov	r2, r3
 8004e76:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004e78:	4413      	add	r3, r2
 8004e7a:	62fb      	str	r3, [r7, #44]	; 0x2c
 8004e7c:	463b      	mov	r3, r7
 8004e7e:	681b      	ldr	r3, [r3, #0]
 8004e80:	781b      	ldrb	r3, [r3, #0]
 8004e82:	011a      	lsls	r2, r3, #4
 8004e84:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004e86:	4413      	add	r3, r2
 8004e88:	f203 430c 	addw	r3, r3, #1036	; 0x40c
 8004e8c:	62bb      	str	r3, [r7, #40]	; 0x28
 8004e8e:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8004e92:	2b00      	cmp	r3, #0
 8004e94:	d112      	bne.n	8004ebc <USB_EPStartXfer+0x19c>
 8004e96:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004e98:	881b      	ldrh	r3, [r3, #0]
 8004e9a:	b29b      	uxth	r3, r3
 8004e9c:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 8004ea0:	b29a      	uxth	r2, r3
 8004ea2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004ea4:	801a      	strh	r2, [r3, #0]
 8004ea6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004ea8:	881b      	ldrh	r3, [r3, #0]
 8004eaa:	b29b      	uxth	r3, r3
 8004eac:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8004eb0:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8004eb4:	b29a      	uxth	r2, r3
 8004eb6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004eb8:	801a      	strh	r2, [r3, #0]
 8004eba:	e054      	b.n	8004f66 <USB_EPStartXfer+0x246>
 8004ebc:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8004ec0:	2b3e      	cmp	r3, #62	; 0x3e
 8004ec2:	d817      	bhi.n	8004ef4 <USB_EPStartXfer+0x1d4>
 8004ec4:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8004ec8:	085b      	lsrs	r3, r3, #1
 8004eca:	f8c7 3104 	str.w	r3, [r7, #260]	; 0x104
 8004ece:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8004ed2:	f003 0301 	and.w	r3, r3, #1
 8004ed6:	2b00      	cmp	r3, #0
 8004ed8:	d004      	beq.n	8004ee4 <USB_EPStartXfer+0x1c4>
 8004eda:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8004ede:	3301      	adds	r3, #1
 8004ee0:	f8c7 3104 	str.w	r3, [r7, #260]	; 0x104
 8004ee4:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8004ee8:	b29b      	uxth	r3, r3
 8004eea:	029b      	lsls	r3, r3, #10
 8004eec:	b29a      	uxth	r2, r3
 8004eee:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004ef0:	801a      	strh	r2, [r3, #0]
 8004ef2:	e038      	b.n	8004f66 <USB_EPStartXfer+0x246>
 8004ef4:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8004ef8:	095b      	lsrs	r3, r3, #5
 8004efa:	f8c7 3104 	str.w	r3, [r7, #260]	; 0x104
 8004efe:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8004f02:	f003 031f 	and.w	r3, r3, #31
 8004f06:	2b00      	cmp	r3, #0
 8004f08:	d104      	bne.n	8004f14 <USB_EPStartXfer+0x1f4>
 8004f0a:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8004f0e:	3b01      	subs	r3, #1
 8004f10:	f8c7 3104 	str.w	r3, [r7, #260]	; 0x104
 8004f14:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8004f18:	b29b      	uxth	r3, r3
 8004f1a:	029b      	lsls	r3, r3, #10
 8004f1c:	b29b      	uxth	r3, r3
 8004f1e:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8004f22:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8004f26:	b29a      	uxth	r2, r3
 8004f28:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004f2a:	801a      	strh	r2, [r3, #0]
 8004f2c:	e01b      	b.n	8004f66 <USB_EPStartXfer+0x246>
 8004f2e:	463b      	mov	r3, r7
 8004f30:	681b      	ldr	r3, [r3, #0]
 8004f32:	785b      	ldrb	r3, [r3, #1]
 8004f34:	2b01      	cmp	r3, #1
 8004f36:	d116      	bne.n	8004f66 <USB_EPStartXfer+0x246>
 8004f38:	1d3b      	adds	r3, r7, #4
 8004f3a:	681b      	ldr	r3, [r3, #0]
 8004f3c:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8004f40:	b29b      	uxth	r3, r3
 8004f42:	461a      	mov	r2, r3
 8004f44:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8004f46:	4413      	add	r3, r2
 8004f48:	637b      	str	r3, [r7, #52]	; 0x34
 8004f4a:	463b      	mov	r3, r7
 8004f4c:	681b      	ldr	r3, [r3, #0]
 8004f4e:	781b      	ldrb	r3, [r3, #0]
 8004f50:	011a      	lsls	r2, r3, #4
 8004f52:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8004f54:	4413      	add	r3, r2
 8004f56:	f203 430c 	addw	r3, r3, #1036	; 0x40c
 8004f5a:	633b      	str	r3, [r7, #48]	; 0x30
 8004f5c:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8004f60:	b29a      	uxth	r2, r3
 8004f62:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004f64:	801a      	strh	r2, [r3, #0]
            pmabuffer = ep->pmaaddr1;
 8004f66:	463b      	mov	r3, r7
 8004f68:	681b      	ldr	r3, [r3, #0]
 8004f6a:	895b      	ldrh	r3, [r3, #10]
 8004f6c:	f8a7 310a 	strh.w	r3, [r7, #266]	; 0x10a

            /* Write the user buffer to USB PMA */
            USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 8004f70:	463b      	mov	r3, r7
 8004f72:	681b      	ldr	r3, [r3, #0]
 8004f74:	6959      	ldr	r1, [r3, #20]
 8004f76:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8004f7a:	b29b      	uxth	r3, r3
 8004f7c:	f8b7 210a 	ldrh.w	r2, [r7, #266]	; 0x10a
 8004f80:	1d38      	adds	r0, r7, #4
 8004f82:	6800      	ldr	r0, [r0, #0]
 8004f84:	f001 f92a 	bl	80061dc <USB_WritePMA>
            ep->xfer_buff += len;
 8004f88:	463b      	mov	r3, r7
 8004f8a:	681b      	ldr	r3, [r3, #0]
 8004f8c:	695a      	ldr	r2, [r3, #20]
 8004f8e:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8004f92:	441a      	add	r2, r3
 8004f94:	463b      	mov	r3, r7
 8004f96:	681b      	ldr	r3, [r3, #0]
 8004f98:	615a      	str	r2, [r3, #20]

            if (ep->xfer_len_db > ep->maxpacket)
 8004f9a:	463b      	mov	r3, r7
 8004f9c:	681b      	ldr	r3, [r3, #0]
 8004f9e:	6a1a      	ldr	r2, [r3, #32]
 8004fa0:	463b      	mov	r3, r7
 8004fa2:	681b      	ldr	r3, [r3, #0]
 8004fa4:	691b      	ldr	r3, [r3, #16]
 8004fa6:	429a      	cmp	r2, r3
 8004fa8:	d909      	bls.n	8004fbe <USB_EPStartXfer+0x29e>
            {
              ep->xfer_len_db -= len;
 8004faa:	463b      	mov	r3, r7
 8004fac:	681b      	ldr	r3, [r3, #0]
 8004fae:	6a1a      	ldr	r2, [r3, #32]
 8004fb0:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8004fb4:	1ad2      	subs	r2, r2, r3
 8004fb6:	463b      	mov	r3, r7
 8004fb8:	681b      	ldr	r3, [r3, #0]
 8004fba:	621a      	str	r2, [r3, #32]
 8004fbc:	e008      	b.n	8004fd0 <USB_EPStartXfer+0x2b0>
            }
            else
            {
              len = ep->xfer_len_db;
 8004fbe:	463b      	mov	r3, r7
 8004fc0:	681b      	ldr	r3, [r3, #0]
 8004fc2:	6a1b      	ldr	r3, [r3, #32]
 8004fc4:	f8c7 310c 	str.w	r3, [r7, #268]	; 0x10c
              ep->xfer_len_db = 0U;
 8004fc8:	463b      	mov	r3, r7
 8004fca:	681b      	ldr	r3, [r3, #0]
 8004fcc:	2200      	movs	r2, #0
 8004fce:	621a      	str	r2, [r3, #32]
            }

            /* Set the Double buffer counter for pmabuffer0 */
            PCD_SET_EP_DBUF0_CNT(USBx, ep->num, ep->is_in, len);
 8004fd0:	463b      	mov	r3, r7
 8004fd2:	681b      	ldr	r3, [r3, #0]
 8004fd4:	785b      	ldrb	r3, [r3, #1]
 8004fd6:	2b00      	cmp	r3, #0
 8004fd8:	d164      	bne.n	80050a4 <USB_EPStartXfer+0x384>
 8004fda:	1d3b      	adds	r3, r7, #4
 8004fdc:	681b      	ldr	r3, [r3, #0]
 8004fde:	61fb      	str	r3, [r7, #28]
 8004fe0:	1d3b      	adds	r3, r7, #4
 8004fe2:	681b      	ldr	r3, [r3, #0]
 8004fe4:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8004fe8:	b29b      	uxth	r3, r3
 8004fea:	461a      	mov	r2, r3
 8004fec:	69fb      	ldr	r3, [r7, #28]
 8004fee:	4413      	add	r3, r2
 8004ff0:	61fb      	str	r3, [r7, #28]
 8004ff2:	463b      	mov	r3, r7
 8004ff4:	681b      	ldr	r3, [r3, #0]
 8004ff6:	781b      	ldrb	r3, [r3, #0]
 8004ff8:	011a      	lsls	r2, r3, #4
 8004ffa:	69fb      	ldr	r3, [r7, #28]
 8004ffc:	4413      	add	r3, r2
 8004ffe:	f203 4304 	addw	r3, r3, #1028	; 0x404
 8005002:	61bb      	str	r3, [r7, #24]
 8005004:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8005008:	2b00      	cmp	r3, #0
 800500a:	d112      	bne.n	8005032 <USB_EPStartXfer+0x312>
 800500c:	69bb      	ldr	r3, [r7, #24]
 800500e:	881b      	ldrh	r3, [r3, #0]
 8005010:	b29b      	uxth	r3, r3
 8005012:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 8005016:	b29a      	uxth	r2, r3
 8005018:	69bb      	ldr	r3, [r7, #24]
 800501a:	801a      	strh	r2, [r3, #0]
 800501c:	69bb      	ldr	r3, [r7, #24]
 800501e:	881b      	ldrh	r3, [r3, #0]
 8005020:	b29b      	uxth	r3, r3
 8005022:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8005026:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800502a:	b29a      	uxth	r2, r3
 800502c:	69bb      	ldr	r3, [r7, #24]
 800502e:	801a      	strh	r2, [r3, #0]
 8005030:	e057      	b.n	80050e2 <USB_EPStartXfer+0x3c2>
 8005032:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8005036:	2b3e      	cmp	r3, #62	; 0x3e
 8005038:	d817      	bhi.n	800506a <USB_EPStartXfer+0x34a>
 800503a:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 800503e:	085b      	lsrs	r3, r3, #1
 8005040:	f8c7 3100 	str.w	r3, [r7, #256]	; 0x100
 8005044:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8005048:	f003 0301 	and.w	r3, r3, #1
 800504c:	2b00      	cmp	r3, #0
 800504e:	d004      	beq.n	800505a <USB_EPStartXfer+0x33a>
 8005050:	f8d7 3100 	ldr.w	r3, [r7, #256]	; 0x100
 8005054:	3301      	adds	r3, #1
 8005056:	f8c7 3100 	str.w	r3, [r7, #256]	; 0x100
 800505a:	f8d7 3100 	ldr.w	r3, [r7, #256]	; 0x100
 800505e:	b29b      	uxth	r3, r3
 8005060:	029b      	lsls	r3, r3, #10
 8005062:	b29a      	uxth	r2, r3
 8005064:	69bb      	ldr	r3, [r7, #24]
 8005066:	801a      	strh	r2, [r3, #0]
 8005068:	e03b      	b.n	80050e2 <USB_EPStartXfer+0x3c2>
 800506a:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 800506e:	095b      	lsrs	r3, r3, #5
 8005070:	f8c7 3100 	str.w	r3, [r7, #256]	; 0x100
 8005074:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8005078:	f003 031f 	and.w	r3, r3, #31
 800507c:	2b00      	cmp	r3, #0
 800507e:	d104      	bne.n	800508a <USB_EPStartXfer+0x36a>
 8005080:	f8d7 3100 	ldr.w	r3, [r7, #256]	; 0x100
 8005084:	3b01      	subs	r3, #1
 8005086:	f8c7 3100 	str.w	r3, [r7, #256]	; 0x100
 800508a:	f8d7 3100 	ldr.w	r3, [r7, #256]	; 0x100
 800508e:	b29b      	uxth	r3, r3
 8005090:	029b      	lsls	r3, r3, #10
 8005092:	b29b      	uxth	r3, r3
 8005094:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8005098:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800509c:	b29a      	uxth	r2, r3
 800509e:	69bb      	ldr	r3, [r7, #24]
 80050a0:	801a      	strh	r2, [r3, #0]
 80050a2:	e01e      	b.n	80050e2 <USB_EPStartXfer+0x3c2>
 80050a4:	463b      	mov	r3, r7
 80050a6:	681b      	ldr	r3, [r3, #0]
 80050a8:	785b      	ldrb	r3, [r3, #1]
 80050aa:	2b01      	cmp	r3, #1
 80050ac:	d119      	bne.n	80050e2 <USB_EPStartXfer+0x3c2>
 80050ae:	1d3b      	adds	r3, r7, #4
 80050b0:	681b      	ldr	r3, [r3, #0]
 80050b2:	627b      	str	r3, [r7, #36]	; 0x24
 80050b4:	1d3b      	adds	r3, r7, #4
 80050b6:	681b      	ldr	r3, [r3, #0]
 80050b8:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 80050bc:	b29b      	uxth	r3, r3
 80050be:	461a      	mov	r2, r3
 80050c0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80050c2:	4413      	add	r3, r2
 80050c4:	627b      	str	r3, [r7, #36]	; 0x24
 80050c6:	463b      	mov	r3, r7
 80050c8:	681b      	ldr	r3, [r3, #0]
 80050ca:	781b      	ldrb	r3, [r3, #0]
 80050cc:	011a      	lsls	r2, r3, #4
 80050ce:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80050d0:	4413      	add	r3, r2
 80050d2:	f203 4304 	addw	r3, r3, #1028	; 0x404
 80050d6:	623b      	str	r3, [r7, #32]
 80050d8:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 80050dc:	b29a      	uxth	r2, r3
 80050de:	6a3b      	ldr	r3, [r7, #32]
 80050e0:	801a      	strh	r2, [r3, #0]
            pmabuffer = ep->pmaaddr0;
 80050e2:	463b      	mov	r3, r7
 80050e4:	681b      	ldr	r3, [r3, #0]
 80050e6:	891b      	ldrh	r3, [r3, #8]
 80050e8:	f8a7 310a 	strh.w	r3, [r7, #266]	; 0x10a

            /* Write the user buffer to USB PMA */
            USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 80050ec:	463b      	mov	r3, r7
 80050ee:	681b      	ldr	r3, [r3, #0]
 80050f0:	6959      	ldr	r1, [r3, #20]
 80050f2:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 80050f6:	b29b      	uxth	r3, r3
 80050f8:	f8b7 210a 	ldrh.w	r2, [r7, #266]	; 0x10a
 80050fc:	1d38      	adds	r0, r7, #4
 80050fe:	6800      	ldr	r0, [r0, #0]
 8005100:	f001 f86c 	bl	80061dc <USB_WritePMA>
 8005104:	e33b      	b.n	800577e <USB_EPStartXfer+0xa5e>
          }
          else
          {
            /* Set the Double buffer counter for pmabuffer0 */
            PCD_SET_EP_DBUF0_CNT(USBx, ep->num, ep->is_in, len);
 8005106:	463b      	mov	r3, r7
 8005108:	681b      	ldr	r3, [r3, #0]
 800510a:	785b      	ldrb	r3, [r3, #1]
 800510c:	2b00      	cmp	r3, #0
 800510e:	d164      	bne.n	80051da <USB_EPStartXfer+0x4ba>
 8005110:	1d3b      	adds	r3, r7, #4
 8005112:	681b      	ldr	r3, [r3, #0]
 8005114:	64fb      	str	r3, [r7, #76]	; 0x4c
 8005116:	1d3b      	adds	r3, r7, #4
 8005118:	681b      	ldr	r3, [r3, #0]
 800511a:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 800511e:	b29b      	uxth	r3, r3
 8005120:	461a      	mov	r2, r3
 8005122:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8005124:	4413      	add	r3, r2
 8005126:	64fb      	str	r3, [r7, #76]	; 0x4c
 8005128:	463b      	mov	r3, r7
 800512a:	681b      	ldr	r3, [r3, #0]
 800512c:	781b      	ldrb	r3, [r3, #0]
 800512e:	011a      	lsls	r2, r3, #4
 8005130:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8005132:	4413      	add	r3, r2
 8005134:	f203 4304 	addw	r3, r3, #1028	; 0x404
 8005138:	64bb      	str	r3, [r7, #72]	; 0x48
 800513a:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 800513e:	2b00      	cmp	r3, #0
 8005140:	d112      	bne.n	8005168 <USB_EPStartXfer+0x448>
 8005142:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8005144:	881b      	ldrh	r3, [r3, #0]
 8005146:	b29b      	uxth	r3, r3
 8005148:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 800514c:	b29a      	uxth	r2, r3
 800514e:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8005150:	801a      	strh	r2, [r3, #0]
 8005152:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8005154:	881b      	ldrh	r3, [r3, #0]
 8005156:	b29b      	uxth	r3, r3
 8005158:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800515c:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8005160:	b29a      	uxth	r2, r3
 8005162:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8005164:	801a      	strh	r2, [r3, #0]
 8005166:	e057      	b.n	8005218 <USB_EPStartXfer+0x4f8>
 8005168:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 800516c:	2b3e      	cmp	r3, #62	; 0x3e
 800516e:	d817      	bhi.n	80051a0 <USB_EPStartXfer+0x480>
 8005170:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8005174:	085b      	lsrs	r3, r3, #1
 8005176:	f8c7 30fc 	str.w	r3, [r7, #252]	; 0xfc
 800517a:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 800517e:	f003 0301 	and.w	r3, r3, #1
 8005182:	2b00      	cmp	r3, #0
 8005184:	d004      	beq.n	8005190 <USB_EPStartXfer+0x470>
 8005186:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 800518a:	3301      	adds	r3, #1
 800518c:	f8c7 30fc 	str.w	r3, [r7, #252]	; 0xfc
 8005190:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8005194:	b29b      	uxth	r3, r3
 8005196:	029b      	lsls	r3, r3, #10
 8005198:	b29a      	uxth	r2, r3
 800519a:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800519c:	801a      	strh	r2, [r3, #0]
 800519e:	e03b      	b.n	8005218 <USB_EPStartXfer+0x4f8>
 80051a0:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 80051a4:	095b      	lsrs	r3, r3, #5
 80051a6:	f8c7 30fc 	str.w	r3, [r7, #252]	; 0xfc
 80051aa:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 80051ae:	f003 031f 	and.w	r3, r3, #31
 80051b2:	2b00      	cmp	r3, #0
 80051b4:	d104      	bne.n	80051c0 <USB_EPStartXfer+0x4a0>
 80051b6:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 80051ba:	3b01      	subs	r3, #1
 80051bc:	f8c7 30fc 	str.w	r3, [r7, #252]	; 0xfc
 80051c0:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 80051c4:	b29b      	uxth	r3, r3
 80051c6:	029b      	lsls	r3, r3, #10
 80051c8:	b29b      	uxth	r3, r3
 80051ca:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 80051ce:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 80051d2:	b29a      	uxth	r2, r3
 80051d4:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80051d6:	801a      	strh	r2, [r3, #0]
 80051d8:	e01e      	b.n	8005218 <USB_EPStartXfer+0x4f8>
 80051da:	463b      	mov	r3, r7
 80051dc:	681b      	ldr	r3, [r3, #0]
 80051de:	785b      	ldrb	r3, [r3, #1]
 80051e0:	2b01      	cmp	r3, #1
 80051e2:	d119      	bne.n	8005218 <USB_EPStartXfer+0x4f8>
 80051e4:	1d3b      	adds	r3, r7, #4
 80051e6:	681b      	ldr	r3, [r3, #0]
 80051e8:	657b      	str	r3, [r7, #84]	; 0x54
 80051ea:	1d3b      	adds	r3, r7, #4
 80051ec:	681b      	ldr	r3, [r3, #0]
 80051ee:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 80051f2:	b29b      	uxth	r3, r3
 80051f4:	461a      	mov	r2, r3
 80051f6:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80051f8:	4413      	add	r3, r2
 80051fa:	657b      	str	r3, [r7, #84]	; 0x54
 80051fc:	463b      	mov	r3, r7
 80051fe:	681b      	ldr	r3, [r3, #0]
 8005200:	781b      	ldrb	r3, [r3, #0]
 8005202:	011a      	lsls	r2, r3, #4
 8005204:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8005206:	4413      	add	r3, r2
 8005208:	f203 4304 	addw	r3, r3, #1028	; 0x404
 800520c:	653b      	str	r3, [r7, #80]	; 0x50
 800520e:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8005212:	b29a      	uxth	r2, r3
 8005214:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8005216:	801a      	strh	r2, [r3, #0]
            pmabuffer = ep->pmaaddr0;
 8005218:	463b      	mov	r3, r7
 800521a:	681b      	ldr	r3, [r3, #0]
 800521c:	891b      	ldrh	r3, [r3, #8]
 800521e:	f8a7 310a 	strh.w	r3, [r7, #266]	; 0x10a

            /* Write the user buffer to USB PMA */
            USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 8005222:	463b      	mov	r3, r7
 8005224:	681b      	ldr	r3, [r3, #0]
 8005226:	6959      	ldr	r1, [r3, #20]
 8005228:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 800522c:	b29b      	uxth	r3, r3
 800522e:	f8b7 210a 	ldrh.w	r2, [r7, #266]	; 0x10a
 8005232:	1d38      	adds	r0, r7, #4
 8005234:	6800      	ldr	r0, [r0, #0]
 8005236:	f000 ffd1 	bl	80061dc <USB_WritePMA>
            ep->xfer_buff += len;
 800523a:	463b      	mov	r3, r7
 800523c:	681b      	ldr	r3, [r3, #0]
 800523e:	695a      	ldr	r2, [r3, #20]
 8005240:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8005244:	441a      	add	r2, r3
 8005246:	463b      	mov	r3, r7
 8005248:	681b      	ldr	r3, [r3, #0]
 800524a:	615a      	str	r2, [r3, #20]

            if (ep->xfer_len_db > ep->maxpacket)
 800524c:	463b      	mov	r3, r7
 800524e:	681b      	ldr	r3, [r3, #0]
 8005250:	6a1a      	ldr	r2, [r3, #32]
 8005252:	463b      	mov	r3, r7
 8005254:	681b      	ldr	r3, [r3, #0]
 8005256:	691b      	ldr	r3, [r3, #16]
 8005258:	429a      	cmp	r2, r3
 800525a:	d909      	bls.n	8005270 <USB_EPStartXfer+0x550>
            {
              ep->xfer_len_db -= len;
 800525c:	463b      	mov	r3, r7
 800525e:	681b      	ldr	r3, [r3, #0]
 8005260:	6a1a      	ldr	r2, [r3, #32]
 8005262:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8005266:	1ad2      	subs	r2, r2, r3
 8005268:	463b      	mov	r3, r7
 800526a:	681b      	ldr	r3, [r3, #0]
 800526c:	621a      	str	r2, [r3, #32]
 800526e:	e008      	b.n	8005282 <USB_EPStartXfer+0x562>
            }
            else
            {
              len = ep->xfer_len_db;
 8005270:	463b      	mov	r3, r7
 8005272:	681b      	ldr	r3, [r3, #0]
 8005274:	6a1b      	ldr	r3, [r3, #32]
 8005276:	f8c7 310c 	str.w	r3, [r7, #268]	; 0x10c
              ep->xfer_len_db = 0U;
 800527a:	463b      	mov	r3, r7
 800527c:	681b      	ldr	r3, [r3, #0]
 800527e:	2200      	movs	r2, #0
 8005280:	621a      	str	r2, [r3, #32]
            }

            /* Set the Double buffer counter for pmabuffer1 */
            PCD_SET_EP_DBUF1_CNT(USBx, ep->num, ep->is_in, len);
 8005282:	1d3b      	adds	r3, r7, #4
 8005284:	681b      	ldr	r3, [r3, #0]
 8005286:	647b      	str	r3, [r7, #68]	; 0x44
 8005288:	463b      	mov	r3, r7
 800528a:	681b      	ldr	r3, [r3, #0]
 800528c:	785b      	ldrb	r3, [r3, #1]
 800528e:	2b00      	cmp	r3, #0
 8005290:	d164      	bne.n	800535c <USB_EPStartXfer+0x63c>
 8005292:	1d3b      	adds	r3, r7, #4
 8005294:	681b      	ldr	r3, [r3, #0]
 8005296:	63fb      	str	r3, [r7, #60]	; 0x3c
 8005298:	1d3b      	adds	r3, r7, #4
 800529a:	681b      	ldr	r3, [r3, #0]
 800529c:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 80052a0:	b29b      	uxth	r3, r3
 80052a2:	461a      	mov	r2, r3
 80052a4:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80052a6:	4413      	add	r3, r2
 80052a8:	63fb      	str	r3, [r7, #60]	; 0x3c
 80052aa:	463b      	mov	r3, r7
 80052ac:	681b      	ldr	r3, [r3, #0]
 80052ae:	781b      	ldrb	r3, [r3, #0]
 80052b0:	011a      	lsls	r2, r3, #4
 80052b2:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80052b4:	4413      	add	r3, r2
 80052b6:	f203 430c 	addw	r3, r3, #1036	; 0x40c
 80052ba:	63bb      	str	r3, [r7, #56]	; 0x38
 80052bc:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 80052c0:	2b00      	cmp	r3, #0
 80052c2:	d112      	bne.n	80052ea <USB_EPStartXfer+0x5ca>
 80052c4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80052c6:	881b      	ldrh	r3, [r3, #0]
 80052c8:	b29b      	uxth	r3, r3
 80052ca:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 80052ce:	b29a      	uxth	r2, r3
 80052d0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80052d2:	801a      	strh	r2, [r3, #0]
 80052d4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80052d6:	881b      	ldrh	r3, [r3, #0]
 80052d8:	b29b      	uxth	r3, r3
 80052da:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 80052de:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 80052e2:	b29a      	uxth	r2, r3
 80052e4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80052e6:	801a      	strh	r2, [r3, #0]
 80052e8:	e054      	b.n	8005394 <USB_EPStartXfer+0x674>
 80052ea:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 80052ee:	2b3e      	cmp	r3, #62	; 0x3e
 80052f0:	d817      	bhi.n	8005322 <USB_EPStartXfer+0x602>
 80052f2:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 80052f6:	085b      	lsrs	r3, r3, #1
 80052f8:	f8c7 30f8 	str.w	r3, [r7, #248]	; 0xf8
 80052fc:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8005300:	f003 0301 	and.w	r3, r3, #1
 8005304:	2b00      	cmp	r3, #0
 8005306:	d004      	beq.n	8005312 <USB_EPStartXfer+0x5f2>
 8005308:	f8d7 30f8 	ldr.w	r3, [r7, #248]	; 0xf8
 800530c:	3301      	adds	r3, #1
 800530e:	f8c7 30f8 	str.w	r3, [r7, #248]	; 0xf8
 8005312:	f8d7 30f8 	ldr.w	r3, [r7, #248]	; 0xf8
 8005316:	b29b      	uxth	r3, r3
 8005318:	029b      	lsls	r3, r3, #10
 800531a:	b29a      	uxth	r2, r3
 800531c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800531e:	801a      	strh	r2, [r3, #0]
 8005320:	e038      	b.n	8005394 <USB_EPStartXfer+0x674>
 8005322:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8005326:	095b      	lsrs	r3, r3, #5
 8005328:	f8c7 30f8 	str.w	r3, [r7, #248]	; 0xf8
 800532c:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8005330:	f003 031f 	and.w	r3, r3, #31
 8005334:	2b00      	cmp	r3, #0
 8005336:	d104      	bne.n	8005342 <USB_EPStartXfer+0x622>
 8005338:	f8d7 30f8 	ldr.w	r3, [r7, #248]	; 0xf8
 800533c:	3b01      	subs	r3, #1
 800533e:	f8c7 30f8 	str.w	r3, [r7, #248]	; 0xf8
 8005342:	f8d7 30f8 	ldr.w	r3, [r7, #248]	; 0xf8
 8005346:	b29b      	uxth	r3, r3
 8005348:	029b      	lsls	r3, r3, #10
 800534a:	b29b      	uxth	r3, r3
 800534c:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8005350:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8005354:	b29a      	uxth	r2, r3
 8005356:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005358:	801a      	strh	r2, [r3, #0]
 800535a:	e01b      	b.n	8005394 <USB_EPStartXfer+0x674>
 800535c:	463b      	mov	r3, r7
 800535e:	681b      	ldr	r3, [r3, #0]
 8005360:	785b      	ldrb	r3, [r3, #1]
 8005362:	2b01      	cmp	r3, #1
 8005364:	d116      	bne.n	8005394 <USB_EPStartXfer+0x674>
 8005366:	1d3b      	adds	r3, r7, #4
 8005368:	681b      	ldr	r3, [r3, #0]
 800536a:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 800536e:	b29b      	uxth	r3, r3
 8005370:	461a      	mov	r2, r3
 8005372:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8005374:	4413      	add	r3, r2
 8005376:	647b      	str	r3, [r7, #68]	; 0x44
 8005378:	463b      	mov	r3, r7
 800537a:	681b      	ldr	r3, [r3, #0]
 800537c:	781b      	ldrb	r3, [r3, #0]
 800537e:	011a      	lsls	r2, r3, #4
 8005380:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8005382:	4413      	add	r3, r2
 8005384:	f203 430c 	addw	r3, r3, #1036	; 0x40c
 8005388:	643b      	str	r3, [r7, #64]	; 0x40
 800538a:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 800538e:	b29a      	uxth	r2, r3
 8005390:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8005392:	801a      	strh	r2, [r3, #0]
            pmabuffer = ep->pmaaddr1;
 8005394:	463b      	mov	r3, r7
 8005396:	681b      	ldr	r3, [r3, #0]
 8005398:	895b      	ldrh	r3, [r3, #10]
 800539a:	f8a7 310a 	strh.w	r3, [r7, #266]	; 0x10a

            /* Write the user buffer to USB PMA */
            USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 800539e:	463b      	mov	r3, r7
 80053a0:	681b      	ldr	r3, [r3, #0]
 80053a2:	6959      	ldr	r1, [r3, #20]
 80053a4:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 80053a8:	b29b      	uxth	r3, r3
 80053aa:	f8b7 210a 	ldrh.w	r2, [r7, #266]	; 0x10a
 80053ae:	1d38      	adds	r0, r7, #4
 80053b0:	6800      	ldr	r0, [r0, #0]
 80053b2:	f000 ff13 	bl	80061dc <USB_WritePMA>
 80053b6:	e1e2      	b.n	800577e <USB_EPStartXfer+0xa5e>
          }
        }
        /* auto Switch to single buffer mode when transfer <Mps no need to manage in double buffer */
        else
        {
          len = ep->xfer_len_db;
 80053b8:	463b      	mov	r3, r7
 80053ba:	681b      	ldr	r3, [r3, #0]
 80053bc:	6a1b      	ldr	r3, [r3, #32]
 80053be:	f8c7 310c 	str.w	r3, [r7, #268]	; 0x10c

          /* disable double buffer mode */
          PCD_CLEAR_EP_DBUF(USBx, ep->num);
 80053c2:	1d3b      	adds	r3, r7, #4
 80053c4:	681a      	ldr	r2, [r3, #0]
 80053c6:	463b      	mov	r3, r7
 80053c8:	681b      	ldr	r3, [r3, #0]
 80053ca:	781b      	ldrb	r3, [r3, #0]
 80053cc:	009b      	lsls	r3, r3, #2
 80053ce:	4413      	add	r3, r2
 80053d0:	881b      	ldrh	r3, [r3, #0]
 80053d2:	b29b      	uxth	r3, r3
 80053d4:	f423 43e2 	bic.w	r3, r3, #28928	; 0x7100
 80053d8:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80053dc:	f8a7 3066 	strh.w	r3, [r7, #102]	; 0x66
 80053e0:	1d3b      	adds	r3, r7, #4
 80053e2:	681a      	ldr	r2, [r3, #0]
 80053e4:	463b      	mov	r3, r7
 80053e6:	681b      	ldr	r3, [r3, #0]
 80053e8:	781b      	ldrb	r3, [r3, #0]
 80053ea:	009b      	lsls	r3, r3, #2
 80053ec:	441a      	add	r2, r3
 80053ee:	f8b7 3066 	ldrh.w	r3, [r7, #102]	; 0x66
 80053f2:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 80053f6:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 80053fa:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80053fe:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8005402:	b29b      	uxth	r3, r3
 8005404:	8013      	strh	r3, [r2, #0]

          /* Set Tx count with nbre of byte to be transmitted */
          PCD_SET_EP_TX_CNT(USBx, ep->num, len);
 8005406:	1d3b      	adds	r3, r7, #4
 8005408:	681b      	ldr	r3, [r3, #0]
 800540a:	663b      	str	r3, [r7, #96]	; 0x60
 800540c:	1d3b      	adds	r3, r7, #4
 800540e:	681b      	ldr	r3, [r3, #0]
 8005410:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8005414:	b29b      	uxth	r3, r3
 8005416:	461a      	mov	r2, r3
 8005418:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 800541a:	4413      	add	r3, r2
 800541c:	663b      	str	r3, [r7, #96]	; 0x60
 800541e:	463b      	mov	r3, r7
 8005420:	681b      	ldr	r3, [r3, #0]
 8005422:	781b      	ldrb	r3, [r3, #0]
 8005424:	011a      	lsls	r2, r3, #4
 8005426:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8005428:	4413      	add	r3, r2
 800542a:	f203 4304 	addw	r3, r3, #1028	; 0x404
 800542e:	65fb      	str	r3, [r7, #92]	; 0x5c
 8005430:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8005434:	b29a      	uxth	r2, r3
 8005436:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8005438:	801a      	strh	r2, [r3, #0]
          pmabuffer = ep->pmaaddr0;
 800543a:	463b      	mov	r3, r7
 800543c:	681b      	ldr	r3, [r3, #0]
 800543e:	891b      	ldrh	r3, [r3, #8]
 8005440:	f8a7 310a 	strh.w	r3, [r7, #266]	; 0x10a

          /* Write the user buffer to USB PMA */
          USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 8005444:	463b      	mov	r3, r7
 8005446:	681b      	ldr	r3, [r3, #0]
 8005448:	6959      	ldr	r1, [r3, #20]
 800544a:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 800544e:	b29b      	uxth	r3, r3
 8005450:	f8b7 210a 	ldrh.w	r2, [r7, #266]	; 0x10a
 8005454:	1d38      	adds	r0, r7, #4
 8005456:	6800      	ldr	r0, [r0, #0]
 8005458:	f000 fec0 	bl	80061dc <USB_WritePMA>
 800545c:	e18f      	b.n	800577e <USB_EPStartXfer+0xa5e>

      /* manage isochronous double buffer IN mode */
      else
      {
        /* Write the data to the USB endpoint */
        if ((PCD_GET_ENDPOINT(USBx, ep->num) & USB_EP_DTOG_TX) != 0U)
 800545e:	1d3b      	adds	r3, r7, #4
 8005460:	681a      	ldr	r2, [r3, #0]
 8005462:	463b      	mov	r3, r7
 8005464:	681b      	ldr	r3, [r3, #0]
 8005466:	781b      	ldrb	r3, [r3, #0]
 8005468:	009b      	lsls	r3, r3, #2
 800546a:	4413      	add	r3, r2
 800546c:	881b      	ldrh	r3, [r3, #0]
 800546e:	b29b      	uxth	r3, r3
 8005470:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005474:	2b00      	cmp	r3, #0
 8005476:	f000 808f 	beq.w	8005598 <USB_EPStartXfer+0x878>
        {
          /* Set the Double buffer counter for pmabuffer1 */
          PCD_SET_EP_DBUF1_CNT(USBx, ep->num, ep->is_in, len);
 800547a:	1d3b      	adds	r3, r7, #4
 800547c:	681b      	ldr	r3, [r3, #0]
 800547e:	67bb      	str	r3, [r7, #120]	; 0x78
 8005480:	463b      	mov	r3, r7
 8005482:	681b      	ldr	r3, [r3, #0]
 8005484:	785b      	ldrb	r3, [r3, #1]
 8005486:	2b00      	cmp	r3, #0
 8005488:	d164      	bne.n	8005554 <USB_EPStartXfer+0x834>
 800548a:	1d3b      	adds	r3, r7, #4
 800548c:	681b      	ldr	r3, [r3, #0]
 800548e:	673b      	str	r3, [r7, #112]	; 0x70
 8005490:	1d3b      	adds	r3, r7, #4
 8005492:	681b      	ldr	r3, [r3, #0]
 8005494:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8005498:	b29b      	uxth	r3, r3
 800549a:	461a      	mov	r2, r3
 800549c:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 800549e:	4413      	add	r3, r2
 80054a0:	673b      	str	r3, [r7, #112]	; 0x70
 80054a2:	463b      	mov	r3, r7
 80054a4:	681b      	ldr	r3, [r3, #0]
 80054a6:	781b      	ldrb	r3, [r3, #0]
 80054a8:	011a      	lsls	r2, r3, #4
 80054aa:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 80054ac:	4413      	add	r3, r2
 80054ae:	f203 430c 	addw	r3, r3, #1036	; 0x40c
 80054b2:	66fb      	str	r3, [r7, #108]	; 0x6c
 80054b4:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 80054b8:	2b00      	cmp	r3, #0
 80054ba:	d112      	bne.n	80054e2 <USB_EPStartXfer+0x7c2>
 80054bc:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80054be:	881b      	ldrh	r3, [r3, #0]
 80054c0:	b29b      	uxth	r3, r3
 80054c2:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 80054c6:	b29a      	uxth	r2, r3
 80054c8:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80054ca:	801a      	strh	r2, [r3, #0]
 80054cc:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80054ce:	881b      	ldrh	r3, [r3, #0]
 80054d0:	b29b      	uxth	r3, r3
 80054d2:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 80054d6:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 80054da:	b29a      	uxth	r2, r3
 80054dc:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80054de:	801a      	strh	r2, [r3, #0]
 80054e0:	e054      	b.n	800558c <USB_EPStartXfer+0x86c>
 80054e2:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 80054e6:	2b3e      	cmp	r3, #62	; 0x3e
 80054e8:	d817      	bhi.n	800551a <USB_EPStartXfer+0x7fa>
 80054ea:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 80054ee:	085b      	lsrs	r3, r3, #1
 80054f0:	f8c7 30f4 	str.w	r3, [r7, #244]	; 0xf4
 80054f4:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 80054f8:	f003 0301 	and.w	r3, r3, #1
 80054fc:	2b00      	cmp	r3, #0
 80054fe:	d004      	beq.n	800550a <USB_EPStartXfer+0x7ea>
 8005500:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8005504:	3301      	adds	r3, #1
 8005506:	f8c7 30f4 	str.w	r3, [r7, #244]	; 0xf4
 800550a:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800550e:	b29b      	uxth	r3, r3
 8005510:	029b      	lsls	r3, r3, #10
 8005512:	b29a      	uxth	r2, r3
 8005514:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8005516:	801a      	strh	r2, [r3, #0]
 8005518:	e038      	b.n	800558c <USB_EPStartXfer+0x86c>
 800551a:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 800551e:	095b      	lsrs	r3, r3, #5
 8005520:	f8c7 30f4 	str.w	r3, [r7, #244]	; 0xf4
 8005524:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8005528:	f003 031f 	and.w	r3, r3, #31
 800552c:	2b00      	cmp	r3, #0
 800552e:	d104      	bne.n	800553a <USB_EPStartXfer+0x81a>
 8005530:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8005534:	3b01      	subs	r3, #1
 8005536:	f8c7 30f4 	str.w	r3, [r7, #244]	; 0xf4
 800553a:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800553e:	b29b      	uxth	r3, r3
 8005540:	029b      	lsls	r3, r3, #10
 8005542:	b29b      	uxth	r3, r3
 8005544:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8005548:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800554c:	b29a      	uxth	r2, r3
 800554e:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8005550:	801a      	strh	r2, [r3, #0]
 8005552:	e01b      	b.n	800558c <USB_EPStartXfer+0x86c>
 8005554:	463b      	mov	r3, r7
 8005556:	681b      	ldr	r3, [r3, #0]
 8005558:	785b      	ldrb	r3, [r3, #1]
 800555a:	2b01      	cmp	r3, #1
 800555c:	d116      	bne.n	800558c <USB_EPStartXfer+0x86c>
 800555e:	1d3b      	adds	r3, r7, #4
 8005560:	681b      	ldr	r3, [r3, #0]
 8005562:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8005566:	b29b      	uxth	r3, r3
 8005568:	461a      	mov	r2, r3
 800556a:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 800556c:	4413      	add	r3, r2
 800556e:	67bb      	str	r3, [r7, #120]	; 0x78
 8005570:	463b      	mov	r3, r7
 8005572:	681b      	ldr	r3, [r3, #0]
 8005574:	781b      	ldrb	r3, [r3, #0]
 8005576:	011a      	lsls	r2, r3, #4
 8005578:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 800557a:	4413      	add	r3, r2
 800557c:	f203 430c 	addw	r3, r3, #1036	; 0x40c
 8005580:	677b      	str	r3, [r7, #116]	; 0x74
 8005582:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8005586:	b29a      	uxth	r2, r3
 8005588:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 800558a:	801a      	strh	r2, [r3, #0]
          pmabuffer = ep->pmaaddr1;
 800558c:	463b      	mov	r3, r7
 800558e:	681b      	ldr	r3, [r3, #0]
 8005590:	895b      	ldrh	r3, [r3, #10]
 8005592:	f8a7 310a 	strh.w	r3, [r7, #266]	; 0x10a
 8005596:	e097      	b.n	80056c8 <USB_EPStartXfer+0x9a8>
        }
        else
        {
          /* Set the Double buffer counter for pmabuffer0 */
          PCD_SET_EP_DBUF0_CNT(USBx, ep->num, ep->is_in, len);
 8005598:	463b      	mov	r3, r7
 800559a:	681b      	ldr	r3, [r3, #0]
 800559c:	785b      	ldrb	r3, [r3, #1]
 800559e:	2b00      	cmp	r3, #0
 80055a0:	d168      	bne.n	8005674 <USB_EPStartXfer+0x954>
 80055a2:	1d3b      	adds	r3, r7, #4
 80055a4:	681b      	ldr	r3, [r3, #0]
 80055a6:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 80055aa:	1d3b      	adds	r3, r7, #4
 80055ac:	681b      	ldr	r3, [r3, #0]
 80055ae:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 80055b2:	b29b      	uxth	r3, r3
 80055b4:	461a      	mov	r2, r3
 80055b6:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 80055ba:	4413      	add	r3, r2
 80055bc:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 80055c0:	463b      	mov	r3, r7
 80055c2:	681b      	ldr	r3, [r3, #0]
 80055c4:	781b      	ldrb	r3, [r3, #0]
 80055c6:	011a      	lsls	r2, r3, #4
 80055c8:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 80055cc:	4413      	add	r3, r2
 80055ce:	f203 4304 	addw	r3, r3, #1028	; 0x404
 80055d2:	67fb      	str	r3, [r7, #124]	; 0x7c
 80055d4:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 80055d8:	2b00      	cmp	r3, #0
 80055da:	d112      	bne.n	8005602 <USB_EPStartXfer+0x8e2>
 80055dc:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 80055de:	881b      	ldrh	r3, [r3, #0]
 80055e0:	b29b      	uxth	r3, r3
 80055e2:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 80055e6:	b29a      	uxth	r2, r3
 80055e8:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 80055ea:	801a      	strh	r2, [r3, #0]
 80055ec:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 80055ee:	881b      	ldrh	r3, [r3, #0]
 80055f0:	b29b      	uxth	r3, r3
 80055f2:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 80055f6:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 80055fa:	b29a      	uxth	r2, r3
 80055fc:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 80055fe:	801a      	strh	r2, [r3, #0]
 8005600:	e05d      	b.n	80056be <USB_EPStartXfer+0x99e>
 8005602:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8005606:	2b3e      	cmp	r3, #62	; 0x3e
 8005608:	d817      	bhi.n	800563a <USB_EPStartXfer+0x91a>
 800560a:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 800560e:	085b      	lsrs	r3, r3, #1
 8005610:	f8c7 30f0 	str.w	r3, [r7, #240]	; 0xf0
 8005614:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8005618:	f003 0301 	and.w	r3, r3, #1
 800561c:	2b00      	cmp	r3, #0
 800561e:	d004      	beq.n	800562a <USB_EPStartXfer+0x90a>
 8005620:	f8d7 30f0 	ldr.w	r3, [r7, #240]	; 0xf0
 8005624:	3301      	adds	r3, #1
 8005626:	f8c7 30f0 	str.w	r3, [r7, #240]	; 0xf0
 800562a:	f8d7 30f0 	ldr.w	r3, [r7, #240]	; 0xf0
 800562e:	b29b      	uxth	r3, r3
 8005630:	029b      	lsls	r3, r3, #10
 8005632:	b29a      	uxth	r2, r3
 8005634:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 8005636:	801a      	strh	r2, [r3, #0]
 8005638:	e041      	b.n	80056be <USB_EPStartXfer+0x99e>
 800563a:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 800563e:	095b      	lsrs	r3, r3, #5
 8005640:	f8c7 30f0 	str.w	r3, [r7, #240]	; 0xf0
 8005644:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8005648:	f003 031f 	and.w	r3, r3, #31
 800564c:	2b00      	cmp	r3, #0
 800564e:	d104      	bne.n	800565a <USB_EPStartXfer+0x93a>
 8005650:	f8d7 30f0 	ldr.w	r3, [r7, #240]	; 0xf0
 8005654:	3b01      	subs	r3, #1
 8005656:	f8c7 30f0 	str.w	r3, [r7, #240]	; 0xf0
 800565a:	f8d7 30f0 	ldr.w	r3, [r7, #240]	; 0xf0
 800565e:	b29b      	uxth	r3, r3
 8005660:	029b      	lsls	r3, r3, #10
 8005662:	b29b      	uxth	r3, r3
 8005664:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8005668:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800566c:	b29a      	uxth	r2, r3
 800566e:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 8005670:	801a      	strh	r2, [r3, #0]
 8005672:	e024      	b.n	80056be <USB_EPStartXfer+0x99e>
 8005674:	463b      	mov	r3, r7
 8005676:	681b      	ldr	r3, [r3, #0]
 8005678:	785b      	ldrb	r3, [r3, #1]
 800567a:	2b01      	cmp	r3, #1
 800567c:	d11f      	bne.n	80056be <USB_EPStartXfer+0x99e>
 800567e:	1d3b      	adds	r3, r7, #4
 8005680:	681b      	ldr	r3, [r3, #0]
 8005682:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
 8005686:	1d3b      	adds	r3, r7, #4
 8005688:	681b      	ldr	r3, [r3, #0]
 800568a:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 800568e:	b29b      	uxth	r3, r3
 8005690:	461a      	mov	r2, r3
 8005692:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 8005696:	4413      	add	r3, r2
 8005698:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
 800569c:	463b      	mov	r3, r7
 800569e:	681b      	ldr	r3, [r3, #0]
 80056a0:	781b      	ldrb	r3, [r3, #0]
 80056a2:	011a      	lsls	r2, r3, #4
 80056a4:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 80056a8:	4413      	add	r3, r2
 80056aa:	f203 4304 	addw	r3, r3, #1028	; 0x404
 80056ae:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
 80056b2:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 80056b6:	b29a      	uxth	r2, r3
 80056b8:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 80056bc:	801a      	strh	r2, [r3, #0]
          pmabuffer = ep->pmaaddr0;
 80056be:	463b      	mov	r3, r7
 80056c0:	681b      	ldr	r3, [r3, #0]
 80056c2:	891b      	ldrh	r3, [r3, #8]
 80056c4:	f8a7 310a 	strh.w	r3, [r7, #266]	; 0x10a
        }

        USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 80056c8:	463b      	mov	r3, r7
 80056ca:	681b      	ldr	r3, [r3, #0]
 80056cc:	6959      	ldr	r1, [r3, #20]
 80056ce:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 80056d2:	b29b      	uxth	r3, r3
 80056d4:	f8b7 210a 	ldrh.w	r2, [r7, #266]	; 0x10a
 80056d8:	1d38      	adds	r0, r7, #4
 80056da:	6800      	ldr	r0, [r0, #0]
 80056dc:	f000 fd7e 	bl	80061dc <USB_WritePMA>
        PCD_FreeUserBuffer(USBx, ep->num, ep->is_in);
 80056e0:	463b      	mov	r3, r7
 80056e2:	681b      	ldr	r3, [r3, #0]
 80056e4:	785b      	ldrb	r3, [r3, #1]
 80056e6:	2b00      	cmp	r3, #0
 80056e8:	d122      	bne.n	8005730 <USB_EPStartXfer+0xa10>
 80056ea:	1d3b      	adds	r3, r7, #4
 80056ec:	681a      	ldr	r2, [r3, #0]
 80056ee:	463b      	mov	r3, r7
 80056f0:	681b      	ldr	r3, [r3, #0]
 80056f2:	781b      	ldrb	r3, [r3, #0]
 80056f4:	009b      	lsls	r3, r3, #2
 80056f6:	4413      	add	r3, r2
 80056f8:	881b      	ldrh	r3, [r3, #0]
 80056fa:	b29b      	uxth	r3, r3
 80056fc:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8005700:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8005704:	f8a7 3068 	strh.w	r3, [r7, #104]	; 0x68
 8005708:	1d3b      	adds	r3, r7, #4
 800570a:	681a      	ldr	r2, [r3, #0]
 800570c:	463b      	mov	r3, r7
 800570e:	681b      	ldr	r3, [r3, #0]
 8005710:	781b      	ldrb	r3, [r3, #0]
 8005712:	009b      	lsls	r3, r3, #2
 8005714:	441a      	add	r2, r3
 8005716:	f8b7 3068 	ldrh.w	r3, [r7, #104]	; 0x68
 800571a:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 800571e:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8005722:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8005726:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 800572a:	b29b      	uxth	r3, r3
 800572c:	8013      	strh	r3, [r2, #0]
 800572e:	e026      	b.n	800577e <USB_EPStartXfer+0xa5e>
 8005730:	463b      	mov	r3, r7
 8005732:	681b      	ldr	r3, [r3, #0]
 8005734:	785b      	ldrb	r3, [r3, #1]
 8005736:	2b01      	cmp	r3, #1
 8005738:	d121      	bne.n	800577e <USB_EPStartXfer+0xa5e>
 800573a:	1d3b      	adds	r3, r7, #4
 800573c:	681a      	ldr	r2, [r3, #0]
 800573e:	463b      	mov	r3, r7
 8005740:	681b      	ldr	r3, [r3, #0]
 8005742:	781b      	ldrb	r3, [r3, #0]
 8005744:	009b      	lsls	r3, r3, #2
 8005746:	4413      	add	r3, r2
 8005748:	881b      	ldrh	r3, [r3, #0]
 800574a:	b29b      	uxth	r3, r3
 800574c:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8005750:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8005754:	f8a7 306a 	strh.w	r3, [r7, #106]	; 0x6a
 8005758:	1d3b      	adds	r3, r7, #4
 800575a:	681a      	ldr	r2, [r3, #0]
 800575c:	463b      	mov	r3, r7
 800575e:	681b      	ldr	r3, [r3, #0]
 8005760:	781b      	ldrb	r3, [r3, #0]
 8005762:	009b      	lsls	r3, r3, #2
 8005764:	441a      	add	r2, r3
 8005766:	f8b7 306a 	ldrh.w	r3, [r7, #106]	; 0x6a
 800576a:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 800576e:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8005772:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8005776:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800577a:	b29b      	uxth	r3, r3
 800577c:	8013      	strh	r3, [r2, #0]
      }
    }

    PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_VALID);
 800577e:	1d3b      	adds	r3, r7, #4
 8005780:	681a      	ldr	r2, [r3, #0]
 8005782:	463b      	mov	r3, r7
 8005784:	681b      	ldr	r3, [r3, #0]
 8005786:	781b      	ldrb	r3, [r3, #0]
 8005788:	009b      	lsls	r3, r3, #2
 800578a:	4413      	add	r3, r2
 800578c:	881b      	ldrh	r3, [r3, #0]
 800578e:	b29b      	uxth	r3, r3
 8005790:	f107 020e 	add.w	r2, r7, #14
 8005794:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8005798:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800579c:	8013      	strh	r3, [r2, #0]
 800579e:	f107 030e 	add.w	r3, r7, #14
 80057a2:	f107 020e 	add.w	r2, r7, #14
 80057a6:	8812      	ldrh	r2, [r2, #0]
 80057a8:	f082 0210 	eor.w	r2, r2, #16
 80057ac:	801a      	strh	r2, [r3, #0]
 80057ae:	f107 030e 	add.w	r3, r7, #14
 80057b2:	f107 020e 	add.w	r2, r7, #14
 80057b6:	8812      	ldrh	r2, [r2, #0]
 80057b8:	f082 0220 	eor.w	r2, r2, #32
 80057bc:	801a      	strh	r2, [r3, #0]
 80057be:	1d3b      	adds	r3, r7, #4
 80057c0:	681a      	ldr	r2, [r3, #0]
 80057c2:	463b      	mov	r3, r7
 80057c4:	681b      	ldr	r3, [r3, #0]
 80057c6:	781b      	ldrb	r3, [r3, #0]
 80057c8:	009b      	lsls	r3, r3, #2
 80057ca:	441a      	add	r2, r3
 80057cc:	f107 030e 	add.w	r3, r7, #14
 80057d0:	881b      	ldrh	r3, [r3, #0]
 80057d2:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 80057d6:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 80057da:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80057de:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80057e2:	b29b      	uxth	r3, r3
 80057e4:	8013      	strh	r3, [r2, #0]
 80057e6:	e3b5      	b.n	8005f54 <USB_EPStartXfer+0x1234>
  }
  else /* OUT endpoint */
  {
    if (ep->doublebuffer == 0U)
 80057e8:	463b      	mov	r3, r7
 80057ea:	681b      	ldr	r3, [r3, #0]
 80057ec:	7b1b      	ldrb	r3, [r3, #12]
 80057ee:	2b00      	cmp	r3, #0
 80057f0:	f040 8090 	bne.w	8005914 <USB_EPStartXfer+0xbf4>
    {
      /* Multi packet transfer */
      if (ep->xfer_len > ep->maxpacket)
 80057f4:	463b      	mov	r3, r7
 80057f6:	681b      	ldr	r3, [r3, #0]
 80057f8:	699a      	ldr	r2, [r3, #24]
 80057fa:	463b      	mov	r3, r7
 80057fc:	681b      	ldr	r3, [r3, #0]
 80057fe:	691b      	ldr	r3, [r3, #16]
 8005800:	429a      	cmp	r2, r3
 8005802:	d90e      	bls.n	8005822 <USB_EPStartXfer+0xb02>
      {
        len = ep->maxpacket;
 8005804:	463b      	mov	r3, r7
 8005806:	681b      	ldr	r3, [r3, #0]
 8005808:	691b      	ldr	r3, [r3, #16]
 800580a:	f8c7 310c 	str.w	r3, [r7, #268]	; 0x10c
        ep->xfer_len -= len;
 800580e:	463b      	mov	r3, r7
 8005810:	681b      	ldr	r3, [r3, #0]
 8005812:	699a      	ldr	r2, [r3, #24]
 8005814:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8005818:	1ad2      	subs	r2, r2, r3
 800581a:	463b      	mov	r3, r7
 800581c:	681b      	ldr	r3, [r3, #0]
 800581e:	619a      	str	r2, [r3, #24]
 8005820:	e008      	b.n	8005834 <USB_EPStartXfer+0xb14>
      }
      else
      {
        len = ep->xfer_len;
 8005822:	463b      	mov	r3, r7
 8005824:	681b      	ldr	r3, [r3, #0]
 8005826:	699b      	ldr	r3, [r3, #24]
 8005828:	f8c7 310c 	str.w	r3, [r7, #268]	; 0x10c
        ep->xfer_len = 0U;
 800582c:	463b      	mov	r3, r7
 800582e:	681b      	ldr	r3, [r3, #0]
 8005830:	2200      	movs	r2, #0
 8005832:	619a      	str	r2, [r3, #24]
      }
      /* configure and validate Rx endpoint */
      PCD_SET_EP_RX_CNT(USBx, ep->num, len);
 8005834:	1d3b      	adds	r3, r7, #4
 8005836:	681b      	ldr	r3, [r3, #0]
 8005838:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
 800583c:	1d3b      	adds	r3, r7, #4
 800583e:	681b      	ldr	r3, [r3, #0]
 8005840:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8005844:	b29b      	uxth	r3, r3
 8005846:	461a      	mov	r2, r3
 8005848:	f8d7 3094 	ldr.w	r3, [r7, #148]	; 0x94
 800584c:	4413      	add	r3, r2
 800584e:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
 8005852:	463b      	mov	r3, r7
 8005854:	681b      	ldr	r3, [r3, #0]
 8005856:	781b      	ldrb	r3, [r3, #0]
 8005858:	011a      	lsls	r2, r3, #4
 800585a:	f8d7 3094 	ldr.w	r3, [r7, #148]	; 0x94
 800585e:	4413      	add	r3, r2
 8005860:	f203 430c 	addw	r3, r3, #1036	; 0x40c
 8005864:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
 8005868:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 800586c:	2b00      	cmp	r3, #0
 800586e:	d116      	bne.n	800589e <USB_EPStartXfer+0xb7e>
 8005870:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 8005874:	881b      	ldrh	r3, [r3, #0]
 8005876:	b29b      	uxth	r3, r3
 8005878:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 800587c:	b29a      	uxth	r2, r3
 800587e:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 8005882:	801a      	strh	r2, [r3, #0]
 8005884:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 8005888:	881b      	ldrh	r3, [r3, #0]
 800588a:	b29b      	uxth	r3, r3
 800588c:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8005890:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8005894:	b29a      	uxth	r2, r3
 8005896:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 800589a:	801a      	strh	r2, [r3, #0]
 800589c:	e32c      	b.n	8005ef8 <USB_EPStartXfer+0x11d8>
 800589e:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 80058a2:	2b3e      	cmp	r3, #62	; 0x3e
 80058a4:	d818      	bhi.n	80058d8 <USB_EPStartXfer+0xbb8>
 80058a6:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 80058aa:	085b      	lsrs	r3, r3, #1
 80058ac:	f8c7 30ec 	str.w	r3, [r7, #236]	; 0xec
 80058b0:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 80058b4:	f003 0301 	and.w	r3, r3, #1
 80058b8:	2b00      	cmp	r3, #0
 80058ba:	d004      	beq.n	80058c6 <USB_EPStartXfer+0xba6>
 80058bc:	f8d7 30ec 	ldr.w	r3, [r7, #236]	; 0xec
 80058c0:	3301      	adds	r3, #1
 80058c2:	f8c7 30ec 	str.w	r3, [r7, #236]	; 0xec
 80058c6:	f8d7 30ec 	ldr.w	r3, [r7, #236]	; 0xec
 80058ca:	b29b      	uxth	r3, r3
 80058cc:	029b      	lsls	r3, r3, #10
 80058ce:	b29a      	uxth	r2, r3
 80058d0:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 80058d4:	801a      	strh	r2, [r3, #0]
 80058d6:	e30f      	b.n	8005ef8 <USB_EPStartXfer+0x11d8>
 80058d8:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 80058dc:	095b      	lsrs	r3, r3, #5
 80058de:	f8c7 30ec 	str.w	r3, [r7, #236]	; 0xec
 80058e2:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 80058e6:	f003 031f 	and.w	r3, r3, #31
 80058ea:	2b00      	cmp	r3, #0
 80058ec:	d104      	bne.n	80058f8 <USB_EPStartXfer+0xbd8>
 80058ee:	f8d7 30ec 	ldr.w	r3, [r7, #236]	; 0xec
 80058f2:	3b01      	subs	r3, #1
 80058f4:	f8c7 30ec 	str.w	r3, [r7, #236]	; 0xec
 80058f8:	f8d7 30ec 	ldr.w	r3, [r7, #236]	; 0xec
 80058fc:	b29b      	uxth	r3, r3
 80058fe:	029b      	lsls	r3, r3, #10
 8005900:	b29b      	uxth	r3, r3
 8005902:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8005906:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800590a:	b29a      	uxth	r2, r3
 800590c:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 8005910:	801a      	strh	r2, [r3, #0]
 8005912:	e2f1      	b.n	8005ef8 <USB_EPStartXfer+0x11d8>
    }
    else
    {
      /* First Transfer Coming From HAL_PCD_EP_Receive & From ISR */
      /* Set the Double buffer counter */
      if (ep->type == EP_TYPE_BULK)
 8005914:	463b      	mov	r3, r7
 8005916:	681b      	ldr	r3, [r3, #0]
 8005918:	78db      	ldrb	r3, [r3, #3]
 800591a:	2b02      	cmp	r3, #2
 800591c:	f040 818f 	bne.w	8005c3e <USB_EPStartXfer+0xf1e>
      {
        PCD_SET_EP_DBUF_CNT(USBx, ep->num, ep->is_in, ep->maxpacket);
 8005920:	463b      	mov	r3, r7
 8005922:	681b      	ldr	r3, [r3, #0]
 8005924:	785b      	ldrb	r3, [r3, #1]
 8005926:	2b00      	cmp	r3, #0
 8005928:	d175      	bne.n	8005a16 <USB_EPStartXfer+0xcf6>
 800592a:	1d3b      	adds	r3, r7, #4
 800592c:	681b      	ldr	r3, [r3, #0]
 800592e:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 8005932:	1d3b      	adds	r3, r7, #4
 8005934:	681b      	ldr	r3, [r3, #0]
 8005936:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 800593a:	b29b      	uxth	r3, r3
 800593c:	461a      	mov	r2, r3
 800593e:	f8d7 30b0 	ldr.w	r3, [r7, #176]	; 0xb0
 8005942:	4413      	add	r3, r2
 8005944:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 8005948:	463b      	mov	r3, r7
 800594a:	681b      	ldr	r3, [r3, #0]
 800594c:	781b      	ldrb	r3, [r3, #0]
 800594e:	011a      	lsls	r2, r3, #4
 8005950:	f8d7 30b0 	ldr.w	r3, [r7, #176]	; 0xb0
 8005954:	4413      	add	r3, r2
 8005956:	f203 4304 	addw	r3, r3, #1028	; 0x404
 800595a:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
 800595e:	463b      	mov	r3, r7
 8005960:	681b      	ldr	r3, [r3, #0]
 8005962:	691b      	ldr	r3, [r3, #16]
 8005964:	2b00      	cmp	r3, #0
 8005966:	d116      	bne.n	8005996 <USB_EPStartXfer+0xc76>
 8005968:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 800596c:	881b      	ldrh	r3, [r3, #0]
 800596e:	b29b      	uxth	r3, r3
 8005970:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 8005974:	b29a      	uxth	r2, r3
 8005976:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 800597a:	801a      	strh	r2, [r3, #0]
 800597c:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 8005980:	881b      	ldrh	r3, [r3, #0]
 8005982:	b29b      	uxth	r3, r3
 8005984:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8005988:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800598c:	b29a      	uxth	r2, r3
 800598e:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 8005992:	801a      	strh	r2, [r3, #0]
 8005994:	e065      	b.n	8005a62 <USB_EPStartXfer+0xd42>
 8005996:	463b      	mov	r3, r7
 8005998:	681b      	ldr	r3, [r3, #0]
 800599a:	691b      	ldr	r3, [r3, #16]
 800599c:	2b3e      	cmp	r3, #62	; 0x3e
 800599e:	d81a      	bhi.n	80059d6 <USB_EPStartXfer+0xcb6>
 80059a0:	463b      	mov	r3, r7
 80059a2:	681b      	ldr	r3, [r3, #0]
 80059a4:	691b      	ldr	r3, [r3, #16]
 80059a6:	085b      	lsrs	r3, r3, #1
 80059a8:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
 80059ac:	463b      	mov	r3, r7
 80059ae:	681b      	ldr	r3, [r3, #0]
 80059b0:	691b      	ldr	r3, [r3, #16]
 80059b2:	f003 0301 	and.w	r3, r3, #1
 80059b6:	2b00      	cmp	r3, #0
 80059b8:	d004      	beq.n	80059c4 <USB_EPStartXfer+0xca4>
 80059ba:	f8d7 30e8 	ldr.w	r3, [r7, #232]	; 0xe8
 80059be:	3301      	adds	r3, #1
 80059c0:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
 80059c4:	f8d7 30e8 	ldr.w	r3, [r7, #232]	; 0xe8
 80059c8:	b29b      	uxth	r3, r3
 80059ca:	029b      	lsls	r3, r3, #10
 80059cc:	b29a      	uxth	r2, r3
 80059ce:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 80059d2:	801a      	strh	r2, [r3, #0]
 80059d4:	e045      	b.n	8005a62 <USB_EPStartXfer+0xd42>
 80059d6:	463b      	mov	r3, r7
 80059d8:	681b      	ldr	r3, [r3, #0]
 80059da:	691b      	ldr	r3, [r3, #16]
 80059dc:	095b      	lsrs	r3, r3, #5
 80059de:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
 80059e2:	463b      	mov	r3, r7
 80059e4:	681b      	ldr	r3, [r3, #0]
 80059e6:	691b      	ldr	r3, [r3, #16]
 80059e8:	f003 031f 	and.w	r3, r3, #31
 80059ec:	2b00      	cmp	r3, #0
 80059ee:	d104      	bne.n	80059fa <USB_EPStartXfer+0xcda>
 80059f0:	f8d7 30e8 	ldr.w	r3, [r7, #232]	; 0xe8
 80059f4:	3b01      	subs	r3, #1
 80059f6:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
 80059fa:	f8d7 30e8 	ldr.w	r3, [r7, #232]	; 0xe8
 80059fe:	b29b      	uxth	r3, r3
 8005a00:	029b      	lsls	r3, r3, #10
 8005a02:	b29b      	uxth	r3, r3
 8005a04:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8005a08:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8005a0c:	b29a      	uxth	r2, r3
 8005a0e:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 8005a12:	801a      	strh	r2, [r3, #0]
 8005a14:	e025      	b.n	8005a62 <USB_EPStartXfer+0xd42>
 8005a16:	463b      	mov	r3, r7
 8005a18:	681b      	ldr	r3, [r3, #0]
 8005a1a:	785b      	ldrb	r3, [r3, #1]
 8005a1c:	2b01      	cmp	r3, #1
 8005a1e:	d120      	bne.n	8005a62 <USB_EPStartXfer+0xd42>
 8005a20:	1d3b      	adds	r3, r7, #4
 8005a22:	681b      	ldr	r3, [r3, #0]
 8005a24:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 8005a28:	1d3b      	adds	r3, r7, #4
 8005a2a:	681b      	ldr	r3, [r3, #0]
 8005a2c:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8005a30:	b29b      	uxth	r3, r3
 8005a32:	461a      	mov	r2, r3
 8005a34:	f8d7 30b8 	ldr.w	r3, [r7, #184]	; 0xb8
 8005a38:	4413      	add	r3, r2
 8005a3a:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 8005a3e:	463b      	mov	r3, r7
 8005a40:	681b      	ldr	r3, [r3, #0]
 8005a42:	781b      	ldrb	r3, [r3, #0]
 8005a44:	011a      	lsls	r2, r3, #4
 8005a46:	f8d7 30b8 	ldr.w	r3, [r7, #184]	; 0xb8
 8005a4a:	4413      	add	r3, r2
 8005a4c:	f203 4304 	addw	r3, r3, #1028	; 0x404
 8005a50:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 8005a54:	463b      	mov	r3, r7
 8005a56:	681b      	ldr	r3, [r3, #0]
 8005a58:	691b      	ldr	r3, [r3, #16]
 8005a5a:	b29a      	uxth	r2, r3
 8005a5c:	f8d7 30b4 	ldr.w	r3, [r7, #180]	; 0xb4
 8005a60:	801a      	strh	r2, [r3, #0]
 8005a62:	1d3b      	adds	r3, r7, #4
 8005a64:	681b      	ldr	r3, [r3, #0]
 8005a66:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
 8005a6a:	463b      	mov	r3, r7
 8005a6c:	681b      	ldr	r3, [r3, #0]
 8005a6e:	785b      	ldrb	r3, [r3, #1]
 8005a70:	2b00      	cmp	r3, #0
 8005a72:	d175      	bne.n	8005b60 <USB_EPStartXfer+0xe40>
 8005a74:	1d3b      	adds	r3, r7, #4
 8005a76:	681b      	ldr	r3, [r3, #0]
 8005a78:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
 8005a7c:	1d3b      	adds	r3, r7, #4
 8005a7e:	681b      	ldr	r3, [r3, #0]
 8005a80:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8005a84:	b29b      	uxth	r3, r3
 8005a86:	461a      	mov	r2, r3
 8005a88:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 8005a8c:	4413      	add	r3, r2
 8005a8e:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
 8005a92:	463b      	mov	r3, r7
 8005a94:	681b      	ldr	r3, [r3, #0]
 8005a96:	781b      	ldrb	r3, [r3, #0]
 8005a98:	011a      	lsls	r2, r3, #4
 8005a9a:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 8005a9e:	4413      	add	r3, r2
 8005aa0:	f203 430c 	addw	r3, r3, #1036	; 0x40c
 8005aa4:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
 8005aa8:	463b      	mov	r3, r7
 8005aaa:	681b      	ldr	r3, [r3, #0]
 8005aac:	691b      	ldr	r3, [r3, #16]
 8005aae:	2b00      	cmp	r3, #0
 8005ab0:	d116      	bne.n	8005ae0 <USB_EPStartXfer+0xdc0>
 8005ab2:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 8005ab6:	881b      	ldrh	r3, [r3, #0]
 8005ab8:	b29b      	uxth	r3, r3
 8005aba:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 8005abe:	b29a      	uxth	r2, r3
 8005ac0:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 8005ac4:	801a      	strh	r2, [r3, #0]
 8005ac6:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 8005aca:	881b      	ldrh	r3, [r3, #0]
 8005acc:	b29b      	uxth	r3, r3
 8005ace:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8005ad2:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8005ad6:	b29a      	uxth	r2, r3
 8005ad8:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 8005adc:	801a      	strh	r2, [r3, #0]
 8005ade:	e061      	b.n	8005ba4 <USB_EPStartXfer+0xe84>
 8005ae0:	463b      	mov	r3, r7
 8005ae2:	681b      	ldr	r3, [r3, #0]
 8005ae4:	691b      	ldr	r3, [r3, #16]
 8005ae6:	2b3e      	cmp	r3, #62	; 0x3e
 8005ae8:	d81a      	bhi.n	8005b20 <USB_EPStartXfer+0xe00>
 8005aea:	463b      	mov	r3, r7
 8005aec:	681b      	ldr	r3, [r3, #0]
 8005aee:	691b      	ldr	r3, [r3, #16]
 8005af0:	085b      	lsrs	r3, r3, #1
 8005af2:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
 8005af6:	463b      	mov	r3, r7
 8005af8:	681b      	ldr	r3, [r3, #0]
 8005afa:	691b      	ldr	r3, [r3, #16]
 8005afc:	f003 0301 	and.w	r3, r3, #1
 8005b00:	2b00      	cmp	r3, #0
 8005b02:	d004      	beq.n	8005b0e <USB_EPStartXfer+0xdee>
 8005b04:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8005b08:	3301      	adds	r3, #1
 8005b0a:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
 8005b0e:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8005b12:	b29b      	uxth	r3, r3
 8005b14:	029b      	lsls	r3, r3, #10
 8005b16:	b29a      	uxth	r2, r3
 8005b18:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 8005b1c:	801a      	strh	r2, [r3, #0]
 8005b1e:	e041      	b.n	8005ba4 <USB_EPStartXfer+0xe84>
 8005b20:	463b      	mov	r3, r7
 8005b22:	681b      	ldr	r3, [r3, #0]
 8005b24:	691b      	ldr	r3, [r3, #16]
 8005b26:	095b      	lsrs	r3, r3, #5
 8005b28:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
 8005b2c:	463b      	mov	r3, r7
 8005b2e:	681b      	ldr	r3, [r3, #0]
 8005b30:	691b      	ldr	r3, [r3, #16]
 8005b32:	f003 031f 	and.w	r3, r3, #31
 8005b36:	2b00      	cmp	r3, #0
 8005b38:	d104      	bne.n	8005b44 <USB_EPStartXfer+0xe24>
 8005b3a:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8005b3e:	3b01      	subs	r3, #1
 8005b40:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
 8005b44:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8005b48:	b29b      	uxth	r3, r3
 8005b4a:	029b      	lsls	r3, r3, #10
 8005b4c:	b29b      	uxth	r3, r3
 8005b4e:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8005b52:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8005b56:	b29a      	uxth	r2, r3
 8005b58:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 8005b5c:	801a      	strh	r2, [r3, #0]
 8005b5e:	e021      	b.n	8005ba4 <USB_EPStartXfer+0xe84>
 8005b60:	463b      	mov	r3, r7
 8005b62:	681b      	ldr	r3, [r3, #0]
 8005b64:	785b      	ldrb	r3, [r3, #1]
 8005b66:	2b01      	cmp	r3, #1
 8005b68:	d11c      	bne.n	8005ba4 <USB_EPStartXfer+0xe84>
 8005b6a:	1d3b      	adds	r3, r7, #4
 8005b6c:	681b      	ldr	r3, [r3, #0]
 8005b6e:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8005b72:	b29b      	uxth	r3, r3
 8005b74:	461a      	mov	r2, r3
 8005b76:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 8005b7a:	4413      	add	r3, r2
 8005b7c:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
 8005b80:	463b      	mov	r3, r7
 8005b82:	681b      	ldr	r3, [r3, #0]
 8005b84:	781b      	ldrb	r3, [r3, #0]
 8005b86:	011a      	lsls	r2, r3, #4
 8005b88:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 8005b8c:	4413      	add	r3, r2
 8005b8e:	f203 430c 	addw	r3, r3, #1036	; 0x40c
 8005b92:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
 8005b96:	463b      	mov	r3, r7
 8005b98:	681b      	ldr	r3, [r3, #0]
 8005b9a:	691b      	ldr	r3, [r3, #16]
 8005b9c:	b29a      	uxth	r2, r3
 8005b9e:	f8d7 30a4 	ldr.w	r3, [r7, #164]	; 0xa4
 8005ba2:	801a      	strh	r2, [r3, #0]

        /* Coming from ISR */
        if (ep->xfer_count != 0U)
 8005ba4:	463b      	mov	r3, r7
 8005ba6:	681b      	ldr	r3, [r3, #0]
 8005ba8:	69db      	ldr	r3, [r3, #28]
 8005baa:	2b00      	cmp	r3, #0
 8005bac:	f000 81a4 	beq.w	8005ef8 <USB_EPStartXfer+0x11d8>
        {
          /* update last value to check if there is blocking state */
          wEPVal = PCD_GET_ENDPOINT(USBx, ep->num);
 8005bb0:	1d3b      	adds	r3, r7, #4
 8005bb2:	681a      	ldr	r2, [r3, #0]
 8005bb4:	463b      	mov	r3, r7
 8005bb6:	681b      	ldr	r3, [r3, #0]
 8005bb8:	781b      	ldrb	r3, [r3, #0]
 8005bba:	009b      	lsls	r3, r3, #2
 8005bbc:	4413      	add	r3, r2
 8005bbe:	881b      	ldrh	r3, [r3, #0]
 8005bc0:	f8a7 309a 	strh.w	r3, [r7, #154]	; 0x9a

          /*Blocking State */
          if ((((wEPVal & USB_EP_DTOG_RX) != 0U) && ((wEPVal & USB_EP_DTOG_TX) != 0U)) ||
 8005bc4:	f8b7 309a 	ldrh.w	r3, [r7, #154]	; 0x9a
 8005bc8:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8005bcc:	2b00      	cmp	r3, #0
 8005bce:	d005      	beq.n	8005bdc <USB_EPStartXfer+0xebc>
 8005bd0:	f8b7 309a 	ldrh.w	r3, [r7, #154]	; 0x9a
 8005bd4:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005bd8:	2b00      	cmp	r3, #0
 8005bda:	d10d      	bne.n	8005bf8 <USB_EPStartXfer+0xed8>
              (((wEPVal & USB_EP_DTOG_RX) == 0U) && ((wEPVal & USB_EP_DTOG_TX) == 0U)))
 8005bdc:	f8b7 309a 	ldrh.w	r3, [r7, #154]	; 0x9a
 8005be0:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
          if ((((wEPVal & USB_EP_DTOG_RX) != 0U) && ((wEPVal & USB_EP_DTOG_TX) != 0U)) ||
 8005be4:	2b00      	cmp	r3, #0
 8005be6:	f040 8187 	bne.w	8005ef8 <USB_EPStartXfer+0x11d8>
              (((wEPVal & USB_EP_DTOG_RX) == 0U) && ((wEPVal & USB_EP_DTOG_TX) == 0U)))
 8005bea:	f8b7 309a 	ldrh.w	r3, [r7, #154]	; 0x9a
 8005bee:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005bf2:	2b00      	cmp	r3, #0
 8005bf4:	f040 8180 	bne.w	8005ef8 <USB_EPStartXfer+0x11d8>
          {
            PCD_FreeUserBuffer(USBx, ep->num, 0U);
 8005bf8:	1d3b      	adds	r3, r7, #4
 8005bfa:	681a      	ldr	r2, [r3, #0]
 8005bfc:	463b      	mov	r3, r7
 8005bfe:	681b      	ldr	r3, [r3, #0]
 8005c00:	781b      	ldrb	r3, [r3, #0]
 8005c02:	009b      	lsls	r3, r3, #2
 8005c04:	4413      	add	r3, r2
 8005c06:	881b      	ldrh	r3, [r3, #0]
 8005c08:	b29b      	uxth	r3, r3
 8005c0a:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8005c0e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8005c12:	f8a7 3098 	strh.w	r3, [r7, #152]	; 0x98
 8005c16:	1d3b      	adds	r3, r7, #4
 8005c18:	681a      	ldr	r2, [r3, #0]
 8005c1a:	463b      	mov	r3, r7
 8005c1c:	681b      	ldr	r3, [r3, #0]
 8005c1e:	781b      	ldrb	r3, [r3, #0]
 8005c20:	009b      	lsls	r3, r3, #2
 8005c22:	441a      	add	r2, r3
 8005c24:	f8b7 3098 	ldrh.w	r3, [r7, #152]	; 0x98
 8005c28:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8005c2c:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8005c30:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8005c34:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 8005c38:	b29b      	uxth	r3, r3
 8005c3a:	8013      	strh	r3, [r2, #0]
 8005c3c:	e15c      	b.n	8005ef8 <USB_EPStartXfer+0x11d8>
          }
        }
      }
      /* iso out double */
      else if (ep->type == EP_TYPE_ISOC)
 8005c3e:	463b      	mov	r3, r7
 8005c40:	681b      	ldr	r3, [r3, #0]
 8005c42:	78db      	ldrb	r3, [r3, #3]
 8005c44:	2b01      	cmp	r3, #1
 8005c46:	f040 8155 	bne.w	8005ef4 <USB_EPStartXfer+0x11d4>
      {
        /* Multi packet transfer */
        if (ep->xfer_len > ep->maxpacket)
 8005c4a:	463b      	mov	r3, r7
 8005c4c:	681b      	ldr	r3, [r3, #0]
 8005c4e:	699a      	ldr	r2, [r3, #24]
 8005c50:	463b      	mov	r3, r7
 8005c52:	681b      	ldr	r3, [r3, #0]
 8005c54:	691b      	ldr	r3, [r3, #16]
 8005c56:	429a      	cmp	r2, r3
 8005c58:	d90e      	bls.n	8005c78 <USB_EPStartXfer+0xf58>
        {
          len = ep->maxpacket;
 8005c5a:	463b      	mov	r3, r7
 8005c5c:	681b      	ldr	r3, [r3, #0]
 8005c5e:	691b      	ldr	r3, [r3, #16]
 8005c60:	f8c7 310c 	str.w	r3, [r7, #268]	; 0x10c
          ep->xfer_len -= len;
 8005c64:	463b      	mov	r3, r7
 8005c66:	681b      	ldr	r3, [r3, #0]
 8005c68:	699a      	ldr	r2, [r3, #24]
 8005c6a:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8005c6e:	1ad2      	subs	r2, r2, r3
 8005c70:	463b      	mov	r3, r7
 8005c72:	681b      	ldr	r3, [r3, #0]
 8005c74:	619a      	str	r2, [r3, #24]
 8005c76:	e008      	b.n	8005c8a <USB_EPStartXfer+0xf6a>
        }
        else
        {
          len = ep->xfer_len;
 8005c78:	463b      	mov	r3, r7
 8005c7a:	681b      	ldr	r3, [r3, #0]
 8005c7c:	699b      	ldr	r3, [r3, #24]
 8005c7e:	f8c7 310c 	str.w	r3, [r7, #268]	; 0x10c
          ep->xfer_len = 0U;
 8005c82:	463b      	mov	r3, r7
 8005c84:	681b      	ldr	r3, [r3, #0]
 8005c86:	2200      	movs	r2, #0
 8005c88:	619a      	str	r2, [r3, #24]
        }
        PCD_SET_EP_DBUF_CNT(USBx, ep->num, ep->is_in, len);
 8005c8a:	463b      	mov	r3, r7
 8005c8c:	681b      	ldr	r3, [r3, #0]
 8005c8e:	785b      	ldrb	r3, [r3, #1]
 8005c90:	2b00      	cmp	r3, #0
 8005c92:	d16f      	bne.n	8005d74 <USB_EPStartXfer+0x1054>
 8005c94:	1d3b      	adds	r3, r7, #4
 8005c96:	681b      	ldr	r3, [r3, #0]
 8005c98:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 8005c9c:	1d3b      	adds	r3, r7, #4
 8005c9e:	681b      	ldr	r3, [r3, #0]
 8005ca0:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8005ca4:	b29b      	uxth	r3, r3
 8005ca6:	461a      	mov	r2, r3
 8005ca8:	f8d7 30d0 	ldr.w	r3, [r7, #208]	; 0xd0
 8005cac:	4413      	add	r3, r2
 8005cae:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 8005cb2:	463b      	mov	r3, r7
 8005cb4:	681b      	ldr	r3, [r3, #0]
 8005cb6:	781b      	ldrb	r3, [r3, #0]
 8005cb8:	011a      	lsls	r2, r3, #4
 8005cba:	f8d7 30d0 	ldr.w	r3, [r7, #208]	; 0xd0
 8005cbe:	4413      	add	r3, r2
 8005cc0:	f203 4304 	addw	r3, r3, #1028	; 0x404
 8005cc4:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
 8005cc8:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8005ccc:	2b00      	cmp	r3, #0
 8005cce:	d116      	bne.n	8005cfe <USB_EPStartXfer+0xfde>
 8005cd0:	f8d7 30cc 	ldr.w	r3, [r7, #204]	; 0xcc
 8005cd4:	881b      	ldrh	r3, [r3, #0]
 8005cd6:	b29b      	uxth	r3, r3
 8005cd8:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 8005cdc:	b29a      	uxth	r2, r3
 8005cde:	f8d7 30cc 	ldr.w	r3, [r7, #204]	; 0xcc
 8005ce2:	801a      	strh	r2, [r3, #0]
 8005ce4:	f8d7 30cc 	ldr.w	r3, [r7, #204]	; 0xcc
 8005ce8:	881b      	ldrh	r3, [r3, #0]
 8005cea:	b29b      	uxth	r3, r3
 8005cec:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8005cf0:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8005cf4:	b29a      	uxth	r2, r3
 8005cf6:	f8d7 30cc 	ldr.w	r3, [r7, #204]	; 0xcc
 8005cfa:	801a      	strh	r2, [r3, #0]
 8005cfc:	e05f      	b.n	8005dbe <USB_EPStartXfer+0x109e>
 8005cfe:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8005d02:	2b3e      	cmp	r3, #62	; 0x3e
 8005d04:	d818      	bhi.n	8005d38 <USB_EPStartXfer+0x1018>
 8005d06:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8005d0a:	085b      	lsrs	r3, r3, #1
 8005d0c:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
 8005d10:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8005d14:	f003 0301 	and.w	r3, r3, #1
 8005d18:	2b00      	cmp	r3, #0
 8005d1a:	d004      	beq.n	8005d26 <USB_EPStartXfer+0x1006>
 8005d1c:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8005d20:	3301      	adds	r3, #1
 8005d22:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
 8005d26:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8005d2a:	b29b      	uxth	r3, r3
 8005d2c:	029b      	lsls	r3, r3, #10
 8005d2e:	b29a      	uxth	r2, r3
 8005d30:	f8d7 30cc 	ldr.w	r3, [r7, #204]	; 0xcc
 8005d34:	801a      	strh	r2, [r3, #0]
 8005d36:	e042      	b.n	8005dbe <USB_EPStartXfer+0x109e>
 8005d38:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8005d3c:	095b      	lsrs	r3, r3, #5
 8005d3e:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
 8005d42:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8005d46:	f003 031f 	and.w	r3, r3, #31
 8005d4a:	2b00      	cmp	r3, #0
 8005d4c:	d104      	bne.n	8005d58 <USB_EPStartXfer+0x1038>
 8005d4e:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8005d52:	3b01      	subs	r3, #1
 8005d54:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
 8005d58:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8005d5c:	b29b      	uxth	r3, r3
 8005d5e:	029b      	lsls	r3, r3, #10
 8005d60:	b29b      	uxth	r3, r3
 8005d62:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8005d66:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8005d6a:	b29a      	uxth	r2, r3
 8005d6c:	f8d7 30cc 	ldr.w	r3, [r7, #204]	; 0xcc
 8005d70:	801a      	strh	r2, [r3, #0]
 8005d72:	e024      	b.n	8005dbe <USB_EPStartXfer+0x109e>
 8005d74:	463b      	mov	r3, r7
 8005d76:	681b      	ldr	r3, [r3, #0]
 8005d78:	785b      	ldrb	r3, [r3, #1]
 8005d7a:	2b01      	cmp	r3, #1
 8005d7c:	d11f      	bne.n	8005dbe <USB_EPStartXfer+0x109e>
 8005d7e:	1d3b      	adds	r3, r7, #4
 8005d80:	681b      	ldr	r3, [r3, #0]
 8005d82:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
 8005d86:	1d3b      	adds	r3, r7, #4
 8005d88:	681b      	ldr	r3, [r3, #0]
 8005d8a:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8005d8e:	b29b      	uxth	r3, r3
 8005d90:	461a      	mov	r2, r3
 8005d92:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 8005d96:	4413      	add	r3, r2
 8005d98:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
 8005d9c:	463b      	mov	r3, r7
 8005d9e:	681b      	ldr	r3, [r3, #0]
 8005da0:	781b      	ldrb	r3, [r3, #0]
 8005da2:	011a      	lsls	r2, r3, #4
 8005da4:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 8005da8:	4413      	add	r3, r2
 8005daa:	f203 4304 	addw	r3, r3, #1028	; 0x404
 8005dae:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
 8005db2:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8005db6:	b29a      	uxth	r2, r3
 8005db8:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 8005dbc:	801a      	strh	r2, [r3, #0]
 8005dbe:	1d3b      	adds	r3, r7, #4
 8005dc0:	681b      	ldr	r3, [r3, #0]
 8005dc2:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 8005dc6:	463b      	mov	r3, r7
 8005dc8:	681b      	ldr	r3, [r3, #0]
 8005dca:	785b      	ldrb	r3, [r3, #1]
 8005dcc:	2b00      	cmp	r3, #0
 8005dce:	d16f      	bne.n	8005eb0 <USB_EPStartXfer+0x1190>
 8005dd0:	1d3b      	adds	r3, r7, #4
 8005dd2:	681b      	ldr	r3, [r3, #0]
 8005dd4:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 8005dd8:	1d3b      	adds	r3, r7, #4
 8005dda:	681b      	ldr	r3, [r3, #0]
 8005ddc:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8005de0:	b29b      	uxth	r3, r3
 8005de2:	461a      	mov	r2, r3
 8005de4:	f8d7 30c0 	ldr.w	r3, [r7, #192]	; 0xc0
 8005de8:	4413      	add	r3, r2
 8005dea:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 8005dee:	463b      	mov	r3, r7
 8005df0:	681b      	ldr	r3, [r3, #0]
 8005df2:	781b      	ldrb	r3, [r3, #0]
 8005df4:	011a      	lsls	r2, r3, #4
 8005df6:	f8d7 30c0 	ldr.w	r3, [r7, #192]	; 0xc0
 8005dfa:	4413      	add	r3, r2
 8005dfc:	f203 430c 	addw	r3, r3, #1036	; 0x40c
 8005e00:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
 8005e04:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8005e08:	2b00      	cmp	r3, #0
 8005e0a:	d116      	bne.n	8005e3a <USB_EPStartXfer+0x111a>
 8005e0c:	f8d7 30bc 	ldr.w	r3, [r7, #188]	; 0xbc
 8005e10:	881b      	ldrh	r3, [r3, #0]
 8005e12:	b29b      	uxth	r3, r3
 8005e14:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 8005e18:	b29a      	uxth	r2, r3
 8005e1a:	f8d7 30bc 	ldr.w	r3, [r7, #188]	; 0xbc
 8005e1e:	801a      	strh	r2, [r3, #0]
 8005e20:	f8d7 30bc 	ldr.w	r3, [r7, #188]	; 0xbc
 8005e24:	881b      	ldrh	r3, [r3, #0]
 8005e26:	b29b      	uxth	r3, r3
 8005e28:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8005e2c:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8005e30:	b29a      	uxth	r2, r3
 8005e32:	f8d7 30bc 	ldr.w	r3, [r7, #188]	; 0xbc
 8005e36:	801a      	strh	r2, [r3, #0]
 8005e38:	e05e      	b.n	8005ef8 <USB_EPStartXfer+0x11d8>
 8005e3a:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8005e3e:	2b3e      	cmp	r3, #62	; 0x3e
 8005e40:	d818      	bhi.n	8005e74 <USB_EPStartXfer+0x1154>
 8005e42:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8005e46:	085b      	lsrs	r3, r3, #1
 8005e48:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
 8005e4c:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8005e50:	f003 0301 	and.w	r3, r3, #1
 8005e54:	2b00      	cmp	r3, #0
 8005e56:	d004      	beq.n	8005e62 <USB_EPStartXfer+0x1142>
 8005e58:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8005e5c:	3301      	adds	r3, #1
 8005e5e:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
 8005e62:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8005e66:	b29b      	uxth	r3, r3
 8005e68:	029b      	lsls	r3, r3, #10
 8005e6a:	b29a      	uxth	r2, r3
 8005e6c:	f8d7 30bc 	ldr.w	r3, [r7, #188]	; 0xbc
 8005e70:	801a      	strh	r2, [r3, #0]
 8005e72:	e041      	b.n	8005ef8 <USB_EPStartXfer+0x11d8>
 8005e74:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8005e78:	095b      	lsrs	r3, r3, #5
 8005e7a:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
 8005e7e:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8005e82:	f003 031f 	and.w	r3, r3, #31
 8005e86:	2b00      	cmp	r3, #0
 8005e88:	d104      	bne.n	8005e94 <USB_EPStartXfer+0x1174>
 8005e8a:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8005e8e:	3b01      	subs	r3, #1
 8005e90:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
 8005e94:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8005e98:	b29b      	uxth	r3, r3
 8005e9a:	029b      	lsls	r3, r3, #10
 8005e9c:	b29b      	uxth	r3, r3
 8005e9e:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8005ea2:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8005ea6:	b29a      	uxth	r2, r3
 8005ea8:	f8d7 30bc 	ldr.w	r3, [r7, #188]	; 0xbc
 8005eac:	801a      	strh	r2, [r3, #0]
 8005eae:	e023      	b.n	8005ef8 <USB_EPStartXfer+0x11d8>
 8005eb0:	463b      	mov	r3, r7
 8005eb2:	681b      	ldr	r3, [r3, #0]
 8005eb4:	785b      	ldrb	r3, [r3, #1]
 8005eb6:	2b01      	cmp	r3, #1
 8005eb8:	d11e      	bne.n	8005ef8 <USB_EPStartXfer+0x11d8>
 8005eba:	1d3b      	adds	r3, r7, #4
 8005ebc:	681b      	ldr	r3, [r3, #0]
 8005ebe:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8005ec2:	b29b      	uxth	r3, r3
 8005ec4:	461a      	mov	r2, r3
 8005ec6:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 8005eca:	4413      	add	r3, r2
 8005ecc:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 8005ed0:	463b      	mov	r3, r7
 8005ed2:	681b      	ldr	r3, [r3, #0]
 8005ed4:	781b      	ldrb	r3, [r3, #0]
 8005ed6:	011a      	lsls	r2, r3, #4
 8005ed8:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 8005edc:	4413      	add	r3, r2
 8005ede:	f203 430c 	addw	r3, r3, #1036	; 0x40c
 8005ee2:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
 8005ee6:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8005eea:	b29a      	uxth	r2, r3
 8005eec:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 8005ef0:	801a      	strh	r2, [r3, #0]
 8005ef2:	e001      	b.n	8005ef8 <USB_EPStartXfer+0x11d8>
      }
      else
      {
        return HAL_ERROR;
 8005ef4:	2301      	movs	r3, #1
 8005ef6:	e02e      	b.n	8005f56 <USB_EPStartXfer+0x1236>
      }
    }

    PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_VALID);
 8005ef8:	1d3b      	adds	r3, r7, #4
 8005efa:	681a      	ldr	r2, [r3, #0]
 8005efc:	463b      	mov	r3, r7
 8005efe:	681b      	ldr	r3, [r3, #0]
 8005f00:	781b      	ldrb	r3, [r3, #0]
 8005f02:	009b      	lsls	r3, r3, #2
 8005f04:	4413      	add	r3, r2
 8005f06:	881b      	ldrh	r3, [r3, #0]
 8005f08:	b29b      	uxth	r3, r3
 8005f0a:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8005f0e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8005f12:	f8a7 308e 	strh.w	r3, [r7, #142]	; 0x8e
 8005f16:	f8b7 308e 	ldrh.w	r3, [r7, #142]	; 0x8e
 8005f1a:	f483 5380 	eor.w	r3, r3, #4096	; 0x1000
 8005f1e:	f8a7 308e 	strh.w	r3, [r7, #142]	; 0x8e
 8005f22:	f8b7 308e 	ldrh.w	r3, [r7, #142]	; 0x8e
 8005f26:	f483 5300 	eor.w	r3, r3, #8192	; 0x2000
 8005f2a:	f8a7 308e 	strh.w	r3, [r7, #142]	; 0x8e
 8005f2e:	1d3b      	adds	r3, r7, #4
 8005f30:	681a      	ldr	r2, [r3, #0]
 8005f32:	463b      	mov	r3, r7
 8005f34:	681b      	ldr	r3, [r3, #0]
 8005f36:	781b      	ldrb	r3, [r3, #0]
 8005f38:	009b      	lsls	r3, r3, #2
 8005f3a:	441a      	add	r2, r3
 8005f3c:	f8b7 308e 	ldrh.w	r3, [r7, #142]	; 0x8e
 8005f40:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8005f44:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8005f48:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8005f4c:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8005f50:	b29b      	uxth	r3, r3
 8005f52:	8013      	strh	r3, [r2, #0]
  }

  return HAL_OK;
 8005f54:	2300      	movs	r3, #0
}
 8005f56:	4618      	mov	r0, r3
 8005f58:	f507 7788 	add.w	r7, r7, #272	; 0x110
 8005f5c:	46bd      	mov	sp, r7
 8005f5e:	bd80      	pop	{r7, pc}

08005f60 <USB_EPSetStall>:
  * @param  USBx Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPSetStall(USB_TypeDef *USBx, USB_EPTypeDef *ep)
{
 8005f60:	b480      	push	{r7}
 8005f62:	b085      	sub	sp, #20
 8005f64:	af00      	add	r7, sp, #0
 8005f66:	6078      	str	r0, [r7, #4]
 8005f68:	6039      	str	r1, [r7, #0]
  if (ep->is_in != 0U)
 8005f6a:	683b      	ldr	r3, [r7, #0]
 8005f6c:	785b      	ldrb	r3, [r3, #1]
 8005f6e:	2b00      	cmp	r3, #0
 8005f70:	d020      	beq.n	8005fb4 <USB_EPSetStall+0x54>
  {
    PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_STALL);
 8005f72:	687a      	ldr	r2, [r7, #4]
 8005f74:	683b      	ldr	r3, [r7, #0]
 8005f76:	781b      	ldrb	r3, [r3, #0]
 8005f78:	009b      	lsls	r3, r3, #2
 8005f7a:	4413      	add	r3, r2
 8005f7c:	881b      	ldrh	r3, [r3, #0]
 8005f7e:	b29b      	uxth	r3, r3
 8005f80:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8005f84:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8005f88:	81bb      	strh	r3, [r7, #12]
 8005f8a:	89bb      	ldrh	r3, [r7, #12]
 8005f8c:	f083 0310 	eor.w	r3, r3, #16
 8005f90:	81bb      	strh	r3, [r7, #12]
 8005f92:	687a      	ldr	r2, [r7, #4]
 8005f94:	683b      	ldr	r3, [r7, #0]
 8005f96:	781b      	ldrb	r3, [r3, #0]
 8005f98:	009b      	lsls	r3, r3, #2
 8005f9a:	441a      	add	r2, r3
 8005f9c:	89bb      	ldrh	r3, [r7, #12]
 8005f9e:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8005fa2:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8005fa6:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8005faa:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8005fae:	b29b      	uxth	r3, r3
 8005fb0:	8013      	strh	r3, [r2, #0]
 8005fb2:	e01f      	b.n	8005ff4 <USB_EPSetStall+0x94>
  }
  else
  {
    PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_STALL);
 8005fb4:	687a      	ldr	r2, [r7, #4]
 8005fb6:	683b      	ldr	r3, [r7, #0]
 8005fb8:	781b      	ldrb	r3, [r3, #0]
 8005fba:	009b      	lsls	r3, r3, #2
 8005fbc:	4413      	add	r3, r2
 8005fbe:	881b      	ldrh	r3, [r3, #0]
 8005fc0:	b29b      	uxth	r3, r3
 8005fc2:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8005fc6:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8005fca:	81fb      	strh	r3, [r7, #14]
 8005fcc:	89fb      	ldrh	r3, [r7, #14]
 8005fce:	f483 5380 	eor.w	r3, r3, #4096	; 0x1000
 8005fd2:	81fb      	strh	r3, [r7, #14]
 8005fd4:	687a      	ldr	r2, [r7, #4]
 8005fd6:	683b      	ldr	r3, [r7, #0]
 8005fd8:	781b      	ldrb	r3, [r3, #0]
 8005fda:	009b      	lsls	r3, r3, #2
 8005fdc:	441a      	add	r2, r3
 8005fde:	89fb      	ldrh	r3, [r7, #14]
 8005fe0:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8005fe4:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8005fe8:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8005fec:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8005ff0:	b29b      	uxth	r3, r3
 8005ff2:	8013      	strh	r3, [r2, #0]
  }

  return HAL_OK;
 8005ff4:	2300      	movs	r3, #0
}
 8005ff6:	4618      	mov	r0, r3
 8005ff8:	3714      	adds	r7, #20
 8005ffa:	46bd      	mov	sp, r7
 8005ffc:	bc80      	pop	{r7}
 8005ffe:	4770      	bx	lr

08006000 <USB_EPClearStall>:
  * @param  USBx Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPClearStall(USB_TypeDef *USBx, USB_EPTypeDef *ep)
{
 8006000:	b480      	push	{r7}
 8006002:	b087      	sub	sp, #28
 8006004:	af00      	add	r7, sp, #0
 8006006:	6078      	str	r0, [r7, #4]
 8006008:	6039      	str	r1, [r7, #0]
  if (ep->doublebuffer == 0U)
 800600a:	683b      	ldr	r3, [r7, #0]
 800600c:	7b1b      	ldrb	r3, [r3, #12]
 800600e:	2b00      	cmp	r3, #0
 8006010:	f040 809d 	bne.w	800614e <USB_EPClearStall+0x14e>
  {
    if (ep->is_in != 0U)
 8006014:	683b      	ldr	r3, [r7, #0]
 8006016:	785b      	ldrb	r3, [r3, #1]
 8006018:	2b00      	cmp	r3, #0
 800601a:	d04c      	beq.n	80060b6 <USB_EPClearStall+0xb6>
    {
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 800601c:	687a      	ldr	r2, [r7, #4]
 800601e:	683b      	ldr	r3, [r7, #0]
 8006020:	781b      	ldrb	r3, [r3, #0]
 8006022:	009b      	lsls	r3, r3, #2
 8006024:	4413      	add	r3, r2
 8006026:	881b      	ldrh	r3, [r3, #0]
 8006028:	823b      	strh	r3, [r7, #16]
 800602a:	8a3b      	ldrh	r3, [r7, #16]
 800602c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8006030:	2b00      	cmp	r3, #0
 8006032:	d01b      	beq.n	800606c <USB_EPClearStall+0x6c>
 8006034:	687a      	ldr	r2, [r7, #4]
 8006036:	683b      	ldr	r3, [r7, #0]
 8006038:	781b      	ldrb	r3, [r3, #0]
 800603a:	009b      	lsls	r3, r3, #2
 800603c:	4413      	add	r3, r2
 800603e:	881b      	ldrh	r3, [r3, #0]
 8006040:	b29b      	uxth	r3, r3
 8006042:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8006046:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800604a:	81fb      	strh	r3, [r7, #14]
 800604c:	687a      	ldr	r2, [r7, #4]
 800604e:	683b      	ldr	r3, [r7, #0]
 8006050:	781b      	ldrb	r3, [r3, #0]
 8006052:	009b      	lsls	r3, r3, #2
 8006054:	441a      	add	r2, r3
 8006056:	89fb      	ldrh	r3, [r7, #14]
 8006058:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 800605c:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8006060:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8006064:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 8006068:	b29b      	uxth	r3, r3
 800606a:	8013      	strh	r3, [r2, #0]

      if (ep->type != EP_TYPE_ISOC)
 800606c:	683b      	ldr	r3, [r7, #0]
 800606e:	78db      	ldrb	r3, [r3, #3]
 8006070:	2b01      	cmp	r3, #1
 8006072:	d06c      	beq.n	800614e <USB_EPClearStall+0x14e>
      {
        /* Configure NAK status for the Endpoint */
        PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_NAK);
 8006074:	687a      	ldr	r2, [r7, #4]
 8006076:	683b      	ldr	r3, [r7, #0]
 8006078:	781b      	ldrb	r3, [r3, #0]
 800607a:	009b      	lsls	r3, r3, #2
 800607c:	4413      	add	r3, r2
 800607e:	881b      	ldrh	r3, [r3, #0]
 8006080:	b29b      	uxth	r3, r3
 8006082:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8006086:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800608a:	81bb      	strh	r3, [r7, #12]
 800608c:	89bb      	ldrh	r3, [r7, #12]
 800608e:	f083 0320 	eor.w	r3, r3, #32
 8006092:	81bb      	strh	r3, [r7, #12]
 8006094:	687a      	ldr	r2, [r7, #4]
 8006096:	683b      	ldr	r3, [r7, #0]
 8006098:	781b      	ldrb	r3, [r3, #0]
 800609a:	009b      	lsls	r3, r3, #2
 800609c:	441a      	add	r2, r3
 800609e:	89bb      	ldrh	r3, [r7, #12]
 80060a0:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 80060a4:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 80060a8:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80060ac:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80060b0:	b29b      	uxth	r3, r3
 80060b2:	8013      	strh	r3, [r2, #0]
 80060b4:	e04b      	b.n	800614e <USB_EPClearStall+0x14e>
      }
    }
    else
    {
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 80060b6:	687a      	ldr	r2, [r7, #4]
 80060b8:	683b      	ldr	r3, [r7, #0]
 80060ba:	781b      	ldrb	r3, [r3, #0]
 80060bc:	009b      	lsls	r3, r3, #2
 80060be:	4413      	add	r3, r2
 80060c0:	881b      	ldrh	r3, [r3, #0]
 80060c2:	82fb      	strh	r3, [r7, #22]
 80060c4:	8afb      	ldrh	r3, [r7, #22]
 80060c6:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80060ca:	2b00      	cmp	r3, #0
 80060cc:	d01b      	beq.n	8006106 <USB_EPClearStall+0x106>
 80060ce:	687a      	ldr	r2, [r7, #4]
 80060d0:	683b      	ldr	r3, [r7, #0]
 80060d2:	781b      	ldrb	r3, [r3, #0]
 80060d4:	009b      	lsls	r3, r3, #2
 80060d6:	4413      	add	r3, r2
 80060d8:	881b      	ldrh	r3, [r3, #0]
 80060da:	b29b      	uxth	r3, r3
 80060dc:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80060e0:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80060e4:	82bb      	strh	r3, [r7, #20]
 80060e6:	687a      	ldr	r2, [r7, #4]
 80060e8:	683b      	ldr	r3, [r7, #0]
 80060ea:	781b      	ldrb	r3, [r3, #0]
 80060ec:	009b      	lsls	r3, r3, #2
 80060ee:	441a      	add	r2, r3
 80060f0:	8abb      	ldrh	r3, [r7, #20]
 80060f2:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 80060f6:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 80060fa:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 80060fe:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8006102:	b29b      	uxth	r3, r3
 8006104:	8013      	strh	r3, [r2, #0]

      /* Configure VALID status for the Endpoint */
      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_VALID);
 8006106:	687a      	ldr	r2, [r7, #4]
 8006108:	683b      	ldr	r3, [r7, #0]
 800610a:	781b      	ldrb	r3, [r3, #0]
 800610c:	009b      	lsls	r3, r3, #2
 800610e:	4413      	add	r3, r2
 8006110:	881b      	ldrh	r3, [r3, #0]
 8006112:	b29b      	uxth	r3, r3
 8006114:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8006118:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800611c:	827b      	strh	r3, [r7, #18]
 800611e:	8a7b      	ldrh	r3, [r7, #18]
 8006120:	f483 5380 	eor.w	r3, r3, #4096	; 0x1000
 8006124:	827b      	strh	r3, [r7, #18]
 8006126:	8a7b      	ldrh	r3, [r7, #18]
 8006128:	f483 5300 	eor.w	r3, r3, #8192	; 0x2000
 800612c:	827b      	strh	r3, [r7, #18]
 800612e:	687a      	ldr	r2, [r7, #4]
 8006130:	683b      	ldr	r3, [r7, #0]
 8006132:	781b      	ldrb	r3, [r3, #0]
 8006134:	009b      	lsls	r3, r3, #2
 8006136:	441a      	add	r2, r3
 8006138:	8a7b      	ldrh	r3, [r7, #18]
 800613a:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 800613e:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8006142:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8006146:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800614a:	b29b      	uxth	r3, r3
 800614c:	8013      	strh	r3, [r2, #0]
    }
  }

  return HAL_OK;
 800614e:	2300      	movs	r3, #0
}
 8006150:	4618      	mov	r0, r3
 8006152:	371c      	adds	r7, #28
 8006154:	46bd      	mov	sp, r7
 8006156:	bc80      	pop	{r7}
 8006158:	4770      	bx	lr

0800615a <USB_SetDevAddress>:
  * @param  address new device address to be assigned
  *          This parameter can be a value from 0 to 255
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_SetDevAddress(USB_TypeDef *USBx, uint8_t address)
{
 800615a:	b480      	push	{r7}
 800615c:	b083      	sub	sp, #12
 800615e:	af00      	add	r7, sp, #0
 8006160:	6078      	str	r0, [r7, #4]
 8006162:	460b      	mov	r3, r1
 8006164:	70fb      	strb	r3, [r7, #3]
  if (address == 0U)
 8006166:	78fb      	ldrb	r3, [r7, #3]
 8006168:	2b00      	cmp	r3, #0
 800616a:	d103      	bne.n	8006174 <USB_SetDevAddress+0x1a>
  {
    /* set device address and enable function */
    USBx->DADDR = (uint16_t)USB_DADDR_EF;
 800616c:	687b      	ldr	r3, [r7, #4]
 800616e:	2280      	movs	r2, #128	; 0x80
 8006170:	f8a3 204c 	strh.w	r2, [r3, #76]	; 0x4c
  }

  return HAL_OK;
 8006174:	2300      	movs	r3, #0
}
 8006176:	4618      	mov	r0, r3
 8006178:	370c      	adds	r7, #12
 800617a:	46bd      	mov	sp, r7
 800617c:	bc80      	pop	{r7}
 800617e:	4770      	bx	lr

08006180 <USB_DevConnect>:
  * @brief  USB_DevConnect Connect the USB device by enabling the pull-up/pull-down
  * @param  USBx Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_DevConnect(USB_TypeDef *USBx)
{
 8006180:	b480      	push	{r7}
 8006182:	b083      	sub	sp, #12
 8006184:	af00      	add	r7, sp, #0
 8006186:	6078      	str	r0, [r7, #4]
  /* NOTE : - This function is not required by USB Device FS peripheral, it is used
              only by USB OTG FS peripheral.
            - This function is added to ensure compatibility across platforms.
   */

  return HAL_OK;
 8006188:	2300      	movs	r3, #0
}
 800618a:	4618      	mov	r0, r3
 800618c:	370c      	adds	r7, #12
 800618e:	46bd      	mov	sp, r7
 8006190:	bc80      	pop	{r7}
 8006192:	4770      	bx	lr

08006194 <USB_DevDisconnect>:
  * @brief  USB_DevDisconnect Disconnect the USB device by disabling the pull-up/pull-down
  * @param  USBx Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_DevDisconnect(USB_TypeDef *USBx)
{
 8006194:	b480      	push	{r7}
 8006196:	b083      	sub	sp, #12
 8006198:	af00      	add	r7, sp, #0
 800619a:	6078      	str	r0, [r7, #4]
  /* NOTE : - This function is not required by USB Device FS peripheral, it is used
              only by USB OTG FS peripheral.
            - This function is added to ensure compatibility across platforms.
   */

  return HAL_OK;
 800619c:	2300      	movs	r3, #0
}
 800619e:	4618      	mov	r0, r3
 80061a0:	370c      	adds	r7, #12
 80061a2:	46bd      	mov	sp, r7
 80061a4:	bc80      	pop	{r7}
 80061a6:	4770      	bx	lr

080061a8 <USB_ReadInterrupts>:
  * @brief  USB_ReadInterrupts return the global USB interrupt status
  * @param  USBx Selected device
  * @retval HAL status
  */
uint32_t  USB_ReadInterrupts(USB_TypeDef *USBx)
{
 80061a8:	b480      	push	{r7}
 80061aa:	b085      	sub	sp, #20
 80061ac:	af00      	add	r7, sp, #0
 80061ae:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;

  tmpreg = USBx->ISTR;
 80061b0:	687b      	ldr	r3, [r7, #4]
 80061b2:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 80061b6:	b29b      	uxth	r3, r3
 80061b8:	60fb      	str	r3, [r7, #12]
  return tmpreg;
 80061ba:	68fb      	ldr	r3, [r7, #12]
}
 80061bc:	4618      	mov	r0, r3
 80061be:	3714      	adds	r7, #20
 80061c0:	46bd      	mov	sp, r7
 80061c2:	bc80      	pop	{r7}
 80061c4:	4770      	bx	lr

080061c6 <USB_EP0_OutStart>:
  * @param  USBx Selected device
  * @param  psetup pointer to setup packet
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EP0_OutStart(USB_TypeDef *USBx, uint8_t *psetup)
{
 80061c6:	b480      	push	{r7}
 80061c8:	b083      	sub	sp, #12
 80061ca:	af00      	add	r7, sp, #0
 80061cc:	6078      	str	r0, [r7, #4]
 80061ce:	6039      	str	r1, [r7, #0]
  UNUSED(psetup);
  /* NOTE : - This function is not required by USB Device FS peripheral, it is used
              only by USB OTG FS peripheral.
            - This function is added to ensure compatibility across platforms.
   */
  return HAL_OK;
 80061d0:	2300      	movs	r3, #0
}
 80061d2:	4618      	mov	r0, r3
 80061d4:	370c      	adds	r7, #12
 80061d6:	46bd      	mov	sp, r7
 80061d8:	bc80      	pop	{r7}
 80061da:	4770      	bx	lr

080061dc <USB_WritePMA>:
  * @param   wPMABufAddr address into PMA.
  * @param   wNBytes no. of bytes to be copied.
  * @retval None
  */
void USB_WritePMA(USB_TypeDef *USBx, uint8_t *pbUsrBuf, uint16_t wPMABufAddr, uint16_t wNBytes)
{
 80061dc:	b480      	push	{r7}
 80061de:	b08d      	sub	sp, #52	; 0x34
 80061e0:	af00      	add	r7, sp, #0
 80061e2:	60f8      	str	r0, [r7, #12]
 80061e4:	60b9      	str	r1, [r7, #8]
 80061e6:	4611      	mov	r1, r2
 80061e8:	461a      	mov	r2, r3
 80061ea:	460b      	mov	r3, r1
 80061ec:	80fb      	strh	r3, [r7, #6]
 80061ee:	4613      	mov	r3, r2
 80061f0:	80bb      	strh	r3, [r7, #4]
  uint32_t n = ((uint32_t)wNBytes + 1U) >> 1;
 80061f2:	88bb      	ldrh	r3, [r7, #4]
 80061f4:	3301      	adds	r3, #1
 80061f6:	085b      	lsrs	r3, r3, #1
 80061f8:	623b      	str	r3, [r7, #32]
  uint32_t BaseAddr = (uint32_t)USBx;
 80061fa:	68fb      	ldr	r3, [r7, #12]
 80061fc:	61fb      	str	r3, [r7, #28]
  uint32_t i, temp1, temp2;
  __IO uint16_t *pdwVal;
  uint8_t *pBuf = pbUsrBuf;
 80061fe:	68bb      	ldr	r3, [r7, #8]
 8006200:	627b      	str	r3, [r7, #36]	; 0x24

  pdwVal = (__IO uint16_t *)(BaseAddr + 0x400U + ((uint32_t)wPMABufAddr * PMA_ACCESS));
 8006202:	88fb      	ldrh	r3, [r7, #6]
 8006204:	005a      	lsls	r2, r3, #1
 8006206:	69fb      	ldr	r3, [r7, #28]
 8006208:	4413      	add	r3, r2
 800620a:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 800620e:	62bb      	str	r3, [r7, #40]	; 0x28

  for (i = n; i != 0U; i--)
 8006210:	6a3b      	ldr	r3, [r7, #32]
 8006212:	62fb      	str	r3, [r7, #44]	; 0x2c
 8006214:	e01e      	b.n	8006254 <USB_WritePMA+0x78>
  {
    temp1 = *pBuf;
 8006216:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006218:	781b      	ldrb	r3, [r3, #0]
 800621a:	61bb      	str	r3, [r7, #24]
    pBuf++;
 800621c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800621e:	3301      	adds	r3, #1
 8006220:	627b      	str	r3, [r7, #36]	; 0x24
    temp2 = temp1 | ((uint16_t)((uint16_t) *pBuf << 8));
 8006222:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006224:	781b      	ldrb	r3, [r3, #0]
 8006226:	b29b      	uxth	r3, r3
 8006228:	021b      	lsls	r3, r3, #8
 800622a:	b29b      	uxth	r3, r3
 800622c:	461a      	mov	r2, r3
 800622e:	69bb      	ldr	r3, [r7, #24]
 8006230:	4313      	orrs	r3, r2
 8006232:	617b      	str	r3, [r7, #20]
    *pdwVal = (uint16_t)temp2;
 8006234:	697b      	ldr	r3, [r7, #20]
 8006236:	b29a      	uxth	r2, r3
 8006238:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800623a:	801a      	strh	r2, [r3, #0]
    pdwVal++;
 800623c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800623e:	3302      	adds	r3, #2
 8006240:	62bb      	str	r3, [r7, #40]	; 0x28

#if PMA_ACCESS > 1U
    pdwVal++;
 8006242:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006244:	3302      	adds	r3, #2
 8006246:	62bb      	str	r3, [r7, #40]	; 0x28
#endif

    pBuf++;
 8006248:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800624a:	3301      	adds	r3, #1
 800624c:	627b      	str	r3, [r7, #36]	; 0x24
  for (i = n; i != 0U; i--)
 800624e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006250:	3b01      	subs	r3, #1
 8006252:	62fb      	str	r3, [r7, #44]	; 0x2c
 8006254:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006256:	2b00      	cmp	r3, #0
 8006258:	d1dd      	bne.n	8006216 <USB_WritePMA+0x3a>
  }
}
 800625a:	bf00      	nop
 800625c:	3734      	adds	r7, #52	; 0x34
 800625e:	46bd      	mov	sp, r7
 8006260:	bc80      	pop	{r7}
 8006262:	4770      	bx	lr

08006264 <USB_ReadPMA>:
  * @param   wPMABufAddr address into PMA.
  * @param   wNBytes no. of bytes to be copied.
  * @retval None
  */
void USB_ReadPMA(USB_TypeDef *USBx, uint8_t *pbUsrBuf, uint16_t wPMABufAddr, uint16_t wNBytes)
{
 8006264:	b480      	push	{r7}
 8006266:	b08b      	sub	sp, #44	; 0x2c
 8006268:	af00      	add	r7, sp, #0
 800626a:	60f8      	str	r0, [r7, #12]
 800626c:	60b9      	str	r1, [r7, #8]
 800626e:	4611      	mov	r1, r2
 8006270:	461a      	mov	r2, r3
 8006272:	460b      	mov	r3, r1
 8006274:	80fb      	strh	r3, [r7, #6]
 8006276:	4613      	mov	r3, r2
 8006278:	80bb      	strh	r3, [r7, #4]
  uint32_t n = (uint32_t)wNBytes >> 1;
 800627a:	88bb      	ldrh	r3, [r7, #4]
 800627c:	085b      	lsrs	r3, r3, #1
 800627e:	b29b      	uxth	r3, r3
 8006280:	61bb      	str	r3, [r7, #24]
  uint32_t BaseAddr = (uint32_t)USBx;
 8006282:	68fb      	ldr	r3, [r7, #12]
 8006284:	617b      	str	r3, [r7, #20]
  uint32_t i, temp;
  __IO uint16_t *pdwVal;
  uint8_t *pBuf = pbUsrBuf;
 8006286:	68bb      	ldr	r3, [r7, #8]
 8006288:	61fb      	str	r3, [r7, #28]

  pdwVal = (__IO uint16_t *)(BaseAddr + 0x400U + ((uint32_t)wPMABufAddr * PMA_ACCESS));
 800628a:	88fb      	ldrh	r3, [r7, #6]
 800628c:	005a      	lsls	r2, r3, #1
 800628e:	697b      	ldr	r3, [r7, #20]
 8006290:	4413      	add	r3, r2
 8006292:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8006296:	623b      	str	r3, [r7, #32]

  for (i = n; i != 0U; i--)
 8006298:	69bb      	ldr	r3, [r7, #24]
 800629a:	627b      	str	r3, [r7, #36]	; 0x24
 800629c:	e01b      	b.n	80062d6 <USB_ReadPMA+0x72>
  {
    temp = *(__IO uint16_t *)pdwVal;
 800629e:	6a3b      	ldr	r3, [r7, #32]
 80062a0:	881b      	ldrh	r3, [r3, #0]
 80062a2:	b29b      	uxth	r3, r3
 80062a4:	613b      	str	r3, [r7, #16]
    pdwVal++;
 80062a6:	6a3b      	ldr	r3, [r7, #32]
 80062a8:	3302      	adds	r3, #2
 80062aa:	623b      	str	r3, [r7, #32]
    *pBuf = (uint8_t)((temp >> 0) & 0xFFU);
 80062ac:	693b      	ldr	r3, [r7, #16]
 80062ae:	b2da      	uxtb	r2, r3
 80062b0:	69fb      	ldr	r3, [r7, #28]
 80062b2:	701a      	strb	r2, [r3, #0]
    pBuf++;
 80062b4:	69fb      	ldr	r3, [r7, #28]
 80062b6:	3301      	adds	r3, #1
 80062b8:	61fb      	str	r3, [r7, #28]
    *pBuf = (uint8_t)((temp >> 8) & 0xFFU);
 80062ba:	693b      	ldr	r3, [r7, #16]
 80062bc:	0a1b      	lsrs	r3, r3, #8
 80062be:	b2da      	uxtb	r2, r3
 80062c0:	69fb      	ldr	r3, [r7, #28]
 80062c2:	701a      	strb	r2, [r3, #0]
    pBuf++;
 80062c4:	69fb      	ldr	r3, [r7, #28]
 80062c6:	3301      	adds	r3, #1
 80062c8:	61fb      	str	r3, [r7, #28]

#if PMA_ACCESS > 1U
    pdwVal++;
 80062ca:	6a3b      	ldr	r3, [r7, #32]
 80062cc:	3302      	adds	r3, #2
 80062ce:	623b      	str	r3, [r7, #32]
  for (i = n; i != 0U; i--)
 80062d0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80062d2:	3b01      	subs	r3, #1
 80062d4:	627b      	str	r3, [r7, #36]	; 0x24
 80062d6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80062d8:	2b00      	cmp	r3, #0
 80062da:	d1e0      	bne.n	800629e <USB_ReadPMA+0x3a>
#endif
  }

  if ((wNBytes % 2U) != 0U)
 80062dc:	88bb      	ldrh	r3, [r7, #4]
 80062de:	f003 0301 	and.w	r3, r3, #1
 80062e2:	b29b      	uxth	r3, r3
 80062e4:	2b00      	cmp	r3, #0
 80062e6:	d007      	beq.n	80062f8 <USB_ReadPMA+0x94>
  {
    temp = *pdwVal;
 80062e8:	6a3b      	ldr	r3, [r7, #32]
 80062ea:	881b      	ldrh	r3, [r3, #0]
 80062ec:	b29b      	uxth	r3, r3
 80062ee:	613b      	str	r3, [r7, #16]
    *pBuf = (uint8_t)((temp >> 0) & 0xFFU);
 80062f0:	693b      	ldr	r3, [r7, #16]
 80062f2:	b2da      	uxtb	r2, r3
 80062f4:	69fb      	ldr	r3, [r7, #28]
 80062f6:	701a      	strb	r2, [r3, #0]
  }
}
 80062f8:	bf00      	nop
 80062fa:	372c      	adds	r7, #44	; 0x2c
 80062fc:	46bd      	mov	sp, r7
 80062fe:	bc80      	pop	{r7}
 8006300:	4770      	bx	lr

08006302 <USBD_CDC_Init>:
  * @param  pdev: device instance
  * @param  cfgidx: Configuration index
  * @retval status
  */
static uint8_t  USBD_CDC_Init(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 8006302:	b580      	push	{r7, lr}
 8006304:	b084      	sub	sp, #16
 8006306:	af00      	add	r7, sp, #0
 8006308:	6078      	str	r0, [r7, #4]
 800630a:	460b      	mov	r3, r1
 800630c:	70fb      	strb	r3, [r7, #3]
  uint8_t ret = 0U;
 800630e:	2300      	movs	r3, #0
 8006310:	73fb      	strb	r3, [r7, #15]
  USBD_CDC_HandleTypeDef   *hcdc;

  if (pdev->dev_speed == USBD_SPEED_HIGH)
 8006312:	687b      	ldr	r3, [r7, #4]
 8006314:	7c1b      	ldrb	r3, [r3, #16]
 8006316:	2b00      	cmp	r3, #0
 8006318:	d115      	bne.n	8006346 <USBD_CDC_Init+0x44>
  {
    /* Open EP IN */
    USBD_LL_OpenEP(pdev, CDC_IN_EP, USBD_EP_TYPE_BULK,
 800631a:	f44f 7300 	mov.w	r3, #512	; 0x200
 800631e:	2202      	movs	r2, #2
 8006320:	2181      	movs	r1, #129	; 0x81
 8006322:	6878      	ldr	r0, [r7, #4]
 8006324:	f001 febb 	bl	800809e <USBD_LL_OpenEP>
                   CDC_DATA_HS_IN_PACKET_SIZE);

    pdev->ep_in[CDC_IN_EP & 0xFU].is_used = 1U;
 8006328:	687b      	ldr	r3, [r7, #4]
 800632a:	2201      	movs	r2, #1
 800632c:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Open EP OUT */
    USBD_LL_OpenEP(pdev, CDC_OUT_EP, USBD_EP_TYPE_BULK,
 800632e:	f44f 7300 	mov.w	r3, #512	; 0x200
 8006332:	2202      	movs	r2, #2
 8006334:	2101      	movs	r1, #1
 8006336:	6878      	ldr	r0, [r7, #4]
 8006338:	f001 feb1 	bl	800809e <USBD_LL_OpenEP>
                   CDC_DATA_HS_OUT_PACKET_SIZE);

    pdev->ep_out[CDC_OUT_EP & 0xFU].is_used = 1U;
 800633c:	687b      	ldr	r3, [r7, #4]
 800633e:	2201      	movs	r2, #1
 8006340:	f8c3 216c 	str.w	r2, [r3, #364]	; 0x16c
 8006344:	e012      	b.n	800636c <USBD_CDC_Init+0x6a>

  }
  else
  {
    /* Open EP IN */
    USBD_LL_OpenEP(pdev, CDC_IN_EP, USBD_EP_TYPE_BULK,
 8006346:	2340      	movs	r3, #64	; 0x40
 8006348:	2202      	movs	r2, #2
 800634a:	2181      	movs	r1, #129	; 0x81
 800634c:	6878      	ldr	r0, [r7, #4]
 800634e:	f001 fea6 	bl	800809e <USBD_LL_OpenEP>
                   CDC_DATA_FS_IN_PACKET_SIZE);

    pdev->ep_in[CDC_IN_EP & 0xFU].is_used = 1U;
 8006352:	687b      	ldr	r3, [r7, #4]
 8006354:	2201      	movs	r2, #1
 8006356:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Open EP OUT */
    USBD_LL_OpenEP(pdev, CDC_OUT_EP, USBD_EP_TYPE_BULK,
 8006358:	2340      	movs	r3, #64	; 0x40
 800635a:	2202      	movs	r2, #2
 800635c:	2101      	movs	r1, #1
 800635e:	6878      	ldr	r0, [r7, #4]
 8006360:	f001 fe9d 	bl	800809e <USBD_LL_OpenEP>
                   CDC_DATA_FS_OUT_PACKET_SIZE);

    pdev->ep_out[CDC_OUT_EP & 0xFU].is_used = 1U;
 8006364:	687b      	ldr	r3, [r7, #4]
 8006366:	2201      	movs	r2, #1
 8006368:	f8c3 216c 	str.w	r2, [r3, #364]	; 0x16c
  }
  /* Open Command IN EP */
  USBD_LL_OpenEP(pdev, CDC_CMD_EP, USBD_EP_TYPE_INTR, CDC_CMD_PACKET_SIZE);
 800636c:	2308      	movs	r3, #8
 800636e:	2203      	movs	r2, #3
 8006370:	2182      	movs	r1, #130	; 0x82
 8006372:	6878      	ldr	r0, [r7, #4]
 8006374:	f001 fe93 	bl	800809e <USBD_LL_OpenEP>
  pdev->ep_in[CDC_CMD_EP & 0xFU].is_used = 1U;
 8006378:	687b      	ldr	r3, [r7, #4]
 800637a:	2201      	movs	r2, #1
 800637c:	641a      	str	r2, [r3, #64]	; 0x40

  pdev->pClassData = USBD_malloc(sizeof(USBD_CDC_HandleTypeDef));
 800637e:	f44f 7007 	mov.w	r0, #540	; 0x21c
 8006382:	f001 ffb3 	bl	80082ec <USBD_static_malloc>
 8006386:	4602      	mov	r2, r0
 8006388:	687b      	ldr	r3, [r7, #4]
 800638a:	f8c3 22b8 	str.w	r2, [r3, #696]	; 0x2b8

  if (pdev->pClassData == NULL)
 800638e:	687b      	ldr	r3, [r7, #4]
 8006390:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8006394:	2b00      	cmp	r3, #0
 8006396:	d102      	bne.n	800639e <USBD_CDC_Init+0x9c>
  {
    ret = 1U;
 8006398:	2301      	movs	r3, #1
 800639a:	73fb      	strb	r3, [r7, #15]
 800639c:	e026      	b.n	80063ec <USBD_CDC_Init+0xea>
  }
  else
  {
    hcdc = (USBD_CDC_HandleTypeDef *) pdev->pClassData;
 800639e:	687b      	ldr	r3, [r7, #4]
 80063a0:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 80063a4:	60bb      	str	r3, [r7, #8]

    /* Init  physical Interface components */
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Init();
 80063a6:	687b      	ldr	r3, [r7, #4]
 80063a8:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 80063ac:	681b      	ldr	r3, [r3, #0]
 80063ae:	4798      	blx	r3

    /* Init Xfer states */
    hcdc->TxState = 0U;
 80063b0:	68bb      	ldr	r3, [r7, #8]
 80063b2:	2200      	movs	r2, #0
 80063b4:	f8c3 2214 	str.w	r2, [r3, #532]	; 0x214
    hcdc->RxState = 0U;
 80063b8:	68bb      	ldr	r3, [r7, #8]
 80063ba:	2200      	movs	r2, #0
 80063bc:	f8c3 2218 	str.w	r2, [r3, #536]	; 0x218

    if (pdev->dev_speed == USBD_SPEED_HIGH)
 80063c0:	687b      	ldr	r3, [r7, #4]
 80063c2:	7c1b      	ldrb	r3, [r3, #16]
 80063c4:	2b00      	cmp	r3, #0
 80063c6:	d109      	bne.n	80063dc <USBD_CDC_Init+0xda>
    {
      /* Prepare Out endpoint to receive next packet */
      USBD_LL_PrepareReceive(pdev, CDC_OUT_EP, hcdc->RxBuffer,
 80063c8:	68bb      	ldr	r3, [r7, #8]
 80063ca:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 80063ce:	f44f 7300 	mov.w	r3, #512	; 0x200
 80063d2:	2101      	movs	r1, #1
 80063d4:	6878      	ldr	r0, [r7, #4]
 80063d6:	f001 ff53 	bl	8008280 <USBD_LL_PrepareReceive>
 80063da:	e007      	b.n	80063ec <USBD_CDC_Init+0xea>
                             CDC_DATA_HS_OUT_PACKET_SIZE);
    }
    else
    {
      /* Prepare Out endpoint to receive next packet */
      USBD_LL_PrepareReceive(pdev, CDC_OUT_EP, hcdc->RxBuffer,
 80063dc:	68bb      	ldr	r3, [r7, #8]
 80063de:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 80063e2:	2340      	movs	r3, #64	; 0x40
 80063e4:	2101      	movs	r1, #1
 80063e6:	6878      	ldr	r0, [r7, #4]
 80063e8:	f001 ff4a 	bl	8008280 <USBD_LL_PrepareReceive>
                             CDC_DATA_FS_OUT_PACKET_SIZE);
    }
  }
  return ret;
 80063ec:	7bfb      	ldrb	r3, [r7, #15]
}
 80063ee:	4618      	mov	r0, r3
 80063f0:	3710      	adds	r7, #16
 80063f2:	46bd      	mov	sp, r7
 80063f4:	bd80      	pop	{r7, pc}

080063f6 <USBD_CDC_DeInit>:
  * @param  pdev: device instance
  * @param  cfgidx: Configuration index
  * @retval status
  */
static uint8_t  USBD_CDC_DeInit(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 80063f6:	b580      	push	{r7, lr}
 80063f8:	b084      	sub	sp, #16
 80063fa:	af00      	add	r7, sp, #0
 80063fc:	6078      	str	r0, [r7, #4]
 80063fe:	460b      	mov	r3, r1
 8006400:	70fb      	strb	r3, [r7, #3]
  uint8_t ret = 0U;
 8006402:	2300      	movs	r3, #0
 8006404:	73fb      	strb	r3, [r7, #15]

  /* Close EP IN */
  USBD_LL_CloseEP(pdev, CDC_IN_EP);
 8006406:	2181      	movs	r1, #129	; 0x81
 8006408:	6878      	ldr	r0, [r7, #4]
 800640a:	f001 fe6e 	bl	80080ea <USBD_LL_CloseEP>
  pdev->ep_in[CDC_IN_EP & 0xFU].is_used = 0U;
 800640e:	687b      	ldr	r3, [r7, #4]
 8006410:	2200      	movs	r2, #0
 8006412:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Close EP OUT */
  USBD_LL_CloseEP(pdev, CDC_OUT_EP);
 8006414:	2101      	movs	r1, #1
 8006416:	6878      	ldr	r0, [r7, #4]
 8006418:	f001 fe67 	bl	80080ea <USBD_LL_CloseEP>
  pdev->ep_out[CDC_OUT_EP & 0xFU].is_used = 0U;
 800641c:	687b      	ldr	r3, [r7, #4]
 800641e:	2200      	movs	r2, #0
 8006420:	f8c3 216c 	str.w	r2, [r3, #364]	; 0x16c

  /* Close Command IN EP */
  USBD_LL_CloseEP(pdev, CDC_CMD_EP);
 8006424:	2182      	movs	r1, #130	; 0x82
 8006426:	6878      	ldr	r0, [r7, #4]
 8006428:	f001 fe5f 	bl	80080ea <USBD_LL_CloseEP>
  pdev->ep_in[CDC_CMD_EP & 0xFU].is_used = 0U;
 800642c:	687b      	ldr	r3, [r7, #4]
 800642e:	2200      	movs	r2, #0
 8006430:	641a      	str	r2, [r3, #64]	; 0x40

  /* DeInit  physical Interface components */
  if (pdev->pClassData != NULL)
 8006432:	687b      	ldr	r3, [r7, #4]
 8006434:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8006438:	2b00      	cmp	r3, #0
 800643a:	d00e      	beq.n	800645a <USBD_CDC_DeInit+0x64>
  {
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->DeInit();
 800643c:	687b      	ldr	r3, [r7, #4]
 800643e:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 8006442:	685b      	ldr	r3, [r3, #4]
 8006444:	4798      	blx	r3
    USBD_free(pdev->pClassData);
 8006446:	687b      	ldr	r3, [r7, #4]
 8006448:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800644c:	4618      	mov	r0, r3
 800644e:	f001 ff59 	bl	8008304 <USBD_static_free>
    pdev->pClassData = NULL;
 8006452:	687b      	ldr	r3, [r7, #4]
 8006454:	2200      	movs	r2, #0
 8006456:	f8c3 22b8 	str.w	r2, [r3, #696]	; 0x2b8
  }

  return ret;
 800645a:	7bfb      	ldrb	r3, [r7, #15]
}
 800645c:	4618      	mov	r0, r3
 800645e:	3710      	adds	r7, #16
 8006460:	46bd      	mov	sp, r7
 8006462:	bd80      	pop	{r7, pc}

08006464 <USBD_CDC_Setup>:
  * @param  req: usb requests
  * @retval status
  */
static uint8_t  USBD_CDC_Setup(USBD_HandleTypeDef *pdev,
                               USBD_SetupReqTypedef *req)
{
 8006464:	b580      	push	{r7, lr}
 8006466:	b086      	sub	sp, #24
 8006468:	af00      	add	r7, sp, #0
 800646a:	6078      	str	r0, [r7, #4]
 800646c:	6039      	str	r1, [r7, #0]
  USBD_CDC_HandleTypeDef   *hcdc = (USBD_CDC_HandleTypeDef *) pdev->pClassData;
 800646e:	687b      	ldr	r3, [r7, #4]
 8006470:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8006474:	613b      	str	r3, [r7, #16]
  uint8_t ifalt = 0U;
 8006476:	2300      	movs	r3, #0
 8006478:	73fb      	strb	r3, [r7, #15]
  uint16_t status_info = 0U;
 800647a:	2300      	movs	r3, #0
 800647c:	81bb      	strh	r3, [r7, #12]
  uint8_t ret = USBD_OK;
 800647e:	2300      	movs	r3, #0
 8006480:	75fb      	strb	r3, [r7, #23]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 8006482:	683b      	ldr	r3, [r7, #0]
 8006484:	781b      	ldrb	r3, [r3, #0]
 8006486:	f003 0360 	and.w	r3, r3, #96	; 0x60
 800648a:	2b00      	cmp	r3, #0
 800648c:	d039      	beq.n	8006502 <USBD_CDC_Setup+0x9e>
 800648e:	2b20      	cmp	r3, #32
 8006490:	d17c      	bne.n	800658c <USBD_CDC_Setup+0x128>
  {
    case USB_REQ_TYPE_CLASS :
      if (req->wLength)
 8006492:	683b      	ldr	r3, [r7, #0]
 8006494:	88db      	ldrh	r3, [r3, #6]
 8006496:	2b00      	cmp	r3, #0
 8006498:	d029      	beq.n	80064ee <USBD_CDC_Setup+0x8a>
      {
        if (req->bmRequest & 0x80U)
 800649a:	683b      	ldr	r3, [r7, #0]
 800649c:	781b      	ldrb	r3, [r3, #0]
 800649e:	b25b      	sxtb	r3, r3
 80064a0:	2b00      	cmp	r3, #0
 80064a2:	da11      	bge.n	80064c8 <USBD_CDC_Setup+0x64>
        {
          ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(req->bRequest,
 80064a4:	687b      	ldr	r3, [r7, #4]
 80064a6:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 80064aa:	689b      	ldr	r3, [r3, #8]
 80064ac:	683a      	ldr	r2, [r7, #0]
 80064ae:	7850      	ldrb	r0, [r2, #1]
                                                            (uint8_t *)(void *)hcdc->data,
 80064b0:	6939      	ldr	r1, [r7, #16]
          ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(req->bRequest,
 80064b2:	683a      	ldr	r2, [r7, #0]
 80064b4:	88d2      	ldrh	r2, [r2, #6]
 80064b6:	4798      	blx	r3
                                                            req->wLength);

          USBD_CtlSendData(pdev, (uint8_t *)(void *)hcdc->data, req->wLength);
 80064b8:	6939      	ldr	r1, [r7, #16]
 80064ba:	683b      	ldr	r3, [r7, #0]
 80064bc:	88db      	ldrh	r3, [r3, #6]
 80064be:	461a      	mov	r2, r3
 80064c0:	6878      	ldr	r0, [r7, #4]
 80064c2:	f001 f9f9 	bl	80078b8 <USBD_CtlSendData>
      else
      {
        ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(req->bRequest,
                                                          (uint8_t *)(void *)req, 0U);
      }
      break;
 80064c6:	e068      	b.n	800659a <USBD_CDC_Setup+0x136>
          hcdc->CmdOpCode = req->bRequest;
 80064c8:	683b      	ldr	r3, [r7, #0]
 80064ca:	785a      	ldrb	r2, [r3, #1]
 80064cc:	693b      	ldr	r3, [r7, #16]
 80064ce:	f883 2200 	strb.w	r2, [r3, #512]	; 0x200
          hcdc->CmdLength = (uint8_t)req->wLength;
 80064d2:	683b      	ldr	r3, [r7, #0]
 80064d4:	88db      	ldrh	r3, [r3, #6]
 80064d6:	b2da      	uxtb	r2, r3
 80064d8:	693b      	ldr	r3, [r7, #16]
 80064da:	f883 2201 	strb.w	r2, [r3, #513]	; 0x201
          USBD_CtlPrepareRx(pdev, (uint8_t *)(void *)hcdc->data, req->wLength);
 80064de:	6939      	ldr	r1, [r7, #16]
 80064e0:	683b      	ldr	r3, [r7, #0]
 80064e2:	88db      	ldrh	r3, [r3, #6]
 80064e4:	461a      	mov	r2, r3
 80064e6:	6878      	ldr	r0, [r7, #4]
 80064e8:	f001 fa14 	bl	8007914 <USBD_CtlPrepareRx>
      break;
 80064ec:	e055      	b.n	800659a <USBD_CDC_Setup+0x136>
        ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(req->bRequest,
 80064ee:	687b      	ldr	r3, [r7, #4]
 80064f0:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 80064f4:	689b      	ldr	r3, [r3, #8]
 80064f6:	683a      	ldr	r2, [r7, #0]
 80064f8:	7850      	ldrb	r0, [r2, #1]
 80064fa:	2200      	movs	r2, #0
 80064fc:	6839      	ldr	r1, [r7, #0]
 80064fe:	4798      	blx	r3
      break;
 8006500:	e04b      	b.n	800659a <USBD_CDC_Setup+0x136>

    case USB_REQ_TYPE_STANDARD:
      switch (req->bRequest)
 8006502:	683b      	ldr	r3, [r7, #0]
 8006504:	785b      	ldrb	r3, [r3, #1]
 8006506:	2b0a      	cmp	r3, #10
 8006508:	d017      	beq.n	800653a <USBD_CDC_Setup+0xd6>
 800650a:	2b0b      	cmp	r3, #11
 800650c:	d029      	beq.n	8006562 <USBD_CDC_Setup+0xfe>
 800650e:	2b00      	cmp	r3, #0
 8006510:	d133      	bne.n	800657a <USBD_CDC_Setup+0x116>
      {
        case USB_REQ_GET_STATUS:
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8006512:	687b      	ldr	r3, [r7, #4]
 8006514:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8006518:	2b03      	cmp	r3, #3
 800651a:	d107      	bne.n	800652c <USBD_CDC_Setup+0xc8>
          {
            USBD_CtlSendData(pdev, (uint8_t *)(void *)&status_info, 2U);
 800651c:	f107 030c 	add.w	r3, r7, #12
 8006520:	2202      	movs	r2, #2
 8006522:	4619      	mov	r1, r3
 8006524:	6878      	ldr	r0, [r7, #4]
 8006526:	f001 f9c7 	bl	80078b8 <USBD_CtlSendData>
          else
          {
            USBD_CtlError(pdev, req);
            ret = USBD_FAIL;
          }
          break;
 800652a:	e02e      	b.n	800658a <USBD_CDC_Setup+0x126>
            USBD_CtlError(pdev, req);
 800652c:	6839      	ldr	r1, [r7, #0]
 800652e:	6878      	ldr	r0, [r7, #4]
 8006530:	f001 f958 	bl	80077e4 <USBD_CtlError>
            ret = USBD_FAIL;
 8006534:	2302      	movs	r3, #2
 8006536:	75fb      	strb	r3, [r7, #23]
          break;
 8006538:	e027      	b.n	800658a <USBD_CDC_Setup+0x126>

        case USB_REQ_GET_INTERFACE:
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800653a:	687b      	ldr	r3, [r7, #4]
 800653c:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8006540:	2b03      	cmp	r3, #3
 8006542:	d107      	bne.n	8006554 <USBD_CDC_Setup+0xf0>
          {
            USBD_CtlSendData(pdev, &ifalt, 1U);
 8006544:	f107 030f 	add.w	r3, r7, #15
 8006548:	2201      	movs	r2, #1
 800654a:	4619      	mov	r1, r3
 800654c:	6878      	ldr	r0, [r7, #4]
 800654e:	f001 f9b3 	bl	80078b8 <USBD_CtlSendData>
          else
          {
            USBD_CtlError(pdev, req);
            ret = USBD_FAIL;
          }
          break;
 8006552:	e01a      	b.n	800658a <USBD_CDC_Setup+0x126>
            USBD_CtlError(pdev, req);
 8006554:	6839      	ldr	r1, [r7, #0]
 8006556:	6878      	ldr	r0, [r7, #4]
 8006558:	f001 f944 	bl	80077e4 <USBD_CtlError>
            ret = USBD_FAIL;
 800655c:	2302      	movs	r3, #2
 800655e:	75fb      	strb	r3, [r7, #23]
          break;
 8006560:	e013      	b.n	800658a <USBD_CDC_Setup+0x126>

        case USB_REQ_SET_INTERFACE:
          if (pdev->dev_state != USBD_STATE_CONFIGURED)
 8006562:	687b      	ldr	r3, [r7, #4]
 8006564:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8006568:	2b03      	cmp	r3, #3
 800656a:	d00d      	beq.n	8006588 <USBD_CDC_Setup+0x124>
          {
            USBD_CtlError(pdev, req);
 800656c:	6839      	ldr	r1, [r7, #0]
 800656e:	6878      	ldr	r0, [r7, #4]
 8006570:	f001 f938 	bl	80077e4 <USBD_CtlError>
            ret = USBD_FAIL;
 8006574:	2302      	movs	r3, #2
 8006576:	75fb      	strb	r3, [r7, #23]
          }
          break;
 8006578:	e006      	b.n	8006588 <USBD_CDC_Setup+0x124>

        default:
          USBD_CtlError(pdev, req);
 800657a:	6839      	ldr	r1, [r7, #0]
 800657c:	6878      	ldr	r0, [r7, #4]
 800657e:	f001 f931 	bl	80077e4 <USBD_CtlError>
          ret = USBD_FAIL;
 8006582:	2302      	movs	r3, #2
 8006584:	75fb      	strb	r3, [r7, #23]
          break;
 8006586:	e000      	b.n	800658a <USBD_CDC_Setup+0x126>
          break;
 8006588:	bf00      	nop
      }
      break;
 800658a:	e006      	b.n	800659a <USBD_CDC_Setup+0x136>

    default:
      USBD_CtlError(pdev, req);
 800658c:	6839      	ldr	r1, [r7, #0]
 800658e:	6878      	ldr	r0, [r7, #4]
 8006590:	f001 f928 	bl	80077e4 <USBD_CtlError>
      ret = USBD_FAIL;
 8006594:	2302      	movs	r3, #2
 8006596:	75fb      	strb	r3, [r7, #23]
      break;
 8006598:	bf00      	nop
  }

  return ret;
 800659a:	7dfb      	ldrb	r3, [r7, #23]
}
 800659c:	4618      	mov	r0, r3
 800659e:	3718      	adds	r7, #24
 80065a0:	46bd      	mov	sp, r7
 80065a2:	bd80      	pop	{r7, pc}

080065a4 <USBD_CDC_DataIn>:
  * @param  pdev: device instance
  * @param  epnum: endpoint number
  * @retval status
  */
static uint8_t  USBD_CDC_DataIn(USBD_HandleTypeDef *pdev, uint8_t epnum)
{
 80065a4:	b580      	push	{r7, lr}
 80065a6:	b084      	sub	sp, #16
 80065a8:	af00      	add	r7, sp, #0
 80065aa:	6078      	str	r0, [r7, #4]
 80065ac:	460b      	mov	r3, r1
 80065ae:	70fb      	strb	r3, [r7, #3]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassData;
 80065b0:	687b      	ldr	r3, [r7, #4]
 80065b2:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 80065b6:	60fb      	str	r3, [r7, #12]
  PCD_HandleTypeDef *hpcd = pdev->pData;
 80065b8:	687b      	ldr	r3, [r7, #4]
 80065ba:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 80065be:	60bb      	str	r3, [r7, #8]

  if (pdev->pClassData != NULL)
 80065c0:	687b      	ldr	r3, [r7, #4]
 80065c2:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 80065c6:	2b00      	cmp	r3, #0
 80065c8:	d03a      	beq.n	8006640 <USBD_CDC_DataIn+0x9c>
  {
    if ((pdev->ep_in[epnum].total_length > 0U) && ((pdev->ep_in[epnum].total_length % hpcd->IN_ep[epnum].maxpacket) == 0U))
 80065ca:	78fa      	ldrb	r2, [r7, #3]
 80065cc:	6879      	ldr	r1, [r7, #4]
 80065ce:	4613      	mov	r3, r2
 80065d0:	009b      	lsls	r3, r3, #2
 80065d2:	4413      	add	r3, r2
 80065d4:	009b      	lsls	r3, r3, #2
 80065d6:	440b      	add	r3, r1
 80065d8:	331c      	adds	r3, #28
 80065da:	681b      	ldr	r3, [r3, #0]
 80065dc:	2b00      	cmp	r3, #0
 80065de:	d029      	beq.n	8006634 <USBD_CDC_DataIn+0x90>
 80065e0:	78fa      	ldrb	r2, [r7, #3]
 80065e2:	6879      	ldr	r1, [r7, #4]
 80065e4:	4613      	mov	r3, r2
 80065e6:	009b      	lsls	r3, r3, #2
 80065e8:	4413      	add	r3, r2
 80065ea:	009b      	lsls	r3, r3, #2
 80065ec:	440b      	add	r3, r1
 80065ee:	331c      	adds	r3, #28
 80065f0:	681a      	ldr	r2, [r3, #0]
 80065f2:	78f9      	ldrb	r1, [r7, #3]
 80065f4:	68b8      	ldr	r0, [r7, #8]
 80065f6:	460b      	mov	r3, r1
 80065f8:	009b      	lsls	r3, r3, #2
 80065fa:	440b      	add	r3, r1
 80065fc:	00db      	lsls	r3, r3, #3
 80065fe:	4403      	add	r3, r0
 8006600:	3338      	adds	r3, #56	; 0x38
 8006602:	681b      	ldr	r3, [r3, #0]
 8006604:	fbb2 f1f3 	udiv	r1, r2, r3
 8006608:	fb03 f301 	mul.w	r3, r3, r1
 800660c:	1ad3      	subs	r3, r2, r3
 800660e:	2b00      	cmp	r3, #0
 8006610:	d110      	bne.n	8006634 <USBD_CDC_DataIn+0x90>
    {
      /* Update the packet total length */
      pdev->ep_in[epnum].total_length = 0U;
 8006612:	78fa      	ldrb	r2, [r7, #3]
 8006614:	6879      	ldr	r1, [r7, #4]
 8006616:	4613      	mov	r3, r2
 8006618:	009b      	lsls	r3, r3, #2
 800661a:	4413      	add	r3, r2
 800661c:	009b      	lsls	r3, r3, #2
 800661e:	440b      	add	r3, r1
 8006620:	331c      	adds	r3, #28
 8006622:	2200      	movs	r2, #0
 8006624:	601a      	str	r2, [r3, #0]

      /* Send ZLP */
      USBD_LL_Transmit(pdev, epnum, NULL, 0U);
 8006626:	78f9      	ldrb	r1, [r7, #3]
 8006628:	2300      	movs	r3, #0
 800662a:	2200      	movs	r2, #0
 800662c:	6878      	ldr	r0, [r7, #4]
 800662e:	f001 fe04 	bl	800823a <USBD_LL_Transmit>
 8006632:	e003      	b.n	800663c <USBD_CDC_DataIn+0x98>
    }
    else
    {
      hcdc->TxState = 0U;
 8006634:	68fb      	ldr	r3, [r7, #12]
 8006636:	2200      	movs	r2, #0
 8006638:	f8c3 2214 	str.w	r2, [r3, #532]	; 0x214
    }
    return USBD_OK;
 800663c:	2300      	movs	r3, #0
 800663e:	e000      	b.n	8006642 <USBD_CDC_DataIn+0x9e>
  }
  else
  {
    return USBD_FAIL;
 8006640:	2302      	movs	r3, #2
  }
}
 8006642:	4618      	mov	r0, r3
 8006644:	3710      	adds	r7, #16
 8006646:	46bd      	mov	sp, r7
 8006648:	bd80      	pop	{r7, pc}

0800664a <USBD_CDC_DataOut>:
  * @param  pdev: device instance
  * @param  epnum: endpoint number
  * @retval status
  */
static uint8_t  USBD_CDC_DataOut(USBD_HandleTypeDef *pdev, uint8_t epnum)
{
 800664a:	b580      	push	{r7, lr}
 800664c:	b084      	sub	sp, #16
 800664e:	af00      	add	r7, sp, #0
 8006650:	6078      	str	r0, [r7, #4]
 8006652:	460b      	mov	r3, r1
 8006654:	70fb      	strb	r3, [r7, #3]
  USBD_CDC_HandleTypeDef   *hcdc = (USBD_CDC_HandleTypeDef *) pdev->pClassData;
 8006656:	687b      	ldr	r3, [r7, #4]
 8006658:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800665c:	60fb      	str	r3, [r7, #12]

  /* Get the received data length */
  hcdc->RxLength = USBD_LL_GetRxDataSize(pdev, epnum);
 800665e:	78fb      	ldrb	r3, [r7, #3]
 8006660:	4619      	mov	r1, r3
 8006662:	6878      	ldr	r0, [r7, #4]
 8006664:	f001 fe2f 	bl	80082c6 <USBD_LL_GetRxDataSize>
 8006668:	4602      	mov	r2, r0
 800666a:	68fb      	ldr	r3, [r7, #12]
 800666c:	f8c3 220c 	str.w	r2, [r3, #524]	; 0x20c

  /* USB data will be immediately processed, this allow next USB traffic being
  NAKed till the end of the application Xfer */
  if (pdev->pClassData != NULL)
 8006670:	687b      	ldr	r3, [r7, #4]
 8006672:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8006676:	2b00      	cmp	r3, #0
 8006678:	d00d      	beq.n	8006696 <USBD_CDC_DataOut+0x4c>
  {
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Receive(hcdc->RxBuffer, &hcdc->RxLength);
 800667a:	687b      	ldr	r3, [r7, #4]
 800667c:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 8006680:	68db      	ldr	r3, [r3, #12]
 8006682:	68fa      	ldr	r2, [r7, #12]
 8006684:	f8d2 0204 	ldr.w	r0, [r2, #516]	; 0x204
 8006688:	68fa      	ldr	r2, [r7, #12]
 800668a:	f502 7203 	add.w	r2, r2, #524	; 0x20c
 800668e:	4611      	mov	r1, r2
 8006690:	4798      	blx	r3

    return USBD_OK;
 8006692:	2300      	movs	r3, #0
 8006694:	e000      	b.n	8006698 <USBD_CDC_DataOut+0x4e>
  }
  else
  {
    return USBD_FAIL;
 8006696:	2302      	movs	r3, #2
  }
}
 8006698:	4618      	mov	r0, r3
 800669a:	3710      	adds	r7, #16
 800669c:	46bd      	mov	sp, r7
 800669e:	bd80      	pop	{r7, pc}

080066a0 <USBD_CDC_EP0_RxReady>:
  *         Handle EP0 Rx Ready event
  * @param  pdev: device instance
  * @retval status
  */
static uint8_t  USBD_CDC_EP0_RxReady(USBD_HandleTypeDef *pdev)
{
 80066a0:	b580      	push	{r7, lr}
 80066a2:	b084      	sub	sp, #16
 80066a4:	af00      	add	r7, sp, #0
 80066a6:	6078      	str	r0, [r7, #4]
  USBD_CDC_HandleTypeDef   *hcdc = (USBD_CDC_HandleTypeDef *) pdev->pClassData;
 80066a8:	687b      	ldr	r3, [r7, #4]
 80066aa:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 80066ae:	60fb      	str	r3, [r7, #12]

  if ((pdev->pUserData != NULL) && (hcdc->CmdOpCode != 0xFFU))
 80066b0:	687b      	ldr	r3, [r7, #4]
 80066b2:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 80066b6:	2b00      	cmp	r3, #0
 80066b8:	d015      	beq.n	80066e6 <USBD_CDC_EP0_RxReady+0x46>
 80066ba:	68fb      	ldr	r3, [r7, #12]
 80066bc:	f893 3200 	ldrb.w	r3, [r3, #512]	; 0x200
 80066c0:	2bff      	cmp	r3, #255	; 0xff
 80066c2:	d010      	beq.n	80066e6 <USBD_CDC_EP0_RxReady+0x46>
  {
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(hcdc->CmdOpCode,
 80066c4:	687b      	ldr	r3, [r7, #4]
 80066c6:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 80066ca:	689b      	ldr	r3, [r3, #8]
 80066cc:	68fa      	ldr	r2, [r7, #12]
 80066ce:	f892 0200 	ldrb.w	r0, [r2, #512]	; 0x200
                                                      (uint8_t *)(void *)hcdc->data,
 80066d2:	68f9      	ldr	r1, [r7, #12]
                                                      (uint16_t)hcdc->CmdLength);
 80066d4:	68fa      	ldr	r2, [r7, #12]
 80066d6:	f892 2201 	ldrb.w	r2, [r2, #513]	; 0x201
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(hcdc->CmdOpCode,
 80066da:	b292      	uxth	r2, r2
 80066dc:	4798      	blx	r3
    hcdc->CmdOpCode = 0xFFU;
 80066de:	68fb      	ldr	r3, [r7, #12]
 80066e0:	22ff      	movs	r2, #255	; 0xff
 80066e2:	f883 2200 	strb.w	r2, [r3, #512]	; 0x200

  }
  return USBD_OK;
 80066e6:	2300      	movs	r3, #0
}
 80066e8:	4618      	mov	r0, r3
 80066ea:	3710      	adds	r7, #16
 80066ec:	46bd      	mov	sp, r7
 80066ee:	bd80      	pop	{r7, pc}

080066f0 <USBD_CDC_GetFSCfgDesc>:
  * @param  speed : current device speed
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t  *USBD_CDC_GetFSCfgDesc(uint16_t *length)
{
 80066f0:	b480      	push	{r7}
 80066f2:	b083      	sub	sp, #12
 80066f4:	af00      	add	r7, sp, #0
 80066f6:	6078      	str	r0, [r7, #4]
  *length = sizeof(USBD_CDC_CfgFSDesc);
 80066f8:	687b      	ldr	r3, [r7, #4]
 80066fa:	2243      	movs	r2, #67	; 0x43
 80066fc:	801a      	strh	r2, [r3, #0]
  return USBD_CDC_CfgFSDesc;
 80066fe:	4b03      	ldr	r3, [pc, #12]	; (800670c <USBD_CDC_GetFSCfgDesc+0x1c>)
}
 8006700:	4618      	mov	r0, r3
 8006702:	370c      	adds	r7, #12
 8006704:	46bd      	mov	sp, r7
 8006706:	bc80      	pop	{r7}
 8006708:	4770      	bx	lr
 800670a:	bf00      	nop
 800670c:	20000098 	.word	0x20000098

08006710 <USBD_CDC_GetHSCfgDesc>:
  * @param  speed : current device speed
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t  *USBD_CDC_GetHSCfgDesc(uint16_t *length)
{
 8006710:	b480      	push	{r7}
 8006712:	b083      	sub	sp, #12
 8006714:	af00      	add	r7, sp, #0
 8006716:	6078      	str	r0, [r7, #4]
  *length = sizeof(USBD_CDC_CfgHSDesc);
 8006718:	687b      	ldr	r3, [r7, #4]
 800671a:	2243      	movs	r2, #67	; 0x43
 800671c:	801a      	strh	r2, [r3, #0]
  return USBD_CDC_CfgHSDesc;
 800671e:	4b03      	ldr	r3, [pc, #12]	; (800672c <USBD_CDC_GetHSCfgDesc+0x1c>)
}
 8006720:	4618      	mov	r0, r3
 8006722:	370c      	adds	r7, #12
 8006724:	46bd      	mov	sp, r7
 8006726:	bc80      	pop	{r7}
 8006728:	4770      	bx	lr
 800672a:	bf00      	nop
 800672c:	20000054 	.word	0x20000054

08006730 <USBD_CDC_GetOtherSpeedCfgDesc>:
  * @param  speed : current device speed
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t  *USBD_CDC_GetOtherSpeedCfgDesc(uint16_t *length)
{
 8006730:	b480      	push	{r7}
 8006732:	b083      	sub	sp, #12
 8006734:	af00      	add	r7, sp, #0
 8006736:	6078      	str	r0, [r7, #4]
  *length = sizeof(USBD_CDC_OtherSpeedCfgDesc);
 8006738:	687b      	ldr	r3, [r7, #4]
 800673a:	2243      	movs	r2, #67	; 0x43
 800673c:	801a      	strh	r2, [r3, #0]
  return USBD_CDC_OtherSpeedCfgDesc;
 800673e:	4b03      	ldr	r3, [pc, #12]	; (800674c <USBD_CDC_GetOtherSpeedCfgDesc+0x1c>)
}
 8006740:	4618      	mov	r0, r3
 8006742:	370c      	adds	r7, #12
 8006744:	46bd      	mov	sp, r7
 8006746:	bc80      	pop	{r7}
 8006748:	4770      	bx	lr
 800674a:	bf00      	nop
 800674c:	200000dc 	.word	0x200000dc

08006750 <USBD_CDC_GetDeviceQualifierDescriptor>:
*         return Device Qualifier descriptor
* @param  length : pointer data length
* @retval pointer to descriptor buffer
*/
uint8_t  *USBD_CDC_GetDeviceQualifierDescriptor(uint16_t *length)
{
 8006750:	b480      	push	{r7}
 8006752:	b083      	sub	sp, #12
 8006754:	af00      	add	r7, sp, #0
 8006756:	6078      	str	r0, [r7, #4]
  *length = sizeof(USBD_CDC_DeviceQualifierDesc);
 8006758:	687b      	ldr	r3, [r7, #4]
 800675a:	220a      	movs	r2, #10
 800675c:	801a      	strh	r2, [r3, #0]
  return USBD_CDC_DeviceQualifierDesc;
 800675e:	4b03      	ldr	r3, [pc, #12]	; (800676c <USBD_CDC_GetDeviceQualifierDescriptor+0x1c>)
}
 8006760:	4618      	mov	r0, r3
 8006762:	370c      	adds	r7, #12
 8006764:	46bd      	mov	sp, r7
 8006766:	bc80      	pop	{r7}
 8006768:	4770      	bx	lr
 800676a:	bf00      	nop
 800676c:	20000010 	.word	0x20000010

08006770 <USBD_CDC_RegisterInterface>:
  * @param  fops: CD  Interface callback
  * @retval status
  */
uint8_t  USBD_CDC_RegisterInterface(USBD_HandleTypeDef   *pdev,
                                    USBD_CDC_ItfTypeDef *fops)
{
 8006770:	b480      	push	{r7}
 8006772:	b085      	sub	sp, #20
 8006774:	af00      	add	r7, sp, #0
 8006776:	6078      	str	r0, [r7, #4]
 8006778:	6039      	str	r1, [r7, #0]
  uint8_t  ret = USBD_FAIL;
 800677a:	2302      	movs	r3, #2
 800677c:	73fb      	strb	r3, [r7, #15]

  if (fops != NULL)
 800677e:	683b      	ldr	r3, [r7, #0]
 8006780:	2b00      	cmp	r3, #0
 8006782:	d005      	beq.n	8006790 <USBD_CDC_RegisterInterface+0x20>
  {
    pdev->pUserData = fops;
 8006784:	687b      	ldr	r3, [r7, #4]
 8006786:	683a      	ldr	r2, [r7, #0]
 8006788:	f8c3 22bc 	str.w	r2, [r3, #700]	; 0x2bc
    ret = USBD_OK;
 800678c:	2300      	movs	r3, #0
 800678e:	73fb      	strb	r3, [r7, #15]
  }

  return ret;
 8006790:	7bfb      	ldrb	r3, [r7, #15]
}
 8006792:	4618      	mov	r0, r3
 8006794:	3714      	adds	r7, #20
 8006796:	46bd      	mov	sp, r7
 8006798:	bc80      	pop	{r7}
 800679a:	4770      	bx	lr

0800679c <USBD_CDC_SetTxBuffer>:
  * @retval status
  */
uint8_t  USBD_CDC_SetTxBuffer(USBD_HandleTypeDef   *pdev,
                              uint8_t  *pbuff,
                              uint16_t length)
{
 800679c:	b480      	push	{r7}
 800679e:	b087      	sub	sp, #28
 80067a0:	af00      	add	r7, sp, #0
 80067a2:	60f8      	str	r0, [r7, #12]
 80067a4:	60b9      	str	r1, [r7, #8]
 80067a6:	4613      	mov	r3, r2
 80067a8:	80fb      	strh	r3, [r7, #6]
  USBD_CDC_HandleTypeDef   *hcdc = (USBD_CDC_HandleTypeDef *) pdev->pClassData;
 80067aa:	68fb      	ldr	r3, [r7, #12]
 80067ac:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 80067b0:	617b      	str	r3, [r7, #20]

  hcdc->TxBuffer = pbuff;
 80067b2:	697b      	ldr	r3, [r7, #20]
 80067b4:	68ba      	ldr	r2, [r7, #8]
 80067b6:	f8c3 2208 	str.w	r2, [r3, #520]	; 0x208
  hcdc->TxLength = length;
 80067ba:	88fa      	ldrh	r2, [r7, #6]
 80067bc:	697b      	ldr	r3, [r7, #20]
 80067be:	f8c3 2210 	str.w	r2, [r3, #528]	; 0x210

  return USBD_OK;
 80067c2:	2300      	movs	r3, #0
}
 80067c4:	4618      	mov	r0, r3
 80067c6:	371c      	adds	r7, #28
 80067c8:	46bd      	mov	sp, r7
 80067ca:	bc80      	pop	{r7}
 80067cc:	4770      	bx	lr

080067ce <USBD_CDC_SetRxBuffer>:
  * @param  pbuff: Rx Buffer
  * @retval status
  */
uint8_t  USBD_CDC_SetRxBuffer(USBD_HandleTypeDef   *pdev,
                              uint8_t  *pbuff)
{
 80067ce:	b480      	push	{r7}
 80067d0:	b085      	sub	sp, #20
 80067d2:	af00      	add	r7, sp, #0
 80067d4:	6078      	str	r0, [r7, #4]
 80067d6:	6039      	str	r1, [r7, #0]
  USBD_CDC_HandleTypeDef   *hcdc = (USBD_CDC_HandleTypeDef *) pdev->pClassData;
 80067d8:	687b      	ldr	r3, [r7, #4]
 80067da:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 80067de:	60fb      	str	r3, [r7, #12]

  hcdc->RxBuffer = pbuff;
 80067e0:	68fb      	ldr	r3, [r7, #12]
 80067e2:	683a      	ldr	r2, [r7, #0]
 80067e4:	f8c3 2204 	str.w	r2, [r3, #516]	; 0x204

  return USBD_OK;
 80067e8:	2300      	movs	r3, #0
}
 80067ea:	4618      	mov	r0, r3
 80067ec:	3714      	adds	r7, #20
 80067ee:	46bd      	mov	sp, r7
 80067f0:	bc80      	pop	{r7}
 80067f2:	4770      	bx	lr

080067f4 <USBD_CDC_TransmitPacket>:
  *         Transmit packet on IN endpoint
  * @param  pdev: device instance
  * @retval status
  */
uint8_t  USBD_CDC_TransmitPacket(USBD_HandleTypeDef *pdev)
{
 80067f4:	b580      	push	{r7, lr}
 80067f6:	b084      	sub	sp, #16
 80067f8:	af00      	add	r7, sp, #0
 80067fa:	6078      	str	r0, [r7, #4]
  USBD_CDC_HandleTypeDef   *hcdc = (USBD_CDC_HandleTypeDef *) pdev->pClassData;
 80067fc:	687b      	ldr	r3, [r7, #4]
 80067fe:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8006802:	60fb      	str	r3, [r7, #12]

  if (pdev->pClassData != NULL)
 8006804:	687b      	ldr	r3, [r7, #4]
 8006806:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800680a:	2b00      	cmp	r3, #0
 800680c:	d01c      	beq.n	8006848 <USBD_CDC_TransmitPacket+0x54>
  {
    if (hcdc->TxState == 0U)
 800680e:	68fb      	ldr	r3, [r7, #12]
 8006810:	f8d3 3214 	ldr.w	r3, [r3, #532]	; 0x214
 8006814:	2b00      	cmp	r3, #0
 8006816:	d115      	bne.n	8006844 <USBD_CDC_TransmitPacket+0x50>
    {
      /* Tx Transfer in progress */
      hcdc->TxState = 1U;
 8006818:	68fb      	ldr	r3, [r7, #12]
 800681a:	2201      	movs	r2, #1
 800681c:	f8c3 2214 	str.w	r2, [r3, #532]	; 0x214

      /* Update the packet total length */
      pdev->ep_in[CDC_IN_EP & 0xFU].total_length = hcdc->TxLength;
 8006820:	68fb      	ldr	r3, [r7, #12]
 8006822:	f8d3 2210 	ldr.w	r2, [r3, #528]	; 0x210
 8006826:	687b      	ldr	r3, [r7, #4]
 8006828:	631a      	str	r2, [r3, #48]	; 0x30

      /* Transmit next packet */
      USBD_LL_Transmit(pdev, CDC_IN_EP, hcdc->TxBuffer,
 800682a:	68fb      	ldr	r3, [r7, #12]
 800682c:	f8d3 2208 	ldr.w	r2, [r3, #520]	; 0x208
                       (uint16_t)hcdc->TxLength);
 8006830:	68fb      	ldr	r3, [r7, #12]
 8006832:	f8d3 3210 	ldr.w	r3, [r3, #528]	; 0x210
      USBD_LL_Transmit(pdev, CDC_IN_EP, hcdc->TxBuffer,
 8006836:	b29b      	uxth	r3, r3
 8006838:	2181      	movs	r1, #129	; 0x81
 800683a:	6878      	ldr	r0, [r7, #4]
 800683c:	f001 fcfd 	bl	800823a <USBD_LL_Transmit>

      return USBD_OK;
 8006840:	2300      	movs	r3, #0
 8006842:	e002      	b.n	800684a <USBD_CDC_TransmitPacket+0x56>
    }
    else
    {
      return USBD_BUSY;
 8006844:	2301      	movs	r3, #1
 8006846:	e000      	b.n	800684a <USBD_CDC_TransmitPacket+0x56>
    }
  }
  else
  {
    return USBD_FAIL;
 8006848:	2302      	movs	r3, #2
  }
}
 800684a:	4618      	mov	r0, r3
 800684c:	3710      	adds	r7, #16
 800684e:	46bd      	mov	sp, r7
 8006850:	bd80      	pop	{r7, pc}

08006852 <USBD_CDC_ReceivePacket>:
  *         prepare OUT Endpoint for reception
  * @param  pdev: device instance
  * @retval status
  */
uint8_t  USBD_CDC_ReceivePacket(USBD_HandleTypeDef *pdev)
{
 8006852:	b580      	push	{r7, lr}
 8006854:	b084      	sub	sp, #16
 8006856:	af00      	add	r7, sp, #0
 8006858:	6078      	str	r0, [r7, #4]
  USBD_CDC_HandleTypeDef   *hcdc = (USBD_CDC_HandleTypeDef *) pdev->pClassData;
 800685a:	687b      	ldr	r3, [r7, #4]
 800685c:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8006860:	60fb      	str	r3, [r7, #12]

  /* Suspend or Resume USB Out process */
  if (pdev->pClassData != NULL)
 8006862:	687b      	ldr	r3, [r7, #4]
 8006864:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8006868:	2b00      	cmp	r3, #0
 800686a:	d017      	beq.n	800689c <USBD_CDC_ReceivePacket+0x4a>
  {
    if (pdev->dev_speed == USBD_SPEED_HIGH)
 800686c:	687b      	ldr	r3, [r7, #4]
 800686e:	7c1b      	ldrb	r3, [r3, #16]
 8006870:	2b00      	cmp	r3, #0
 8006872:	d109      	bne.n	8006888 <USBD_CDC_ReceivePacket+0x36>
    {
      /* Prepare Out endpoint to receive next packet */
      USBD_LL_PrepareReceive(pdev,
 8006874:	68fb      	ldr	r3, [r7, #12]
 8006876:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 800687a:	f44f 7300 	mov.w	r3, #512	; 0x200
 800687e:	2101      	movs	r1, #1
 8006880:	6878      	ldr	r0, [r7, #4]
 8006882:	f001 fcfd 	bl	8008280 <USBD_LL_PrepareReceive>
 8006886:	e007      	b.n	8006898 <USBD_CDC_ReceivePacket+0x46>
                             CDC_DATA_HS_OUT_PACKET_SIZE);
    }
    else
    {
      /* Prepare Out endpoint to receive next packet */
      USBD_LL_PrepareReceive(pdev,
 8006888:	68fb      	ldr	r3, [r7, #12]
 800688a:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 800688e:	2340      	movs	r3, #64	; 0x40
 8006890:	2101      	movs	r1, #1
 8006892:	6878      	ldr	r0, [r7, #4]
 8006894:	f001 fcf4 	bl	8008280 <USBD_LL_PrepareReceive>
                             CDC_OUT_EP,
                             hcdc->RxBuffer,
                             CDC_DATA_FS_OUT_PACKET_SIZE);
    }
    return USBD_OK;
 8006898:	2300      	movs	r3, #0
 800689a:	e000      	b.n	800689e <USBD_CDC_ReceivePacket+0x4c>
  }
  else
  {
    return USBD_FAIL;
 800689c:	2302      	movs	r3, #2
  }
}
 800689e:	4618      	mov	r0, r3
 80068a0:	3710      	adds	r7, #16
 80068a2:	46bd      	mov	sp, r7
 80068a4:	bd80      	pop	{r7, pc}

080068a6 <USBD_Init>:
* @param  id: Low level core index
* @retval None
*/
USBD_StatusTypeDef USBD_Init(USBD_HandleTypeDef *pdev,
                             USBD_DescriptorsTypeDef *pdesc, uint8_t id)
{
 80068a6:	b580      	push	{r7, lr}
 80068a8:	b084      	sub	sp, #16
 80068aa:	af00      	add	r7, sp, #0
 80068ac:	60f8      	str	r0, [r7, #12]
 80068ae:	60b9      	str	r1, [r7, #8]
 80068b0:	4613      	mov	r3, r2
 80068b2:	71fb      	strb	r3, [r7, #7]
  /* Check whether the USB Host handle is valid */
  if (pdev == NULL)
 80068b4:	68fb      	ldr	r3, [r7, #12]
 80068b6:	2b00      	cmp	r3, #0
 80068b8:	d101      	bne.n	80068be <USBD_Init+0x18>
  {
#if (USBD_DEBUG_LEVEL > 1U)
    USBD_ErrLog("Invalid Device handle");
#endif
    return USBD_FAIL;
 80068ba:	2302      	movs	r3, #2
 80068bc:	e01a      	b.n	80068f4 <USBD_Init+0x4e>
  }

  /* Unlink previous class*/
  if (pdev->pClass != NULL)
 80068be:	68fb      	ldr	r3, [r7, #12]
 80068c0:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 80068c4:	2b00      	cmp	r3, #0
 80068c6:	d003      	beq.n	80068d0 <USBD_Init+0x2a>
  {
    pdev->pClass = NULL;
 80068c8:	68fb      	ldr	r3, [r7, #12]
 80068ca:	2200      	movs	r2, #0
 80068cc:	f8c3 22b4 	str.w	r2, [r3, #692]	; 0x2b4
  }

  /* Assign USBD Descriptors */
  if (pdesc != NULL)
 80068d0:	68bb      	ldr	r3, [r7, #8]
 80068d2:	2b00      	cmp	r3, #0
 80068d4:	d003      	beq.n	80068de <USBD_Init+0x38>
  {
    pdev->pDesc = pdesc;
 80068d6:	68fb      	ldr	r3, [r7, #12]
 80068d8:	68ba      	ldr	r2, [r7, #8]
 80068da:	f8c3 22b0 	str.w	r2, [r3, #688]	; 0x2b0
  }

  /* Set Device initial State */
  pdev->dev_state = USBD_STATE_DEFAULT;
 80068de:	68fb      	ldr	r3, [r7, #12]
 80068e0:	2201      	movs	r2, #1
 80068e2:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
  pdev->id = id;
 80068e6:	68fb      	ldr	r3, [r7, #12]
 80068e8:	79fa      	ldrb	r2, [r7, #7]
 80068ea:	701a      	strb	r2, [r3, #0]
  /* Initialize low level driver */
  USBD_LL_Init(pdev);
 80068ec:	68f8      	ldr	r0, [r7, #12]
 80068ee:	f001 fb61 	bl	8007fb4 <USBD_LL_Init>

  return USBD_OK;
 80068f2:	2300      	movs	r3, #0
}
 80068f4:	4618      	mov	r0, r3
 80068f6:	3710      	adds	r7, #16
 80068f8:	46bd      	mov	sp, r7
 80068fa:	bd80      	pop	{r7, pc}

080068fc <USBD_RegisterClass>:
  * @param  pDevice : Device Handle
  * @param  pclass: Class handle
  * @retval USBD Status
  */
USBD_StatusTypeDef  USBD_RegisterClass(USBD_HandleTypeDef *pdev, USBD_ClassTypeDef *pclass)
{
 80068fc:	b480      	push	{r7}
 80068fe:	b085      	sub	sp, #20
 8006900:	af00      	add	r7, sp, #0
 8006902:	6078      	str	r0, [r7, #4]
 8006904:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef status = USBD_OK;
 8006906:	2300      	movs	r3, #0
 8006908:	73fb      	strb	r3, [r7, #15]
  if (pclass != NULL)
 800690a:	683b      	ldr	r3, [r7, #0]
 800690c:	2b00      	cmp	r3, #0
 800690e:	d006      	beq.n	800691e <USBD_RegisterClass+0x22>
  {
    /* link the class to the USB Device handle */
    pdev->pClass = pclass;
 8006910:	687b      	ldr	r3, [r7, #4]
 8006912:	683a      	ldr	r2, [r7, #0]
 8006914:	f8c3 22b4 	str.w	r2, [r3, #692]	; 0x2b4
    status = USBD_OK;
 8006918:	2300      	movs	r3, #0
 800691a:	73fb      	strb	r3, [r7, #15]
 800691c:	e001      	b.n	8006922 <USBD_RegisterClass+0x26>
  else
  {
#if (USBD_DEBUG_LEVEL > 1U)
    USBD_ErrLog("Invalid Class handle");
#endif
    status = USBD_FAIL;
 800691e:	2302      	movs	r3, #2
 8006920:	73fb      	strb	r3, [r7, #15]
  }

  return status;
 8006922:	7bfb      	ldrb	r3, [r7, #15]
}
 8006924:	4618      	mov	r0, r3
 8006926:	3714      	adds	r7, #20
 8006928:	46bd      	mov	sp, r7
 800692a:	bc80      	pop	{r7}
 800692c:	4770      	bx	lr

0800692e <USBD_Start>:
  *         Start the USB Device Core.
  * @param  pdev: Device Handle
  * @retval USBD Status
  */
USBD_StatusTypeDef  USBD_Start(USBD_HandleTypeDef *pdev)
{
 800692e:	b580      	push	{r7, lr}
 8006930:	b082      	sub	sp, #8
 8006932:	af00      	add	r7, sp, #0
 8006934:	6078      	str	r0, [r7, #4]
  /* Start the low level driver  */
  USBD_LL_Start(pdev);
 8006936:	6878      	ldr	r0, [r7, #4]
 8006938:	f001 fb96 	bl	8008068 <USBD_LL_Start>

  return USBD_OK;
 800693c:	2300      	movs	r3, #0
}
 800693e:	4618      	mov	r0, r3
 8006940:	3708      	adds	r7, #8
 8006942:	46bd      	mov	sp, r7
 8006944:	bd80      	pop	{r7, pc}

08006946 <USBD_RunTestMode>:
*         Launch test mode process
* @param  pdev: device instance
* @retval status
*/
USBD_StatusTypeDef  USBD_RunTestMode(USBD_HandleTypeDef  *pdev)
{
 8006946:	b480      	push	{r7}
 8006948:	b083      	sub	sp, #12
 800694a:	af00      	add	r7, sp, #0
 800694c:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument compilation warning */
  UNUSED(pdev);

  return USBD_OK;
 800694e:	2300      	movs	r3, #0
}
 8006950:	4618      	mov	r0, r3
 8006952:	370c      	adds	r7, #12
 8006954:	46bd      	mov	sp, r7
 8006956:	bc80      	pop	{r7}
 8006958:	4770      	bx	lr

0800695a <USBD_SetClassConfig>:
* @param  cfgidx: configuration index
* @retval status
*/

USBD_StatusTypeDef USBD_SetClassConfig(USBD_HandleTypeDef  *pdev, uint8_t cfgidx)
{
 800695a:	b580      	push	{r7, lr}
 800695c:	b084      	sub	sp, #16
 800695e:	af00      	add	r7, sp, #0
 8006960:	6078      	str	r0, [r7, #4]
 8006962:	460b      	mov	r3, r1
 8006964:	70fb      	strb	r3, [r7, #3]
  USBD_StatusTypeDef ret = USBD_FAIL;
 8006966:	2302      	movs	r3, #2
 8006968:	73fb      	strb	r3, [r7, #15]

  if (pdev->pClass != NULL)
 800696a:	687b      	ldr	r3, [r7, #4]
 800696c:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8006970:	2b00      	cmp	r3, #0
 8006972:	d00c      	beq.n	800698e <USBD_SetClassConfig+0x34>
  {
    /* Set configuration  and Start the Class*/
    if (pdev->pClass->Init(pdev, cfgidx) == 0U)
 8006974:	687b      	ldr	r3, [r7, #4]
 8006976:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800697a:	681b      	ldr	r3, [r3, #0]
 800697c:	78fa      	ldrb	r2, [r7, #3]
 800697e:	4611      	mov	r1, r2
 8006980:	6878      	ldr	r0, [r7, #4]
 8006982:	4798      	blx	r3
 8006984:	4603      	mov	r3, r0
 8006986:	2b00      	cmp	r3, #0
 8006988:	d101      	bne.n	800698e <USBD_SetClassConfig+0x34>
    {
      ret = USBD_OK;
 800698a:	2300      	movs	r3, #0
 800698c:	73fb      	strb	r3, [r7, #15]
    }
  }

  return ret;
 800698e:	7bfb      	ldrb	r3, [r7, #15]
}
 8006990:	4618      	mov	r0, r3
 8006992:	3710      	adds	r7, #16
 8006994:	46bd      	mov	sp, r7
 8006996:	bd80      	pop	{r7, pc}

08006998 <USBD_ClrClassConfig>:
* @param  pdev: device instance
* @param  cfgidx: configuration index
* @retval status: USBD_StatusTypeDef
*/
USBD_StatusTypeDef USBD_ClrClassConfig(USBD_HandleTypeDef  *pdev, uint8_t cfgidx)
{
 8006998:	b580      	push	{r7, lr}
 800699a:	b082      	sub	sp, #8
 800699c:	af00      	add	r7, sp, #0
 800699e:	6078      	str	r0, [r7, #4]
 80069a0:	460b      	mov	r3, r1
 80069a2:	70fb      	strb	r3, [r7, #3]
  /* Clear configuration  and De-initialize the Class process*/
  pdev->pClass->DeInit(pdev, cfgidx);
 80069a4:	687b      	ldr	r3, [r7, #4]
 80069a6:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 80069aa:	685b      	ldr	r3, [r3, #4]
 80069ac:	78fa      	ldrb	r2, [r7, #3]
 80069ae:	4611      	mov	r1, r2
 80069b0:	6878      	ldr	r0, [r7, #4]
 80069b2:	4798      	blx	r3

  return USBD_OK;
 80069b4:	2300      	movs	r3, #0
}
 80069b6:	4618      	mov	r0, r3
 80069b8:	3708      	adds	r7, #8
 80069ba:	46bd      	mov	sp, r7
 80069bc:	bd80      	pop	{r7, pc}

080069be <USBD_LL_SetupStage>:
*         Handle the setup stage
* @param  pdev: device instance
* @retval status
*/
USBD_StatusTypeDef USBD_LL_SetupStage(USBD_HandleTypeDef *pdev, uint8_t *psetup)
{
 80069be:	b580      	push	{r7, lr}
 80069c0:	b082      	sub	sp, #8
 80069c2:	af00      	add	r7, sp, #0
 80069c4:	6078      	str	r0, [r7, #4]
 80069c6:	6039      	str	r1, [r7, #0]
  USBD_ParseSetupRequest(&pdev->request, psetup);
 80069c8:	687b      	ldr	r3, [r7, #4]
 80069ca:	f503 732a 	add.w	r3, r3, #680	; 0x2a8
 80069ce:	6839      	ldr	r1, [r7, #0]
 80069d0:	4618      	mov	r0, r3
 80069d2:	f000 fecb 	bl	800776c <USBD_ParseSetupRequest>

  pdev->ep0_state = USBD_EP0_SETUP;
 80069d6:	687b      	ldr	r3, [r7, #4]
 80069d8:	2201      	movs	r2, #1
 80069da:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294

  pdev->ep0_data_len = pdev->request.wLength;
 80069de:	687b      	ldr	r3, [r7, #4]
 80069e0:	f8b3 32ae 	ldrh.w	r3, [r3, #686]	; 0x2ae
 80069e4:	461a      	mov	r2, r3
 80069e6:	687b      	ldr	r3, [r7, #4]
 80069e8:	f8c3 2298 	str.w	r2, [r3, #664]	; 0x298

  switch (pdev->request.bmRequest & 0x1FU)
 80069ec:	687b      	ldr	r3, [r7, #4]
 80069ee:	f893 32a8 	ldrb.w	r3, [r3, #680]	; 0x2a8
 80069f2:	f003 031f 	and.w	r3, r3, #31
 80069f6:	2b01      	cmp	r3, #1
 80069f8:	d00c      	beq.n	8006a14 <USBD_LL_SetupStage+0x56>
 80069fa:	2b01      	cmp	r3, #1
 80069fc:	d302      	bcc.n	8006a04 <USBD_LL_SetupStage+0x46>
 80069fe:	2b02      	cmp	r3, #2
 8006a00:	d010      	beq.n	8006a24 <USBD_LL_SetupStage+0x66>
 8006a02:	e017      	b.n	8006a34 <USBD_LL_SetupStage+0x76>
  {
    case USB_REQ_RECIPIENT_DEVICE:
      USBD_StdDevReq(pdev, &pdev->request);
 8006a04:	687b      	ldr	r3, [r7, #4]
 8006a06:	f503 732a 	add.w	r3, r3, #680	; 0x2a8
 8006a0a:	4619      	mov	r1, r3
 8006a0c:	6878      	ldr	r0, [r7, #4]
 8006a0e:	f000 f9cb 	bl	8006da8 <USBD_StdDevReq>
      break;
 8006a12:	e01a      	b.n	8006a4a <USBD_LL_SetupStage+0x8c>

    case USB_REQ_RECIPIENT_INTERFACE:
      USBD_StdItfReq(pdev, &pdev->request);
 8006a14:	687b      	ldr	r3, [r7, #4]
 8006a16:	f503 732a 	add.w	r3, r3, #680	; 0x2a8
 8006a1a:	4619      	mov	r1, r3
 8006a1c:	6878      	ldr	r0, [r7, #4]
 8006a1e:	f000 fa2d 	bl	8006e7c <USBD_StdItfReq>
      break;
 8006a22:	e012      	b.n	8006a4a <USBD_LL_SetupStage+0x8c>

    case USB_REQ_RECIPIENT_ENDPOINT:
      USBD_StdEPReq(pdev, &pdev->request);
 8006a24:	687b      	ldr	r3, [r7, #4]
 8006a26:	f503 732a 	add.w	r3, r3, #680	; 0x2a8
 8006a2a:	4619      	mov	r1, r3
 8006a2c:	6878      	ldr	r0, [r7, #4]
 8006a2e:	f000 fa6b 	bl	8006f08 <USBD_StdEPReq>
      break;
 8006a32:	e00a      	b.n	8006a4a <USBD_LL_SetupStage+0x8c>

    default:
      USBD_LL_StallEP(pdev, (pdev->request.bmRequest & 0x80U));
 8006a34:	687b      	ldr	r3, [r7, #4]
 8006a36:	f893 32a8 	ldrb.w	r3, [r3, #680]	; 0x2a8
 8006a3a:	f023 037f 	bic.w	r3, r3, #127	; 0x7f
 8006a3e:	b2db      	uxtb	r3, r3
 8006a40:	4619      	mov	r1, r3
 8006a42:	6878      	ldr	r0, [r7, #4]
 8006a44:	f001 fb70 	bl	8008128 <USBD_LL_StallEP>
      break;
 8006a48:	bf00      	nop
  }

  return USBD_OK;
 8006a4a:	2300      	movs	r3, #0
}
 8006a4c:	4618      	mov	r0, r3
 8006a4e:	3708      	adds	r7, #8
 8006a50:	46bd      	mov	sp, r7
 8006a52:	bd80      	pop	{r7, pc}

08006a54 <USBD_LL_DataOutStage>:
* @param  epnum: endpoint index
* @retval status
*/
USBD_StatusTypeDef USBD_LL_DataOutStage(USBD_HandleTypeDef *pdev,
                                        uint8_t epnum, uint8_t *pdata)
{
 8006a54:	b580      	push	{r7, lr}
 8006a56:	b086      	sub	sp, #24
 8006a58:	af00      	add	r7, sp, #0
 8006a5a:	60f8      	str	r0, [r7, #12]
 8006a5c:	460b      	mov	r3, r1
 8006a5e:	607a      	str	r2, [r7, #4]
 8006a60:	72fb      	strb	r3, [r7, #11]
  USBD_EndpointTypeDef *pep;

  if (epnum == 0U)
 8006a62:	7afb      	ldrb	r3, [r7, #11]
 8006a64:	2b00      	cmp	r3, #0
 8006a66:	d14b      	bne.n	8006b00 <USBD_LL_DataOutStage+0xac>
  {
    pep = &pdev->ep_out[0];
 8006a68:	68fb      	ldr	r3, [r7, #12]
 8006a6a:	f503 73aa 	add.w	r3, r3, #340	; 0x154
 8006a6e:	617b      	str	r3, [r7, #20]

    if (pdev->ep0_state == USBD_EP0_DATA_OUT)
 8006a70:	68fb      	ldr	r3, [r7, #12]
 8006a72:	f8d3 3294 	ldr.w	r3, [r3, #660]	; 0x294
 8006a76:	2b03      	cmp	r3, #3
 8006a78:	d134      	bne.n	8006ae4 <USBD_LL_DataOutStage+0x90>
    {
      if (pep->rem_length > pep->maxpacket)
 8006a7a:	697b      	ldr	r3, [r7, #20]
 8006a7c:	68da      	ldr	r2, [r3, #12]
 8006a7e:	697b      	ldr	r3, [r7, #20]
 8006a80:	691b      	ldr	r3, [r3, #16]
 8006a82:	429a      	cmp	r2, r3
 8006a84:	d919      	bls.n	8006aba <USBD_LL_DataOutStage+0x66>
      {
        pep->rem_length -= pep->maxpacket;
 8006a86:	697b      	ldr	r3, [r7, #20]
 8006a88:	68da      	ldr	r2, [r3, #12]
 8006a8a:	697b      	ldr	r3, [r7, #20]
 8006a8c:	691b      	ldr	r3, [r3, #16]
 8006a8e:	1ad2      	subs	r2, r2, r3
 8006a90:	697b      	ldr	r3, [r7, #20]
 8006a92:	60da      	str	r2, [r3, #12]

        USBD_CtlContinueRx(pdev, pdata,
                           (uint16_t)MIN(pep->rem_length, pep->maxpacket));
 8006a94:	697b      	ldr	r3, [r7, #20]
 8006a96:	68da      	ldr	r2, [r3, #12]
 8006a98:	697b      	ldr	r3, [r7, #20]
 8006a9a:	691b      	ldr	r3, [r3, #16]
        USBD_CtlContinueRx(pdev, pdata,
 8006a9c:	429a      	cmp	r2, r3
 8006a9e:	d203      	bcs.n	8006aa8 <USBD_LL_DataOutStage+0x54>
                           (uint16_t)MIN(pep->rem_length, pep->maxpacket));
 8006aa0:	697b      	ldr	r3, [r7, #20]
 8006aa2:	68db      	ldr	r3, [r3, #12]
        USBD_CtlContinueRx(pdev, pdata,
 8006aa4:	b29b      	uxth	r3, r3
 8006aa6:	e002      	b.n	8006aae <USBD_LL_DataOutStage+0x5a>
                           (uint16_t)MIN(pep->rem_length, pep->maxpacket));
 8006aa8:	697b      	ldr	r3, [r7, #20]
 8006aaa:	691b      	ldr	r3, [r3, #16]
        USBD_CtlContinueRx(pdev, pdata,
 8006aac:	b29b      	uxth	r3, r3
 8006aae:	461a      	mov	r2, r3
 8006ab0:	6879      	ldr	r1, [r7, #4]
 8006ab2:	68f8      	ldr	r0, [r7, #12]
 8006ab4:	f000 ff4c 	bl	8007950 <USBD_CtlContinueRx>
 8006ab8:	e038      	b.n	8006b2c <USBD_LL_DataOutStage+0xd8>
      }
      else
      {
        if ((pdev->pClass->EP0_RxReady != NULL) &&
 8006aba:	68fb      	ldr	r3, [r7, #12]
 8006abc:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8006ac0:	691b      	ldr	r3, [r3, #16]
 8006ac2:	2b00      	cmp	r3, #0
 8006ac4:	d00a      	beq.n	8006adc <USBD_LL_DataOutStage+0x88>
            (pdev->dev_state == USBD_STATE_CONFIGURED))
 8006ac6:	68fb      	ldr	r3, [r7, #12]
 8006ac8:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
        if ((pdev->pClass->EP0_RxReady != NULL) &&
 8006acc:	2b03      	cmp	r3, #3
 8006ace:	d105      	bne.n	8006adc <USBD_LL_DataOutStage+0x88>
        {
          pdev->pClass->EP0_RxReady(pdev);
 8006ad0:	68fb      	ldr	r3, [r7, #12]
 8006ad2:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8006ad6:	691b      	ldr	r3, [r3, #16]
 8006ad8:	68f8      	ldr	r0, [r7, #12]
 8006ada:	4798      	blx	r3
        }
        USBD_CtlSendStatus(pdev);
 8006adc:	68f8      	ldr	r0, [r7, #12]
 8006ade:	f000 ff49 	bl	8007974 <USBD_CtlSendStatus>
 8006ae2:	e023      	b.n	8006b2c <USBD_LL_DataOutStage+0xd8>
      }
    }
    else
    {
      if (pdev->ep0_state == USBD_EP0_STATUS_OUT)
 8006ae4:	68fb      	ldr	r3, [r7, #12]
 8006ae6:	f8d3 3294 	ldr.w	r3, [r3, #660]	; 0x294
 8006aea:	2b05      	cmp	r3, #5
 8006aec:	d11e      	bne.n	8006b2c <USBD_LL_DataOutStage+0xd8>
      {
        /*
         * STATUS PHASE completed, update ep0_state to idle
         */
        pdev->ep0_state = USBD_EP0_IDLE;
 8006aee:	68fb      	ldr	r3, [r7, #12]
 8006af0:	2200      	movs	r2, #0
 8006af2:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294
        USBD_LL_StallEP(pdev, 0U);
 8006af6:	2100      	movs	r1, #0
 8006af8:	68f8      	ldr	r0, [r7, #12]
 8006afa:	f001 fb15 	bl	8008128 <USBD_LL_StallEP>
 8006afe:	e015      	b.n	8006b2c <USBD_LL_DataOutStage+0xd8>
      }
    }
  }
  else if ((pdev->pClass->DataOut != NULL) &&
 8006b00:	68fb      	ldr	r3, [r7, #12]
 8006b02:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8006b06:	699b      	ldr	r3, [r3, #24]
 8006b08:	2b00      	cmp	r3, #0
 8006b0a:	d00d      	beq.n	8006b28 <USBD_LL_DataOutStage+0xd4>
           (pdev->dev_state == USBD_STATE_CONFIGURED))
 8006b0c:	68fb      	ldr	r3, [r7, #12]
 8006b0e:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
  else if ((pdev->pClass->DataOut != NULL) &&
 8006b12:	2b03      	cmp	r3, #3
 8006b14:	d108      	bne.n	8006b28 <USBD_LL_DataOutStage+0xd4>
  {
    pdev->pClass->DataOut(pdev, epnum);
 8006b16:	68fb      	ldr	r3, [r7, #12]
 8006b18:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8006b1c:	699b      	ldr	r3, [r3, #24]
 8006b1e:	7afa      	ldrb	r2, [r7, #11]
 8006b20:	4611      	mov	r1, r2
 8006b22:	68f8      	ldr	r0, [r7, #12]
 8006b24:	4798      	blx	r3
 8006b26:	e001      	b.n	8006b2c <USBD_LL_DataOutStage+0xd8>
  }
  else
  {
    /* should never be in this condition */
    return USBD_FAIL;
 8006b28:	2302      	movs	r3, #2
 8006b2a:	e000      	b.n	8006b2e <USBD_LL_DataOutStage+0xda>
  }

  return USBD_OK;
 8006b2c:	2300      	movs	r3, #0
}
 8006b2e:	4618      	mov	r0, r3
 8006b30:	3718      	adds	r7, #24
 8006b32:	46bd      	mov	sp, r7
 8006b34:	bd80      	pop	{r7, pc}

08006b36 <USBD_LL_DataInStage>:
* @param  epnum: endpoint index
* @retval status
*/
USBD_StatusTypeDef USBD_LL_DataInStage(USBD_HandleTypeDef *pdev,
                                       uint8_t epnum, uint8_t *pdata)
{
 8006b36:	b580      	push	{r7, lr}
 8006b38:	b086      	sub	sp, #24
 8006b3a:	af00      	add	r7, sp, #0
 8006b3c:	60f8      	str	r0, [r7, #12]
 8006b3e:	460b      	mov	r3, r1
 8006b40:	607a      	str	r2, [r7, #4]
 8006b42:	72fb      	strb	r3, [r7, #11]
  USBD_EndpointTypeDef *pep;

  if (epnum == 0U)
 8006b44:	7afb      	ldrb	r3, [r7, #11]
 8006b46:	2b00      	cmp	r3, #0
 8006b48:	d17f      	bne.n	8006c4a <USBD_LL_DataInStage+0x114>
  {
    pep = &pdev->ep_in[0];
 8006b4a:	68fb      	ldr	r3, [r7, #12]
 8006b4c:	3314      	adds	r3, #20
 8006b4e:	617b      	str	r3, [r7, #20]

    if (pdev->ep0_state == USBD_EP0_DATA_IN)
 8006b50:	68fb      	ldr	r3, [r7, #12]
 8006b52:	f8d3 3294 	ldr.w	r3, [r3, #660]	; 0x294
 8006b56:	2b02      	cmp	r3, #2
 8006b58:	d15c      	bne.n	8006c14 <USBD_LL_DataInStage+0xde>
    {
      if (pep->rem_length > pep->maxpacket)
 8006b5a:	697b      	ldr	r3, [r7, #20]
 8006b5c:	68da      	ldr	r2, [r3, #12]
 8006b5e:	697b      	ldr	r3, [r7, #20]
 8006b60:	691b      	ldr	r3, [r3, #16]
 8006b62:	429a      	cmp	r2, r3
 8006b64:	d915      	bls.n	8006b92 <USBD_LL_DataInStage+0x5c>
      {
        pep->rem_length -= pep->maxpacket;
 8006b66:	697b      	ldr	r3, [r7, #20]
 8006b68:	68da      	ldr	r2, [r3, #12]
 8006b6a:	697b      	ldr	r3, [r7, #20]
 8006b6c:	691b      	ldr	r3, [r3, #16]
 8006b6e:	1ad2      	subs	r2, r2, r3
 8006b70:	697b      	ldr	r3, [r7, #20]
 8006b72:	60da      	str	r2, [r3, #12]

        USBD_CtlContinueSendData(pdev, pdata, (uint16_t)pep->rem_length);
 8006b74:	697b      	ldr	r3, [r7, #20]
 8006b76:	68db      	ldr	r3, [r3, #12]
 8006b78:	b29b      	uxth	r3, r3
 8006b7a:	461a      	mov	r2, r3
 8006b7c:	6879      	ldr	r1, [r7, #4]
 8006b7e:	68f8      	ldr	r0, [r7, #12]
 8006b80:	f000 feb6 	bl	80078f0 <USBD_CtlContinueSendData>

        /* Prepare endpoint for premature end of transfer */
        USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 8006b84:	2300      	movs	r3, #0
 8006b86:	2200      	movs	r2, #0
 8006b88:	2100      	movs	r1, #0
 8006b8a:	68f8      	ldr	r0, [r7, #12]
 8006b8c:	f001 fb78 	bl	8008280 <USBD_LL_PrepareReceive>
 8006b90:	e04e      	b.n	8006c30 <USBD_LL_DataInStage+0xfa>
      }
      else
      {
        /* last packet is MPS multiple, so send ZLP packet */
        if ((pep->total_length % pep->maxpacket == 0U) &&
 8006b92:	697b      	ldr	r3, [r7, #20]
 8006b94:	689b      	ldr	r3, [r3, #8]
 8006b96:	697a      	ldr	r2, [r7, #20]
 8006b98:	6912      	ldr	r2, [r2, #16]
 8006b9a:	fbb3 f1f2 	udiv	r1, r3, r2
 8006b9e:	fb02 f201 	mul.w	r2, r2, r1
 8006ba2:	1a9b      	subs	r3, r3, r2
 8006ba4:	2b00      	cmp	r3, #0
 8006ba6:	d11c      	bne.n	8006be2 <USBD_LL_DataInStage+0xac>
            (pep->total_length >= pep->maxpacket) &&
 8006ba8:	697b      	ldr	r3, [r7, #20]
 8006baa:	689a      	ldr	r2, [r3, #8]
 8006bac:	697b      	ldr	r3, [r7, #20]
 8006bae:	691b      	ldr	r3, [r3, #16]
        if ((pep->total_length % pep->maxpacket == 0U) &&
 8006bb0:	429a      	cmp	r2, r3
 8006bb2:	d316      	bcc.n	8006be2 <USBD_LL_DataInStage+0xac>
            (pep->total_length < pdev->ep0_data_len))
 8006bb4:	697b      	ldr	r3, [r7, #20]
 8006bb6:	689a      	ldr	r2, [r3, #8]
 8006bb8:	68fb      	ldr	r3, [r7, #12]
 8006bba:	f8d3 3298 	ldr.w	r3, [r3, #664]	; 0x298
            (pep->total_length >= pep->maxpacket) &&
 8006bbe:	429a      	cmp	r2, r3
 8006bc0:	d20f      	bcs.n	8006be2 <USBD_LL_DataInStage+0xac>
        {
          USBD_CtlContinueSendData(pdev, NULL, 0U);
 8006bc2:	2200      	movs	r2, #0
 8006bc4:	2100      	movs	r1, #0
 8006bc6:	68f8      	ldr	r0, [r7, #12]
 8006bc8:	f000 fe92 	bl	80078f0 <USBD_CtlContinueSendData>
          pdev->ep0_data_len = 0U;
 8006bcc:	68fb      	ldr	r3, [r7, #12]
 8006bce:	2200      	movs	r2, #0
 8006bd0:	f8c3 2298 	str.w	r2, [r3, #664]	; 0x298

          /* Prepare endpoint for premature end of transfer */
          USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 8006bd4:	2300      	movs	r3, #0
 8006bd6:	2200      	movs	r2, #0
 8006bd8:	2100      	movs	r1, #0
 8006bda:	68f8      	ldr	r0, [r7, #12]
 8006bdc:	f001 fb50 	bl	8008280 <USBD_LL_PrepareReceive>
 8006be0:	e026      	b.n	8006c30 <USBD_LL_DataInStage+0xfa>
        }
        else
        {
          if ((pdev->pClass->EP0_TxSent != NULL) &&
 8006be2:	68fb      	ldr	r3, [r7, #12]
 8006be4:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8006be8:	68db      	ldr	r3, [r3, #12]
 8006bea:	2b00      	cmp	r3, #0
 8006bec:	d00a      	beq.n	8006c04 <USBD_LL_DataInStage+0xce>
              (pdev->dev_state == USBD_STATE_CONFIGURED))
 8006bee:	68fb      	ldr	r3, [r7, #12]
 8006bf0:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
          if ((pdev->pClass->EP0_TxSent != NULL) &&
 8006bf4:	2b03      	cmp	r3, #3
 8006bf6:	d105      	bne.n	8006c04 <USBD_LL_DataInStage+0xce>
          {
            pdev->pClass->EP0_TxSent(pdev);
 8006bf8:	68fb      	ldr	r3, [r7, #12]
 8006bfa:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8006bfe:	68db      	ldr	r3, [r3, #12]
 8006c00:	68f8      	ldr	r0, [r7, #12]
 8006c02:	4798      	blx	r3
          }
          USBD_LL_StallEP(pdev, 0x80U);
 8006c04:	2180      	movs	r1, #128	; 0x80
 8006c06:	68f8      	ldr	r0, [r7, #12]
 8006c08:	f001 fa8e 	bl	8008128 <USBD_LL_StallEP>
          USBD_CtlReceiveStatus(pdev);
 8006c0c:	68f8      	ldr	r0, [r7, #12]
 8006c0e:	f000 fec4 	bl	800799a <USBD_CtlReceiveStatus>
 8006c12:	e00d      	b.n	8006c30 <USBD_LL_DataInStage+0xfa>
        }
      }
    }
    else
    {
      if ((pdev->ep0_state == USBD_EP0_STATUS_IN) ||
 8006c14:	68fb      	ldr	r3, [r7, #12]
 8006c16:	f8d3 3294 	ldr.w	r3, [r3, #660]	; 0x294
 8006c1a:	2b04      	cmp	r3, #4
 8006c1c:	d004      	beq.n	8006c28 <USBD_LL_DataInStage+0xf2>
          (pdev->ep0_state == USBD_EP0_IDLE))
 8006c1e:	68fb      	ldr	r3, [r7, #12]
 8006c20:	f8d3 3294 	ldr.w	r3, [r3, #660]	; 0x294
      if ((pdev->ep0_state == USBD_EP0_STATUS_IN) ||
 8006c24:	2b00      	cmp	r3, #0
 8006c26:	d103      	bne.n	8006c30 <USBD_LL_DataInStage+0xfa>
      {
        USBD_LL_StallEP(pdev, 0x80U);
 8006c28:	2180      	movs	r1, #128	; 0x80
 8006c2a:	68f8      	ldr	r0, [r7, #12]
 8006c2c:	f001 fa7c 	bl	8008128 <USBD_LL_StallEP>
      }
    }

    if (pdev->dev_test_mode == 1U)
 8006c30:	68fb      	ldr	r3, [r7, #12]
 8006c32:	f893 32a0 	ldrb.w	r3, [r3, #672]	; 0x2a0
 8006c36:	2b01      	cmp	r3, #1
 8006c38:	d11d      	bne.n	8006c76 <USBD_LL_DataInStage+0x140>
    {
      USBD_RunTestMode(pdev);
 8006c3a:	68f8      	ldr	r0, [r7, #12]
 8006c3c:	f7ff fe83 	bl	8006946 <USBD_RunTestMode>
      pdev->dev_test_mode = 0U;
 8006c40:	68fb      	ldr	r3, [r7, #12]
 8006c42:	2200      	movs	r2, #0
 8006c44:	f883 22a0 	strb.w	r2, [r3, #672]	; 0x2a0
 8006c48:	e015      	b.n	8006c76 <USBD_LL_DataInStage+0x140>
    }
  }
  else if ((pdev->pClass->DataIn != NULL) &&
 8006c4a:	68fb      	ldr	r3, [r7, #12]
 8006c4c:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8006c50:	695b      	ldr	r3, [r3, #20]
 8006c52:	2b00      	cmp	r3, #0
 8006c54:	d00d      	beq.n	8006c72 <USBD_LL_DataInStage+0x13c>
           (pdev->dev_state == USBD_STATE_CONFIGURED))
 8006c56:	68fb      	ldr	r3, [r7, #12]
 8006c58:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
  else if ((pdev->pClass->DataIn != NULL) &&
 8006c5c:	2b03      	cmp	r3, #3
 8006c5e:	d108      	bne.n	8006c72 <USBD_LL_DataInStage+0x13c>
  {
    pdev->pClass->DataIn(pdev, epnum);
 8006c60:	68fb      	ldr	r3, [r7, #12]
 8006c62:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8006c66:	695b      	ldr	r3, [r3, #20]
 8006c68:	7afa      	ldrb	r2, [r7, #11]
 8006c6a:	4611      	mov	r1, r2
 8006c6c:	68f8      	ldr	r0, [r7, #12]
 8006c6e:	4798      	blx	r3
 8006c70:	e001      	b.n	8006c76 <USBD_LL_DataInStage+0x140>
  }
  else
  {
    /* should never be in this condition */
    return USBD_FAIL;
 8006c72:	2302      	movs	r3, #2
 8006c74:	e000      	b.n	8006c78 <USBD_LL_DataInStage+0x142>
  }

  return USBD_OK;
 8006c76:	2300      	movs	r3, #0
}
 8006c78:	4618      	mov	r0, r3
 8006c7a:	3718      	adds	r7, #24
 8006c7c:	46bd      	mov	sp, r7
 8006c7e:	bd80      	pop	{r7, pc}

08006c80 <USBD_LL_Reset>:
* @param  pdev: device instance
* @retval status
*/

USBD_StatusTypeDef USBD_LL_Reset(USBD_HandleTypeDef *pdev)
{
 8006c80:	b580      	push	{r7, lr}
 8006c82:	b082      	sub	sp, #8
 8006c84:	af00      	add	r7, sp, #0
 8006c86:	6078      	str	r0, [r7, #4]
  /* Open EP0 OUT */
  USBD_LL_OpenEP(pdev, 0x00U, USBD_EP_TYPE_CTRL, USB_MAX_EP0_SIZE);
 8006c88:	2340      	movs	r3, #64	; 0x40
 8006c8a:	2200      	movs	r2, #0
 8006c8c:	2100      	movs	r1, #0
 8006c8e:	6878      	ldr	r0, [r7, #4]
 8006c90:	f001 fa05 	bl	800809e <USBD_LL_OpenEP>
  pdev->ep_out[0x00U & 0xFU].is_used = 1U;
 8006c94:	687b      	ldr	r3, [r7, #4]
 8006c96:	2201      	movs	r2, #1
 8006c98:	f8c3 2158 	str.w	r2, [r3, #344]	; 0x158

  pdev->ep_out[0].maxpacket = USB_MAX_EP0_SIZE;
 8006c9c:	687b      	ldr	r3, [r7, #4]
 8006c9e:	2240      	movs	r2, #64	; 0x40
 8006ca0:	f8c3 2164 	str.w	r2, [r3, #356]	; 0x164

  /* Open EP0 IN */
  USBD_LL_OpenEP(pdev, 0x80U, USBD_EP_TYPE_CTRL, USB_MAX_EP0_SIZE);
 8006ca4:	2340      	movs	r3, #64	; 0x40
 8006ca6:	2200      	movs	r2, #0
 8006ca8:	2180      	movs	r1, #128	; 0x80
 8006caa:	6878      	ldr	r0, [r7, #4]
 8006cac:	f001 f9f7 	bl	800809e <USBD_LL_OpenEP>
  pdev->ep_in[0x80U & 0xFU].is_used = 1U;
 8006cb0:	687b      	ldr	r3, [r7, #4]
 8006cb2:	2201      	movs	r2, #1
 8006cb4:	619a      	str	r2, [r3, #24]

  pdev->ep_in[0].maxpacket = USB_MAX_EP0_SIZE;
 8006cb6:	687b      	ldr	r3, [r7, #4]
 8006cb8:	2240      	movs	r2, #64	; 0x40
 8006cba:	625a      	str	r2, [r3, #36]	; 0x24

  /* Upon Reset call user call back */
  pdev->dev_state = USBD_STATE_DEFAULT;
 8006cbc:	687b      	ldr	r3, [r7, #4]
 8006cbe:	2201      	movs	r2, #1
 8006cc0:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
  pdev->ep0_state = USBD_EP0_IDLE;
 8006cc4:	687b      	ldr	r3, [r7, #4]
 8006cc6:	2200      	movs	r2, #0
 8006cc8:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294
  pdev->dev_config = 0U;
 8006ccc:	687b      	ldr	r3, [r7, #4]
 8006cce:	2200      	movs	r2, #0
 8006cd0:	605a      	str	r2, [r3, #4]
  pdev->dev_remote_wakeup = 0U;
 8006cd2:	687b      	ldr	r3, [r7, #4]
 8006cd4:	2200      	movs	r2, #0
 8006cd6:	f8c3 22a4 	str.w	r2, [r3, #676]	; 0x2a4

  if (pdev->pClassData)
 8006cda:	687b      	ldr	r3, [r7, #4]
 8006cdc:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8006ce0:	2b00      	cmp	r3, #0
 8006ce2:	d009      	beq.n	8006cf8 <USBD_LL_Reset+0x78>
  {
    pdev->pClass->DeInit(pdev, (uint8_t)pdev->dev_config);
 8006ce4:	687b      	ldr	r3, [r7, #4]
 8006ce6:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8006cea:	685b      	ldr	r3, [r3, #4]
 8006cec:	687a      	ldr	r2, [r7, #4]
 8006cee:	6852      	ldr	r2, [r2, #4]
 8006cf0:	b2d2      	uxtb	r2, r2
 8006cf2:	4611      	mov	r1, r2
 8006cf4:	6878      	ldr	r0, [r7, #4]
 8006cf6:	4798      	blx	r3
  }

  return USBD_OK;
 8006cf8:	2300      	movs	r3, #0
}
 8006cfa:	4618      	mov	r0, r3
 8006cfc:	3708      	adds	r7, #8
 8006cfe:	46bd      	mov	sp, r7
 8006d00:	bd80      	pop	{r7, pc}

08006d02 <USBD_LL_SetSpeed>:
* @param  pdev: device instance
* @retval status
*/
USBD_StatusTypeDef USBD_LL_SetSpeed(USBD_HandleTypeDef *pdev,
                                    USBD_SpeedTypeDef speed)
{
 8006d02:	b480      	push	{r7}
 8006d04:	b083      	sub	sp, #12
 8006d06:	af00      	add	r7, sp, #0
 8006d08:	6078      	str	r0, [r7, #4]
 8006d0a:	460b      	mov	r3, r1
 8006d0c:	70fb      	strb	r3, [r7, #3]
  pdev->dev_speed = speed;
 8006d0e:	687b      	ldr	r3, [r7, #4]
 8006d10:	78fa      	ldrb	r2, [r7, #3]
 8006d12:	741a      	strb	r2, [r3, #16]

  return USBD_OK;
 8006d14:	2300      	movs	r3, #0
}
 8006d16:	4618      	mov	r0, r3
 8006d18:	370c      	adds	r7, #12
 8006d1a:	46bd      	mov	sp, r7
 8006d1c:	bc80      	pop	{r7}
 8006d1e:	4770      	bx	lr

08006d20 <USBD_LL_Suspend>:
* @param  pdev: device instance
* @retval status
*/

USBD_StatusTypeDef USBD_LL_Suspend(USBD_HandleTypeDef *pdev)
{
 8006d20:	b480      	push	{r7}
 8006d22:	b083      	sub	sp, #12
 8006d24:	af00      	add	r7, sp, #0
 8006d26:	6078      	str	r0, [r7, #4]
  pdev->dev_old_state =  pdev->dev_state;
 8006d28:	687b      	ldr	r3, [r7, #4]
 8006d2a:	f893 229c 	ldrb.w	r2, [r3, #668]	; 0x29c
 8006d2e:	687b      	ldr	r3, [r7, #4]
 8006d30:	f883 229d 	strb.w	r2, [r3, #669]	; 0x29d
  pdev->dev_state  = USBD_STATE_SUSPENDED;
 8006d34:	687b      	ldr	r3, [r7, #4]
 8006d36:	2204      	movs	r2, #4
 8006d38:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c

  return USBD_OK;
 8006d3c:	2300      	movs	r3, #0
}
 8006d3e:	4618      	mov	r0, r3
 8006d40:	370c      	adds	r7, #12
 8006d42:	46bd      	mov	sp, r7
 8006d44:	bc80      	pop	{r7}
 8006d46:	4770      	bx	lr

08006d48 <USBD_LL_Resume>:
* @param  pdev: device instance
* @retval status
*/

USBD_StatusTypeDef USBD_LL_Resume(USBD_HandleTypeDef *pdev)
{
 8006d48:	b480      	push	{r7}
 8006d4a:	b083      	sub	sp, #12
 8006d4c:	af00      	add	r7, sp, #0
 8006d4e:	6078      	str	r0, [r7, #4]
  if (pdev->dev_state == USBD_STATE_SUSPENDED)
 8006d50:	687b      	ldr	r3, [r7, #4]
 8006d52:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8006d56:	2b04      	cmp	r3, #4
 8006d58:	d105      	bne.n	8006d66 <USBD_LL_Resume+0x1e>
  {
    pdev->dev_state = pdev->dev_old_state;
 8006d5a:	687b      	ldr	r3, [r7, #4]
 8006d5c:	f893 229d 	ldrb.w	r2, [r3, #669]	; 0x29d
 8006d60:	687b      	ldr	r3, [r7, #4]
 8006d62:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
  }

  return USBD_OK;
 8006d66:	2300      	movs	r3, #0
}
 8006d68:	4618      	mov	r0, r3
 8006d6a:	370c      	adds	r7, #12
 8006d6c:	46bd      	mov	sp, r7
 8006d6e:	bc80      	pop	{r7}
 8006d70:	4770      	bx	lr

08006d72 <USBD_LL_SOF>:
* @param  pdev: device instance
* @retval status
*/

USBD_StatusTypeDef USBD_LL_SOF(USBD_HandleTypeDef *pdev)
{
 8006d72:	b580      	push	{r7, lr}
 8006d74:	b082      	sub	sp, #8
 8006d76:	af00      	add	r7, sp, #0
 8006d78:	6078      	str	r0, [r7, #4]
  if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8006d7a:	687b      	ldr	r3, [r7, #4]
 8006d7c:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8006d80:	2b03      	cmp	r3, #3
 8006d82:	d10b      	bne.n	8006d9c <USBD_LL_SOF+0x2a>
  {
    if (pdev->pClass->SOF != NULL)
 8006d84:	687b      	ldr	r3, [r7, #4]
 8006d86:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8006d8a:	69db      	ldr	r3, [r3, #28]
 8006d8c:	2b00      	cmp	r3, #0
 8006d8e:	d005      	beq.n	8006d9c <USBD_LL_SOF+0x2a>
    {
      pdev->pClass->SOF(pdev);
 8006d90:	687b      	ldr	r3, [r7, #4]
 8006d92:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8006d96:	69db      	ldr	r3, [r3, #28]
 8006d98:	6878      	ldr	r0, [r7, #4]
 8006d9a:	4798      	blx	r3
    }
  }

  return USBD_OK;
 8006d9c:	2300      	movs	r3, #0
}
 8006d9e:	4618      	mov	r0, r3
 8006da0:	3708      	adds	r7, #8
 8006da2:	46bd      	mov	sp, r7
 8006da4:	bd80      	pop	{r7, pc}
	...

08006da8 <USBD_StdDevReq>:
* @param  req: usb request
* @retval status
*/
USBD_StatusTypeDef  USBD_StdDevReq(USBD_HandleTypeDef *pdev,
                                   USBD_SetupReqTypedef *req)
{
 8006da8:	b580      	push	{r7, lr}
 8006daa:	b084      	sub	sp, #16
 8006dac:	af00      	add	r7, sp, #0
 8006dae:	6078      	str	r0, [r7, #4]
 8006db0:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 8006db2:	2300      	movs	r3, #0
 8006db4:	73fb      	strb	r3, [r7, #15]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 8006db6:	683b      	ldr	r3, [r7, #0]
 8006db8:	781b      	ldrb	r3, [r3, #0]
 8006dba:	f003 0360 	and.w	r3, r3, #96	; 0x60
 8006dbe:	2b20      	cmp	r3, #32
 8006dc0:	d004      	beq.n	8006dcc <USBD_StdDevReq+0x24>
 8006dc2:	2b40      	cmp	r3, #64	; 0x40
 8006dc4:	d002      	beq.n	8006dcc <USBD_StdDevReq+0x24>
 8006dc6:	2b00      	cmp	r3, #0
 8006dc8:	d008      	beq.n	8006ddc <USBD_StdDevReq+0x34>
 8006dca:	e04c      	b.n	8006e66 <USBD_StdDevReq+0xbe>
  {
    case USB_REQ_TYPE_CLASS:
    case USB_REQ_TYPE_VENDOR:
      pdev->pClass->Setup(pdev, req);
 8006dcc:	687b      	ldr	r3, [r7, #4]
 8006dce:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8006dd2:	689b      	ldr	r3, [r3, #8]
 8006dd4:	6839      	ldr	r1, [r7, #0]
 8006dd6:	6878      	ldr	r0, [r7, #4]
 8006dd8:	4798      	blx	r3
      break;
 8006dda:	e049      	b.n	8006e70 <USBD_StdDevReq+0xc8>

    case USB_REQ_TYPE_STANDARD:
      switch (req->bRequest)
 8006ddc:	683b      	ldr	r3, [r7, #0]
 8006dde:	785b      	ldrb	r3, [r3, #1]
 8006de0:	2b09      	cmp	r3, #9
 8006de2:	d83a      	bhi.n	8006e5a <USBD_StdDevReq+0xb2>
 8006de4:	a201      	add	r2, pc, #4	; (adr r2, 8006dec <USBD_StdDevReq+0x44>)
 8006de6:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006dea:	bf00      	nop
 8006dec:	08006e3d 	.word	0x08006e3d
 8006df0:	08006e51 	.word	0x08006e51
 8006df4:	08006e5b 	.word	0x08006e5b
 8006df8:	08006e47 	.word	0x08006e47
 8006dfc:	08006e5b 	.word	0x08006e5b
 8006e00:	08006e1f 	.word	0x08006e1f
 8006e04:	08006e15 	.word	0x08006e15
 8006e08:	08006e5b 	.word	0x08006e5b
 8006e0c:	08006e33 	.word	0x08006e33
 8006e10:	08006e29 	.word	0x08006e29
      {
        case USB_REQ_GET_DESCRIPTOR:
          USBD_GetDescriptor(pdev, req);
 8006e14:	6839      	ldr	r1, [r7, #0]
 8006e16:	6878      	ldr	r0, [r7, #4]
 8006e18:	f000 f9d4 	bl	80071c4 <USBD_GetDescriptor>
          break;
 8006e1c:	e022      	b.n	8006e64 <USBD_StdDevReq+0xbc>

        case USB_REQ_SET_ADDRESS:
          USBD_SetAddress(pdev, req);
 8006e1e:	6839      	ldr	r1, [r7, #0]
 8006e20:	6878      	ldr	r0, [r7, #4]
 8006e22:	f000 fb37 	bl	8007494 <USBD_SetAddress>
          break;
 8006e26:	e01d      	b.n	8006e64 <USBD_StdDevReq+0xbc>

        case USB_REQ_SET_CONFIGURATION:
          USBD_SetConfig(pdev, req);
 8006e28:	6839      	ldr	r1, [r7, #0]
 8006e2a:	6878      	ldr	r0, [r7, #4]
 8006e2c:	f000 fb74 	bl	8007518 <USBD_SetConfig>
          break;
 8006e30:	e018      	b.n	8006e64 <USBD_StdDevReq+0xbc>

        case USB_REQ_GET_CONFIGURATION:
          USBD_GetConfig(pdev, req);
 8006e32:	6839      	ldr	r1, [r7, #0]
 8006e34:	6878      	ldr	r0, [r7, #4]
 8006e36:	f000 fbfd 	bl	8007634 <USBD_GetConfig>
          break;
 8006e3a:	e013      	b.n	8006e64 <USBD_StdDevReq+0xbc>

        case USB_REQ_GET_STATUS:
          USBD_GetStatus(pdev, req);
 8006e3c:	6839      	ldr	r1, [r7, #0]
 8006e3e:	6878      	ldr	r0, [r7, #4]
 8006e40:	f000 fc2c 	bl	800769c <USBD_GetStatus>
          break;
 8006e44:	e00e      	b.n	8006e64 <USBD_StdDevReq+0xbc>

        case USB_REQ_SET_FEATURE:
          USBD_SetFeature(pdev, req);
 8006e46:	6839      	ldr	r1, [r7, #0]
 8006e48:	6878      	ldr	r0, [r7, #4]
 8006e4a:	f000 fc5a 	bl	8007702 <USBD_SetFeature>
          break;
 8006e4e:	e009      	b.n	8006e64 <USBD_StdDevReq+0xbc>

        case USB_REQ_CLEAR_FEATURE:
          USBD_ClrFeature(pdev, req);
 8006e50:	6839      	ldr	r1, [r7, #0]
 8006e52:	6878      	ldr	r0, [r7, #4]
 8006e54:	f000 fc69 	bl	800772a <USBD_ClrFeature>
          break;
 8006e58:	e004      	b.n	8006e64 <USBD_StdDevReq+0xbc>

        default:
          USBD_CtlError(pdev, req);
 8006e5a:	6839      	ldr	r1, [r7, #0]
 8006e5c:	6878      	ldr	r0, [r7, #4]
 8006e5e:	f000 fcc1 	bl	80077e4 <USBD_CtlError>
          break;
 8006e62:	bf00      	nop
      }
      break;
 8006e64:	e004      	b.n	8006e70 <USBD_StdDevReq+0xc8>

    default:
      USBD_CtlError(pdev, req);
 8006e66:	6839      	ldr	r1, [r7, #0]
 8006e68:	6878      	ldr	r0, [r7, #4]
 8006e6a:	f000 fcbb 	bl	80077e4 <USBD_CtlError>
      break;
 8006e6e:	bf00      	nop
  }

  return ret;
 8006e70:	7bfb      	ldrb	r3, [r7, #15]
}
 8006e72:	4618      	mov	r0, r3
 8006e74:	3710      	adds	r7, #16
 8006e76:	46bd      	mov	sp, r7
 8006e78:	bd80      	pop	{r7, pc}
 8006e7a:	bf00      	nop

08006e7c <USBD_StdItfReq>:
* @param  req: usb request
* @retval status
*/
USBD_StatusTypeDef  USBD_StdItfReq(USBD_HandleTypeDef *pdev,
                                   USBD_SetupReqTypedef  *req)
{
 8006e7c:	b580      	push	{r7, lr}
 8006e7e:	b084      	sub	sp, #16
 8006e80:	af00      	add	r7, sp, #0
 8006e82:	6078      	str	r0, [r7, #4]
 8006e84:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 8006e86:	2300      	movs	r3, #0
 8006e88:	73fb      	strb	r3, [r7, #15]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 8006e8a:	683b      	ldr	r3, [r7, #0]
 8006e8c:	781b      	ldrb	r3, [r3, #0]
 8006e8e:	f003 0360 	and.w	r3, r3, #96	; 0x60
 8006e92:	2b20      	cmp	r3, #32
 8006e94:	d003      	beq.n	8006e9e <USBD_StdItfReq+0x22>
 8006e96:	2b40      	cmp	r3, #64	; 0x40
 8006e98:	d001      	beq.n	8006e9e <USBD_StdItfReq+0x22>
 8006e9a:	2b00      	cmp	r3, #0
 8006e9c:	d12a      	bne.n	8006ef4 <USBD_StdItfReq+0x78>
  {
    case USB_REQ_TYPE_CLASS:
    case USB_REQ_TYPE_VENDOR:
    case USB_REQ_TYPE_STANDARD:
      switch (pdev->dev_state)
 8006e9e:	687b      	ldr	r3, [r7, #4]
 8006ea0:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8006ea4:	3b01      	subs	r3, #1
 8006ea6:	2b02      	cmp	r3, #2
 8006ea8:	d81d      	bhi.n	8006ee6 <USBD_StdItfReq+0x6a>
      {
        case USBD_STATE_DEFAULT:
        case USBD_STATE_ADDRESSED:
        case USBD_STATE_CONFIGURED:

          if (LOBYTE(req->wIndex) <= USBD_MAX_NUM_INTERFACES)
 8006eaa:	683b      	ldr	r3, [r7, #0]
 8006eac:	889b      	ldrh	r3, [r3, #4]
 8006eae:	b2db      	uxtb	r3, r3
 8006eb0:	2b01      	cmp	r3, #1
 8006eb2:	d813      	bhi.n	8006edc <USBD_StdItfReq+0x60>
          {
            ret = (USBD_StatusTypeDef)pdev->pClass->Setup(pdev, req);
 8006eb4:	687b      	ldr	r3, [r7, #4]
 8006eb6:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8006eba:	689b      	ldr	r3, [r3, #8]
 8006ebc:	6839      	ldr	r1, [r7, #0]
 8006ebe:	6878      	ldr	r0, [r7, #4]
 8006ec0:	4798      	blx	r3
 8006ec2:	4603      	mov	r3, r0
 8006ec4:	73fb      	strb	r3, [r7, #15]

            if ((req->wLength == 0U) && (ret == USBD_OK))
 8006ec6:	683b      	ldr	r3, [r7, #0]
 8006ec8:	88db      	ldrh	r3, [r3, #6]
 8006eca:	2b00      	cmp	r3, #0
 8006ecc:	d110      	bne.n	8006ef0 <USBD_StdItfReq+0x74>
 8006ece:	7bfb      	ldrb	r3, [r7, #15]
 8006ed0:	2b00      	cmp	r3, #0
 8006ed2:	d10d      	bne.n	8006ef0 <USBD_StdItfReq+0x74>
            {
              USBD_CtlSendStatus(pdev);
 8006ed4:	6878      	ldr	r0, [r7, #4]
 8006ed6:	f000 fd4d 	bl	8007974 <USBD_CtlSendStatus>
          }
          else
          {
            USBD_CtlError(pdev, req);
          }
          break;
 8006eda:	e009      	b.n	8006ef0 <USBD_StdItfReq+0x74>
            USBD_CtlError(pdev, req);
 8006edc:	6839      	ldr	r1, [r7, #0]
 8006ede:	6878      	ldr	r0, [r7, #4]
 8006ee0:	f000 fc80 	bl	80077e4 <USBD_CtlError>
          break;
 8006ee4:	e004      	b.n	8006ef0 <USBD_StdItfReq+0x74>

        default:
          USBD_CtlError(pdev, req);
 8006ee6:	6839      	ldr	r1, [r7, #0]
 8006ee8:	6878      	ldr	r0, [r7, #4]
 8006eea:	f000 fc7b 	bl	80077e4 <USBD_CtlError>
          break;
 8006eee:	e000      	b.n	8006ef2 <USBD_StdItfReq+0x76>
          break;
 8006ef0:	bf00      	nop
      }
      break;
 8006ef2:	e004      	b.n	8006efe <USBD_StdItfReq+0x82>

    default:
      USBD_CtlError(pdev, req);
 8006ef4:	6839      	ldr	r1, [r7, #0]
 8006ef6:	6878      	ldr	r0, [r7, #4]
 8006ef8:	f000 fc74 	bl	80077e4 <USBD_CtlError>
      break;
 8006efc:	bf00      	nop
  }

  return USBD_OK;
 8006efe:	2300      	movs	r3, #0
}
 8006f00:	4618      	mov	r0, r3
 8006f02:	3710      	adds	r7, #16
 8006f04:	46bd      	mov	sp, r7
 8006f06:	bd80      	pop	{r7, pc}

08006f08 <USBD_StdEPReq>:
* @param  req: usb request
* @retval status
*/
USBD_StatusTypeDef  USBD_StdEPReq(USBD_HandleTypeDef *pdev,
                                  USBD_SetupReqTypedef  *req)
{
 8006f08:	b580      	push	{r7, lr}
 8006f0a:	b084      	sub	sp, #16
 8006f0c:	af00      	add	r7, sp, #0
 8006f0e:	6078      	str	r0, [r7, #4]
 8006f10:	6039      	str	r1, [r7, #0]
  USBD_EndpointTypeDef *pep;
  uint8_t   ep_addr;
  USBD_StatusTypeDef ret = USBD_OK;
 8006f12:	2300      	movs	r3, #0
 8006f14:	73fb      	strb	r3, [r7, #15]
  ep_addr  = LOBYTE(req->wIndex);
 8006f16:	683b      	ldr	r3, [r7, #0]
 8006f18:	889b      	ldrh	r3, [r3, #4]
 8006f1a:	73bb      	strb	r3, [r7, #14]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 8006f1c:	683b      	ldr	r3, [r7, #0]
 8006f1e:	781b      	ldrb	r3, [r3, #0]
 8006f20:	f003 0360 	and.w	r3, r3, #96	; 0x60
 8006f24:	2b20      	cmp	r3, #32
 8006f26:	d004      	beq.n	8006f32 <USBD_StdEPReq+0x2a>
 8006f28:	2b40      	cmp	r3, #64	; 0x40
 8006f2a:	d002      	beq.n	8006f32 <USBD_StdEPReq+0x2a>
 8006f2c:	2b00      	cmp	r3, #0
 8006f2e:	d008      	beq.n	8006f42 <USBD_StdEPReq+0x3a>
 8006f30:	e13d      	b.n	80071ae <USBD_StdEPReq+0x2a6>
  {
    case USB_REQ_TYPE_CLASS:
    case USB_REQ_TYPE_VENDOR:
      pdev->pClass->Setup(pdev, req);
 8006f32:	687b      	ldr	r3, [r7, #4]
 8006f34:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8006f38:	689b      	ldr	r3, [r3, #8]
 8006f3a:	6839      	ldr	r1, [r7, #0]
 8006f3c:	6878      	ldr	r0, [r7, #4]
 8006f3e:	4798      	blx	r3
      break;
 8006f40:	e13a      	b.n	80071b8 <USBD_StdEPReq+0x2b0>

    case USB_REQ_TYPE_STANDARD:
      /* Check if it is a class request */
      if ((req->bmRequest & 0x60U) == 0x20U)
 8006f42:	683b      	ldr	r3, [r7, #0]
 8006f44:	781b      	ldrb	r3, [r3, #0]
 8006f46:	f003 0360 	and.w	r3, r3, #96	; 0x60
 8006f4a:	2b20      	cmp	r3, #32
 8006f4c:	d10a      	bne.n	8006f64 <USBD_StdEPReq+0x5c>
      {
        ret = (USBD_StatusTypeDef)pdev->pClass->Setup(pdev, req);
 8006f4e:	687b      	ldr	r3, [r7, #4]
 8006f50:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8006f54:	689b      	ldr	r3, [r3, #8]
 8006f56:	6839      	ldr	r1, [r7, #0]
 8006f58:	6878      	ldr	r0, [r7, #4]
 8006f5a:	4798      	blx	r3
 8006f5c:	4603      	mov	r3, r0
 8006f5e:	73fb      	strb	r3, [r7, #15]

        return ret;
 8006f60:	7bfb      	ldrb	r3, [r7, #15]
 8006f62:	e12a      	b.n	80071ba <USBD_StdEPReq+0x2b2>
      }

      switch (req->bRequest)
 8006f64:	683b      	ldr	r3, [r7, #0]
 8006f66:	785b      	ldrb	r3, [r3, #1]
 8006f68:	2b01      	cmp	r3, #1
 8006f6a:	d03e      	beq.n	8006fea <USBD_StdEPReq+0xe2>
 8006f6c:	2b03      	cmp	r3, #3
 8006f6e:	d002      	beq.n	8006f76 <USBD_StdEPReq+0x6e>
 8006f70:	2b00      	cmp	r3, #0
 8006f72:	d070      	beq.n	8007056 <USBD_StdEPReq+0x14e>
 8006f74:	e115      	b.n	80071a2 <USBD_StdEPReq+0x29a>
      {
        case USB_REQ_SET_FEATURE:
          switch (pdev->dev_state)
 8006f76:	687b      	ldr	r3, [r7, #4]
 8006f78:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8006f7c:	2b02      	cmp	r3, #2
 8006f7e:	d002      	beq.n	8006f86 <USBD_StdEPReq+0x7e>
 8006f80:	2b03      	cmp	r3, #3
 8006f82:	d015      	beq.n	8006fb0 <USBD_StdEPReq+0xa8>
 8006f84:	e02b      	b.n	8006fde <USBD_StdEPReq+0xd6>
          {
            case USBD_STATE_ADDRESSED:
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 8006f86:	7bbb      	ldrb	r3, [r7, #14]
 8006f88:	2b00      	cmp	r3, #0
 8006f8a:	d00c      	beq.n	8006fa6 <USBD_StdEPReq+0x9e>
 8006f8c:	7bbb      	ldrb	r3, [r7, #14]
 8006f8e:	2b80      	cmp	r3, #128	; 0x80
 8006f90:	d009      	beq.n	8006fa6 <USBD_StdEPReq+0x9e>
              {
                USBD_LL_StallEP(pdev, ep_addr);
 8006f92:	7bbb      	ldrb	r3, [r7, #14]
 8006f94:	4619      	mov	r1, r3
 8006f96:	6878      	ldr	r0, [r7, #4]
 8006f98:	f001 f8c6 	bl	8008128 <USBD_LL_StallEP>
                USBD_LL_StallEP(pdev, 0x80U);
 8006f9c:	2180      	movs	r1, #128	; 0x80
 8006f9e:	6878      	ldr	r0, [r7, #4]
 8006fa0:	f001 f8c2 	bl	8008128 <USBD_LL_StallEP>
              }
              else
              {
                USBD_CtlError(pdev, req);
              }
              break;
 8006fa4:	e020      	b.n	8006fe8 <USBD_StdEPReq+0xe0>
                USBD_CtlError(pdev, req);
 8006fa6:	6839      	ldr	r1, [r7, #0]
 8006fa8:	6878      	ldr	r0, [r7, #4]
 8006faa:	f000 fc1b 	bl	80077e4 <USBD_CtlError>
              break;
 8006fae:	e01b      	b.n	8006fe8 <USBD_StdEPReq+0xe0>

            case USBD_STATE_CONFIGURED:
              if (req->wValue == USB_FEATURE_EP_HALT)
 8006fb0:	683b      	ldr	r3, [r7, #0]
 8006fb2:	885b      	ldrh	r3, [r3, #2]
 8006fb4:	2b00      	cmp	r3, #0
 8006fb6:	d10e      	bne.n	8006fd6 <USBD_StdEPReq+0xce>
              {
                if ((ep_addr != 0x00U) &&
 8006fb8:	7bbb      	ldrb	r3, [r7, #14]
 8006fba:	2b00      	cmp	r3, #0
 8006fbc:	d00b      	beq.n	8006fd6 <USBD_StdEPReq+0xce>
 8006fbe:	7bbb      	ldrb	r3, [r7, #14]
 8006fc0:	2b80      	cmp	r3, #128	; 0x80
 8006fc2:	d008      	beq.n	8006fd6 <USBD_StdEPReq+0xce>
                    (ep_addr != 0x80U) && (req->wLength == 0x00U))
 8006fc4:	683b      	ldr	r3, [r7, #0]
 8006fc6:	88db      	ldrh	r3, [r3, #6]
 8006fc8:	2b00      	cmp	r3, #0
 8006fca:	d104      	bne.n	8006fd6 <USBD_StdEPReq+0xce>
                {
                  USBD_LL_StallEP(pdev, ep_addr);
 8006fcc:	7bbb      	ldrb	r3, [r7, #14]
 8006fce:	4619      	mov	r1, r3
 8006fd0:	6878      	ldr	r0, [r7, #4]
 8006fd2:	f001 f8a9 	bl	8008128 <USBD_LL_StallEP>
                }
              }
              USBD_CtlSendStatus(pdev);
 8006fd6:	6878      	ldr	r0, [r7, #4]
 8006fd8:	f000 fccc 	bl	8007974 <USBD_CtlSendStatus>

              break;
 8006fdc:	e004      	b.n	8006fe8 <USBD_StdEPReq+0xe0>

            default:
              USBD_CtlError(pdev, req);
 8006fde:	6839      	ldr	r1, [r7, #0]
 8006fe0:	6878      	ldr	r0, [r7, #4]
 8006fe2:	f000 fbff 	bl	80077e4 <USBD_CtlError>
              break;
 8006fe6:	bf00      	nop
          }
          break;
 8006fe8:	e0e0      	b.n	80071ac <USBD_StdEPReq+0x2a4>

        case USB_REQ_CLEAR_FEATURE:

          switch (pdev->dev_state)
 8006fea:	687b      	ldr	r3, [r7, #4]
 8006fec:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8006ff0:	2b02      	cmp	r3, #2
 8006ff2:	d002      	beq.n	8006ffa <USBD_StdEPReq+0xf2>
 8006ff4:	2b03      	cmp	r3, #3
 8006ff6:	d015      	beq.n	8007024 <USBD_StdEPReq+0x11c>
 8006ff8:	e026      	b.n	8007048 <USBD_StdEPReq+0x140>
          {
            case USBD_STATE_ADDRESSED:
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 8006ffa:	7bbb      	ldrb	r3, [r7, #14]
 8006ffc:	2b00      	cmp	r3, #0
 8006ffe:	d00c      	beq.n	800701a <USBD_StdEPReq+0x112>
 8007000:	7bbb      	ldrb	r3, [r7, #14]
 8007002:	2b80      	cmp	r3, #128	; 0x80
 8007004:	d009      	beq.n	800701a <USBD_StdEPReq+0x112>
              {
                USBD_LL_StallEP(pdev, ep_addr);
 8007006:	7bbb      	ldrb	r3, [r7, #14]
 8007008:	4619      	mov	r1, r3
 800700a:	6878      	ldr	r0, [r7, #4]
 800700c:	f001 f88c 	bl	8008128 <USBD_LL_StallEP>
                USBD_LL_StallEP(pdev, 0x80U);
 8007010:	2180      	movs	r1, #128	; 0x80
 8007012:	6878      	ldr	r0, [r7, #4]
 8007014:	f001 f888 	bl	8008128 <USBD_LL_StallEP>
              }
              else
              {
                USBD_CtlError(pdev, req);
              }
              break;
 8007018:	e01c      	b.n	8007054 <USBD_StdEPReq+0x14c>
                USBD_CtlError(pdev, req);
 800701a:	6839      	ldr	r1, [r7, #0]
 800701c:	6878      	ldr	r0, [r7, #4]
 800701e:	f000 fbe1 	bl	80077e4 <USBD_CtlError>
              break;
 8007022:	e017      	b.n	8007054 <USBD_StdEPReq+0x14c>

            case USBD_STATE_CONFIGURED:
              if (req->wValue == USB_FEATURE_EP_HALT)
 8007024:	683b      	ldr	r3, [r7, #0]
 8007026:	885b      	ldrh	r3, [r3, #2]
 8007028:	2b00      	cmp	r3, #0
 800702a:	d112      	bne.n	8007052 <USBD_StdEPReq+0x14a>
              {
                if ((ep_addr & 0x7FU) != 0x00U)
 800702c:	7bbb      	ldrb	r3, [r7, #14]
 800702e:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8007032:	2b00      	cmp	r3, #0
 8007034:	d004      	beq.n	8007040 <USBD_StdEPReq+0x138>
                {
                  USBD_LL_ClearStallEP(pdev, ep_addr);
 8007036:	7bbb      	ldrb	r3, [r7, #14]
 8007038:	4619      	mov	r1, r3
 800703a:	6878      	ldr	r0, [r7, #4]
 800703c:	f001 f893 	bl	8008166 <USBD_LL_ClearStallEP>
                }
                USBD_CtlSendStatus(pdev);
 8007040:	6878      	ldr	r0, [r7, #4]
 8007042:	f000 fc97 	bl	8007974 <USBD_CtlSendStatus>
              }
              break;
 8007046:	e004      	b.n	8007052 <USBD_StdEPReq+0x14a>

            default:
              USBD_CtlError(pdev, req);
 8007048:	6839      	ldr	r1, [r7, #0]
 800704a:	6878      	ldr	r0, [r7, #4]
 800704c:	f000 fbca 	bl	80077e4 <USBD_CtlError>
              break;
 8007050:	e000      	b.n	8007054 <USBD_StdEPReq+0x14c>
              break;
 8007052:	bf00      	nop
          }
          break;
 8007054:	e0aa      	b.n	80071ac <USBD_StdEPReq+0x2a4>

        case USB_REQ_GET_STATUS:
          switch (pdev->dev_state)
 8007056:	687b      	ldr	r3, [r7, #4]
 8007058:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800705c:	2b02      	cmp	r3, #2
 800705e:	d002      	beq.n	8007066 <USBD_StdEPReq+0x15e>
 8007060:	2b03      	cmp	r3, #3
 8007062:	d032      	beq.n	80070ca <USBD_StdEPReq+0x1c2>
 8007064:	e097      	b.n	8007196 <USBD_StdEPReq+0x28e>
          {
            case USBD_STATE_ADDRESSED:
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 8007066:	7bbb      	ldrb	r3, [r7, #14]
 8007068:	2b00      	cmp	r3, #0
 800706a:	d007      	beq.n	800707c <USBD_StdEPReq+0x174>
 800706c:	7bbb      	ldrb	r3, [r7, #14]
 800706e:	2b80      	cmp	r3, #128	; 0x80
 8007070:	d004      	beq.n	800707c <USBD_StdEPReq+0x174>
              {
                USBD_CtlError(pdev, req);
 8007072:	6839      	ldr	r1, [r7, #0]
 8007074:	6878      	ldr	r0, [r7, #4]
 8007076:	f000 fbb5 	bl	80077e4 <USBD_CtlError>
                break;
 800707a:	e091      	b.n	80071a0 <USBD_StdEPReq+0x298>
              }
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 800707c:	f997 300e 	ldrsb.w	r3, [r7, #14]
 8007080:	2b00      	cmp	r3, #0
 8007082:	da0b      	bge.n	800709c <USBD_StdEPReq+0x194>
 8007084:	7bbb      	ldrb	r3, [r7, #14]
 8007086:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 800708a:	4613      	mov	r3, r2
 800708c:	009b      	lsls	r3, r3, #2
 800708e:	4413      	add	r3, r2
 8007090:	009b      	lsls	r3, r3, #2
 8007092:	3310      	adds	r3, #16
 8007094:	687a      	ldr	r2, [r7, #4]
 8007096:	4413      	add	r3, r2
 8007098:	3304      	adds	r3, #4
 800709a:	e00b      	b.n	80070b4 <USBD_StdEPReq+0x1ac>
                    &pdev->ep_out[ep_addr & 0x7FU];
 800709c:	7bbb      	ldrb	r3, [r7, #14]
 800709e:	f003 027f 	and.w	r2, r3, #127	; 0x7f
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 80070a2:	4613      	mov	r3, r2
 80070a4:	009b      	lsls	r3, r3, #2
 80070a6:	4413      	add	r3, r2
 80070a8:	009b      	lsls	r3, r3, #2
 80070aa:	f503 73a8 	add.w	r3, r3, #336	; 0x150
 80070ae:	687a      	ldr	r2, [r7, #4]
 80070b0:	4413      	add	r3, r2
 80070b2:	3304      	adds	r3, #4
 80070b4:	60bb      	str	r3, [r7, #8]

              pep->status = 0x0000U;
 80070b6:	68bb      	ldr	r3, [r7, #8]
 80070b8:	2200      	movs	r2, #0
 80070ba:	601a      	str	r2, [r3, #0]

              USBD_CtlSendData(pdev, (uint8_t *)(void *)&pep->status, 2U);
 80070bc:	68bb      	ldr	r3, [r7, #8]
 80070be:	2202      	movs	r2, #2
 80070c0:	4619      	mov	r1, r3
 80070c2:	6878      	ldr	r0, [r7, #4]
 80070c4:	f000 fbf8 	bl	80078b8 <USBD_CtlSendData>
              break;
 80070c8:	e06a      	b.n	80071a0 <USBD_StdEPReq+0x298>

            case USBD_STATE_CONFIGURED:
              if ((ep_addr & 0x80U) == 0x80U)
 80070ca:	f997 300e 	ldrsb.w	r3, [r7, #14]
 80070ce:	2b00      	cmp	r3, #0
 80070d0:	da11      	bge.n	80070f6 <USBD_StdEPReq+0x1ee>
              {
                if (pdev->ep_in[ep_addr & 0xFU].is_used == 0U)
 80070d2:	7bbb      	ldrb	r3, [r7, #14]
 80070d4:	f003 020f 	and.w	r2, r3, #15
 80070d8:	6879      	ldr	r1, [r7, #4]
 80070da:	4613      	mov	r3, r2
 80070dc:	009b      	lsls	r3, r3, #2
 80070de:	4413      	add	r3, r2
 80070e0:	009b      	lsls	r3, r3, #2
 80070e2:	440b      	add	r3, r1
 80070e4:	3318      	adds	r3, #24
 80070e6:	681b      	ldr	r3, [r3, #0]
 80070e8:	2b00      	cmp	r3, #0
 80070ea:	d117      	bne.n	800711c <USBD_StdEPReq+0x214>
                {
                  USBD_CtlError(pdev, req);
 80070ec:	6839      	ldr	r1, [r7, #0]
 80070ee:	6878      	ldr	r0, [r7, #4]
 80070f0:	f000 fb78 	bl	80077e4 <USBD_CtlError>
                  break;
 80070f4:	e054      	b.n	80071a0 <USBD_StdEPReq+0x298>
                }
              }
              else
              {
                if (pdev->ep_out[ep_addr & 0xFU].is_used == 0U)
 80070f6:	7bbb      	ldrb	r3, [r7, #14]
 80070f8:	f003 020f 	and.w	r2, r3, #15
 80070fc:	6879      	ldr	r1, [r7, #4]
 80070fe:	4613      	mov	r3, r2
 8007100:	009b      	lsls	r3, r3, #2
 8007102:	4413      	add	r3, r2
 8007104:	009b      	lsls	r3, r3, #2
 8007106:	440b      	add	r3, r1
 8007108:	f503 73ac 	add.w	r3, r3, #344	; 0x158
 800710c:	681b      	ldr	r3, [r3, #0]
 800710e:	2b00      	cmp	r3, #0
 8007110:	d104      	bne.n	800711c <USBD_StdEPReq+0x214>
                {
                  USBD_CtlError(pdev, req);
 8007112:	6839      	ldr	r1, [r7, #0]
 8007114:	6878      	ldr	r0, [r7, #4]
 8007116:	f000 fb65 	bl	80077e4 <USBD_CtlError>
                  break;
 800711a:	e041      	b.n	80071a0 <USBD_StdEPReq+0x298>
                }
              }

              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 800711c:	f997 300e 	ldrsb.w	r3, [r7, #14]
 8007120:	2b00      	cmp	r3, #0
 8007122:	da0b      	bge.n	800713c <USBD_StdEPReq+0x234>
 8007124:	7bbb      	ldrb	r3, [r7, #14]
 8007126:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 800712a:	4613      	mov	r3, r2
 800712c:	009b      	lsls	r3, r3, #2
 800712e:	4413      	add	r3, r2
 8007130:	009b      	lsls	r3, r3, #2
 8007132:	3310      	adds	r3, #16
 8007134:	687a      	ldr	r2, [r7, #4]
 8007136:	4413      	add	r3, r2
 8007138:	3304      	adds	r3, #4
 800713a:	e00b      	b.n	8007154 <USBD_StdEPReq+0x24c>
                    &pdev->ep_out[ep_addr & 0x7FU];
 800713c:	7bbb      	ldrb	r3, [r7, #14]
 800713e:	f003 027f 	and.w	r2, r3, #127	; 0x7f
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 8007142:	4613      	mov	r3, r2
 8007144:	009b      	lsls	r3, r3, #2
 8007146:	4413      	add	r3, r2
 8007148:	009b      	lsls	r3, r3, #2
 800714a:	f503 73a8 	add.w	r3, r3, #336	; 0x150
 800714e:	687a      	ldr	r2, [r7, #4]
 8007150:	4413      	add	r3, r2
 8007152:	3304      	adds	r3, #4
 8007154:	60bb      	str	r3, [r7, #8]

              if ((ep_addr == 0x00U) || (ep_addr == 0x80U))
 8007156:	7bbb      	ldrb	r3, [r7, #14]
 8007158:	2b00      	cmp	r3, #0
 800715a:	d002      	beq.n	8007162 <USBD_StdEPReq+0x25a>
 800715c:	7bbb      	ldrb	r3, [r7, #14]
 800715e:	2b80      	cmp	r3, #128	; 0x80
 8007160:	d103      	bne.n	800716a <USBD_StdEPReq+0x262>
              {
                pep->status = 0x0000U;
 8007162:	68bb      	ldr	r3, [r7, #8]
 8007164:	2200      	movs	r2, #0
 8007166:	601a      	str	r2, [r3, #0]
 8007168:	e00e      	b.n	8007188 <USBD_StdEPReq+0x280>
              }
              else if (USBD_LL_IsStallEP(pdev, ep_addr))
 800716a:	7bbb      	ldrb	r3, [r7, #14]
 800716c:	4619      	mov	r1, r3
 800716e:	6878      	ldr	r0, [r7, #4]
 8007170:	f001 f818 	bl	80081a4 <USBD_LL_IsStallEP>
 8007174:	4603      	mov	r3, r0
 8007176:	2b00      	cmp	r3, #0
 8007178:	d003      	beq.n	8007182 <USBD_StdEPReq+0x27a>
              {
                pep->status = 0x0001U;
 800717a:	68bb      	ldr	r3, [r7, #8]
 800717c:	2201      	movs	r2, #1
 800717e:	601a      	str	r2, [r3, #0]
 8007180:	e002      	b.n	8007188 <USBD_StdEPReq+0x280>
              }
              else
              {
                pep->status = 0x0000U;
 8007182:	68bb      	ldr	r3, [r7, #8]
 8007184:	2200      	movs	r2, #0
 8007186:	601a      	str	r2, [r3, #0]
              }

              USBD_CtlSendData(pdev, (uint8_t *)(void *)&pep->status, 2U);
 8007188:	68bb      	ldr	r3, [r7, #8]
 800718a:	2202      	movs	r2, #2
 800718c:	4619      	mov	r1, r3
 800718e:	6878      	ldr	r0, [r7, #4]
 8007190:	f000 fb92 	bl	80078b8 <USBD_CtlSendData>
              break;
 8007194:	e004      	b.n	80071a0 <USBD_StdEPReq+0x298>

            default:
              USBD_CtlError(pdev, req);
 8007196:	6839      	ldr	r1, [r7, #0]
 8007198:	6878      	ldr	r0, [r7, #4]
 800719a:	f000 fb23 	bl	80077e4 <USBD_CtlError>
              break;
 800719e:	bf00      	nop
          }
          break;
 80071a0:	e004      	b.n	80071ac <USBD_StdEPReq+0x2a4>

        default:
          USBD_CtlError(pdev, req);
 80071a2:	6839      	ldr	r1, [r7, #0]
 80071a4:	6878      	ldr	r0, [r7, #4]
 80071a6:	f000 fb1d 	bl	80077e4 <USBD_CtlError>
          break;
 80071aa:	bf00      	nop
      }
      break;
 80071ac:	e004      	b.n	80071b8 <USBD_StdEPReq+0x2b0>

    default:
      USBD_CtlError(pdev, req);
 80071ae:	6839      	ldr	r1, [r7, #0]
 80071b0:	6878      	ldr	r0, [r7, #4]
 80071b2:	f000 fb17 	bl	80077e4 <USBD_CtlError>
      break;
 80071b6:	bf00      	nop
  }

  return ret;
 80071b8:	7bfb      	ldrb	r3, [r7, #15]
}
 80071ba:	4618      	mov	r0, r3
 80071bc:	3710      	adds	r7, #16
 80071be:	46bd      	mov	sp, r7
 80071c0:	bd80      	pop	{r7, pc}
	...

080071c4 <USBD_GetDescriptor>:
* @param  req: usb request
* @retval status
*/
static void USBD_GetDescriptor(USBD_HandleTypeDef *pdev,
                               USBD_SetupReqTypedef *req)
{
 80071c4:	b580      	push	{r7, lr}
 80071c6:	b084      	sub	sp, #16
 80071c8:	af00      	add	r7, sp, #0
 80071ca:	6078      	str	r0, [r7, #4]
 80071cc:	6039      	str	r1, [r7, #0]
  uint16_t len = 0U;
 80071ce:	2300      	movs	r3, #0
 80071d0:	813b      	strh	r3, [r7, #8]
  uint8_t *pbuf = NULL;
 80071d2:	2300      	movs	r3, #0
 80071d4:	60fb      	str	r3, [r7, #12]
  uint8_t err = 0U;
 80071d6:	2300      	movs	r3, #0
 80071d8:	72fb      	strb	r3, [r7, #11]

  switch (req->wValue >> 8)
 80071da:	683b      	ldr	r3, [r7, #0]
 80071dc:	885b      	ldrh	r3, [r3, #2]
 80071de:	0a1b      	lsrs	r3, r3, #8
 80071e0:	b29b      	uxth	r3, r3
 80071e2:	3b01      	subs	r3, #1
 80071e4:	2b06      	cmp	r3, #6
 80071e6:	f200 8128 	bhi.w	800743a <USBD_GetDescriptor+0x276>
 80071ea:	a201      	add	r2, pc, #4	; (adr r2, 80071f0 <USBD_GetDescriptor+0x2c>)
 80071ec:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80071f0:	0800720d 	.word	0x0800720d
 80071f4:	08007225 	.word	0x08007225
 80071f8:	08007265 	.word	0x08007265
 80071fc:	0800743b 	.word	0x0800743b
 8007200:	0800743b 	.word	0x0800743b
 8007204:	080073db 	.word	0x080073db
 8007208:	08007407 	.word	0x08007407
        err++;
      }
      break;
#endif
    case USB_DESC_TYPE_DEVICE:
      pbuf = pdev->pDesc->GetDeviceDescriptor(pdev->dev_speed, &len);
 800720c:	687b      	ldr	r3, [r7, #4]
 800720e:	f8d3 32b0 	ldr.w	r3, [r3, #688]	; 0x2b0
 8007212:	681b      	ldr	r3, [r3, #0]
 8007214:	687a      	ldr	r2, [r7, #4]
 8007216:	7c12      	ldrb	r2, [r2, #16]
 8007218:	f107 0108 	add.w	r1, r7, #8
 800721c:	4610      	mov	r0, r2
 800721e:	4798      	blx	r3
 8007220:	60f8      	str	r0, [r7, #12]
      break;
 8007222:	e112      	b.n	800744a <USBD_GetDescriptor+0x286>

    case USB_DESC_TYPE_CONFIGURATION:
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 8007224:	687b      	ldr	r3, [r7, #4]
 8007226:	7c1b      	ldrb	r3, [r3, #16]
 8007228:	2b00      	cmp	r3, #0
 800722a:	d10d      	bne.n	8007248 <USBD_GetDescriptor+0x84>
      {
        pbuf = pdev->pClass->GetHSConfigDescriptor(&len);
 800722c:	687b      	ldr	r3, [r7, #4]
 800722e:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8007232:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8007234:	f107 0208 	add.w	r2, r7, #8
 8007238:	4610      	mov	r0, r2
 800723a:	4798      	blx	r3
 800723c:	60f8      	str	r0, [r7, #12]
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
 800723e:	68fb      	ldr	r3, [r7, #12]
 8007240:	3301      	adds	r3, #1
 8007242:	2202      	movs	r2, #2
 8007244:	701a      	strb	r2, [r3, #0]
      else
      {
        pbuf = pdev->pClass->GetFSConfigDescriptor(&len);
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
      }
      break;
 8007246:	e100      	b.n	800744a <USBD_GetDescriptor+0x286>
        pbuf = pdev->pClass->GetFSConfigDescriptor(&len);
 8007248:	687b      	ldr	r3, [r7, #4]
 800724a:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800724e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007250:	f107 0208 	add.w	r2, r7, #8
 8007254:	4610      	mov	r0, r2
 8007256:	4798      	blx	r3
 8007258:	60f8      	str	r0, [r7, #12]
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
 800725a:	68fb      	ldr	r3, [r7, #12]
 800725c:	3301      	adds	r3, #1
 800725e:	2202      	movs	r2, #2
 8007260:	701a      	strb	r2, [r3, #0]
      break;
 8007262:	e0f2      	b.n	800744a <USBD_GetDescriptor+0x286>

    case USB_DESC_TYPE_STRING:
      switch ((uint8_t)(req->wValue))
 8007264:	683b      	ldr	r3, [r7, #0]
 8007266:	885b      	ldrh	r3, [r3, #2]
 8007268:	b2db      	uxtb	r3, r3
 800726a:	2b05      	cmp	r3, #5
 800726c:	f200 80ac 	bhi.w	80073c8 <USBD_GetDescriptor+0x204>
 8007270:	a201      	add	r2, pc, #4	; (adr r2, 8007278 <USBD_GetDescriptor+0xb4>)
 8007272:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007276:	bf00      	nop
 8007278:	08007291 	.word	0x08007291
 800727c:	080072c5 	.word	0x080072c5
 8007280:	080072f9 	.word	0x080072f9
 8007284:	0800732d 	.word	0x0800732d
 8007288:	08007361 	.word	0x08007361
 800728c:	08007395 	.word	0x08007395
      {
        case USBD_IDX_LANGID_STR:
          if (pdev->pDesc->GetLangIDStrDescriptor != NULL)
 8007290:	687b      	ldr	r3, [r7, #4]
 8007292:	f8d3 32b0 	ldr.w	r3, [r3, #688]	; 0x2b0
 8007296:	685b      	ldr	r3, [r3, #4]
 8007298:	2b00      	cmp	r3, #0
 800729a:	d00b      	beq.n	80072b4 <USBD_GetDescriptor+0xf0>
          {
            pbuf = pdev->pDesc->GetLangIDStrDescriptor(pdev->dev_speed, &len);
 800729c:	687b      	ldr	r3, [r7, #4]
 800729e:	f8d3 32b0 	ldr.w	r3, [r3, #688]	; 0x2b0
 80072a2:	685b      	ldr	r3, [r3, #4]
 80072a4:	687a      	ldr	r2, [r7, #4]
 80072a6:	7c12      	ldrb	r2, [r2, #16]
 80072a8:	f107 0108 	add.w	r1, r7, #8
 80072ac:	4610      	mov	r0, r2
 80072ae:	4798      	blx	r3
 80072b0:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 80072b2:	e091      	b.n	80073d8 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 80072b4:	6839      	ldr	r1, [r7, #0]
 80072b6:	6878      	ldr	r0, [r7, #4]
 80072b8:	f000 fa94 	bl	80077e4 <USBD_CtlError>
            err++;
 80072bc:	7afb      	ldrb	r3, [r7, #11]
 80072be:	3301      	adds	r3, #1
 80072c0:	72fb      	strb	r3, [r7, #11]
          break;
 80072c2:	e089      	b.n	80073d8 <USBD_GetDescriptor+0x214>

        case USBD_IDX_MFC_STR:
          if (pdev->pDesc->GetManufacturerStrDescriptor != NULL)
 80072c4:	687b      	ldr	r3, [r7, #4]
 80072c6:	f8d3 32b0 	ldr.w	r3, [r3, #688]	; 0x2b0
 80072ca:	689b      	ldr	r3, [r3, #8]
 80072cc:	2b00      	cmp	r3, #0
 80072ce:	d00b      	beq.n	80072e8 <USBD_GetDescriptor+0x124>
          {
            pbuf = pdev->pDesc->GetManufacturerStrDescriptor(pdev->dev_speed, &len);
 80072d0:	687b      	ldr	r3, [r7, #4]
 80072d2:	f8d3 32b0 	ldr.w	r3, [r3, #688]	; 0x2b0
 80072d6:	689b      	ldr	r3, [r3, #8]
 80072d8:	687a      	ldr	r2, [r7, #4]
 80072da:	7c12      	ldrb	r2, [r2, #16]
 80072dc:	f107 0108 	add.w	r1, r7, #8
 80072e0:	4610      	mov	r0, r2
 80072e2:	4798      	blx	r3
 80072e4:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 80072e6:	e077      	b.n	80073d8 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 80072e8:	6839      	ldr	r1, [r7, #0]
 80072ea:	6878      	ldr	r0, [r7, #4]
 80072ec:	f000 fa7a 	bl	80077e4 <USBD_CtlError>
            err++;
 80072f0:	7afb      	ldrb	r3, [r7, #11]
 80072f2:	3301      	adds	r3, #1
 80072f4:	72fb      	strb	r3, [r7, #11]
          break;
 80072f6:	e06f      	b.n	80073d8 <USBD_GetDescriptor+0x214>

        case USBD_IDX_PRODUCT_STR:
          if (pdev->pDesc->GetProductStrDescriptor != NULL)
 80072f8:	687b      	ldr	r3, [r7, #4]
 80072fa:	f8d3 32b0 	ldr.w	r3, [r3, #688]	; 0x2b0
 80072fe:	68db      	ldr	r3, [r3, #12]
 8007300:	2b00      	cmp	r3, #0
 8007302:	d00b      	beq.n	800731c <USBD_GetDescriptor+0x158>
          {
            pbuf = pdev->pDesc->GetProductStrDescriptor(pdev->dev_speed, &len);
 8007304:	687b      	ldr	r3, [r7, #4]
 8007306:	f8d3 32b0 	ldr.w	r3, [r3, #688]	; 0x2b0
 800730a:	68db      	ldr	r3, [r3, #12]
 800730c:	687a      	ldr	r2, [r7, #4]
 800730e:	7c12      	ldrb	r2, [r2, #16]
 8007310:	f107 0108 	add.w	r1, r7, #8
 8007314:	4610      	mov	r0, r2
 8007316:	4798      	blx	r3
 8007318:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 800731a:	e05d      	b.n	80073d8 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 800731c:	6839      	ldr	r1, [r7, #0]
 800731e:	6878      	ldr	r0, [r7, #4]
 8007320:	f000 fa60 	bl	80077e4 <USBD_CtlError>
            err++;
 8007324:	7afb      	ldrb	r3, [r7, #11]
 8007326:	3301      	adds	r3, #1
 8007328:	72fb      	strb	r3, [r7, #11]
          break;
 800732a:	e055      	b.n	80073d8 <USBD_GetDescriptor+0x214>

        case USBD_IDX_SERIAL_STR:
          if (pdev->pDesc->GetSerialStrDescriptor != NULL)
 800732c:	687b      	ldr	r3, [r7, #4]
 800732e:	f8d3 32b0 	ldr.w	r3, [r3, #688]	; 0x2b0
 8007332:	691b      	ldr	r3, [r3, #16]
 8007334:	2b00      	cmp	r3, #0
 8007336:	d00b      	beq.n	8007350 <USBD_GetDescriptor+0x18c>
          {
            pbuf = pdev->pDesc->GetSerialStrDescriptor(pdev->dev_speed, &len);
 8007338:	687b      	ldr	r3, [r7, #4]
 800733a:	f8d3 32b0 	ldr.w	r3, [r3, #688]	; 0x2b0
 800733e:	691b      	ldr	r3, [r3, #16]
 8007340:	687a      	ldr	r2, [r7, #4]
 8007342:	7c12      	ldrb	r2, [r2, #16]
 8007344:	f107 0108 	add.w	r1, r7, #8
 8007348:	4610      	mov	r0, r2
 800734a:	4798      	blx	r3
 800734c:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 800734e:	e043      	b.n	80073d8 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 8007350:	6839      	ldr	r1, [r7, #0]
 8007352:	6878      	ldr	r0, [r7, #4]
 8007354:	f000 fa46 	bl	80077e4 <USBD_CtlError>
            err++;
 8007358:	7afb      	ldrb	r3, [r7, #11]
 800735a:	3301      	adds	r3, #1
 800735c:	72fb      	strb	r3, [r7, #11]
          break;
 800735e:	e03b      	b.n	80073d8 <USBD_GetDescriptor+0x214>

        case USBD_IDX_CONFIG_STR:
          if (pdev->pDesc->GetConfigurationStrDescriptor != NULL)
 8007360:	687b      	ldr	r3, [r7, #4]
 8007362:	f8d3 32b0 	ldr.w	r3, [r3, #688]	; 0x2b0
 8007366:	695b      	ldr	r3, [r3, #20]
 8007368:	2b00      	cmp	r3, #0
 800736a:	d00b      	beq.n	8007384 <USBD_GetDescriptor+0x1c0>
          {
            pbuf = pdev->pDesc->GetConfigurationStrDescriptor(pdev->dev_speed, &len);
 800736c:	687b      	ldr	r3, [r7, #4]
 800736e:	f8d3 32b0 	ldr.w	r3, [r3, #688]	; 0x2b0
 8007372:	695b      	ldr	r3, [r3, #20]
 8007374:	687a      	ldr	r2, [r7, #4]
 8007376:	7c12      	ldrb	r2, [r2, #16]
 8007378:	f107 0108 	add.w	r1, r7, #8
 800737c:	4610      	mov	r0, r2
 800737e:	4798      	blx	r3
 8007380:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 8007382:	e029      	b.n	80073d8 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 8007384:	6839      	ldr	r1, [r7, #0]
 8007386:	6878      	ldr	r0, [r7, #4]
 8007388:	f000 fa2c 	bl	80077e4 <USBD_CtlError>
            err++;
 800738c:	7afb      	ldrb	r3, [r7, #11]
 800738e:	3301      	adds	r3, #1
 8007390:	72fb      	strb	r3, [r7, #11]
          break;
 8007392:	e021      	b.n	80073d8 <USBD_GetDescriptor+0x214>

        case USBD_IDX_INTERFACE_STR:
          if (pdev->pDesc->GetInterfaceStrDescriptor != NULL)
 8007394:	687b      	ldr	r3, [r7, #4]
 8007396:	f8d3 32b0 	ldr.w	r3, [r3, #688]	; 0x2b0
 800739a:	699b      	ldr	r3, [r3, #24]
 800739c:	2b00      	cmp	r3, #0
 800739e:	d00b      	beq.n	80073b8 <USBD_GetDescriptor+0x1f4>
          {
            pbuf = pdev->pDesc->GetInterfaceStrDescriptor(pdev->dev_speed, &len);
 80073a0:	687b      	ldr	r3, [r7, #4]
 80073a2:	f8d3 32b0 	ldr.w	r3, [r3, #688]	; 0x2b0
 80073a6:	699b      	ldr	r3, [r3, #24]
 80073a8:	687a      	ldr	r2, [r7, #4]
 80073aa:	7c12      	ldrb	r2, [r2, #16]
 80073ac:	f107 0108 	add.w	r1, r7, #8
 80073b0:	4610      	mov	r0, r2
 80073b2:	4798      	blx	r3
 80073b4:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 80073b6:	e00f      	b.n	80073d8 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 80073b8:	6839      	ldr	r1, [r7, #0]
 80073ba:	6878      	ldr	r0, [r7, #4]
 80073bc:	f000 fa12 	bl	80077e4 <USBD_CtlError>
            err++;
 80073c0:	7afb      	ldrb	r3, [r7, #11]
 80073c2:	3301      	adds	r3, #1
 80073c4:	72fb      	strb	r3, [r7, #11]
          break;
 80073c6:	e007      	b.n	80073d8 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
#else
          USBD_CtlError(pdev, req);
 80073c8:	6839      	ldr	r1, [r7, #0]
 80073ca:	6878      	ldr	r0, [r7, #4]
 80073cc:	f000 fa0a 	bl	80077e4 <USBD_CtlError>
          err++;
 80073d0:	7afb      	ldrb	r3, [r7, #11]
 80073d2:	3301      	adds	r3, #1
 80073d4:	72fb      	strb	r3, [r7, #11]
#endif
      }
      break;
 80073d6:	e038      	b.n	800744a <USBD_GetDescriptor+0x286>
 80073d8:	e037      	b.n	800744a <USBD_GetDescriptor+0x286>

    case USB_DESC_TYPE_DEVICE_QUALIFIER:
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 80073da:	687b      	ldr	r3, [r7, #4]
 80073dc:	7c1b      	ldrb	r3, [r3, #16]
 80073de:	2b00      	cmp	r3, #0
 80073e0:	d109      	bne.n	80073f6 <USBD_GetDescriptor+0x232>
      {
        pbuf = pdev->pClass->GetDeviceQualifierDescriptor(&len);
 80073e2:	687b      	ldr	r3, [r7, #4]
 80073e4:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 80073e8:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80073ea:	f107 0208 	add.w	r2, r7, #8
 80073ee:	4610      	mov	r0, r2
 80073f0:	4798      	blx	r3
 80073f2:	60f8      	str	r0, [r7, #12]
      else
      {
        USBD_CtlError(pdev, req);
        err++;
      }
      break;
 80073f4:	e029      	b.n	800744a <USBD_GetDescriptor+0x286>
        USBD_CtlError(pdev, req);
 80073f6:	6839      	ldr	r1, [r7, #0]
 80073f8:	6878      	ldr	r0, [r7, #4]
 80073fa:	f000 f9f3 	bl	80077e4 <USBD_CtlError>
        err++;
 80073fe:	7afb      	ldrb	r3, [r7, #11]
 8007400:	3301      	adds	r3, #1
 8007402:	72fb      	strb	r3, [r7, #11]
      break;
 8007404:	e021      	b.n	800744a <USBD_GetDescriptor+0x286>

    case USB_DESC_TYPE_OTHER_SPEED_CONFIGURATION:
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 8007406:	687b      	ldr	r3, [r7, #4]
 8007408:	7c1b      	ldrb	r3, [r3, #16]
 800740a:	2b00      	cmp	r3, #0
 800740c:	d10d      	bne.n	800742a <USBD_GetDescriptor+0x266>
      {
        pbuf = pdev->pClass->GetOtherSpeedConfigDescriptor(&len);
 800740e:	687b      	ldr	r3, [r7, #4]
 8007410:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8007414:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8007416:	f107 0208 	add.w	r2, r7, #8
 800741a:	4610      	mov	r0, r2
 800741c:	4798      	blx	r3
 800741e:	60f8      	str	r0, [r7, #12]
        pbuf[1] = USB_DESC_TYPE_OTHER_SPEED_CONFIGURATION;
 8007420:	68fb      	ldr	r3, [r7, #12]
 8007422:	3301      	adds	r3, #1
 8007424:	2207      	movs	r2, #7
 8007426:	701a      	strb	r2, [r3, #0]
      else
      {
        USBD_CtlError(pdev, req);
        err++;
      }
      break;
 8007428:	e00f      	b.n	800744a <USBD_GetDescriptor+0x286>
        USBD_CtlError(pdev, req);
 800742a:	6839      	ldr	r1, [r7, #0]
 800742c:	6878      	ldr	r0, [r7, #4]
 800742e:	f000 f9d9 	bl	80077e4 <USBD_CtlError>
        err++;
 8007432:	7afb      	ldrb	r3, [r7, #11]
 8007434:	3301      	adds	r3, #1
 8007436:	72fb      	strb	r3, [r7, #11]
      break;
 8007438:	e007      	b.n	800744a <USBD_GetDescriptor+0x286>

    default:
      USBD_CtlError(pdev, req);
 800743a:	6839      	ldr	r1, [r7, #0]
 800743c:	6878      	ldr	r0, [r7, #4]
 800743e:	f000 f9d1 	bl	80077e4 <USBD_CtlError>
      err++;
 8007442:	7afb      	ldrb	r3, [r7, #11]
 8007444:	3301      	adds	r3, #1
 8007446:	72fb      	strb	r3, [r7, #11]
      break;
 8007448:	bf00      	nop
  }

  if (err != 0U)
 800744a:	7afb      	ldrb	r3, [r7, #11]
 800744c:	2b00      	cmp	r3, #0
 800744e:	d11c      	bne.n	800748a <USBD_GetDescriptor+0x2c6>
  {
    return;
  }
  else
  {
    if ((len != 0U) && (req->wLength != 0U))
 8007450:	893b      	ldrh	r3, [r7, #8]
 8007452:	2b00      	cmp	r3, #0
 8007454:	d011      	beq.n	800747a <USBD_GetDescriptor+0x2b6>
 8007456:	683b      	ldr	r3, [r7, #0]
 8007458:	88db      	ldrh	r3, [r3, #6]
 800745a:	2b00      	cmp	r3, #0
 800745c:	d00d      	beq.n	800747a <USBD_GetDescriptor+0x2b6>
    {
      len = MIN(len, req->wLength);
 800745e:	683b      	ldr	r3, [r7, #0]
 8007460:	88da      	ldrh	r2, [r3, #6]
 8007462:	893b      	ldrh	r3, [r7, #8]
 8007464:	4293      	cmp	r3, r2
 8007466:	bf28      	it	cs
 8007468:	4613      	movcs	r3, r2
 800746a:	b29b      	uxth	r3, r3
 800746c:	813b      	strh	r3, [r7, #8]
      (void)USBD_CtlSendData(pdev, pbuf, len);
 800746e:	893b      	ldrh	r3, [r7, #8]
 8007470:	461a      	mov	r2, r3
 8007472:	68f9      	ldr	r1, [r7, #12]
 8007474:	6878      	ldr	r0, [r7, #4]
 8007476:	f000 fa1f 	bl	80078b8 <USBD_CtlSendData>
    }

    if (req->wLength == 0U)
 800747a:	683b      	ldr	r3, [r7, #0]
 800747c:	88db      	ldrh	r3, [r3, #6]
 800747e:	2b00      	cmp	r3, #0
 8007480:	d104      	bne.n	800748c <USBD_GetDescriptor+0x2c8>
    {
      (void)USBD_CtlSendStatus(pdev);
 8007482:	6878      	ldr	r0, [r7, #4]
 8007484:	f000 fa76 	bl	8007974 <USBD_CtlSendStatus>
 8007488:	e000      	b.n	800748c <USBD_GetDescriptor+0x2c8>
    return;
 800748a:	bf00      	nop
    }
  }
}
 800748c:	3710      	adds	r7, #16
 800748e:	46bd      	mov	sp, r7
 8007490:	bd80      	pop	{r7, pc}
 8007492:	bf00      	nop

08007494 <USBD_SetAddress>:
* @param  req: usb request
* @retval status
*/
static void USBD_SetAddress(USBD_HandleTypeDef *pdev,
                            USBD_SetupReqTypedef *req)
{
 8007494:	b580      	push	{r7, lr}
 8007496:	b084      	sub	sp, #16
 8007498:	af00      	add	r7, sp, #0
 800749a:	6078      	str	r0, [r7, #4]
 800749c:	6039      	str	r1, [r7, #0]
  uint8_t  dev_addr;

  if ((req->wIndex == 0U) && (req->wLength == 0U) && (req->wValue < 128U))
 800749e:	683b      	ldr	r3, [r7, #0]
 80074a0:	889b      	ldrh	r3, [r3, #4]
 80074a2:	2b00      	cmp	r3, #0
 80074a4:	d130      	bne.n	8007508 <USBD_SetAddress+0x74>
 80074a6:	683b      	ldr	r3, [r7, #0]
 80074a8:	88db      	ldrh	r3, [r3, #6]
 80074aa:	2b00      	cmp	r3, #0
 80074ac:	d12c      	bne.n	8007508 <USBD_SetAddress+0x74>
 80074ae:	683b      	ldr	r3, [r7, #0]
 80074b0:	885b      	ldrh	r3, [r3, #2]
 80074b2:	2b7f      	cmp	r3, #127	; 0x7f
 80074b4:	d828      	bhi.n	8007508 <USBD_SetAddress+0x74>
  {
    dev_addr = (uint8_t)(req->wValue) & 0x7FU;
 80074b6:	683b      	ldr	r3, [r7, #0]
 80074b8:	885b      	ldrh	r3, [r3, #2]
 80074ba:	b2db      	uxtb	r3, r3
 80074bc:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 80074c0:	73fb      	strb	r3, [r7, #15]

    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 80074c2:	687b      	ldr	r3, [r7, #4]
 80074c4:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 80074c8:	2b03      	cmp	r3, #3
 80074ca:	d104      	bne.n	80074d6 <USBD_SetAddress+0x42>
    {
      USBD_CtlError(pdev, req);
 80074cc:	6839      	ldr	r1, [r7, #0]
 80074ce:	6878      	ldr	r0, [r7, #4]
 80074d0:	f000 f988 	bl	80077e4 <USBD_CtlError>
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 80074d4:	e01c      	b.n	8007510 <USBD_SetAddress+0x7c>
    }
    else
    {
      pdev->dev_address = dev_addr;
 80074d6:	687b      	ldr	r3, [r7, #4]
 80074d8:	7bfa      	ldrb	r2, [r7, #15]
 80074da:	f883 229e 	strb.w	r2, [r3, #670]	; 0x29e
      USBD_LL_SetUSBAddress(pdev, dev_addr);
 80074de:	7bfb      	ldrb	r3, [r7, #15]
 80074e0:	4619      	mov	r1, r3
 80074e2:	6878      	ldr	r0, [r7, #4]
 80074e4:	f000 fe8a 	bl	80081fc <USBD_LL_SetUSBAddress>
      USBD_CtlSendStatus(pdev);
 80074e8:	6878      	ldr	r0, [r7, #4]
 80074ea:	f000 fa43 	bl	8007974 <USBD_CtlSendStatus>

      if (dev_addr != 0U)
 80074ee:	7bfb      	ldrb	r3, [r7, #15]
 80074f0:	2b00      	cmp	r3, #0
 80074f2:	d004      	beq.n	80074fe <USBD_SetAddress+0x6a>
      {
        pdev->dev_state = USBD_STATE_ADDRESSED;
 80074f4:	687b      	ldr	r3, [r7, #4]
 80074f6:	2202      	movs	r2, #2
 80074f8:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 80074fc:	e008      	b.n	8007510 <USBD_SetAddress+0x7c>
      }
      else
      {
        pdev->dev_state = USBD_STATE_DEFAULT;
 80074fe:	687b      	ldr	r3, [r7, #4]
 8007500:	2201      	movs	r2, #1
 8007502:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8007506:	e003      	b.n	8007510 <USBD_SetAddress+0x7c>
      }
    }
  }
  else
  {
    USBD_CtlError(pdev, req);
 8007508:	6839      	ldr	r1, [r7, #0]
 800750a:	6878      	ldr	r0, [r7, #4]
 800750c:	f000 f96a 	bl	80077e4 <USBD_CtlError>
  }
}
 8007510:	bf00      	nop
 8007512:	3710      	adds	r7, #16
 8007514:	46bd      	mov	sp, r7
 8007516:	bd80      	pop	{r7, pc}

08007518 <USBD_SetConfig>:
* @param  pdev: device instance
* @param  req: usb request
* @retval status
*/
static void USBD_SetConfig(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8007518:	b580      	push	{r7, lr}
 800751a:	b082      	sub	sp, #8
 800751c:	af00      	add	r7, sp, #0
 800751e:	6078      	str	r0, [r7, #4]
 8007520:	6039      	str	r1, [r7, #0]
  static uint8_t cfgidx;

  cfgidx = (uint8_t)(req->wValue);
 8007522:	683b      	ldr	r3, [r7, #0]
 8007524:	885b      	ldrh	r3, [r3, #2]
 8007526:	b2da      	uxtb	r2, r3
 8007528:	4b41      	ldr	r3, [pc, #260]	; (8007630 <USBD_SetConfig+0x118>)
 800752a:	701a      	strb	r2, [r3, #0]

  if (cfgidx > USBD_MAX_NUM_CONFIGURATION)
 800752c:	4b40      	ldr	r3, [pc, #256]	; (8007630 <USBD_SetConfig+0x118>)
 800752e:	781b      	ldrb	r3, [r3, #0]
 8007530:	2b01      	cmp	r3, #1
 8007532:	d904      	bls.n	800753e <USBD_SetConfig+0x26>
  {
    USBD_CtlError(pdev, req);
 8007534:	6839      	ldr	r1, [r7, #0]
 8007536:	6878      	ldr	r0, [r7, #4]
 8007538:	f000 f954 	bl	80077e4 <USBD_CtlError>
 800753c:	e075      	b.n	800762a <USBD_SetConfig+0x112>
  }
  else
  {
    switch (pdev->dev_state)
 800753e:	687b      	ldr	r3, [r7, #4]
 8007540:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8007544:	2b02      	cmp	r3, #2
 8007546:	d002      	beq.n	800754e <USBD_SetConfig+0x36>
 8007548:	2b03      	cmp	r3, #3
 800754a:	d023      	beq.n	8007594 <USBD_SetConfig+0x7c>
 800754c:	e062      	b.n	8007614 <USBD_SetConfig+0xfc>
    {
      case USBD_STATE_ADDRESSED:
        if (cfgidx)
 800754e:	4b38      	ldr	r3, [pc, #224]	; (8007630 <USBD_SetConfig+0x118>)
 8007550:	781b      	ldrb	r3, [r3, #0]
 8007552:	2b00      	cmp	r3, #0
 8007554:	d01a      	beq.n	800758c <USBD_SetConfig+0x74>
        {
          pdev->dev_config = cfgidx;
 8007556:	4b36      	ldr	r3, [pc, #216]	; (8007630 <USBD_SetConfig+0x118>)
 8007558:	781b      	ldrb	r3, [r3, #0]
 800755a:	461a      	mov	r2, r3
 800755c:	687b      	ldr	r3, [r7, #4]
 800755e:	605a      	str	r2, [r3, #4]
          pdev->dev_state = USBD_STATE_CONFIGURED;
 8007560:	687b      	ldr	r3, [r7, #4]
 8007562:	2203      	movs	r2, #3
 8007564:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
          if (USBD_SetClassConfig(pdev, cfgidx) == USBD_FAIL)
 8007568:	4b31      	ldr	r3, [pc, #196]	; (8007630 <USBD_SetConfig+0x118>)
 800756a:	781b      	ldrb	r3, [r3, #0]
 800756c:	4619      	mov	r1, r3
 800756e:	6878      	ldr	r0, [r7, #4]
 8007570:	f7ff f9f3 	bl	800695a <USBD_SetClassConfig>
 8007574:	4603      	mov	r3, r0
 8007576:	2b02      	cmp	r3, #2
 8007578:	d104      	bne.n	8007584 <USBD_SetConfig+0x6c>
          {
            USBD_CtlError(pdev, req);
 800757a:	6839      	ldr	r1, [r7, #0]
 800757c:	6878      	ldr	r0, [r7, #4]
 800757e:	f000 f931 	bl	80077e4 <USBD_CtlError>
            return;
 8007582:	e052      	b.n	800762a <USBD_SetConfig+0x112>
          }
          USBD_CtlSendStatus(pdev);
 8007584:	6878      	ldr	r0, [r7, #4]
 8007586:	f000 f9f5 	bl	8007974 <USBD_CtlSendStatus>
        }
        else
        {
          USBD_CtlSendStatus(pdev);
        }
        break;
 800758a:	e04e      	b.n	800762a <USBD_SetConfig+0x112>
          USBD_CtlSendStatus(pdev);
 800758c:	6878      	ldr	r0, [r7, #4]
 800758e:	f000 f9f1 	bl	8007974 <USBD_CtlSendStatus>
        break;
 8007592:	e04a      	b.n	800762a <USBD_SetConfig+0x112>

      case USBD_STATE_CONFIGURED:
        if (cfgidx == 0U)
 8007594:	4b26      	ldr	r3, [pc, #152]	; (8007630 <USBD_SetConfig+0x118>)
 8007596:	781b      	ldrb	r3, [r3, #0]
 8007598:	2b00      	cmp	r3, #0
 800759a:	d112      	bne.n	80075c2 <USBD_SetConfig+0xaa>
        {
          pdev->dev_state = USBD_STATE_ADDRESSED;
 800759c:	687b      	ldr	r3, [r7, #4]
 800759e:	2202      	movs	r2, #2
 80075a0:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
          pdev->dev_config = cfgidx;
 80075a4:	4b22      	ldr	r3, [pc, #136]	; (8007630 <USBD_SetConfig+0x118>)
 80075a6:	781b      	ldrb	r3, [r3, #0]
 80075a8:	461a      	mov	r2, r3
 80075aa:	687b      	ldr	r3, [r7, #4]
 80075ac:	605a      	str	r2, [r3, #4]
          USBD_ClrClassConfig(pdev, cfgidx);
 80075ae:	4b20      	ldr	r3, [pc, #128]	; (8007630 <USBD_SetConfig+0x118>)
 80075b0:	781b      	ldrb	r3, [r3, #0]
 80075b2:	4619      	mov	r1, r3
 80075b4:	6878      	ldr	r0, [r7, #4]
 80075b6:	f7ff f9ef 	bl	8006998 <USBD_ClrClassConfig>
          USBD_CtlSendStatus(pdev);
 80075ba:	6878      	ldr	r0, [r7, #4]
 80075bc:	f000 f9da 	bl	8007974 <USBD_CtlSendStatus>
        }
        else
        {
          USBD_CtlSendStatus(pdev);
        }
        break;
 80075c0:	e033      	b.n	800762a <USBD_SetConfig+0x112>
        else if (cfgidx != pdev->dev_config)
 80075c2:	4b1b      	ldr	r3, [pc, #108]	; (8007630 <USBD_SetConfig+0x118>)
 80075c4:	781b      	ldrb	r3, [r3, #0]
 80075c6:	461a      	mov	r2, r3
 80075c8:	687b      	ldr	r3, [r7, #4]
 80075ca:	685b      	ldr	r3, [r3, #4]
 80075cc:	429a      	cmp	r2, r3
 80075ce:	d01d      	beq.n	800760c <USBD_SetConfig+0xf4>
          USBD_ClrClassConfig(pdev, (uint8_t)pdev->dev_config);
 80075d0:	687b      	ldr	r3, [r7, #4]
 80075d2:	685b      	ldr	r3, [r3, #4]
 80075d4:	b2db      	uxtb	r3, r3
 80075d6:	4619      	mov	r1, r3
 80075d8:	6878      	ldr	r0, [r7, #4]
 80075da:	f7ff f9dd 	bl	8006998 <USBD_ClrClassConfig>
          pdev->dev_config = cfgidx;
 80075de:	4b14      	ldr	r3, [pc, #80]	; (8007630 <USBD_SetConfig+0x118>)
 80075e0:	781b      	ldrb	r3, [r3, #0]
 80075e2:	461a      	mov	r2, r3
 80075e4:	687b      	ldr	r3, [r7, #4]
 80075e6:	605a      	str	r2, [r3, #4]
          if (USBD_SetClassConfig(pdev, cfgidx) == USBD_FAIL)
 80075e8:	4b11      	ldr	r3, [pc, #68]	; (8007630 <USBD_SetConfig+0x118>)
 80075ea:	781b      	ldrb	r3, [r3, #0]
 80075ec:	4619      	mov	r1, r3
 80075ee:	6878      	ldr	r0, [r7, #4]
 80075f0:	f7ff f9b3 	bl	800695a <USBD_SetClassConfig>
 80075f4:	4603      	mov	r3, r0
 80075f6:	2b02      	cmp	r3, #2
 80075f8:	d104      	bne.n	8007604 <USBD_SetConfig+0xec>
            USBD_CtlError(pdev, req);
 80075fa:	6839      	ldr	r1, [r7, #0]
 80075fc:	6878      	ldr	r0, [r7, #4]
 80075fe:	f000 f8f1 	bl	80077e4 <USBD_CtlError>
            return;
 8007602:	e012      	b.n	800762a <USBD_SetConfig+0x112>
          USBD_CtlSendStatus(pdev);
 8007604:	6878      	ldr	r0, [r7, #4]
 8007606:	f000 f9b5 	bl	8007974 <USBD_CtlSendStatus>
        break;
 800760a:	e00e      	b.n	800762a <USBD_SetConfig+0x112>
          USBD_CtlSendStatus(pdev);
 800760c:	6878      	ldr	r0, [r7, #4]
 800760e:	f000 f9b1 	bl	8007974 <USBD_CtlSendStatus>
        break;
 8007612:	e00a      	b.n	800762a <USBD_SetConfig+0x112>

      default:
        USBD_CtlError(pdev, req);
 8007614:	6839      	ldr	r1, [r7, #0]
 8007616:	6878      	ldr	r0, [r7, #4]
 8007618:	f000 f8e4 	bl	80077e4 <USBD_CtlError>
        USBD_ClrClassConfig(pdev, cfgidx);
 800761c:	4b04      	ldr	r3, [pc, #16]	; (8007630 <USBD_SetConfig+0x118>)
 800761e:	781b      	ldrb	r3, [r3, #0]
 8007620:	4619      	mov	r1, r3
 8007622:	6878      	ldr	r0, [r7, #4]
 8007624:	f7ff f9b8 	bl	8006998 <USBD_ClrClassConfig>
        break;
 8007628:	bf00      	nop
    }
  }
}
 800762a:	3708      	adds	r7, #8
 800762c:	46bd      	mov	sp, r7
 800762e:	bd80      	pop	{r7, pc}
 8007630:	200001c4 	.word	0x200001c4

08007634 <USBD_GetConfig>:
* @param  pdev: device instance
* @param  req: usb request
* @retval status
*/
static void USBD_GetConfig(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8007634:	b580      	push	{r7, lr}
 8007636:	b082      	sub	sp, #8
 8007638:	af00      	add	r7, sp, #0
 800763a:	6078      	str	r0, [r7, #4]
 800763c:	6039      	str	r1, [r7, #0]
  if (req->wLength != 1U)
 800763e:	683b      	ldr	r3, [r7, #0]
 8007640:	88db      	ldrh	r3, [r3, #6]
 8007642:	2b01      	cmp	r3, #1
 8007644:	d004      	beq.n	8007650 <USBD_GetConfig+0x1c>
  {
    USBD_CtlError(pdev, req);
 8007646:	6839      	ldr	r1, [r7, #0]
 8007648:	6878      	ldr	r0, [r7, #4]
 800764a:	f000 f8cb 	bl	80077e4 <USBD_CtlError>
      default:
        USBD_CtlError(pdev, req);
        break;
    }
  }
}
 800764e:	e021      	b.n	8007694 <USBD_GetConfig+0x60>
    switch (pdev->dev_state)
 8007650:	687b      	ldr	r3, [r7, #4]
 8007652:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8007656:	2b01      	cmp	r3, #1
 8007658:	db17      	blt.n	800768a <USBD_GetConfig+0x56>
 800765a:	2b02      	cmp	r3, #2
 800765c:	dd02      	ble.n	8007664 <USBD_GetConfig+0x30>
 800765e:	2b03      	cmp	r3, #3
 8007660:	d00b      	beq.n	800767a <USBD_GetConfig+0x46>
 8007662:	e012      	b.n	800768a <USBD_GetConfig+0x56>
        pdev->dev_default_config = 0U;
 8007664:	687b      	ldr	r3, [r7, #4]
 8007666:	2200      	movs	r2, #0
 8007668:	609a      	str	r2, [r3, #8]
        USBD_CtlSendData(pdev, (uint8_t *)(void *)&pdev->dev_default_config, 1U);
 800766a:	687b      	ldr	r3, [r7, #4]
 800766c:	3308      	adds	r3, #8
 800766e:	2201      	movs	r2, #1
 8007670:	4619      	mov	r1, r3
 8007672:	6878      	ldr	r0, [r7, #4]
 8007674:	f000 f920 	bl	80078b8 <USBD_CtlSendData>
        break;
 8007678:	e00c      	b.n	8007694 <USBD_GetConfig+0x60>
        USBD_CtlSendData(pdev, (uint8_t *)(void *)&pdev->dev_config, 1U);
 800767a:	687b      	ldr	r3, [r7, #4]
 800767c:	3304      	adds	r3, #4
 800767e:	2201      	movs	r2, #1
 8007680:	4619      	mov	r1, r3
 8007682:	6878      	ldr	r0, [r7, #4]
 8007684:	f000 f918 	bl	80078b8 <USBD_CtlSendData>
        break;
 8007688:	e004      	b.n	8007694 <USBD_GetConfig+0x60>
        USBD_CtlError(pdev, req);
 800768a:	6839      	ldr	r1, [r7, #0]
 800768c:	6878      	ldr	r0, [r7, #4]
 800768e:	f000 f8a9 	bl	80077e4 <USBD_CtlError>
        break;
 8007692:	bf00      	nop
}
 8007694:	bf00      	nop
 8007696:	3708      	adds	r7, #8
 8007698:	46bd      	mov	sp, r7
 800769a:	bd80      	pop	{r7, pc}

0800769c <USBD_GetStatus>:
* @param  pdev: device instance
* @param  req: usb request
* @retval status
*/
static void USBD_GetStatus(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800769c:	b580      	push	{r7, lr}
 800769e:	b082      	sub	sp, #8
 80076a0:	af00      	add	r7, sp, #0
 80076a2:	6078      	str	r0, [r7, #4]
 80076a4:	6039      	str	r1, [r7, #0]
  switch (pdev->dev_state)
 80076a6:	687b      	ldr	r3, [r7, #4]
 80076a8:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 80076ac:	3b01      	subs	r3, #1
 80076ae:	2b02      	cmp	r3, #2
 80076b0:	d81e      	bhi.n	80076f0 <USBD_GetStatus+0x54>
  {
    case USBD_STATE_DEFAULT:
    case USBD_STATE_ADDRESSED:
    case USBD_STATE_CONFIGURED:
      if (req->wLength != 0x2U)
 80076b2:	683b      	ldr	r3, [r7, #0]
 80076b4:	88db      	ldrh	r3, [r3, #6]
 80076b6:	2b02      	cmp	r3, #2
 80076b8:	d004      	beq.n	80076c4 <USBD_GetStatus+0x28>
      {
        USBD_CtlError(pdev, req);
 80076ba:	6839      	ldr	r1, [r7, #0]
 80076bc:	6878      	ldr	r0, [r7, #4]
 80076be:	f000 f891 	bl	80077e4 <USBD_CtlError>
        break;
 80076c2:	e01a      	b.n	80076fa <USBD_GetStatus+0x5e>
      }

#if (USBD_SELF_POWERED == 1U)
      pdev->dev_config_status = USB_CONFIG_SELF_POWERED;
 80076c4:	687b      	ldr	r3, [r7, #4]
 80076c6:	2201      	movs	r2, #1
 80076c8:	60da      	str	r2, [r3, #12]
#else
      pdev->dev_config_status = 0U;
#endif

      if (pdev->dev_remote_wakeup)
 80076ca:	687b      	ldr	r3, [r7, #4]
 80076cc:	f8d3 32a4 	ldr.w	r3, [r3, #676]	; 0x2a4
 80076d0:	2b00      	cmp	r3, #0
 80076d2:	d005      	beq.n	80076e0 <USBD_GetStatus+0x44>
      {
        pdev->dev_config_status |= USB_CONFIG_REMOTE_WAKEUP;
 80076d4:	687b      	ldr	r3, [r7, #4]
 80076d6:	68db      	ldr	r3, [r3, #12]
 80076d8:	f043 0202 	orr.w	r2, r3, #2
 80076dc:	687b      	ldr	r3, [r7, #4]
 80076de:	60da      	str	r2, [r3, #12]
      }

      USBD_CtlSendData(pdev, (uint8_t *)(void *)&pdev->dev_config_status, 2U);
 80076e0:	687b      	ldr	r3, [r7, #4]
 80076e2:	330c      	adds	r3, #12
 80076e4:	2202      	movs	r2, #2
 80076e6:	4619      	mov	r1, r3
 80076e8:	6878      	ldr	r0, [r7, #4]
 80076ea:	f000 f8e5 	bl	80078b8 <USBD_CtlSendData>
      break;
 80076ee:	e004      	b.n	80076fa <USBD_GetStatus+0x5e>

    default:
      USBD_CtlError(pdev, req);
 80076f0:	6839      	ldr	r1, [r7, #0]
 80076f2:	6878      	ldr	r0, [r7, #4]
 80076f4:	f000 f876 	bl	80077e4 <USBD_CtlError>
      break;
 80076f8:	bf00      	nop
  }
}
 80076fa:	bf00      	nop
 80076fc:	3708      	adds	r7, #8
 80076fe:	46bd      	mov	sp, r7
 8007700:	bd80      	pop	{r7, pc}

08007702 <USBD_SetFeature>:
* @param  req: usb request
* @retval status
*/
static void USBD_SetFeature(USBD_HandleTypeDef *pdev,
                            USBD_SetupReqTypedef *req)
{
 8007702:	b580      	push	{r7, lr}
 8007704:	b082      	sub	sp, #8
 8007706:	af00      	add	r7, sp, #0
 8007708:	6078      	str	r0, [r7, #4]
 800770a:	6039      	str	r1, [r7, #0]
  if (req->wValue == USB_FEATURE_REMOTE_WAKEUP)
 800770c:	683b      	ldr	r3, [r7, #0]
 800770e:	885b      	ldrh	r3, [r3, #2]
 8007710:	2b01      	cmp	r3, #1
 8007712:	d106      	bne.n	8007722 <USBD_SetFeature+0x20>
  {
    pdev->dev_remote_wakeup = 1U;
 8007714:	687b      	ldr	r3, [r7, #4]
 8007716:	2201      	movs	r2, #1
 8007718:	f8c3 22a4 	str.w	r2, [r3, #676]	; 0x2a4
    USBD_CtlSendStatus(pdev);
 800771c:	6878      	ldr	r0, [r7, #4]
 800771e:	f000 f929 	bl	8007974 <USBD_CtlSendStatus>
  }
}
 8007722:	bf00      	nop
 8007724:	3708      	adds	r7, #8
 8007726:	46bd      	mov	sp, r7
 8007728:	bd80      	pop	{r7, pc}

0800772a <USBD_ClrFeature>:
* @param  req: usb request
* @retval status
*/
static void USBD_ClrFeature(USBD_HandleTypeDef *pdev,
                            USBD_SetupReqTypedef *req)
{
 800772a:	b580      	push	{r7, lr}
 800772c:	b082      	sub	sp, #8
 800772e:	af00      	add	r7, sp, #0
 8007730:	6078      	str	r0, [r7, #4]
 8007732:	6039      	str	r1, [r7, #0]
  switch (pdev->dev_state)
 8007734:	687b      	ldr	r3, [r7, #4]
 8007736:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800773a:	3b01      	subs	r3, #1
 800773c:	2b02      	cmp	r3, #2
 800773e:	d80b      	bhi.n	8007758 <USBD_ClrFeature+0x2e>
  {
    case USBD_STATE_DEFAULT:
    case USBD_STATE_ADDRESSED:
    case USBD_STATE_CONFIGURED:
      if (req->wValue == USB_FEATURE_REMOTE_WAKEUP)
 8007740:	683b      	ldr	r3, [r7, #0]
 8007742:	885b      	ldrh	r3, [r3, #2]
 8007744:	2b01      	cmp	r3, #1
 8007746:	d10c      	bne.n	8007762 <USBD_ClrFeature+0x38>
      {
        pdev->dev_remote_wakeup = 0U;
 8007748:	687b      	ldr	r3, [r7, #4]
 800774a:	2200      	movs	r2, #0
 800774c:	f8c3 22a4 	str.w	r2, [r3, #676]	; 0x2a4
        USBD_CtlSendStatus(pdev);
 8007750:	6878      	ldr	r0, [r7, #4]
 8007752:	f000 f90f 	bl	8007974 <USBD_CtlSendStatus>
      }
      break;
 8007756:	e004      	b.n	8007762 <USBD_ClrFeature+0x38>

    default:
      USBD_CtlError(pdev, req);
 8007758:	6839      	ldr	r1, [r7, #0]
 800775a:	6878      	ldr	r0, [r7, #4]
 800775c:	f000 f842 	bl	80077e4 <USBD_CtlError>
      break;
 8007760:	e000      	b.n	8007764 <USBD_ClrFeature+0x3a>
      break;
 8007762:	bf00      	nop
  }
}
 8007764:	bf00      	nop
 8007766:	3708      	adds	r7, #8
 8007768:	46bd      	mov	sp, r7
 800776a:	bd80      	pop	{r7, pc}

0800776c <USBD_ParseSetupRequest>:
* @param  req: usb request
* @retval None
*/

void USBD_ParseSetupRequest(USBD_SetupReqTypedef *req, uint8_t *pdata)
{
 800776c:	b480      	push	{r7}
 800776e:	b083      	sub	sp, #12
 8007770:	af00      	add	r7, sp, #0
 8007772:	6078      	str	r0, [r7, #4]
 8007774:	6039      	str	r1, [r7, #0]
  req->bmRequest = *(uint8_t *)(pdata);
 8007776:	683b      	ldr	r3, [r7, #0]
 8007778:	781a      	ldrb	r2, [r3, #0]
 800777a:	687b      	ldr	r3, [r7, #4]
 800777c:	701a      	strb	r2, [r3, #0]
  req->bRequest = *(uint8_t *)(pdata + 1U);
 800777e:	683b      	ldr	r3, [r7, #0]
 8007780:	785a      	ldrb	r2, [r3, #1]
 8007782:	687b      	ldr	r3, [r7, #4]
 8007784:	705a      	strb	r2, [r3, #1]
  req->wValue = SWAPBYTE(pdata + 2U);
 8007786:	683b      	ldr	r3, [r7, #0]
 8007788:	3302      	adds	r3, #2
 800778a:	781b      	ldrb	r3, [r3, #0]
 800778c:	b29a      	uxth	r2, r3
 800778e:	683b      	ldr	r3, [r7, #0]
 8007790:	3303      	adds	r3, #3
 8007792:	781b      	ldrb	r3, [r3, #0]
 8007794:	b29b      	uxth	r3, r3
 8007796:	021b      	lsls	r3, r3, #8
 8007798:	b29b      	uxth	r3, r3
 800779a:	4413      	add	r3, r2
 800779c:	b29a      	uxth	r2, r3
 800779e:	687b      	ldr	r3, [r7, #4]
 80077a0:	805a      	strh	r2, [r3, #2]
  req->wIndex = SWAPBYTE(pdata + 4U);
 80077a2:	683b      	ldr	r3, [r7, #0]
 80077a4:	3304      	adds	r3, #4
 80077a6:	781b      	ldrb	r3, [r3, #0]
 80077a8:	b29a      	uxth	r2, r3
 80077aa:	683b      	ldr	r3, [r7, #0]
 80077ac:	3305      	adds	r3, #5
 80077ae:	781b      	ldrb	r3, [r3, #0]
 80077b0:	b29b      	uxth	r3, r3
 80077b2:	021b      	lsls	r3, r3, #8
 80077b4:	b29b      	uxth	r3, r3
 80077b6:	4413      	add	r3, r2
 80077b8:	b29a      	uxth	r2, r3
 80077ba:	687b      	ldr	r3, [r7, #4]
 80077bc:	809a      	strh	r2, [r3, #4]
  req->wLength = SWAPBYTE(pdata + 6U);
 80077be:	683b      	ldr	r3, [r7, #0]
 80077c0:	3306      	adds	r3, #6
 80077c2:	781b      	ldrb	r3, [r3, #0]
 80077c4:	b29a      	uxth	r2, r3
 80077c6:	683b      	ldr	r3, [r7, #0]
 80077c8:	3307      	adds	r3, #7
 80077ca:	781b      	ldrb	r3, [r3, #0]
 80077cc:	b29b      	uxth	r3, r3
 80077ce:	021b      	lsls	r3, r3, #8
 80077d0:	b29b      	uxth	r3, r3
 80077d2:	4413      	add	r3, r2
 80077d4:	b29a      	uxth	r2, r3
 80077d6:	687b      	ldr	r3, [r7, #4]
 80077d8:	80da      	strh	r2, [r3, #6]

}
 80077da:	bf00      	nop
 80077dc:	370c      	adds	r7, #12
 80077de:	46bd      	mov	sp, r7
 80077e0:	bc80      	pop	{r7}
 80077e2:	4770      	bx	lr

080077e4 <USBD_CtlError>:
* @retval None
*/

void USBD_CtlError(USBD_HandleTypeDef *pdev,
                   USBD_SetupReqTypedef *req)
{
 80077e4:	b580      	push	{r7, lr}
 80077e6:	b082      	sub	sp, #8
 80077e8:	af00      	add	r7, sp, #0
 80077ea:	6078      	str	r0, [r7, #4]
 80077ec:	6039      	str	r1, [r7, #0]
  USBD_LL_StallEP(pdev, 0x80U);
 80077ee:	2180      	movs	r1, #128	; 0x80
 80077f0:	6878      	ldr	r0, [r7, #4]
 80077f2:	f000 fc99 	bl	8008128 <USBD_LL_StallEP>
  USBD_LL_StallEP(pdev, 0U);
 80077f6:	2100      	movs	r1, #0
 80077f8:	6878      	ldr	r0, [r7, #4]
 80077fa:	f000 fc95 	bl	8008128 <USBD_LL_StallEP>
}
 80077fe:	bf00      	nop
 8007800:	3708      	adds	r7, #8
 8007802:	46bd      	mov	sp, r7
 8007804:	bd80      	pop	{r7, pc}

08007806 <USBD_GetString>:
  * @param  unicode : Formatted string buffer (unicode)
  * @param  len : descriptor length
  * @retval None
  */
void USBD_GetString(uint8_t *desc, uint8_t *unicode, uint16_t *len)
{
 8007806:	b580      	push	{r7, lr}
 8007808:	b086      	sub	sp, #24
 800780a:	af00      	add	r7, sp, #0
 800780c:	60f8      	str	r0, [r7, #12]
 800780e:	60b9      	str	r1, [r7, #8]
 8007810:	607a      	str	r2, [r7, #4]
  uint8_t idx = 0U;
 8007812:	2300      	movs	r3, #0
 8007814:	75fb      	strb	r3, [r7, #23]

  if (desc != NULL)
 8007816:	68fb      	ldr	r3, [r7, #12]
 8007818:	2b00      	cmp	r3, #0
 800781a:	d032      	beq.n	8007882 <USBD_GetString+0x7c>
  {
    *len = (uint16_t)USBD_GetLen(desc) * 2U + 2U;
 800781c:	68f8      	ldr	r0, [r7, #12]
 800781e:	f000 f834 	bl	800788a <USBD_GetLen>
 8007822:	4603      	mov	r3, r0
 8007824:	3301      	adds	r3, #1
 8007826:	b29b      	uxth	r3, r3
 8007828:	005b      	lsls	r3, r3, #1
 800782a:	b29a      	uxth	r2, r3
 800782c:	687b      	ldr	r3, [r7, #4]
 800782e:	801a      	strh	r2, [r3, #0]
    unicode[idx++] = *(uint8_t *)(void *)len;
 8007830:	7dfb      	ldrb	r3, [r7, #23]
 8007832:	1c5a      	adds	r2, r3, #1
 8007834:	75fa      	strb	r2, [r7, #23]
 8007836:	461a      	mov	r2, r3
 8007838:	68bb      	ldr	r3, [r7, #8]
 800783a:	4413      	add	r3, r2
 800783c:	687a      	ldr	r2, [r7, #4]
 800783e:	7812      	ldrb	r2, [r2, #0]
 8007840:	701a      	strb	r2, [r3, #0]
    unicode[idx++] = USB_DESC_TYPE_STRING;
 8007842:	7dfb      	ldrb	r3, [r7, #23]
 8007844:	1c5a      	adds	r2, r3, #1
 8007846:	75fa      	strb	r2, [r7, #23]
 8007848:	461a      	mov	r2, r3
 800784a:	68bb      	ldr	r3, [r7, #8]
 800784c:	4413      	add	r3, r2
 800784e:	2203      	movs	r2, #3
 8007850:	701a      	strb	r2, [r3, #0]

    while (*desc != '\0')
 8007852:	e012      	b.n	800787a <USBD_GetString+0x74>
    {
      unicode[idx++] = *desc++;
 8007854:	68fb      	ldr	r3, [r7, #12]
 8007856:	1c5a      	adds	r2, r3, #1
 8007858:	60fa      	str	r2, [r7, #12]
 800785a:	7dfa      	ldrb	r2, [r7, #23]
 800785c:	1c51      	adds	r1, r2, #1
 800785e:	75f9      	strb	r1, [r7, #23]
 8007860:	4611      	mov	r1, r2
 8007862:	68ba      	ldr	r2, [r7, #8]
 8007864:	440a      	add	r2, r1
 8007866:	781b      	ldrb	r3, [r3, #0]
 8007868:	7013      	strb	r3, [r2, #0]
      unicode[idx++] =  0U;
 800786a:	7dfb      	ldrb	r3, [r7, #23]
 800786c:	1c5a      	adds	r2, r3, #1
 800786e:	75fa      	strb	r2, [r7, #23]
 8007870:	461a      	mov	r2, r3
 8007872:	68bb      	ldr	r3, [r7, #8]
 8007874:	4413      	add	r3, r2
 8007876:	2200      	movs	r2, #0
 8007878:	701a      	strb	r2, [r3, #0]
    while (*desc != '\0')
 800787a:	68fb      	ldr	r3, [r7, #12]
 800787c:	781b      	ldrb	r3, [r3, #0]
 800787e:	2b00      	cmp	r3, #0
 8007880:	d1e8      	bne.n	8007854 <USBD_GetString+0x4e>
    }
  }
}
 8007882:	bf00      	nop
 8007884:	3718      	adds	r7, #24
 8007886:	46bd      	mov	sp, r7
 8007888:	bd80      	pop	{r7, pc}

0800788a <USBD_GetLen>:
  *         return the string length
   * @param  buf : pointer to the ascii string buffer
  * @retval string length
  */
static uint8_t USBD_GetLen(uint8_t *buf)
{
 800788a:	b480      	push	{r7}
 800788c:	b085      	sub	sp, #20
 800788e:	af00      	add	r7, sp, #0
 8007890:	6078      	str	r0, [r7, #4]
  uint8_t  len = 0U;
 8007892:	2300      	movs	r3, #0
 8007894:	73fb      	strb	r3, [r7, #15]

  while (*buf != '\0')
 8007896:	e005      	b.n	80078a4 <USBD_GetLen+0x1a>
  {
    len++;
 8007898:	7bfb      	ldrb	r3, [r7, #15]
 800789a:	3301      	adds	r3, #1
 800789c:	73fb      	strb	r3, [r7, #15]
    buf++;
 800789e:	687b      	ldr	r3, [r7, #4]
 80078a0:	3301      	adds	r3, #1
 80078a2:	607b      	str	r3, [r7, #4]
  while (*buf != '\0')
 80078a4:	687b      	ldr	r3, [r7, #4]
 80078a6:	781b      	ldrb	r3, [r3, #0]
 80078a8:	2b00      	cmp	r3, #0
 80078aa:	d1f5      	bne.n	8007898 <USBD_GetLen+0xe>
  }

  return len;
 80078ac:	7bfb      	ldrb	r3, [r7, #15]
}
 80078ae:	4618      	mov	r0, r3
 80078b0:	3714      	adds	r7, #20
 80078b2:	46bd      	mov	sp, r7
 80078b4:	bc80      	pop	{r7}
 80078b6:	4770      	bx	lr

080078b8 <USBD_CtlSendData>:
* @param  len: length of data to be sent
* @retval status
*/
USBD_StatusTypeDef USBD_CtlSendData(USBD_HandleTypeDef *pdev,
                                    uint8_t *pbuf, uint16_t len)
{
 80078b8:	b580      	push	{r7, lr}
 80078ba:	b084      	sub	sp, #16
 80078bc:	af00      	add	r7, sp, #0
 80078be:	60f8      	str	r0, [r7, #12]
 80078c0:	60b9      	str	r1, [r7, #8]
 80078c2:	4613      	mov	r3, r2
 80078c4:	80fb      	strh	r3, [r7, #6]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_DATA_IN;
 80078c6:	68fb      	ldr	r3, [r7, #12]
 80078c8:	2202      	movs	r2, #2
 80078ca:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294
  pdev->ep_in[0].total_length = len;
 80078ce:	88fa      	ldrh	r2, [r7, #6]
 80078d0:	68fb      	ldr	r3, [r7, #12]
 80078d2:	61da      	str	r2, [r3, #28]
  pdev->ep_in[0].rem_length   = len;
 80078d4:	88fa      	ldrh	r2, [r7, #6]
 80078d6:	68fb      	ldr	r3, [r7, #12]
 80078d8:	621a      	str	r2, [r3, #32]

  /* Start the transfer */
  USBD_LL_Transmit(pdev, 0x00U, pbuf, len);
 80078da:	88fb      	ldrh	r3, [r7, #6]
 80078dc:	68ba      	ldr	r2, [r7, #8]
 80078de:	2100      	movs	r1, #0
 80078e0:	68f8      	ldr	r0, [r7, #12]
 80078e2:	f000 fcaa 	bl	800823a <USBD_LL_Transmit>

  return USBD_OK;
 80078e6:	2300      	movs	r3, #0
}
 80078e8:	4618      	mov	r0, r3
 80078ea:	3710      	adds	r7, #16
 80078ec:	46bd      	mov	sp, r7
 80078ee:	bd80      	pop	{r7, pc}

080078f0 <USBD_CtlContinueSendData>:
* @param  len: length of data to be sent
* @retval status
*/
USBD_StatusTypeDef USBD_CtlContinueSendData(USBD_HandleTypeDef *pdev,
                                            uint8_t *pbuf, uint16_t len)
{
 80078f0:	b580      	push	{r7, lr}
 80078f2:	b084      	sub	sp, #16
 80078f4:	af00      	add	r7, sp, #0
 80078f6:	60f8      	str	r0, [r7, #12]
 80078f8:	60b9      	str	r1, [r7, #8]
 80078fa:	4613      	mov	r3, r2
 80078fc:	80fb      	strh	r3, [r7, #6]
  /* Start the next transfer */
  USBD_LL_Transmit(pdev, 0x00U, pbuf, len);
 80078fe:	88fb      	ldrh	r3, [r7, #6]
 8007900:	68ba      	ldr	r2, [r7, #8]
 8007902:	2100      	movs	r1, #0
 8007904:	68f8      	ldr	r0, [r7, #12]
 8007906:	f000 fc98 	bl	800823a <USBD_LL_Transmit>

  return USBD_OK;
 800790a:	2300      	movs	r3, #0
}
 800790c:	4618      	mov	r0, r3
 800790e:	3710      	adds	r7, #16
 8007910:	46bd      	mov	sp, r7
 8007912:	bd80      	pop	{r7, pc}

08007914 <USBD_CtlPrepareRx>:
* @param  len: length of data to be received
* @retval status
*/
USBD_StatusTypeDef USBD_CtlPrepareRx(USBD_HandleTypeDef *pdev,
                                     uint8_t *pbuf, uint16_t len)
{
 8007914:	b580      	push	{r7, lr}
 8007916:	b084      	sub	sp, #16
 8007918:	af00      	add	r7, sp, #0
 800791a:	60f8      	str	r0, [r7, #12]
 800791c:	60b9      	str	r1, [r7, #8]
 800791e:	4613      	mov	r3, r2
 8007920:	80fb      	strh	r3, [r7, #6]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_DATA_OUT;
 8007922:	68fb      	ldr	r3, [r7, #12]
 8007924:	2203      	movs	r2, #3
 8007926:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294
  pdev->ep_out[0].total_length = len;
 800792a:	88fa      	ldrh	r2, [r7, #6]
 800792c:	68fb      	ldr	r3, [r7, #12]
 800792e:	f8c3 215c 	str.w	r2, [r3, #348]	; 0x15c
  pdev->ep_out[0].rem_length   = len;
 8007932:	88fa      	ldrh	r2, [r7, #6]
 8007934:	68fb      	ldr	r3, [r7, #12]
 8007936:	f8c3 2160 	str.w	r2, [r3, #352]	; 0x160

  /* Start the transfer */
  USBD_LL_PrepareReceive(pdev, 0U, pbuf, len);
 800793a:	88fb      	ldrh	r3, [r7, #6]
 800793c:	68ba      	ldr	r2, [r7, #8]
 800793e:	2100      	movs	r1, #0
 8007940:	68f8      	ldr	r0, [r7, #12]
 8007942:	f000 fc9d 	bl	8008280 <USBD_LL_PrepareReceive>

  return USBD_OK;
 8007946:	2300      	movs	r3, #0
}
 8007948:	4618      	mov	r0, r3
 800794a:	3710      	adds	r7, #16
 800794c:	46bd      	mov	sp, r7
 800794e:	bd80      	pop	{r7, pc}

08007950 <USBD_CtlContinueRx>:
* @param  len: length of data to be received
* @retval status
*/
USBD_StatusTypeDef USBD_CtlContinueRx(USBD_HandleTypeDef *pdev,
                                      uint8_t *pbuf, uint16_t len)
{
 8007950:	b580      	push	{r7, lr}
 8007952:	b084      	sub	sp, #16
 8007954:	af00      	add	r7, sp, #0
 8007956:	60f8      	str	r0, [r7, #12]
 8007958:	60b9      	str	r1, [r7, #8]
 800795a:	4613      	mov	r3, r2
 800795c:	80fb      	strh	r3, [r7, #6]
  USBD_LL_PrepareReceive(pdev, 0U, pbuf, len);
 800795e:	88fb      	ldrh	r3, [r7, #6]
 8007960:	68ba      	ldr	r2, [r7, #8]
 8007962:	2100      	movs	r1, #0
 8007964:	68f8      	ldr	r0, [r7, #12]
 8007966:	f000 fc8b 	bl	8008280 <USBD_LL_PrepareReceive>

  return USBD_OK;
 800796a:	2300      	movs	r3, #0
}
 800796c:	4618      	mov	r0, r3
 800796e:	3710      	adds	r7, #16
 8007970:	46bd      	mov	sp, r7
 8007972:	bd80      	pop	{r7, pc}

08007974 <USBD_CtlSendStatus>:
*         send zero lzngth packet on the ctl pipe
* @param  pdev: device instance
* @retval status
*/
USBD_StatusTypeDef USBD_CtlSendStatus(USBD_HandleTypeDef *pdev)
{
 8007974:	b580      	push	{r7, lr}
 8007976:	b082      	sub	sp, #8
 8007978:	af00      	add	r7, sp, #0
 800797a:	6078      	str	r0, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_STATUS_IN;
 800797c:	687b      	ldr	r3, [r7, #4]
 800797e:	2204      	movs	r2, #4
 8007980:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294

  /* Start the transfer */
  USBD_LL_Transmit(pdev, 0x00U, NULL, 0U);
 8007984:	2300      	movs	r3, #0
 8007986:	2200      	movs	r2, #0
 8007988:	2100      	movs	r1, #0
 800798a:	6878      	ldr	r0, [r7, #4]
 800798c:	f000 fc55 	bl	800823a <USBD_LL_Transmit>

  return USBD_OK;
 8007990:	2300      	movs	r3, #0
}
 8007992:	4618      	mov	r0, r3
 8007994:	3708      	adds	r7, #8
 8007996:	46bd      	mov	sp, r7
 8007998:	bd80      	pop	{r7, pc}

0800799a <USBD_CtlReceiveStatus>:
*         receive zero lzngth packet on the ctl pipe
* @param  pdev: device instance
* @retval status
*/
USBD_StatusTypeDef USBD_CtlReceiveStatus(USBD_HandleTypeDef *pdev)
{
 800799a:	b580      	push	{r7, lr}
 800799c:	b082      	sub	sp, #8
 800799e:	af00      	add	r7, sp, #0
 80079a0:	6078      	str	r0, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_STATUS_OUT;
 80079a2:	687b      	ldr	r3, [r7, #4]
 80079a4:	2205      	movs	r2, #5
 80079a6:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294

  /* Start the transfer */
  USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 80079aa:	2300      	movs	r3, #0
 80079ac:	2200      	movs	r2, #0
 80079ae:	2100      	movs	r1, #0
 80079b0:	6878      	ldr	r0, [r7, #4]
 80079b2:	f000 fc65 	bl	8008280 <USBD_LL_PrepareReceive>

  return USBD_OK;
 80079b6:	2300      	movs	r3, #0
}
 80079b8:	4618      	mov	r0, r3
 80079ba:	3708      	adds	r7, #8
 80079bc:	46bd      	mov	sp, r7
 80079be:	bd80      	pop	{r7, pc}

080079c0 <MX_USB_DEVICE_Init>:
/**
  * Init USB device Library, add supported class and start the library
  * @retval None
  */
void MX_USB_DEVICE_Init(void)
{
 80079c0:	b580      	push	{r7, lr}
 80079c2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USB_DEVICE_Init_PreTreatment */

  /* USER CODE END USB_DEVICE_Init_PreTreatment */

  /* Init Device Library, add supported class and start the library. */
  if (USBD_Init(&hUsbDeviceFS, &FS_Desc, DEVICE_FS) != USBD_OK)
 80079c4:	2200      	movs	r2, #0
 80079c6:	4912      	ldr	r1, [pc, #72]	; (8007a10 <MX_USB_DEVICE_Init+0x50>)
 80079c8:	4812      	ldr	r0, [pc, #72]	; (8007a14 <MX_USB_DEVICE_Init+0x54>)
 80079ca:	f7fe ff6c 	bl	80068a6 <USBD_Init>
 80079ce:	4603      	mov	r3, r0
 80079d0:	2b00      	cmp	r3, #0
 80079d2:	d001      	beq.n	80079d8 <MX_USB_DEVICE_Init+0x18>
  {
    Error_Handler();
 80079d4:	f7f8 fdea 	bl	80005ac <Error_Handler>
  }
  if (USBD_RegisterClass(&hUsbDeviceFS, &USBD_CDC) != USBD_OK)
 80079d8:	490f      	ldr	r1, [pc, #60]	; (8007a18 <MX_USB_DEVICE_Init+0x58>)
 80079da:	480e      	ldr	r0, [pc, #56]	; (8007a14 <MX_USB_DEVICE_Init+0x54>)
 80079dc:	f7fe ff8e 	bl	80068fc <USBD_RegisterClass>
 80079e0:	4603      	mov	r3, r0
 80079e2:	2b00      	cmp	r3, #0
 80079e4:	d001      	beq.n	80079ea <MX_USB_DEVICE_Init+0x2a>
  {
    Error_Handler();
 80079e6:	f7f8 fde1 	bl	80005ac <Error_Handler>
  }
  if (USBD_CDC_RegisterInterface(&hUsbDeviceFS, &USBD_Interface_fops_FS) != USBD_OK)
 80079ea:	490c      	ldr	r1, [pc, #48]	; (8007a1c <MX_USB_DEVICE_Init+0x5c>)
 80079ec:	4809      	ldr	r0, [pc, #36]	; (8007a14 <MX_USB_DEVICE_Init+0x54>)
 80079ee:	f7fe febf 	bl	8006770 <USBD_CDC_RegisterInterface>
 80079f2:	4603      	mov	r3, r0
 80079f4:	2b00      	cmp	r3, #0
 80079f6:	d001      	beq.n	80079fc <MX_USB_DEVICE_Init+0x3c>
  {
    Error_Handler();
 80079f8:	f7f8 fdd8 	bl	80005ac <Error_Handler>
  }
  if (USBD_Start(&hUsbDeviceFS) != USBD_OK)
 80079fc:	4805      	ldr	r0, [pc, #20]	; (8007a14 <MX_USB_DEVICE_Init+0x54>)
 80079fe:	f7fe ff96 	bl	800692e <USBD_Start>
 8007a02:	4603      	mov	r3, r0
 8007a04:	2b00      	cmp	r3, #0
 8007a06:	d001      	beq.n	8007a0c <MX_USB_DEVICE_Init+0x4c>
  {
    Error_Handler();
 8007a08:	f7f8 fdd0 	bl	80005ac <Error_Handler>
  }

  /* USER CODE BEGIN USB_DEVICE_Init_PostTreatment */

  /* USER CODE END USB_DEVICE_Init_PostTreatment */
}
 8007a0c:	bf00      	nop
 8007a0e:	bd80      	pop	{r7, pc}
 8007a10:	20000130 	.word	0x20000130
 8007a14:	20002bc8 	.word	0x20002bc8
 8007a18:	2000001c 	.word	0x2000001c
 8007a1c:	20000120 	.word	0x20000120

08007a20 <CDC_Init_FS>:
/**
  * @brief  Initializes the CDC media low layer over the FS USB IP
  * @retval USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_Init_FS(void)
{
 8007a20:	b580      	push	{r7, lr}
 8007a22:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN 3 */
  /* Set Application Buffers */
  USBD_CDC_SetTxBuffer(&hUsbDeviceFS, UserTxBufferFS, 0);
 8007a24:	2200      	movs	r2, #0
 8007a26:	4905      	ldr	r1, [pc, #20]	; (8007a3c <CDC_Init_FS+0x1c>)
 8007a28:	4805      	ldr	r0, [pc, #20]	; (8007a40 <CDC_Init_FS+0x20>)
 8007a2a:	f7fe feb7 	bl	800679c <USBD_CDC_SetTxBuffer>
  USBD_CDC_SetRxBuffer(&hUsbDeviceFS, UserRxBufferFS);
 8007a2e:	4905      	ldr	r1, [pc, #20]	; (8007a44 <CDC_Init_FS+0x24>)
 8007a30:	4803      	ldr	r0, [pc, #12]	; (8007a40 <CDC_Init_FS+0x20>)
 8007a32:	f7fe fecc 	bl	80067ce <USBD_CDC_SetRxBuffer>
  return (USBD_OK);
 8007a36:	2300      	movs	r3, #0
  /* USER CODE END 3 */
}
 8007a38:	4618      	mov	r0, r3
 8007a3a:	bd80      	pop	{r7, pc}
 8007a3c:	20003274 	.word	0x20003274
 8007a40:	20002bc8 	.word	0x20002bc8
 8007a44:	20002e8c 	.word	0x20002e8c

08007a48 <CDC_DeInit_FS>:
/**
  * @brief  DeInitializes the CDC media low layer
  * @retval USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_DeInit_FS(void)
{
 8007a48:	b480      	push	{r7}
 8007a4a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN 4 */
  return (USBD_OK);
 8007a4c:	2300      	movs	r3, #0
  /* USER CODE END 4 */
}
 8007a4e:	4618      	mov	r0, r3
 8007a50:	46bd      	mov	sp, r7
 8007a52:	bc80      	pop	{r7}
 8007a54:	4770      	bx	lr
	...

08007a58 <CDC_Control_FS>:
  * @param  pbuf: Buffer containing command data (request parameters)
  * @param  length: Number of data to be sent (in bytes)
  * @retval Result of the operation: USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_Control_FS(uint8_t cmd, uint8_t* pbuf, uint16_t length)
{
 8007a58:	b480      	push	{r7}
 8007a5a:	b083      	sub	sp, #12
 8007a5c:	af00      	add	r7, sp, #0
 8007a5e:	4603      	mov	r3, r0
 8007a60:	6039      	str	r1, [r7, #0]
 8007a62:	71fb      	strb	r3, [r7, #7]
 8007a64:	4613      	mov	r3, r2
 8007a66:	80bb      	strh	r3, [r7, #4]
  /* USER CODE BEGIN 5 */
  switch(cmd)
 8007a68:	79fb      	ldrb	r3, [r7, #7]
 8007a6a:	2b23      	cmp	r3, #35	; 0x23
 8007a6c:	d84a      	bhi.n	8007b04 <CDC_Control_FS+0xac>
 8007a6e:	a201      	add	r2, pc, #4	; (adr r2, 8007a74 <CDC_Control_FS+0x1c>)
 8007a70:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007a74:	08007b05 	.word	0x08007b05
 8007a78:	08007b05 	.word	0x08007b05
 8007a7c:	08007b05 	.word	0x08007b05
 8007a80:	08007b05 	.word	0x08007b05
 8007a84:	08007b05 	.word	0x08007b05
 8007a88:	08007b05 	.word	0x08007b05
 8007a8c:	08007b05 	.word	0x08007b05
 8007a90:	08007b05 	.word	0x08007b05
 8007a94:	08007b05 	.word	0x08007b05
 8007a98:	08007b05 	.word	0x08007b05
 8007a9c:	08007b05 	.word	0x08007b05
 8007aa0:	08007b05 	.word	0x08007b05
 8007aa4:	08007b05 	.word	0x08007b05
 8007aa8:	08007b05 	.word	0x08007b05
 8007aac:	08007b05 	.word	0x08007b05
 8007ab0:	08007b05 	.word	0x08007b05
 8007ab4:	08007b05 	.word	0x08007b05
 8007ab8:	08007b05 	.word	0x08007b05
 8007abc:	08007b05 	.word	0x08007b05
 8007ac0:	08007b05 	.word	0x08007b05
 8007ac4:	08007b05 	.word	0x08007b05
 8007ac8:	08007b05 	.word	0x08007b05
 8007acc:	08007b05 	.word	0x08007b05
 8007ad0:	08007b05 	.word	0x08007b05
 8007ad4:	08007b05 	.word	0x08007b05
 8007ad8:	08007b05 	.word	0x08007b05
 8007adc:	08007b05 	.word	0x08007b05
 8007ae0:	08007b05 	.word	0x08007b05
 8007ae4:	08007b05 	.word	0x08007b05
 8007ae8:	08007b05 	.word	0x08007b05
 8007aec:	08007b05 	.word	0x08007b05
 8007af0:	08007b05 	.word	0x08007b05
 8007af4:	08007b05 	.word	0x08007b05
 8007af8:	08007b05 	.word	0x08007b05
 8007afc:	08007b05 	.word	0x08007b05
 8007b00:	08007b05 	.word	0x08007b05
    case CDC_SEND_BREAK:

    break;

  default:
    break;
 8007b04:	bf00      	nop
  }

  return (USBD_OK);
 8007b06:	2300      	movs	r3, #0
  /* USER CODE END 5 */
}
 8007b08:	4618      	mov	r0, r3
 8007b0a:	370c      	adds	r7, #12
 8007b0c:	46bd      	mov	sp, r7
 8007b0e:	bc80      	pop	{r7}
 8007b10:	4770      	bx	lr
 8007b12:	bf00      	nop

08007b14 <CDC_Receive_FS>:
  * @param  Buf: Buffer of data to be received
  * @param  Len: Number of data received (in bytes)
  * @retval Result of the operation: USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_Receive_FS(uint8_t* Buf, uint32_t *Len)
{
 8007b14:	b580      	push	{r7, lr}
 8007b16:	b084      	sub	sp, #16
 8007b18:	af00      	add	r7, sp, #0
 8007b1a:	6078      	str	r0, [r7, #4]
 8007b1c:	6039      	str	r1, [r7, #0]
  /* USER CODE BEGIN 6 */
	uint32_t len=*Len;
 8007b1e:	683b      	ldr	r3, [r7, #0]
 8007b20:	681b      	ldr	r3, [r3, #0]
 8007b22:	60fb      	str	r3, [r7, #12]
	if (hUsbDeviceFS.dev_state != USBD_STATE_CONFIGURED)
 8007b24:	4b26      	ldr	r3, [pc, #152]	; (8007bc0 <CDC_Receive_FS+0xac>)
 8007b26:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8007b2a:	2b03      	cmp	r3, #3
 8007b2c:	d001      	beq.n	8007b32 <CDC_Receive_FS+0x1e>
	{
	   return USBD_FAIL;
 8007b2e:	2302      	movs	r3, #2
 8007b30:	e041      	b.n	8007bb6 <CDC_Receive_FS+0xa2>
	}

	if (((Buf == NULL) || (Len == NULL)) || (*Len <= 0))
 8007b32:	687b      	ldr	r3, [r7, #4]
 8007b34:	2b00      	cmp	r3, #0
 8007b36:	d006      	beq.n	8007b46 <CDC_Receive_FS+0x32>
 8007b38:	683b      	ldr	r3, [r7, #0]
 8007b3a:	2b00      	cmp	r3, #0
 8007b3c:	d003      	beq.n	8007b46 <CDC_Receive_FS+0x32>
 8007b3e:	683b      	ldr	r3, [r7, #0]
 8007b40:	681b      	ldr	r3, [r3, #0]
 8007b42:	2b00      	cmp	r3, #0
 8007b44:	d101      	bne.n	8007b4a <CDC_Receive_FS+0x36>
	{
	   return USBD_FAIL;
 8007b46:	2302      	movs	r3, #2
 8007b48:	e035      	b.n	8007bb6 <CDC_Receive_FS+0xa2>
	}

	/* Get data */
	uint8_t result = USBD_OK;
 8007b4a:	2300      	movs	r3, #0
 8007b4c:	72fb      	strb	r3, [r7, #11]
	    do
	    {
	        result = USBD_CDC_SetRxBuffer(&hUsbDeviceFS, &Buf[0]);
 8007b4e:	6879      	ldr	r1, [r7, #4]
 8007b50:	481b      	ldr	r0, [pc, #108]	; (8007bc0 <CDC_Receive_FS+0xac>)
 8007b52:	f7fe fe3c 	bl	80067ce <USBD_CDC_SetRxBuffer>
 8007b56:	4603      	mov	r3, r0
 8007b58:	72fb      	strb	r3, [r7, #11]
	    }
	    while(result != USBD_OK);
 8007b5a:	7afb      	ldrb	r3, [r7, #11]
 8007b5c:	2b00      	cmp	r3, #0
 8007b5e:	d1f6      	bne.n	8007b4e <CDC_Receive_FS+0x3a>

	    do
	    {
	       result = USBD_CDC_ReceivePacket(&hUsbDeviceFS);
 8007b60:	4817      	ldr	r0, [pc, #92]	; (8007bc0 <CDC_Receive_FS+0xac>)
 8007b62:	f7fe fe76 	bl	8006852 <USBD_CDC_ReceivePacket>
 8007b66:	4603      	mov	r3, r0
 8007b68:	72fb      	strb	r3, [r7, #11]
	    }
	    while(result != USBD_OK);
 8007b6a:	7afb      	ldrb	r3, [r7, #11]
 8007b6c:	2b00      	cmp	r3, #0
 8007b6e:	d1f7      	bne.n	8007b60 <CDC_Receive_FS+0x4c>

	// add data to FIFO
	    while (len--)
 8007b70:	e01b      	b.n	8007baa <CDC_Receive_FS+0x96>
	       if (FIFO_INCR(RX_FIFO.head)==RX_FIFO.tail)
 8007b72:	4b14      	ldr	r3, [pc, #80]	; (8007bc4 <CDC_Receive_FS+0xb0>)
 8007b74:	681b      	ldr	r3, [r3, #0]
 8007b76:	3301      	adds	r3, #1
 8007b78:	f003 021f 	and.w	r2, r3, #31
 8007b7c:	4b11      	ldr	r3, [pc, #68]	; (8007bc4 <CDC_Receive_FS+0xb0>)
 8007b7e:	685b      	ldr	r3, [r3, #4]
 8007b80:	429a      	cmp	r2, r3
 8007b82:	d101      	bne.n	8007b88 <CDC_Receive_FS+0x74>
	             return USBD_FAIL;  // overrun
 8007b84:	2302      	movs	r3, #2
 8007b86:	e016      	b.n	8007bb6 <CDC_Receive_FS+0xa2>
	       else
	        {
	        RX_FIFO.data[RX_FIFO.head]=*Buf++;
 8007b88:	687b      	ldr	r3, [r7, #4]
 8007b8a:	1c5a      	adds	r2, r3, #1
 8007b8c:	607a      	str	r2, [r7, #4]
 8007b8e:	4a0d      	ldr	r2, [pc, #52]	; (8007bc4 <CDC_Receive_FS+0xb0>)
 8007b90:	6812      	ldr	r2, [r2, #0]
 8007b92:	7819      	ldrb	r1, [r3, #0]
 8007b94:	4b0b      	ldr	r3, [pc, #44]	; (8007bc4 <CDC_Receive_FS+0xb0>)
 8007b96:	4413      	add	r3, r2
 8007b98:	460a      	mov	r2, r1
 8007b9a:	721a      	strb	r2, [r3, #8]
	       RX_FIFO.head=FIFO_INCR(RX_FIFO.head);
 8007b9c:	4b09      	ldr	r3, [pc, #36]	; (8007bc4 <CDC_Receive_FS+0xb0>)
 8007b9e:	681b      	ldr	r3, [r3, #0]
 8007ba0:	3301      	adds	r3, #1
 8007ba2:	f003 031f 	and.w	r3, r3, #31
 8007ba6:	4a07      	ldr	r2, [pc, #28]	; (8007bc4 <CDC_Receive_FS+0xb0>)
 8007ba8:	6013      	str	r3, [r2, #0]
	    while (len--)
 8007baa:	68fb      	ldr	r3, [r7, #12]
 8007bac:	1e5a      	subs	r2, r3, #1
 8007bae:	60fa      	str	r2, [r7, #12]
 8007bb0:	2b00      	cmp	r3, #0
 8007bb2:	d1de      	bne.n	8007b72 <CDC_Receive_FS+0x5e>
	       }
	   return (USBD_OK);
 8007bb4:	2300      	movs	r3, #0

//  USBD_CDC_SetRxBuffer(&hUsbDeviceFS, &Buf[0]);
//  USBD_CDC_ReceivePacket(&hUsbDeviceFS);
//  return (USBD_OK);
  /* USER CODE END 6 */
}
 8007bb6:	4618      	mov	r0, r3
 8007bb8:	3710      	adds	r7, #16
 8007bba:	46bd      	mov	sp, r7
 8007bbc:	bd80      	pop	{r7, pc}
 8007bbe:	bf00      	nop
 8007bc0:	20002bc8 	.word	0x20002bc8
 8007bc4:	2000019c 	.word	0x2000019c

08007bc8 <CDC_Transmit_FS>:
  * @param  Buf: Buffer of data to be sent
  * @param  Len: Number of data to be sent (in bytes)
  * @retval USBD_OK if all operations are OK else USBD_FAIL or USBD_BUSY
  */
uint8_t CDC_Transmit_FS(uint8_t* Buf, uint16_t Len)
{
 8007bc8:	b580      	push	{r7, lr}
 8007bca:	b084      	sub	sp, #16
 8007bcc:	af00      	add	r7, sp, #0
 8007bce:	6078      	str	r0, [r7, #4]
 8007bd0:	460b      	mov	r3, r1
 8007bd2:	807b      	strh	r3, [r7, #2]
  uint8_t result = USBD_OK;
 8007bd4:	2300      	movs	r3, #0
 8007bd6:	73fb      	strb	r3, [r7, #15]
  /* USER CODE BEGIN 7 */
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef*)hUsbDeviceFS.pClassData;
 8007bd8:	4b0d      	ldr	r3, [pc, #52]	; (8007c10 <CDC_Transmit_FS+0x48>)
 8007bda:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8007bde:	60bb      	str	r3, [r7, #8]
  if (hcdc->TxState != 0){
 8007be0:	68bb      	ldr	r3, [r7, #8]
 8007be2:	f8d3 3214 	ldr.w	r3, [r3, #532]	; 0x214
 8007be6:	2b00      	cmp	r3, #0
 8007be8:	d001      	beq.n	8007bee <CDC_Transmit_FS+0x26>
    return USBD_BUSY;
 8007bea:	2301      	movs	r3, #1
 8007bec:	e00b      	b.n	8007c06 <CDC_Transmit_FS+0x3e>
  }
  USBD_CDC_SetTxBuffer(&hUsbDeviceFS, Buf, Len);
 8007bee:	887b      	ldrh	r3, [r7, #2]
 8007bf0:	461a      	mov	r2, r3
 8007bf2:	6879      	ldr	r1, [r7, #4]
 8007bf4:	4806      	ldr	r0, [pc, #24]	; (8007c10 <CDC_Transmit_FS+0x48>)
 8007bf6:	f7fe fdd1 	bl	800679c <USBD_CDC_SetTxBuffer>
  result = USBD_CDC_TransmitPacket(&hUsbDeviceFS);
 8007bfa:	4805      	ldr	r0, [pc, #20]	; (8007c10 <CDC_Transmit_FS+0x48>)
 8007bfc:	f7fe fdfa 	bl	80067f4 <USBD_CDC_TransmitPacket>
 8007c00:	4603      	mov	r3, r0
 8007c02:	73fb      	strb	r3, [r7, #15]
  /* USER CODE END 7 */
  return result;
 8007c04:	7bfb      	ldrb	r3, [r7, #15]
}
 8007c06:	4618      	mov	r0, r3
 8007c08:	3710      	adds	r7, #16
 8007c0a:	46bd      	mov	sp, r7
 8007c0c:	bd80      	pop	{r7, pc}
 8007c0e:	bf00      	nop
 8007c10:	20002bc8 	.word	0x20002bc8

08007c14 <USBD_FS_DeviceDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_DeviceDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8007c14:	b480      	push	{r7}
 8007c16:	b083      	sub	sp, #12
 8007c18:	af00      	add	r7, sp, #0
 8007c1a:	4603      	mov	r3, r0
 8007c1c:	6039      	str	r1, [r7, #0]
 8007c1e:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = sizeof(USBD_FS_DeviceDesc);
 8007c20:	683b      	ldr	r3, [r7, #0]
 8007c22:	2212      	movs	r2, #18
 8007c24:	801a      	strh	r2, [r3, #0]
  return USBD_FS_DeviceDesc;
 8007c26:	4b03      	ldr	r3, [pc, #12]	; (8007c34 <USBD_FS_DeviceDescriptor+0x20>)
}
 8007c28:	4618      	mov	r0, r3
 8007c2a:	370c      	adds	r7, #12
 8007c2c:	46bd      	mov	sp, r7
 8007c2e:	bc80      	pop	{r7}
 8007c30:	4770      	bx	lr
 8007c32:	bf00      	nop
 8007c34:	2000014c 	.word	0x2000014c

08007c38 <USBD_FS_LangIDStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_LangIDStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8007c38:	b480      	push	{r7}
 8007c3a:	b083      	sub	sp, #12
 8007c3c:	af00      	add	r7, sp, #0
 8007c3e:	4603      	mov	r3, r0
 8007c40:	6039      	str	r1, [r7, #0]
 8007c42:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = sizeof(USBD_LangIDDesc);
 8007c44:	683b      	ldr	r3, [r7, #0]
 8007c46:	2204      	movs	r2, #4
 8007c48:	801a      	strh	r2, [r3, #0]
  return USBD_LangIDDesc;
 8007c4a:	4b03      	ldr	r3, [pc, #12]	; (8007c58 <USBD_FS_LangIDStrDescriptor+0x20>)
}
 8007c4c:	4618      	mov	r0, r3
 8007c4e:	370c      	adds	r7, #12
 8007c50:	46bd      	mov	sp, r7
 8007c52:	bc80      	pop	{r7}
 8007c54:	4770      	bx	lr
 8007c56:	bf00      	nop
 8007c58:	20000160 	.word	0x20000160

08007c5c <USBD_FS_ProductStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_ProductStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8007c5c:	b580      	push	{r7, lr}
 8007c5e:	b082      	sub	sp, #8
 8007c60:	af00      	add	r7, sp, #0
 8007c62:	4603      	mov	r3, r0
 8007c64:	6039      	str	r1, [r7, #0]
 8007c66:	71fb      	strb	r3, [r7, #7]
  if(speed == 0)
 8007c68:	79fb      	ldrb	r3, [r7, #7]
 8007c6a:	2b00      	cmp	r3, #0
 8007c6c:	d105      	bne.n	8007c7a <USBD_FS_ProductStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_PRODUCT_STRING_FS, USBD_StrDesc, length);
 8007c6e:	683a      	ldr	r2, [r7, #0]
 8007c70:	4907      	ldr	r1, [pc, #28]	; (8007c90 <USBD_FS_ProductStrDescriptor+0x34>)
 8007c72:	4808      	ldr	r0, [pc, #32]	; (8007c94 <USBD_FS_ProductStrDescriptor+0x38>)
 8007c74:	f7ff fdc7 	bl	8007806 <USBD_GetString>
 8007c78:	e004      	b.n	8007c84 <USBD_FS_ProductStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_PRODUCT_STRING_FS, USBD_StrDesc, length);
 8007c7a:	683a      	ldr	r2, [r7, #0]
 8007c7c:	4904      	ldr	r1, [pc, #16]	; (8007c90 <USBD_FS_ProductStrDescriptor+0x34>)
 8007c7e:	4805      	ldr	r0, [pc, #20]	; (8007c94 <USBD_FS_ProductStrDescriptor+0x38>)
 8007c80:	f7ff fdc1 	bl	8007806 <USBD_GetString>
  }
  return USBD_StrDesc;
 8007c84:	4b02      	ldr	r3, [pc, #8]	; (8007c90 <USBD_FS_ProductStrDescriptor+0x34>)
}
 8007c86:	4618      	mov	r0, r3
 8007c88:	3708      	adds	r7, #8
 8007c8a:	46bd      	mov	sp, r7
 8007c8c:	bd80      	pop	{r7, pc}
 8007c8e:	bf00      	nop
 8007c90:	2000365c 	.word	0x2000365c
 8007c94:	08008408 	.word	0x08008408

08007c98 <USBD_FS_ManufacturerStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_ManufacturerStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8007c98:	b580      	push	{r7, lr}
 8007c9a:	b082      	sub	sp, #8
 8007c9c:	af00      	add	r7, sp, #0
 8007c9e:	4603      	mov	r3, r0
 8007ca0:	6039      	str	r1, [r7, #0]
 8007ca2:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  USBD_GetString((uint8_t *)USBD_MANUFACTURER_STRING, USBD_StrDesc, length);
 8007ca4:	683a      	ldr	r2, [r7, #0]
 8007ca6:	4904      	ldr	r1, [pc, #16]	; (8007cb8 <USBD_FS_ManufacturerStrDescriptor+0x20>)
 8007ca8:	4804      	ldr	r0, [pc, #16]	; (8007cbc <USBD_FS_ManufacturerStrDescriptor+0x24>)
 8007caa:	f7ff fdac 	bl	8007806 <USBD_GetString>
  return USBD_StrDesc;
 8007cae:	4b02      	ldr	r3, [pc, #8]	; (8007cb8 <USBD_FS_ManufacturerStrDescriptor+0x20>)
}
 8007cb0:	4618      	mov	r0, r3
 8007cb2:	3708      	adds	r7, #8
 8007cb4:	46bd      	mov	sp, r7
 8007cb6:	bd80      	pop	{r7, pc}
 8007cb8:	2000365c 	.word	0x2000365c
 8007cbc:	08008420 	.word	0x08008420

08007cc0 <USBD_FS_SerialStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_SerialStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8007cc0:	b580      	push	{r7, lr}
 8007cc2:	b082      	sub	sp, #8
 8007cc4:	af00      	add	r7, sp, #0
 8007cc6:	4603      	mov	r3, r0
 8007cc8:	6039      	str	r1, [r7, #0]
 8007cca:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = USB_SIZ_STRING_SERIAL;
 8007ccc:	683b      	ldr	r3, [r7, #0]
 8007cce:	221a      	movs	r2, #26
 8007cd0:	801a      	strh	r2, [r3, #0]

  /* Update the serial number string descriptor with the data from the unique
   * ID */
  Get_SerialNum();
 8007cd2:	f000 f843 	bl	8007d5c <Get_SerialNum>
  /* USER CODE BEGIN USBD_FS_SerialStrDescriptor */

  /* USER CODE END USBD_FS_SerialStrDescriptor */
  return (uint8_t *) USBD_StringSerial;
 8007cd6:	4b02      	ldr	r3, [pc, #8]	; (8007ce0 <USBD_FS_SerialStrDescriptor+0x20>)
}
 8007cd8:	4618      	mov	r0, r3
 8007cda:	3708      	adds	r7, #8
 8007cdc:	46bd      	mov	sp, r7
 8007cde:	bd80      	pop	{r7, pc}
 8007ce0:	20000164 	.word	0x20000164

08007ce4 <USBD_FS_ConfigStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_ConfigStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8007ce4:	b580      	push	{r7, lr}
 8007ce6:	b082      	sub	sp, #8
 8007ce8:	af00      	add	r7, sp, #0
 8007cea:	4603      	mov	r3, r0
 8007cec:	6039      	str	r1, [r7, #0]
 8007cee:	71fb      	strb	r3, [r7, #7]
  if(speed == USBD_SPEED_HIGH)
 8007cf0:	79fb      	ldrb	r3, [r7, #7]
 8007cf2:	2b00      	cmp	r3, #0
 8007cf4:	d105      	bne.n	8007d02 <USBD_FS_ConfigStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_CONFIGURATION_STRING_FS, USBD_StrDesc, length);
 8007cf6:	683a      	ldr	r2, [r7, #0]
 8007cf8:	4907      	ldr	r1, [pc, #28]	; (8007d18 <USBD_FS_ConfigStrDescriptor+0x34>)
 8007cfa:	4808      	ldr	r0, [pc, #32]	; (8007d1c <USBD_FS_ConfigStrDescriptor+0x38>)
 8007cfc:	f7ff fd83 	bl	8007806 <USBD_GetString>
 8007d00:	e004      	b.n	8007d0c <USBD_FS_ConfigStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_CONFIGURATION_STRING_FS, USBD_StrDesc, length);
 8007d02:	683a      	ldr	r2, [r7, #0]
 8007d04:	4904      	ldr	r1, [pc, #16]	; (8007d18 <USBD_FS_ConfigStrDescriptor+0x34>)
 8007d06:	4805      	ldr	r0, [pc, #20]	; (8007d1c <USBD_FS_ConfigStrDescriptor+0x38>)
 8007d08:	f7ff fd7d 	bl	8007806 <USBD_GetString>
  }
  return USBD_StrDesc;
 8007d0c:	4b02      	ldr	r3, [pc, #8]	; (8007d18 <USBD_FS_ConfigStrDescriptor+0x34>)
}
 8007d0e:	4618      	mov	r0, r3
 8007d10:	3708      	adds	r7, #8
 8007d12:	46bd      	mov	sp, r7
 8007d14:	bd80      	pop	{r7, pc}
 8007d16:	bf00      	nop
 8007d18:	2000365c 	.word	0x2000365c
 8007d1c:	08008434 	.word	0x08008434

08007d20 <USBD_FS_InterfaceStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_InterfaceStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8007d20:	b580      	push	{r7, lr}
 8007d22:	b082      	sub	sp, #8
 8007d24:	af00      	add	r7, sp, #0
 8007d26:	4603      	mov	r3, r0
 8007d28:	6039      	str	r1, [r7, #0]
 8007d2a:	71fb      	strb	r3, [r7, #7]
  if(speed == 0)
 8007d2c:	79fb      	ldrb	r3, [r7, #7]
 8007d2e:	2b00      	cmp	r3, #0
 8007d30:	d105      	bne.n	8007d3e <USBD_FS_InterfaceStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_INTERFACE_STRING_FS, USBD_StrDesc, length);
 8007d32:	683a      	ldr	r2, [r7, #0]
 8007d34:	4907      	ldr	r1, [pc, #28]	; (8007d54 <USBD_FS_InterfaceStrDescriptor+0x34>)
 8007d36:	4808      	ldr	r0, [pc, #32]	; (8007d58 <USBD_FS_InterfaceStrDescriptor+0x38>)
 8007d38:	f7ff fd65 	bl	8007806 <USBD_GetString>
 8007d3c:	e004      	b.n	8007d48 <USBD_FS_InterfaceStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_INTERFACE_STRING_FS, USBD_StrDesc, length);
 8007d3e:	683a      	ldr	r2, [r7, #0]
 8007d40:	4904      	ldr	r1, [pc, #16]	; (8007d54 <USBD_FS_InterfaceStrDescriptor+0x34>)
 8007d42:	4805      	ldr	r0, [pc, #20]	; (8007d58 <USBD_FS_InterfaceStrDescriptor+0x38>)
 8007d44:	f7ff fd5f 	bl	8007806 <USBD_GetString>
  }
  return USBD_StrDesc;
 8007d48:	4b02      	ldr	r3, [pc, #8]	; (8007d54 <USBD_FS_InterfaceStrDescriptor+0x34>)
}
 8007d4a:	4618      	mov	r0, r3
 8007d4c:	3708      	adds	r7, #8
 8007d4e:	46bd      	mov	sp, r7
 8007d50:	bd80      	pop	{r7, pc}
 8007d52:	bf00      	nop
 8007d54:	2000365c 	.word	0x2000365c
 8007d58:	08008440 	.word	0x08008440

08007d5c <Get_SerialNum>:
  * @brief  Create the serial number string descriptor
  * @param  None
  * @retval None
  */
static void Get_SerialNum(void)
{
 8007d5c:	b580      	push	{r7, lr}
 8007d5e:	b084      	sub	sp, #16
 8007d60:	af00      	add	r7, sp, #0
  uint32_t deviceserial0, deviceserial1, deviceserial2;

  deviceserial0 = *(uint32_t *) DEVICE_ID1;
 8007d62:	4b0f      	ldr	r3, [pc, #60]	; (8007da0 <Get_SerialNum+0x44>)
 8007d64:	681b      	ldr	r3, [r3, #0]
 8007d66:	60fb      	str	r3, [r7, #12]
  deviceserial1 = *(uint32_t *) DEVICE_ID2;
 8007d68:	4b0e      	ldr	r3, [pc, #56]	; (8007da4 <Get_SerialNum+0x48>)
 8007d6a:	681b      	ldr	r3, [r3, #0]
 8007d6c:	60bb      	str	r3, [r7, #8]
  deviceserial2 = *(uint32_t *) DEVICE_ID3;
 8007d6e:	4b0e      	ldr	r3, [pc, #56]	; (8007da8 <Get_SerialNum+0x4c>)
 8007d70:	681b      	ldr	r3, [r3, #0]
 8007d72:	607b      	str	r3, [r7, #4]

  deviceserial0 += deviceserial2;
 8007d74:	68fa      	ldr	r2, [r7, #12]
 8007d76:	687b      	ldr	r3, [r7, #4]
 8007d78:	4413      	add	r3, r2
 8007d7a:	60fb      	str	r3, [r7, #12]

  if (deviceserial0 != 0)
 8007d7c:	68fb      	ldr	r3, [r7, #12]
 8007d7e:	2b00      	cmp	r3, #0
 8007d80:	d009      	beq.n	8007d96 <Get_SerialNum+0x3a>
  {
    IntToUnicode(deviceserial0, &USBD_StringSerial[2], 8);
 8007d82:	2208      	movs	r2, #8
 8007d84:	4909      	ldr	r1, [pc, #36]	; (8007dac <Get_SerialNum+0x50>)
 8007d86:	68f8      	ldr	r0, [r7, #12]
 8007d88:	f000 f814 	bl	8007db4 <IntToUnicode>
    IntToUnicode(deviceserial1, &USBD_StringSerial[18], 4);
 8007d8c:	2204      	movs	r2, #4
 8007d8e:	4908      	ldr	r1, [pc, #32]	; (8007db0 <Get_SerialNum+0x54>)
 8007d90:	68b8      	ldr	r0, [r7, #8]
 8007d92:	f000 f80f 	bl	8007db4 <IntToUnicode>
  }
}
 8007d96:	bf00      	nop
 8007d98:	3710      	adds	r7, #16
 8007d9a:	46bd      	mov	sp, r7
 8007d9c:	bd80      	pop	{r7, pc}
 8007d9e:	bf00      	nop
 8007da0:	1ffff7e8 	.word	0x1ffff7e8
 8007da4:	1ffff7ec 	.word	0x1ffff7ec
 8007da8:	1ffff7f0 	.word	0x1ffff7f0
 8007dac:	20000166 	.word	0x20000166
 8007db0:	20000176 	.word	0x20000176

08007db4 <IntToUnicode>:
  * @param  pbuf: pointer to the buffer
  * @param  len: buffer length
  * @retval None
  */
static void IntToUnicode(uint32_t value, uint8_t * pbuf, uint8_t len)
{
 8007db4:	b480      	push	{r7}
 8007db6:	b087      	sub	sp, #28
 8007db8:	af00      	add	r7, sp, #0
 8007dba:	60f8      	str	r0, [r7, #12]
 8007dbc:	60b9      	str	r1, [r7, #8]
 8007dbe:	4613      	mov	r3, r2
 8007dc0:	71fb      	strb	r3, [r7, #7]
  uint8_t idx = 0;
 8007dc2:	2300      	movs	r3, #0
 8007dc4:	75fb      	strb	r3, [r7, #23]

  for (idx = 0; idx < len; idx++)
 8007dc6:	2300      	movs	r3, #0
 8007dc8:	75fb      	strb	r3, [r7, #23]
 8007dca:	e027      	b.n	8007e1c <IntToUnicode+0x68>
  {
    if (((value >> 28)) < 0xA)
 8007dcc:	68fb      	ldr	r3, [r7, #12]
 8007dce:	0f1b      	lsrs	r3, r3, #28
 8007dd0:	2b09      	cmp	r3, #9
 8007dd2:	d80b      	bhi.n	8007dec <IntToUnicode+0x38>
    {
      pbuf[2 * idx] = (value >> 28) + '0';
 8007dd4:	68fb      	ldr	r3, [r7, #12]
 8007dd6:	0f1b      	lsrs	r3, r3, #28
 8007dd8:	b2da      	uxtb	r2, r3
 8007dda:	7dfb      	ldrb	r3, [r7, #23]
 8007ddc:	005b      	lsls	r3, r3, #1
 8007dde:	4619      	mov	r1, r3
 8007de0:	68bb      	ldr	r3, [r7, #8]
 8007de2:	440b      	add	r3, r1
 8007de4:	3230      	adds	r2, #48	; 0x30
 8007de6:	b2d2      	uxtb	r2, r2
 8007de8:	701a      	strb	r2, [r3, #0]
 8007dea:	e00a      	b.n	8007e02 <IntToUnicode+0x4e>
    }
    else
    {
      pbuf[2 * idx] = (value >> 28) + 'A' - 10;
 8007dec:	68fb      	ldr	r3, [r7, #12]
 8007dee:	0f1b      	lsrs	r3, r3, #28
 8007df0:	b2da      	uxtb	r2, r3
 8007df2:	7dfb      	ldrb	r3, [r7, #23]
 8007df4:	005b      	lsls	r3, r3, #1
 8007df6:	4619      	mov	r1, r3
 8007df8:	68bb      	ldr	r3, [r7, #8]
 8007dfa:	440b      	add	r3, r1
 8007dfc:	3237      	adds	r2, #55	; 0x37
 8007dfe:	b2d2      	uxtb	r2, r2
 8007e00:	701a      	strb	r2, [r3, #0]
    }

    value = value << 4;
 8007e02:	68fb      	ldr	r3, [r7, #12]
 8007e04:	011b      	lsls	r3, r3, #4
 8007e06:	60fb      	str	r3, [r7, #12]

    pbuf[2 * idx + 1] = 0;
 8007e08:	7dfb      	ldrb	r3, [r7, #23]
 8007e0a:	005b      	lsls	r3, r3, #1
 8007e0c:	3301      	adds	r3, #1
 8007e0e:	68ba      	ldr	r2, [r7, #8]
 8007e10:	4413      	add	r3, r2
 8007e12:	2200      	movs	r2, #0
 8007e14:	701a      	strb	r2, [r3, #0]
  for (idx = 0; idx < len; idx++)
 8007e16:	7dfb      	ldrb	r3, [r7, #23]
 8007e18:	3301      	adds	r3, #1
 8007e1a:	75fb      	strb	r3, [r7, #23]
 8007e1c:	7dfa      	ldrb	r2, [r7, #23]
 8007e1e:	79fb      	ldrb	r3, [r7, #7]
 8007e20:	429a      	cmp	r2, r3
 8007e22:	d3d3      	bcc.n	8007dcc <IntToUnicode+0x18>
  }
}
 8007e24:	bf00      	nop
 8007e26:	371c      	adds	r7, #28
 8007e28:	46bd      	mov	sp, r7
 8007e2a:	bc80      	pop	{r7}
 8007e2c:	4770      	bx	lr
	...

08007e30 <HAL_PCD_MspInit>:
                       LL Driver Callbacks (PCD -> USB Device Library)
*******************************************************************************/
/* MSP Init */

void HAL_PCD_MspInit(PCD_HandleTypeDef* pcdHandle)
{
 8007e30:	b580      	push	{r7, lr}
 8007e32:	b084      	sub	sp, #16
 8007e34:	af00      	add	r7, sp, #0
 8007e36:	6078      	str	r0, [r7, #4]
  if(pcdHandle->Instance==USB)
 8007e38:	687b      	ldr	r3, [r7, #4]
 8007e3a:	681b      	ldr	r3, [r3, #0]
 8007e3c:	4a0d      	ldr	r2, [pc, #52]	; (8007e74 <HAL_PCD_MspInit+0x44>)
 8007e3e:	4293      	cmp	r3, r2
 8007e40:	d113      	bne.n	8007e6a <HAL_PCD_MspInit+0x3a>
  {
  /* USER CODE BEGIN USB_MspInit 0 */

  /* USER CODE END USB_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USB_CLK_ENABLE();
 8007e42:	4b0d      	ldr	r3, [pc, #52]	; (8007e78 <HAL_PCD_MspInit+0x48>)
 8007e44:	69db      	ldr	r3, [r3, #28]
 8007e46:	4a0c      	ldr	r2, [pc, #48]	; (8007e78 <HAL_PCD_MspInit+0x48>)
 8007e48:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 8007e4c:	61d3      	str	r3, [r2, #28]
 8007e4e:	4b0a      	ldr	r3, [pc, #40]	; (8007e78 <HAL_PCD_MspInit+0x48>)
 8007e50:	69db      	ldr	r3, [r3, #28]
 8007e52:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8007e56:	60fb      	str	r3, [r7, #12]
 8007e58:	68fb      	ldr	r3, [r7, #12]

    /* Peripheral interrupt init */
    HAL_NVIC_SetPriority(USB_LP_CAN1_RX0_IRQn, 0, 0);
 8007e5a:	2200      	movs	r2, #0
 8007e5c:	2100      	movs	r1, #0
 8007e5e:	2014      	movs	r0, #20
 8007e60:	f7f9 f9cd 	bl	80011fe <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USB_LP_CAN1_RX0_IRQn);
 8007e64:	2014      	movs	r0, #20
 8007e66:	f7f9 f9e6 	bl	8001236 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USB_MspInit 1 */

  /* USER CODE END USB_MspInit 1 */
  }
}
 8007e6a:	bf00      	nop
 8007e6c:	3710      	adds	r7, #16
 8007e6e:	46bd      	mov	sp, r7
 8007e70:	bd80      	pop	{r7, pc}
 8007e72:	bf00      	nop
 8007e74:	40005c00 	.word	0x40005c00
 8007e78:	40021000 	.word	0x40021000

08007e7c <HAL_PCD_SetupStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SetupStageCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SetupStageCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8007e7c:	b580      	push	{r7, lr}
 8007e7e:	b082      	sub	sp, #8
 8007e80:	af00      	add	r7, sp, #0
 8007e82:	6078      	str	r0, [r7, #4]
  USBD_LL_SetupStage((USBD_HandleTypeDef*)hpcd->pData, (uint8_t *)hpcd->Setup);
 8007e84:	687b      	ldr	r3, [r7, #4]
 8007e86:	f8d3 22e8 	ldr.w	r2, [r3, #744]	; 0x2e8
 8007e8a:	687b      	ldr	r3, [r7, #4]
 8007e8c:	f503 732c 	add.w	r3, r3, #688	; 0x2b0
 8007e90:	4619      	mov	r1, r3
 8007e92:	4610      	mov	r0, r2
 8007e94:	f7fe fd93 	bl	80069be <USBD_LL_SetupStage>
}
 8007e98:	bf00      	nop
 8007e9a:	3708      	adds	r7, #8
 8007e9c:	46bd      	mov	sp, r7
 8007e9e:	bd80      	pop	{r7, pc}

08007ea0 <HAL_PCD_DataOutStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_DataOutStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_DataOutStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8007ea0:	b580      	push	{r7, lr}
 8007ea2:	b082      	sub	sp, #8
 8007ea4:	af00      	add	r7, sp, #0
 8007ea6:	6078      	str	r0, [r7, #4]
 8007ea8:	460b      	mov	r3, r1
 8007eaa:	70fb      	strb	r3, [r7, #3]
  USBD_LL_DataOutStage((USBD_HandleTypeDef*)hpcd->pData, epnum, hpcd->OUT_ep[epnum].xfer_buff);
 8007eac:	687b      	ldr	r3, [r7, #4]
 8007eae:	f8d3 02e8 	ldr.w	r0, [r3, #744]	; 0x2e8
 8007eb2:	78fa      	ldrb	r2, [r7, #3]
 8007eb4:	6879      	ldr	r1, [r7, #4]
 8007eb6:	4613      	mov	r3, r2
 8007eb8:	009b      	lsls	r3, r3, #2
 8007eba:	4413      	add	r3, r2
 8007ebc:	00db      	lsls	r3, r3, #3
 8007ebe:	440b      	add	r3, r1
 8007ec0:	f503 73be 	add.w	r3, r3, #380	; 0x17c
 8007ec4:	681a      	ldr	r2, [r3, #0]
 8007ec6:	78fb      	ldrb	r3, [r7, #3]
 8007ec8:	4619      	mov	r1, r3
 8007eca:	f7fe fdc3 	bl	8006a54 <USBD_LL_DataOutStage>
}
 8007ece:	bf00      	nop
 8007ed0:	3708      	adds	r7, #8
 8007ed2:	46bd      	mov	sp, r7
 8007ed4:	bd80      	pop	{r7, pc}

08007ed6 <HAL_PCD_DataInStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_DataInStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_DataInStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8007ed6:	b580      	push	{r7, lr}
 8007ed8:	b082      	sub	sp, #8
 8007eda:	af00      	add	r7, sp, #0
 8007edc:	6078      	str	r0, [r7, #4]
 8007ede:	460b      	mov	r3, r1
 8007ee0:	70fb      	strb	r3, [r7, #3]
  USBD_LL_DataInStage((USBD_HandleTypeDef*)hpcd->pData, epnum, hpcd->IN_ep[epnum].xfer_buff);
 8007ee2:	687b      	ldr	r3, [r7, #4]
 8007ee4:	f8d3 02e8 	ldr.w	r0, [r3, #744]	; 0x2e8
 8007ee8:	78fa      	ldrb	r2, [r7, #3]
 8007eea:	6879      	ldr	r1, [r7, #4]
 8007eec:	4613      	mov	r3, r2
 8007eee:	009b      	lsls	r3, r3, #2
 8007ef0:	4413      	add	r3, r2
 8007ef2:	00db      	lsls	r3, r3, #3
 8007ef4:	440b      	add	r3, r1
 8007ef6:	333c      	adds	r3, #60	; 0x3c
 8007ef8:	681a      	ldr	r2, [r3, #0]
 8007efa:	78fb      	ldrb	r3, [r7, #3]
 8007efc:	4619      	mov	r1, r3
 8007efe:	f7fe fe1a 	bl	8006b36 <USBD_LL_DataInStage>
}
 8007f02:	bf00      	nop
 8007f04:	3708      	adds	r7, #8
 8007f06:	46bd      	mov	sp, r7
 8007f08:	bd80      	pop	{r7, pc}

08007f0a <HAL_PCD_SOFCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SOFCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SOFCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8007f0a:	b580      	push	{r7, lr}
 8007f0c:	b082      	sub	sp, #8
 8007f0e:	af00      	add	r7, sp, #0
 8007f10:	6078      	str	r0, [r7, #4]
  USBD_LL_SOF((USBD_HandleTypeDef*)hpcd->pData);
 8007f12:	687b      	ldr	r3, [r7, #4]
 8007f14:	f8d3 32e8 	ldr.w	r3, [r3, #744]	; 0x2e8
 8007f18:	4618      	mov	r0, r3
 8007f1a:	f7fe ff2a 	bl	8006d72 <USBD_LL_SOF>
}
 8007f1e:	bf00      	nop
 8007f20:	3708      	adds	r7, #8
 8007f22:	46bd      	mov	sp, r7
 8007f24:	bd80      	pop	{r7, pc}

08007f26 <HAL_PCD_ResetCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ResetCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_ResetCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8007f26:	b580      	push	{r7, lr}
 8007f28:	b084      	sub	sp, #16
 8007f2a:	af00      	add	r7, sp, #0
 8007f2c:	6078      	str	r0, [r7, #4]
  USBD_SpeedTypeDef speed = USBD_SPEED_FULL;
 8007f2e:	2301      	movs	r3, #1
 8007f30:	73fb      	strb	r3, [r7, #15]

  if ( hpcd->Init.speed != PCD_SPEED_FULL)
 8007f32:	687b      	ldr	r3, [r7, #4]
 8007f34:	689b      	ldr	r3, [r3, #8]
 8007f36:	2b02      	cmp	r3, #2
 8007f38:	d001      	beq.n	8007f3e <HAL_PCD_ResetCallback+0x18>
  {
    Error_Handler();
 8007f3a:	f7f8 fb37 	bl	80005ac <Error_Handler>
  }
    /* Set Speed. */
  USBD_LL_SetSpeed((USBD_HandleTypeDef*)hpcd->pData, speed);
 8007f3e:	687b      	ldr	r3, [r7, #4]
 8007f40:	f8d3 32e8 	ldr.w	r3, [r3, #744]	; 0x2e8
 8007f44:	7bfa      	ldrb	r2, [r7, #15]
 8007f46:	4611      	mov	r1, r2
 8007f48:	4618      	mov	r0, r3
 8007f4a:	f7fe feda 	bl	8006d02 <USBD_LL_SetSpeed>

  /* Reset Device. */
  USBD_LL_Reset((USBD_HandleTypeDef*)hpcd->pData);
 8007f4e:	687b      	ldr	r3, [r7, #4]
 8007f50:	f8d3 32e8 	ldr.w	r3, [r3, #744]	; 0x2e8
 8007f54:	4618      	mov	r0, r3
 8007f56:	f7fe fe93 	bl	8006c80 <USBD_LL_Reset>
}
 8007f5a:	bf00      	nop
 8007f5c:	3710      	adds	r7, #16
 8007f5e:	46bd      	mov	sp, r7
 8007f60:	bd80      	pop	{r7, pc}
	...

08007f64 <HAL_PCD_SuspendCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SuspendCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SuspendCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8007f64:	b580      	push	{r7, lr}
 8007f66:	b082      	sub	sp, #8
 8007f68:	af00      	add	r7, sp, #0
 8007f6a:	6078      	str	r0, [r7, #4]
  /* Inform USB library that core enters in suspend Mode. */
  USBD_LL_Suspend((USBD_HandleTypeDef*)hpcd->pData);
 8007f6c:	687b      	ldr	r3, [r7, #4]
 8007f6e:	f8d3 32e8 	ldr.w	r3, [r3, #744]	; 0x2e8
 8007f72:	4618      	mov	r0, r3
 8007f74:	f7fe fed4 	bl	8006d20 <USBD_LL_Suspend>
  /* Enter in STOP mode. */
  /* USER CODE BEGIN 2 */
  if (hpcd->Init.low_power_enable)
 8007f78:	687b      	ldr	r3, [r7, #4]
 8007f7a:	699b      	ldr	r3, [r3, #24]
 8007f7c:	2b00      	cmp	r3, #0
 8007f7e:	d005      	beq.n	8007f8c <HAL_PCD_SuspendCallback+0x28>
  {
    /* Set SLEEPDEEP bit and SleepOnExit of Cortex System Control Register. */
    SCB->SCR |= (uint32_t)((uint32_t)(SCB_SCR_SLEEPDEEP_Msk | SCB_SCR_SLEEPONEXIT_Msk));
 8007f80:	4b04      	ldr	r3, [pc, #16]	; (8007f94 <HAL_PCD_SuspendCallback+0x30>)
 8007f82:	691b      	ldr	r3, [r3, #16]
 8007f84:	4a03      	ldr	r2, [pc, #12]	; (8007f94 <HAL_PCD_SuspendCallback+0x30>)
 8007f86:	f043 0306 	orr.w	r3, r3, #6
 8007f8a:	6113      	str	r3, [r2, #16]
  }
  /* USER CODE END 2 */
}
 8007f8c:	bf00      	nop
 8007f8e:	3708      	adds	r7, #8
 8007f90:	46bd      	mov	sp, r7
 8007f92:	bd80      	pop	{r7, pc}
 8007f94:	e000ed00 	.word	0xe000ed00

08007f98 <HAL_PCD_ResumeCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ResumeCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_ResumeCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8007f98:	b580      	push	{r7, lr}
 8007f9a:	b082      	sub	sp, #8
 8007f9c:	af00      	add	r7, sp, #0
 8007f9e:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN 3 */

  /* USER CODE END 3 */
  USBD_LL_Resume((USBD_HandleTypeDef*)hpcd->pData);
 8007fa0:	687b      	ldr	r3, [r7, #4]
 8007fa2:	f8d3 32e8 	ldr.w	r3, [r3, #744]	; 0x2e8
 8007fa6:	4618      	mov	r0, r3
 8007fa8:	f7fe fece 	bl	8006d48 <USBD_LL_Resume>
}
 8007fac:	bf00      	nop
 8007fae:	3708      	adds	r7, #8
 8007fb0:	46bd      	mov	sp, r7
 8007fb2:	bd80      	pop	{r7, pc}

08007fb4 <USBD_LL_Init>:
  * @brief  Initializes the low level portion of the device driver.
  * @param  pdev: Device handle
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Init(USBD_HandleTypeDef *pdev)
{
 8007fb4:	b580      	push	{r7, lr}
 8007fb6:	b082      	sub	sp, #8
 8007fb8:	af00      	add	r7, sp, #0
 8007fba:	6078      	str	r0, [r7, #4]
  /* Init USB Ip. */
  /* Link the driver to the stack. */
  hpcd_USB_FS.pData = pdev;
 8007fbc:	4a28      	ldr	r2, [pc, #160]	; (8008060 <USBD_LL_Init+0xac>)
 8007fbe:	687b      	ldr	r3, [r7, #4]
 8007fc0:	f8c2 32e8 	str.w	r3, [r2, #744]	; 0x2e8
  pdev->pData = &hpcd_USB_FS;
 8007fc4:	687b      	ldr	r3, [r7, #4]
 8007fc6:	4a26      	ldr	r2, [pc, #152]	; (8008060 <USBD_LL_Init+0xac>)
 8007fc8:	f8c3 22c0 	str.w	r2, [r3, #704]	; 0x2c0

  hpcd_USB_FS.Instance = USB;
 8007fcc:	4b24      	ldr	r3, [pc, #144]	; (8008060 <USBD_LL_Init+0xac>)
 8007fce:	4a25      	ldr	r2, [pc, #148]	; (8008064 <USBD_LL_Init+0xb0>)
 8007fd0:	601a      	str	r2, [r3, #0]
  hpcd_USB_FS.Init.dev_endpoints = 8;
 8007fd2:	4b23      	ldr	r3, [pc, #140]	; (8008060 <USBD_LL_Init+0xac>)
 8007fd4:	2208      	movs	r2, #8
 8007fd6:	605a      	str	r2, [r3, #4]
  hpcd_USB_FS.Init.speed = PCD_SPEED_FULL;
 8007fd8:	4b21      	ldr	r3, [pc, #132]	; (8008060 <USBD_LL_Init+0xac>)
 8007fda:	2202      	movs	r2, #2
 8007fdc:	609a      	str	r2, [r3, #8]
  hpcd_USB_FS.Init.low_power_enable = DISABLE;
 8007fde:	4b20      	ldr	r3, [pc, #128]	; (8008060 <USBD_LL_Init+0xac>)
 8007fe0:	2200      	movs	r2, #0
 8007fe2:	619a      	str	r2, [r3, #24]
  hpcd_USB_FS.Init.lpm_enable = DISABLE;
 8007fe4:	4b1e      	ldr	r3, [pc, #120]	; (8008060 <USBD_LL_Init+0xac>)
 8007fe6:	2200      	movs	r2, #0
 8007fe8:	61da      	str	r2, [r3, #28]
  hpcd_USB_FS.Init.battery_charging_enable = DISABLE;
 8007fea:	4b1d      	ldr	r3, [pc, #116]	; (8008060 <USBD_LL_Init+0xac>)
 8007fec:	2200      	movs	r2, #0
 8007fee:	621a      	str	r2, [r3, #32]
  if (HAL_PCD_Init(&hpcd_USB_FS) != HAL_OK)
 8007ff0:	481b      	ldr	r0, [pc, #108]	; (8008060 <USBD_LL_Init+0xac>)
 8007ff2:	f7f9 fc9b 	bl	800192c <HAL_PCD_Init>
 8007ff6:	4603      	mov	r3, r0
 8007ff8:	2b00      	cmp	r3, #0
 8007ffa:	d001      	beq.n	8008000 <USBD_LL_Init+0x4c>
  {
    Error_Handler( );
 8007ffc:	f7f8 fad6 	bl	80005ac <Error_Handler>
  HAL_PCD_RegisterDataInStageCallback(&hpcd_USB_FS, PCD_DataInStageCallback);
  HAL_PCD_RegisterIsoOutIncpltCallback(&hpcd_USB_FS, PCD_ISOOUTIncompleteCallback);
  HAL_PCD_RegisterIsoInIncpltCallback(&hpcd_USB_FS, PCD_ISOINIncompleteCallback);
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
  /* USER CODE BEGIN EndPoint_Configuration */
  HAL_PCDEx_PMAConfig((PCD_HandleTypeDef*)pdev->pData , 0x00 , PCD_SNG_BUF, 0x18);
 8008000:	687b      	ldr	r3, [r7, #4]
 8008002:	f8d3 02c0 	ldr.w	r0, [r3, #704]	; 0x2c0
 8008006:	2318      	movs	r3, #24
 8008008:	2200      	movs	r2, #0
 800800a:	2100      	movs	r1, #0
 800800c:	f7fa ffcf 	bl	8002fae <HAL_PCDEx_PMAConfig>
  HAL_PCDEx_PMAConfig((PCD_HandleTypeDef*)pdev->pData , 0x80 , PCD_SNG_BUF, 0x58);
 8008010:	687b      	ldr	r3, [r7, #4]
 8008012:	f8d3 02c0 	ldr.w	r0, [r3, #704]	; 0x2c0
 8008016:	2358      	movs	r3, #88	; 0x58
 8008018:	2200      	movs	r2, #0
 800801a:	2180      	movs	r1, #128	; 0x80
 800801c:	f7fa ffc7 	bl	8002fae <HAL_PCDEx_PMAConfig>
  /* USER CODE END EndPoint_Configuration */
  /* USER CODE BEGIN EndPoint_Configuration_CDC */
  HAL_PCDEx_PMAConfig((PCD_HandleTypeDef*)pdev->pData , 0x81 , PCD_SNG_BUF, 0xC0);
 8008020:	687b      	ldr	r3, [r7, #4]
 8008022:	f8d3 02c0 	ldr.w	r0, [r3, #704]	; 0x2c0
 8008026:	23c0      	movs	r3, #192	; 0xc0
 8008028:	2200      	movs	r2, #0
 800802a:	2181      	movs	r1, #129	; 0x81
 800802c:	f7fa ffbf 	bl	8002fae <HAL_PCDEx_PMAConfig>
  HAL_PCDEx_PMAConfig((PCD_HandleTypeDef*)pdev->pData , 0x01 , PCD_SNG_BUF, 0x110);
 8008030:	687b      	ldr	r3, [r7, #4]
 8008032:	f8d3 02c0 	ldr.w	r0, [r3, #704]	; 0x2c0
 8008036:	f44f 7388 	mov.w	r3, #272	; 0x110
 800803a:	2200      	movs	r2, #0
 800803c:	2101      	movs	r1, #1
 800803e:	f7fa ffb6 	bl	8002fae <HAL_PCDEx_PMAConfig>
  HAL_PCDEx_PMAConfig((PCD_HandleTypeDef*)pdev->pData , 0x82 , PCD_SNG_BUF, 0x100);
 8008042:	687b      	ldr	r3, [r7, #4]
 8008044:	f8d3 02c0 	ldr.w	r0, [r3, #704]	; 0x2c0
 8008048:	f44f 7380 	mov.w	r3, #256	; 0x100
 800804c:	2200      	movs	r2, #0
 800804e:	2182      	movs	r1, #130	; 0x82
 8008050:	f7fa ffad 	bl	8002fae <HAL_PCDEx_PMAConfig>
  /* USER CODE END EndPoint_Configuration_CDC */
  return USBD_OK;
 8008054:	2300      	movs	r3, #0
}
 8008056:	4618      	mov	r0, r3
 8008058:	3708      	adds	r7, #8
 800805a:	46bd      	mov	sp, r7
 800805c:	bd80      	pop	{r7, pc}
 800805e:	bf00      	nop
 8008060:	2000385c 	.word	0x2000385c
 8008064:	40005c00 	.word	0x40005c00

08008068 <USBD_LL_Start>:
  * @brief  Starts the low level portion of the device driver.
  * @param  pdev: Device handle
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Start(USBD_HandleTypeDef *pdev)
{
 8008068:	b580      	push	{r7, lr}
 800806a:	b084      	sub	sp, #16
 800806c:	af00      	add	r7, sp, #0
 800806e:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8008070:	2300      	movs	r3, #0
 8008072:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8008074:	2300      	movs	r3, #0
 8008076:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_Start(pdev->pData);
 8008078:	687b      	ldr	r3, [r7, #4]
 800807a:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 800807e:	4618      	mov	r0, r3
 8008080:	f7f9 fd5f 	bl	8001b42 <HAL_PCD_Start>
 8008084:	4603      	mov	r3, r0
 8008086:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 8008088:	7bfb      	ldrb	r3, [r7, #15]
 800808a:	4618      	mov	r0, r3
 800808c:	f000 f94e 	bl	800832c <USBD_Get_USB_Status>
 8008090:	4603      	mov	r3, r0
 8008092:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 8008094:	7bbb      	ldrb	r3, [r7, #14]
}
 8008096:	4618      	mov	r0, r3
 8008098:	3710      	adds	r7, #16
 800809a:	46bd      	mov	sp, r7
 800809c:	bd80      	pop	{r7, pc}

0800809e <USBD_LL_OpenEP>:
  * @param  ep_type: Endpoint type
  * @param  ep_mps: Endpoint max packet size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_OpenEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t ep_type, uint16_t ep_mps)
{
 800809e:	b580      	push	{r7, lr}
 80080a0:	b084      	sub	sp, #16
 80080a2:	af00      	add	r7, sp, #0
 80080a4:	6078      	str	r0, [r7, #4]
 80080a6:	4608      	mov	r0, r1
 80080a8:	4611      	mov	r1, r2
 80080aa:	461a      	mov	r2, r3
 80080ac:	4603      	mov	r3, r0
 80080ae:	70fb      	strb	r3, [r7, #3]
 80080b0:	460b      	mov	r3, r1
 80080b2:	70bb      	strb	r3, [r7, #2]
 80080b4:	4613      	mov	r3, r2
 80080b6:	803b      	strh	r3, [r7, #0]
  HAL_StatusTypeDef hal_status = HAL_OK;
 80080b8:	2300      	movs	r3, #0
 80080ba:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 80080bc:	2300      	movs	r3, #0
 80080be:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_Open(pdev->pData, ep_addr, ep_mps, ep_type);
 80080c0:	687b      	ldr	r3, [r7, #4]
 80080c2:	f8d3 02c0 	ldr.w	r0, [r3, #704]	; 0x2c0
 80080c6:	78bb      	ldrb	r3, [r7, #2]
 80080c8:	883a      	ldrh	r2, [r7, #0]
 80080ca:	78f9      	ldrb	r1, [r7, #3]
 80080cc:	f7f9 fed9 	bl	8001e82 <HAL_PCD_EP_Open>
 80080d0:	4603      	mov	r3, r0
 80080d2:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 80080d4:	7bfb      	ldrb	r3, [r7, #15]
 80080d6:	4618      	mov	r0, r3
 80080d8:	f000 f928 	bl	800832c <USBD_Get_USB_Status>
 80080dc:	4603      	mov	r3, r0
 80080de:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 80080e0:	7bbb      	ldrb	r3, [r7, #14]
}
 80080e2:	4618      	mov	r0, r3
 80080e4:	3710      	adds	r7, #16
 80080e6:	46bd      	mov	sp, r7
 80080e8:	bd80      	pop	{r7, pc}

080080ea <USBD_LL_CloseEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_CloseEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 80080ea:	b580      	push	{r7, lr}
 80080ec:	b084      	sub	sp, #16
 80080ee:	af00      	add	r7, sp, #0
 80080f0:	6078      	str	r0, [r7, #4]
 80080f2:	460b      	mov	r3, r1
 80080f4:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 80080f6:	2300      	movs	r3, #0
 80080f8:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 80080fa:	2300      	movs	r3, #0
 80080fc:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_Close(pdev->pData, ep_addr);
 80080fe:	687b      	ldr	r3, [r7, #4]
 8008100:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 8008104:	78fa      	ldrb	r2, [r7, #3]
 8008106:	4611      	mov	r1, r2
 8008108:	4618      	mov	r0, r3
 800810a:	f7f9 ff20 	bl	8001f4e <HAL_PCD_EP_Close>
 800810e:	4603      	mov	r3, r0
 8008110:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 8008112:	7bfb      	ldrb	r3, [r7, #15]
 8008114:	4618      	mov	r0, r3
 8008116:	f000 f909 	bl	800832c <USBD_Get_USB_Status>
 800811a:	4603      	mov	r3, r0
 800811c:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800811e:	7bbb      	ldrb	r3, [r7, #14]
}
 8008120:	4618      	mov	r0, r3
 8008122:	3710      	adds	r7, #16
 8008124:	46bd      	mov	sp, r7
 8008126:	bd80      	pop	{r7, pc}

08008128 <USBD_LL_StallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_StallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 8008128:	b580      	push	{r7, lr}
 800812a:	b084      	sub	sp, #16
 800812c:	af00      	add	r7, sp, #0
 800812e:	6078      	str	r0, [r7, #4]
 8008130:	460b      	mov	r3, r1
 8008132:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8008134:	2300      	movs	r3, #0
 8008136:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8008138:	2300      	movs	r3, #0
 800813a:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_SetStall(pdev->pData, ep_addr);
 800813c:	687b      	ldr	r3, [r7, #4]
 800813e:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 8008142:	78fa      	ldrb	r2, [r7, #3]
 8008144:	4611      	mov	r1, r2
 8008146:	4618      	mov	r0, r3
 8008148:	f7f9 ffe0 	bl	800210c <HAL_PCD_EP_SetStall>
 800814c:	4603      	mov	r3, r0
 800814e:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 8008150:	7bfb      	ldrb	r3, [r7, #15]
 8008152:	4618      	mov	r0, r3
 8008154:	f000 f8ea 	bl	800832c <USBD_Get_USB_Status>
 8008158:	4603      	mov	r3, r0
 800815a:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800815c:	7bbb      	ldrb	r3, [r7, #14]
}
 800815e:	4618      	mov	r0, r3
 8008160:	3710      	adds	r7, #16
 8008162:	46bd      	mov	sp, r7
 8008164:	bd80      	pop	{r7, pc}

08008166 <USBD_LL_ClearStallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_ClearStallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 8008166:	b580      	push	{r7, lr}
 8008168:	b084      	sub	sp, #16
 800816a:	af00      	add	r7, sp, #0
 800816c:	6078      	str	r0, [r7, #4]
 800816e:	460b      	mov	r3, r1
 8008170:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8008172:	2300      	movs	r3, #0
 8008174:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8008176:	2300      	movs	r3, #0
 8008178:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_ClrStall(pdev->pData, ep_addr);
 800817a:	687b      	ldr	r3, [r7, #4]
 800817c:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 8008180:	78fa      	ldrb	r2, [r7, #3]
 8008182:	4611      	mov	r1, r2
 8008184:	4618      	mov	r0, r3
 8008186:	f7fa f821 	bl	80021cc <HAL_PCD_EP_ClrStall>
 800818a:	4603      	mov	r3, r0
 800818c:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800818e:	7bfb      	ldrb	r3, [r7, #15]
 8008190:	4618      	mov	r0, r3
 8008192:	f000 f8cb 	bl	800832c <USBD_Get_USB_Status>
 8008196:	4603      	mov	r3, r0
 8008198:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800819a:	7bbb      	ldrb	r3, [r7, #14]
}
 800819c:	4618      	mov	r0, r3
 800819e:	3710      	adds	r7, #16
 80081a0:	46bd      	mov	sp, r7
 80081a2:	bd80      	pop	{r7, pc}

080081a4 <USBD_LL_IsStallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval Stall (1: Yes, 0: No)
  */
uint8_t USBD_LL_IsStallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 80081a4:	b480      	push	{r7}
 80081a6:	b085      	sub	sp, #20
 80081a8:	af00      	add	r7, sp, #0
 80081aa:	6078      	str	r0, [r7, #4]
 80081ac:	460b      	mov	r3, r1
 80081ae:	70fb      	strb	r3, [r7, #3]
  PCD_HandleTypeDef *hpcd = (PCD_HandleTypeDef*) pdev->pData;
 80081b0:	687b      	ldr	r3, [r7, #4]
 80081b2:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 80081b6:	60fb      	str	r3, [r7, #12]

  if((ep_addr & 0x80) == 0x80)
 80081b8:	f997 3003 	ldrsb.w	r3, [r7, #3]
 80081bc:	2b00      	cmp	r3, #0
 80081be:	da0c      	bge.n	80081da <USBD_LL_IsStallEP+0x36>
  {
    return hpcd->IN_ep[ep_addr & 0x7F].is_stall;
 80081c0:	78fb      	ldrb	r3, [r7, #3]
 80081c2:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 80081c6:	68f9      	ldr	r1, [r7, #12]
 80081c8:	1c5a      	adds	r2, r3, #1
 80081ca:	4613      	mov	r3, r2
 80081cc:	009b      	lsls	r3, r3, #2
 80081ce:	4413      	add	r3, r2
 80081d0:	00db      	lsls	r3, r3, #3
 80081d2:	440b      	add	r3, r1
 80081d4:	3302      	adds	r3, #2
 80081d6:	781b      	ldrb	r3, [r3, #0]
 80081d8:	e00b      	b.n	80081f2 <USBD_LL_IsStallEP+0x4e>
  }
  else
  {
    return hpcd->OUT_ep[ep_addr & 0x7F].is_stall;
 80081da:	78fb      	ldrb	r3, [r7, #3]
 80081dc:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 80081e0:	68f9      	ldr	r1, [r7, #12]
 80081e2:	4613      	mov	r3, r2
 80081e4:	009b      	lsls	r3, r3, #2
 80081e6:	4413      	add	r3, r2
 80081e8:	00db      	lsls	r3, r3, #3
 80081ea:	440b      	add	r3, r1
 80081ec:	f503 73b5 	add.w	r3, r3, #362	; 0x16a
 80081f0:	781b      	ldrb	r3, [r3, #0]
  }
}
 80081f2:	4618      	mov	r0, r3
 80081f4:	3714      	adds	r7, #20
 80081f6:	46bd      	mov	sp, r7
 80081f8:	bc80      	pop	{r7}
 80081fa:	4770      	bx	lr

080081fc <USBD_LL_SetUSBAddress>:
  * @param  pdev: Device handle
  * @param  dev_addr: Device address
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_SetUSBAddress(USBD_HandleTypeDef *pdev, uint8_t dev_addr)
{
 80081fc:	b580      	push	{r7, lr}
 80081fe:	b084      	sub	sp, #16
 8008200:	af00      	add	r7, sp, #0
 8008202:	6078      	str	r0, [r7, #4]
 8008204:	460b      	mov	r3, r1
 8008206:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8008208:	2300      	movs	r3, #0
 800820a:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800820c:	2300      	movs	r3, #0
 800820e:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_SetAddress(pdev->pData, dev_addr);
 8008210:	687b      	ldr	r3, [r7, #4]
 8008212:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 8008216:	78fa      	ldrb	r2, [r7, #3]
 8008218:	4611      	mov	r1, r2
 800821a:	4618      	mov	r0, r3
 800821c:	f7f9 fe0c 	bl	8001e38 <HAL_PCD_SetAddress>
 8008220:	4603      	mov	r3, r0
 8008222:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 8008224:	7bfb      	ldrb	r3, [r7, #15]
 8008226:	4618      	mov	r0, r3
 8008228:	f000 f880 	bl	800832c <USBD_Get_USB_Status>
 800822c:	4603      	mov	r3, r0
 800822e:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 8008230:	7bbb      	ldrb	r3, [r7, #14]
}
 8008232:	4618      	mov	r0, r3
 8008234:	3710      	adds	r7, #16
 8008236:	46bd      	mov	sp, r7
 8008238:	bd80      	pop	{r7, pc}

0800823a <USBD_LL_Transmit>:
  * @param  pbuf: Pointer to data to be sent
  * @param  size: Data size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Transmit(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t *pbuf, uint16_t size)
{
 800823a:	b580      	push	{r7, lr}
 800823c:	b086      	sub	sp, #24
 800823e:	af00      	add	r7, sp, #0
 8008240:	60f8      	str	r0, [r7, #12]
 8008242:	607a      	str	r2, [r7, #4]
 8008244:	461a      	mov	r2, r3
 8008246:	460b      	mov	r3, r1
 8008248:	72fb      	strb	r3, [r7, #11]
 800824a:	4613      	mov	r3, r2
 800824c:	813b      	strh	r3, [r7, #8]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800824e:	2300      	movs	r3, #0
 8008250:	75fb      	strb	r3, [r7, #23]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8008252:	2300      	movs	r3, #0
 8008254:	75bb      	strb	r3, [r7, #22]

  hal_status = HAL_PCD_EP_Transmit(pdev->pData, ep_addr, pbuf, size);
 8008256:	68fb      	ldr	r3, [r7, #12]
 8008258:	f8d3 02c0 	ldr.w	r0, [r3, #704]	; 0x2c0
 800825c:	893b      	ldrh	r3, [r7, #8]
 800825e:	7af9      	ldrb	r1, [r7, #11]
 8008260:	687a      	ldr	r2, [r7, #4]
 8008262:	f7f9 ff10 	bl	8002086 <HAL_PCD_EP_Transmit>
 8008266:	4603      	mov	r3, r0
 8008268:	75fb      	strb	r3, [r7, #23]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800826a:	7dfb      	ldrb	r3, [r7, #23]
 800826c:	4618      	mov	r0, r3
 800826e:	f000 f85d 	bl	800832c <USBD_Get_USB_Status>
 8008272:	4603      	mov	r3, r0
 8008274:	75bb      	strb	r3, [r7, #22]

  return usb_status;
 8008276:	7dbb      	ldrb	r3, [r7, #22]
}
 8008278:	4618      	mov	r0, r3
 800827a:	3718      	adds	r7, #24
 800827c:	46bd      	mov	sp, r7
 800827e:	bd80      	pop	{r7, pc}

08008280 <USBD_LL_PrepareReceive>:
  * @param  pbuf: Pointer to data to be received
  * @param  size: Data size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_PrepareReceive(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t *pbuf, uint16_t size)
{
 8008280:	b580      	push	{r7, lr}
 8008282:	b086      	sub	sp, #24
 8008284:	af00      	add	r7, sp, #0
 8008286:	60f8      	str	r0, [r7, #12]
 8008288:	607a      	str	r2, [r7, #4]
 800828a:	461a      	mov	r2, r3
 800828c:	460b      	mov	r3, r1
 800828e:	72fb      	strb	r3, [r7, #11]
 8008290:	4613      	mov	r3, r2
 8008292:	813b      	strh	r3, [r7, #8]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8008294:	2300      	movs	r3, #0
 8008296:	75fb      	strb	r3, [r7, #23]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8008298:	2300      	movs	r3, #0
 800829a:	75bb      	strb	r3, [r7, #22]

  hal_status = HAL_PCD_EP_Receive(pdev->pData, ep_addr, pbuf, size);
 800829c:	68fb      	ldr	r3, [r7, #12]
 800829e:	f8d3 02c0 	ldr.w	r0, [r3, #704]	; 0x2c0
 80082a2:	893b      	ldrh	r3, [r7, #8]
 80082a4:	7af9      	ldrb	r1, [r7, #11]
 80082a6:	687a      	ldr	r2, [r7, #4]
 80082a8:	f7f9 fe99 	bl	8001fde <HAL_PCD_EP_Receive>
 80082ac:	4603      	mov	r3, r0
 80082ae:	75fb      	strb	r3, [r7, #23]

  usb_status =  USBD_Get_USB_Status(hal_status);
 80082b0:	7dfb      	ldrb	r3, [r7, #23]
 80082b2:	4618      	mov	r0, r3
 80082b4:	f000 f83a 	bl	800832c <USBD_Get_USB_Status>
 80082b8:	4603      	mov	r3, r0
 80082ba:	75bb      	strb	r3, [r7, #22]

  return usb_status;
 80082bc:	7dbb      	ldrb	r3, [r7, #22]
}
 80082be:	4618      	mov	r0, r3
 80082c0:	3718      	adds	r7, #24
 80082c2:	46bd      	mov	sp, r7
 80082c4:	bd80      	pop	{r7, pc}

080082c6 <USBD_LL_GetRxDataSize>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval Recived Data Size
  */
uint32_t USBD_LL_GetRxDataSize(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 80082c6:	b580      	push	{r7, lr}
 80082c8:	b082      	sub	sp, #8
 80082ca:	af00      	add	r7, sp, #0
 80082cc:	6078      	str	r0, [r7, #4]
 80082ce:	460b      	mov	r3, r1
 80082d0:	70fb      	strb	r3, [r7, #3]
  return HAL_PCD_EP_GetRxCount((PCD_HandleTypeDef*) pdev->pData, ep_addr);
 80082d2:	687b      	ldr	r3, [r7, #4]
 80082d4:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 80082d8:	78fa      	ldrb	r2, [r7, #3]
 80082da:	4611      	mov	r1, r2
 80082dc:	4618      	mov	r0, r3
 80082de:	f7f9 febb 	bl	8002058 <HAL_PCD_EP_GetRxCount>
 80082e2:	4603      	mov	r3, r0
}
 80082e4:	4618      	mov	r0, r3
 80082e6:	3708      	adds	r7, #8
 80082e8:	46bd      	mov	sp, r7
 80082ea:	bd80      	pop	{r7, pc}

080082ec <USBD_static_malloc>:
  * @brief  Static single allocation.
  * @param  size: Size of allocated memory
  * @retval None
  */
void *USBD_static_malloc(uint32_t size)
{
 80082ec:	b480      	push	{r7}
 80082ee:	b083      	sub	sp, #12
 80082f0:	af00      	add	r7, sp, #0
 80082f2:	6078      	str	r0, [r7, #4]
  static uint32_t mem[(sizeof(USBD_CDC_HandleTypeDef)/4)+1];/* On 32-bit boundary */
  return mem;
 80082f4:	4b02      	ldr	r3, [pc, #8]	; (8008300 <USBD_static_malloc+0x14>)
}
 80082f6:	4618      	mov	r0, r3
 80082f8:	370c      	adds	r7, #12
 80082fa:	46bd      	mov	sp, r7
 80082fc:	bc80      	pop	{r7}
 80082fe:	4770      	bx	lr
 8008300:	200001c8 	.word	0x200001c8

08008304 <USBD_static_free>:
  * @brief  Dummy memory free
  * @param  p: Pointer to allocated  memory address
  * @retval None
  */
void USBD_static_free(void *p)
{
 8008304:	b480      	push	{r7}
 8008306:	b083      	sub	sp, #12
 8008308:	af00      	add	r7, sp, #0
 800830a:	6078      	str	r0, [r7, #4]

}
 800830c:	bf00      	nop
 800830e:	370c      	adds	r7, #12
 8008310:	46bd      	mov	sp, r7
 8008312:	bc80      	pop	{r7}
 8008314:	4770      	bx	lr

08008316 <HAL_PCDEx_SetConnectionState>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCDEx_SetConnectionState(PCD_HandleTypeDef *hpcd, uint8_t state)
#else
void HAL_PCDEx_SetConnectionState(PCD_HandleTypeDef *hpcd, uint8_t state)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8008316:	b480      	push	{r7}
 8008318:	b083      	sub	sp, #12
 800831a:	af00      	add	r7, sp, #0
 800831c:	6078      	str	r0, [r7, #4]
 800831e:	460b      	mov	r3, r1
 8008320:	70fb      	strb	r3, [r7, #3]
  {
    /* Configure High connection state. */

  }
  /* USER CODE END 6 */
}
 8008322:	bf00      	nop
 8008324:	370c      	adds	r7, #12
 8008326:	46bd      	mov	sp, r7
 8008328:	bc80      	pop	{r7}
 800832a:	4770      	bx	lr

0800832c <USBD_Get_USB_Status>:
  * @brief  Retuns the USB status depending on the HAL status:
  * @param  hal_status: HAL status
  * @retval USB status
  */
USBD_StatusTypeDef USBD_Get_USB_Status(HAL_StatusTypeDef hal_status)
{
 800832c:	b480      	push	{r7}
 800832e:	b085      	sub	sp, #20
 8008330:	af00      	add	r7, sp, #0
 8008332:	4603      	mov	r3, r0
 8008334:	71fb      	strb	r3, [r7, #7]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8008336:	2300      	movs	r3, #0
 8008338:	73fb      	strb	r3, [r7, #15]

  switch (hal_status)
 800833a:	79fb      	ldrb	r3, [r7, #7]
 800833c:	2b03      	cmp	r3, #3
 800833e:	d817      	bhi.n	8008370 <USBD_Get_USB_Status+0x44>
 8008340:	a201      	add	r2, pc, #4	; (adr r2, 8008348 <USBD_Get_USB_Status+0x1c>)
 8008342:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8008346:	bf00      	nop
 8008348:	08008359 	.word	0x08008359
 800834c:	0800835f 	.word	0x0800835f
 8008350:	08008365 	.word	0x08008365
 8008354:	0800836b 	.word	0x0800836b
  {
    case HAL_OK :
      usb_status = USBD_OK;
 8008358:	2300      	movs	r3, #0
 800835a:	73fb      	strb	r3, [r7, #15]
    break;
 800835c:	e00b      	b.n	8008376 <USBD_Get_USB_Status+0x4a>
    case HAL_ERROR :
      usb_status = USBD_FAIL;
 800835e:	2302      	movs	r3, #2
 8008360:	73fb      	strb	r3, [r7, #15]
    break;
 8008362:	e008      	b.n	8008376 <USBD_Get_USB_Status+0x4a>
    case HAL_BUSY :
      usb_status = USBD_BUSY;
 8008364:	2301      	movs	r3, #1
 8008366:	73fb      	strb	r3, [r7, #15]
    break;
 8008368:	e005      	b.n	8008376 <USBD_Get_USB_Status+0x4a>
    case HAL_TIMEOUT :
      usb_status = USBD_FAIL;
 800836a:	2302      	movs	r3, #2
 800836c:	73fb      	strb	r3, [r7, #15]
    break;
 800836e:	e002      	b.n	8008376 <USBD_Get_USB_Status+0x4a>
    default :
      usb_status = USBD_FAIL;
 8008370:	2302      	movs	r3, #2
 8008372:	73fb      	strb	r3, [r7, #15]
    break;
 8008374:	bf00      	nop
  }
  return usb_status;
 8008376:	7bfb      	ldrb	r3, [r7, #15]
}
 8008378:	4618      	mov	r0, r3
 800837a:	3714      	adds	r7, #20
 800837c:	46bd      	mov	sp, r7
 800837e:	bc80      	pop	{r7}
 8008380:	4770      	bx	lr
 8008382:	bf00      	nop

08008384 <__libc_init_array>:
 8008384:	b570      	push	{r4, r5, r6, lr}
 8008386:	2500      	movs	r5, #0
 8008388:	4e0c      	ldr	r6, [pc, #48]	; (80083bc <__libc_init_array+0x38>)
 800838a:	4c0d      	ldr	r4, [pc, #52]	; (80083c0 <__libc_init_array+0x3c>)
 800838c:	1ba4      	subs	r4, r4, r6
 800838e:	10a4      	asrs	r4, r4, #2
 8008390:	42a5      	cmp	r5, r4
 8008392:	d109      	bne.n	80083a8 <__libc_init_array+0x24>
 8008394:	f000 f822 	bl	80083dc <_init>
 8008398:	2500      	movs	r5, #0
 800839a:	4e0a      	ldr	r6, [pc, #40]	; (80083c4 <__libc_init_array+0x40>)
 800839c:	4c0a      	ldr	r4, [pc, #40]	; (80083c8 <__libc_init_array+0x44>)
 800839e:	1ba4      	subs	r4, r4, r6
 80083a0:	10a4      	asrs	r4, r4, #2
 80083a2:	42a5      	cmp	r5, r4
 80083a4:	d105      	bne.n	80083b2 <__libc_init_array+0x2e>
 80083a6:	bd70      	pop	{r4, r5, r6, pc}
 80083a8:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 80083ac:	4798      	blx	r3
 80083ae:	3501      	adds	r5, #1
 80083b0:	e7ee      	b.n	8008390 <__libc_init_array+0xc>
 80083b2:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 80083b6:	4798      	blx	r3
 80083b8:	3501      	adds	r5, #1
 80083ba:	e7f2      	b.n	80083a2 <__libc_init_array+0x1e>
 80083bc:	08008460 	.word	0x08008460
 80083c0:	08008460 	.word	0x08008460
 80083c4:	08008460 	.word	0x08008460
 80083c8:	08008464 	.word	0x08008464

080083cc <memset>:
 80083cc:	4603      	mov	r3, r0
 80083ce:	4402      	add	r2, r0
 80083d0:	4293      	cmp	r3, r2
 80083d2:	d100      	bne.n	80083d6 <memset+0xa>
 80083d4:	4770      	bx	lr
 80083d6:	f803 1b01 	strb.w	r1, [r3], #1
 80083da:	e7f9      	b.n	80083d0 <memset+0x4>

080083dc <_init>:
 80083dc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80083de:	bf00      	nop
 80083e0:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80083e2:	bc08      	pop	{r3}
 80083e4:	469e      	mov	lr, r3
 80083e6:	4770      	bx	lr

080083e8 <_fini>:
 80083e8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80083ea:	bf00      	nop
 80083ec:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80083ee:	bc08      	pop	{r3}
 80083f0:	469e      	mov	lr, r3
 80083f2:	4770      	bx	lr
