
OsciloscopioSTM32.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   0000010c  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         000080d8  0800010c  0800010c  0001010c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       0000006c  080081e4  080081e4  000181e4  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08008250  08008250  0002017c  2**0
                  CONTENTS
  4 .ARM          00000000  08008250  08008250  0002017c  2**0
                  CONTENTS
  5 .preinit_array 00000000  08008250  08008250  0002017c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08008250  08008250  00018250  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08008254  08008254  00018254  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         0000017c  20000000  08008258  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00002030  2000017c  080083d4  0002017c  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  200021ac  080083d4  000221ac  2**0
                  ALLOC
 11 .ARM.attributes 00000029  00000000  00000000  0002017c  2**0
                  CONTENTS, READONLY
 12 .debug_info   00016d1f  00000000  00000000  000201a5  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_abbrev 00003285  00000000  00000000  00036ec4  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_aranges 00001158  00000000  00000000  0003a150  2**3
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_ranges 00000fd0  00000000  00000000  0003b2a8  2**3
                  CONTENTS, READONLY, DEBUGGING
 16 .debug_macro  0001aef6  00000000  00000000  0003c278  2**0
                  CONTENTS, READONLY, DEBUGGING
 17 .debug_line   00010db0  00000000  00000000  0005716e  2**0
                  CONTENTS, READONLY, DEBUGGING
 18 .debug_str    00091c6e  00000000  00000000  00067f1e  2**0
                  CONTENTS, READONLY, DEBUGGING
 19 .comment      0000007b  00000000  00000000  000f9b8c  2**0
                  CONTENTS, READONLY
 20 .debug_frame  000046fc  00000000  00000000  000f9c08  2**2
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

0800010c <__do_global_dtors_aux>:
 800010c:	b510      	push	{r4, lr}
 800010e:	4c05      	ldr	r4, [pc, #20]	; (8000124 <__do_global_dtors_aux+0x18>)
 8000110:	7823      	ldrb	r3, [r4, #0]
 8000112:	b933      	cbnz	r3, 8000122 <__do_global_dtors_aux+0x16>
 8000114:	4b04      	ldr	r3, [pc, #16]	; (8000128 <__do_global_dtors_aux+0x1c>)
 8000116:	b113      	cbz	r3, 800011e <__do_global_dtors_aux+0x12>
 8000118:	4804      	ldr	r0, [pc, #16]	; (800012c <__do_global_dtors_aux+0x20>)
 800011a:	f3af 8000 	nop.w
 800011e:	2301      	movs	r3, #1
 8000120:	7023      	strb	r3, [r4, #0]
 8000122:	bd10      	pop	{r4, pc}
 8000124:	2000017c 	.word	0x2000017c
 8000128:	00000000 	.word	0x00000000
 800012c:	080081cc 	.word	0x080081cc

08000130 <frame_dummy>:
 8000130:	b508      	push	{r3, lr}
 8000132:	4b03      	ldr	r3, [pc, #12]	; (8000140 <frame_dummy+0x10>)
 8000134:	b11b      	cbz	r3, 800013e <frame_dummy+0xe>
 8000136:	4903      	ldr	r1, [pc, #12]	; (8000144 <frame_dummy+0x14>)
 8000138:	4803      	ldr	r0, [pc, #12]	; (8000148 <frame_dummy+0x18>)
 800013a:	f3af 8000 	nop.w
 800013e:	bd08      	pop	{r3, pc}
 8000140:	00000000 	.word	0x00000000
 8000144:	20000180 	.word	0x20000180
 8000148:	080081cc 	.word	0x080081cc

0800014c <HAL_TIM_PeriodElapsedCallback>:
static void MX_TIM2_Init(void);
/* USER CODE BEGIN PFP */

//char test[] = "\n";

void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim) {
 800014c:	b580      	push	{r7, lr}
 800014e:	b082      	sub	sp, #8
 8000150:	af00      	add	r7, sp, #0
 8000152:	6078      	str	r0, [r7, #4]

	HAL_GPIO_WritePin(GPIOC, GPIO_PIN_13, GPIO_PIN_RESET);
 8000154:	2200      	movs	r2, #0
 8000156:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 800015a:	4809      	ldr	r0, [pc, #36]	; (8000180 <HAL_TIM_PeriodElapsedCallback+0x34>)
 800015c:	f001 fb32 	bl	80017c4 <HAL_GPIO_WritePin>
	CDC_Transmit_FS(adcSamples, NUM_SAMPLES_PLUS_ONE);
 8000160:	f640 51ad 	movw	r1, #3501	; 0xdad
 8000164:	4807      	ldr	r0, [pc, #28]	; (8000184 <HAL_TIM_PeriodElapsedCallback+0x38>)
 8000166:	f007 fc27 	bl	80079b8 <CDC_Transmit_FS>
//	HAL_UART_Transmit(&huart1, adcSamples, NUM_SAMPLES, 100);
//	HAL_UART_Transmit(&huart1, (uint8_t*)"\n", 1, 100);
//	CDC_Transmit_FS(test, strlen(test));
//	CDC_Transmit_FS((uint8_t*)"\n", 1);
	HAL_GPIO_WritePin(GPIOC, GPIO_PIN_13, GPIO_PIN_SET);
 800016a:	2201      	movs	r2, #1
 800016c:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8000170:	4803      	ldr	r0, [pc, #12]	; (8000180 <HAL_TIM_PeriodElapsedCallback+0x34>)
 8000172:	f001 fb27 	bl	80017c4 <HAL_GPIO_WritePin>

}
 8000176:	bf00      	nop
 8000178:	3708      	adds	r7, #8
 800017a:	46bd      	mov	sp, r7
 800017c:	bd80      	pop	{r7, pc}
 800017e:	bf00      	nop
 8000180:	40011000 	.word	0x40011000
 8000184:	20000430 	.word	0x20000430

08000188 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000188:	b580      	push	{r7, lr}
 800018a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN 1 */
	adcSamples[NUM_SAMPLES] = (uint8_t)'\n';
 800018c:	4b0d      	ldr	r3, [pc, #52]	; (80001c4 <main+0x3c>)
 800018e:	220a      	movs	r2, #10
 8000190:	f883 2dac 	strb.w	r2, [r3, #3500]	; 0xdac
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000194:	f000 faa2 	bl	80006dc <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000198:	f000 f81a 	bl	80001d0 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 800019c:	f000 f920 	bl	80003e0 <MX_GPIO_Init>
  MX_DMA_Init();
 80001a0:	f000 f900 	bl	80003a4 <MX_DMA_Init>
  MX_ADC1_Init();
 80001a4:	f000 f872 	bl	800028c <MX_ADC1_Init>
  MX_TIM2_Init();
 80001a8:	f000 f8ae 	bl	8000308 <MX_TIM2_Init>
  MX_USB_DEVICE_Init();
 80001ac:	f007 fb46 	bl	800783c <MX_USB_DEVICE_Init>
  /* USER CODE BEGIN 2 */

  HAL_ADC_Start_DMA(&hadc1, (uint32_t *)adcSamples, NUM_SAMPLES);
 80001b0:	f640 52ac 	movw	r2, #3500	; 0xdac
 80001b4:	4903      	ldr	r1, [pc, #12]	; (80001c4 <main+0x3c>)
 80001b6:	4804      	ldr	r0, [pc, #16]	; (80001c8 <main+0x40>)
 80001b8:	f000 fbca 	bl	8000950 <HAL_ADC_Start_DMA>
  HAL_TIM_Base_Start_IT(&htim2);
 80001bc:	4803      	ldr	r0, [pc, #12]	; (80001cc <main+0x44>)
 80001be:	f003 fb8d 	bl	80038dc <HAL_TIM_Base_Start_IT>

  /* USER CODE END 2 */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
 80001c2:	e7fe      	b.n	80001c2 <main+0x3a>
 80001c4:	20000430 	.word	0x20000430
 80001c8:	200003bc 	.word	0x200003bc
 80001cc:	200011e0 	.word	0x200011e0

080001d0 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 80001d0:	b580      	push	{r7, lr}
 80001d2:	b094      	sub	sp, #80	; 0x50
 80001d4:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 80001d6:	f107 0328 	add.w	r3, r7, #40	; 0x28
 80001da:	2228      	movs	r2, #40	; 0x28
 80001dc:	2100      	movs	r1, #0
 80001de:	4618      	mov	r0, r3
 80001e0:	f007 ffec 	bl	80081bc <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 80001e4:	f107 0314 	add.w	r3, r7, #20
 80001e8:	2200      	movs	r2, #0
 80001ea:	601a      	str	r2, [r3, #0]
 80001ec:	605a      	str	r2, [r3, #4]
 80001ee:	609a      	str	r2, [r3, #8]
 80001f0:	60da      	str	r2, [r3, #12]
 80001f2:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 80001f4:	1d3b      	adds	r3, r7, #4
 80001f6:	2200      	movs	r2, #0
 80001f8:	601a      	str	r2, [r3, #0]
 80001fa:	605a      	str	r2, [r3, #4]
 80001fc:	609a      	str	r2, [r3, #8]
 80001fe:	60da      	str	r2, [r3, #12]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 8000200:	2301      	movs	r3, #1
 8000202:	62bb      	str	r3, [r7, #40]	; 0x28
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 8000204:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8000208:	62fb      	str	r3, [r7, #44]	; 0x2c
  RCC_OscInitStruct.HSEPredivValue = RCC_HSE_PREDIV_DIV1;
 800020a:	2300      	movs	r3, #0
 800020c:	633b      	str	r3, [r7, #48]	; 0x30
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 800020e:	2301      	movs	r3, #1
 8000210:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8000212:	2302      	movs	r3, #2
 8000214:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 8000216:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 800021a:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLMUL = RCC_PLL_MUL6;
 800021c:	f44f 1380 	mov.w	r3, #1048576	; 0x100000
 8000220:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000222:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8000226:	4618      	mov	r0, r3
 8000228:	f002 fe68 	bl	8002efc <HAL_RCC_OscConfig>
 800022c:	4603      	mov	r3, r0
 800022e:	2b00      	cmp	r3, #0
 8000230:	d001      	beq.n	8000236 <SystemClock_Config+0x66>
  {
    Error_Handler();
 8000232:	f000 f921 	bl	8000478 <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000236:	230f      	movs	r3, #15
 8000238:	617b      	str	r3, [r7, #20]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 800023a:	2302      	movs	r3, #2
 800023c:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 800023e:	2300      	movs	r3, #0
 8000240:	61fb      	str	r3, [r7, #28]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 8000242:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8000246:	623b      	str	r3, [r7, #32]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8000248:	2300      	movs	r3, #0
 800024a:	627b      	str	r3, [r7, #36]	; 0x24

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_1) != HAL_OK)
 800024c:	f107 0314 	add.w	r3, r7, #20
 8000250:	2101      	movs	r1, #1
 8000252:	4618      	mov	r0, r3
 8000254:	f003 f8d2 	bl	80033fc <HAL_RCC_ClockConfig>
 8000258:	4603      	mov	r3, r0
 800025a:	2b00      	cmp	r3, #0
 800025c:	d001      	beq.n	8000262 <SystemClock_Config+0x92>
  {
    Error_Handler();
 800025e:	f000 f90b 	bl	8000478 <Error_Handler>
  }
  PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_ADC|RCC_PERIPHCLK_USB;
 8000262:	2312      	movs	r3, #18
 8000264:	607b      	str	r3, [r7, #4]
  PeriphClkInit.AdcClockSelection = RCC_ADCPCLK2_DIV4;
 8000266:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 800026a:	60fb      	str	r3, [r7, #12]
  PeriphClkInit.UsbClockSelection = RCC_USBCLKSOURCE_PLL;
 800026c:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 8000270:	613b      	str	r3, [r7, #16]
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8000272:	1d3b      	adds	r3, r7, #4
 8000274:	4618      	mov	r0, r3
 8000276:	f003 fa2b 	bl	80036d0 <HAL_RCCEx_PeriphCLKConfig>
 800027a:	4603      	mov	r3, r0
 800027c:	2b00      	cmp	r3, #0
 800027e:	d001      	beq.n	8000284 <SystemClock_Config+0xb4>
  {
    Error_Handler();
 8000280:	f000 f8fa 	bl	8000478 <Error_Handler>
  }
}
 8000284:	bf00      	nop
 8000286:	3750      	adds	r7, #80	; 0x50
 8000288:	46bd      	mov	sp, r7
 800028a:	bd80      	pop	{r7, pc}

0800028c <MX_ADC1_Init>:
  * @brief ADC1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_ADC1_Init(void)
{
 800028c:	b580      	push	{r7, lr}
 800028e:	b084      	sub	sp, #16
 8000290:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC1_Init 0 */

  /* USER CODE END ADC1_Init 0 */

  ADC_ChannelConfTypeDef sConfig = {0};
 8000292:	1d3b      	adds	r3, r7, #4
 8000294:	2200      	movs	r2, #0
 8000296:	601a      	str	r2, [r3, #0]
 8000298:	605a      	str	r2, [r3, #4]
 800029a:	609a      	str	r2, [r3, #8]
  /* USER CODE BEGIN ADC1_Init 1 */

  /* USER CODE END ADC1_Init 1 */
  /** Common config
  */
  hadc1.Instance = ADC1;
 800029c:	4b18      	ldr	r3, [pc, #96]	; (8000300 <MX_ADC1_Init+0x74>)
 800029e:	4a19      	ldr	r2, [pc, #100]	; (8000304 <MX_ADC1_Init+0x78>)
 80002a0:	601a      	str	r2, [r3, #0]
  hadc1.Init.ScanConvMode = ADC_SCAN_DISABLE;
 80002a2:	4b17      	ldr	r3, [pc, #92]	; (8000300 <MX_ADC1_Init+0x74>)
 80002a4:	2200      	movs	r2, #0
 80002a6:	609a      	str	r2, [r3, #8]
  hadc1.Init.ContinuousConvMode = ENABLE;
 80002a8:	4b15      	ldr	r3, [pc, #84]	; (8000300 <MX_ADC1_Init+0x74>)
 80002aa:	2201      	movs	r2, #1
 80002ac:	731a      	strb	r2, [r3, #12]
  hadc1.Init.DiscontinuousConvMode = DISABLE;
 80002ae:	4b14      	ldr	r3, [pc, #80]	; (8000300 <MX_ADC1_Init+0x74>)
 80002b0:	2200      	movs	r2, #0
 80002b2:	751a      	strb	r2, [r3, #20]
  hadc1.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 80002b4:	4b12      	ldr	r3, [pc, #72]	; (8000300 <MX_ADC1_Init+0x74>)
 80002b6:	f44f 2260 	mov.w	r2, #917504	; 0xe0000
 80002ba:	61da      	str	r2, [r3, #28]
  hadc1.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 80002bc:	4b10      	ldr	r3, [pc, #64]	; (8000300 <MX_ADC1_Init+0x74>)
 80002be:	2200      	movs	r2, #0
 80002c0:	605a      	str	r2, [r3, #4]
  hadc1.Init.NbrOfConversion = 1;
 80002c2:	4b0f      	ldr	r3, [pc, #60]	; (8000300 <MX_ADC1_Init+0x74>)
 80002c4:	2201      	movs	r2, #1
 80002c6:	611a      	str	r2, [r3, #16]
  if (HAL_ADC_Init(&hadc1) != HAL_OK)
 80002c8:	480d      	ldr	r0, [pc, #52]	; (8000300 <MX_ADC1_Init+0x74>)
 80002ca:	f000 fa69 	bl	80007a0 <HAL_ADC_Init>
 80002ce:	4603      	mov	r3, r0
 80002d0:	2b00      	cmp	r3, #0
 80002d2:	d001      	beq.n	80002d8 <MX_ADC1_Init+0x4c>
  {
    Error_Handler();
 80002d4:	f000 f8d0 	bl	8000478 <Error_Handler>
  }
  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_1;
 80002d8:	2301      	movs	r3, #1
 80002da:	607b      	str	r3, [r7, #4]
  sConfig.Rank = ADC_REGULAR_RANK_1;
 80002dc:	2301      	movs	r3, #1
 80002de:	60bb      	str	r3, [r7, #8]
  sConfig.SamplingTime = ADC_SAMPLETIME_239CYCLES_5;
 80002e0:	2307      	movs	r3, #7
 80002e2:	60fb      	str	r3, [r7, #12]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 80002e4:	1d3b      	adds	r3, r7, #4
 80002e6:	4619      	mov	r1, r3
 80002e8:	4805      	ldr	r0, [pc, #20]	; (8000300 <MX_ADC1_Init+0x74>)
 80002ea:	f000 fc2b 	bl	8000b44 <HAL_ADC_ConfigChannel>
 80002ee:	4603      	mov	r3, r0
 80002f0:	2b00      	cmp	r3, #0
 80002f2:	d001      	beq.n	80002f8 <MX_ADC1_Init+0x6c>
  {
    Error_Handler();
 80002f4:	f000 f8c0 	bl	8000478 <Error_Handler>
  }
  /* USER CODE BEGIN ADC1_Init 2 */

  /* USER CODE END ADC1_Init 2 */

}
 80002f8:	bf00      	nop
 80002fa:	3710      	adds	r7, #16
 80002fc:	46bd      	mov	sp, r7
 80002fe:	bd80      	pop	{r7, pc}
 8000300:	200003bc 	.word	0x200003bc
 8000304:	40012400 	.word	0x40012400

08000308 <MX_TIM2_Init>:
  * @brief TIM2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM2_Init(void)
{
 8000308:	b580      	push	{r7, lr}
 800030a:	b086      	sub	sp, #24
 800030c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM2_Init 0 */

  /* USER CODE END TIM2_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 800030e:	f107 0308 	add.w	r3, r7, #8
 8000312:	2200      	movs	r2, #0
 8000314:	601a      	str	r2, [r3, #0]
 8000316:	605a      	str	r2, [r3, #4]
 8000318:	609a      	str	r2, [r3, #8]
 800031a:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 800031c:	463b      	mov	r3, r7
 800031e:	2200      	movs	r2, #0
 8000320:	601a      	str	r2, [r3, #0]
 8000322:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM2_Init 1 */

  /* USER CODE END TIM2_Init 1 */
  htim2.Instance = TIM2;
 8000324:	4b1e      	ldr	r3, [pc, #120]	; (80003a0 <MX_TIM2_Init+0x98>)
 8000326:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 800032a:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 48000;
 800032c:	4b1c      	ldr	r3, [pc, #112]	; (80003a0 <MX_TIM2_Init+0x98>)
 800032e:	f64b 3280 	movw	r2, #48000	; 0xbb80
 8000332:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000334:	4b1a      	ldr	r3, [pc, #104]	; (80003a0 <MX_TIM2_Init+0x98>)
 8000336:	2200      	movs	r2, #0
 8000338:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 1000;
 800033a:	4b19      	ldr	r3, [pc, #100]	; (80003a0 <MX_TIM2_Init+0x98>)
 800033c:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 8000340:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8000342:	4b17      	ldr	r3, [pc, #92]	; (80003a0 <MX_TIM2_Init+0x98>)
 8000344:	2200      	movs	r2, #0
 8000346:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_ENABLE;
 8000348:	4b15      	ldr	r3, [pc, #84]	; (80003a0 <MX_TIM2_Init+0x98>)
 800034a:	2280      	movs	r2, #128	; 0x80
 800034c:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim2) != HAL_OK)
 800034e:	4814      	ldr	r0, [pc, #80]	; (80003a0 <MX_TIM2_Init+0x98>)
 8000350:	f003 fa74 	bl	800383c <HAL_TIM_Base_Init>
 8000354:	4603      	mov	r3, r0
 8000356:	2b00      	cmp	r3, #0
 8000358:	d001      	beq.n	800035e <MX_TIM2_Init+0x56>
  {
    Error_Handler();
 800035a:	f000 f88d 	bl	8000478 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 800035e:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8000362:	60bb      	str	r3, [r7, #8]
  if (HAL_TIM_ConfigClockSource(&htim2, &sClockSourceConfig) != HAL_OK)
 8000364:	f107 0308 	add.w	r3, r7, #8
 8000368:	4619      	mov	r1, r3
 800036a:	480d      	ldr	r0, [pc, #52]	; (80003a0 <MX_TIM2_Init+0x98>)
 800036c:	f003 fc10 	bl	8003b90 <HAL_TIM_ConfigClockSource>
 8000370:	4603      	mov	r3, r0
 8000372:	2b00      	cmp	r3, #0
 8000374:	d001      	beq.n	800037a <MX_TIM2_Init+0x72>
  {
    Error_Handler();
 8000376:	f000 f87f 	bl	8000478 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 800037a:	2300      	movs	r3, #0
 800037c:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 800037e:	2300      	movs	r3, #0
 8000380:	607b      	str	r3, [r7, #4]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 8000382:	463b      	mov	r3, r7
 8000384:	4619      	mov	r1, r3
 8000386:	4806      	ldr	r0, [pc, #24]	; (80003a0 <MX_TIM2_Init+0x98>)
 8000388:	f003 fdd6 	bl	8003f38 <HAL_TIMEx_MasterConfigSynchronization>
 800038c:	4603      	mov	r3, r0
 800038e:	2b00      	cmp	r3, #0
 8000390:	d001      	beq.n	8000396 <MX_TIM2_Init+0x8e>
  {
    Error_Handler();
 8000392:	f000 f871 	bl	8000478 <Error_Handler>
  }
  /* USER CODE BEGIN TIM2_Init 2 */

  /* USER CODE END TIM2_Init 2 */

}
 8000396:	bf00      	nop
 8000398:	3718      	adds	r7, #24
 800039a:	46bd      	mov	sp, r7
 800039c:	bd80      	pop	{r7, pc}
 800039e:	bf00      	nop
 80003a0:	200011e0 	.word	0x200011e0

080003a4 <MX_DMA_Init>:

/**
  * Enable DMA controller clock
  */
static void MX_DMA_Init(void)
{
 80003a4:	b580      	push	{r7, lr}
 80003a6:	b082      	sub	sp, #8
 80003a8:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMA1_CLK_ENABLE();
 80003aa:	4b0c      	ldr	r3, [pc, #48]	; (80003dc <MX_DMA_Init+0x38>)
 80003ac:	695b      	ldr	r3, [r3, #20]
 80003ae:	4a0b      	ldr	r2, [pc, #44]	; (80003dc <MX_DMA_Init+0x38>)
 80003b0:	f043 0301 	orr.w	r3, r3, #1
 80003b4:	6153      	str	r3, [r2, #20]
 80003b6:	4b09      	ldr	r3, [pc, #36]	; (80003dc <MX_DMA_Init+0x38>)
 80003b8:	695b      	ldr	r3, [r3, #20]
 80003ba:	f003 0301 	and.w	r3, r3, #1
 80003be:	607b      	str	r3, [r7, #4]
 80003c0:	687b      	ldr	r3, [r7, #4]

  /* DMA interrupt init */
  /* DMA1_Channel1_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Channel1_IRQn, 0, 0);
 80003c2:	2200      	movs	r2, #0
 80003c4:	2100      	movs	r1, #0
 80003c6:	200b      	movs	r0, #11
 80003c8:	f000 fe7d 	bl	80010c6 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Channel1_IRQn);
 80003cc:	200b      	movs	r0, #11
 80003ce:	f000 fe96 	bl	80010fe <HAL_NVIC_EnableIRQ>

}
 80003d2:	bf00      	nop
 80003d4:	3708      	adds	r7, #8
 80003d6:	46bd      	mov	sp, r7
 80003d8:	bd80      	pop	{r7, pc}
 80003da:	bf00      	nop
 80003dc:	40021000 	.word	0x40021000

080003e0 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 80003e0:	b580      	push	{r7, lr}
 80003e2:	b088      	sub	sp, #32
 80003e4:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80003e6:	f107 0310 	add.w	r3, r7, #16
 80003ea:	2200      	movs	r2, #0
 80003ec:	601a      	str	r2, [r3, #0]
 80003ee:	605a      	str	r2, [r3, #4]
 80003f0:	609a      	str	r2, [r3, #8]
 80003f2:	60da      	str	r2, [r3, #12]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 80003f4:	4b1e      	ldr	r3, [pc, #120]	; (8000470 <MX_GPIO_Init+0x90>)
 80003f6:	699b      	ldr	r3, [r3, #24]
 80003f8:	4a1d      	ldr	r2, [pc, #116]	; (8000470 <MX_GPIO_Init+0x90>)
 80003fa:	f043 0310 	orr.w	r3, r3, #16
 80003fe:	6193      	str	r3, [r2, #24]
 8000400:	4b1b      	ldr	r3, [pc, #108]	; (8000470 <MX_GPIO_Init+0x90>)
 8000402:	699b      	ldr	r3, [r3, #24]
 8000404:	f003 0310 	and.w	r3, r3, #16
 8000408:	60fb      	str	r3, [r7, #12]
 800040a:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 800040c:	4b18      	ldr	r3, [pc, #96]	; (8000470 <MX_GPIO_Init+0x90>)
 800040e:	699b      	ldr	r3, [r3, #24]
 8000410:	4a17      	ldr	r2, [pc, #92]	; (8000470 <MX_GPIO_Init+0x90>)
 8000412:	f043 0320 	orr.w	r3, r3, #32
 8000416:	6193      	str	r3, [r2, #24]
 8000418:	4b15      	ldr	r3, [pc, #84]	; (8000470 <MX_GPIO_Init+0x90>)
 800041a:	699b      	ldr	r3, [r3, #24]
 800041c:	f003 0320 	and.w	r3, r3, #32
 8000420:	60bb      	str	r3, [r7, #8]
 8000422:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000424:	4b12      	ldr	r3, [pc, #72]	; (8000470 <MX_GPIO_Init+0x90>)
 8000426:	699b      	ldr	r3, [r3, #24]
 8000428:	4a11      	ldr	r2, [pc, #68]	; (8000470 <MX_GPIO_Init+0x90>)
 800042a:	f043 0304 	orr.w	r3, r3, #4
 800042e:	6193      	str	r3, [r2, #24]
 8000430:	4b0f      	ldr	r3, [pc, #60]	; (8000470 <MX_GPIO_Init+0x90>)
 8000432:	699b      	ldr	r3, [r3, #24]
 8000434:	f003 0304 	and.w	r3, r3, #4
 8000438:	607b      	str	r3, [r7, #4]
 800043a:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOC, GPIO_PIN_13, GPIO_PIN_RESET);
 800043c:	2200      	movs	r2, #0
 800043e:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8000442:	480c      	ldr	r0, [pc, #48]	; (8000474 <MX_GPIO_Init+0x94>)
 8000444:	f001 f9be 	bl	80017c4 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : PC13 */
  GPIO_InitStruct.Pin = GPIO_PIN_13;
 8000448:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 800044c:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800044e:	2301      	movs	r3, #1
 8000450:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000452:	2300      	movs	r3, #0
 8000454:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8000456:	2303      	movs	r3, #3
 8000458:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 800045a:	f107 0310 	add.w	r3, r7, #16
 800045e:	4619      	mov	r1, r3
 8000460:	4804      	ldr	r0, [pc, #16]	; (8000474 <MX_GPIO_Init+0x94>)
 8000462:	f001 f855 	bl	8001510 <HAL_GPIO_Init>

}
 8000466:	bf00      	nop
 8000468:	3720      	adds	r7, #32
 800046a:	46bd      	mov	sp, r7
 800046c:	bd80      	pop	{r7, pc}
 800046e:	bf00      	nop
 8000470:	40021000 	.word	0x40021000
 8000474:	40011000 	.word	0x40011000

08000478 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000478:	b480      	push	{r7}
 800047a:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 800047c:	b672      	cpsid	i
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 800047e:	e7fe      	b.n	800047e <Error_Handler+0x6>

08000480 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000480:	b480      	push	{r7}
 8000482:	b085      	sub	sp, #20
 8000484:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_AFIO_CLK_ENABLE();
 8000486:	4b15      	ldr	r3, [pc, #84]	; (80004dc <HAL_MspInit+0x5c>)
 8000488:	699b      	ldr	r3, [r3, #24]
 800048a:	4a14      	ldr	r2, [pc, #80]	; (80004dc <HAL_MspInit+0x5c>)
 800048c:	f043 0301 	orr.w	r3, r3, #1
 8000490:	6193      	str	r3, [r2, #24]
 8000492:	4b12      	ldr	r3, [pc, #72]	; (80004dc <HAL_MspInit+0x5c>)
 8000494:	699b      	ldr	r3, [r3, #24]
 8000496:	f003 0301 	and.w	r3, r3, #1
 800049a:	60bb      	str	r3, [r7, #8]
 800049c:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_PWR_CLK_ENABLE();
 800049e:	4b0f      	ldr	r3, [pc, #60]	; (80004dc <HAL_MspInit+0x5c>)
 80004a0:	69db      	ldr	r3, [r3, #28]
 80004a2:	4a0e      	ldr	r2, [pc, #56]	; (80004dc <HAL_MspInit+0x5c>)
 80004a4:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80004a8:	61d3      	str	r3, [r2, #28]
 80004aa:	4b0c      	ldr	r3, [pc, #48]	; (80004dc <HAL_MspInit+0x5c>)
 80004ac:	69db      	ldr	r3, [r3, #28]
 80004ae:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80004b2:	607b      	str	r3, [r7, #4]
 80004b4:	687b      	ldr	r3, [r7, #4]

  /* System interrupt init*/

  /** NOJTAG: JTAG-DP Disabled and SW-DP Enabled
  */
  __HAL_AFIO_REMAP_SWJ_NOJTAG();
 80004b6:	4b0a      	ldr	r3, [pc, #40]	; (80004e0 <HAL_MspInit+0x60>)
 80004b8:	685b      	ldr	r3, [r3, #4]
 80004ba:	60fb      	str	r3, [r7, #12]
 80004bc:	68fb      	ldr	r3, [r7, #12]
 80004be:	f023 63e0 	bic.w	r3, r3, #117440512	; 0x7000000
 80004c2:	60fb      	str	r3, [r7, #12]
 80004c4:	68fb      	ldr	r3, [r7, #12]
 80004c6:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 80004ca:	60fb      	str	r3, [r7, #12]
 80004cc:	4a04      	ldr	r2, [pc, #16]	; (80004e0 <HAL_MspInit+0x60>)
 80004ce:	68fb      	ldr	r3, [r7, #12]
 80004d0:	6053      	str	r3, [r2, #4]

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 80004d2:	bf00      	nop
 80004d4:	3714      	adds	r7, #20
 80004d6:	46bd      	mov	sp, r7
 80004d8:	bc80      	pop	{r7}
 80004da:	4770      	bx	lr
 80004dc:	40021000 	.word	0x40021000
 80004e0:	40010000 	.word	0x40010000

080004e4 <HAL_ADC_MspInit>:
* This function configures the hardware resources used in this example
* @param hadc: ADC handle pointer
* @retval None
*/
void HAL_ADC_MspInit(ADC_HandleTypeDef* hadc)
{
 80004e4:	b580      	push	{r7, lr}
 80004e6:	b088      	sub	sp, #32
 80004e8:	af00      	add	r7, sp, #0
 80004ea:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80004ec:	f107 0310 	add.w	r3, r7, #16
 80004f0:	2200      	movs	r2, #0
 80004f2:	601a      	str	r2, [r3, #0]
 80004f4:	605a      	str	r2, [r3, #4]
 80004f6:	609a      	str	r2, [r3, #8]
 80004f8:	60da      	str	r2, [r3, #12]
  if(hadc->Instance==ADC1)
 80004fa:	687b      	ldr	r3, [r7, #4]
 80004fc:	681b      	ldr	r3, [r3, #0]
 80004fe:	4a27      	ldr	r2, [pc, #156]	; (800059c <HAL_ADC_MspInit+0xb8>)
 8000500:	4293      	cmp	r3, r2
 8000502:	d147      	bne.n	8000594 <HAL_ADC_MspInit+0xb0>
  {
  /* USER CODE BEGIN ADC1_MspInit 0 */

  /* USER CODE END ADC1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_ADC1_CLK_ENABLE();
 8000504:	4b26      	ldr	r3, [pc, #152]	; (80005a0 <HAL_ADC_MspInit+0xbc>)
 8000506:	699b      	ldr	r3, [r3, #24]
 8000508:	4a25      	ldr	r2, [pc, #148]	; (80005a0 <HAL_ADC_MspInit+0xbc>)
 800050a:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 800050e:	6193      	str	r3, [r2, #24]
 8000510:	4b23      	ldr	r3, [pc, #140]	; (80005a0 <HAL_ADC_MspInit+0xbc>)
 8000512:	699b      	ldr	r3, [r3, #24]
 8000514:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8000518:	60fb      	str	r3, [r7, #12]
 800051a:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 800051c:	4b20      	ldr	r3, [pc, #128]	; (80005a0 <HAL_ADC_MspInit+0xbc>)
 800051e:	699b      	ldr	r3, [r3, #24]
 8000520:	4a1f      	ldr	r2, [pc, #124]	; (80005a0 <HAL_ADC_MspInit+0xbc>)
 8000522:	f043 0304 	orr.w	r3, r3, #4
 8000526:	6193      	str	r3, [r2, #24]
 8000528:	4b1d      	ldr	r3, [pc, #116]	; (80005a0 <HAL_ADC_MspInit+0xbc>)
 800052a:	699b      	ldr	r3, [r3, #24]
 800052c:	f003 0304 	and.w	r3, r3, #4
 8000530:	60bb      	str	r3, [r7, #8]
 8000532:	68bb      	ldr	r3, [r7, #8]
    /**ADC1 GPIO Configuration
    PA1     ------> ADC1_IN1
    */
    GPIO_InitStruct.Pin = GPIO_PIN_1;
 8000534:	2302      	movs	r3, #2
 8000536:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8000538:	2303      	movs	r3, #3
 800053a:	617b      	str	r3, [r7, #20]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800053c:	f107 0310 	add.w	r3, r7, #16
 8000540:	4619      	mov	r1, r3
 8000542:	4818      	ldr	r0, [pc, #96]	; (80005a4 <HAL_ADC_MspInit+0xc0>)
 8000544:	f000 ffe4 	bl	8001510 <HAL_GPIO_Init>

    /* ADC1 DMA Init */
    /* ADC1 Init */
    hdma_adc1.Instance = DMA1_Channel1;
 8000548:	4b17      	ldr	r3, [pc, #92]	; (80005a8 <HAL_ADC_MspInit+0xc4>)
 800054a:	4a18      	ldr	r2, [pc, #96]	; (80005ac <HAL_ADC_MspInit+0xc8>)
 800054c:	601a      	str	r2, [r3, #0]
    hdma_adc1.Init.Direction = DMA_PERIPH_TO_MEMORY;
 800054e:	4b16      	ldr	r3, [pc, #88]	; (80005a8 <HAL_ADC_MspInit+0xc4>)
 8000550:	2200      	movs	r2, #0
 8000552:	605a      	str	r2, [r3, #4]
    hdma_adc1.Init.PeriphInc = DMA_PINC_DISABLE;
 8000554:	4b14      	ldr	r3, [pc, #80]	; (80005a8 <HAL_ADC_MspInit+0xc4>)
 8000556:	2200      	movs	r2, #0
 8000558:	609a      	str	r2, [r3, #8]
    hdma_adc1.Init.MemInc = DMA_MINC_ENABLE;
 800055a:	4b13      	ldr	r3, [pc, #76]	; (80005a8 <HAL_ADC_MspInit+0xc4>)
 800055c:	2280      	movs	r2, #128	; 0x80
 800055e:	60da      	str	r2, [r3, #12]
    hdma_adc1.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 8000560:	4b11      	ldr	r3, [pc, #68]	; (80005a8 <HAL_ADC_MspInit+0xc4>)
 8000562:	2200      	movs	r2, #0
 8000564:	611a      	str	r2, [r3, #16]
    hdma_adc1.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 8000566:	4b10      	ldr	r3, [pc, #64]	; (80005a8 <HAL_ADC_MspInit+0xc4>)
 8000568:	2200      	movs	r2, #0
 800056a:	615a      	str	r2, [r3, #20]
    hdma_adc1.Init.Mode = DMA_CIRCULAR;
 800056c:	4b0e      	ldr	r3, [pc, #56]	; (80005a8 <HAL_ADC_MspInit+0xc4>)
 800056e:	2220      	movs	r2, #32
 8000570:	619a      	str	r2, [r3, #24]
    hdma_adc1.Init.Priority = DMA_PRIORITY_LOW;
 8000572:	4b0d      	ldr	r3, [pc, #52]	; (80005a8 <HAL_ADC_MspInit+0xc4>)
 8000574:	2200      	movs	r2, #0
 8000576:	61da      	str	r2, [r3, #28]
    if (HAL_DMA_Init(&hdma_adc1) != HAL_OK)
 8000578:	480b      	ldr	r0, [pc, #44]	; (80005a8 <HAL_ADC_MspInit+0xc4>)
 800057a:	f000 fddb 	bl	8001134 <HAL_DMA_Init>
 800057e:	4603      	mov	r3, r0
 8000580:	2b00      	cmp	r3, #0
 8000582:	d001      	beq.n	8000588 <HAL_ADC_MspInit+0xa4>
    {
      Error_Handler();
 8000584:	f7ff ff78 	bl	8000478 <Error_Handler>
    }

    __HAL_LINKDMA(hadc,DMA_Handle,hdma_adc1);
 8000588:	687b      	ldr	r3, [r7, #4]
 800058a:	4a07      	ldr	r2, [pc, #28]	; (80005a8 <HAL_ADC_MspInit+0xc4>)
 800058c:	621a      	str	r2, [r3, #32]
 800058e:	4a06      	ldr	r2, [pc, #24]	; (80005a8 <HAL_ADC_MspInit+0xc4>)
 8000590:	687b      	ldr	r3, [r7, #4]
 8000592:	6253      	str	r3, [r2, #36]	; 0x24
  /* USER CODE BEGIN ADC1_MspInit 1 */

  /* USER CODE END ADC1_MspInit 1 */
  }

}
 8000594:	bf00      	nop
 8000596:	3720      	adds	r7, #32
 8000598:	46bd      	mov	sp, r7
 800059a:	bd80      	pop	{r7, pc}
 800059c:	40012400 	.word	0x40012400
 80005a0:	40021000 	.word	0x40021000
 80005a4:	40010800 	.word	0x40010800
 80005a8:	200003ec 	.word	0x200003ec
 80005ac:	40020008 	.word	0x40020008

080005b0 <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 80005b0:	b580      	push	{r7, lr}
 80005b2:	b084      	sub	sp, #16
 80005b4:	af00      	add	r7, sp, #0
 80005b6:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM2)
 80005b8:	687b      	ldr	r3, [r7, #4]
 80005ba:	681b      	ldr	r3, [r3, #0]
 80005bc:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80005c0:	d113      	bne.n	80005ea <HAL_TIM_Base_MspInit+0x3a>
  {
  /* USER CODE BEGIN TIM2_MspInit 0 */

  /* USER CODE END TIM2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM2_CLK_ENABLE();
 80005c2:	4b0c      	ldr	r3, [pc, #48]	; (80005f4 <HAL_TIM_Base_MspInit+0x44>)
 80005c4:	69db      	ldr	r3, [r3, #28]
 80005c6:	4a0b      	ldr	r2, [pc, #44]	; (80005f4 <HAL_TIM_Base_MspInit+0x44>)
 80005c8:	f043 0301 	orr.w	r3, r3, #1
 80005cc:	61d3      	str	r3, [r2, #28]
 80005ce:	4b09      	ldr	r3, [pc, #36]	; (80005f4 <HAL_TIM_Base_MspInit+0x44>)
 80005d0:	69db      	ldr	r3, [r3, #28]
 80005d2:	f003 0301 	and.w	r3, r3, #1
 80005d6:	60fb      	str	r3, [r7, #12]
 80005d8:	68fb      	ldr	r3, [r7, #12]
    /* TIM2 interrupt Init */
    HAL_NVIC_SetPriority(TIM2_IRQn, 0, 0);
 80005da:	2200      	movs	r2, #0
 80005dc:	2100      	movs	r1, #0
 80005de:	201c      	movs	r0, #28
 80005e0:	f000 fd71 	bl	80010c6 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM2_IRQn);
 80005e4:	201c      	movs	r0, #28
 80005e6:	f000 fd8a 	bl	80010fe <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN TIM2_MspInit 1 */

  /* USER CODE END TIM2_MspInit 1 */
  }

}
 80005ea:	bf00      	nop
 80005ec:	3710      	adds	r7, #16
 80005ee:	46bd      	mov	sp, r7
 80005f0:	bd80      	pop	{r7, pc}
 80005f2:	bf00      	nop
 80005f4:	40021000 	.word	0x40021000

080005f8 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 80005f8:	b480      	push	{r7}
 80005fa:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 80005fc:	e7fe      	b.n	80005fc <NMI_Handler+0x4>

080005fe <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 80005fe:	b480      	push	{r7}
 8000600:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8000602:	e7fe      	b.n	8000602 <HardFault_Handler+0x4>

08000604 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8000604:	b480      	push	{r7}
 8000606:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8000608:	e7fe      	b.n	8000608 <MemManage_Handler+0x4>

0800060a <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 800060a:	b480      	push	{r7}
 800060c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 800060e:	e7fe      	b.n	800060e <BusFault_Handler+0x4>

08000610 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8000610:	b480      	push	{r7}
 8000612:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8000614:	e7fe      	b.n	8000614 <UsageFault_Handler+0x4>

08000616 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8000616:	b480      	push	{r7}
 8000618:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 800061a:	bf00      	nop
 800061c:	46bd      	mov	sp, r7
 800061e:	bc80      	pop	{r7}
 8000620:	4770      	bx	lr

08000622 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8000622:	b480      	push	{r7}
 8000624:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8000626:	bf00      	nop
 8000628:	46bd      	mov	sp, r7
 800062a:	bc80      	pop	{r7}
 800062c:	4770      	bx	lr

0800062e <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 800062e:	b480      	push	{r7}
 8000630:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8000632:	bf00      	nop
 8000634:	46bd      	mov	sp, r7
 8000636:	bc80      	pop	{r7}
 8000638:	4770      	bx	lr

0800063a <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 800063a:	b580      	push	{r7, lr}
 800063c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 800063e:	f000 f893 	bl	8000768 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8000642:	bf00      	nop
 8000644:	bd80      	pop	{r7, pc}
	...

08000648 <DMA1_Channel1_IRQHandler>:

/**
  * @brief This function handles DMA1 channel1 global interrupt.
  */
void DMA1_Channel1_IRQHandler(void)
{
 8000648:	b580      	push	{r7, lr}
 800064a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Channel1_IRQn 0 */

  /* USER CODE END DMA1_Channel1_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_adc1);
 800064c:	4802      	ldr	r0, [pc, #8]	; (8000658 <DMA1_Channel1_IRQHandler+0x10>)
 800064e:	f000 fe2b 	bl	80012a8 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Channel1_IRQn 1 */

  /* USER CODE END DMA1_Channel1_IRQn 1 */
}
 8000652:	bf00      	nop
 8000654:	bd80      	pop	{r7, pc}
 8000656:	bf00      	nop
 8000658:	200003ec 	.word	0x200003ec

0800065c <USB_LP_CAN1_RX0_IRQHandler>:

/**
  * @brief This function handles USB low priority or CAN RX0 interrupts.
  */
void USB_LP_CAN1_RX0_IRQHandler(void)
{
 800065c:	b580      	push	{r7, lr}
 800065e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USB_LP_CAN1_RX0_IRQn 0 */

  /* USER CODE END USB_LP_CAN1_RX0_IRQn 0 */
  HAL_PCD_IRQHandler(&hpcd_USB_FS);
 8000660:	4802      	ldr	r0, [pc, #8]	; (800066c <USB_LP_CAN1_RX0_IRQHandler+0x10>)
 8000662:	f001 f9f8 	bl	8001a56 <HAL_PCD_IRQHandler>
  /* USER CODE BEGIN USB_LP_CAN1_RX0_IRQn 1 */

  /* USER CODE END USB_LP_CAN1_RX0_IRQn 1 */
}
 8000666:	bf00      	nop
 8000668:	bd80      	pop	{r7, pc}
 800066a:	bf00      	nop
 800066c:	20001ec0 	.word	0x20001ec0

08000670 <TIM2_IRQHandler>:

/**
  * @brief This function handles TIM2 global interrupt.
  */
void TIM2_IRQHandler(void)
{
 8000670:	b580      	push	{r7, lr}
 8000672:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM2_IRQn 0 */

  /* USER CODE END TIM2_IRQn 0 */
  HAL_TIM_IRQHandler(&htim2);
 8000674:	4802      	ldr	r0, [pc, #8]	; (8000680 <TIM2_IRQHandler+0x10>)
 8000676:	f003 f983 	bl	8003980 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM2_IRQn 1 */

  /* USER CODE END TIM2_IRQn 1 */
}
 800067a:	bf00      	nop
 800067c:	bd80      	pop	{r7, pc}
 800067e:	bf00      	nop
 8000680:	200011e0 	.word	0x200011e0

08000684 <SystemInit>:
  * @note   This function should be used only after reset.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 8000684:	b480      	push	{r7}
 8000686:	af00      	add	r7, sp, #0

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM. */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8000688:	bf00      	nop
 800068a:	46bd      	mov	sp, r7
 800068c:	bc80      	pop	{r7}
 800068e:	4770      	bx	lr

08000690 <Reset_Handler>:
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:

/* Copy the data segment initializers from flash to SRAM */
  movs r1, #0
 8000690:	2100      	movs	r1, #0
  b LoopCopyDataInit
 8000692:	e003      	b.n	800069c <LoopCopyDataInit>

08000694 <CopyDataInit>:

CopyDataInit:
  ldr r3, =_sidata
 8000694:	4b0b      	ldr	r3, [pc, #44]	; (80006c4 <LoopFillZerobss+0x14>)
  ldr r3, [r3, r1]
 8000696:	585b      	ldr	r3, [r3, r1]
  str r3, [r0, r1]
 8000698:	5043      	str	r3, [r0, r1]
  adds r1, r1, #4
 800069a:	3104      	adds	r1, #4

0800069c <LoopCopyDataInit>:

LoopCopyDataInit:
  ldr r0, =_sdata
 800069c:	480a      	ldr	r0, [pc, #40]	; (80006c8 <LoopFillZerobss+0x18>)
  ldr r3, =_edata
 800069e:	4b0b      	ldr	r3, [pc, #44]	; (80006cc <LoopFillZerobss+0x1c>)
  adds r2, r0, r1
 80006a0:	1842      	adds	r2, r0, r1
  cmp r2, r3
 80006a2:	429a      	cmp	r2, r3
  bcc CopyDataInit
 80006a4:	d3f6      	bcc.n	8000694 <CopyDataInit>
  ldr r2, =_sbss
 80006a6:	4a0a      	ldr	r2, [pc, #40]	; (80006d0 <LoopFillZerobss+0x20>)
  b LoopFillZerobss
 80006a8:	e002      	b.n	80006b0 <LoopFillZerobss>

080006aa <FillZerobss>:
/* Zero fill the bss segment. */
FillZerobss:
  movs r3, #0
 80006aa:	2300      	movs	r3, #0
  str r3, [r2], #4
 80006ac:	f842 3b04 	str.w	r3, [r2], #4

080006b0 <LoopFillZerobss>:

LoopFillZerobss:
  ldr r3, = _ebss
 80006b0:	4b08      	ldr	r3, [pc, #32]	; (80006d4 <LoopFillZerobss+0x24>)
  cmp r2, r3
 80006b2:	429a      	cmp	r2, r3
  bcc FillZerobss
 80006b4:	d3f9      	bcc.n	80006aa <FillZerobss>

/* Call the clock system intitialization function.*/
    bl  SystemInit
 80006b6:	f7ff ffe5 	bl	8000684 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 80006ba:	f007 fd5b 	bl	8008174 <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 80006be:	f7ff fd63 	bl	8000188 <main>
  bx lr
 80006c2:	4770      	bx	lr
  ldr r3, =_sidata
 80006c4:	08008258 	.word	0x08008258
  ldr r0, =_sdata
 80006c8:	20000000 	.word	0x20000000
  ldr r3, =_edata
 80006cc:	2000017c 	.word	0x2000017c
  ldr r2, =_sbss
 80006d0:	2000017c 	.word	0x2000017c
  ldr r3, = _ebss
 80006d4:	200021ac 	.word	0x200021ac

080006d8 <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 80006d8:	e7fe      	b.n	80006d8 <ADC1_2_IRQHandler>
	...

080006dc <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 80006dc:	b580      	push	{r7, lr}
 80006de:	af00      	add	r7, sp, #0
    defined(STM32F102x6) || defined(STM32F102xB) || \
    defined(STM32F103x6) || defined(STM32F103xB) || defined(STM32F103xE) || defined(STM32F103xG) || \
    defined(STM32F105xC) || defined(STM32F107xC)

  /* Prefetch buffer is not available on value line devices */
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 80006e0:	4b08      	ldr	r3, [pc, #32]	; (8000704 <HAL_Init+0x28>)
 80006e2:	681b      	ldr	r3, [r3, #0]
 80006e4:	4a07      	ldr	r2, [pc, #28]	; (8000704 <HAL_Init+0x28>)
 80006e6:	f043 0310 	orr.w	r3, r3, #16
 80006ea:	6013      	str	r3, [r2, #0]
#endif
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 80006ec:	2003      	movs	r0, #3
 80006ee:	f000 fcdf 	bl	80010b0 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 80006f2:	2000      	movs	r0, #0
 80006f4:	f000 f808 	bl	8000708 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 80006f8:	f7ff fec2 	bl	8000480 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 80006fc:	2300      	movs	r3, #0
}
 80006fe:	4618      	mov	r0, r3
 8000700:	bd80      	pop	{r7, pc}
 8000702:	bf00      	nop
 8000704:	40022000 	.word	0x40022000

08000708 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8000708:	b580      	push	{r7, lr}
 800070a:	b082      	sub	sp, #8
 800070c:	af00      	add	r7, sp, #0
 800070e:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8000710:	4b12      	ldr	r3, [pc, #72]	; (800075c <HAL_InitTick+0x54>)
 8000712:	681a      	ldr	r2, [r3, #0]
 8000714:	4b12      	ldr	r3, [pc, #72]	; (8000760 <HAL_InitTick+0x58>)
 8000716:	781b      	ldrb	r3, [r3, #0]
 8000718:	4619      	mov	r1, r3
 800071a:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 800071e:	fbb3 f3f1 	udiv	r3, r3, r1
 8000722:	fbb2 f3f3 	udiv	r3, r2, r3
 8000726:	4618      	mov	r0, r3
 8000728:	f000 fcf7 	bl	800111a <HAL_SYSTICK_Config>
 800072c:	4603      	mov	r3, r0
 800072e:	2b00      	cmp	r3, #0
 8000730:	d001      	beq.n	8000736 <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8000732:	2301      	movs	r3, #1
 8000734:	e00e      	b.n	8000754 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8000736:	687b      	ldr	r3, [r7, #4]
 8000738:	2b0f      	cmp	r3, #15
 800073a:	d80a      	bhi.n	8000752 <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 800073c:	2200      	movs	r2, #0
 800073e:	6879      	ldr	r1, [r7, #4]
 8000740:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8000744:	f000 fcbf 	bl	80010c6 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8000748:	4a06      	ldr	r2, [pc, #24]	; (8000764 <HAL_InitTick+0x5c>)
 800074a:	687b      	ldr	r3, [r7, #4]
 800074c:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 800074e:	2300      	movs	r3, #0
 8000750:	e000      	b.n	8000754 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8000752:	2301      	movs	r3, #1
}
 8000754:	4618      	mov	r0, r3
 8000756:	3708      	adds	r7, #8
 8000758:	46bd      	mov	sp, r7
 800075a:	bd80      	pop	{r7, pc}
 800075c:	20000000 	.word	0x20000000
 8000760:	20000008 	.word	0x20000008
 8000764:	20000004 	.word	0x20000004

08000768 <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8000768:	b480      	push	{r7}
 800076a:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 800076c:	4b05      	ldr	r3, [pc, #20]	; (8000784 <HAL_IncTick+0x1c>)
 800076e:	781b      	ldrb	r3, [r3, #0]
 8000770:	461a      	mov	r2, r3
 8000772:	4b05      	ldr	r3, [pc, #20]	; (8000788 <HAL_IncTick+0x20>)
 8000774:	681b      	ldr	r3, [r3, #0]
 8000776:	4413      	add	r3, r2
 8000778:	4a03      	ldr	r2, [pc, #12]	; (8000788 <HAL_IncTick+0x20>)
 800077a:	6013      	str	r3, [r2, #0]
}
 800077c:	bf00      	nop
 800077e:	46bd      	mov	sp, r7
 8000780:	bc80      	pop	{r7}
 8000782:	4770      	bx	lr
 8000784:	20000008 	.word	0x20000008
 8000788:	20001228 	.word	0x20001228

0800078c <HAL_GetTick>:
  * @note  This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 800078c:	b480      	push	{r7}
 800078e:	af00      	add	r7, sp, #0
  return uwTick;
 8000790:	4b02      	ldr	r3, [pc, #8]	; (800079c <HAL_GetTick+0x10>)
 8000792:	681b      	ldr	r3, [r3, #0]
}
 8000794:	4618      	mov	r0, r3
 8000796:	46bd      	mov	sp, r7
 8000798:	bc80      	pop	{r7}
 800079a:	4770      	bx	lr
 800079c:	20001228 	.word	0x20001228

080007a0 <HAL_ADC_Init>:
  *         of structure "ADC_InitTypeDef".
  * @param  hadc: ADC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef* hadc)
{
 80007a0:	b580      	push	{r7, lr}
 80007a2:	b086      	sub	sp, #24
 80007a4:	af00      	add	r7, sp, #0
 80007a6:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 80007a8:	2300      	movs	r3, #0
 80007aa:	75fb      	strb	r3, [r7, #23]
  uint32_t tmp_cr1 = 0U;
 80007ac:	2300      	movs	r3, #0
 80007ae:	613b      	str	r3, [r7, #16]
  uint32_t tmp_cr2 = 0U;
 80007b0:	2300      	movs	r3, #0
 80007b2:	60bb      	str	r3, [r7, #8]
  uint32_t tmp_sqr1 = 0U;
 80007b4:	2300      	movs	r3, #0
 80007b6:	60fb      	str	r3, [r7, #12]
  
  /* Check ADC handle */
  if(hadc == NULL)
 80007b8:	687b      	ldr	r3, [r7, #4]
 80007ba:	2b00      	cmp	r3, #0
 80007bc:	d101      	bne.n	80007c2 <HAL_ADC_Init+0x22>
  {
    return HAL_ERROR;
 80007be:	2301      	movs	r3, #1
 80007c0:	e0be      	b.n	8000940 <HAL_ADC_Init+0x1a0>
  assert_param(IS_ADC_DATA_ALIGN(hadc->Init.DataAlign));
  assert_param(IS_ADC_SCAN_MODE(hadc->Init.ScanConvMode));
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.ContinuousConvMode));
  assert_param(IS_ADC_EXTTRIG(hadc->Init.ExternalTrigConv));
  
  if(hadc->Init.ScanConvMode != ADC_SCAN_DISABLE)
 80007c2:	687b      	ldr	r3, [r7, #4]
 80007c4:	689b      	ldr	r3, [r3, #8]
 80007c6:	2b00      	cmp	r3, #0
  /* Refer to header of this file for more details on clock enabling          */
  /* procedure.                                                               */

  /* Actions performed only if ADC is coming from state reset:                */
  /* - Initialization of ADC MSP                                              */
  if (hadc->State == HAL_ADC_STATE_RESET)
 80007c8:	687b      	ldr	r3, [r7, #4]
 80007ca:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80007cc:	2b00      	cmp	r3, #0
 80007ce:	d109      	bne.n	80007e4 <HAL_ADC_Init+0x44>
  {
    /* Initialize ADC error code */
    ADC_CLEAR_ERRORCODE(hadc);
 80007d0:	687b      	ldr	r3, [r7, #4]
 80007d2:	2200      	movs	r2, #0
 80007d4:	62da      	str	r2, [r3, #44]	; 0x2c
    
    /* Allocate lock resource and initialize it */
    hadc->Lock = HAL_UNLOCKED;
 80007d6:	687b      	ldr	r3, [r7, #4]
 80007d8:	2200      	movs	r2, #0
 80007da:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
    
    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 80007de:	6878      	ldr	r0, [r7, #4]
 80007e0:	f7ff fe80 	bl	80004e4 <HAL_ADC_MspInit>
  /* Stop potential conversion on going, on regular and injected groups */
  /* Disable ADC peripheral */
  /* Note: In case of ADC already enabled, precaution to not launch an        */
  /*       unwanted conversion while modifying register CR2 by writing 1 to   */
  /*       bit ADON.                                                          */
  tmp_hal_status = ADC_ConversionStop_Disable(hadc);
 80007e4:	6878      	ldr	r0, [r7, #4]
 80007e6:	f000 faf7 	bl	8000dd8 <ADC_ConversionStop_Disable>
 80007ea:	4603      	mov	r3, r0
 80007ec:	75fb      	strb	r3, [r7, #23]
  
  
  /* Configuration of ADC parameters if previous preliminary actions are      */ 
  /* correctly completed.                                                     */
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL) &&
 80007ee:	687b      	ldr	r3, [r7, #4]
 80007f0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80007f2:	f003 0310 	and.w	r3, r3, #16
 80007f6:	2b00      	cmp	r3, #0
 80007f8:	f040 8099 	bne.w	800092e <HAL_ADC_Init+0x18e>
 80007fc:	7dfb      	ldrb	r3, [r7, #23]
 80007fe:	2b00      	cmp	r3, #0
 8000800:	f040 8095 	bne.w	800092e <HAL_ADC_Init+0x18e>
      (tmp_hal_status == HAL_OK)                                  )
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8000804:	687b      	ldr	r3, [r7, #4]
 8000806:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8000808:	f423 5388 	bic.w	r3, r3, #4352	; 0x1100
 800080c:	f023 0302 	bic.w	r3, r3, #2
 8000810:	f043 0202 	orr.w	r2, r3, #2
 8000814:	687b      	ldr	r3, [r7, #4]
 8000816:	629a      	str	r2, [r3, #40]	; 0x28
    /*  - continuous conversion mode                                          */
    /* Note: External trigger polarity (ADC_CR2_EXTTRIG) is set into          */
    /*       HAL_ADC_Start_xxx functions because if set in this function,     */
    /*       a conversion on injected group would start a conversion also on  */
    /*       regular group after ADC enabling.                                */
    tmp_cr2 |= (hadc->Init.DataAlign                                          |
 8000818:	687b      	ldr	r3, [r7, #4]
 800081a:	685a      	ldr	r2, [r3, #4]
                ADC_CFGR_EXTSEL(hadc, hadc->Init.ExternalTrigConv)            |
 800081c:	687b      	ldr	r3, [r7, #4]
 800081e:	69db      	ldr	r3, [r3, #28]
    tmp_cr2 |= (hadc->Init.DataAlign                                          |
 8000820:	431a      	orrs	r2, r3
                ADC_CR2_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)   );
 8000822:	687b      	ldr	r3, [r7, #4]
 8000824:	7b1b      	ldrb	r3, [r3, #12]
 8000826:	005b      	lsls	r3, r3, #1
                ADC_CFGR_EXTSEL(hadc, hadc->Init.ExternalTrigConv)            |
 8000828:	4313      	orrs	r3, r2
    tmp_cr2 |= (hadc->Init.DataAlign                                          |
 800082a:	68ba      	ldr	r2, [r7, #8]
 800082c:	4313      	orrs	r3, r2
 800082e:	60bb      	str	r3, [r7, #8]

    /* Configuration of ADC:                                                  */
    /*  - scan mode                                                           */
    /*  - discontinuous mode disable/enable                                   */
    /*  - discontinuous mode number of conversions                            */
    tmp_cr1 |= (ADC_CR1_SCAN_SET(hadc->Init.ScanConvMode));
 8000830:	687b      	ldr	r3, [r7, #4]
 8000832:	689b      	ldr	r3, [r3, #8]
 8000834:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8000838:	d003      	beq.n	8000842 <HAL_ADC_Init+0xa2>
 800083a:	687b      	ldr	r3, [r7, #4]
 800083c:	689b      	ldr	r3, [r3, #8]
 800083e:	2b01      	cmp	r3, #1
 8000840:	d102      	bne.n	8000848 <HAL_ADC_Init+0xa8>
 8000842:	f44f 7380 	mov.w	r3, #256	; 0x100
 8000846:	e000      	b.n	800084a <HAL_ADC_Init+0xaa>
 8000848:	2300      	movs	r3, #0
 800084a:	693a      	ldr	r2, [r7, #16]
 800084c:	4313      	orrs	r3, r2
 800084e:	613b      	str	r3, [r7, #16]
    
    /* Enable discontinuous mode only if continuous mode is disabled */
    /* Note: If parameter "Init.ScanConvMode" is set to disable, parameter    */
    /*       discontinuous is set anyway, but will have no effect on ADC HW.  */
    if (hadc->Init.DiscontinuousConvMode == ENABLE)
 8000850:	687b      	ldr	r3, [r7, #4]
 8000852:	7d1b      	ldrb	r3, [r3, #20]
 8000854:	2b01      	cmp	r3, #1
 8000856:	d119      	bne.n	800088c <HAL_ADC_Init+0xec>
    {
      if (hadc->Init.ContinuousConvMode == DISABLE)
 8000858:	687b      	ldr	r3, [r7, #4]
 800085a:	7b1b      	ldrb	r3, [r3, #12]
 800085c:	2b00      	cmp	r3, #0
 800085e:	d109      	bne.n	8000874 <HAL_ADC_Init+0xd4>
      {
        /* Enable the selected ADC regular discontinuous mode */
        /* Set the number of channels to be converted in discontinuous mode */
        SET_BIT(tmp_cr1, ADC_CR1_DISCEN                                            |
 8000860:	687b      	ldr	r3, [r7, #4]
 8000862:	699b      	ldr	r3, [r3, #24]
 8000864:	3b01      	subs	r3, #1
 8000866:	035a      	lsls	r2, r3, #13
 8000868:	693b      	ldr	r3, [r7, #16]
 800086a:	4313      	orrs	r3, r2
 800086c:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 8000870:	613b      	str	r3, [r7, #16]
 8000872:	e00b      	b.n	800088c <HAL_ADC_Init+0xec>
      {
        /* ADC regular group settings continuous and sequencer discontinuous*/
        /* cannot be enabled simultaneously.                                */
        
        /* Update ADC state machine to error */
        SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8000874:	687b      	ldr	r3, [r7, #4]
 8000876:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8000878:	f043 0220 	orr.w	r2, r3, #32
 800087c:	687b      	ldr	r3, [r7, #4]
 800087e:	629a      	str	r2, [r3, #40]	; 0x28
        
        /* Set ADC error code to ADC IP internal error */
        SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8000880:	687b      	ldr	r3, [r7, #4]
 8000882:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8000884:	f043 0201 	orr.w	r2, r3, #1
 8000888:	687b      	ldr	r3, [r7, #4]
 800088a:	62da      	str	r2, [r3, #44]	; 0x2c
      }
    }
    
    /* Update ADC configuration register CR1 with previous settings */
      MODIFY_REG(hadc->Instance->CR1,
 800088c:	687b      	ldr	r3, [r7, #4]
 800088e:	681b      	ldr	r3, [r3, #0]
 8000890:	685b      	ldr	r3, [r3, #4]
 8000892:	f423 4169 	bic.w	r1, r3, #59648	; 0xe900
 8000896:	687b      	ldr	r3, [r7, #4]
 8000898:	681b      	ldr	r3, [r3, #0]
 800089a:	693a      	ldr	r2, [r7, #16]
 800089c:	430a      	orrs	r2, r1
 800089e:	605a      	str	r2, [r3, #4]
                 ADC_CR1_DISCEN  |
                 ADC_CR1_DISCNUM    ,
                 tmp_cr1             );
    
    /* Update ADC configuration register CR2 with previous settings */
      MODIFY_REG(hadc->Instance->CR2,
 80008a0:	687b      	ldr	r3, [r7, #4]
 80008a2:	681b      	ldr	r3, [r3, #0]
 80008a4:	689a      	ldr	r2, [r3, #8]
 80008a6:	4b28      	ldr	r3, [pc, #160]	; (8000948 <HAL_ADC_Init+0x1a8>)
 80008a8:	4013      	ands	r3, r2
 80008aa:	687a      	ldr	r2, [r7, #4]
 80008ac:	6812      	ldr	r2, [r2, #0]
 80008ae:	68b9      	ldr	r1, [r7, #8]
 80008b0:	430b      	orrs	r3, r1
 80008b2:	6093      	str	r3, [r2, #8]
    /*   Note: Scan mode is present by hardware on this device and, if        */
    /*   disabled, discards automatically nb of conversions. Anyway, nb of    */
    /*   conversions is forced to 0x00 for alignment over all STM32 devices.  */
    /* - if scan mode is enabled, regular channels sequence length is set to  */
    /*   parameter "NbrOfConversion"                                          */
    if (ADC_CR1_SCAN_SET(hadc->Init.ScanConvMode) == ADC_SCAN_ENABLE)
 80008b4:	687b      	ldr	r3, [r7, #4]
 80008b6:	689b      	ldr	r3, [r3, #8]
 80008b8:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80008bc:	d003      	beq.n	80008c6 <HAL_ADC_Init+0x126>
 80008be:	687b      	ldr	r3, [r7, #4]
 80008c0:	689b      	ldr	r3, [r3, #8]
 80008c2:	2b01      	cmp	r3, #1
 80008c4:	d104      	bne.n	80008d0 <HAL_ADC_Init+0x130>
    {
      tmp_sqr1 = ADC_SQR1_L_SHIFT(hadc->Init.NbrOfConversion);
 80008c6:	687b      	ldr	r3, [r7, #4]
 80008c8:	691b      	ldr	r3, [r3, #16]
 80008ca:	3b01      	subs	r3, #1
 80008cc:	051b      	lsls	r3, r3, #20
 80008ce:	60fb      	str	r3, [r7, #12]
    }
      
    MODIFY_REG(hadc->Instance->SQR1,
 80008d0:	687b      	ldr	r3, [r7, #4]
 80008d2:	681b      	ldr	r3, [r3, #0]
 80008d4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80008d6:	f423 0170 	bic.w	r1, r3, #15728640	; 0xf00000
 80008da:	687b      	ldr	r3, [r7, #4]
 80008dc:	681b      	ldr	r3, [r3, #0]
 80008de:	68fa      	ldr	r2, [r7, #12]
 80008e0:	430a      	orrs	r2, r1
 80008e2:	62da      	str	r2, [r3, #44]	; 0x2c
    /* ensure of no potential problem of ADC core IP clocking.                */
    /* Check through register CR2 (excluding bits set in other functions:     */
    /* execution control bits (ADON, JSWSTART, SWSTART), regular group bits   */
    /* (DMA), injected group bits (JEXTTRIG and JEXTSEL), channel internal    */
    /* measurement path bit (TSVREFE).                                        */
    if (READ_BIT(hadc->Instance->CR2, ~(ADC_CR2_ADON | ADC_CR2_DMA |
 80008e4:	687b      	ldr	r3, [r7, #4]
 80008e6:	681b      	ldr	r3, [r3, #0]
 80008e8:	689a      	ldr	r2, [r3, #8]
 80008ea:	4b18      	ldr	r3, [pc, #96]	; (800094c <HAL_ADC_Init+0x1ac>)
 80008ec:	4013      	ands	r3, r2
 80008ee:	68ba      	ldr	r2, [r7, #8]
 80008f0:	429a      	cmp	r2, r3
 80008f2:	d10b      	bne.n	800090c <HAL_ADC_Init+0x16c>
                                        ADC_CR2_JEXTTRIG | ADC_CR2_JEXTSEL |
                                        ADC_CR2_TSVREFE                     ))
         == tmp_cr2)
    {
      /* Set ADC error code to none */
      ADC_CLEAR_ERRORCODE(hadc);
 80008f4:	687b      	ldr	r3, [r7, #4]
 80008f6:	2200      	movs	r2, #0
 80008f8:	62da      	str	r2, [r3, #44]	; 0x2c
      
      /* Set the ADC state */
      ADC_STATE_CLR_SET(hadc->State,
 80008fa:	687b      	ldr	r3, [r7, #4]
 80008fc:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80008fe:	f023 0303 	bic.w	r3, r3, #3
 8000902:	f043 0201 	orr.w	r2, r3, #1
 8000906:	687b      	ldr	r3, [r7, #4]
 8000908:	629a      	str	r2, [r3, #40]	; 0x28
    if (READ_BIT(hadc->Instance->CR2, ~(ADC_CR2_ADON | ADC_CR2_DMA |
 800090a:	e018      	b.n	800093e <HAL_ADC_Init+0x19e>
                        HAL_ADC_STATE_READY);
    }
    else
    {
      /* Update ADC state machine to error */
      ADC_STATE_CLR_SET(hadc->State,
 800090c:	687b      	ldr	r3, [r7, #4]
 800090e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8000910:	f023 0312 	bic.w	r3, r3, #18
 8000914:	f043 0210 	orr.w	r2, r3, #16
 8000918:	687b      	ldr	r3, [r7, #4]
 800091a:	629a      	str	r2, [r3, #40]	; 0x28
                        HAL_ADC_STATE_BUSY_INTERNAL,
                        HAL_ADC_STATE_ERROR_INTERNAL);
      
      /* Set ADC error code to ADC IP internal error */
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 800091c:	687b      	ldr	r3, [r7, #4]
 800091e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8000920:	f043 0201 	orr.w	r2, r3, #1
 8000924:	687b      	ldr	r3, [r7, #4]
 8000926:	62da      	str	r2, [r3, #44]	; 0x2c
      
      tmp_hal_status = HAL_ERROR;
 8000928:	2301      	movs	r3, #1
 800092a:	75fb      	strb	r3, [r7, #23]
    if (READ_BIT(hadc->Instance->CR2, ~(ADC_CR2_ADON | ADC_CR2_DMA |
 800092c:	e007      	b.n	800093e <HAL_ADC_Init+0x19e>
  
  }
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 800092e:	687b      	ldr	r3, [r7, #4]
 8000930:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8000932:	f043 0210 	orr.w	r2, r3, #16
 8000936:	687b      	ldr	r3, [r7, #4]
 8000938:	629a      	str	r2, [r3, #40]	; 0x28
        
    tmp_hal_status = HAL_ERROR;
 800093a:	2301      	movs	r3, #1
 800093c:	75fb      	strb	r3, [r7, #23]
  }
  
  /* Return function status */
  return tmp_hal_status;
 800093e:	7dfb      	ldrb	r3, [r7, #23]
}
 8000940:	4618      	mov	r0, r3
 8000942:	3718      	adds	r7, #24
 8000944:	46bd      	mov	sp, r7
 8000946:	bd80      	pop	{r7, pc}
 8000948:	ffe1f7fd 	.word	0xffe1f7fd
 800094c:	ff1f0efe 	.word	0xff1f0efe

08000950 <HAL_ADC_Start_DMA>:
  * @param  pData: The destination Buffer address.
  * @param  Length: The length of data to be transferred from ADC peripheral to memory.
  * @retval None
  */
HAL_StatusTypeDef HAL_ADC_Start_DMA(ADC_HandleTypeDef* hadc, uint32_t* pData, uint32_t Length)
{
 8000950:	b580      	push	{r7, lr}
 8000952:	b086      	sub	sp, #24
 8000954:	af00      	add	r7, sp, #0
 8000956:	60f8      	str	r0, [r7, #12]
 8000958:	60b9      	str	r1, [r7, #8]
 800095a:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 800095c:	2300      	movs	r3, #0
 800095e:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_ADC_DMA_CAPABILITY_INSTANCE(hadc->Instance));
    
  /* Verification if multimode is disabled (for devices with several ADC)     */
  /* If multimode is enabled, dedicated function multimode conversion         */
  /* start DMA must be used.                                                  */
  if(ADC_MULTIMODE_IS_ENABLE(hadc) == RESET)
 8000960:	68fb      	ldr	r3, [r7, #12]
 8000962:	681b      	ldr	r3, [r3, #0]
 8000964:	4a64      	ldr	r2, [pc, #400]	; (8000af8 <HAL_ADC_Start_DMA+0x1a8>)
 8000966:	4293      	cmp	r3, r2
 8000968:	d004      	beq.n	8000974 <HAL_ADC_Start_DMA+0x24>
 800096a:	68fb      	ldr	r3, [r7, #12]
 800096c:	681b      	ldr	r3, [r3, #0]
 800096e:	4a63      	ldr	r2, [pc, #396]	; (8000afc <HAL_ADC_Start_DMA+0x1ac>)
 8000970:	4293      	cmp	r3, r2
 8000972:	d106      	bne.n	8000982 <HAL_ADC_Start_DMA+0x32>
 8000974:	4b60      	ldr	r3, [pc, #384]	; (8000af8 <HAL_ADC_Start_DMA+0x1a8>)
 8000976:	685b      	ldr	r3, [r3, #4]
 8000978:	f403 2370 	and.w	r3, r3, #983040	; 0xf0000
 800097c:	2b00      	cmp	r3, #0
 800097e:	f040 80b3 	bne.w	8000ae8 <HAL_ADC_Start_DMA+0x198>
  {
    /* Process locked */
    __HAL_LOCK(hadc);
 8000982:	68fb      	ldr	r3, [r7, #12]
 8000984:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 8000988:	2b01      	cmp	r3, #1
 800098a:	d101      	bne.n	8000990 <HAL_ADC_Start_DMA+0x40>
 800098c:	2302      	movs	r3, #2
 800098e:	e0ae      	b.n	8000aee <HAL_ADC_Start_DMA+0x19e>
 8000990:	68fb      	ldr	r3, [r7, #12]
 8000992:	2201      	movs	r2, #1
 8000994:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
    
    /* Enable the ADC peripheral */
    tmp_hal_status = ADC_Enable(hadc);
 8000998:	68f8      	ldr	r0, [r7, #12]
 800099a:	f000 f9cb 	bl	8000d34 <ADC_Enable>
 800099e:	4603      	mov	r3, r0
 80009a0:	75fb      	strb	r3, [r7, #23]
    
    /* Start conversion if ADC is effectively enabled */
    if (tmp_hal_status == HAL_OK)
 80009a2:	7dfb      	ldrb	r3, [r7, #23]
 80009a4:	2b00      	cmp	r3, #0
 80009a6:	f040 809a 	bne.w	8000ade <HAL_ADC_Start_DMA+0x18e>
    {
      /* Set ADC state                                                        */
      /* - Clear state bitfield related to regular group conversion results   */
      /* - Set state bitfield related to regular operation                    */
      ADC_STATE_CLR_SET(hadc->State,
 80009aa:	68fb      	ldr	r3, [r7, #12]
 80009ac:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80009ae:	f423 6370 	bic.w	r3, r3, #3840	; 0xf00
 80009b2:	f023 0301 	bic.w	r3, r3, #1
 80009b6:	f443 7280 	orr.w	r2, r3, #256	; 0x100
 80009ba:	68fb      	ldr	r3, [r7, #12]
 80009bc:	629a      	str	r2, [r3, #40]	; 0x28
                        HAL_ADC_STATE_REG_BUSY);
    
    /* Set group injected state (from auto-injection) and multimode state     */
    /* for all cases of multimode: independent mode, multimode ADC master     */
    /* or multimode ADC slave (for devices with several ADCs):                */
    if (ADC_NONMULTIMODE_OR_MULTIMODEMASTER(hadc))
 80009be:	68fb      	ldr	r3, [r7, #12]
 80009c0:	681b      	ldr	r3, [r3, #0]
 80009c2:	4a4e      	ldr	r2, [pc, #312]	; (8000afc <HAL_ADC_Start_DMA+0x1ac>)
 80009c4:	4293      	cmp	r3, r2
 80009c6:	d105      	bne.n	80009d4 <HAL_ADC_Start_DMA+0x84>
 80009c8:	4b4b      	ldr	r3, [pc, #300]	; (8000af8 <HAL_ADC_Start_DMA+0x1a8>)
 80009ca:	685b      	ldr	r3, [r3, #4]
 80009cc:	f403 2370 	and.w	r3, r3, #983040	; 0xf0000
 80009d0:	2b00      	cmp	r3, #0
 80009d2:	d115      	bne.n	8000a00 <HAL_ADC_Start_DMA+0xb0>
    {
      /* Set ADC state (ADC independent or master) */
      CLEAR_BIT(hadc->State, HAL_ADC_STATE_MULTIMODE_SLAVE);
 80009d4:	68fb      	ldr	r3, [r7, #12]
 80009d6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80009d8:	f423 1280 	bic.w	r2, r3, #1048576	; 0x100000
 80009dc:	68fb      	ldr	r3, [r7, #12]
 80009de:	629a      	str	r2, [r3, #40]	; 0x28
      
      /* If conversions on group regular are also triggering group injected,  */
      /* update ADC state.                                                    */
      if (READ_BIT(hadc->Instance->CR1, ADC_CR1_JAUTO) != RESET)
 80009e0:	68fb      	ldr	r3, [r7, #12]
 80009e2:	681b      	ldr	r3, [r3, #0]
 80009e4:	685b      	ldr	r3, [r3, #4]
 80009e6:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80009ea:	2b00      	cmp	r3, #0
 80009ec:	d026      	beq.n	8000a3c <HAL_ADC_Start_DMA+0xec>
      {
        ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_INJ_EOC, HAL_ADC_STATE_INJ_BUSY);  
 80009ee:	68fb      	ldr	r3, [r7, #12]
 80009f0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80009f2:	f423 5340 	bic.w	r3, r3, #12288	; 0x3000
 80009f6:	f443 5280 	orr.w	r2, r3, #4096	; 0x1000
 80009fa:	68fb      	ldr	r3, [r7, #12]
 80009fc:	629a      	str	r2, [r3, #40]	; 0x28
      if (READ_BIT(hadc->Instance->CR1, ADC_CR1_JAUTO) != RESET)
 80009fe:	e01d      	b.n	8000a3c <HAL_ADC_Start_DMA+0xec>
      }
    }
    else
    {
      /* Set ADC state (ADC slave) */
      SET_BIT(hadc->State, HAL_ADC_STATE_MULTIMODE_SLAVE);
 8000a00:	68fb      	ldr	r3, [r7, #12]
 8000a02:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8000a04:	f443 1280 	orr.w	r2, r3, #1048576	; 0x100000
 8000a08:	68fb      	ldr	r3, [r7, #12]
 8000a0a:	629a      	str	r2, [r3, #40]	; 0x28
      
      /* If conversions on group regular are also triggering group injected,  */
      /* update ADC state.                                                    */
      if (ADC_MULTIMODE_AUTO_INJECTED(hadc))
 8000a0c:	68fb      	ldr	r3, [r7, #12]
 8000a0e:	681b      	ldr	r3, [r3, #0]
 8000a10:	4a39      	ldr	r2, [pc, #228]	; (8000af8 <HAL_ADC_Start_DMA+0x1a8>)
 8000a12:	4293      	cmp	r3, r2
 8000a14:	d004      	beq.n	8000a20 <HAL_ADC_Start_DMA+0xd0>
 8000a16:	68fb      	ldr	r3, [r7, #12]
 8000a18:	681b      	ldr	r3, [r3, #0]
 8000a1a:	4a38      	ldr	r2, [pc, #224]	; (8000afc <HAL_ADC_Start_DMA+0x1ac>)
 8000a1c:	4293      	cmp	r3, r2
 8000a1e:	d10d      	bne.n	8000a3c <HAL_ADC_Start_DMA+0xec>
 8000a20:	4b35      	ldr	r3, [pc, #212]	; (8000af8 <HAL_ADC_Start_DMA+0x1a8>)
 8000a22:	685b      	ldr	r3, [r3, #4]
 8000a24:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8000a28:	2b00      	cmp	r3, #0
 8000a2a:	d007      	beq.n	8000a3c <HAL_ADC_Start_DMA+0xec>
      {
        ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_INJ_EOC, HAL_ADC_STATE_INJ_BUSY);
 8000a2c:	68fb      	ldr	r3, [r7, #12]
 8000a2e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8000a30:	f423 5340 	bic.w	r3, r3, #12288	; 0x3000
 8000a34:	f443 5280 	orr.w	r2, r3, #4096	; 0x1000
 8000a38:	68fb      	ldr	r3, [r7, #12]
 8000a3a:	629a      	str	r2, [r3, #40]	; 0x28
      }
    }
      
      /* State machine update: Check if an injected conversion is ongoing */
      if (HAL_IS_BIT_SET(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 8000a3c:	68fb      	ldr	r3, [r7, #12]
 8000a3e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8000a40:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8000a44:	2b00      	cmp	r3, #0
 8000a46:	d006      	beq.n	8000a56 <HAL_ADC_Start_DMA+0x106>
      {
        /* Reset ADC error code fields related to conversions on group regular */
        CLEAR_BIT(hadc->ErrorCode, (HAL_ADC_ERROR_OVR | HAL_ADC_ERROR_DMA));         
 8000a48:	68fb      	ldr	r3, [r7, #12]
 8000a4a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8000a4c:	f023 0206 	bic.w	r2, r3, #6
 8000a50:	68fb      	ldr	r3, [r7, #12]
 8000a52:	62da      	str	r2, [r3, #44]	; 0x2c
 8000a54:	e002      	b.n	8000a5c <HAL_ADC_Start_DMA+0x10c>
      }
      else
      {
        /* Reset ADC all error code fields */
        ADC_CLEAR_ERRORCODE(hadc);
 8000a56:	68fb      	ldr	r3, [r7, #12]
 8000a58:	2200      	movs	r2, #0
 8000a5a:	62da      	str	r2, [r3, #44]	; 0x2c
      }
      
      /* Process unlocked */
      /* Unlock before starting ADC conversions: in case of potential         */
      /* interruption, to let the process to ADC IRQ Handler.                 */
      __HAL_UNLOCK(hadc);
 8000a5c:	68fb      	ldr	r3, [r7, #12]
 8000a5e:	2200      	movs	r2, #0
 8000a60:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
      
      /* Set the DMA transfer complete callback */
      hadc->DMA_Handle->XferCpltCallback = ADC_DMAConvCplt;
 8000a64:	68fb      	ldr	r3, [r7, #12]
 8000a66:	6a1b      	ldr	r3, [r3, #32]
 8000a68:	4a25      	ldr	r2, [pc, #148]	; (8000b00 <HAL_ADC_Start_DMA+0x1b0>)
 8000a6a:	629a      	str	r2, [r3, #40]	; 0x28

      /* Set the DMA half transfer complete callback */
      hadc->DMA_Handle->XferHalfCpltCallback = ADC_DMAHalfConvCplt;
 8000a6c:	68fb      	ldr	r3, [r7, #12]
 8000a6e:	6a1b      	ldr	r3, [r3, #32]
 8000a70:	4a24      	ldr	r2, [pc, #144]	; (8000b04 <HAL_ADC_Start_DMA+0x1b4>)
 8000a72:	62da      	str	r2, [r3, #44]	; 0x2c
      
      /* Set the DMA error callback */
      hadc->DMA_Handle->XferErrorCallback = ADC_DMAError;
 8000a74:	68fb      	ldr	r3, [r7, #12]
 8000a76:	6a1b      	ldr	r3, [r3, #32]
 8000a78:	4a23      	ldr	r2, [pc, #140]	; (8000b08 <HAL_ADC_Start_DMA+0x1b8>)
 8000a7a:	631a      	str	r2, [r3, #48]	; 0x30
      /* start (in case of SW start):                                         */
      
      /* Clear regular group conversion flag and overrun flag */
      /* (To ensure of no unknown state from potential previous ADC           */
      /* operations)                                                          */
      __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_EOC);
 8000a7c:	68fb      	ldr	r3, [r7, #12]
 8000a7e:	681b      	ldr	r3, [r3, #0]
 8000a80:	f06f 0202 	mvn.w	r2, #2
 8000a84:	601a      	str	r2, [r3, #0]
      
      /* Enable ADC DMA mode */
      SET_BIT(hadc->Instance->CR2, ADC_CR2_DMA);
 8000a86:	68fb      	ldr	r3, [r7, #12]
 8000a88:	681b      	ldr	r3, [r3, #0]
 8000a8a:	689a      	ldr	r2, [r3, #8]
 8000a8c:	68fb      	ldr	r3, [r7, #12]
 8000a8e:	681b      	ldr	r3, [r3, #0]
 8000a90:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8000a94:	609a      	str	r2, [r3, #8]
      
      /* Start the DMA channel */
      HAL_DMA_Start_IT(hadc->DMA_Handle, (uint32_t)&hadc->Instance->DR, (uint32_t)pData, Length);
 8000a96:	68fb      	ldr	r3, [r7, #12]
 8000a98:	6a18      	ldr	r0, [r3, #32]
 8000a9a:	68fb      	ldr	r3, [r7, #12]
 8000a9c:	681b      	ldr	r3, [r3, #0]
 8000a9e:	334c      	adds	r3, #76	; 0x4c
 8000aa0:	4619      	mov	r1, r3
 8000aa2:	68ba      	ldr	r2, [r7, #8]
 8000aa4:	687b      	ldr	r3, [r7, #4]
 8000aa6:	f000 fb9f 	bl	80011e8 <HAL_DMA_Start_IT>
      
      /* Enable conversion of regular group.                                  */
      /* If software start has been selected, conversion starts immediately.  */
      /* If external trigger has been selected, conversion will start at next */
      /* trigger event.                                                       */
      if (ADC_IS_SOFTWARE_START_REGULAR(hadc))
 8000aaa:	68fb      	ldr	r3, [r7, #12]
 8000aac:	681b      	ldr	r3, [r3, #0]
 8000aae:	689b      	ldr	r3, [r3, #8]
 8000ab0:	f403 2360 	and.w	r3, r3, #917504	; 0xe0000
 8000ab4:	f5b3 2f60 	cmp.w	r3, #917504	; 0xe0000
 8000ab8:	d108      	bne.n	8000acc <HAL_ADC_Start_DMA+0x17c>
      {
        /* Start ADC conversion on regular group with SW start */
        SET_BIT(hadc->Instance->CR2, (ADC_CR2_SWSTART | ADC_CR2_EXTTRIG));
 8000aba:	68fb      	ldr	r3, [r7, #12]
 8000abc:	681b      	ldr	r3, [r3, #0]
 8000abe:	689a      	ldr	r2, [r3, #8]
 8000ac0:	68fb      	ldr	r3, [r7, #12]
 8000ac2:	681b      	ldr	r3, [r3, #0]
 8000ac4:	f442 02a0 	orr.w	r2, r2, #5242880	; 0x500000
 8000ac8:	609a      	str	r2, [r3, #8]
    if (tmp_hal_status == HAL_OK)
 8000aca:	e00f      	b.n	8000aec <HAL_ADC_Start_DMA+0x19c>
      }
      else
      {
        /* Start ADC conversion on regular group with external trigger */
        SET_BIT(hadc->Instance->CR2, ADC_CR2_EXTTRIG);
 8000acc:	68fb      	ldr	r3, [r7, #12]
 8000ace:	681b      	ldr	r3, [r3, #0]
 8000ad0:	689a      	ldr	r2, [r3, #8]
 8000ad2:	68fb      	ldr	r3, [r7, #12]
 8000ad4:	681b      	ldr	r3, [r3, #0]
 8000ad6:	f442 1280 	orr.w	r2, r2, #1048576	; 0x100000
 8000ada:	609a      	str	r2, [r3, #8]
    if (tmp_hal_status == HAL_OK)
 8000adc:	e006      	b.n	8000aec <HAL_ADC_Start_DMA+0x19c>
      }
    }
    else
    {
      /* Process unlocked */
      __HAL_UNLOCK(hadc);
 8000ade:	68fb      	ldr	r3, [r7, #12]
 8000ae0:	2200      	movs	r2, #0
 8000ae2:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
    if (tmp_hal_status == HAL_OK)
 8000ae6:	e001      	b.n	8000aec <HAL_ADC_Start_DMA+0x19c>
    }
  }
  else
  {
    tmp_hal_status = HAL_ERROR;
 8000ae8:	2301      	movs	r3, #1
 8000aea:	75fb      	strb	r3, [r7, #23]
  }
  
  /* Return function status */
  return tmp_hal_status;
 8000aec:	7dfb      	ldrb	r3, [r7, #23]
}
 8000aee:	4618      	mov	r0, r3
 8000af0:	3718      	adds	r7, #24
 8000af2:	46bd      	mov	sp, r7
 8000af4:	bd80      	pop	{r7, pc}
 8000af6:	bf00      	nop
 8000af8:	40012400 	.word	0x40012400
 8000afc:	40012800 	.word	0x40012800
 8000b00:	08000e4d 	.word	0x08000e4d
 8000b04:	08000ec9 	.word	0x08000ec9
 8000b08:	08000ee5 	.word	0x08000ee5

08000b0c <HAL_ADC_ConvCpltCallback>:
  * @brief  Conversion complete callback in non blocking mode 
  * @param  hadc: ADC handle
  * @retval None
  */
__weak void HAL_ADC_ConvCpltCallback(ADC_HandleTypeDef* hadc)
{
 8000b0c:	b480      	push	{r7}
 8000b0e:	b083      	sub	sp, #12
 8000b10:	af00      	add	r7, sp, #0
 8000b12:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(hadc);
  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADC_ConvCpltCallback must be implemented in the user file.
   */
}
 8000b14:	bf00      	nop
 8000b16:	370c      	adds	r7, #12
 8000b18:	46bd      	mov	sp, r7
 8000b1a:	bc80      	pop	{r7}
 8000b1c:	4770      	bx	lr

08000b1e <HAL_ADC_ConvHalfCpltCallback>:
  * @brief  Conversion DMA half-transfer callback in non blocking mode 
  * @param  hadc: ADC handle
  * @retval None
  */
__weak void HAL_ADC_ConvHalfCpltCallback(ADC_HandleTypeDef* hadc)
{
 8000b1e:	b480      	push	{r7}
 8000b20:	b083      	sub	sp, #12
 8000b22:	af00      	add	r7, sp, #0
 8000b24:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(hadc);
  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADC_ConvHalfCpltCallback must be implemented in the user file.
  */
}
 8000b26:	bf00      	nop
 8000b28:	370c      	adds	r7, #12
 8000b2a:	46bd      	mov	sp, r7
 8000b2c:	bc80      	pop	{r7}
 8000b2e:	4770      	bx	lr

08000b30 <HAL_ADC_ErrorCallback>:
  *        (ADC conversion with interruption or transfer by DMA)
  * @param  hadc: ADC handle
  * @retval None
  */
__weak void HAL_ADC_ErrorCallback(ADC_HandleTypeDef *hadc)
{
 8000b30:	b480      	push	{r7}
 8000b32:	b083      	sub	sp, #12
 8000b34:	af00      	add	r7, sp, #0
 8000b36:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(hadc);
  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADC_ErrorCallback must be implemented in the user file.
  */
}
 8000b38:	bf00      	nop
 8000b3a:	370c      	adds	r7, #12
 8000b3c:	46bd      	mov	sp, r7
 8000b3e:	bc80      	pop	{r7}
 8000b40:	4770      	bx	lr
	...

08000b44 <HAL_ADC_ConfigChannel>:
  * @param  hadc: ADC handle
  * @param  sConfig: Structure of ADC channel for regular group.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef* hadc, ADC_ChannelConfTypeDef* sConfig)
{ 
 8000b44:	b480      	push	{r7}
 8000b46:	b085      	sub	sp, #20
 8000b48:	af00      	add	r7, sp, #0
 8000b4a:	6078      	str	r0, [r7, #4]
 8000b4c:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8000b4e:	2300      	movs	r3, #0
 8000b50:	73fb      	strb	r3, [r7, #15]
  __IO uint32_t wait_loop_index = 0U;
 8000b52:	2300      	movs	r3, #0
 8000b54:	60bb      	str	r3, [r7, #8]
  assert_param(IS_ADC_CHANNEL(sConfig->Channel));
  assert_param(IS_ADC_REGULAR_RANK(sConfig->Rank));
  assert_param(IS_ADC_SAMPLE_TIME(sConfig->SamplingTime));
  
  /* Process locked */
  __HAL_LOCK(hadc);
 8000b56:	687b      	ldr	r3, [r7, #4]
 8000b58:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 8000b5c:	2b01      	cmp	r3, #1
 8000b5e:	d101      	bne.n	8000b64 <HAL_ADC_ConfigChannel+0x20>
 8000b60:	2302      	movs	r3, #2
 8000b62:	e0dc      	b.n	8000d1e <HAL_ADC_ConfigChannel+0x1da>
 8000b64:	687b      	ldr	r3, [r7, #4]
 8000b66:	2201      	movs	r2, #1
 8000b68:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
  
  
  /* Regular sequence configuration */
  /* For Rank 1 to 6 */
  if (sConfig->Rank < 7U)
 8000b6c:	683b      	ldr	r3, [r7, #0]
 8000b6e:	685b      	ldr	r3, [r3, #4]
 8000b70:	2b06      	cmp	r3, #6
 8000b72:	d81c      	bhi.n	8000bae <HAL_ADC_ConfigChannel+0x6a>
  {
    MODIFY_REG(hadc->Instance->SQR3                        ,
 8000b74:	687b      	ldr	r3, [r7, #4]
 8000b76:	681b      	ldr	r3, [r3, #0]
 8000b78:	6b59      	ldr	r1, [r3, #52]	; 0x34
 8000b7a:	683b      	ldr	r3, [r7, #0]
 8000b7c:	685a      	ldr	r2, [r3, #4]
 8000b7e:	4613      	mov	r3, r2
 8000b80:	009b      	lsls	r3, r3, #2
 8000b82:	4413      	add	r3, r2
 8000b84:	3b05      	subs	r3, #5
 8000b86:	221f      	movs	r2, #31
 8000b88:	fa02 f303 	lsl.w	r3, r2, r3
 8000b8c:	43db      	mvns	r3, r3
 8000b8e:	4019      	ands	r1, r3
 8000b90:	683b      	ldr	r3, [r7, #0]
 8000b92:	6818      	ldr	r0, [r3, #0]
 8000b94:	683b      	ldr	r3, [r7, #0]
 8000b96:	685a      	ldr	r2, [r3, #4]
 8000b98:	4613      	mov	r3, r2
 8000b9a:	009b      	lsls	r3, r3, #2
 8000b9c:	4413      	add	r3, r2
 8000b9e:	3b05      	subs	r3, #5
 8000ba0:	fa00 f203 	lsl.w	r2, r0, r3
 8000ba4:	687b      	ldr	r3, [r7, #4]
 8000ba6:	681b      	ldr	r3, [r3, #0]
 8000ba8:	430a      	orrs	r2, r1
 8000baa:	635a      	str	r2, [r3, #52]	; 0x34
 8000bac:	e03c      	b.n	8000c28 <HAL_ADC_ConfigChannel+0xe4>
               ADC_SQR3_RK(ADC_SQR3_SQ1, sConfig->Rank)    ,
               ADC_SQR3_RK(sConfig->Channel, sConfig->Rank) );
  }
  /* For Rank 7 to 12 */
  else if (sConfig->Rank < 13U)
 8000bae:	683b      	ldr	r3, [r7, #0]
 8000bb0:	685b      	ldr	r3, [r3, #4]
 8000bb2:	2b0c      	cmp	r3, #12
 8000bb4:	d81c      	bhi.n	8000bf0 <HAL_ADC_ConfigChannel+0xac>
  {
    MODIFY_REG(hadc->Instance->SQR2                        ,
 8000bb6:	687b      	ldr	r3, [r7, #4]
 8000bb8:	681b      	ldr	r3, [r3, #0]
 8000bba:	6b19      	ldr	r1, [r3, #48]	; 0x30
 8000bbc:	683b      	ldr	r3, [r7, #0]
 8000bbe:	685a      	ldr	r2, [r3, #4]
 8000bc0:	4613      	mov	r3, r2
 8000bc2:	009b      	lsls	r3, r3, #2
 8000bc4:	4413      	add	r3, r2
 8000bc6:	3b23      	subs	r3, #35	; 0x23
 8000bc8:	221f      	movs	r2, #31
 8000bca:	fa02 f303 	lsl.w	r3, r2, r3
 8000bce:	43db      	mvns	r3, r3
 8000bd0:	4019      	ands	r1, r3
 8000bd2:	683b      	ldr	r3, [r7, #0]
 8000bd4:	6818      	ldr	r0, [r3, #0]
 8000bd6:	683b      	ldr	r3, [r7, #0]
 8000bd8:	685a      	ldr	r2, [r3, #4]
 8000bda:	4613      	mov	r3, r2
 8000bdc:	009b      	lsls	r3, r3, #2
 8000bde:	4413      	add	r3, r2
 8000be0:	3b23      	subs	r3, #35	; 0x23
 8000be2:	fa00 f203 	lsl.w	r2, r0, r3
 8000be6:	687b      	ldr	r3, [r7, #4]
 8000be8:	681b      	ldr	r3, [r3, #0]
 8000bea:	430a      	orrs	r2, r1
 8000bec:	631a      	str	r2, [r3, #48]	; 0x30
 8000bee:	e01b      	b.n	8000c28 <HAL_ADC_ConfigChannel+0xe4>
               ADC_SQR2_RK(sConfig->Channel, sConfig->Rank) );
  }
  /* For Rank 13 to 16 */
  else
  {
    MODIFY_REG(hadc->Instance->SQR1                        ,
 8000bf0:	687b      	ldr	r3, [r7, #4]
 8000bf2:	681b      	ldr	r3, [r3, #0]
 8000bf4:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 8000bf6:	683b      	ldr	r3, [r7, #0]
 8000bf8:	685a      	ldr	r2, [r3, #4]
 8000bfa:	4613      	mov	r3, r2
 8000bfc:	009b      	lsls	r3, r3, #2
 8000bfe:	4413      	add	r3, r2
 8000c00:	3b41      	subs	r3, #65	; 0x41
 8000c02:	221f      	movs	r2, #31
 8000c04:	fa02 f303 	lsl.w	r3, r2, r3
 8000c08:	43db      	mvns	r3, r3
 8000c0a:	4019      	ands	r1, r3
 8000c0c:	683b      	ldr	r3, [r7, #0]
 8000c0e:	6818      	ldr	r0, [r3, #0]
 8000c10:	683b      	ldr	r3, [r7, #0]
 8000c12:	685a      	ldr	r2, [r3, #4]
 8000c14:	4613      	mov	r3, r2
 8000c16:	009b      	lsls	r3, r3, #2
 8000c18:	4413      	add	r3, r2
 8000c1a:	3b41      	subs	r3, #65	; 0x41
 8000c1c:	fa00 f203 	lsl.w	r2, r0, r3
 8000c20:	687b      	ldr	r3, [r7, #4]
 8000c22:	681b      	ldr	r3, [r3, #0]
 8000c24:	430a      	orrs	r2, r1
 8000c26:	62da      	str	r2, [r3, #44]	; 0x2c
  }
  
  
  /* Channel sampling time configuration */
  /* For channels 10 to 17 */
  if (sConfig->Channel >= ADC_CHANNEL_10)
 8000c28:	683b      	ldr	r3, [r7, #0]
 8000c2a:	681b      	ldr	r3, [r3, #0]
 8000c2c:	2b09      	cmp	r3, #9
 8000c2e:	d91c      	bls.n	8000c6a <HAL_ADC_ConfigChannel+0x126>
  {
    MODIFY_REG(hadc->Instance->SMPR1                             ,
 8000c30:	687b      	ldr	r3, [r7, #4]
 8000c32:	681b      	ldr	r3, [r3, #0]
 8000c34:	68d9      	ldr	r1, [r3, #12]
 8000c36:	683b      	ldr	r3, [r7, #0]
 8000c38:	681a      	ldr	r2, [r3, #0]
 8000c3a:	4613      	mov	r3, r2
 8000c3c:	005b      	lsls	r3, r3, #1
 8000c3e:	4413      	add	r3, r2
 8000c40:	3b1e      	subs	r3, #30
 8000c42:	2207      	movs	r2, #7
 8000c44:	fa02 f303 	lsl.w	r3, r2, r3
 8000c48:	43db      	mvns	r3, r3
 8000c4a:	4019      	ands	r1, r3
 8000c4c:	683b      	ldr	r3, [r7, #0]
 8000c4e:	6898      	ldr	r0, [r3, #8]
 8000c50:	683b      	ldr	r3, [r7, #0]
 8000c52:	681a      	ldr	r2, [r3, #0]
 8000c54:	4613      	mov	r3, r2
 8000c56:	005b      	lsls	r3, r3, #1
 8000c58:	4413      	add	r3, r2
 8000c5a:	3b1e      	subs	r3, #30
 8000c5c:	fa00 f203 	lsl.w	r2, r0, r3
 8000c60:	687b      	ldr	r3, [r7, #4]
 8000c62:	681b      	ldr	r3, [r3, #0]
 8000c64:	430a      	orrs	r2, r1
 8000c66:	60da      	str	r2, [r3, #12]
 8000c68:	e019      	b.n	8000c9e <HAL_ADC_ConfigChannel+0x15a>
               ADC_SMPR1(ADC_SMPR1_SMP10, sConfig->Channel)      ,
               ADC_SMPR1(sConfig->SamplingTime, sConfig->Channel) );
  }
  else /* For channels 0 to 9 */
  {
    MODIFY_REG(hadc->Instance->SMPR2                             ,
 8000c6a:	687b      	ldr	r3, [r7, #4]
 8000c6c:	681b      	ldr	r3, [r3, #0]
 8000c6e:	6919      	ldr	r1, [r3, #16]
 8000c70:	683b      	ldr	r3, [r7, #0]
 8000c72:	681a      	ldr	r2, [r3, #0]
 8000c74:	4613      	mov	r3, r2
 8000c76:	005b      	lsls	r3, r3, #1
 8000c78:	4413      	add	r3, r2
 8000c7a:	2207      	movs	r2, #7
 8000c7c:	fa02 f303 	lsl.w	r3, r2, r3
 8000c80:	43db      	mvns	r3, r3
 8000c82:	4019      	ands	r1, r3
 8000c84:	683b      	ldr	r3, [r7, #0]
 8000c86:	6898      	ldr	r0, [r3, #8]
 8000c88:	683b      	ldr	r3, [r7, #0]
 8000c8a:	681a      	ldr	r2, [r3, #0]
 8000c8c:	4613      	mov	r3, r2
 8000c8e:	005b      	lsls	r3, r3, #1
 8000c90:	4413      	add	r3, r2
 8000c92:	fa00 f203 	lsl.w	r2, r0, r3
 8000c96:	687b      	ldr	r3, [r7, #4]
 8000c98:	681b      	ldr	r3, [r3, #0]
 8000c9a:	430a      	orrs	r2, r1
 8000c9c:	611a      	str	r2, [r3, #16]
               ADC_SMPR2(sConfig->SamplingTime, sConfig->Channel) );
  }
  
  /* If ADC1 Channel_16 or Channel_17 is selected, enable Temperature sensor  */
  /* and VREFINT measurement path.                                            */
  if ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) ||
 8000c9e:	683b      	ldr	r3, [r7, #0]
 8000ca0:	681b      	ldr	r3, [r3, #0]
 8000ca2:	2b10      	cmp	r3, #16
 8000ca4:	d003      	beq.n	8000cae <HAL_ADC_ConfigChannel+0x16a>
      (sConfig->Channel == ADC_CHANNEL_VREFINT)      )
 8000ca6:	683b      	ldr	r3, [r7, #0]
 8000ca8:	681b      	ldr	r3, [r3, #0]
  if ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) ||
 8000caa:	2b11      	cmp	r3, #17
 8000cac:	d132      	bne.n	8000d14 <HAL_ADC_ConfigChannel+0x1d0>
  {
    /* For STM32F1 devices with several ADC: Only ADC1 can access internal    */
    /* measurement channels (VrefInt/TempSensor). If these channels are       */
    /* intended to be set on other ADC instances, an error is reported.       */
    if (hadc->Instance == ADC1)
 8000cae:	687b      	ldr	r3, [r7, #4]
 8000cb0:	681b      	ldr	r3, [r3, #0]
 8000cb2:	4a1d      	ldr	r2, [pc, #116]	; (8000d28 <HAL_ADC_ConfigChannel+0x1e4>)
 8000cb4:	4293      	cmp	r3, r2
 8000cb6:	d125      	bne.n	8000d04 <HAL_ADC_ConfigChannel+0x1c0>
    {
      if (READ_BIT(hadc->Instance->CR2, ADC_CR2_TSVREFE) == RESET)
 8000cb8:	687b      	ldr	r3, [r7, #4]
 8000cba:	681b      	ldr	r3, [r3, #0]
 8000cbc:	689b      	ldr	r3, [r3, #8]
 8000cbe:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8000cc2:	2b00      	cmp	r3, #0
 8000cc4:	d126      	bne.n	8000d14 <HAL_ADC_ConfigChannel+0x1d0>
      {
        SET_BIT(hadc->Instance->CR2, ADC_CR2_TSVREFE);
 8000cc6:	687b      	ldr	r3, [r7, #4]
 8000cc8:	681b      	ldr	r3, [r3, #0]
 8000cca:	689a      	ldr	r2, [r3, #8]
 8000ccc:	687b      	ldr	r3, [r7, #4]
 8000cce:	681b      	ldr	r3, [r3, #0]
 8000cd0:	f442 0200 	orr.w	r2, r2, #8388608	; 0x800000
 8000cd4:	609a      	str	r2, [r3, #8]
        
        if ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR))
 8000cd6:	683b      	ldr	r3, [r7, #0]
 8000cd8:	681b      	ldr	r3, [r3, #0]
 8000cda:	2b10      	cmp	r3, #16
 8000cdc:	d11a      	bne.n	8000d14 <HAL_ADC_ConfigChannel+0x1d0>
        {
          /* Delay for temperature sensor stabilization time */
          /* Compute number of CPU cycles to wait for */
          wait_loop_index = (ADC_TEMPSENSOR_DELAY_US * (SystemCoreClock / 1000000U));
 8000cde:	4b13      	ldr	r3, [pc, #76]	; (8000d2c <HAL_ADC_ConfigChannel+0x1e8>)
 8000ce0:	681b      	ldr	r3, [r3, #0]
 8000ce2:	4a13      	ldr	r2, [pc, #76]	; (8000d30 <HAL_ADC_ConfigChannel+0x1ec>)
 8000ce4:	fba2 2303 	umull	r2, r3, r2, r3
 8000ce8:	0c9a      	lsrs	r2, r3, #18
 8000cea:	4613      	mov	r3, r2
 8000cec:	009b      	lsls	r3, r3, #2
 8000cee:	4413      	add	r3, r2
 8000cf0:	005b      	lsls	r3, r3, #1
 8000cf2:	60bb      	str	r3, [r7, #8]
          while(wait_loop_index != 0U)
 8000cf4:	e002      	b.n	8000cfc <HAL_ADC_ConfigChannel+0x1b8>
          {
            wait_loop_index--;
 8000cf6:	68bb      	ldr	r3, [r7, #8]
 8000cf8:	3b01      	subs	r3, #1
 8000cfa:	60bb      	str	r3, [r7, #8]
          while(wait_loop_index != 0U)
 8000cfc:	68bb      	ldr	r3, [r7, #8]
 8000cfe:	2b00      	cmp	r3, #0
 8000d00:	d1f9      	bne.n	8000cf6 <HAL_ADC_ConfigChannel+0x1b2>
 8000d02:	e007      	b.n	8000d14 <HAL_ADC_ConfigChannel+0x1d0>
      }
    }
    else
    {
      /* Update ADC state machine to error */
      SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8000d04:	687b      	ldr	r3, [r7, #4]
 8000d06:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8000d08:	f043 0220 	orr.w	r2, r3, #32
 8000d0c:	687b      	ldr	r3, [r7, #4]
 8000d0e:	629a      	str	r2, [r3, #40]	; 0x28
      
      tmp_hal_status = HAL_ERROR;
 8000d10:	2301      	movs	r3, #1
 8000d12:	73fb      	strb	r3, [r7, #15]
    }
  }
  
  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 8000d14:	687b      	ldr	r3, [r7, #4]
 8000d16:	2200      	movs	r2, #0
 8000d18:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
  
  /* Return function status */
  return tmp_hal_status;
 8000d1c:	7bfb      	ldrb	r3, [r7, #15]
}
 8000d1e:	4618      	mov	r0, r3
 8000d20:	3714      	adds	r7, #20
 8000d22:	46bd      	mov	sp, r7
 8000d24:	bc80      	pop	{r7}
 8000d26:	4770      	bx	lr
 8000d28:	40012400 	.word	0x40012400
 8000d2c:	20000000 	.word	0x20000000
 8000d30:	431bde83 	.word	0x431bde83

08000d34 <ADC_Enable>:
  *         and voltage regulator must be enabled (done into HAL_ADC_Init()).
  * @param  hadc: ADC handle
  * @retval HAL status.
  */
HAL_StatusTypeDef ADC_Enable(ADC_HandleTypeDef* hadc)
{
 8000d34:	b580      	push	{r7, lr}
 8000d36:	b084      	sub	sp, #16
 8000d38:	af00      	add	r7, sp, #0
 8000d3a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 8000d3c:	2300      	movs	r3, #0
 8000d3e:	60fb      	str	r3, [r7, #12]
  __IO uint32_t wait_loop_index = 0U;
 8000d40:	2300      	movs	r3, #0
 8000d42:	60bb      	str	r3, [r7, #8]
  
  /* ADC enable and wait for ADC ready (in case of ADC is disabled or         */
  /* enabling phase not yet completed: flag ADC ready not yet set).           */
  /* Timeout implemented to not be stuck if ADC cannot be enabled (possible   */
  /* causes: ADC clock not running, ...).                                     */
  if (ADC_IS_ENABLE(hadc) == RESET)
 8000d44:	687b      	ldr	r3, [r7, #4]
 8000d46:	681b      	ldr	r3, [r3, #0]
 8000d48:	689b      	ldr	r3, [r3, #8]
 8000d4a:	f003 0301 	and.w	r3, r3, #1
 8000d4e:	2b01      	cmp	r3, #1
 8000d50:	d039      	beq.n	8000dc6 <ADC_Enable+0x92>
  {
    /* Enable the Peripheral */
    __HAL_ADC_ENABLE(hadc);
 8000d52:	687b      	ldr	r3, [r7, #4]
 8000d54:	681b      	ldr	r3, [r3, #0]
 8000d56:	689a      	ldr	r2, [r3, #8]
 8000d58:	687b      	ldr	r3, [r7, #4]
 8000d5a:	681b      	ldr	r3, [r3, #0]
 8000d5c:	f042 0201 	orr.w	r2, r2, #1
 8000d60:	609a      	str	r2, [r3, #8]
    
    /* Delay for ADC stabilization time */
    /* Compute number of CPU cycles to wait for */
    wait_loop_index = (ADC_STAB_DELAY_US * (SystemCoreClock / 1000000U));
 8000d62:	4b1b      	ldr	r3, [pc, #108]	; (8000dd0 <ADC_Enable+0x9c>)
 8000d64:	681b      	ldr	r3, [r3, #0]
 8000d66:	4a1b      	ldr	r2, [pc, #108]	; (8000dd4 <ADC_Enable+0xa0>)
 8000d68:	fba2 2303 	umull	r2, r3, r2, r3
 8000d6c:	0c9b      	lsrs	r3, r3, #18
 8000d6e:	60bb      	str	r3, [r7, #8]
    while(wait_loop_index != 0U)
 8000d70:	e002      	b.n	8000d78 <ADC_Enable+0x44>
    {
      wait_loop_index--;
 8000d72:	68bb      	ldr	r3, [r7, #8]
 8000d74:	3b01      	subs	r3, #1
 8000d76:	60bb      	str	r3, [r7, #8]
    while(wait_loop_index != 0U)
 8000d78:	68bb      	ldr	r3, [r7, #8]
 8000d7a:	2b00      	cmp	r3, #0
 8000d7c:	d1f9      	bne.n	8000d72 <ADC_Enable+0x3e>
    }
    
    /* Get tick count */
    tickstart = HAL_GetTick();
 8000d7e:	f7ff fd05 	bl	800078c <HAL_GetTick>
 8000d82:	60f8      	str	r0, [r7, #12]

    /* Wait for ADC effectively enabled */
    while(ADC_IS_ENABLE(hadc) == RESET)
 8000d84:	e018      	b.n	8000db8 <ADC_Enable+0x84>
    {
      if((HAL_GetTick() - tickstart) > ADC_ENABLE_TIMEOUT)
 8000d86:	f7ff fd01 	bl	800078c <HAL_GetTick>
 8000d8a:	4602      	mov	r2, r0
 8000d8c:	68fb      	ldr	r3, [r7, #12]
 8000d8e:	1ad3      	subs	r3, r2, r3
 8000d90:	2b02      	cmp	r3, #2
 8000d92:	d911      	bls.n	8000db8 <ADC_Enable+0x84>
      {
        /* Update ADC state machine to error */
        SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8000d94:	687b      	ldr	r3, [r7, #4]
 8000d96:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8000d98:	f043 0210 	orr.w	r2, r3, #16
 8000d9c:	687b      	ldr	r3, [r7, #4]
 8000d9e:	629a      	str	r2, [r3, #40]	; 0x28
      
        /* Set ADC error code to ADC IP internal error */
        SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8000da0:	687b      	ldr	r3, [r7, #4]
 8000da2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8000da4:	f043 0201 	orr.w	r2, r3, #1
 8000da8:	687b      	ldr	r3, [r7, #4]
 8000daa:	62da      	str	r2, [r3, #44]	; 0x2c
        
        /* Process unlocked */
        __HAL_UNLOCK(hadc);
 8000dac:	687b      	ldr	r3, [r7, #4]
 8000dae:	2200      	movs	r2, #0
 8000db0:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
      
        return HAL_ERROR;
 8000db4:	2301      	movs	r3, #1
 8000db6:	e007      	b.n	8000dc8 <ADC_Enable+0x94>
    while(ADC_IS_ENABLE(hadc) == RESET)
 8000db8:	687b      	ldr	r3, [r7, #4]
 8000dba:	681b      	ldr	r3, [r3, #0]
 8000dbc:	689b      	ldr	r3, [r3, #8]
 8000dbe:	f003 0301 	and.w	r3, r3, #1
 8000dc2:	2b01      	cmp	r3, #1
 8000dc4:	d1df      	bne.n	8000d86 <ADC_Enable+0x52>
      }
    }
  }
   
  /* Return HAL status */
  return HAL_OK;
 8000dc6:	2300      	movs	r3, #0
}
 8000dc8:	4618      	mov	r0, r3
 8000dca:	3710      	adds	r7, #16
 8000dcc:	46bd      	mov	sp, r7
 8000dce:	bd80      	pop	{r7, pc}
 8000dd0:	20000000 	.word	0x20000000
 8000dd4:	431bde83 	.word	0x431bde83

08000dd8 <ADC_ConversionStop_Disable>:
  *         stopped to disable the ADC.
  * @param  hadc: ADC handle
  * @retval HAL status.
  */
HAL_StatusTypeDef ADC_ConversionStop_Disable(ADC_HandleTypeDef* hadc)
{
 8000dd8:	b580      	push	{r7, lr}
 8000dda:	b084      	sub	sp, #16
 8000ddc:	af00      	add	r7, sp, #0
 8000dde:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 8000de0:	2300      	movs	r3, #0
 8000de2:	60fb      	str	r3, [r7, #12]
  
  /* Verification if ADC is not already disabled */
  if (ADC_IS_ENABLE(hadc) != RESET)
 8000de4:	687b      	ldr	r3, [r7, #4]
 8000de6:	681b      	ldr	r3, [r3, #0]
 8000de8:	689b      	ldr	r3, [r3, #8]
 8000dea:	f003 0301 	and.w	r3, r3, #1
 8000dee:	2b01      	cmp	r3, #1
 8000df0:	d127      	bne.n	8000e42 <ADC_ConversionStop_Disable+0x6a>
  {
    /* Disable the ADC peripheral */
    __HAL_ADC_DISABLE(hadc);
 8000df2:	687b      	ldr	r3, [r7, #4]
 8000df4:	681b      	ldr	r3, [r3, #0]
 8000df6:	689a      	ldr	r2, [r3, #8]
 8000df8:	687b      	ldr	r3, [r7, #4]
 8000dfa:	681b      	ldr	r3, [r3, #0]
 8000dfc:	f022 0201 	bic.w	r2, r2, #1
 8000e00:	609a      	str	r2, [r3, #8]
     
    /* Get tick count */
    tickstart = HAL_GetTick();
 8000e02:	f7ff fcc3 	bl	800078c <HAL_GetTick>
 8000e06:	60f8      	str	r0, [r7, #12]
    
    /* Wait for ADC effectively disabled */
    while(ADC_IS_ENABLE(hadc) != RESET)
 8000e08:	e014      	b.n	8000e34 <ADC_ConversionStop_Disable+0x5c>
    {
      if((HAL_GetTick() - tickstart) > ADC_DISABLE_TIMEOUT)
 8000e0a:	f7ff fcbf 	bl	800078c <HAL_GetTick>
 8000e0e:	4602      	mov	r2, r0
 8000e10:	68fb      	ldr	r3, [r7, #12]
 8000e12:	1ad3      	subs	r3, r2, r3
 8000e14:	2b02      	cmp	r3, #2
 8000e16:	d90d      	bls.n	8000e34 <ADC_ConversionStop_Disable+0x5c>
      {
        /* Update ADC state machine to error */
        SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8000e18:	687b      	ldr	r3, [r7, #4]
 8000e1a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8000e1c:	f043 0210 	orr.w	r2, r3, #16
 8000e20:	687b      	ldr	r3, [r7, #4]
 8000e22:	629a      	str	r2, [r3, #40]	; 0x28
        
        /* Set ADC error code to ADC IP internal error */
        SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8000e24:	687b      	ldr	r3, [r7, #4]
 8000e26:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8000e28:	f043 0201 	orr.w	r2, r3, #1
 8000e2c:	687b      	ldr	r3, [r7, #4]
 8000e2e:	62da      	str	r2, [r3, #44]	; 0x2c
        
        return HAL_ERROR;
 8000e30:	2301      	movs	r3, #1
 8000e32:	e007      	b.n	8000e44 <ADC_ConversionStop_Disable+0x6c>
    while(ADC_IS_ENABLE(hadc) != RESET)
 8000e34:	687b      	ldr	r3, [r7, #4]
 8000e36:	681b      	ldr	r3, [r3, #0]
 8000e38:	689b      	ldr	r3, [r3, #8]
 8000e3a:	f003 0301 	and.w	r3, r3, #1
 8000e3e:	2b01      	cmp	r3, #1
 8000e40:	d0e3      	beq.n	8000e0a <ADC_ConversionStop_Disable+0x32>
      }
    }
  }
  
  /* Return HAL status */
  return HAL_OK;
 8000e42:	2300      	movs	r3, #0
}
 8000e44:	4618      	mov	r0, r3
 8000e46:	3710      	adds	r7, #16
 8000e48:	46bd      	mov	sp, r7
 8000e4a:	bd80      	pop	{r7, pc}

08000e4c <ADC_DMAConvCplt>:
  * @brief  DMA transfer complete callback. 
  * @param  hdma: pointer to DMA handle.
  * @retval None
  */
void ADC_DMAConvCplt(DMA_HandleTypeDef *hdma)
{
 8000e4c:	b580      	push	{r7, lr}
 8000e4e:	b084      	sub	sp, #16
 8000e50:	af00      	add	r7, sp, #0
 8000e52:	6078      	str	r0, [r7, #4]
  /* Retrieve ADC handle corresponding to current DMA handle */
  ADC_HandleTypeDef* hadc = ( ADC_HandleTypeDef* )((DMA_HandleTypeDef* )hdma)->Parent;
 8000e54:	687b      	ldr	r3, [r7, #4]
 8000e56:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8000e58:	60fb      	str	r3, [r7, #12]
 
  /* Update state machine on conversion status if not in error state */
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL | HAL_ADC_STATE_ERROR_DMA))
 8000e5a:	68fb      	ldr	r3, [r7, #12]
 8000e5c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8000e5e:	f003 0350 	and.w	r3, r3, #80	; 0x50
 8000e62:	2b00      	cmp	r3, #0
 8000e64:	d127      	bne.n	8000eb6 <ADC_DMAConvCplt+0x6a>
  {
    /* Update ADC state machine */
    SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC);
 8000e66:	68fb      	ldr	r3, [r7, #12]
 8000e68:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8000e6a:	f443 7200 	orr.w	r2, r3, #512	; 0x200
 8000e6e:	68fb      	ldr	r3, [r7, #12]
 8000e70:	629a      	str	r2, [r3, #40]	; 0x28
    /* Determine whether any further conversion upcoming on group regular     */
    /* by external trigger, continuous mode or scan sequence on going.        */
    /* Note: On STM32F1 devices, in case of sequencer enabled                 */
    /*       (several ranks selected), end of conversion flag is raised       */
    /*       at the end of the sequence.                                      */
    if(ADC_IS_SOFTWARE_START_REGULAR(hadc)        && 
 8000e72:	68fb      	ldr	r3, [r7, #12]
 8000e74:	681b      	ldr	r3, [r3, #0]
 8000e76:	689b      	ldr	r3, [r3, #8]
 8000e78:	f403 2360 	and.w	r3, r3, #917504	; 0xe0000
 8000e7c:	f5b3 2f60 	cmp.w	r3, #917504	; 0xe0000
 8000e80:	d115      	bne.n	8000eae <ADC_DMAConvCplt+0x62>
       (hadc->Init.ContinuousConvMode == DISABLE)   )
 8000e82:	68fb      	ldr	r3, [r7, #12]
 8000e84:	7b1b      	ldrb	r3, [r3, #12]
    if(ADC_IS_SOFTWARE_START_REGULAR(hadc)        && 
 8000e86:	2b00      	cmp	r3, #0
 8000e88:	d111      	bne.n	8000eae <ADC_DMAConvCplt+0x62>
    {
      /* Set ADC state */
      CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);   
 8000e8a:	68fb      	ldr	r3, [r7, #12]
 8000e8c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8000e8e:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 8000e92:	68fb      	ldr	r3, [r7, #12]
 8000e94:	629a      	str	r2, [r3, #40]	; 0x28
      
      if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 8000e96:	68fb      	ldr	r3, [r7, #12]
 8000e98:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8000e9a:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8000e9e:	2b00      	cmp	r3, #0
 8000ea0:	d105      	bne.n	8000eae <ADC_DMAConvCplt+0x62>
      {
        SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 8000ea2:	68fb      	ldr	r3, [r7, #12]
 8000ea4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8000ea6:	f043 0201 	orr.w	r2, r3, #1
 8000eaa:	68fb      	ldr	r3, [r7, #12]
 8000eac:	629a      	str	r2, [r3, #40]	; 0x28
    
    /* Conversion complete callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->ConvCpltCallback(hadc);
#else
    HAL_ADC_ConvCpltCallback(hadc);
 8000eae:	68f8      	ldr	r0, [r7, #12]
 8000eb0:	f7ff fe2c 	bl	8000b0c <HAL_ADC_ConvCpltCallback>
  else
  {
    /* Call DMA error callback */
    hadc->DMA_Handle->XferErrorCallback(hdma);
  }
}
 8000eb4:	e004      	b.n	8000ec0 <ADC_DMAConvCplt+0x74>
    hadc->DMA_Handle->XferErrorCallback(hdma);
 8000eb6:	68fb      	ldr	r3, [r7, #12]
 8000eb8:	6a1b      	ldr	r3, [r3, #32]
 8000eba:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000ebc:	6878      	ldr	r0, [r7, #4]
 8000ebe:	4798      	blx	r3
}
 8000ec0:	bf00      	nop
 8000ec2:	3710      	adds	r7, #16
 8000ec4:	46bd      	mov	sp, r7
 8000ec6:	bd80      	pop	{r7, pc}

08000ec8 <ADC_DMAHalfConvCplt>:
  * @brief  DMA half transfer complete callback. 
  * @param  hdma: pointer to DMA handle.
  * @retval None
  */
void ADC_DMAHalfConvCplt(DMA_HandleTypeDef *hdma)   
{
 8000ec8:	b580      	push	{r7, lr}
 8000eca:	b084      	sub	sp, #16
 8000ecc:	af00      	add	r7, sp, #0
 8000ece:	6078      	str	r0, [r7, #4]
  /* Retrieve ADC handle corresponding to current DMA handle */
  ADC_HandleTypeDef* hadc = ( ADC_HandleTypeDef* )((DMA_HandleTypeDef* )hdma)->Parent;
 8000ed0:	687b      	ldr	r3, [r7, #4]
 8000ed2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8000ed4:	60fb      	str	r3, [r7, #12]
  
  /* Half conversion callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->ConvHalfCpltCallback(hadc);
#else
  HAL_ADC_ConvHalfCpltCallback(hadc);
 8000ed6:	68f8      	ldr	r0, [r7, #12]
 8000ed8:	f7ff fe21 	bl	8000b1e <HAL_ADC_ConvHalfCpltCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
}
 8000edc:	bf00      	nop
 8000ede:	3710      	adds	r7, #16
 8000ee0:	46bd      	mov	sp, r7
 8000ee2:	bd80      	pop	{r7, pc}

08000ee4 <ADC_DMAError>:
  * @brief  DMA error callback 
  * @param  hdma: pointer to DMA handle.
  * @retval None
  */
void ADC_DMAError(DMA_HandleTypeDef *hdma)   
{
 8000ee4:	b580      	push	{r7, lr}
 8000ee6:	b084      	sub	sp, #16
 8000ee8:	af00      	add	r7, sp, #0
 8000eea:	6078      	str	r0, [r7, #4]
  /* Retrieve ADC handle corresponding to current DMA handle */
  ADC_HandleTypeDef* hadc = ( ADC_HandleTypeDef* )((DMA_HandleTypeDef* )hdma)->Parent;
 8000eec:	687b      	ldr	r3, [r7, #4]
 8000eee:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8000ef0:	60fb      	str	r3, [r7, #12]
  
  /* Set ADC state */
  SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_DMA);
 8000ef2:	68fb      	ldr	r3, [r7, #12]
 8000ef4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8000ef6:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 8000efa:	68fb      	ldr	r3, [r7, #12]
 8000efc:	629a      	str	r2, [r3, #40]	; 0x28
  
  /* Set ADC error code to DMA error */
  SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_DMA);
 8000efe:	68fb      	ldr	r3, [r7, #12]
 8000f00:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8000f02:	f043 0204 	orr.w	r2, r3, #4
 8000f06:	68fb      	ldr	r3, [r7, #12]
 8000f08:	62da      	str	r2, [r3, #44]	; 0x2c
  
  /* Error callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
  hadc->ErrorCallback(hadc);
#else
  HAL_ADC_ErrorCallback(hadc);
 8000f0a:	68f8      	ldr	r0, [r7, #12]
 8000f0c:	f7ff fe10 	bl	8000b30 <HAL_ADC_ErrorCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
}
 8000f10:	bf00      	nop
 8000f12:	3710      	adds	r7, #16
 8000f14:	46bd      	mov	sp, r7
 8000f16:	bd80      	pop	{r7, pc}

08000f18 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000f18:	b480      	push	{r7}
 8000f1a:	b085      	sub	sp, #20
 8000f1c:	af00      	add	r7, sp, #0
 8000f1e:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8000f20:	687b      	ldr	r3, [r7, #4]
 8000f22:	f003 0307 	and.w	r3, r3, #7
 8000f26:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8000f28:	4b0c      	ldr	r3, [pc, #48]	; (8000f5c <__NVIC_SetPriorityGrouping+0x44>)
 8000f2a:	68db      	ldr	r3, [r3, #12]
 8000f2c:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8000f2e:	68ba      	ldr	r2, [r7, #8]
 8000f30:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8000f34:	4013      	ands	r3, r2
 8000f36:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos) );               /* Insert write key and priority group */
 8000f38:	68fb      	ldr	r3, [r7, #12]
 8000f3a:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8000f3c:	68bb      	ldr	r3, [r7, #8]
 8000f3e:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8000f40:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8000f44:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8000f48:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8000f4a:	4a04      	ldr	r2, [pc, #16]	; (8000f5c <__NVIC_SetPriorityGrouping+0x44>)
 8000f4c:	68bb      	ldr	r3, [r7, #8]
 8000f4e:	60d3      	str	r3, [r2, #12]
}
 8000f50:	bf00      	nop
 8000f52:	3714      	adds	r7, #20
 8000f54:	46bd      	mov	sp, r7
 8000f56:	bc80      	pop	{r7}
 8000f58:	4770      	bx	lr
 8000f5a:	bf00      	nop
 8000f5c:	e000ed00 	.word	0xe000ed00

08000f60 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8000f60:	b480      	push	{r7}
 8000f62:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8000f64:	4b04      	ldr	r3, [pc, #16]	; (8000f78 <__NVIC_GetPriorityGrouping+0x18>)
 8000f66:	68db      	ldr	r3, [r3, #12]
 8000f68:	0a1b      	lsrs	r3, r3, #8
 8000f6a:	f003 0307 	and.w	r3, r3, #7
}
 8000f6e:	4618      	mov	r0, r3
 8000f70:	46bd      	mov	sp, r7
 8000f72:	bc80      	pop	{r7}
 8000f74:	4770      	bx	lr
 8000f76:	bf00      	nop
 8000f78:	e000ed00 	.word	0xe000ed00

08000f7c <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8000f7c:	b480      	push	{r7}
 8000f7e:	b083      	sub	sp, #12
 8000f80:	af00      	add	r7, sp, #0
 8000f82:	4603      	mov	r3, r0
 8000f84:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000f86:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000f8a:	2b00      	cmp	r3, #0
 8000f8c:	db0b      	blt.n	8000fa6 <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8000f8e:	79fb      	ldrb	r3, [r7, #7]
 8000f90:	f003 021f 	and.w	r2, r3, #31
 8000f94:	4906      	ldr	r1, [pc, #24]	; (8000fb0 <__NVIC_EnableIRQ+0x34>)
 8000f96:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000f9a:	095b      	lsrs	r3, r3, #5
 8000f9c:	2001      	movs	r0, #1
 8000f9e:	fa00 f202 	lsl.w	r2, r0, r2
 8000fa2:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 8000fa6:	bf00      	nop
 8000fa8:	370c      	adds	r7, #12
 8000faa:	46bd      	mov	sp, r7
 8000fac:	bc80      	pop	{r7}
 8000fae:	4770      	bx	lr
 8000fb0:	e000e100 	.word	0xe000e100

08000fb4 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8000fb4:	b480      	push	{r7}
 8000fb6:	b083      	sub	sp, #12
 8000fb8:	af00      	add	r7, sp, #0
 8000fba:	4603      	mov	r3, r0
 8000fbc:	6039      	str	r1, [r7, #0]
 8000fbe:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000fc0:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000fc4:	2b00      	cmp	r3, #0
 8000fc6:	db0a      	blt.n	8000fde <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000fc8:	683b      	ldr	r3, [r7, #0]
 8000fca:	b2da      	uxtb	r2, r3
 8000fcc:	490c      	ldr	r1, [pc, #48]	; (8001000 <__NVIC_SetPriority+0x4c>)
 8000fce:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000fd2:	0112      	lsls	r2, r2, #4
 8000fd4:	b2d2      	uxtb	r2, r2
 8000fd6:	440b      	add	r3, r1
 8000fd8:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8000fdc:	e00a      	b.n	8000ff4 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000fde:	683b      	ldr	r3, [r7, #0]
 8000fe0:	b2da      	uxtb	r2, r3
 8000fe2:	4908      	ldr	r1, [pc, #32]	; (8001004 <__NVIC_SetPriority+0x50>)
 8000fe4:	79fb      	ldrb	r3, [r7, #7]
 8000fe6:	f003 030f 	and.w	r3, r3, #15
 8000fea:	3b04      	subs	r3, #4
 8000fec:	0112      	lsls	r2, r2, #4
 8000fee:	b2d2      	uxtb	r2, r2
 8000ff0:	440b      	add	r3, r1
 8000ff2:	761a      	strb	r2, [r3, #24]
}
 8000ff4:	bf00      	nop
 8000ff6:	370c      	adds	r7, #12
 8000ff8:	46bd      	mov	sp, r7
 8000ffa:	bc80      	pop	{r7}
 8000ffc:	4770      	bx	lr
 8000ffe:	bf00      	nop
 8001000:	e000e100 	.word	0xe000e100
 8001004:	e000ed00 	.word	0xe000ed00

08001008 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8001008:	b480      	push	{r7}
 800100a:	b089      	sub	sp, #36	; 0x24
 800100c:	af00      	add	r7, sp, #0
 800100e:	60f8      	str	r0, [r7, #12]
 8001010:	60b9      	str	r1, [r7, #8]
 8001012:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8001014:	68fb      	ldr	r3, [r7, #12]
 8001016:	f003 0307 	and.w	r3, r3, #7
 800101a:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 800101c:	69fb      	ldr	r3, [r7, #28]
 800101e:	f1c3 0307 	rsb	r3, r3, #7
 8001022:	2b04      	cmp	r3, #4
 8001024:	bf28      	it	cs
 8001026:	2304      	movcs	r3, #4
 8001028:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 800102a:	69fb      	ldr	r3, [r7, #28]
 800102c:	3304      	adds	r3, #4
 800102e:	2b06      	cmp	r3, #6
 8001030:	d902      	bls.n	8001038 <NVIC_EncodePriority+0x30>
 8001032:	69fb      	ldr	r3, [r7, #28]
 8001034:	3b03      	subs	r3, #3
 8001036:	e000      	b.n	800103a <NVIC_EncodePriority+0x32>
 8001038:	2300      	movs	r3, #0
 800103a:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 800103c:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8001040:	69bb      	ldr	r3, [r7, #24]
 8001042:	fa02 f303 	lsl.w	r3, r2, r3
 8001046:	43da      	mvns	r2, r3
 8001048:	68bb      	ldr	r3, [r7, #8]
 800104a:	401a      	ands	r2, r3
 800104c:	697b      	ldr	r3, [r7, #20]
 800104e:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8001050:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
 8001054:	697b      	ldr	r3, [r7, #20]
 8001056:	fa01 f303 	lsl.w	r3, r1, r3
 800105a:	43d9      	mvns	r1, r3
 800105c:	687b      	ldr	r3, [r7, #4]
 800105e:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001060:	4313      	orrs	r3, r2
         );
}
 8001062:	4618      	mov	r0, r3
 8001064:	3724      	adds	r7, #36	; 0x24
 8001066:	46bd      	mov	sp, r7
 8001068:	bc80      	pop	{r7}
 800106a:	4770      	bx	lr

0800106c <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 800106c:	b580      	push	{r7, lr}
 800106e:	b082      	sub	sp, #8
 8001070:	af00      	add	r7, sp, #0
 8001072:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8001074:	687b      	ldr	r3, [r7, #4]
 8001076:	3b01      	subs	r3, #1
 8001078:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 800107c:	d301      	bcc.n	8001082 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 800107e:	2301      	movs	r3, #1
 8001080:	e00f      	b.n	80010a2 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8001082:	4a0a      	ldr	r2, [pc, #40]	; (80010ac <SysTick_Config+0x40>)
 8001084:	687b      	ldr	r3, [r7, #4]
 8001086:	3b01      	subs	r3, #1
 8001088:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 800108a:	210f      	movs	r1, #15
 800108c:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8001090:	f7ff ff90 	bl	8000fb4 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8001094:	4b05      	ldr	r3, [pc, #20]	; (80010ac <SysTick_Config+0x40>)
 8001096:	2200      	movs	r2, #0
 8001098:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 800109a:	4b04      	ldr	r3, [pc, #16]	; (80010ac <SysTick_Config+0x40>)
 800109c:	2207      	movs	r2, #7
 800109e:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 80010a0:	2300      	movs	r3, #0
}
 80010a2:	4618      	mov	r0, r3
 80010a4:	3708      	adds	r7, #8
 80010a6:	46bd      	mov	sp, r7
 80010a8:	bd80      	pop	{r7, pc}
 80010aa:	bf00      	nop
 80010ac:	e000e010 	.word	0xe000e010

080010b0 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80010b0:	b580      	push	{r7, lr}
 80010b2:	b082      	sub	sp, #8
 80010b4:	af00      	add	r7, sp, #0
 80010b6:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 80010b8:	6878      	ldr	r0, [r7, #4]
 80010ba:	f7ff ff2d 	bl	8000f18 <__NVIC_SetPriorityGrouping>
}
 80010be:	bf00      	nop
 80010c0:	3708      	adds	r7, #8
 80010c2:	46bd      	mov	sp, r7
 80010c4:	bd80      	pop	{r7, pc}

080010c6 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 80010c6:	b580      	push	{r7, lr}
 80010c8:	b086      	sub	sp, #24
 80010ca:	af00      	add	r7, sp, #0
 80010cc:	4603      	mov	r3, r0
 80010ce:	60b9      	str	r1, [r7, #8]
 80010d0:	607a      	str	r2, [r7, #4]
 80010d2:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 80010d4:	2300      	movs	r3, #0
 80010d6:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 80010d8:	f7ff ff42 	bl	8000f60 <__NVIC_GetPriorityGrouping>
 80010dc:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 80010de:	687a      	ldr	r2, [r7, #4]
 80010e0:	68b9      	ldr	r1, [r7, #8]
 80010e2:	6978      	ldr	r0, [r7, #20]
 80010e4:	f7ff ff90 	bl	8001008 <NVIC_EncodePriority>
 80010e8:	4602      	mov	r2, r0
 80010ea:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80010ee:	4611      	mov	r1, r2
 80010f0:	4618      	mov	r0, r3
 80010f2:	f7ff ff5f 	bl	8000fb4 <__NVIC_SetPriority>
}
 80010f6:	bf00      	nop
 80010f8:	3718      	adds	r7, #24
 80010fa:	46bd      	mov	sp, r7
 80010fc:	bd80      	pop	{r7, pc}

080010fe <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f10xxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80010fe:	b580      	push	{r7, lr}
 8001100:	b082      	sub	sp, #8
 8001102:	af00      	add	r7, sp, #0
 8001104:	4603      	mov	r3, r0
 8001106:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8001108:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800110c:	4618      	mov	r0, r3
 800110e:	f7ff ff35 	bl	8000f7c <__NVIC_EnableIRQ>
}
 8001112:	bf00      	nop
 8001114:	3708      	adds	r7, #8
 8001116:	46bd      	mov	sp, r7
 8001118:	bd80      	pop	{r7, pc}

0800111a <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 800111a:	b580      	push	{r7, lr}
 800111c:	b082      	sub	sp, #8
 800111e:	af00      	add	r7, sp, #0
 8001120:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8001122:	6878      	ldr	r0, [r7, #4]
 8001124:	f7ff ffa2 	bl	800106c <SysTick_Config>
 8001128:	4603      	mov	r3, r0
}
 800112a:	4618      	mov	r0, r3
 800112c:	3708      	adds	r7, #8
 800112e:	46bd      	mov	sp, r7
 8001130:	bd80      	pop	{r7, pc}
	...

08001134 <HAL_DMA_Init>:
  * @param  hdma: Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 8001134:	b480      	push	{r7}
 8001136:	b085      	sub	sp, #20
 8001138:	af00      	add	r7, sp, #0
 800113a:	6078      	str	r0, [r7, #4]
  uint32_t tmp = 0U;
 800113c:	2300      	movs	r3, #0
 800113e:	60fb      	str	r3, [r7, #12]

  /* Check the DMA handle allocation */
  if(hdma == NULL)
 8001140:	687b      	ldr	r3, [r7, #4]
 8001142:	2b00      	cmp	r3, #0
 8001144:	d101      	bne.n	800114a <HAL_DMA_Init+0x16>
  {
    return HAL_ERROR;
 8001146:	2301      	movs	r3, #1
 8001148:	e043      	b.n	80011d2 <HAL_DMA_Init+0x9e>
    hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA2_Channel1) / ((uint32_t)DMA2_Channel2 - (uint32_t)DMA2_Channel1)) << 2;
    hdma->DmaBaseAddress = DMA2;
  }
#else
  /* DMA1 */
  hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA1_Channel1) / ((uint32_t)DMA1_Channel2 - (uint32_t)DMA1_Channel1)) << 2;
 800114a:	687b      	ldr	r3, [r7, #4]
 800114c:	681b      	ldr	r3, [r3, #0]
 800114e:	461a      	mov	r2, r3
 8001150:	4b22      	ldr	r3, [pc, #136]	; (80011dc <HAL_DMA_Init+0xa8>)
 8001152:	4413      	add	r3, r2
 8001154:	4a22      	ldr	r2, [pc, #136]	; (80011e0 <HAL_DMA_Init+0xac>)
 8001156:	fba2 2303 	umull	r2, r3, r2, r3
 800115a:	091b      	lsrs	r3, r3, #4
 800115c:	009a      	lsls	r2, r3, #2
 800115e:	687b      	ldr	r3, [r7, #4]
 8001160:	641a      	str	r2, [r3, #64]	; 0x40
  hdma->DmaBaseAddress = DMA1;
 8001162:	687b      	ldr	r3, [r7, #4]
 8001164:	4a1f      	ldr	r2, [pc, #124]	; (80011e4 <HAL_DMA_Init+0xb0>)
 8001166:	63da      	str	r2, [r3, #60]	; 0x3c
#endif /* DMA2 */

  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 8001168:	687b      	ldr	r3, [r7, #4]
 800116a:	2202      	movs	r2, #2
 800116c:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21

  /* Get the CR register value */
  tmp = hdma->Instance->CCR;
 8001170:	687b      	ldr	r3, [r7, #4]
 8001172:	681b      	ldr	r3, [r3, #0]
 8001174:	681b      	ldr	r3, [r3, #0]
 8001176:	60fb      	str	r3, [r7, #12]

  /* Clear PL, MSIZE, PSIZE, MINC, PINC, CIRC and DIR bits */
  tmp &= ((uint32_t)~(DMA_CCR_PL    | DMA_CCR_MSIZE  | DMA_CCR_PSIZE  | \
 8001178:	68fb      	ldr	r3, [r7, #12]
 800117a:	f423 537f 	bic.w	r3, r3, #16320	; 0x3fc0
 800117e:	f023 0330 	bic.w	r3, r3, #48	; 0x30
 8001182:	60fb      	str	r3, [r7, #12]
                      DMA_CCR_MINC  | DMA_CCR_PINC   | DMA_CCR_CIRC   | \
                      DMA_CCR_DIR));

  /* Prepare the DMA Channel configuration */
  tmp |=  hdma->Init.Direction        |
 8001184:	687b      	ldr	r3, [r7, #4]
 8001186:	685a      	ldr	r2, [r3, #4]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8001188:	687b      	ldr	r3, [r7, #4]
 800118a:	689b      	ldr	r3, [r3, #8]
  tmp |=  hdma->Init.Direction        |
 800118c:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 800118e:	687b      	ldr	r3, [r7, #4]
 8001190:	68db      	ldr	r3, [r3, #12]
 8001192:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8001194:	687b      	ldr	r3, [r7, #4]
 8001196:	691b      	ldr	r3, [r3, #16]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8001198:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 800119a:	687b      	ldr	r3, [r7, #4]
 800119c:	695b      	ldr	r3, [r3, #20]
 800119e:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 80011a0:	687b      	ldr	r3, [r7, #4]
 80011a2:	699b      	ldr	r3, [r3, #24]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 80011a4:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 80011a6:	687b      	ldr	r3, [r7, #4]
 80011a8:	69db      	ldr	r3, [r3, #28]
 80011aa:	4313      	orrs	r3, r2
  tmp |=  hdma->Init.Direction        |
 80011ac:	68fa      	ldr	r2, [r7, #12]
 80011ae:	4313      	orrs	r3, r2
 80011b0:	60fb      	str	r3, [r7, #12]

  /* Write to DMA Channel CR register */
  hdma->Instance->CCR = tmp;
 80011b2:	687b      	ldr	r3, [r7, #4]
 80011b4:	681b      	ldr	r3, [r3, #0]
 80011b6:	68fa      	ldr	r2, [r7, #12]
 80011b8:	601a      	str	r2, [r3, #0]

  /* Initialise the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 80011ba:	687b      	ldr	r3, [r7, #4]
 80011bc:	2200      	movs	r2, #0
 80011be:	639a      	str	r2, [r3, #56]	; 0x38

  /* Initialize the DMA state*/
  hdma->State = HAL_DMA_STATE_READY;
 80011c0:	687b      	ldr	r3, [r7, #4]
 80011c2:	2201      	movs	r2, #1
 80011c4:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21
  /* Allocate lock resource and initialize it */
  hdma->Lock = HAL_UNLOCKED;
 80011c8:	687b      	ldr	r3, [r7, #4]
 80011ca:	2200      	movs	r2, #0
 80011cc:	f883 2020 	strb.w	r2, [r3, #32]

  return HAL_OK;
 80011d0:	2300      	movs	r3, #0
}
 80011d2:	4618      	mov	r0, r3
 80011d4:	3714      	adds	r7, #20
 80011d6:	46bd      	mov	sp, r7
 80011d8:	bc80      	pop	{r7}
 80011da:	4770      	bx	lr
 80011dc:	bffdfff8 	.word	0xbffdfff8
 80011e0:	cccccccd 	.word	0xcccccccd
 80011e4:	40020000 	.word	0x40020000

080011e8 <HAL_DMA_Start_IT>:
  * @param  DstAddress: The destination memory Buffer address
  * @param  DataLength: The length of data to be transferred from source to destination
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Start_IT(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 80011e8:	b580      	push	{r7, lr}
 80011ea:	b086      	sub	sp, #24
 80011ec:	af00      	add	r7, sp, #0
 80011ee:	60f8      	str	r0, [r7, #12]
 80011f0:	60b9      	str	r1, [r7, #8]
 80011f2:	607a      	str	r2, [r7, #4]
 80011f4:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 80011f6:	2300      	movs	r3, #0
 80011f8:	75fb      	strb	r3, [r7, #23]

  /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));

  /* Process locked */
  __HAL_LOCK(hdma);
 80011fa:	68fb      	ldr	r3, [r7, #12]
 80011fc:	f893 3020 	ldrb.w	r3, [r3, #32]
 8001200:	2b01      	cmp	r3, #1
 8001202:	d101      	bne.n	8001208 <HAL_DMA_Start_IT+0x20>
 8001204:	2302      	movs	r3, #2
 8001206:	e04a      	b.n	800129e <HAL_DMA_Start_IT+0xb6>
 8001208:	68fb      	ldr	r3, [r7, #12]
 800120a:	2201      	movs	r2, #1
 800120c:	f883 2020 	strb.w	r2, [r3, #32]
  
  if(HAL_DMA_STATE_READY == hdma->State)
 8001210:	68fb      	ldr	r3, [r7, #12]
 8001212:	f893 3021 	ldrb.w	r3, [r3, #33]	; 0x21
 8001216:	2b01      	cmp	r3, #1
 8001218:	d13a      	bne.n	8001290 <HAL_DMA_Start_IT+0xa8>
  {
    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 800121a:	68fb      	ldr	r3, [r7, #12]
 800121c:	2202      	movs	r2, #2
 800121e:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8001222:	68fb      	ldr	r3, [r7, #12]
 8001224:	2200      	movs	r2, #0
 8001226:	639a      	str	r2, [r3, #56]	; 0x38
    
    /* Disable the peripheral */
    __HAL_DMA_DISABLE(hdma);
 8001228:	68fb      	ldr	r3, [r7, #12]
 800122a:	681b      	ldr	r3, [r3, #0]
 800122c:	681a      	ldr	r2, [r3, #0]
 800122e:	68fb      	ldr	r3, [r7, #12]
 8001230:	681b      	ldr	r3, [r3, #0]
 8001232:	f022 0201 	bic.w	r2, r2, #1
 8001236:	601a      	str	r2, [r3, #0]
    
    /* Configure the source, destination address and the data length & clear flags*/
    DMA_SetConfig(hdma, SrcAddress, DstAddress, DataLength);
 8001238:	683b      	ldr	r3, [r7, #0]
 800123a:	687a      	ldr	r2, [r7, #4]
 800123c:	68b9      	ldr	r1, [r7, #8]
 800123e:	68f8      	ldr	r0, [r7, #12]
 8001240:	f000 f938 	bl	80014b4 <DMA_SetConfig>
    
    /* Enable the transfer complete interrupt */
    /* Enable the transfer Error interrupt */
    if(NULL != hdma->XferHalfCpltCallback)
 8001244:	68fb      	ldr	r3, [r7, #12]
 8001246:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001248:	2b00      	cmp	r3, #0
 800124a:	d008      	beq.n	800125e <HAL_DMA_Start_IT+0x76>
    {
      /* Enable the Half transfer complete interrupt as well */
      __HAL_DMA_ENABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 800124c:	68fb      	ldr	r3, [r7, #12]
 800124e:	681b      	ldr	r3, [r3, #0]
 8001250:	681a      	ldr	r2, [r3, #0]
 8001252:	68fb      	ldr	r3, [r7, #12]
 8001254:	681b      	ldr	r3, [r3, #0]
 8001256:	f042 020e 	orr.w	r2, r2, #14
 800125a:	601a      	str	r2, [r3, #0]
 800125c:	e00f      	b.n	800127e <HAL_DMA_Start_IT+0x96>
    }
    else
    {
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 800125e:	68fb      	ldr	r3, [r7, #12]
 8001260:	681b      	ldr	r3, [r3, #0]
 8001262:	681a      	ldr	r2, [r3, #0]
 8001264:	68fb      	ldr	r3, [r7, #12]
 8001266:	681b      	ldr	r3, [r3, #0]
 8001268:	f022 0204 	bic.w	r2, r2, #4
 800126c:	601a      	str	r2, [r3, #0]
      __HAL_DMA_ENABLE_IT(hdma, (DMA_IT_TC | DMA_IT_TE));
 800126e:	68fb      	ldr	r3, [r7, #12]
 8001270:	681b      	ldr	r3, [r3, #0]
 8001272:	681a      	ldr	r2, [r3, #0]
 8001274:	68fb      	ldr	r3, [r7, #12]
 8001276:	681b      	ldr	r3, [r3, #0]
 8001278:	f042 020a 	orr.w	r2, r2, #10
 800127c:	601a      	str	r2, [r3, #0]
    }
    /* Enable the Peripheral */
    __HAL_DMA_ENABLE(hdma);
 800127e:	68fb      	ldr	r3, [r7, #12]
 8001280:	681b      	ldr	r3, [r3, #0]
 8001282:	681a      	ldr	r2, [r3, #0]
 8001284:	68fb      	ldr	r3, [r7, #12]
 8001286:	681b      	ldr	r3, [r3, #0]
 8001288:	f042 0201 	orr.w	r2, r2, #1
 800128c:	601a      	str	r2, [r3, #0]
 800128e:	e005      	b.n	800129c <HAL_DMA_Start_IT+0xb4>
  }
  else
  {      
    /* Process Unlocked */
    __HAL_UNLOCK(hdma); 
 8001290:	68fb      	ldr	r3, [r7, #12]
 8001292:	2200      	movs	r2, #0
 8001294:	f883 2020 	strb.w	r2, [r3, #32]

    /* Remain BUSY */
    status = HAL_BUSY;
 8001298:	2302      	movs	r3, #2
 800129a:	75fb      	strb	r3, [r7, #23]
  }    
  return status;
 800129c:	7dfb      	ldrb	r3, [r7, #23]
}
 800129e:	4618      	mov	r0, r3
 80012a0:	3718      	adds	r7, #24
 80012a2:	46bd      	mov	sp, r7
 80012a4:	bd80      	pop	{r7, pc}
	...

080012a8 <HAL_DMA_IRQHandler>:
  * @param  hdma: pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.  
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 80012a8:	b580      	push	{r7, lr}
 80012aa:	b084      	sub	sp, #16
 80012ac:	af00      	add	r7, sp, #0
 80012ae:	6078      	str	r0, [r7, #4]
  uint32_t flag_it = hdma->DmaBaseAddress->ISR;
 80012b0:	687b      	ldr	r3, [r7, #4]
 80012b2:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80012b4:	681b      	ldr	r3, [r3, #0]
 80012b6:	60fb      	str	r3, [r7, #12]
  uint32_t source_it = hdma->Instance->CCR;
 80012b8:	687b      	ldr	r3, [r7, #4]
 80012ba:	681b      	ldr	r3, [r3, #0]
 80012bc:	681b      	ldr	r3, [r3, #0]
 80012be:	60bb      	str	r3, [r7, #8]
  
  /* Half Transfer Complete Interrupt management ******************************/
  if (((flag_it & (DMA_FLAG_HT1 << hdma->ChannelIndex)) != RESET) && ((source_it & DMA_IT_HT) != RESET))
 80012c0:	687b      	ldr	r3, [r7, #4]
 80012c2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80012c4:	2204      	movs	r2, #4
 80012c6:	409a      	lsls	r2, r3
 80012c8:	68fb      	ldr	r3, [r7, #12]
 80012ca:	4013      	ands	r3, r2
 80012cc:	2b00      	cmp	r3, #0
 80012ce:	d04f      	beq.n	8001370 <HAL_DMA_IRQHandler+0xc8>
 80012d0:	68bb      	ldr	r3, [r7, #8]
 80012d2:	f003 0304 	and.w	r3, r3, #4
 80012d6:	2b00      	cmp	r3, #0
 80012d8:	d04a      	beq.n	8001370 <HAL_DMA_IRQHandler+0xc8>
  {
    /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
    if((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 80012da:	687b      	ldr	r3, [r7, #4]
 80012dc:	681b      	ldr	r3, [r3, #0]
 80012de:	681b      	ldr	r3, [r3, #0]
 80012e0:	f003 0320 	and.w	r3, r3, #32
 80012e4:	2b00      	cmp	r3, #0
 80012e6:	d107      	bne.n	80012f8 <HAL_DMA_IRQHandler+0x50>
    {
      /* Disable the half transfer interrupt */
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 80012e8:	687b      	ldr	r3, [r7, #4]
 80012ea:	681b      	ldr	r3, [r3, #0]
 80012ec:	681a      	ldr	r2, [r3, #0]
 80012ee:	687b      	ldr	r3, [r7, #4]
 80012f0:	681b      	ldr	r3, [r3, #0]
 80012f2:	f022 0204 	bic.w	r2, r2, #4
 80012f6:	601a      	str	r2, [r3, #0]
    }
    /* Clear the half transfer complete flag */
    __HAL_DMA_CLEAR_FLAG(hdma, __HAL_DMA_GET_HT_FLAG_INDEX(hdma));
 80012f8:	687b      	ldr	r3, [r7, #4]
 80012fa:	681b      	ldr	r3, [r3, #0]
 80012fc:	4a66      	ldr	r2, [pc, #408]	; (8001498 <HAL_DMA_IRQHandler+0x1f0>)
 80012fe:	4293      	cmp	r3, r2
 8001300:	d029      	beq.n	8001356 <HAL_DMA_IRQHandler+0xae>
 8001302:	687b      	ldr	r3, [r7, #4]
 8001304:	681b      	ldr	r3, [r3, #0]
 8001306:	4a65      	ldr	r2, [pc, #404]	; (800149c <HAL_DMA_IRQHandler+0x1f4>)
 8001308:	4293      	cmp	r3, r2
 800130a:	d022      	beq.n	8001352 <HAL_DMA_IRQHandler+0xaa>
 800130c:	687b      	ldr	r3, [r7, #4]
 800130e:	681b      	ldr	r3, [r3, #0]
 8001310:	4a63      	ldr	r2, [pc, #396]	; (80014a0 <HAL_DMA_IRQHandler+0x1f8>)
 8001312:	4293      	cmp	r3, r2
 8001314:	d01a      	beq.n	800134c <HAL_DMA_IRQHandler+0xa4>
 8001316:	687b      	ldr	r3, [r7, #4]
 8001318:	681b      	ldr	r3, [r3, #0]
 800131a:	4a62      	ldr	r2, [pc, #392]	; (80014a4 <HAL_DMA_IRQHandler+0x1fc>)
 800131c:	4293      	cmp	r3, r2
 800131e:	d012      	beq.n	8001346 <HAL_DMA_IRQHandler+0x9e>
 8001320:	687b      	ldr	r3, [r7, #4]
 8001322:	681b      	ldr	r3, [r3, #0]
 8001324:	4a60      	ldr	r2, [pc, #384]	; (80014a8 <HAL_DMA_IRQHandler+0x200>)
 8001326:	4293      	cmp	r3, r2
 8001328:	d00a      	beq.n	8001340 <HAL_DMA_IRQHandler+0x98>
 800132a:	687b      	ldr	r3, [r7, #4]
 800132c:	681b      	ldr	r3, [r3, #0]
 800132e:	4a5f      	ldr	r2, [pc, #380]	; (80014ac <HAL_DMA_IRQHandler+0x204>)
 8001330:	4293      	cmp	r3, r2
 8001332:	d102      	bne.n	800133a <HAL_DMA_IRQHandler+0x92>
 8001334:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 8001338:	e00e      	b.n	8001358 <HAL_DMA_IRQHandler+0xb0>
 800133a:	f04f 6380 	mov.w	r3, #67108864	; 0x4000000
 800133e:	e00b      	b.n	8001358 <HAL_DMA_IRQHandler+0xb0>
 8001340:	f44f 2380 	mov.w	r3, #262144	; 0x40000
 8001344:	e008      	b.n	8001358 <HAL_DMA_IRQHandler+0xb0>
 8001346:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 800134a:	e005      	b.n	8001358 <HAL_DMA_IRQHandler+0xb0>
 800134c:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8001350:	e002      	b.n	8001358 <HAL_DMA_IRQHandler+0xb0>
 8001352:	2340      	movs	r3, #64	; 0x40
 8001354:	e000      	b.n	8001358 <HAL_DMA_IRQHandler+0xb0>
 8001356:	2304      	movs	r3, #4
 8001358:	4a55      	ldr	r2, [pc, #340]	; (80014b0 <HAL_DMA_IRQHandler+0x208>)
 800135a:	6053      	str	r3, [r2, #4]

    /* DMA peripheral state is not updated in Half Transfer */
    /* but in Transfer Complete case */

    if(hdma->XferHalfCpltCallback != NULL)
 800135c:	687b      	ldr	r3, [r7, #4]
 800135e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001360:	2b00      	cmp	r3, #0
 8001362:	f000 8094 	beq.w	800148e <HAL_DMA_IRQHandler+0x1e6>
    {
      /* Half transfer callback */
      hdma->XferHalfCpltCallback(hdma);
 8001366:	687b      	ldr	r3, [r7, #4]
 8001368:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800136a:	6878      	ldr	r0, [r7, #4]
 800136c:	4798      	blx	r3
    if(hdma->XferHalfCpltCallback != NULL)
 800136e:	e08e      	b.n	800148e <HAL_DMA_IRQHandler+0x1e6>
    }
  }

  /* Transfer Complete Interrupt management ***********************************/
  else if (((flag_it & (DMA_FLAG_TC1 << hdma->ChannelIndex)) != RESET) && ((source_it & DMA_IT_TC) != RESET))
 8001370:	687b      	ldr	r3, [r7, #4]
 8001372:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001374:	2202      	movs	r2, #2
 8001376:	409a      	lsls	r2, r3
 8001378:	68fb      	ldr	r3, [r7, #12]
 800137a:	4013      	ands	r3, r2
 800137c:	2b00      	cmp	r3, #0
 800137e:	d056      	beq.n	800142e <HAL_DMA_IRQHandler+0x186>
 8001380:	68bb      	ldr	r3, [r7, #8]
 8001382:	f003 0302 	and.w	r3, r3, #2
 8001386:	2b00      	cmp	r3, #0
 8001388:	d051      	beq.n	800142e <HAL_DMA_IRQHandler+0x186>
  {
    if((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 800138a:	687b      	ldr	r3, [r7, #4]
 800138c:	681b      	ldr	r3, [r3, #0]
 800138e:	681b      	ldr	r3, [r3, #0]
 8001390:	f003 0320 	and.w	r3, r3, #32
 8001394:	2b00      	cmp	r3, #0
 8001396:	d10b      	bne.n	80013b0 <HAL_DMA_IRQHandler+0x108>
    {
      /* Disable the transfer complete and error interrupt */
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_TE | DMA_IT_TC);  
 8001398:	687b      	ldr	r3, [r7, #4]
 800139a:	681b      	ldr	r3, [r3, #0]
 800139c:	681a      	ldr	r2, [r3, #0]
 800139e:	687b      	ldr	r3, [r7, #4]
 80013a0:	681b      	ldr	r3, [r3, #0]
 80013a2:	f022 020a 	bic.w	r2, r2, #10
 80013a6:	601a      	str	r2, [r3, #0]

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 80013a8:	687b      	ldr	r3, [r7, #4]
 80013aa:	2201      	movs	r2, #1
 80013ac:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21
    }
    /* Clear the transfer complete flag */
      __HAL_DMA_CLEAR_FLAG(hdma, __HAL_DMA_GET_TC_FLAG_INDEX(hdma));
 80013b0:	687b      	ldr	r3, [r7, #4]
 80013b2:	681b      	ldr	r3, [r3, #0]
 80013b4:	4a38      	ldr	r2, [pc, #224]	; (8001498 <HAL_DMA_IRQHandler+0x1f0>)
 80013b6:	4293      	cmp	r3, r2
 80013b8:	d029      	beq.n	800140e <HAL_DMA_IRQHandler+0x166>
 80013ba:	687b      	ldr	r3, [r7, #4]
 80013bc:	681b      	ldr	r3, [r3, #0]
 80013be:	4a37      	ldr	r2, [pc, #220]	; (800149c <HAL_DMA_IRQHandler+0x1f4>)
 80013c0:	4293      	cmp	r3, r2
 80013c2:	d022      	beq.n	800140a <HAL_DMA_IRQHandler+0x162>
 80013c4:	687b      	ldr	r3, [r7, #4]
 80013c6:	681b      	ldr	r3, [r3, #0]
 80013c8:	4a35      	ldr	r2, [pc, #212]	; (80014a0 <HAL_DMA_IRQHandler+0x1f8>)
 80013ca:	4293      	cmp	r3, r2
 80013cc:	d01a      	beq.n	8001404 <HAL_DMA_IRQHandler+0x15c>
 80013ce:	687b      	ldr	r3, [r7, #4]
 80013d0:	681b      	ldr	r3, [r3, #0]
 80013d2:	4a34      	ldr	r2, [pc, #208]	; (80014a4 <HAL_DMA_IRQHandler+0x1fc>)
 80013d4:	4293      	cmp	r3, r2
 80013d6:	d012      	beq.n	80013fe <HAL_DMA_IRQHandler+0x156>
 80013d8:	687b      	ldr	r3, [r7, #4]
 80013da:	681b      	ldr	r3, [r3, #0]
 80013dc:	4a32      	ldr	r2, [pc, #200]	; (80014a8 <HAL_DMA_IRQHandler+0x200>)
 80013de:	4293      	cmp	r3, r2
 80013e0:	d00a      	beq.n	80013f8 <HAL_DMA_IRQHandler+0x150>
 80013e2:	687b      	ldr	r3, [r7, #4]
 80013e4:	681b      	ldr	r3, [r3, #0]
 80013e6:	4a31      	ldr	r2, [pc, #196]	; (80014ac <HAL_DMA_IRQHandler+0x204>)
 80013e8:	4293      	cmp	r3, r2
 80013ea:	d102      	bne.n	80013f2 <HAL_DMA_IRQHandler+0x14a>
 80013ec:	f44f 1300 	mov.w	r3, #2097152	; 0x200000
 80013f0:	e00e      	b.n	8001410 <HAL_DMA_IRQHandler+0x168>
 80013f2:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 80013f6:	e00b      	b.n	8001410 <HAL_DMA_IRQHandler+0x168>
 80013f8:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 80013fc:	e008      	b.n	8001410 <HAL_DMA_IRQHandler+0x168>
 80013fe:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8001402:	e005      	b.n	8001410 <HAL_DMA_IRQHandler+0x168>
 8001404:	f44f 7300 	mov.w	r3, #512	; 0x200
 8001408:	e002      	b.n	8001410 <HAL_DMA_IRQHandler+0x168>
 800140a:	2320      	movs	r3, #32
 800140c:	e000      	b.n	8001410 <HAL_DMA_IRQHandler+0x168>
 800140e:	2302      	movs	r3, #2
 8001410:	4a27      	ldr	r2, [pc, #156]	; (80014b0 <HAL_DMA_IRQHandler+0x208>)
 8001412:	6053      	str	r3, [r2, #4]

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8001414:	687b      	ldr	r3, [r7, #4]
 8001416:	2200      	movs	r2, #0
 8001418:	f883 2020 	strb.w	r2, [r3, #32]

    if(hdma->XferCpltCallback != NULL)
 800141c:	687b      	ldr	r3, [r7, #4]
 800141e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001420:	2b00      	cmp	r3, #0
 8001422:	d034      	beq.n	800148e <HAL_DMA_IRQHandler+0x1e6>
    {
      /* Transfer complete callback */
      hdma->XferCpltCallback(hdma);
 8001424:	687b      	ldr	r3, [r7, #4]
 8001426:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001428:	6878      	ldr	r0, [r7, #4]
 800142a:	4798      	blx	r3
    if(hdma->XferCpltCallback != NULL)
 800142c:	e02f      	b.n	800148e <HAL_DMA_IRQHandler+0x1e6>
    }
  }

  /* Transfer Error Interrupt management **************************************/
  else if (( RESET != (flag_it & (DMA_FLAG_TE1 << hdma->ChannelIndex))) && (RESET != (source_it & DMA_IT_TE)))
 800142e:	687b      	ldr	r3, [r7, #4]
 8001430:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001432:	2208      	movs	r2, #8
 8001434:	409a      	lsls	r2, r3
 8001436:	68fb      	ldr	r3, [r7, #12]
 8001438:	4013      	ands	r3, r2
 800143a:	2b00      	cmp	r3, #0
 800143c:	d028      	beq.n	8001490 <HAL_DMA_IRQHandler+0x1e8>
 800143e:	68bb      	ldr	r3, [r7, #8]
 8001440:	f003 0308 	and.w	r3, r3, #8
 8001444:	2b00      	cmp	r3, #0
 8001446:	d023      	beq.n	8001490 <HAL_DMA_IRQHandler+0x1e8>
  {
    /* When a DMA transfer error occurs */
    /* A hardware clear of its EN bits is performed */
    /* Disable ALL DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8001448:	687b      	ldr	r3, [r7, #4]
 800144a:	681b      	ldr	r3, [r3, #0]
 800144c:	681a      	ldr	r2, [r3, #0]
 800144e:	687b      	ldr	r3, [r7, #4]
 8001450:	681b      	ldr	r3, [r3, #0]
 8001452:	f022 020e 	bic.w	r2, r2, #14
 8001456:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << hdma->ChannelIndex);
 8001458:	687b      	ldr	r3, [r7, #4]
 800145a:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 800145c:	687b      	ldr	r3, [r7, #4]
 800145e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8001460:	2101      	movs	r1, #1
 8001462:	fa01 f202 	lsl.w	r2, r1, r2
 8001466:	605a      	str	r2, [r3, #4]

    /* Update error code */
    hdma->ErrorCode = HAL_DMA_ERROR_TE;
 8001468:	687b      	ldr	r3, [r7, #4]
 800146a:	2201      	movs	r2, #1
 800146c:	639a      	str	r2, [r3, #56]	; 0x38

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 800146e:	687b      	ldr	r3, [r7, #4]
 8001470:	2201      	movs	r2, #1
 8001472:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8001476:	687b      	ldr	r3, [r7, #4]
 8001478:	2200      	movs	r2, #0
 800147a:	f883 2020 	strb.w	r2, [r3, #32]

    if (hdma->XferErrorCallback != NULL)
 800147e:	687b      	ldr	r3, [r7, #4]
 8001480:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001482:	2b00      	cmp	r3, #0
 8001484:	d004      	beq.n	8001490 <HAL_DMA_IRQHandler+0x1e8>
    {
      /* Transfer error callback */
      hdma->XferErrorCallback(hdma);
 8001486:	687b      	ldr	r3, [r7, #4]
 8001488:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800148a:	6878      	ldr	r0, [r7, #4]
 800148c:	4798      	blx	r3
    }
  }
  return;
 800148e:	bf00      	nop
 8001490:	bf00      	nop
}
 8001492:	3710      	adds	r7, #16
 8001494:	46bd      	mov	sp, r7
 8001496:	bd80      	pop	{r7, pc}
 8001498:	40020008 	.word	0x40020008
 800149c:	4002001c 	.word	0x4002001c
 80014a0:	40020030 	.word	0x40020030
 80014a4:	40020044 	.word	0x40020044
 80014a8:	40020058 	.word	0x40020058
 80014ac:	4002006c 	.word	0x4002006c
 80014b0:	40020000 	.word	0x40020000

080014b4 <DMA_SetConfig>:
  * @param  DstAddress: The destination memory Buffer address
  * @param  DataLength: The length of data to be transferred from source to destination
  * @retval HAL status
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 80014b4:	b480      	push	{r7}
 80014b6:	b085      	sub	sp, #20
 80014b8:	af00      	add	r7, sp, #0
 80014ba:	60f8      	str	r0, [r7, #12]
 80014bc:	60b9      	str	r1, [r7, #8]
 80014be:	607a      	str	r2, [r7, #4]
 80014c0:	603b      	str	r3, [r7, #0]
  /* Clear all flags */
  hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << hdma->ChannelIndex);
 80014c2:	68fb      	ldr	r3, [r7, #12]
 80014c4:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 80014c6:	68fb      	ldr	r3, [r7, #12]
 80014c8:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80014ca:	2101      	movs	r1, #1
 80014cc:	fa01 f202 	lsl.w	r2, r1, r2
 80014d0:	605a      	str	r2, [r3, #4]

  /* Configure DMA Channel data length */
  hdma->Instance->CNDTR = DataLength;
 80014d2:	68fb      	ldr	r3, [r7, #12]
 80014d4:	681b      	ldr	r3, [r3, #0]
 80014d6:	683a      	ldr	r2, [r7, #0]
 80014d8:	605a      	str	r2, [r3, #4]

  /* Memory to Peripheral */
  if((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 80014da:	68fb      	ldr	r3, [r7, #12]
 80014dc:	685b      	ldr	r3, [r3, #4]
 80014de:	2b10      	cmp	r3, #16
 80014e0:	d108      	bne.n	80014f4 <DMA_SetConfig+0x40>
  {
    /* Configure DMA Channel destination address */
    hdma->Instance->CPAR = DstAddress;
 80014e2:	68fb      	ldr	r3, [r7, #12]
 80014e4:	681b      	ldr	r3, [r3, #0]
 80014e6:	687a      	ldr	r2, [r7, #4]
 80014e8:	609a      	str	r2, [r3, #8]

    /* Configure DMA Channel source address */
    hdma->Instance->CMAR = SrcAddress;
 80014ea:	68fb      	ldr	r3, [r7, #12]
 80014ec:	681b      	ldr	r3, [r3, #0]
 80014ee:	68ba      	ldr	r2, [r7, #8]
 80014f0:	60da      	str	r2, [r3, #12]
    hdma->Instance->CPAR = SrcAddress;

    /* Configure DMA Channel destination address */
    hdma->Instance->CMAR = DstAddress;
  }
}
 80014f2:	e007      	b.n	8001504 <DMA_SetConfig+0x50>
    hdma->Instance->CPAR = SrcAddress;
 80014f4:	68fb      	ldr	r3, [r7, #12]
 80014f6:	681b      	ldr	r3, [r3, #0]
 80014f8:	68ba      	ldr	r2, [r7, #8]
 80014fa:	609a      	str	r2, [r3, #8]
    hdma->Instance->CMAR = DstAddress;
 80014fc:	68fb      	ldr	r3, [r7, #12]
 80014fe:	681b      	ldr	r3, [r3, #0]
 8001500:	687a      	ldr	r2, [r7, #4]
 8001502:	60da      	str	r2, [r3, #12]
}
 8001504:	bf00      	nop
 8001506:	3714      	adds	r7, #20
 8001508:	46bd      	mov	sp, r7
 800150a:	bc80      	pop	{r7}
 800150c:	4770      	bx	lr
	...

08001510 <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8001510:	b480      	push	{r7}
 8001512:	b08b      	sub	sp, #44	; 0x2c
 8001514:	af00      	add	r7, sp, #0
 8001516:	6078      	str	r0, [r7, #4]
 8001518:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 800151a:	2300      	movs	r3, #0
 800151c:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t ioposition;
  uint32_t iocurrent;
  uint32_t temp;
  uint32_t config = 0x00u;
 800151e:	2300      	movs	r3, #0
 8001520:	623b      	str	r3, [r7, #32]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8001522:	e127      	b.n	8001774 <HAL_GPIO_Init+0x264>
  {
    /* Get the IO position */
    ioposition = (0x01uL << position);
 8001524:	2201      	movs	r2, #1
 8001526:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001528:	fa02 f303 	lsl.w	r3, r2, r3
 800152c:	61fb      	str	r3, [r7, #28]

    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 800152e:	683b      	ldr	r3, [r7, #0]
 8001530:	681b      	ldr	r3, [r3, #0]
 8001532:	69fa      	ldr	r2, [r7, #28]
 8001534:	4013      	ands	r3, r2
 8001536:	61bb      	str	r3, [r7, #24]

    if (iocurrent == ioposition)
 8001538:	69ba      	ldr	r2, [r7, #24]
 800153a:	69fb      	ldr	r3, [r7, #28]
 800153c:	429a      	cmp	r2, r3
 800153e:	f040 8116 	bne.w	800176e <HAL_GPIO_Init+0x25e>
    {
      /* Check the Alternate function parameters */
      assert_param(IS_GPIO_AF_INSTANCE(GPIOx));

      /* Based on the required mode, filling config variable with MODEy[1:0] and CNFy[3:2] corresponding bits */
      switch (GPIO_Init->Mode)
 8001542:	683b      	ldr	r3, [r7, #0]
 8001544:	685b      	ldr	r3, [r3, #4]
 8001546:	2b12      	cmp	r3, #18
 8001548:	d034      	beq.n	80015b4 <HAL_GPIO_Init+0xa4>
 800154a:	2b12      	cmp	r3, #18
 800154c:	d80d      	bhi.n	800156a <HAL_GPIO_Init+0x5a>
 800154e:	2b02      	cmp	r3, #2
 8001550:	d02b      	beq.n	80015aa <HAL_GPIO_Init+0x9a>
 8001552:	2b02      	cmp	r3, #2
 8001554:	d804      	bhi.n	8001560 <HAL_GPIO_Init+0x50>
 8001556:	2b00      	cmp	r3, #0
 8001558:	d031      	beq.n	80015be <HAL_GPIO_Init+0xae>
 800155a:	2b01      	cmp	r3, #1
 800155c:	d01c      	beq.n	8001598 <HAL_GPIO_Init+0x88>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
          break;

        /* Parameters are checked with assert_param */
        default:
          break;
 800155e:	e048      	b.n	80015f2 <HAL_GPIO_Init+0xe2>
      switch (GPIO_Init->Mode)
 8001560:	2b03      	cmp	r3, #3
 8001562:	d043      	beq.n	80015ec <HAL_GPIO_Init+0xdc>
 8001564:	2b11      	cmp	r3, #17
 8001566:	d01b      	beq.n	80015a0 <HAL_GPIO_Init+0x90>
          break;
 8001568:	e043      	b.n	80015f2 <HAL_GPIO_Init+0xe2>
      switch (GPIO_Init->Mode)
 800156a:	4a89      	ldr	r2, [pc, #548]	; (8001790 <HAL_GPIO_Init+0x280>)
 800156c:	4293      	cmp	r3, r2
 800156e:	d026      	beq.n	80015be <HAL_GPIO_Init+0xae>
 8001570:	4a87      	ldr	r2, [pc, #540]	; (8001790 <HAL_GPIO_Init+0x280>)
 8001572:	4293      	cmp	r3, r2
 8001574:	d806      	bhi.n	8001584 <HAL_GPIO_Init+0x74>
 8001576:	4a87      	ldr	r2, [pc, #540]	; (8001794 <HAL_GPIO_Init+0x284>)
 8001578:	4293      	cmp	r3, r2
 800157a:	d020      	beq.n	80015be <HAL_GPIO_Init+0xae>
 800157c:	4a86      	ldr	r2, [pc, #536]	; (8001798 <HAL_GPIO_Init+0x288>)
 800157e:	4293      	cmp	r3, r2
 8001580:	d01d      	beq.n	80015be <HAL_GPIO_Init+0xae>
          break;
 8001582:	e036      	b.n	80015f2 <HAL_GPIO_Init+0xe2>
      switch (GPIO_Init->Mode)
 8001584:	4a85      	ldr	r2, [pc, #532]	; (800179c <HAL_GPIO_Init+0x28c>)
 8001586:	4293      	cmp	r3, r2
 8001588:	d019      	beq.n	80015be <HAL_GPIO_Init+0xae>
 800158a:	4a85      	ldr	r2, [pc, #532]	; (80017a0 <HAL_GPIO_Init+0x290>)
 800158c:	4293      	cmp	r3, r2
 800158e:	d016      	beq.n	80015be <HAL_GPIO_Init+0xae>
 8001590:	4a84      	ldr	r2, [pc, #528]	; (80017a4 <HAL_GPIO_Init+0x294>)
 8001592:	4293      	cmp	r3, r2
 8001594:	d013      	beq.n	80015be <HAL_GPIO_Init+0xae>
          break;
 8001596:	e02c      	b.n	80015f2 <HAL_GPIO_Init+0xe2>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_PP;
 8001598:	683b      	ldr	r3, [r7, #0]
 800159a:	68db      	ldr	r3, [r3, #12]
 800159c:	623b      	str	r3, [r7, #32]
          break;
 800159e:	e028      	b.n	80015f2 <HAL_GPIO_Init+0xe2>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_OD;
 80015a0:	683b      	ldr	r3, [r7, #0]
 80015a2:	68db      	ldr	r3, [r3, #12]
 80015a4:	3304      	adds	r3, #4
 80015a6:	623b      	str	r3, [r7, #32]
          break;
 80015a8:	e023      	b.n	80015f2 <HAL_GPIO_Init+0xe2>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_PP;
 80015aa:	683b      	ldr	r3, [r7, #0]
 80015ac:	68db      	ldr	r3, [r3, #12]
 80015ae:	3308      	adds	r3, #8
 80015b0:	623b      	str	r3, [r7, #32]
          break;
 80015b2:	e01e      	b.n	80015f2 <HAL_GPIO_Init+0xe2>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_OD;
 80015b4:	683b      	ldr	r3, [r7, #0]
 80015b6:	68db      	ldr	r3, [r3, #12]
 80015b8:	330c      	adds	r3, #12
 80015ba:	623b      	str	r3, [r7, #32]
          break;
 80015bc:	e019      	b.n	80015f2 <HAL_GPIO_Init+0xe2>
          if (GPIO_Init->Pull == GPIO_NOPULL)
 80015be:	683b      	ldr	r3, [r7, #0]
 80015c0:	689b      	ldr	r3, [r3, #8]
 80015c2:	2b00      	cmp	r3, #0
 80015c4:	d102      	bne.n	80015cc <HAL_GPIO_Init+0xbc>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_FLOATING;
 80015c6:	2304      	movs	r3, #4
 80015c8:	623b      	str	r3, [r7, #32]
          break;
 80015ca:	e012      	b.n	80015f2 <HAL_GPIO_Init+0xe2>
          else if (GPIO_Init->Pull == GPIO_PULLUP)
 80015cc:	683b      	ldr	r3, [r7, #0]
 80015ce:	689b      	ldr	r3, [r3, #8]
 80015d0:	2b01      	cmp	r3, #1
 80015d2:	d105      	bne.n	80015e0 <HAL_GPIO_Init+0xd0>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 80015d4:	2308      	movs	r3, #8
 80015d6:	623b      	str	r3, [r7, #32]
            GPIOx->BSRR = ioposition;
 80015d8:	687b      	ldr	r3, [r7, #4]
 80015da:	69fa      	ldr	r2, [r7, #28]
 80015dc:	611a      	str	r2, [r3, #16]
          break;
 80015de:	e008      	b.n	80015f2 <HAL_GPIO_Init+0xe2>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 80015e0:	2308      	movs	r3, #8
 80015e2:	623b      	str	r3, [r7, #32]
            GPIOx->BRR = ioposition;
 80015e4:	687b      	ldr	r3, [r7, #4]
 80015e6:	69fa      	ldr	r2, [r7, #28]
 80015e8:	615a      	str	r2, [r3, #20]
          break;
 80015ea:	e002      	b.n	80015f2 <HAL_GPIO_Init+0xe2>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
 80015ec:	2300      	movs	r3, #0
 80015ee:	623b      	str	r3, [r7, #32]
          break;
 80015f0:	bf00      	nop
      }

      /* Check if the current bit belongs to first half or last half of the pin count number
       in order to address CRH or CRL register*/
      configregister = (iocurrent < GPIO_PIN_8) ? &GPIOx->CRL     : &GPIOx->CRH;
 80015f2:	69bb      	ldr	r3, [r7, #24]
 80015f4:	2bff      	cmp	r3, #255	; 0xff
 80015f6:	d801      	bhi.n	80015fc <HAL_GPIO_Init+0xec>
 80015f8:	687b      	ldr	r3, [r7, #4]
 80015fa:	e001      	b.n	8001600 <HAL_GPIO_Init+0xf0>
 80015fc:	687b      	ldr	r3, [r7, #4]
 80015fe:	3304      	adds	r3, #4
 8001600:	617b      	str	r3, [r7, #20]
      registeroffset = (iocurrent < GPIO_PIN_8) ? (position << 2u) : ((position - 8u) << 2u);
 8001602:	69bb      	ldr	r3, [r7, #24]
 8001604:	2bff      	cmp	r3, #255	; 0xff
 8001606:	d802      	bhi.n	800160e <HAL_GPIO_Init+0xfe>
 8001608:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800160a:	009b      	lsls	r3, r3, #2
 800160c:	e002      	b.n	8001614 <HAL_GPIO_Init+0x104>
 800160e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001610:	3b08      	subs	r3, #8
 8001612:	009b      	lsls	r3, r3, #2
 8001614:	613b      	str	r3, [r7, #16]

      /* Apply the new configuration of the pin to the register */
      MODIFY_REG((*configregister), ((GPIO_CRL_MODE0 | GPIO_CRL_CNF0) << registeroffset), (config << registeroffset));
 8001616:	697b      	ldr	r3, [r7, #20]
 8001618:	681a      	ldr	r2, [r3, #0]
 800161a:	210f      	movs	r1, #15
 800161c:	693b      	ldr	r3, [r7, #16]
 800161e:	fa01 f303 	lsl.w	r3, r1, r3
 8001622:	43db      	mvns	r3, r3
 8001624:	401a      	ands	r2, r3
 8001626:	6a39      	ldr	r1, [r7, #32]
 8001628:	693b      	ldr	r3, [r7, #16]
 800162a:	fa01 f303 	lsl.w	r3, r1, r3
 800162e:	431a      	orrs	r2, r3
 8001630:	697b      	ldr	r3, [r7, #20]
 8001632:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 8001634:	683b      	ldr	r3, [r7, #0]
 8001636:	685b      	ldr	r3, [r3, #4]
 8001638:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800163c:	2b00      	cmp	r3, #0
 800163e:	f000 8096 	beq.w	800176e <HAL_GPIO_Init+0x25e>
      {
        /* Enable AFIO Clock */
        __HAL_RCC_AFIO_CLK_ENABLE();
 8001642:	4b59      	ldr	r3, [pc, #356]	; (80017a8 <HAL_GPIO_Init+0x298>)
 8001644:	699b      	ldr	r3, [r3, #24]
 8001646:	4a58      	ldr	r2, [pc, #352]	; (80017a8 <HAL_GPIO_Init+0x298>)
 8001648:	f043 0301 	orr.w	r3, r3, #1
 800164c:	6193      	str	r3, [r2, #24]
 800164e:	4b56      	ldr	r3, [pc, #344]	; (80017a8 <HAL_GPIO_Init+0x298>)
 8001650:	699b      	ldr	r3, [r3, #24]
 8001652:	f003 0301 	and.w	r3, r3, #1
 8001656:	60bb      	str	r3, [r7, #8]
 8001658:	68bb      	ldr	r3, [r7, #8]
        temp = AFIO->EXTICR[position >> 2u];
 800165a:	4a54      	ldr	r2, [pc, #336]	; (80017ac <HAL_GPIO_Init+0x29c>)
 800165c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800165e:	089b      	lsrs	r3, r3, #2
 8001660:	3302      	adds	r3, #2
 8001662:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001666:	60fb      	str	r3, [r7, #12]
        CLEAR_BIT(temp, (0x0Fu) << (4u * (position & 0x03u)));
 8001668:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800166a:	f003 0303 	and.w	r3, r3, #3
 800166e:	009b      	lsls	r3, r3, #2
 8001670:	220f      	movs	r2, #15
 8001672:	fa02 f303 	lsl.w	r3, r2, r3
 8001676:	43db      	mvns	r3, r3
 8001678:	68fa      	ldr	r2, [r7, #12]
 800167a:	4013      	ands	r3, r2
 800167c:	60fb      	str	r3, [r7, #12]
        SET_BIT(temp, (GPIO_GET_INDEX(GPIOx)) << (4u * (position & 0x03u)));
 800167e:	687b      	ldr	r3, [r7, #4]
 8001680:	4a4b      	ldr	r2, [pc, #300]	; (80017b0 <HAL_GPIO_Init+0x2a0>)
 8001682:	4293      	cmp	r3, r2
 8001684:	d013      	beq.n	80016ae <HAL_GPIO_Init+0x19e>
 8001686:	687b      	ldr	r3, [r7, #4]
 8001688:	4a4a      	ldr	r2, [pc, #296]	; (80017b4 <HAL_GPIO_Init+0x2a4>)
 800168a:	4293      	cmp	r3, r2
 800168c:	d00d      	beq.n	80016aa <HAL_GPIO_Init+0x19a>
 800168e:	687b      	ldr	r3, [r7, #4]
 8001690:	4a49      	ldr	r2, [pc, #292]	; (80017b8 <HAL_GPIO_Init+0x2a8>)
 8001692:	4293      	cmp	r3, r2
 8001694:	d007      	beq.n	80016a6 <HAL_GPIO_Init+0x196>
 8001696:	687b      	ldr	r3, [r7, #4]
 8001698:	4a48      	ldr	r2, [pc, #288]	; (80017bc <HAL_GPIO_Init+0x2ac>)
 800169a:	4293      	cmp	r3, r2
 800169c:	d101      	bne.n	80016a2 <HAL_GPIO_Init+0x192>
 800169e:	2303      	movs	r3, #3
 80016a0:	e006      	b.n	80016b0 <HAL_GPIO_Init+0x1a0>
 80016a2:	2304      	movs	r3, #4
 80016a4:	e004      	b.n	80016b0 <HAL_GPIO_Init+0x1a0>
 80016a6:	2302      	movs	r3, #2
 80016a8:	e002      	b.n	80016b0 <HAL_GPIO_Init+0x1a0>
 80016aa:	2301      	movs	r3, #1
 80016ac:	e000      	b.n	80016b0 <HAL_GPIO_Init+0x1a0>
 80016ae:	2300      	movs	r3, #0
 80016b0:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80016b2:	f002 0203 	and.w	r2, r2, #3
 80016b6:	0092      	lsls	r2, r2, #2
 80016b8:	4093      	lsls	r3, r2
 80016ba:	68fa      	ldr	r2, [r7, #12]
 80016bc:	4313      	orrs	r3, r2
 80016be:	60fb      	str	r3, [r7, #12]
        AFIO->EXTICR[position >> 2u] = temp;
 80016c0:	493a      	ldr	r1, [pc, #232]	; (80017ac <HAL_GPIO_Init+0x29c>)
 80016c2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80016c4:	089b      	lsrs	r3, r3, #2
 80016c6:	3302      	adds	r3, #2
 80016c8:	68fa      	ldr	r2, [r7, #12]
 80016ca:	f841 2023 	str.w	r2, [r1, r3, lsl #2]


        /* Configure the interrupt mask */
        if ((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 80016ce:	683b      	ldr	r3, [r7, #0]
 80016d0:	685b      	ldr	r3, [r3, #4]
 80016d2:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80016d6:	2b00      	cmp	r3, #0
 80016d8:	d006      	beq.n	80016e8 <HAL_GPIO_Init+0x1d8>
        {
          SET_BIT(EXTI->IMR, iocurrent);
 80016da:	4b39      	ldr	r3, [pc, #228]	; (80017c0 <HAL_GPIO_Init+0x2b0>)
 80016dc:	681a      	ldr	r2, [r3, #0]
 80016de:	4938      	ldr	r1, [pc, #224]	; (80017c0 <HAL_GPIO_Init+0x2b0>)
 80016e0:	69bb      	ldr	r3, [r7, #24]
 80016e2:	4313      	orrs	r3, r2
 80016e4:	600b      	str	r3, [r1, #0]
 80016e6:	e006      	b.n	80016f6 <HAL_GPIO_Init+0x1e6>
        }
        else
        {
          CLEAR_BIT(EXTI->IMR, iocurrent);
 80016e8:	4b35      	ldr	r3, [pc, #212]	; (80017c0 <HAL_GPIO_Init+0x2b0>)
 80016ea:	681a      	ldr	r2, [r3, #0]
 80016ec:	69bb      	ldr	r3, [r7, #24]
 80016ee:	43db      	mvns	r3, r3
 80016f0:	4933      	ldr	r1, [pc, #204]	; (80017c0 <HAL_GPIO_Init+0x2b0>)
 80016f2:	4013      	ands	r3, r2
 80016f4:	600b      	str	r3, [r1, #0]
        }

        /* Configure the event mask */
        if ((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 80016f6:	683b      	ldr	r3, [r7, #0]
 80016f8:	685b      	ldr	r3, [r3, #4]
 80016fa:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80016fe:	2b00      	cmp	r3, #0
 8001700:	d006      	beq.n	8001710 <HAL_GPIO_Init+0x200>
        {
          SET_BIT(EXTI->EMR, iocurrent);
 8001702:	4b2f      	ldr	r3, [pc, #188]	; (80017c0 <HAL_GPIO_Init+0x2b0>)
 8001704:	685a      	ldr	r2, [r3, #4]
 8001706:	492e      	ldr	r1, [pc, #184]	; (80017c0 <HAL_GPIO_Init+0x2b0>)
 8001708:	69bb      	ldr	r3, [r7, #24]
 800170a:	4313      	orrs	r3, r2
 800170c:	604b      	str	r3, [r1, #4]
 800170e:	e006      	b.n	800171e <HAL_GPIO_Init+0x20e>
        }
        else
        {
          CLEAR_BIT(EXTI->EMR, iocurrent);
 8001710:	4b2b      	ldr	r3, [pc, #172]	; (80017c0 <HAL_GPIO_Init+0x2b0>)
 8001712:	685a      	ldr	r2, [r3, #4]
 8001714:	69bb      	ldr	r3, [r7, #24]
 8001716:	43db      	mvns	r3, r3
 8001718:	4929      	ldr	r1, [pc, #164]	; (80017c0 <HAL_GPIO_Init+0x2b0>)
 800171a:	4013      	ands	r3, r2
 800171c:	604b      	str	r3, [r1, #4]
        }

        /* Enable or disable the rising trigger */
        if ((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 800171e:	683b      	ldr	r3, [r7, #0]
 8001720:	685b      	ldr	r3, [r3, #4]
 8001722:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8001726:	2b00      	cmp	r3, #0
 8001728:	d006      	beq.n	8001738 <HAL_GPIO_Init+0x228>
        {
          SET_BIT(EXTI->RTSR, iocurrent);
 800172a:	4b25      	ldr	r3, [pc, #148]	; (80017c0 <HAL_GPIO_Init+0x2b0>)
 800172c:	689a      	ldr	r2, [r3, #8]
 800172e:	4924      	ldr	r1, [pc, #144]	; (80017c0 <HAL_GPIO_Init+0x2b0>)
 8001730:	69bb      	ldr	r3, [r7, #24]
 8001732:	4313      	orrs	r3, r2
 8001734:	608b      	str	r3, [r1, #8]
 8001736:	e006      	b.n	8001746 <HAL_GPIO_Init+0x236>
        }
        else
        {
          CLEAR_BIT(EXTI->RTSR, iocurrent);
 8001738:	4b21      	ldr	r3, [pc, #132]	; (80017c0 <HAL_GPIO_Init+0x2b0>)
 800173a:	689a      	ldr	r2, [r3, #8]
 800173c:	69bb      	ldr	r3, [r7, #24]
 800173e:	43db      	mvns	r3, r3
 8001740:	491f      	ldr	r1, [pc, #124]	; (80017c0 <HAL_GPIO_Init+0x2b0>)
 8001742:	4013      	ands	r3, r2
 8001744:	608b      	str	r3, [r1, #8]
        }

        /* Enable or disable the falling trigger */
        if ((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 8001746:	683b      	ldr	r3, [r7, #0]
 8001748:	685b      	ldr	r3, [r3, #4]
 800174a:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 800174e:	2b00      	cmp	r3, #0
 8001750:	d006      	beq.n	8001760 <HAL_GPIO_Init+0x250>
        {
          SET_BIT(EXTI->FTSR, iocurrent);
 8001752:	4b1b      	ldr	r3, [pc, #108]	; (80017c0 <HAL_GPIO_Init+0x2b0>)
 8001754:	68da      	ldr	r2, [r3, #12]
 8001756:	491a      	ldr	r1, [pc, #104]	; (80017c0 <HAL_GPIO_Init+0x2b0>)
 8001758:	69bb      	ldr	r3, [r7, #24]
 800175a:	4313      	orrs	r3, r2
 800175c:	60cb      	str	r3, [r1, #12]
 800175e:	e006      	b.n	800176e <HAL_GPIO_Init+0x25e>
        }
        else
        {
          CLEAR_BIT(EXTI->FTSR, iocurrent);
 8001760:	4b17      	ldr	r3, [pc, #92]	; (80017c0 <HAL_GPIO_Init+0x2b0>)
 8001762:	68da      	ldr	r2, [r3, #12]
 8001764:	69bb      	ldr	r3, [r7, #24]
 8001766:	43db      	mvns	r3, r3
 8001768:	4915      	ldr	r1, [pc, #84]	; (80017c0 <HAL_GPIO_Init+0x2b0>)
 800176a:	4013      	ands	r3, r2
 800176c:	60cb      	str	r3, [r1, #12]
        }
      }
    }

	position++;
 800176e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001770:	3301      	adds	r3, #1
 8001772:	627b      	str	r3, [r7, #36]	; 0x24
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8001774:	683b      	ldr	r3, [r7, #0]
 8001776:	681a      	ldr	r2, [r3, #0]
 8001778:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800177a:	fa22 f303 	lsr.w	r3, r2, r3
 800177e:	2b00      	cmp	r3, #0
 8001780:	f47f aed0 	bne.w	8001524 <HAL_GPIO_Init+0x14>
  }
}
 8001784:	bf00      	nop
 8001786:	372c      	adds	r7, #44	; 0x2c
 8001788:	46bd      	mov	sp, r7
 800178a:	bc80      	pop	{r7}
 800178c:	4770      	bx	lr
 800178e:	bf00      	nop
 8001790:	10210000 	.word	0x10210000
 8001794:	10110000 	.word	0x10110000
 8001798:	10120000 	.word	0x10120000
 800179c:	10310000 	.word	0x10310000
 80017a0:	10320000 	.word	0x10320000
 80017a4:	10220000 	.word	0x10220000
 80017a8:	40021000 	.word	0x40021000
 80017ac:	40010000 	.word	0x40010000
 80017b0:	40010800 	.word	0x40010800
 80017b4:	40010c00 	.word	0x40010c00
 80017b8:	40011000 	.word	0x40011000
 80017bc:	40011400 	.word	0x40011400
 80017c0:	40010400 	.word	0x40010400

080017c4 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 80017c4:	b480      	push	{r7}
 80017c6:	b083      	sub	sp, #12
 80017c8:	af00      	add	r7, sp, #0
 80017ca:	6078      	str	r0, [r7, #4]
 80017cc:	460b      	mov	r3, r1
 80017ce:	807b      	strh	r3, [r7, #2]
 80017d0:	4613      	mov	r3, r2
 80017d2:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 80017d4:	787b      	ldrb	r3, [r7, #1]
 80017d6:	2b00      	cmp	r3, #0
 80017d8:	d003      	beq.n	80017e2 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 80017da:	887a      	ldrh	r2, [r7, #2]
 80017dc:	687b      	ldr	r3, [r7, #4]
 80017de:	611a      	str	r2, [r3, #16]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
  }
}
 80017e0:	e003      	b.n	80017ea <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
 80017e2:	887b      	ldrh	r3, [r7, #2]
 80017e4:	041a      	lsls	r2, r3, #16
 80017e6:	687b      	ldr	r3, [r7, #4]
 80017e8:	611a      	str	r2, [r3, #16]
}
 80017ea:	bf00      	nop
 80017ec:	370c      	adds	r7, #12
 80017ee:	46bd      	mov	sp, r7
 80017f0:	bc80      	pop	{r7}
 80017f2:	4770      	bx	lr

080017f4 <HAL_PCD_Init>:
  *         parameters in the PCD_InitTypeDef and initialize the associated handle.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Init(PCD_HandleTypeDef *hpcd)
{
 80017f4:	b5f0      	push	{r4, r5, r6, r7, lr}
 80017f6:	b08b      	sub	sp, #44	; 0x2c
 80017f8:	af06      	add	r7, sp, #24
 80017fa:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx;
#endif /* defined (USB_OTG_FS) */
  uint8_t i;

  /* Check the PCD handle allocation */
  if (hpcd == NULL)
 80017fc:	687b      	ldr	r3, [r7, #4]
 80017fe:	2b00      	cmp	r3, #0
 8001800:	d101      	bne.n	8001806 <HAL_PCD_Init+0x12>
  {
    return HAL_ERROR;
 8001802:	2301      	movs	r3, #1
 8001804:	e0fd      	b.n	8001a02 <HAL_PCD_Init+0x20e>

#if defined (USB_OTG_FS)
  USBx = hpcd->Instance;
#endif /* defined (USB_OTG_FS) */

  if (hpcd->State == HAL_PCD_STATE_RESET)
 8001806:	687b      	ldr	r3, [r7, #4]
 8001808:	f893 32a9 	ldrb.w	r3, [r3, #681]	; 0x2a9
 800180c:	b2db      	uxtb	r3, r3
 800180e:	2b00      	cmp	r3, #0
 8001810:	d106      	bne.n	8001820 <HAL_PCD_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hpcd->Lock = HAL_UNLOCKED;
 8001812:	687b      	ldr	r3, [r7, #4]
 8001814:	2200      	movs	r2, #0
 8001816:	f883 22a8 	strb.w	r2, [r3, #680]	; 0x2a8

    /* Init the low level hardware */
    hpcd->MspInitCallback(hpcd);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_PCD_MspInit(hpcd);
 800181a:	6878      	ldr	r0, [r7, #4]
 800181c:	f006 fa00 	bl	8007c20 <HAL_PCD_MspInit>
#endif /* (USE_HAL_PCD_REGISTER_CALLBACKS) */
  }

  hpcd->State = HAL_PCD_STATE_BUSY;
 8001820:	687b      	ldr	r3, [r7, #4]
 8001822:	2203      	movs	r2, #3
 8001824:	f883 22a9 	strb.w	r2, [r3, #681]	; 0x2a9
    hpcd->Init.dma_enable = 0U;
  }
#endif /* defined (USB_OTG_FS) */

  /* Disable the Interrupts */
  __HAL_PCD_DISABLE(hpcd);
 8001828:	687b      	ldr	r3, [r7, #4]
 800182a:	681b      	ldr	r3, [r3, #0]
 800182c:	4618      	mov	r0, r3
 800182e:	f002 fc19 	bl	8004064 <USB_DisableGlobalInt>

  /*Init the Core (common init.) */
  if (USB_CoreInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 8001832:	687b      	ldr	r3, [r7, #4]
 8001834:	681b      	ldr	r3, [r3, #0]
 8001836:	603b      	str	r3, [r7, #0]
 8001838:	687e      	ldr	r6, [r7, #4]
 800183a:	466d      	mov	r5, sp
 800183c:	f106 0410 	add.w	r4, r6, #16
 8001840:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8001842:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8001844:	6823      	ldr	r3, [r4, #0]
 8001846:	602b      	str	r3, [r5, #0]
 8001848:	1d33      	adds	r3, r6, #4
 800184a:	cb0e      	ldmia	r3, {r1, r2, r3}
 800184c:	6838      	ldr	r0, [r7, #0]
 800184e:	f002 fbe3 	bl	8004018 <USB_CoreInit>
 8001852:	4603      	mov	r3, r0
 8001854:	2b00      	cmp	r3, #0
 8001856:	d005      	beq.n	8001864 <HAL_PCD_Init+0x70>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 8001858:	687b      	ldr	r3, [r7, #4]
 800185a:	2202      	movs	r2, #2
 800185c:	f883 22a9 	strb.w	r2, [r3, #681]	; 0x2a9
    return HAL_ERROR;
 8001860:	2301      	movs	r3, #1
 8001862:	e0ce      	b.n	8001a02 <HAL_PCD_Init+0x20e>
  }

  /* Force Device Mode*/
  (void)USB_SetCurrentMode(hpcd->Instance, USB_DEVICE_MODE);
 8001864:	687b      	ldr	r3, [r7, #4]
 8001866:	681b      	ldr	r3, [r3, #0]
 8001868:	2100      	movs	r1, #0
 800186a:	4618      	mov	r0, r3
 800186c:	f002 fc14 	bl	8004098 <USB_SetCurrentMode>

  /* Init endpoints structures */
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8001870:	2300      	movs	r3, #0
 8001872:	73fb      	strb	r3, [r7, #15]
 8001874:	e04c      	b.n	8001910 <HAL_PCD_Init+0x11c>
  {
    /* Init ep structure */
    hpcd->IN_ep[i].is_in = 1U;
 8001876:	7bfb      	ldrb	r3, [r7, #15]
 8001878:	6879      	ldr	r1, [r7, #4]
 800187a:	1c5a      	adds	r2, r3, #1
 800187c:	4613      	mov	r3, r2
 800187e:	009b      	lsls	r3, r3, #2
 8001880:	4413      	add	r3, r2
 8001882:	00db      	lsls	r3, r3, #3
 8001884:	440b      	add	r3, r1
 8001886:	3301      	adds	r3, #1
 8001888:	2201      	movs	r2, #1
 800188a:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].num = i;
 800188c:	7bfb      	ldrb	r3, [r7, #15]
 800188e:	6879      	ldr	r1, [r7, #4]
 8001890:	1c5a      	adds	r2, r3, #1
 8001892:	4613      	mov	r3, r2
 8001894:	009b      	lsls	r3, r3, #2
 8001896:	4413      	add	r3, r2
 8001898:	00db      	lsls	r3, r3, #3
 800189a:	440b      	add	r3, r1
 800189c:	7bfa      	ldrb	r2, [r7, #15]
 800189e:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].tx_fifo_num = i;
 80018a0:	7bfa      	ldrb	r2, [r7, #15]
 80018a2:	7bfb      	ldrb	r3, [r7, #15]
 80018a4:	b298      	uxth	r0, r3
 80018a6:	6879      	ldr	r1, [r7, #4]
 80018a8:	4613      	mov	r3, r2
 80018aa:	009b      	lsls	r3, r3, #2
 80018ac:	4413      	add	r3, r2
 80018ae:	00db      	lsls	r3, r3, #3
 80018b0:	440b      	add	r3, r1
 80018b2:	3336      	adds	r3, #54	; 0x36
 80018b4:	4602      	mov	r2, r0
 80018b6:	801a      	strh	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->IN_ep[i].type = EP_TYPE_CTRL;
 80018b8:	7bfb      	ldrb	r3, [r7, #15]
 80018ba:	6879      	ldr	r1, [r7, #4]
 80018bc:	1c5a      	adds	r2, r3, #1
 80018be:	4613      	mov	r3, r2
 80018c0:	009b      	lsls	r3, r3, #2
 80018c2:	4413      	add	r3, r2
 80018c4:	00db      	lsls	r3, r3, #3
 80018c6:	440b      	add	r3, r1
 80018c8:	3303      	adds	r3, #3
 80018ca:	2200      	movs	r2, #0
 80018cc:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].maxpacket = 0U;
 80018ce:	7bfa      	ldrb	r2, [r7, #15]
 80018d0:	6879      	ldr	r1, [r7, #4]
 80018d2:	4613      	mov	r3, r2
 80018d4:	009b      	lsls	r3, r3, #2
 80018d6:	4413      	add	r3, r2
 80018d8:	00db      	lsls	r3, r3, #3
 80018da:	440b      	add	r3, r1
 80018dc:	3338      	adds	r3, #56	; 0x38
 80018de:	2200      	movs	r2, #0
 80018e0:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_buff = 0U;
 80018e2:	7bfa      	ldrb	r2, [r7, #15]
 80018e4:	6879      	ldr	r1, [r7, #4]
 80018e6:	4613      	mov	r3, r2
 80018e8:	009b      	lsls	r3, r3, #2
 80018ea:	4413      	add	r3, r2
 80018ec:	00db      	lsls	r3, r3, #3
 80018ee:	440b      	add	r3, r1
 80018f0:	333c      	adds	r3, #60	; 0x3c
 80018f2:	2200      	movs	r2, #0
 80018f4:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_len = 0U;
 80018f6:	7bfa      	ldrb	r2, [r7, #15]
 80018f8:	6879      	ldr	r1, [r7, #4]
 80018fa:	4613      	mov	r3, r2
 80018fc:	009b      	lsls	r3, r3, #2
 80018fe:	4413      	add	r3, r2
 8001900:	00db      	lsls	r3, r3, #3
 8001902:	440b      	add	r3, r1
 8001904:	3340      	adds	r3, #64	; 0x40
 8001906:	2200      	movs	r2, #0
 8001908:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 800190a:	7bfb      	ldrb	r3, [r7, #15]
 800190c:	3301      	adds	r3, #1
 800190e:	73fb      	strb	r3, [r7, #15]
 8001910:	7bfa      	ldrb	r2, [r7, #15]
 8001912:	687b      	ldr	r3, [r7, #4]
 8001914:	685b      	ldr	r3, [r3, #4]
 8001916:	429a      	cmp	r2, r3
 8001918:	d3ad      	bcc.n	8001876 <HAL_PCD_Init+0x82>
  }

  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 800191a:	2300      	movs	r3, #0
 800191c:	73fb      	strb	r3, [r7, #15]
 800191e:	e044      	b.n	80019aa <HAL_PCD_Init+0x1b6>
  {
    hpcd->OUT_ep[i].is_in = 0U;
 8001920:	7bfa      	ldrb	r2, [r7, #15]
 8001922:	6879      	ldr	r1, [r7, #4]
 8001924:	4613      	mov	r3, r2
 8001926:	009b      	lsls	r3, r3, #2
 8001928:	4413      	add	r3, r2
 800192a:	00db      	lsls	r3, r3, #3
 800192c:	440b      	add	r3, r1
 800192e:	f203 1369 	addw	r3, r3, #361	; 0x169
 8001932:	2200      	movs	r2, #0
 8001934:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].num = i;
 8001936:	7bfa      	ldrb	r2, [r7, #15]
 8001938:	6879      	ldr	r1, [r7, #4]
 800193a:	4613      	mov	r3, r2
 800193c:	009b      	lsls	r3, r3, #2
 800193e:	4413      	add	r3, r2
 8001940:	00db      	lsls	r3, r3, #3
 8001942:	440b      	add	r3, r1
 8001944:	f503 73b4 	add.w	r3, r3, #360	; 0x168
 8001948:	7bfa      	ldrb	r2, [r7, #15]
 800194a:	701a      	strb	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->OUT_ep[i].type = EP_TYPE_CTRL;
 800194c:	7bfa      	ldrb	r2, [r7, #15]
 800194e:	6879      	ldr	r1, [r7, #4]
 8001950:	4613      	mov	r3, r2
 8001952:	009b      	lsls	r3, r3, #2
 8001954:	4413      	add	r3, r2
 8001956:	00db      	lsls	r3, r3, #3
 8001958:	440b      	add	r3, r1
 800195a:	f203 136b 	addw	r3, r3, #363	; 0x16b
 800195e:	2200      	movs	r2, #0
 8001960:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].maxpacket = 0U;
 8001962:	7bfa      	ldrb	r2, [r7, #15]
 8001964:	6879      	ldr	r1, [r7, #4]
 8001966:	4613      	mov	r3, r2
 8001968:	009b      	lsls	r3, r3, #2
 800196a:	4413      	add	r3, r2
 800196c:	00db      	lsls	r3, r3, #3
 800196e:	440b      	add	r3, r1
 8001970:	f503 73bc 	add.w	r3, r3, #376	; 0x178
 8001974:	2200      	movs	r2, #0
 8001976:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_buff = 0U;
 8001978:	7bfa      	ldrb	r2, [r7, #15]
 800197a:	6879      	ldr	r1, [r7, #4]
 800197c:	4613      	mov	r3, r2
 800197e:	009b      	lsls	r3, r3, #2
 8001980:	4413      	add	r3, r2
 8001982:	00db      	lsls	r3, r3, #3
 8001984:	440b      	add	r3, r1
 8001986:	f503 73be 	add.w	r3, r3, #380	; 0x17c
 800198a:	2200      	movs	r2, #0
 800198c:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_len = 0U;
 800198e:	7bfa      	ldrb	r2, [r7, #15]
 8001990:	6879      	ldr	r1, [r7, #4]
 8001992:	4613      	mov	r3, r2
 8001994:	009b      	lsls	r3, r3, #2
 8001996:	4413      	add	r3, r2
 8001998:	00db      	lsls	r3, r3, #3
 800199a:	440b      	add	r3, r1
 800199c:	f503 73c0 	add.w	r3, r3, #384	; 0x180
 80019a0:	2200      	movs	r2, #0
 80019a2:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 80019a4:	7bfb      	ldrb	r3, [r7, #15]
 80019a6:	3301      	adds	r3, #1
 80019a8:	73fb      	strb	r3, [r7, #15]
 80019aa:	7bfa      	ldrb	r2, [r7, #15]
 80019ac:	687b      	ldr	r3, [r7, #4]
 80019ae:	685b      	ldr	r3, [r3, #4]
 80019b0:	429a      	cmp	r2, r3
 80019b2:	d3b5      	bcc.n	8001920 <HAL_PCD_Init+0x12c>
  }

  /* Init Device */
  if (USB_DevInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 80019b4:	687b      	ldr	r3, [r7, #4]
 80019b6:	681b      	ldr	r3, [r3, #0]
 80019b8:	603b      	str	r3, [r7, #0]
 80019ba:	687e      	ldr	r6, [r7, #4]
 80019bc:	466d      	mov	r5, sp
 80019be:	f106 0410 	add.w	r4, r6, #16
 80019c2:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 80019c4:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 80019c6:	6823      	ldr	r3, [r4, #0]
 80019c8:	602b      	str	r3, [r5, #0]
 80019ca:	1d33      	adds	r3, r6, #4
 80019cc:	cb0e      	ldmia	r3, {r1, r2, r3}
 80019ce:	6838      	ldr	r0, [r7, #0]
 80019d0:	f002 fb6e 	bl	80040b0 <USB_DevInit>
 80019d4:	4603      	mov	r3, r0
 80019d6:	2b00      	cmp	r3, #0
 80019d8:	d005      	beq.n	80019e6 <HAL_PCD_Init+0x1f2>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 80019da:	687b      	ldr	r3, [r7, #4]
 80019dc:	2202      	movs	r2, #2
 80019de:	f883 22a9 	strb.w	r2, [r3, #681]	; 0x2a9
    return HAL_ERROR;
 80019e2:	2301      	movs	r3, #1
 80019e4:	e00d      	b.n	8001a02 <HAL_PCD_Init+0x20e>
  }

  hpcd->USB_Address = 0U;
 80019e6:	687b      	ldr	r3, [r7, #4]
 80019e8:	2200      	movs	r2, #0
 80019ea:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
  hpcd->State = HAL_PCD_STATE_READY;
 80019ee:	687b      	ldr	r3, [r7, #4]
 80019f0:	2201      	movs	r2, #1
 80019f2:	f883 22a9 	strb.w	r2, [r3, #681]	; 0x2a9
  (void)USB_DevDisconnect(hpcd->Instance);
 80019f6:	687b      	ldr	r3, [r7, #4]
 80019f8:	681b      	ldr	r3, [r3, #0]
 80019fa:	4618      	mov	r0, r3
 80019fc:	f004 fb08 	bl	8006010 <USB_DevDisconnect>

  return HAL_OK;
 8001a00:	2300      	movs	r3, #0
}
 8001a02:	4618      	mov	r0, r3
 8001a04:	3714      	adds	r7, #20
 8001a06:	46bd      	mov	sp, r7
 8001a08:	bdf0      	pop	{r4, r5, r6, r7, pc}

08001a0a <HAL_PCD_Start>:
  * @brief  Start the USB device
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Start(PCD_HandleTypeDef *hpcd)
{
 8001a0a:	b580      	push	{r7, lr}
 8001a0c:	b082      	sub	sp, #8
 8001a0e:	af00      	add	r7, sp, #0
 8001a10:	6078      	str	r0, [r7, #4]
  __HAL_LOCK(hpcd);
 8001a12:	687b      	ldr	r3, [r7, #4]
 8001a14:	f893 32a8 	ldrb.w	r3, [r3, #680]	; 0x2a8
 8001a18:	2b01      	cmp	r3, #1
 8001a1a:	d101      	bne.n	8001a20 <HAL_PCD_Start+0x16>
 8001a1c:	2302      	movs	r3, #2
 8001a1e:	e016      	b.n	8001a4e <HAL_PCD_Start+0x44>
 8001a20:	687b      	ldr	r3, [r7, #4]
 8001a22:	2201      	movs	r2, #1
 8001a24:	f883 22a8 	strb.w	r2, [r3, #680]	; 0x2a8
  __HAL_PCD_ENABLE(hpcd);
 8001a28:	687b      	ldr	r3, [r7, #4]
 8001a2a:	681b      	ldr	r3, [r3, #0]
 8001a2c:	4618      	mov	r0, r3
 8001a2e:	f002 fb03 	bl	8004038 <USB_EnableGlobalInt>

#if defined (USB)
  HAL_PCDEx_SetConnectionState(hpcd, 1U);
 8001a32:	2101      	movs	r1, #1
 8001a34:	6878      	ldr	r0, [r7, #4]
 8001a36:	f006 fb66 	bl	8008106 <HAL_PCDEx_SetConnectionState>
#endif /* defined (USB) */

  (void)USB_DevConnect(hpcd->Instance);
 8001a3a:	687b      	ldr	r3, [r7, #4]
 8001a3c:	681b      	ldr	r3, [r3, #0]
 8001a3e:	4618      	mov	r0, r3
 8001a40:	f004 fadc 	bl	8005ffc <USB_DevConnect>
  __HAL_UNLOCK(hpcd);
 8001a44:	687b      	ldr	r3, [r7, #4]
 8001a46:	2200      	movs	r2, #0
 8001a48:	f883 22a8 	strb.w	r2, [r3, #680]	; 0x2a8

  return HAL_OK;
 8001a4c:	2300      	movs	r3, #0
}
 8001a4e:	4618      	mov	r0, r3
 8001a50:	3708      	adds	r7, #8
 8001a52:	46bd      	mov	sp, r7
 8001a54:	bd80      	pop	{r7, pc}

08001a56 <HAL_PCD_IRQHandler>:
  * @brief  This function handles PCD interrupt request.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
void HAL_PCD_IRQHandler(PCD_HandleTypeDef *hpcd)
{
 8001a56:	b580      	push	{r7, lr}
 8001a58:	b088      	sub	sp, #32
 8001a5a:	af00      	add	r7, sp, #0
 8001a5c:	6078      	str	r0, [r7, #4]
  uint16_t store_ep[8];
  uint8_t i;

  if (__HAL_PCD_GET_FLAG(hpcd, USB_ISTR_CTR))
 8001a5e:	687b      	ldr	r3, [r7, #4]
 8001a60:	681b      	ldr	r3, [r3, #0]
 8001a62:	4618      	mov	r0, r3
 8001a64:	f004 fade 	bl	8006024 <USB_ReadInterrupts>
 8001a68:	4603      	mov	r3, r0
 8001a6a:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8001a6e:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8001a72:	d102      	bne.n	8001a7a <HAL_PCD_IRQHandler+0x24>
  {
    /* servicing of the endpoint correct transfer interrupt */
    /* clear of the CTR flag into the sub */
    (void)PCD_EP_ISR_Handler(hpcd);
 8001a74:	6878      	ldr	r0, [r7, #4]
 8001a76:	f000 fb61 	bl	800213c <PCD_EP_ISR_Handler>
  }

  if (__HAL_PCD_GET_FLAG(hpcd, USB_ISTR_RESET))
 8001a7a:	687b      	ldr	r3, [r7, #4]
 8001a7c:	681b      	ldr	r3, [r3, #0]
 8001a7e:	4618      	mov	r0, r3
 8001a80:	f004 fad0 	bl	8006024 <USB_ReadInterrupts>
 8001a84:	4603      	mov	r3, r0
 8001a86:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8001a8a:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8001a8e:	d112      	bne.n	8001ab6 <HAL_PCD_IRQHandler+0x60>
  {
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_RESET);
 8001a90:	687b      	ldr	r3, [r7, #4]
 8001a92:	681b      	ldr	r3, [r3, #0]
 8001a94:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 8001a98:	b29a      	uxth	r2, r3
 8001a9a:	687b      	ldr	r3, [r7, #4]
 8001a9c:	681b      	ldr	r3, [r3, #0]
 8001a9e:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8001aa2:	b292      	uxth	r2, r2
 8001aa4:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
    hpcd->ResetCallback(hpcd);
#else
    HAL_PCD_ResetCallback(hpcd);
 8001aa8:	6878      	ldr	r0, [r7, #4]
 8001aaa:	f006 f934 	bl	8007d16 <HAL_PCD_ResetCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

    (void)HAL_PCD_SetAddress(hpcd, 0U);
 8001aae:	2100      	movs	r1, #0
 8001ab0:	6878      	ldr	r0, [r7, #4]
 8001ab2:	f000 f925 	bl	8001d00 <HAL_PCD_SetAddress>
  }

  if (__HAL_PCD_GET_FLAG(hpcd, USB_ISTR_PMAOVR))
 8001ab6:	687b      	ldr	r3, [r7, #4]
 8001ab8:	681b      	ldr	r3, [r3, #0]
 8001aba:	4618      	mov	r0, r3
 8001abc:	f004 fab2 	bl	8006024 <USB_ReadInterrupts>
 8001ac0:	4603      	mov	r3, r0
 8001ac2:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8001ac6:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8001aca:	d10b      	bne.n	8001ae4 <HAL_PCD_IRQHandler+0x8e>
  {
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_PMAOVR);
 8001acc:	687b      	ldr	r3, [r7, #4]
 8001ace:	681b      	ldr	r3, [r3, #0]
 8001ad0:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 8001ad4:	b29a      	uxth	r2, r3
 8001ad6:	687b      	ldr	r3, [r7, #4]
 8001ad8:	681b      	ldr	r3, [r3, #0]
 8001ada:	f422 4280 	bic.w	r2, r2, #16384	; 0x4000
 8001ade:	b292      	uxth	r2, r2
 8001ae0:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44
  }

  if (__HAL_PCD_GET_FLAG(hpcd, USB_ISTR_ERR))
 8001ae4:	687b      	ldr	r3, [r7, #4]
 8001ae6:	681b      	ldr	r3, [r3, #0]
 8001ae8:	4618      	mov	r0, r3
 8001aea:	f004 fa9b 	bl	8006024 <USB_ReadInterrupts>
 8001aee:	4603      	mov	r3, r0
 8001af0:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8001af4:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8001af8:	d10b      	bne.n	8001b12 <HAL_PCD_IRQHandler+0xbc>
  {
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_ERR);
 8001afa:	687b      	ldr	r3, [r7, #4]
 8001afc:	681b      	ldr	r3, [r3, #0]
 8001afe:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 8001b02:	b29a      	uxth	r2, r3
 8001b04:	687b      	ldr	r3, [r7, #4]
 8001b06:	681b      	ldr	r3, [r3, #0]
 8001b08:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8001b0c:	b292      	uxth	r2, r2
 8001b0e:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44
  }

  if (__HAL_PCD_GET_FLAG(hpcd, USB_ISTR_WKUP))
 8001b12:	687b      	ldr	r3, [r7, #4]
 8001b14:	681b      	ldr	r3, [r3, #0]
 8001b16:	4618      	mov	r0, r3
 8001b18:	f004 fa84 	bl	8006024 <USB_ReadInterrupts>
 8001b1c:	4603      	mov	r3, r0
 8001b1e:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8001b22:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8001b26:	d126      	bne.n	8001b76 <HAL_PCD_IRQHandler+0x120>
  {
    hpcd->Instance->CNTR &= (uint16_t) ~(USB_CNTR_LP_MODE);
 8001b28:	687b      	ldr	r3, [r7, #4]
 8001b2a:	681b      	ldr	r3, [r3, #0]
 8001b2c:	f8b3 3040 	ldrh.w	r3, [r3, #64]	; 0x40
 8001b30:	b29a      	uxth	r2, r3
 8001b32:	687b      	ldr	r3, [r7, #4]
 8001b34:	681b      	ldr	r3, [r3, #0]
 8001b36:	f022 0204 	bic.w	r2, r2, #4
 8001b3a:	b292      	uxth	r2, r2
 8001b3c:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40
    hpcd->Instance->CNTR &= (uint16_t) ~(USB_CNTR_FSUSP);
 8001b40:	687b      	ldr	r3, [r7, #4]
 8001b42:	681b      	ldr	r3, [r3, #0]
 8001b44:	f8b3 3040 	ldrh.w	r3, [r3, #64]	; 0x40
 8001b48:	b29a      	uxth	r2, r3
 8001b4a:	687b      	ldr	r3, [r7, #4]
 8001b4c:	681b      	ldr	r3, [r3, #0]
 8001b4e:	f022 0208 	bic.w	r2, r2, #8
 8001b52:	b292      	uxth	r2, r2
 8001b54:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
    hpcd->ResumeCallback(hpcd);
#else
    HAL_PCD_ResumeCallback(hpcd);
 8001b58:	6878      	ldr	r0, [r7, #4]
 8001b5a:	f006 f915 	bl	8007d88 <HAL_PCD_ResumeCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_WKUP);
 8001b5e:	687b      	ldr	r3, [r7, #4]
 8001b60:	681b      	ldr	r3, [r3, #0]
 8001b62:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 8001b66:	b29a      	uxth	r2, r3
 8001b68:	687b      	ldr	r3, [r7, #4]
 8001b6a:	681b      	ldr	r3, [r3, #0]
 8001b6c:	f422 5280 	bic.w	r2, r2, #4096	; 0x1000
 8001b70:	b292      	uxth	r2, r2
 8001b72:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44
  }

  if (__HAL_PCD_GET_FLAG(hpcd, USB_ISTR_SUSP))
 8001b76:	687b      	ldr	r3, [r7, #4]
 8001b78:	681b      	ldr	r3, [r3, #0]
 8001b7a:	4618      	mov	r0, r3
 8001b7c:	f004 fa52 	bl	8006024 <USB_ReadInterrupts>
 8001b80:	4603      	mov	r3, r0
 8001b82:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8001b86:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8001b8a:	f040 8084 	bne.w	8001c96 <HAL_PCD_IRQHandler+0x240>
  {
    /* WA: To Clear Wakeup flag if raised with suspend signal */

    /* Store Endpoint register */
    for (i = 0U; i < 8U; i++)
 8001b8e:	2300      	movs	r3, #0
 8001b90:	77fb      	strb	r3, [r7, #31]
 8001b92:	e011      	b.n	8001bb8 <HAL_PCD_IRQHandler+0x162>
    {
      store_ep[i] = PCD_GET_ENDPOINT(hpcd->Instance, i);
 8001b94:	687b      	ldr	r3, [r7, #4]
 8001b96:	681b      	ldr	r3, [r3, #0]
 8001b98:	461a      	mov	r2, r3
 8001b9a:	7ffb      	ldrb	r3, [r7, #31]
 8001b9c:	009b      	lsls	r3, r3, #2
 8001b9e:	441a      	add	r2, r3
 8001ba0:	7ffb      	ldrb	r3, [r7, #31]
 8001ba2:	8812      	ldrh	r2, [r2, #0]
 8001ba4:	b292      	uxth	r2, r2
 8001ba6:	005b      	lsls	r3, r3, #1
 8001ba8:	f107 0120 	add.w	r1, r7, #32
 8001bac:	440b      	add	r3, r1
 8001bae:	f823 2c14 	strh.w	r2, [r3, #-20]
    for (i = 0U; i < 8U; i++)
 8001bb2:	7ffb      	ldrb	r3, [r7, #31]
 8001bb4:	3301      	adds	r3, #1
 8001bb6:	77fb      	strb	r3, [r7, #31]
 8001bb8:	7ffb      	ldrb	r3, [r7, #31]
 8001bba:	2b07      	cmp	r3, #7
 8001bbc:	d9ea      	bls.n	8001b94 <HAL_PCD_IRQHandler+0x13e>
    }

    /* FORCE RESET */
    hpcd->Instance->CNTR |= (uint16_t)(USB_CNTR_FRES);
 8001bbe:	687b      	ldr	r3, [r7, #4]
 8001bc0:	681b      	ldr	r3, [r3, #0]
 8001bc2:	f8b3 3040 	ldrh.w	r3, [r3, #64]	; 0x40
 8001bc6:	b29a      	uxth	r2, r3
 8001bc8:	687b      	ldr	r3, [r7, #4]
 8001bca:	681b      	ldr	r3, [r3, #0]
 8001bcc:	f042 0201 	orr.w	r2, r2, #1
 8001bd0:	b292      	uxth	r2, r2
 8001bd2:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40

    /* CLEAR RESET */
    hpcd->Instance->CNTR &= (uint16_t)(~USB_CNTR_FRES);
 8001bd6:	687b      	ldr	r3, [r7, #4]
 8001bd8:	681b      	ldr	r3, [r3, #0]
 8001bda:	f8b3 3040 	ldrh.w	r3, [r3, #64]	; 0x40
 8001bde:	b29a      	uxth	r2, r3
 8001be0:	687b      	ldr	r3, [r7, #4]
 8001be2:	681b      	ldr	r3, [r3, #0]
 8001be4:	f022 0201 	bic.w	r2, r2, #1
 8001be8:	b292      	uxth	r2, r2
 8001bea:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40

    /* wait for reset flag in ISTR */
    while ((hpcd->Instance->ISTR & USB_ISTR_RESET) == 0U)
 8001bee:	bf00      	nop
 8001bf0:	687b      	ldr	r3, [r7, #4]
 8001bf2:	681b      	ldr	r3, [r3, #0]
 8001bf4:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 8001bf8:	b29b      	uxth	r3, r3
 8001bfa:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8001bfe:	2b00      	cmp	r3, #0
 8001c00:	d0f6      	beq.n	8001bf0 <HAL_PCD_IRQHandler+0x19a>
    {
    }

    /* Clear Reset Flag */
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_RESET);
 8001c02:	687b      	ldr	r3, [r7, #4]
 8001c04:	681b      	ldr	r3, [r3, #0]
 8001c06:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 8001c0a:	b29a      	uxth	r2, r3
 8001c0c:	687b      	ldr	r3, [r7, #4]
 8001c0e:	681b      	ldr	r3, [r3, #0]
 8001c10:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8001c14:	b292      	uxth	r2, r2
 8001c16:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44

    /* Restore Registre */
    for (i = 0U; i < 8U; i++)
 8001c1a:	2300      	movs	r3, #0
 8001c1c:	77fb      	strb	r3, [r7, #31]
 8001c1e:	e010      	b.n	8001c42 <HAL_PCD_IRQHandler+0x1ec>
    {
      PCD_SET_ENDPOINT(hpcd->Instance, i, store_ep[i]);
 8001c20:	7ffb      	ldrb	r3, [r7, #31]
 8001c22:	687a      	ldr	r2, [r7, #4]
 8001c24:	6812      	ldr	r2, [r2, #0]
 8001c26:	4611      	mov	r1, r2
 8001c28:	7ffa      	ldrb	r2, [r7, #31]
 8001c2a:	0092      	lsls	r2, r2, #2
 8001c2c:	440a      	add	r2, r1
 8001c2e:	005b      	lsls	r3, r3, #1
 8001c30:	f107 0120 	add.w	r1, r7, #32
 8001c34:	440b      	add	r3, r1
 8001c36:	f833 3c14 	ldrh.w	r3, [r3, #-20]
 8001c3a:	8013      	strh	r3, [r2, #0]
    for (i = 0U; i < 8U; i++)
 8001c3c:	7ffb      	ldrb	r3, [r7, #31]
 8001c3e:	3301      	adds	r3, #1
 8001c40:	77fb      	strb	r3, [r7, #31]
 8001c42:	7ffb      	ldrb	r3, [r7, #31]
 8001c44:	2b07      	cmp	r3, #7
 8001c46:	d9eb      	bls.n	8001c20 <HAL_PCD_IRQHandler+0x1ca>
    }

    /* Force low-power mode in the macrocell */
    hpcd->Instance->CNTR |= (uint16_t)USB_CNTR_FSUSP;
 8001c48:	687b      	ldr	r3, [r7, #4]
 8001c4a:	681b      	ldr	r3, [r3, #0]
 8001c4c:	f8b3 3040 	ldrh.w	r3, [r3, #64]	; 0x40
 8001c50:	b29a      	uxth	r2, r3
 8001c52:	687b      	ldr	r3, [r7, #4]
 8001c54:	681b      	ldr	r3, [r3, #0]
 8001c56:	f042 0208 	orr.w	r2, r2, #8
 8001c5a:	b292      	uxth	r2, r2
 8001c5c:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40

    /* clear of the ISTR bit must be done after setting of CNTR_FSUSP */
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_SUSP);
 8001c60:	687b      	ldr	r3, [r7, #4]
 8001c62:	681b      	ldr	r3, [r3, #0]
 8001c64:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 8001c68:	b29a      	uxth	r2, r3
 8001c6a:	687b      	ldr	r3, [r7, #4]
 8001c6c:	681b      	ldr	r3, [r3, #0]
 8001c6e:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8001c72:	b292      	uxth	r2, r2
 8001c74:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44

    hpcd->Instance->CNTR |= (uint16_t)USB_CNTR_LP_MODE;
 8001c78:	687b      	ldr	r3, [r7, #4]
 8001c7a:	681b      	ldr	r3, [r3, #0]
 8001c7c:	f8b3 3040 	ldrh.w	r3, [r3, #64]	; 0x40
 8001c80:	b29a      	uxth	r2, r3
 8001c82:	687b      	ldr	r3, [r7, #4]
 8001c84:	681b      	ldr	r3, [r3, #0]
 8001c86:	f042 0204 	orr.w	r2, r2, #4
 8001c8a:	b292      	uxth	r2, r2
 8001c8c:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
    hpcd->SuspendCallback(hpcd);
#else
    HAL_PCD_SuspendCallback(hpcd);
 8001c90:	6878      	ldr	r0, [r7, #4]
 8001c92:	f006 f85f 	bl	8007d54 <HAL_PCD_SuspendCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
  }

  if (__HAL_PCD_GET_FLAG(hpcd, USB_ISTR_SOF))
 8001c96:	687b      	ldr	r3, [r7, #4]
 8001c98:	681b      	ldr	r3, [r3, #0]
 8001c9a:	4618      	mov	r0, r3
 8001c9c:	f004 f9c2 	bl	8006024 <USB_ReadInterrupts>
 8001ca0:	4603      	mov	r3, r0
 8001ca2:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8001ca6:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8001caa:	d10e      	bne.n	8001cca <HAL_PCD_IRQHandler+0x274>
  {
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_SOF);
 8001cac:	687b      	ldr	r3, [r7, #4]
 8001cae:	681b      	ldr	r3, [r3, #0]
 8001cb0:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 8001cb4:	b29a      	uxth	r2, r3
 8001cb6:	687b      	ldr	r3, [r7, #4]
 8001cb8:	681b      	ldr	r3, [r3, #0]
 8001cba:	f422 7200 	bic.w	r2, r2, #512	; 0x200
 8001cbe:	b292      	uxth	r2, r2
 8001cc0:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
    hpcd->SOFCallback(hpcd);
#else
    HAL_PCD_SOFCallback(hpcd);
 8001cc4:	6878      	ldr	r0, [r7, #4]
 8001cc6:	f006 f818 	bl	8007cfa <HAL_PCD_SOFCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
  }

  if (__HAL_PCD_GET_FLAG(hpcd, USB_ISTR_ESOF))
 8001cca:	687b      	ldr	r3, [r7, #4]
 8001ccc:	681b      	ldr	r3, [r3, #0]
 8001cce:	4618      	mov	r0, r3
 8001cd0:	f004 f9a8 	bl	8006024 <USB_ReadInterrupts>
 8001cd4:	4603      	mov	r3, r0
 8001cd6:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001cda:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8001cde:	d10b      	bne.n	8001cf8 <HAL_PCD_IRQHandler+0x2a2>
  {
    /* clear ESOF flag in ISTR */
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_ESOF);
 8001ce0:	687b      	ldr	r3, [r7, #4]
 8001ce2:	681b      	ldr	r3, [r3, #0]
 8001ce4:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 8001ce8:	b29a      	uxth	r2, r3
 8001cea:	687b      	ldr	r3, [r7, #4]
 8001cec:	681b      	ldr	r3, [r3, #0]
 8001cee:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8001cf2:	b292      	uxth	r2, r2
 8001cf4:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44
  }
}
 8001cf8:	bf00      	nop
 8001cfa:	3720      	adds	r7, #32
 8001cfc:	46bd      	mov	sp, r7
 8001cfe:	bd80      	pop	{r7, pc}

08001d00 <HAL_PCD_SetAddress>:
  * @param  hpcd PCD handle
  * @param  address new device address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_SetAddress(PCD_HandleTypeDef *hpcd, uint8_t address)
{
 8001d00:	b580      	push	{r7, lr}
 8001d02:	b082      	sub	sp, #8
 8001d04:	af00      	add	r7, sp, #0
 8001d06:	6078      	str	r0, [r7, #4]
 8001d08:	460b      	mov	r3, r1
 8001d0a:	70fb      	strb	r3, [r7, #3]
  __HAL_LOCK(hpcd);
 8001d0c:	687b      	ldr	r3, [r7, #4]
 8001d0e:	f893 32a8 	ldrb.w	r3, [r3, #680]	; 0x2a8
 8001d12:	2b01      	cmp	r3, #1
 8001d14:	d101      	bne.n	8001d1a <HAL_PCD_SetAddress+0x1a>
 8001d16:	2302      	movs	r3, #2
 8001d18:	e013      	b.n	8001d42 <HAL_PCD_SetAddress+0x42>
 8001d1a:	687b      	ldr	r3, [r7, #4]
 8001d1c:	2201      	movs	r2, #1
 8001d1e:	f883 22a8 	strb.w	r2, [r3, #680]	; 0x2a8
  hpcd->USB_Address = address;
 8001d22:	687b      	ldr	r3, [r7, #4]
 8001d24:	78fa      	ldrb	r2, [r7, #3]
 8001d26:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
  (void)USB_SetDevAddress(hpcd->Instance, address);
 8001d2a:	687b      	ldr	r3, [r7, #4]
 8001d2c:	681b      	ldr	r3, [r3, #0]
 8001d2e:	78fa      	ldrb	r2, [r7, #3]
 8001d30:	4611      	mov	r1, r2
 8001d32:	4618      	mov	r0, r3
 8001d34:	f004 f94f 	bl	8005fd6 <USB_SetDevAddress>
  __HAL_UNLOCK(hpcd);
 8001d38:	687b      	ldr	r3, [r7, #4]
 8001d3a:	2200      	movs	r2, #0
 8001d3c:	f883 22a8 	strb.w	r2, [r3, #680]	; 0x2a8

  return HAL_OK;
 8001d40:	2300      	movs	r3, #0
}
 8001d42:	4618      	mov	r0, r3
 8001d44:	3708      	adds	r7, #8
 8001d46:	46bd      	mov	sp, r7
 8001d48:	bd80      	pop	{r7, pc}

08001d4a <HAL_PCD_EP_Open>:
  * @param  ep_type endpoint type
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Open(PCD_HandleTypeDef *hpcd, uint8_t ep_addr,
                                  uint16_t ep_mps, uint8_t ep_type)
{
 8001d4a:	b580      	push	{r7, lr}
 8001d4c:	b084      	sub	sp, #16
 8001d4e:	af00      	add	r7, sp, #0
 8001d50:	6078      	str	r0, [r7, #4]
 8001d52:	4608      	mov	r0, r1
 8001d54:	4611      	mov	r1, r2
 8001d56:	461a      	mov	r2, r3
 8001d58:	4603      	mov	r3, r0
 8001d5a:	70fb      	strb	r3, [r7, #3]
 8001d5c:	460b      	mov	r3, r1
 8001d5e:	803b      	strh	r3, [r7, #0]
 8001d60:	4613      	mov	r3, r2
 8001d62:	70bb      	strb	r3, [r7, #2]
  HAL_StatusTypeDef  ret = HAL_OK;
 8001d64:	2300      	movs	r3, #0
 8001d66:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  if ((ep_addr & 0x80U) == 0x80U)
 8001d68:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8001d6c:	2b00      	cmp	r3, #0
 8001d6e:	da0e      	bge.n	8001d8e <HAL_PCD_EP_Open+0x44>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8001d70:	78fb      	ldrb	r3, [r7, #3]
 8001d72:	f003 0307 	and.w	r3, r3, #7
 8001d76:	1c5a      	adds	r2, r3, #1
 8001d78:	4613      	mov	r3, r2
 8001d7a:	009b      	lsls	r3, r3, #2
 8001d7c:	4413      	add	r3, r2
 8001d7e:	00db      	lsls	r3, r3, #3
 8001d80:	687a      	ldr	r2, [r7, #4]
 8001d82:	4413      	add	r3, r2
 8001d84:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 8001d86:	68fb      	ldr	r3, [r7, #12]
 8001d88:	2201      	movs	r2, #1
 8001d8a:	705a      	strb	r2, [r3, #1]
 8001d8c:	e00e      	b.n	8001dac <HAL_PCD_EP_Open+0x62>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8001d8e:	78fb      	ldrb	r3, [r7, #3]
 8001d90:	f003 0207 	and.w	r2, r3, #7
 8001d94:	4613      	mov	r3, r2
 8001d96:	009b      	lsls	r3, r3, #2
 8001d98:	4413      	add	r3, r2
 8001d9a:	00db      	lsls	r3, r3, #3
 8001d9c:	f503 73b4 	add.w	r3, r3, #360	; 0x168
 8001da0:	687a      	ldr	r2, [r7, #4]
 8001da2:	4413      	add	r3, r2
 8001da4:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 8001da6:	68fb      	ldr	r3, [r7, #12]
 8001da8:	2200      	movs	r2, #0
 8001daa:	705a      	strb	r2, [r3, #1]
  }

  ep->num = ep_addr & EP_ADDR_MSK;
 8001dac:	78fb      	ldrb	r3, [r7, #3]
 8001dae:	f003 0307 	and.w	r3, r3, #7
 8001db2:	b2da      	uxtb	r2, r3
 8001db4:	68fb      	ldr	r3, [r7, #12]
 8001db6:	701a      	strb	r2, [r3, #0]
  ep->maxpacket = ep_mps;
 8001db8:	883a      	ldrh	r2, [r7, #0]
 8001dba:	68fb      	ldr	r3, [r7, #12]
 8001dbc:	611a      	str	r2, [r3, #16]
  ep->type = ep_type;
 8001dbe:	68fb      	ldr	r3, [r7, #12]
 8001dc0:	78ba      	ldrb	r2, [r7, #2]
 8001dc2:	70da      	strb	r2, [r3, #3]

  if (ep->is_in != 0U)
 8001dc4:	68fb      	ldr	r3, [r7, #12]
 8001dc6:	785b      	ldrb	r3, [r3, #1]
 8001dc8:	2b00      	cmp	r3, #0
 8001dca:	d004      	beq.n	8001dd6 <HAL_PCD_EP_Open+0x8c>
  {
    /* Assign a Tx FIFO */
    ep->tx_fifo_num = ep->num;
 8001dcc:	68fb      	ldr	r3, [r7, #12]
 8001dce:	781b      	ldrb	r3, [r3, #0]
 8001dd0:	b29a      	uxth	r2, r3
 8001dd2:	68fb      	ldr	r3, [r7, #12]
 8001dd4:	81da      	strh	r2, [r3, #14]
  }
  /* Set initial data PID. */
  if (ep_type == EP_TYPE_BULK)
 8001dd6:	78bb      	ldrb	r3, [r7, #2]
 8001dd8:	2b02      	cmp	r3, #2
 8001dda:	d102      	bne.n	8001de2 <HAL_PCD_EP_Open+0x98>
  {
    ep->data_pid_start = 0U;
 8001ddc:	68fb      	ldr	r3, [r7, #12]
 8001dde:	2200      	movs	r2, #0
 8001de0:	711a      	strb	r2, [r3, #4]
  }

  __HAL_LOCK(hpcd);
 8001de2:	687b      	ldr	r3, [r7, #4]
 8001de4:	f893 32a8 	ldrb.w	r3, [r3, #680]	; 0x2a8
 8001de8:	2b01      	cmp	r3, #1
 8001dea:	d101      	bne.n	8001df0 <HAL_PCD_EP_Open+0xa6>
 8001dec:	2302      	movs	r3, #2
 8001dee:	e00e      	b.n	8001e0e <HAL_PCD_EP_Open+0xc4>
 8001df0:	687b      	ldr	r3, [r7, #4]
 8001df2:	2201      	movs	r2, #1
 8001df4:	f883 22a8 	strb.w	r2, [r3, #680]	; 0x2a8
  (void)USB_ActivateEndpoint(hpcd->Instance, ep);
 8001df8:	687b      	ldr	r3, [r7, #4]
 8001dfa:	681b      	ldr	r3, [r3, #0]
 8001dfc:	68f9      	ldr	r1, [r7, #12]
 8001dfe:	4618      	mov	r0, r3
 8001e00:	f002 f976 	bl	80040f0 <USB_ActivateEndpoint>
  __HAL_UNLOCK(hpcd);
 8001e04:	687b      	ldr	r3, [r7, #4]
 8001e06:	2200      	movs	r2, #0
 8001e08:	f883 22a8 	strb.w	r2, [r3, #680]	; 0x2a8

  return ret;
 8001e0c:	7afb      	ldrb	r3, [r7, #11]
}
 8001e0e:	4618      	mov	r0, r3
 8001e10:	3710      	adds	r7, #16
 8001e12:	46bd      	mov	sp, r7
 8001e14:	bd80      	pop	{r7, pc}

08001e16 <HAL_PCD_EP_Close>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Close(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 8001e16:	b580      	push	{r7, lr}
 8001e18:	b084      	sub	sp, #16
 8001e1a:	af00      	add	r7, sp, #0
 8001e1c:	6078      	str	r0, [r7, #4]
 8001e1e:	460b      	mov	r3, r1
 8001e20:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if ((ep_addr & 0x80U) == 0x80U)
 8001e22:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8001e26:	2b00      	cmp	r3, #0
 8001e28:	da0e      	bge.n	8001e48 <HAL_PCD_EP_Close+0x32>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8001e2a:	78fb      	ldrb	r3, [r7, #3]
 8001e2c:	f003 0307 	and.w	r3, r3, #7
 8001e30:	1c5a      	adds	r2, r3, #1
 8001e32:	4613      	mov	r3, r2
 8001e34:	009b      	lsls	r3, r3, #2
 8001e36:	4413      	add	r3, r2
 8001e38:	00db      	lsls	r3, r3, #3
 8001e3a:	687a      	ldr	r2, [r7, #4]
 8001e3c:	4413      	add	r3, r2
 8001e3e:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 8001e40:	68fb      	ldr	r3, [r7, #12]
 8001e42:	2201      	movs	r2, #1
 8001e44:	705a      	strb	r2, [r3, #1]
 8001e46:	e00e      	b.n	8001e66 <HAL_PCD_EP_Close+0x50>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8001e48:	78fb      	ldrb	r3, [r7, #3]
 8001e4a:	f003 0207 	and.w	r2, r3, #7
 8001e4e:	4613      	mov	r3, r2
 8001e50:	009b      	lsls	r3, r3, #2
 8001e52:	4413      	add	r3, r2
 8001e54:	00db      	lsls	r3, r3, #3
 8001e56:	f503 73b4 	add.w	r3, r3, #360	; 0x168
 8001e5a:	687a      	ldr	r2, [r7, #4]
 8001e5c:	4413      	add	r3, r2
 8001e5e:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 8001e60:	68fb      	ldr	r3, [r7, #12]
 8001e62:	2200      	movs	r2, #0
 8001e64:	705a      	strb	r2, [r3, #1]
  }
  ep->num   = ep_addr & EP_ADDR_MSK;
 8001e66:	78fb      	ldrb	r3, [r7, #3]
 8001e68:	f003 0307 	and.w	r3, r3, #7
 8001e6c:	b2da      	uxtb	r2, r3
 8001e6e:	68fb      	ldr	r3, [r7, #12]
 8001e70:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 8001e72:	687b      	ldr	r3, [r7, #4]
 8001e74:	f893 32a8 	ldrb.w	r3, [r3, #680]	; 0x2a8
 8001e78:	2b01      	cmp	r3, #1
 8001e7a:	d101      	bne.n	8001e80 <HAL_PCD_EP_Close+0x6a>
 8001e7c:	2302      	movs	r3, #2
 8001e7e:	e00e      	b.n	8001e9e <HAL_PCD_EP_Close+0x88>
 8001e80:	687b      	ldr	r3, [r7, #4]
 8001e82:	2201      	movs	r2, #1
 8001e84:	f883 22a8 	strb.w	r2, [r3, #680]	; 0x2a8
  (void)USB_DeactivateEndpoint(hpcd->Instance, ep);
 8001e88:	687b      	ldr	r3, [r7, #4]
 8001e8a:	681b      	ldr	r3, [r3, #0]
 8001e8c:	68f9      	ldr	r1, [r7, #12]
 8001e8e:	4618      	mov	r0, r3
 8001e90:	f002 fc98 	bl	80047c4 <USB_DeactivateEndpoint>
  __HAL_UNLOCK(hpcd);
 8001e94:	687b      	ldr	r3, [r7, #4]
 8001e96:	2200      	movs	r2, #0
 8001e98:	f883 22a8 	strb.w	r2, [r3, #680]	; 0x2a8
  return HAL_OK;
 8001e9c:	2300      	movs	r3, #0
}
 8001e9e:	4618      	mov	r0, r3
 8001ea0:	3710      	adds	r7, #16
 8001ea2:	46bd      	mov	sp, r7
 8001ea4:	bd80      	pop	{r7, pc}

08001ea6 <HAL_PCD_EP_Receive>:
  * @param  pBuf pointer to the reception buffer
  * @param  len amount of data to be received
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Receive(PCD_HandleTypeDef *hpcd, uint8_t ep_addr, uint8_t *pBuf, uint32_t len)
{
 8001ea6:	b580      	push	{r7, lr}
 8001ea8:	b086      	sub	sp, #24
 8001eaa:	af00      	add	r7, sp, #0
 8001eac:	60f8      	str	r0, [r7, #12]
 8001eae:	607a      	str	r2, [r7, #4]
 8001eb0:	603b      	str	r3, [r7, #0]
 8001eb2:	460b      	mov	r3, r1
 8001eb4:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8001eb6:	7afb      	ldrb	r3, [r7, #11]
 8001eb8:	f003 0207 	and.w	r2, r3, #7
 8001ebc:	4613      	mov	r3, r2
 8001ebe:	009b      	lsls	r3, r3, #2
 8001ec0:	4413      	add	r3, r2
 8001ec2:	00db      	lsls	r3, r3, #3
 8001ec4:	f503 73b4 	add.w	r3, r3, #360	; 0x168
 8001ec8:	68fa      	ldr	r2, [r7, #12]
 8001eca:	4413      	add	r3, r2
 8001ecc:	617b      	str	r3, [r7, #20]

  /*setup and start the Xfer */
  ep->xfer_buff = pBuf;
 8001ece:	697b      	ldr	r3, [r7, #20]
 8001ed0:	687a      	ldr	r2, [r7, #4]
 8001ed2:	615a      	str	r2, [r3, #20]
  ep->xfer_len = len;
 8001ed4:	697b      	ldr	r3, [r7, #20]
 8001ed6:	683a      	ldr	r2, [r7, #0]
 8001ed8:	619a      	str	r2, [r3, #24]
  ep->xfer_count = 0U;
 8001eda:	697b      	ldr	r3, [r7, #20]
 8001edc:	2200      	movs	r2, #0
 8001ede:	61da      	str	r2, [r3, #28]
  ep->is_in = 0U;
 8001ee0:	697b      	ldr	r3, [r7, #20]
 8001ee2:	2200      	movs	r2, #0
 8001ee4:	705a      	strb	r2, [r3, #1]
  ep->num = ep_addr & EP_ADDR_MSK;
 8001ee6:	7afb      	ldrb	r3, [r7, #11]
 8001ee8:	f003 0307 	and.w	r3, r3, #7
 8001eec:	b2da      	uxtb	r2, r3
 8001eee:	697b      	ldr	r3, [r7, #20]
 8001ef0:	701a      	strb	r2, [r3, #0]

  if ((ep_addr & EP_ADDR_MSK) == 0U)
 8001ef2:	7afb      	ldrb	r3, [r7, #11]
 8001ef4:	f003 0307 	and.w	r3, r3, #7
 8001ef8:	2b00      	cmp	r3, #0
 8001efa:	d106      	bne.n	8001f0a <HAL_PCD_EP_Receive+0x64>
  {
    (void)USB_EP0StartXfer(hpcd->Instance, ep);
 8001efc:	68fb      	ldr	r3, [r7, #12]
 8001efe:	681b      	ldr	r3, [r3, #0]
 8001f00:	6979      	ldr	r1, [r7, #20]
 8001f02:	4618      	mov	r0, r3
 8001f04:	f002 fe4a 	bl	8004b9c <USB_EPStartXfer>
 8001f08:	e005      	b.n	8001f16 <HAL_PCD_EP_Receive+0x70>
  }
  else
  {
    (void)USB_EPStartXfer(hpcd->Instance, ep);
 8001f0a:	68fb      	ldr	r3, [r7, #12]
 8001f0c:	681b      	ldr	r3, [r3, #0]
 8001f0e:	6979      	ldr	r1, [r7, #20]
 8001f10:	4618      	mov	r0, r3
 8001f12:	f002 fe43 	bl	8004b9c <USB_EPStartXfer>
  }

  return HAL_OK;
 8001f16:	2300      	movs	r3, #0
}
 8001f18:	4618      	mov	r0, r3
 8001f1a:	3718      	adds	r7, #24
 8001f1c:	46bd      	mov	sp, r7
 8001f1e:	bd80      	pop	{r7, pc}

08001f20 <HAL_PCD_EP_GetRxCount>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval Data Size
  */
uint32_t HAL_PCD_EP_GetRxCount(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 8001f20:	b480      	push	{r7}
 8001f22:	b083      	sub	sp, #12
 8001f24:	af00      	add	r7, sp, #0
 8001f26:	6078      	str	r0, [r7, #4]
 8001f28:	460b      	mov	r3, r1
 8001f2a:	70fb      	strb	r3, [r7, #3]
  return hpcd->OUT_ep[ep_addr & EP_ADDR_MSK].xfer_count;
 8001f2c:	78fb      	ldrb	r3, [r7, #3]
 8001f2e:	f003 0207 	and.w	r2, r3, #7
 8001f32:	6879      	ldr	r1, [r7, #4]
 8001f34:	4613      	mov	r3, r2
 8001f36:	009b      	lsls	r3, r3, #2
 8001f38:	4413      	add	r3, r2
 8001f3a:	00db      	lsls	r3, r3, #3
 8001f3c:	440b      	add	r3, r1
 8001f3e:	f503 73c2 	add.w	r3, r3, #388	; 0x184
 8001f42:	681b      	ldr	r3, [r3, #0]
}
 8001f44:	4618      	mov	r0, r3
 8001f46:	370c      	adds	r7, #12
 8001f48:	46bd      	mov	sp, r7
 8001f4a:	bc80      	pop	{r7}
 8001f4c:	4770      	bx	lr

08001f4e <HAL_PCD_EP_Transmit>:
  * @param  pBuf pointer to the transmission buffer
  * @param  len amount of data to be sent
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Transmit(PCD_HandleTypeDef *hpcd, uint8_t ep_addr, uint8_t *pBuf, uint32_t len)
{
 8001f4e:	b580      	push	{r7, lr}
 8001f50:	b086      	sub	sp, #24
 8001f52:	af00      	add	r7, sp, #0
 8001f54:	60f8      	str	r0, [r7, #12]
 8001f56:	607a      	str	r2, [r7, #4]
 8001f58:	603b      	str	r3, [r7, #0]
 8001f5a:	460b      	mov	r3, r1
 8001f5c:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8001f5e:	7afb      	ldrb	r3, [r7, #11]
 8001f60:	f003 0307 	and.w	r3, r3, #7
 8001f64:	1c5a      	adds	r2, r3, #1
 8001f66:	4613      	mov	r3, r2
 8001f68:	009b      	lsls	r3, r3, #2
 8001f6a:	4413      	add	r3, r2
 8001f6c:	00db      	lsls	r3, r3, #3
 8001f6e:	68fa      	ldr	r2, [r7, #12]
 8001f70:	4413      	add	r3, r2
 8001f72:	617b      	str	r3, [r7, #20]

  /*setup and start the Xfer */
  ep->xfer_buff = pBuf;
 8001f74:	697b      	ldr	r3, [r7, #20]
 8001f76:	687a      	ldr	r2, [r7, #4]
 8001f78:	615a      	str	r2, [r3, #20]
  ep->xfer_len = len;
 8001f7a:	697b      	ldr	r3, [r7, #20]
 8001f7c:	683a      	ldr	r2, [r7, #0]
 8001f7e:	619a      	str	r2, [r3, #24]
#if defined (USB)
  ep->xfer_fill_db = 1U;
 8001f80:	697b      	ldr	r3, [r7, #20]
 8001f82:	2201      	movs	r2, #1
 8001f84:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
  ep->xfer_len_db = len;
 8001f88:	697b      	ldr	r3, [r7, #20]
 8001f8a:	683a      	ldr	r2, [r7, #0]
 8001f8c:	621a      	str	r2, [r3, #32]
#endif /* defined (USB) */
  ep->xfer_count = 0U;
 8001f8e:	697b      	ldr	r3, [r7, #20]
 8001f90:	2200      	movs	r2, #0
 8001f92:	61da      	str	r2, [r3, #28]
  ep->is_in = 1U;
 8001f94:	697b      	ldr	r3, [r7, #20]
 8001f96:	2201      	movs	r2, #1
 8001f98:	705a      	strb	r2, [r3, #1]
  ep->num = ep_addr & EP_ADDR_MSK;
 8001f9a:	7afb      	ldrb	r3, [r7, #11]
 8001f9c:	f003 0307 	and.w	r3, r3, #7
 8001fa0:	b2da      	uxtb	r2, r3
 8001fa2:	697b      	ldr	r3, [r7, #20]
 8001fa4:	701a      	strb	r2, [r3, #0]

  if ((ep_addr & EP_ADDR_MSK) == 0U)
 8001fa6:	7afb      	ldrb	r3, [r7, #11]
 8001fa8:	f003 0307 	and.w	r3, r3, #7
 8001fac:	2b00      	cmp	r3, #0
 8001fae:	d106      	bne.n	8001fbe <HAL_PCD_EP_Transmit+0x70>
  {
    (void)USB_EP0StartXfer(hpcd->Instance, ep);
 8001fb0:	68fb      	ldr	r3, [r7, #12]
 8001fb2:	681b      	ldr	r3, [r3, #0]
 8001fb4:	6979      	ldr	r1, [r7, #20]
 8001fb6:	4618      	mov	r0, r3
 8001fb8:	f002 fdf0 	bl	8004b9c <USB_EPStartXfer>
 8001fbc:	e005      	b.n	8001fca <HAL_PCD_EP_Transmit+0x7c>
  }
  else
  {
    (void)USB_EPStartXfer(hpcd->Instance, ep);
 8001fbe:	68fb      	ldr	r3, [r7, #12]
 8001fc0:	681b      	ldr	r3, [r3, #0]
 8001fc2:	6979      	ldr	r1, [r7, #20]
 8001fc4:	4618      	mov	r0, r3
 8001fc6:	f002 fde9 	bl	8004b9c <USB_EPStartXfer>
  }

  return HAL_OK;
 8001fca:	2300      	movs	r3, #0
}
 8001fcc:	4618      	mov	r0, r3
 8001fce:	3718      	adds	r7, #24
 8001fd0:	46bd      	mov	sp, r7
 8001fd2:	bd80      	pop	{r7, pc}

08001fd4 <HAL_PCD_EP_SetStall>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_SetStall(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 8001fd4:	b580      	push	{r7, lr}
 8001fd6:	b084      	sub	sp, #16
 8001fd8:	af00      	add	r7, sp, #0
 8001fda:	6078      	str	r0, [r7, #4]
 8001fdc:	460b      	mov	r3, r1
 8001fde:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if (((uint32_t)ep_addr & EP_ADDR_MSK) > hpcd->Init.dev_endpoints)
 8001fe0:	78fb      	ldrb	r3, [r7, #3]
 8001fe2:	f003 0207 	and.w	r2, r3, #7
 8001fe6:	687b      	ldr	r3, [r7, #4]
 8001fe8:	685b      	ldr	r3, [r3, #4]
 8001fea:	429a      	cmp	r2, r3
 8001fec:	d901      	bls.n	8001ff2 <HAL_PCD_EP_SetStall+0x1e>
  {
    return HAL_ERROR;
 8001fee:	2301      	movs	r3, #1
 8001ff0:	e04c      	b.n	800208c <HAL_PCD_EP_SetStall+0xb8>
  }

  if ((0x80U & ep_addr) == 0x80U)
 8001ff2:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8001ff6:	2b00      	cmp	r3, #0
 8001ff8:	da0e      	bge.n	8002018 <HAL_PCD_EP_SetStall+0x44>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8001ffa:	78fb      	ldrb	r3, [r7, #3]
 8001ffc:	f003 0307 	and.w	r3, r3, #7
 8002000:	1c5a      	adds	r2, r3, #1
 8002002:	4613      	mov	r3, r2
 8002004:	009b      	lsls	r3, r3, #2
 8002006:	4413      	add	r3, r2
 8002008:	00db      	lsls	r3, r3, #3
 800200a:	687a      	ldr	r2, [r7, #4]
 800200c:	4413      	add	r3, r2
 800200e:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 8002010:	68fb      	ldr	r3, [r7, #12]
 8002012:	2201      	movs	r2, #1
 8002014:	705a      	strb	r2, [r3, #1]
 8002016:	e00c      	b.n	8002032 <HAL_PCD_EP_SetStall+0x5e>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr];
 8002018:	78fa      	ldrb	r2, [r7, #3]
 800201a:	4613      	mov	r3, r2
 800201c:	009b      	lsls	r3, r3, #2
 800201e:	4413      	add	r3, r2
 8002020:	00db      	lsls	r3, r3, #3
 8002022:	f503 73b4 	add.w	r3, r3, #360	; 0x168
 8002026:	687a      	ldr	r2, [r7, #4]
 8002028:	4413      	add	r3, r2
 800202a:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 800202c:	68fb      	ldr	r3, [r7, #12]
 800202e:	2200      	movs	r2, #0
 8002030:	705a      	strb	r2, [r3, #1]
  }

  ep->is_stall = 1U;
 8002032:	68fb      	ldr	r3, [r7, #12]
 8002034:	2201      	movs	r2, #1
 8002036:	709a      	strb	r2, [r3, #2]
  ep->num = ep_addr & EP_ADDR_MSK;
 8002038:	78fb      	ldrb	r3, [r7, #3]
 800203a:	f003 0307 	and.w	r3, r3, #7
 800203e:	b2da      	uxtb	r2, r3
 8002040:	68fb      	ldr	r3, [r7, #12]
 8002042:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 8002044:	687b      	ldr	r3, [r7, #4]
 8002046:	f893 32a8 	ldrb.w	r3, [r3, #680]	; 0x2a8
 800204a:	2b01      	cmp	r3, #1
 800204c:	d101      	bne.n	8002052 <HAL_PCD_EP_SetStall+0x7e>
 800204e:	2302      	movs	r3, #2
 8002050:	e01c      	b.n	800208c <HAL_PCD_EP_SetStall+0xb8>
 8002052:	687b      	ldr	r3, [r7, #4]
 8002054:	2201      	movs	r2, #1
 8002056:	f883 22a8 	strb.w	r2, [r3, #680]	; 0x2a8

  (void)USB_EPSetStall(hpcd->Instance, ep);
 800205a:	687b      	ldr	r3, [r7, #4]
 800205c:	681b      	ldr	r3, [r3, #0]
 800205e:	68f9      	ldr	r1, [r7, #12]
 8002060:	4618      	mov	r0, r3
 8002062:	f003 febb 	bl	8005ddc <USB_EPSetStall>

  if ((ep_addr & EP_ADDR_MSK) == 0U)
 8002066:	78fb      	ldrb	r3, [r7, #3]
 8002068:	f003 0307 	and.w	r3, r3, #7
 800206c:	2b00      	cmp	r3, #0
 800206e:	d108      	bne.n	8002082 <HAL_PCD_EP_SetStall+0xae>
  {
    (void)USB_EP0_OutStart(hpcd->Instance, (uint8_t *)hpcd->Setup);
 8002070:	687b      	ldr	r3, [r7, #4]
 8002072:	681a      	ldr	r2, [r3, #0]
 8002074:	687b      	ldr	r3, [r7, #4]
 8002076:	f503 732c 	add.w	r3, r3, #688	; 0x2b0
 800207a:	4619      	mov	r1, r3
 800207c:	4610      	mov	r0, r2
 800207e:	f003 ffe0 	bl	8006042 <USB_EP0_OutStart>
  }

  __HAL_UNLOCK(hpcd);
 8002082:	687b      	ldr	r3, [r7, #4]
 8002084:	2200      	movs	r2, #0
 8002086:	f883 22a8 	strb.w	r2, [r3, #680]	; 0x2a8

  return HAL_OK;
 800208a:	2300      	movs	r3, #0
}
 800208c:	4618      	mov	r0, r3
 800208e:	3710      	adds	r7, #16
 8002090:	46bd      	mov	sp, r7
 8002092:	bd80      	pop	{r7, pc}

08002094 <HAL_PCD_EP_ClrStall>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_ClrStall(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 8002094:	b580      	push	{r7, lr}
 8002096:	b084      	sub	sp, #16
 8002098:	af00      	add	r7, sp, #0
 800209a:	6078      	str	r0, [r7, #4]
 800209c:	460b      	mov	r3, r1
 800209e:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if (((uint32_t)ep_addr & 0x0FU) > hpcd->Init.dev_endpoints)
 80020a0:	78fb      	ldrb	r3, [r7, #3]
 80020a2:	f003 020f 	and.w	r2, r3, #15
 80020a6:	687b      	ldr	r3, [r7, #4]
 80020a8:	685b      	ldr	r3, [r3, #4]
 80020aa:	429a      	cmp	r2, r3
 80020ac:	d901      	bls.n	80020b2 <HAL_PCD_EP_ClrStall+0x1e>
  {
    return HAL_ERROR;
 80020ae:	2301      	movs	r3, #1
 80020b0:	e040      	b.n	8002134 <HAL_PCD_EP_ClrStall+0xa0>
  }

  if ((0x80U & ep_addr) == 0x80U)
 80020b2:	f997 3003 	ldrsb.w	r3, [r7, #3]
 80020b6:	2b00      	cmp	r3, #0
 80020b8:	da0e      	bge.n	80020d8 <HAL_PCD_EP_ClrStall+0x44>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 80020ba:	78fb      	ldrb	r3, [r7, #3]
 80020bc:	f003 0307 	and.w	r3, r3, #7
 80020c0:	1c5a      	adds	r2, r3, #1
 80020c2:	4613      	mov	r3, r2
 80020c4:	009b      	lsls	r3, r3, #2
 80020c6:	4413      	add	r3, r2
 80020c8:	00db      	lsls	r3, r3, #3
 80020ca:	687a      	ldr	r2, [r7, #4]
 80020cc:	4413      	add	r3, r2
 80020ce:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 80020d0:	68fb      	ldr	r3, [r7, #12]
 80020d2:	2201      	movs	r2, #1
 80020d4:	705a      	strb	r2, [r3, #1]
 80020d6:	e00e      	b.n	80020f6 <HAL_PCD_EP_ClrStall+0x62>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 80020d8:	78fb      	ldrb	r3, [r7, #3]
 80020da:	f003 0207 	and.w	r2, r3, #7
 80020de:	4613      	mov	r3, r2
 80020e0:	009b      	lsls	r3, r3, #2
 80020e2:	4413      	add	r3, r2
 80020e4:	00db      	lsls	r3, r3, #3
 80020e6:	f503 73b4 	add.w	r3, r3, #360	; 0x168
 80020ea:	687a      	ldr	r2, [r7, #4]
 80020ec:	4413      	add	r3, r2
 80020ee:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 80020f0:	68fb      	ldr	r3, [r7, #12]
 80020f2:	2200      	movs	r2, #0
 80020f4:	705a      	strb	r2, [r3, #1]
  }

  ep->is_stall = 0U;
 80020f6:	68fb      	ldr	r3, [r7, #12]
 80020f8:	2200      	movs	r2, #0
 80020fa:	709a      	strb	r2, [r3, #2]
  ep->num = ep_addr & EP_ADDR_MSK;
 80020fc:	78fb      	ldrb	r3, [r7, #3]
 80020fe:	f003 0307 	and.w	r3, r3, #7
 8002102:	b2da      	uxtb	r2, r3
 8002104:	68fb      	ldr	r3, [r7, #12]
 8002106:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 8002108:	687b      	ldr	r3, [r7, #4]
 800210a:	f893 32a8 	ldrb.w	r3, [r3, #680]	; 0x2a8
 800210e:	2b01      	cmp	r3, #1
 8002110:	d101      	bne.n	8002116 <HAL_PCD_EP_ClrStall+0x82>
 8002112:	2302      	movs	r3, #2
 8002114:	e00e      	b.n	8002134 <HAL_PCD_EP_ClrStall+0xa0>
 8002116:	687b      	ldr	r3, [r7, #4]
 8002118:	2201      	movs	r2, #1
 800211a:	f883 22a8 	strb.w	r2, [r3, #680]	; 0x2a8
  (void)USB_EPClearStall(hpcd->Instance, ep);
 800211e:	687b      	ldr	r3, [r7, #4]
 8002120:	681b      	ldr	r3, [r3, #0]
 8002122:	68f9      	ldr	r1, [r7, #12]
 8002124:	4618      	mov	r0, r3
 8002126:	f003 fea9 	bl	8005e7c <USB_EPClearStall>
  __HAL_UNLOCK(hpcd);
 800212a:	687b      	ldr	r3, [r7, #4]
 800212c:	2200      	movs	r2, #0
 800212e:	f883 22a8 	strb.w	r2, [r3, #680]	; 0x2a8

  return HAL_OK;
 8002132:	2300      	movs	r3, #0
}
 8002134:	4618      	mov	r0, r3
 8002136:	3710      	adds	r7, #16
 8002138:	46bd      	mov	sp, r7
 800213a:	bd80      	pop	{r7, pc}

0800213c <PCD_EP_ISR_Handler>:
  * @brief  This function handles PCD Endpoint interrupt request.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
static HAL_StatusTypeDef PCD_EP_ISR_Handler(PCD_HandleTypeDef *hpcd)
{
 800213c:	b580      	push	{r7, lr}
 800213e:	b08e      	sub	sp, #56	; 0x38
 8002140:	af00      	add	r7, sp, #0
 8002142:	6078      	str	r0, [r7, #4]
  PCD_EPTypeDef *ep;
  uint16_t count, wIstr, wEPVal, TxByteNbre;
  uint8_t epindex;

  /* stay in loop while pending interrupts */
  while ((hpcd->Instance->ISTR & USB_ISTR_CTR) != 0U)
 8002144:	e2df      	b.n	8002706 <PCD_EP_ISR_Handler+0x5ca>
  {
    wIstr = hpcd->Instance->ISTR;
 8002146:	687b      	ldr	r3, [r7, #4]
 8002148:	681b      	ldr	r3, [r3, #0]
 800214a:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 800214e:	85fb      	strh	r3, [r7, #46]	; 0x2e

    /* extract highest priority endpoint number */
    epindex = (uint8_t)(wIstr & USB_ISTR_EP_ID);
 8002150:	8dfb      	ldrh	r3, [r7, #46]	; 0x2e
 8002152:	b2db      	uxtb	r3, r3
 8002154:	f003 030f 	and.w	r3, r3, #15
 8002158:	f887 302d 	strb.w	r3, [r7, #45]	; 0x2d

    if (epindex == 0U)
 800215c:	f897 302d 	ldrb.w	r3, [r7, #45]	; 0x2d
 8002160:	2b00      	cmp	r3, #0
 8002162:	f040 8158 	bne.w	8002416 <PCD_EP_ISR_Handler+0x2da>
    {
      /* Decode and service control endpoint interrupt */

      /* DIR bit = origin of the interrupt */
      if ((wIstr & USB_ISTR_DIR) == 0U)
 8002166:	8dfb      	ldrh	r3, [r7, #46]	; 0x2e
 8002168:	f003 0310 	and.w	r3, r3, #16
 800216c:	2b00      	cmp	r3, #0
 800216e:	d152      	bne.n	8002216 <PCD_EP_ISR_Handler+0xda>
      {
        /* DIR = 0 */

        /* DIR = 0 => IN  int */
        /* DIR = 0 implies that (EP_CTR_TX = 1) always */
        PCD_CLEAR_TX_EP_CTR(hpcd->Instance, PCD_ENDP0);
 8002170:	687b      	ldr	r3, [r7, #4]
 8002172:	681b      	ldr	r3, [r3, #0]
 8002174:	881b      	ldrh	r3, [r3, #0]
 8002176:	b29b      	uxth	r3, r3
 8002178:	f423 43e1 	bic.w	r3, r3, #28800	; 0x7080
 800217c:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8002180:	81fb      	strh	r3, [r7, #14]
 8002182:	687b      	ldr	r3, [r7, #4]
 8002184:	681a      	ldr	r2, [r3, #0]
 8002186:	89fb      	ldrh	r3, [r7, #14]
 8002188:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800218c:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8002190:	b29b      	uxth	r3, r3
 8002192:	8013      	strh	r3, [r2, #0]
        ep = &hpcd->IN_ep[0];
 8002194:	687b      	ldr	r3, [r7, #4]
 8002196:	3328      	adds	r3, #40	; 0x28
 8002198:	627b      	str	r3, [r7, #36]	; 0x24

        ep->xfer_count = PCD_GET_EP_TX_CNT(hpcd->Instance, ep->num);
 800219a:	687b      	ldr	r3, [r7, #4]
 800219c:	681b      	ldr	r3, [r3, #0]
 800219e:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 80021a2:	b29b      	uxth	r3, r3
 80021a4:	461a      	mov	r2, r3
 80021a6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80021a8:	781b      	ldrb	r3, [r3, #0]
 80021aa:	00db      	lsls	r3, r3, #3
 80021ac:	4413      	add	r3, r2
 80021ae:	3302      	adds	r3, #2
 80021b0:	005b      	lsls	r3, r3, #1
 80021b2:	687a      	ldr	r2, [r7, #4]
 80021b4:	6812      	ldr	r2, [r2, #0]
 80021b6:	4413      	add	r3, r2
 80021b8:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 80021bc:	881b      	ldrh	r3, [r3, #0]
 80021be:	f3c3 0209 	ubfx	r2, r3, #0, #10
 80021c2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80021c4:	61da      	str	r2, [r3, #28]
        ep->xfer_buff += ep->xfer_count;
 80021c6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80021c8:	695a      	ldr	r2, [r3, #20]
 80021ca:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80021cc:	69db      	ldr	r3, [r3, #28]
 80021ce:	441a      	add	r2, r3
 80021d0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80021d2:	615a      	str	r2, [r3, #20]

        /* TX COMPLETE */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->DataInStageCallback(hpcd, 0U);
#else
        HAL_PCD_DataInStageCallback(hpcd, 0U);
 80021d4:	2100      	movs	r1, #0
 80021d6:	6878      	ldr	r0, [r7, #4]
 80021d8:	f005 fd75 	bl	8007cc6 <HAL_PCD_DataInStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

        if ((hpcd->USB_Address > 0U) && (ep->xfer_len == 0U))
 80021dc:	687b      	ldr	r3, [r7, #4]
 80021de:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 80021e2:	b2db      	uxtb	r3, r3
 80021e4:	2b00      	cmp	r3, #0
 80021e6:	f000 828e 	beq.w	8002706 <PCD_EP_ISR_Handler+0x5ca>
 80021ea:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80021ec:	699b      	ldr	r3, [r3, #24]
 80021ee:	2b00      	cmp	r3, #0
 80021f0:	f040 8289 	bne.w	8002706 <PCD_EP_ISR_Handler+0x5ca>
        {
          hpcd->Instance->DADDR = ((uint16_t)hpcd->USB_Address | USB_DADDR_EF);
 80021f4:	687b      	ldr	r3, [r7, #4]
 80021f6:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 80021fa:	b2db      	uxtb	r3, r3
 80021fc:	f063 037f 	orn	r3, r3, #127	; 0x7f
 8002200:	b2da      	uxtb	r2, r3
 8002202:	687b      	ldr	r3, [r7, #4]
 8002204:	681b      	ldr	r3, [r3, #0]
 8002206:	b292      	uxth	r2, r2
 8002208:	f8a3 204c 	strh.w	r2, [r3, #76]	; 0x4c
          hpcd->USB_Address = 0U;
 800220c:	687b      	ldr	r3, [r7, #4]
 800220e:	2200      	movs	r2, #0
 8002210:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
 8002214:	e277      	b.n	8002706 <PCD_EP_ISR_Handler+0x5ca>
      {
        /* DIR = 1 */

        /* DIR = 1 & CTR_RX => SETUP or OUT int */
        /* DIR = 1 & (CTR_TX | CTR_RX) => 2 int pending */
        ep = &hpcd->OUT_ep[0];
 8002216:	687b      	ldr	r3, [r7, #4]
 8002218:	f503 73b4 	add.w	r3, r3, #360	; 0x168
 800221c:	627b      	str	r3, [r7, #36]	; 0x24
        wEPVal = PCD_GET_ENDPOINT(hpcd->Instance, PCD_ENDP0);
 800221e:	687b      	ldr	r3, [r7, #4]
 8002220:	681b      	ldr	r3, [r3, #0]
 8002222:	881b      	ldrh	r3, [r3, #0]
 8002224:	857b      	strh	r3, [r7, #42]	; 0x2a

        if ((wEPVal & USB_EP_SETUP) != 0U)
 8002226:	8d7b      	ldrh	r3, [r7, #42]	; 0x2a
 8002228:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 800222c:	2b00      	cmp	r3, #0
 800222e:	d034      	beq.n	800229a <PCD_EP_ISR_Handler+0x15e>
        {
          /* Get SETUP Packet */
          ep->xfer_count = PCD_GET_EP_RX_CNT(hpcd->Instance, ep->num);
 8002230:	687b      	ldr	r3, [r7, #4]
 8002232:	681b      	ldr	r3, [r3, #0]
 8002234:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8002238:	b29b      	uxth	r3, r3
 800223a:	461a      	mov	r2, r3
 800223c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800223e:	781b      	ldrb	r3, [r3, #0]
 8002240:	00db      	lsls	r3, r3, #3
 8002242:	4413      	add	r3, r2
 8002244:	3306      	adds	r3, #6
 8002246:	005b      	lsls	r3, r3, #1
 8002248:	687a      	ldr	r2, [r7, #4]
 800224a:	6812      	ldr	r2, [r2, #0]
 800224c:	4413      	add	r3, r2
 800224e:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8002252:	881b      	ldrh	r3, [r3, #0]
 8002254:	f3c3 0209 	ubfx	r2, r3, #0, #10
 8002258:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800225a:	61da      	str	r2, [r3, #28]

          USB_ReadPMA(hpcd->Instance, (uint8_t *)hpcd->Setup,
 800225c:	687b      	ldr	r3, [r7, #4]
 800225e:	6818      	ldr	r0, [r3, #0]
 8002260:	687b      	ldr	r3, [r7, #4]
 8002262:	f503 712c 	add.w	r1, r3, #688	; 0x2b0
 8002266:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002268:	88da      	ldrh	r2, [r3, #6]
                      ep->pmaadress, (uint16_t)ep->xfer_count);
 800226a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800226c:	69db      	ldr	r3, [r3, #28]
          USB_ReadPMA(hpcd->Instance, (uint8_t *)hpcd->Setup,
 800226e:	b29b      	uxth	r3, r3
 8002270:	f003 ff36 	bl	80060e0 <USB_ReadPMA>

          /* SETUP bit kept frozen while CTR_RX = 1 */
          PCD_CLEAR_RX_EP_CTR(hpcd->Instance, PCD_ENDP0);
 8002274:	687b      	ldr	r3, [r7, #4]
 8002276:	681b      	ldr	r3, [r3, #0]
 8002278:	881b      	ldrh	r3, [r3, #0]
 800227a:	b29a      	uxth	r2, r3
 800227c:	f640 738f 	movw	r3, #3983	; 0xf8f
 8002280:	4013      	ands	r3, r2
 8002282:	823b      	strh	r3, [r7, #16]
 8002284:	687b      	ldr	r3, [r7, #4]
 8002286:	681b      	ldr	r3, [r3, #0]
 8002288:	8a3a      	ldrh	r2, [r7, #16]
 800228a:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 800228e:	b292      	uxth	r2, r2
 8002290:	801a      	strh	r2, [r3, #0]

          /* Process SETUP Packet*/
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
          hpcd->SetupStageCallback(hpcd);
#else
          HAL_PCD_SetupStageCallback(hpcd);
 8002292:	6878      	ldr	r0, [r7, #4]
 8002294:	f005 fcea 	bl	8007c6c <HAL_PCD_SetupStageCallback>
 8002298:	e235      	b.n	8002706 <PCD_EP_ISR_Handler+0x5ca>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
        }
        else if ((wEPVal & USB_EP_CTR_RX) != 0U)
 800229a:	f9b7 302a 	ldrsh.w	r3, [r7, #42]	; 0x2a
 800229e:	2b00      	cmp	r3, #0
 80022a0:	f280 8231 	bge.w	8002706 <PCD_EP_ISR_Handler+0x5ca>
        {
          PCD_CLEAR_RX_EP_CTR(hpcd->Instance, PCD_ENDP0);
 80022a4:	687b      	ldr	r3, [r7, #4]
 80022a6:	681b      	ldr	r3, [r3, #0]
 80022a8:	881b      	ldrh	r3, [r3, #0]
 80022aa:	b29a      	uxth	r2, r3
 80022ac:	f640 738f 	movw	r3, #3983	; 0xf8f
 80022b0:	4013      	ands	r3, r2
 80022b2:	83bb      	strh	r3, [r7, #28]
 80022b4:	687b      	ldr	r3, [r7, #4]
 80022b6:	681b      	ldr	r3, [r3, #0]
 80022b8:	8bba      	ldrh	r2, [r7, #28]
 80022ba:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 80022be:	b292      	uxth	r2, r2
 80022c0:	801a      	strh	r2, [r3, #0]

          /* Get Control Data OUT Packet */
          ep->xfer_count = PCD_GET_EP_RX_CNT(hpcd->Instance, ep->num);
 80022c2:	687b      	ldr	r3, [r7, #4]
 80022c4:	681b      	ldr	r3, [r3, #0]
 80022c6:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 80022ca:	b29b      	uxth	r3, r3
 80022cc:	461a      	mov	r2, r3
 80022ce:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80022d0:	781b      	ldrb	r3, [r3, #0]
 80022d2:	00db      	lsls	r3, r3, #3
 80022d4:	4413      	add	r3, r2
 80022d6:	3306      	adds	r3, #6
 80022d8:	005b      	lsls	r3, r3, #1
 80022da:	687a      	ldr	r2, [r7, #4]
 80022dc:	6812      	ldr	r2, [r2, #0]
 80022de:	4413      	add	r3, r2
 80022e0:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 80022e4:	881b      	ldrh	r3, [r3, #0]
 80022e6:	f3c3 0209 	ubfx	r2, r3, #0, #10
 80022ea:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80022ec:	61da      	str	r2, [r3, #28]

          if ((ep->xfer_count != 0U) && (ep->xfer_buff != 0U))
 80022ee:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80022f0:	69db      	ldr	r3, [r3, #28]
 80022f2:	2b00      	cmp	r3, #0
 80022f4:	d019      	beq.n	800232a <PCD_EP_ISR_Handler+0x1ee>
 80022f6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80022f8:	695b      	ldr	r3, [r3, #20]
 80022fa:	2b00      	cmp	r3, #0
 80022fc:	d015      	beq.n	800232a <PCD_EP_ISR_Handler+0x1ee>
          {
            USB_ReadPMA(hpcd->Instance, ep->xfer_buff,
 80022fe:	687b      	ldr	r3, [r7, #4]
 8002300:	6818      	ldr	r0, [r3, #0]
 8002302:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002304:	6959      	ldr	r1, [r3, #20]
 8002306:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002308:	88da      	ldrh	r2, [r3, #6]
                        ep->pmaadress, (uint16_t)ep->xfer_count);
 800230a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800230c:	69db      	ldr	r3, [r3, #28]
            USB_ReadPMA(hpcd->Instance, ep->xfer_buff,
 800230e:	b29b      	uxth	r3, r3
 8002310:	f003 fee6 	bl	80060e0 <USB_ReadPMA>

            ep->xfer_buff += ep->xfer_count;
 8002314:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002316:	695a      	ldr	r2, [r3, #20]
 8002318:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800231a:	69db      	ldr	r3, [r3, #28]
 800231c:	441a      	add	r2, r3
 800231e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002320:	615a      	str	r2, [r3, #20]

            /* Process Control Data OUT Packet */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
            hpcd->DataOutStageCallback(hpcd, 0U);
#else
            HAL_PCD_DataOutStageCallback(hpcd, 0U);
 8002322:	2100      	movs	r1, #0
 8002324:	6878      	ldr	r0, [r7, #4]
 8002326:	f005 fcb3 	bl	8007c90 <HAL_PCD_DataOutStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
          }

          PCD_SET_EP_RX_CNT(hpcd->Instance, PCD_ENDP0, ep->maxpacket);
 800232a:	687b      	ldr	r3, [r7, #4]
 800232c:	681b      	ldr	r3, [r3, #0]
 800232e:	61bb      	str	r3, [r7, #24]
 8002330:	687b      	ldr	r3, [r7, #4]
 8002332:	681b      	ldr	r3, [r3, #0]
 8002334:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8002338:	b29b      	uxth	r3, r3
 800233a:	461a      	mov	r2, r3
 800233c:	69bb      	ldr	r3, [r7, #24]
 800233e:	4413      	add	r3, r2
 8002340:	61bb      	str	r3, [r7, #24]
 8002342:	69bb      	ldr	r3, [r7, #24]
 8002344:	f203 430c 	addw	r3, r3, #1036	; 0x40c
 8002348:	617b      	str	r3, [r7, #20]
 800234a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800234c:	691b      	ldr	r3, [r3, #16]
 800234e:	2b00      	cmp	r3, #0
 8002350:	d112      	bne.n	8002378 <PCD_EP_ISR_Handler+0x23c>
 8002352:	697b      	ldr	r3, [r7, #20]
 8002354:	881b      	ldrh	r3, [r3, #0]
 8002356:	b29b      	uxth	r3, r3
 8002358:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 800235c:	b29a      	uxth	r2, r3
 800235e:	697b      	ldr	r3, [r7, #20]
 8002360:	801a      	strh	r2, [r3, #0]
 8002362:	697b      	ldr	r3, [r7, #20]
 8002364:	881b      	ldrh	r3, [r3, #0]
 8002366:	b29b      	uxth	r3, r3
 8002368:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800236c:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8002370:	b29a      	uxth	r2, r3
 8002372:	697b      	ldr	r3, [r7, #20]
 8002374:	801a      	strh	r2, [r3, #0]
 8002376:	e02f      	b.n	80023d8 <PCD_EP_ISR_Handler+0x29c>
 8002378:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800237a:	691b      	ldr	r3, [r3, #16]
 800237c:	2b3e      	cmp	r3, #62	; 0x3e
 800237e:	d813      	bhi.n	80023a8 <PCD_EP_ISR_Handler+0x26c>
 8002380:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002382:	691b      	ldr	r3, [r3, #16]
 8002384:	085b      	lsrs	r3, r3, #1
 8002386:	633b      	str	r3, [r7, #48]	; 0x30
 8002388:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800238a:	691b      	ldr	r3, [r3, #16]
 800238c:	f003 0301 	and.w	r3, r3, #1
 8002390:	2b00      	cmp	r3, #0
 8002392:	d002      	beq.n	800239a <PCD_EP_ISR_Handler+0x25e>
 8002394:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002396:	3301      	adds	r3, #1
 8002398:	633b      	str	r3, [r7, #48]	; 0x30
 800239a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800239c:	b29b      	uxth	r3, r3
 800239e:	029b      	lsls	r3, r3, #10
 80023a0:	b29a      	uxth	r2, r3
 80023a2:	697b      	ldr	r3, [r7, #20]
 80023a4:	801a      	strh	r2, [r3, #0]
 80023a6:	e017      	b.n	80023d8 <PCD_EP_ISR_Handler+0x29c>
 80023a8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80023aa:	691b      	ldr	r3, [r3, #16]
 80023ac:	095b      	lsrs	r3, r3, #5
 80023ae:	633b      	str	r3, [r7, #48]	; 0x30
 80023b0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80023b2:	691b      	ldr	r3, [r3, #16]
 80023b4:	f003 031f 	and.w	r3, r3, #31
 80023b8:	2b00      	cmp	r3, #0
 80023ba:	d102      	bne.n	80023c2 <PCD_EP_ISR_Handler+0x286>
 80023bc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80023be:	3b01      	subs	r3, #1
 80023c0:	633b      	str	r3, [r7, #48]	; 0x30
 80023c2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80023c4:	b29b      	uxth	r3, r3
 80023c6:	029b      	lsls	r3, r3, #10
 80023c8:	b29b      	uxth	r3, r3
 80023ca:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 80023ce:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 80023d2:	b29a      	uxth	r2, r3
 80023d4:	697b      	ldr	r3, [r7, #20]
 80023d6:	801a      	strh	r2, [r3, #0]
          PCD_SET_EP_RX_STATUS(hpcd->Instance, PCD_ENDP0, USB_EP_RX_VALID);
 80023d8:	687b      	ldr	r3, [r7, #4]
 80023da:	681b      	ldr	r3, [r3, #0]
 80023dc:	881b      	ldrh	r3, [r3, #0]
 80023de:	b29b      	uxth	r3, r3
 80023e0:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 80023e4:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80023e8:	827b      	strh	r3, [r7, #18]
 80023ea:	8a7b      	ldrh	r3, [r7, #18]
 80023ec:	f483 5380 	eor.w	r3, r3, #4096	; 0x1000
 80023f0:	827b      	strh	r3, [r7, #18]
 80023f2:	8a7b      	ldrh	r3, [r7, #18]
 80023f4:	f483 5300 	eor.w	r3, r3, #8192	; 0x2000
 80023f8:	827b      	strh	r3, [r7, #18]
 80023fa:	687b      	ldr	r3, [r7, #4]
 80023fc:	681a      	ldr	r2, [r3, #0]
 80023fe:	8a7b      	ldrh	r3, [r7, #18]
 8002400:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8002404:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8002408:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800240c:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8002410:	b29b      	uxth	r3, r3
 8002412:	8013      	strh	r3, [r2, #0]
 8002414:	e177      	b.n	8002706 <PCD_EP_ISR_Handler+0x5ca>
    }
    else
    {
      /* Decode and service non control endpoints interrupt */
      /* process related endpoint register */
      wEPVal = PCD_GET_ENDPOINT(hpcd->Instance, epindex);
 8002416:	687b      	ldr	r3, [r7, #4]
 8002418:	681b      	ldr	r3, [r3, #0]
 800241a:	461a      	mov	r2, r3
 800241c:	f897 302d 	ldrb.w	r3, [r7, #45]	; 0x2d
 8002420:	009b      	lsls	r3, r3, #2
 8002422:	4413      	add	r3, r2
 8002424:	881b      	ldrh	r3, [r3, #0]
 8002426:	857b      	strh	r3, [r7, #42]	; 0x2a

      if ((wEPVal & USB_EP_CTR_RX) != 0U)
 8002428:	f9b7 302a 	ldrsh.w	r3, [r7, #42]	; 0x2a
 800242c:	2b00      	cmp	r3, #0
 800242e:	f280 80ea 	bge.w	8002606 <PCD_EP_ISR_Handler+0x4ca>
      {
        /* clear int flag */
        PCD_CLEAR_RX_EP_CTR(hpcd->Instance, epindex);
 8002432:	687b      	ldr	r3, [r7, #4]
 8002434:	681b      	ldr	r3, [r3, #0]
 8002436:	461a      	mov	r2, r3
 8002438:	f897 302d 	ldrb.w	r3, [r7, #45]	; 0x2d
 800243c:	009b      	lsls	r3, r3, #2
 800243e:	4413      	add	r3, r2
 8002440:	881b      	ldrh	r3, [r3, #0]
 8002442:	b29a      	uxth	r2, r3
 8002444:	f640 738f 	movw	r3, #3983	; 0xf8f
 8002448:	4013      	ands	r3, r2
 800244a:	853b      	strh	r3, [r7, #40]	; 0x28
 800244c:	687b      	ldr	r3, [r7, #4]
 800244e:	681b      	ldr	r3, [r3, #0]
 8002450:	461a      	mov	r2, r3
 8002452:	f897 302d 	ldrb.w	r3, [r7, #45]	; 0x2d
 8002456:	009b      	lsls	r3, r3, #2
 8002458:	4413      	add	r3, r2
 800245a:	8d3a      	ldrh	r2, [r7, #40]	; 0x28
 800245c:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 8002460:	b292      	uxth	r2, r2
 8002462:	801a      	strh	r2, [r3, #0]
        ep = &hpcd->OUT_ep[epindex];
 8002464:	f897 202d 	ldrb.w	r2, [r7, #45]	; 0x2d
 8002468:	4613      	mov	r3, r2
 800246a:	009b      	lsls	r3, r3, #2
 800246c:	4413      	add	r3, r2
 800246e:	00db      	lsls	r3, r3, #3
 8002470:	f503 73b4 	add.w	r3, r3, #360	; 0x168
 8002474:	687a      	ldr	r2, [r7, #4]
 8002476:	4413      	add	r3, r2
 8002478:	627b      	str	r3, [r7, #36]	; 0x24

        /* OUT Single Buffering */
        if (ep->doublebuffer == 0U)
 800247a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800247c:	7b1b      	ldrb	r3, [r3, #12]
 800247e:	2b00      	cmp	r3, #0
 8002480:	d122      	bne.n	80024c8 <PCD_EP_ISR_Handler+0x38c>
        {
          count = (uint16_t)PCD_GET_EP_RX_CNT(hpcd->Instance, ep->num);
 8002482:	687b      	ldr	r3, [r7, #4]
 8002484:	681b      	ldr	r3, [r3, #0]
 8002486:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 800248a:	b29b      	uxth	r3, r3
 800248c:	461a      	mov	r2, r3
 800248e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002490:	781b      	ldrb	r3, [r3, #0]
 8002492:	00db      	lsls	r3, r3, #3
 8002494:	4413      	add	r3, r2
 8002496:	3306      	adds	r3, #6
 8002498:	005b      	lsls	r3, r3, #1
 800249a:	687a      	ldr	r2, [r7, #4]
 800249c:	6812      	ldr	r2, [r2, #0]
 800249e:	4413      	add	r3, r2
 80024a0:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 80024a4:	881b      	ldrh	r3, [r3, #0]
 80024a6:	f3c3 0309 	ubfx	r3, r3, #0, #10
 80024aa:	86fb      	strh	r3, [r7, #54]	; 0x36

          if (count != 0U)
 80024ac:	8efb      	ldrh	r3, [r7, #54]	; 0x36
 80024ae:	2b00      	cmp	r3, #0
 80024b0:	f000 8087 	beq.w	80025c2 <PCD_EP_ISR_Handler+0x486>
          {
            USB_ReadPMA(hpcd->Instance, ep->xfer_buff, ep->pmaadress, count);
 80024b4:	687b      	ldr	r3, [r7, #4]
 80024b6:	6818      	ldr	r0, [r3, #0]
 80024b8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80024ba:	6959      	ldr	r1, [r3, #20]
 80024bc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80024be:	88da      	ldrh	r2, [r3, #6]
 80024c0:	8efb      	ldrh	r3, [r7, #54]	; 0x36
 80024c2:	f003 fe0d 	bl	80060e0 <USB_ReadPMA>
 80024c6:	e07c      	b.n	80025c2 <PCD_EP_ISR_Handler+0x486>
          }
        }
        else
        {
          /* manage double buffer bulk out */
          if (ep->type == EP_TYPE_BULK)
 80024c8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80024ca:	78db      	ldrb	r3, [r3, #3]
 80024cc:	2b02      	cmp	r3, #2
 80024ce:	d108      	bne.n	80024e2 <PCD_EP_ISR_Handler+0x3a6>
          {
            count = HAL_PCD_EP_DB_Receive(hpcd, ep, wEPVal);
 80024d0:	8d7b      	ldrh	r3, [r7, #42]	; 0x2a
 80024d2:	461a      	mov	r2, r3
 80024d4:	6a79      	ldr	r1, [r7, #36]	; 0x24
 80024d6:	6878      	ldr	r0, [r7, #4]
 80024d8:	f000 f923 	bl	8002722 <HAL_PCD_EP_DB_Receive>
 80024dc:	4603      	mov	r3, r0
 80024de:	86fb      	strh	r3, [r7, #54]	; 0x36
 80024e0:	e06f      	b.n	80025c2 <PCD_EP_ISR_Handler+0x486>
          }
          else /* manage double buffer iso out */
          {
            /* free EP OUT Buffer */
            PCD_FreeUserBuffer(hpcd->Instance, ep->num, 0U);
 80024e2:	687b      	ldr	r3, [r7, #4]
 80024e4:	681b      	ldr	r3, [r3, #0]
 80024e6:	461a      	mov	r2, r3
 80024e8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80024ea:	781b      	ldrb	r3, [r3, #0]
 80024ec:	009b      	lsls	r3, r3, #2
 80024ee:	4413      	add	r3, r2
 80024f0:	881b      	ldrh	r3, [r3, #0]
 80024f2:	b29b      	uxth	r3, r3
 80024f4:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80024f8:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80024fc:	847b      	strh	r3, [r7, #34]	; 0x22
 80024fe:	687b      	ldr	r3, [r7, #4]
 8002500:	681b      	ldr	r3, [r3, #0]
 8002502:	461a      	mov	r2, r3
 8002504:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002506:	781b      	ldrb	r3, [r3, #0]
 8002508:	009b      	lsls	r3, r3, #2
 800250a:	441a      	add	r2, r3
 800250c:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 800250e:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8002512:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8002516:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800251a:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 800251e:	b29b      	uxth	r3, r3
 8002520:	8013      	strh	r3, [r2, #0]

            if ((PCD_GET_ENDPOINT(hpcd->Instance, ep->num) & USB_EP_DTOG_RX) != 0U)
 8002522:	687b      	ldr	r3, [r7, #4]
 8002524:	681b      	ldr	r3, [r3, #0]
 8002526:	461a      	mov	r2, r3
 8002528:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800252a:	781b      	ldrb	r3, [r3, #0]
 800252c:	009b      	lsls	r3, r3, #2
 800252e:	4413      	add	r3, r2
 8002530:	881b      	ldrh	r3, [r3, #0]
 8002532:	b29b      	uxth	r3, r3
 8002534:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8002538:	2b00      	cmp	r3, #0
 800253a:	d021      	beq.n	8002580 <PCD_EP_ISR_Handler+0x444>
            {
              /* read from endpoint BUF0Addr buffer */
              count = (uint16_t)PCD_GET_EP_DBUF0_CNT(hpcd->Instance, ep->num);
 800253c:	687b      	ldr	r3, [r7, #4]
 800253e:	681b      	ldr	r3, [r3, #0]
 8002540:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8002544:	b29b      	uxth	r3, r3
 8002546:	461a      	mov	r2, r3
 8002548:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800254a:	781b      	ldrb	r3, [r3, #0]
 800254c:	00db      	lsls	r3, r3, #3
 800254e:	4413      	add	r3, r2
 8002550:	3302      	adds	r3, #2
 8002552:	005b      	lsls	r3, r3, #1
 8002554:	687a      	ldr	r2, [r7, #4]
 8002556:	6812      	ldr	r2, [r2, #0]
 8002558:	4413      	add	r3, r2
 800255a:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 800255e:	881b      	ldrh	r3, [r3, #0]
 8002560:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8002564:	86fb      	strh	r3, [r7, #54]	; 0x36

              if (count != 0U)
 8002566:	8efb      	ldrh	r3, [r7, #54]	; 0x36
 8002568:	2b00      	cmp	r3, #0
 800256a:	d02a      	beq.n	80025c2 <PCD_EP_ISR_Handler+0x486>
              {
                USB_ReadPMA(hpcd->Instance, ep->xfer_buff, ep->pmaaddr0, count);
 800256c:	687b      	ldr	r3, [r7, #4]
 800256e:	6818      	ldr	r0, [r3, #0]
 8002570:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002572:	6959      	ldr	r1, [r3, #20]
 8002574:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002576:	891a      	ldrh	r2, [r3, #8]
 8002578:	8efb      	ldrh	r3, [r7, #54]	; 0x36
 800257a:	f003 fdb1 	bl	80060e0 <USB_ReadPMA>
 800257e:	e020      	b.n	80025c2 <PCD_EP_ISR_Handler+0x486>
              }
            }
            else
            {
              /* read from endpoint BUF1Addr buffer */
              count = (uint16_t)PCD_GET_EP_DBUF1_CNT(hpcd->Instance, ep->num);
 8002580:	687b      	ldr	r3, [r7, #4]
 8002582:	681b      	ldr	r3, [r3, #0]
 8002584:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8002588:	b29b      	uxth	r3, r3
 800258a:	461a      	mov	r2, r3
 800258c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800258e:	781b      	ldrb	r3, [r3, #0]
 8002590:	00db      	lsls	r3, r3, #3
 8002592:	4413      	add	r3, r2
 8002594:	3306      	adds	r3, #6
 8002596:	005b      	lsls	r3, r3, #1
 8002598:	687a      	ldr	r2, [r7, #4]
 800259a:	6812      	ldr	r2, [r2, #0]
 800259c:	4413      	add	r3, r2
 800259e:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 80025a2:	881b      	ldrh	r3, [r3, #0]
 80025a4:	f3c3 0309 	ubfx	r3, r3, #0, #10
 80025a8:	86fb      	strh	r3, [r7, #54]	; 0x36

              if (count != 0U)
 80025aa:	8efb      	ldrh	r3, [r7, #54]	; 0x36
 80025ac:	2b00      	cmp	r3, #0
 80025ae:	d008      	beq.n	80025c2 <PCD_EP_ISR_Handler+0x486>
              {
                USB_ReadPMA(hpcd->Instance, ep->xfer_buff, ep->pmaaddr1, count);
 80025b0:	687b      	ldr	r3, [r7, #4]
 80025b2:	6818      	ldr	r0, [r3, #0]
 80025b4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80025b6:	6959      	ldr	r1, [r3, #20]
 80025b8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80025ba:	895a      	ldrh	r2, [r3, #10]
 80025bc:	8efb      	ldrh	r3, [r7, #54]	; 0x36
 80025be:	f003 fd8f 	bl	80060e0 <USB_ReadPMA>
              }
            }
          }
        }
        /* multi-packet on the NON control OUT endpoint */
        ep->xfer_count += count;
 80025c2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80025c4:	69da      	ldr	r2, [r3, #28]
 80025c6:	8efb      	ldrh	r3, [r7, #54]	; 0x36
 80025c8:	441a      	add	r2, r3
 80025ca:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80025cc:	61da      	str	r2, [r3, #28]
        ep->xfer_buff += count;
 80025ce:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80025d0:	695a      	ldr	r2, [r3, #20]
 80025d2:	8efb      	ldrh	r3, [r7, #54]	; 0x36
 80025d4:	441a      	add	r2, r3
 80025d6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80025d8:	615a      	str	r2, [r3, #20]

        if ((ep->xfer_len == 0U) || (count < ep->maxpacket))
 80025da:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80025dc:	699b      	ldr	r3, [r3, #24]
 80025de:	2b00      	cmp	r3, #0
 80025e0:	d004      	beq.n	80025ec <PCD_EP_ISR_Handler+0x4b0>
 80025e2:	8efa      	ldrh	r2, [r7, #54]	; 0x36
 80025e4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80025e6:	691b      	ldr	r3, [r3, #16]
 80025e8:	429a      	cmp	r2, r3
 80025ea:	d206      	bcs.n	80025fa <PCD_EP_ISR_Handler+0x4be>
        {
          /* RX COMPLETE */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
          hpcd->DataOutStageCallback(hpcd, ep->num);
#else
          HAL_PCD_DataOutStageCallback(hpcd, ep->num);
 80025ec:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80025ee:	781b      	ldrb	r3, [r3, #0]
 80025f0:	4619      	mov	r1, r3
 80025f2:	6878      	ldr	r0, [r7, #4]
 80025f4:	f005 fb4c 	bl	8007c90 <HAL_PCD_DataOutStageCallback>
 80025f8:	e005      	b.n	8002606 <PCD_EP_ISR_Handler+0x4ca>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
        }
        else
        {
          (void) USB_EPStartXfer(hpcd->Instance, ep);
 80025fa:	687b      	ldr	r3, [r7, #4]
 80025fc:	681b      	ldr	r3, [r3, #0]
 80025fe:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8002600:	4618      	mov	r0, r3
 8002602:	f002 facb 	bl	8004b9c <USB_EPStartXfer>
        }

      }

      if ((wEPVal & USB_EP_CTR_TX) != 0U)
 8002606:	8d7b      	ldrh	r3, [r7, #42]	; 0x2a
 8002608:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800260c:	2b00      	cmp	r3, #0
 800260e:	d07a      	beq.n	8002706 <PCD_EP_ISR_Handler+0x5ca>
      {
        ep = &hpcd->IN_ep[epindex];
 8002610:	f897 302d 	ldrb.w	r3, [r7, #45]	; 0x2d
 8002614:	1c5a      	adds	r2, r3, #1
 8002616:	4613      	mov	r3, r2
 8002618:	009b      	lsls	r3, r3, #2
 800261a:	4413      	add	r3, r2
 800261c:	00db      	lsls	r3, r3, #3
 800261e:	687a      	ldr	r2, [r7, #4]
 8002620:	4413      	add	r3, r2
 8002622:	627b      	str	r3, [r7, #36]	; 0x24

        /* clear int flag */
        PCD_CLEAR_TX_EP_CTR(hpcd->Instance, epindex);
 8002624:	687b      	ldr	r3, [r7, #4]
 8002626:	681b      	ldr	r3, [r3, #0]
 8002628:	461a      	mov	r2, r3
 800262a:	f897 302d 	ldrb.w	r3, [r7, #45]	; 0x2d
 800262e:	009b      	lsls	r3, r3, #2
 8002630:	4413      	add	r3, r2
 8002632:	881b      	ldrh	r3, [r3, #0]
 8002634:	b29b      	uxth	r3, r3
 8002636:	f423 43e1 	bic.w	r3, r3, #28800	; 0x7080
 800263a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800263e:	843b      	strh	r3, [r7, #32]
 8002640:	687b      	ldr	r3, [r7, #4]
 8002642:	681b      	ldr	r3, [r3, #0]
 8002644:	461a      	mov	r2, r3
 8002646:	f897 302d 	ldrb.w	r3, [r7, #45]	; 0x2d
 800264a:	009b      	lsls	r3, r3, #2
 800264c:	441a      	add	r2, r3
 800264e:	8c3b      	ldrh	r3, [r7, #32]
 8002650:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8002654:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8002658:	b29b      	uxth	r3, r3
 800265a:	8013      	strh	r3, [r2, #0]

        /* Manage all non bulk transaction or Bulk Single Buffer Transaction */
        if ((ep->type != EP_TYPE_BULK) ||
 800265c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800265e:	78db      	ldrb	r3, [r3, #3]
 8002660:	2b02      	cmp	r3, #2
 8002662:	d108      	bne.n	8002676 <PCD_EP_ISR_Handler+0x53a>
            ((ep->type == EP_TYPE_BULK) && ((wEPVal & USB_EP_KIND) == 0U)))
 8002664:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002666:	78db      	ldrb	r3, [r3, #3]
        if ((ep->type != EP_TYPE_BULK) ||
 8002668:	2b02      	cmp	r3, #2
 800266a:	d146      	bne.n	80026fa <PCD_EP_ISR_Handler+0x5be>
            ((ep->type == EP_TYPE_BULK) && ((wEPVal & USB_EP_KIND) == 0U)))
 800266c:	8d7b      	ldrh	r3, [r7, #42]	; 0x2a
 800266e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002672:	2b00      	cmp	r3, #0
 8002674:	d141      	bne.n	80026fa <PCD_EP_ISR_Handler+0x5be>
        {
          /* multi-packet on the NON control IN endpoint */
          TxByteNbre = (uint16_t)PCD_GET_EP_TX_CNT(hpcd->Instance, ep->num);
 8002676:	687b      	ldr	r3, [r7, #4]
 8002678:	681b      	ldr	r3, [r3, #0]
 800267a:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 800267e:	b29b      	uxth	r3, r3
 8002680:	461a      	mov	r2, r3
 8002682:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002684:	781b      	ldrb	r3, [r3, #0]
 8002686:	00db      	lsls	r3, r3, #3
 8002688:	4413      	add	r3, r2
 800268a:	3302      	adds	r3, #2
 800268c:	005b      	lsls	r3, r3, #1
 800268e:	687a      	ldr	r2, [r7, #4]
 8002690:	6812      	ldr	r2, [r2, #0]
 8002692:	4413      	add	r3, r2
 8002694:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8002698:	881b      	ldrh	r3, [r3, #0]
 800269a:	f3c3 0309 	ubfx	r3, r3, #0, #10
 800269e:	83fb      	strh	r3, [r7, #30]

          if (ep->xfer_len > TxByteNbre)
 80026a0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80026a2:	699a      	ldr	r2, [r3, #24]
 80026a4:	8bfb      	ldrh	r3, [r7, #30]
 80026a6:	429a      	cmp	r2, r3
 80026a8:	d906      	bls.n	80026b8 <PCD_EP_ISR_Handler+0x57c>
          {
            ep->xfer_len -= TxByteNbre;
 80026aa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80026ac:	699a      	ldr	r2, [r3, #24]
 80026ae:	8bfb      	ldrh	r3, [r7, #30]
 80026b0:	1ad2      	subs	r2, r2, r3
 80026b2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80026b4:	619a      	str	r2, [r3, #24]
 80026b6:	e002      	b.n	80026be <PCD_EP_ISR_Handler+0x582>
          }
          else
          {
            ep->xfer_len = 0U;
 80026b8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80026ba:	2200      	movs	r2, #0
 80026bc:	619a      	str	r2, [r3, #24]
          }

          /* Zero Length Packet? */
          if (ep->xfer_len == 0U)
 80026be:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80026c0:	699b      	ldr	r3, [r3, #24]
 80026c2:	2b00      	cmp	r3, #0
 80026c4:	d106      	bne.n	80026d4 <PCD_EP_ISR_Handler+0x598>
          {
            /* TX COMPLETE */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
            hpcd->DataInStageCallback(hpcd, ep->num);
#else
            HAL_PCD_DataInStageCallback(hpcd, ep->num);
 80026c6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80026c8:	781b      	ldrb	r3, [r3, #0]
 80026ca:	4619      	mov	r1, r3
 80026cc:	6878      	ldr	r0, [r7, #4]
 80026ce:	f005 fafa 	bl	8007cc6 <HAL_PCD_DataInStageCallback>
 80026d2:	e018      	b.n	8002706 <PCD_EP_ISR_Handler+0x5ca>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
          }
          else
          {
            /* Transfer is not yet Done */
            ep->xfer_buff += TxByteNbre;
 80026d4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80026d6:	695a      	ldr	r2, [r3, #20]
 80026d8:	8bfb      	ldrh	r3, [r7, #30]
 80026da:	441a      	add	r2, r3
 80026dc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80026de:	615a      	str	r2, [r3, #20]
            ep->xfer_count += TxByteNbre;
 80026e0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80026e2:	69da      	ldr	r2, [r3, #28]
 80026e4:	8bfb      	ldrh	r3, [r7, #30]
 80026e6:	441a      	add	r2, r3
 80026e8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80026ea:	61da      	str	r2, [r3, #28]
            (void)USB_EPStartXfer(hpcd->Instance, ep);
 80026ec:	687b      	ldr	r3, [r7, #4]
 80026ee:	681b      	ldr	r3, [r3, #0]
 80026f0:	6a79      	ldr	r1, [r7, #36]	; 0x24
 80026f2:	4618      	mov	r0, r3
 80026f4:	f002 fa52 	bl	8004b9c <USB_EPStartXfer>
          if (ep->xfer_len == 0U)
 80026f8:	e005      	b.n	8002706 <PCD_EP_ISR_Handler+0x5ca>
          }
        }
        /* bulk in double buffer enable in case of transferLen> Ep_Mps */
        else
        {
          (void)HAL_PCD_EP_DB_Transmit(hpcd, ep, wEPVal);
 80026fa:	8d7b      	ldrh	r3, [r7, #42]	; 0x2a
 80026fc:	461a      	mov	r2, r3
 80026fe:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8002700:	6878      	ldr	r0, [r7, #4]
 8002702:	f000 f91b 	bl	800293c <HAL_PCD_EP_DB_Transmit>
  while ((hpcd->Instance->ISTR & USB_ISTR_CTR) != 0U)
 8002706:	687b      	ldr	r3, [r7, #4]
 8002708:	681b      	ldr	r3, [r3, #0]
 800270a:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 800270e:	b29b      	uxth	r3, r3
 8002710:	b21b      	sxth	r3, r3
 8002712:	2b00      	cmp	r3, #0
 8002714:	f6ff ad17 	blt.w	8002146 <PCD_EP_ISR_Handler+0xa>
        }
      }
    }
  }

  return HAL_OK;
 8002718:	2300      	movs	r3, #0
}
 800271a:	4618      	mov	r0, r3
 800271c:	3738      	adds	r7, #56	; 0x38
 800271e:	46bd      	mov	sp, r7
 8002720:	bd80      	pop	{r7, pc}

08002722 <HAL_PCD_EP_DB_Receive>:
  * @param  wEPVal Last snapshot of EPRx register value taken in ISR
  * @retval HAL status
  */
static uint16_t HAL_PCD_EP_DB_Receive(PCD_HandleTypeDef *hpcd,
                                      PCD_EPTypeDef *ep, uint16_t wEPVal)
{
 8002722:	b580      	push	{r7, lr}
 8002724:	b088      	sub	sp, #32
 8002726:	af00      	add	r7, sp, #0
 8002728:	60f8      	str	r0, [r7, #12]
 800272a:	60b9      	str	r1, [r7, #8]
 800272c:	4613      	mov	r3, r2
 800272e:	80fb      	strh	r3, [r7, #6]
  uint16_t count;

  /* Manage Buffer0 OUT */
  if ((wEPVal & USB_EP_DTOG_RX) != 0U)
 8002730:	88fb      	ldrh	r3, [r7, #6]
 8002732:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8002736:	2b00      	cmp	r3, #0
 8002738:	d07e      	beq.n	8002838 <HAL_PCD_EP_DB_Receive+0x116>
  {
    /* Get count of received Data on buffer0 */
    count = (uint16_t)PCD_GET_EP_DBUF0_CNT(hpcd->Instance, ep->num);
 800273a:	68fb      	ldr	r3, [r7, #12]
 800273c:	681b      	ldr	r3, [r3, #0]
 800273e:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8002742:	b29b      	uxth	r3, r3
 8002744:	461a      	mov	r2, r3
 8002746:	68bb      	ldr	r3, [r7, #8]
 8002748:	781b      	ldrb	r3, [r3, #0]
 800274a:	00db      	lsls	r3, r3, #3
 800274c:	4413      	add	r3, r2
 800274e:	3302      	adds	r3, #2
 8002750:	005b      	lsls	r3, r3, #1
 8002752:	68fa      	ldr	r2, [r7, #12]
 8002754:	6812      	ldr	r2, [r2, #0]
 8002756:	4413      	add	r3, r2
 8002758:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 800275c:	881b      	ldrh	r3, [r3, #0]
 800275e:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8002762:	837b      	strh	r3, [r7, #26]

    if (ep->xfer_len >= count)
 8002764:	68bb      	ldr	r3, [r7, #8]
 8002766:	699a      	ldr	r2, [r3, #24]
 8002768:	8b7b      	ldrh	r3, [r7, #26]
 800276a:	429a      	cmp	r2, r3
 800276c:	d306      	bcc.n	800277c <HAL_PCD_EP_DB_Receive+0x5a>
    {
      ep->xfer_len -= count;
 800276e:	68bb      	ldr	r3, [r7, #8]
 8002770:	699a      	ldr	r2, [r3, #24]
 8002772:	8b7b      	ldrh	r3, [r7, #26]
 8002774:	1ad2      	subs	r2, r2, r3
 8002776:	68bb      	ldr	r3, [r7, #8]
 8002778:	619a      	str	r2, [r3, #24]
 800277a:	e002      	b.n	8002782 <HAL_PCD_EP_DB_Receive+0x60>
    }
    else
    {
      ep->xfer_len = 0U;
 800277c:	68bb      	ldr	r3, [r7, #8]
 800277e:	2200      	movs	r2, #0
 8002780:	619a      	str	r2, [r3, #24]
    }

    if (ep->xfer_len == 0U)
 8002782:	68bb      	ldr	r3, [r7, #8]
 8002784:	699b      	ldr	r3, [r3, #24]
 8002786:	2b00      	cmp	r3, #0
 8002788:	d123      	bne.n	80027d2 <HAL_PCD_EP_DB_Receive+0xb0>
    {
      /* set NAK to OUT endpoint since double buffer is enabled */
      PCD_SET_EP_RX_STATUS(hpcd->Instance, ep->num, USB_EP_RX_NAK);
 800278a:	68fb      	ldr	r3, [r7, #12]
 800278c:	681b      	ldr	r3, [r3, #0]
 800278e:	461a      	mov	r2, r3
 8002790:	68bb      	ldr	r3, [r7, #8]
 8002792:	781b      	ldrb	r3, [r3, #0]
 8002794:	009b      	lsls	r3, r3, #2
 8002796:	4413      	add	r3, r2
 8002798:	881b      	ldrh	r3, [r3, #0]
 800279a:	b29b      	uxth	r3, r3
 800279c:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 80027a0:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80027a4:	833b      	strh	r3, [r7, #24]
 80027a6:	8b3b      	ldrh	r3, [r7, #24]
 80027a8:	f483 5300 	eor.w	r3, r3, #8192	; 0x2000
 80027ac:	833b      	strh	r3, [r7, #24]
 80027ae:	68fb      	ldr	r3, [r7, #12]
 80027b0:	681b      	ldr	r3, [r3, #0]
 80027b2:	461a      	mov	r2, r3
 80027b4:	68bb      	ldr	r3, [r7, #8]
 80027b6:	781b      	ldrb	r3, [r3, #0]
 80027b8:	009b      	lsls	r3, r3, #2
 80027ba:	441a      	add	r2, r3
 80027bc:	8b3b      	ldrh	r3, [r7, #24]
 80027be:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 80027c2:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 80027c6:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80027ca:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80027ce:	b29b      	uxth	r3, r3
 80027d0:	8013      	strh	r3, [r2, #0]
    }

    /* Check if Buffer1 is in blocked sate which requires to toggle */
    if ((wEPVal & USB_EP_DTOG_TX) != 0U)
 80027d2:	88fb      	ldrh	r3, [r7, #6]
 80027d4:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80027d8:	2b00      	cmp	r3, #0
 80027da:	d01f      	beq.n	800281c <HAL_PCD_EP_DB_Receive+0xfa>
    {
      PCD_FreeUserBuffer(hpcd->Instance, ep->num, 0U);
 80027dc:	68fb      	ldr	r3, [r7, #12]
 80027de:	681b      	ldr	r3, [r3, #0]
 80027e0:	461a      	mov	r2, r3
 80027e2:	68bb      	ldr	r3, [r7, #8]
 80027e4:	781b      	ldrb	r3, [r3, #0]
 80027e6:	009b      	lsls	r3, r3, #2
 80027e8:	4413      	add	r3, r2
 80027ea:	881b      	ldrh	r3, [r3, #0]
 80027ec:	b29b      	uxth	r3, r3
 80027ee:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80027f2:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80027f6:	82fb      	strh	r3, [r7, #22]
 80027f8:	68fb      	ldr	r3, [r7, #12]
 80027fa:	681b      	ldr	r3, [r3, #0]
 80027fc:	461a      	mov	r2, r3
 80027fe:	68bb      	ldr	r3, [r7, #8]
 8002800:	781b      	ldrb	r3, [r3, #0]
 8002802:	009b      	lsls	r3, r3, #2
 8002804:	441a      	add	r2, r3
 8002806:	8afb      	ldrh	r3, [r7, #22]
 8002808:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 800280c:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8002810:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8002814:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 8002818:	b29b      	uxth	r3, r3
 800281a:	8013      	strh	r3, [r2, #0]
    }

    if (count != 0U)
 800281c:	8b7b      	ldrh	r3, [r7, #26]
 800281e:	2b00      	cmp	r3, #0
 8002820:	f000 8087 	beq.w	8002932 <HAL_PCD_EP_DB_Receive+0x210>
    {
      USB_ReadPMA(hpcd->Instance, ep->xfer_buff, ep->pmaaddr0, count);
 8002824:	68fb      	ldr	r3, [r7, #12]
 8002826:	6818      	ldr	r0, [r3, #0]
 8002828:	68bb      	ldr	r3, [r7, #8]
 800282a:	6959      	ldr	r1, [r3, #20]
 800282c:	68bb      	ldr	r3, [r7, #8]
 800282e:	891a      	ldrh	r2, [r3, #8]
 8002830:	8b7b      	ldrh	r3, [r7, #26]
 8002832:	f003 fc55 	bl	80060e0 <USB_ReadPMA>
 8002836:	e07c      	b.n	8002932 <HAL_PCD_EP_DB_Receive+0x210>
  }
  /* Manage Buffer 1 DTOG_RX=0 */
  else
  {
    /* Get count of received data */
    count = (uint16_t)PCD_GET_EP_DBUF1_CNT(hpcd->Instance, ep->num);
 8002838:	68fb      	ldr	r3, [r7, #12]
 800283a:	681b      	ldr	r3, [r3, #0]
 800283c:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8002840:	b29b      	uxth	r3, r3
 8002842:	461a      	mov	r2, r3
 8002844:	68bb      	ldr	r3, [r7, #8]
 8002846:	781b      	ldrb	r3, [r3, #0]
 8002848:	00db      	lsls	r3, r3, #3
 800284a:	4413      	add	r3, r2
 800284c:	3306      	adds	r3, #6
 800284e:	005b      	lsls	r3, r3, #1
 8002850:	68fa      	ldr	r2, [r7, #12]
 8002852:	6812      	ldr	r2, [r2, #0]
 8002854:	4413      	add	r3, r2
 8002856:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 800285a:	881b      	ldrh	r3, [r3, #0]
 800285c:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8002860:	837b      	strh	r3, [r7, #26]

    if (ep->xfer_len >= count)
 8002862:	68bb      	ldr	r3, [r7, #8]
 8002864:	699a      	ldr	r2, [r3, #24]
 8002866:	8b7b      	ldrh	r3, [r7, #26]
 8002868:	429a      	cmp	r2, r3
 800286a:	d306      	bcc.n	800287a <HAL_PCD_EP_DB_Receive+0x158>
    {
      ep->xfer_len -= count;
 800286c:	68bb      	ldr	r3, [r7, #8]
 800286e:	699a      	ldr	r2, [r3, #24]
 8002870:	8b7b      	ldrh	r3, [r7, #26]
 8002872:	1ad2      	subs	r2, r2, r3
 8002874:	68bb      	ldr	r3, [r7, #8]
 8002876:	619a      	str	r2, [r3, #24]
 8002878:	e002      	b.n	8002880 <HAL_PCD_EP_DB_Receive+0x15e>
    }
    else
    {
      ep->xfer_len = 0U;
 800287a:	68bb      	ldr	r3, [r7, #8]
 800287c:	2200      	movs	r2, #0
 800287e:	619a      	str	r2, [r3, #24]
    }

    if (ep->xfer_len == 0U)
 8002880:	68bb      	ldr	r3, [r7, #8]
 8002882:	699b      	ldr	r3, [r3, #24]
 8002884:	2b00      	cmp	r3, #0
 8002886:	d123      	bne.n	80028d0 <HAL_PCD_EP_DB_Receive+0x1ae>
    {
      /* set NAK on the current endpoint */
      PCD_SET_EP_RX_STATUS(hpcd->Instance, ep->num, USB_EP_RX_NAK);
 8002888:	68fb      	ldr	r3, [r7, #12]
 800288a:	681b      	ldr	r3, [r3, #0]
 800288c:	461a      	mov	r2, r3
 800288e:	68bb      	ldr	r3, [r7, #8]
 8002890:	781b      	ldrb	r3, [r3, #0]
 8002892:	009b      	lsls	r3, r3, #2
 8002894:	4413      	add	r3, r2
 8002896:	881b      	ldrh	r3, [r3, #0]
 8002898:	b29b      	uxth	r3, r3
 800289a:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 800289e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80028a2:	83fb      	strh	r3, [r7, #30]
 80028a4:	8bfb      	ldrh	r3, [r7, #30]
 80028a6:	f483 5300 	eor.w	r3, r3, #8192	; 0x2000
 80028aa:	83fb      	strh	r3, [r7, #30]
 80028ac:	68fb      	ldr	r3, [r7, #12]
 80028ae:	681b      	ldr	r3, [r3, #0]
 80028b0:	461a      	mov	r2, r3
 80028b2:	68bb      	ldr	r3, [r7, #8]
 80028b4:	781b      	ldrb	r3, [r3, #0]
 80028b6:	009b      	lsls	r3, r3, #2
 80028b8:	441a      	add	r2, r3
 80028ba:	8bfb      	ldrh	r3, [r7, #30]
 80028bc:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 80028c0:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 80028c4:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80028c8:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80028cc:	b29b      	uxth	r3, r3
 80028ce:	8013      	strh	r3, [r2, #0]
    }

    /*Need to FreeUser Buffer*/
    if ((wEPVal & USB_EP_DTOG_TX) == 0U)
 80028d0:	88fb      	ldrh	r3, [r7, #6]
 80028d2:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80028d6:	2b00      	cmp	r3, #0
 80028d8:	d11f      	bne.n	800291a <HAL_PCD_EP_DB_Receive+0x1f8>
    {
      PCD_FreeUserBuffer(hpcd->Instance, ep->num, 0U);
 80028da:	68fb      	ldr	r3, [r7, #12]
 80028dc:	681b      	ldr	r3, [r3, #0]
 80028de:	461a      	mov	r2, r3
 80028e0:	68bb      	ldr	r3, [r7, #8]
 80028e2:	781b      	ldrb	r3, [r3, #0]
 80028e4:	009b      	lsls	r3, r3, #2
 80028e6:	4413      	add	r3, r2
 80028e8:	881b      	ldrh	r3, [r3, #0]
 80028ea:	b29b      	uxth	r3, r3
 80028ec:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80028f0:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80028f4:	83bb      	strh	r3, [r7, #28]
 80028f6:	68fb      	ldr	r3, [r7, #12]
 80028f8:	681b      	ldr	r3, [r3, #0]
 80028fa:	461a      	mov	r2, r3
 80028fc:	68bb      	ldr	r3, [r7, #8]
 80028fe:	781b      	ldrb	r3, [r3, #0]
 8002900:	009b      	lsls	r3, r3, #2
 8002902:	441a      	add	r2, r3
 8002904:	8bbb      	ldrh	r3, [r7, #28]
 8002906:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 800290a:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 800290e:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8002912:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 8002916:	b29b      	uxth	r3, r3
 8002918:	8013      	strh	r3, [r2, #0]
    }

    if (count != 0U)
 800291a:	8b7b      	ldrh	r3, [r7, #26]
 800291c:	2b00      	cmp	r3, #0
 800291e:	d008      	beq.n	8002932 <HAL_PCD_EP_DB_Receive+0x210>
    {
      USB_ReadPMA(hpcd->Instance, ep->xfer_buff, ep->pmaaddr1, count);
 8002920:	68fb      	ldr	r3, [r7, #12]
 8002922:	6818      	ldr	r0, [r3, #0]
 8002924:	68bb      	ldr	r3, [r7, #8]
 8002926:	6959      	ldr	r1, [r3, #20]
 8002928:	68bb      	ldr	r3, [r7, #8]
 800292a:	895a      	ldrh	r2, [r3, #10]
 800292c:	8b7b      	ldrh	r3, [r7, #26]
 800292e:	f003 fbd7 	bl	80060e0 <USB_ReadPMA>
    }
  }

  return count;
 8002932:	8b7b      	ldrh	r3, [r7, #26]
}
 8002934:	4618      	mov	r0, r3
 8002936:	3720      	adds	r7, #32
 8002938:	46bd      	mov	sp, r7
 800293a:	bd80      	pop	{r7, pc}

0800293c <HAL_PCD_EP_DB_Transmit>:
  * @param  wEPVal Last snapshot of EPRx register value taken in ISR
  * @retval HAL status
  */
static HAL_StatusTypeDef HAL_PCD_EP_DB_Transmit(PCD_HandleTypeDef *hpcd,
                                                PCD_EPTypeDef *ep, uint16_t wEPVal)
{
 800293c:	b580      	push	{r7, lr}
 800293e:	b092      	sub	sp, #72	; 0x48
 8002940:	af00      	add	r7, sp, #0
 8002942:	60f8      	str	r0, [r7, #12]
 8002944:	60b9      	str	r1, [r7, #8]
 8002946:	4613      	mov	r3, r2
 8002948:	80fb      	strh	r3, [r7, #6]
  uint32_t len;
  uint16_t TxByteNbre;

  /* Data Buffer0 ACK received */
  if ((wEPVal & USB_EP_DTOG_TX) != 0U)
 800294a:	88fb      	ldrh	r3, [r7, #6]
 800294c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002950:	2b00      	cmp	r3, #0
 8002952:	f000 8132 	beq.w	8002bba <HAL_PCD_EP_DB_Transmit+0x27e>
  {
    /* multi-packet on the NON control IN endpoint */
    TxByteNbre = (uint16_t)PCD_GET_EP_DBUF0_CNT(hpcd->Instance, ep->num);
 8002956:	68fb      	ldr	r3, [r7, #12]
 8002958:	681b      	ldr	r3, [r3, #0]
 800295a:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 800295e:	b29b      	uxth	r3, r3
 8002960:	461a      	mov	r2, r3
 8002962:	68bb      	ldr	r3, [r7, #8]
 8002964:	781b      	ldrb	r3, [r3, #0]
 8002966:	00db      	lsls	r3, r3, #3
 8002968:	4413      	add	r3, r2
 800296a:	3302      	adds	r3, #2
 800296c:	005b      	lsls	r3, r3, #1
 800296e:	68fa      	ldr	r2, [r7, #12]
 8002970:	6812      	ldr	r2, [r2, #0]
 8002972:	4413      	add	r3, r2
 8002974:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8002978:	881b      	ldrh	r3, [r3, #0]
 800297a:	f3c3 0309 	ubfx	r3, r3, #0, #10
 800297e:	85fb      	strh	r3, [r7, #46]	; 0x2e

    if (ep->xfer_len > TxByteNbre)
 8002980:	68bb      	ldr	r3, [r7, #8]
 8002982:	699a      	ldr	r2, [r3, #24]
 8002984:	8dfb      	ldrh	r3, [r7, #46]	; 0x2e
 8002986:	429a      	cmp	r2, r3
 8002988:	d906      	bls.n	8002998 <HAL_PCD_EP_DB_Transmit+0x5c>
    {
      ep->xfer_len -= TxByteNbre;
 800298a:	68bb      	ldr	r3, [r7, #8]
 800298c:	699a      	ldr	r2, [r3, #24]
 800298e:	8dfb      	ldrh	r3, [r7, #46]	; 0x2e
 8002990:	1ad2      	subs	r2, r2, r3
 8002992:	68bb      	ldr	r3, [r7, #8]
 8002994:	619a      	str	r2, [r3, #24]
 8002996:	e002      	b.n	800299e <HAL_PCD_EP_DB_Transmit+0x62>
    }
    else
    {
      ep->xfer_len = 0U;
 8002998:	68bb      	ldr	r3, [r7, #8]
 800299a:	2200      	movs	r2, #0
 800299c:	619a      	str	r2, [r3, #24]
    }
    /* Transfer is completed */
    if (ep->xfer_len == 0U)
 800299e:	68bb      	ldr	r3, [r7, #8]
 80029a0:	699b      	ldr	r3, [r3, #24]
 80029a2:	2b00      	cmp	r3, #0
 80029a4:	d12c      	bne.n	8002a00 <HAL_PCD_EP_DB_Transmit+0xc4>
    {
      /* TX COMPLETE */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->DataInStageCallback(hpcd, ep->num);
#else
      HAL_PCD_DataInStageCallback(hpcd, ep->num);
 80029a6:	68bb      	ldr	r3, [r7, #8]
 80029a8:	781b      	ldrb	r3, [r3, #0]
 80029aa:	4619      	mov	r1, r3
 80029ac:	68f8      	ldr	r0, [r7, #12]
 80029ae:	f005 f98a 	bl	8007cc6 <HAL_PCD_DataInStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      if ((wEPVal & USB_EP_DTOG_RX) != 0U)
 80029b2:	88fb      	ldrh	r3, [r7, #6]
 80029b4:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80029b8:	2b00      	cmp	r3, #0
 80029ba:	f000 822f 	beq.w	8002e1c <HAL_PCD_EP_DB_Transmit+0x4e0>
      {
        PCD_FreeUserBuffer(hpcd->Instance, ep->num, 1U);
 80029be:	68fb      	ldr	r3, [r7, #12]
 80029c0:	681b      	ldr	r3, [r3, #0]
 80029c2:	461a      	mov	r2, r3
 80029c4:	68bb      	ldr	r3, [r7, #8]
 80029c6:	781b      	ldrb	r3, [r3, #0]
 80029c8:	009b      	lsls	r3, r3, #2
 80029ca:	4413      	add	r3, r2
 80029cc:	881b      	ldrh	r3, [r3, #0]
 80029ce:	b29b      	uxth	r3, r3
 80029d0:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80029d4:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80029d8:	827b      	strh	r3, [r7, #18]
 80029da:	68fb      	ldr	r3, [r7, #12]
 80029dc:	681b      	ldr	r3, [r3, #0]
 80029de:	461a      	mov	r2, r3
 80029e0:	68bb      	ldr	r3, [r7, #8]
 80029e2:	781b      	ldrb	r3, [r3, #0]
 80029e4:	009b      	lsls	r3, r3, #2
 80029e6:	441a      	add	r2, r3
 80029e8:	8a7b      	ldrh	r3, [r7, #18]
 80029ea:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 80029ee:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 80029f2:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 80029f6:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80029fa:	b29b      	uxth	r3, r3
 80029fc:	8013      	strh	r3, [r2, #0]
 80029fe:	e20d      	b.n	8002e1c <HAL_PCD_EP_DB_Transmit+0x4e0>
      }
    }
    else /* Transfer is not yet Done */
    {
      /* need to Free USB Buff */
      if ((wEPVal & USB_EP_DTOG_RX) != 0U)
 8002a00:	88fb      	ldrh	r3, [r7, #6]
 8002a02:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8002a06:	2b00      	cmp	r3, #0
 8002a08:	d01f      	beq.n	8002a4a <HAL_PCD_EP_DB_Transmit+0x10e>
      {
        PCD_FreeUserBuffer(hpcd->Instance, ep->num, 1U);
 8002a0a:	68fb      	ldr	r3, [r7, #12]
 8002a0c:	681b      	ldr	r3, [r3, #0]
 8002a0e:	461a      	mov	r2, r3
 8002a10:	68bb      	ldr	r3, [r7, #8]
 8002a12:	781b      	ldrb	r3, [r3, #0]
 8002a14:	009b      	lsls	r3, r3, #2
 8002a16:	4413      	add	r3, r2
 8002a18:	881b      	ldrh	r3, [r3, #0]
 8002a1a:	b29b      	uxth	r3, r3
 8002a1c:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8002a20:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8002a24:	84bb      	strh	r3, [r7, #36]	; 0x24
 8002a26:	68fb      	ldr	r3, [r7, #12]
 8002a28:	681b      	ldr	r3, [r3, #0]
 8002a2a:	461a      	mov	r2, r3
 8002a2c:	68bb      	ldr	r3, [r7, #8]
 8002a2e:	781b      	ldrb	r3, [r3, #0]
 8002a30:	009b      	lsls	r3, r3, #2
 8002a32:	441a      	add	r2, r3
 8002a34:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8002a36:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8002a3a:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8002a3e:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8002a42:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8002a46:	b29b      	uxth	r3, r3
 8002a48:	8013      	strh	r3, [r2, #0]
      }

      /* Still there is data to Fill in the next Buffer */
      if (ep->xfer_fill_db == 1U)
 8002a4a:	68bb      	ldr	r3, [r7, #8]
 8002a4c:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 8002a50:	2b01      	cmp	r3, #1
 8002a52:	f040 81e3 	bne.w	8002e1c <HAL_PCD_EP_DB_Transmit+0x4e0>
      {
        ep->xfer_buff += TxByteNbre;
 8002a56:	68bb      	ldr	r3, [r7, #8]
 8002a58:	695a      	ldr	r2, [r3, #20]
 8002a5a:	8dfb      	ldrh	r3, [r7, #46]	; 0x2e
 8002a5c:	441a      	add	r2, r3
 8002a5e:	68bb      	ldr	r3, [r7, #8]
 8002a60:	615a      	str	r2, [r3, #20]
        ep->xfer_count += TxByteNbre;
 8002a62:	68bb      	ldr	r3, [r7, #8]
 8002a64:	69da      	ldr	r2, [r3, #28]
 8002a66:	8dfb      	ldrh	r3, [r7, #46]	; 0x2e
 8002a68:	441a      	add	r2, r3
 8002a6a:	68bb      	ldr	r3, [r7, #8]
 8002a6c:	61da      	str	r2, [r3, #28]

        /* Calculate the len of the new buffer to fill */
        if (ep->xfer_len_db >= ep->maxpacket)
 8002a6e:	68bb      	ldr	r3, [r7, #8]
 8002a70:	6a1a      	ldr	r2, [r3, #32]
 8002a72:	68bb      	ldr	r3, [r7, #8]
 8002a74:	691b      	ldr	r3, [r3, #16]
 8002a76:	429a      	cmp	r2, r3
 8002a78:	d309      	bcc.n	8002a8e <HAL_PCD_EP_DB_Transmit+0x152>
        {
          len = ep->maxpacket;
 8002a7a:	68bb      	ldr	r3, [r7, #8]
 8002a7c:	691b      	ldr	r3, [r3, #16]
 8002a7e:	63bb      	str	r3, [r7, #56]	; 0x38
          ep->xfer_len_db -= len;
 8002a80:	68bb      	ldr	r3, [r7, #8]
 8002a82:	6a1a      	ldr	r2, [r3, #32]
 8002a84:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8002a86:	1ad2      	subs	r2, r2, r3
 8002a88:	68bb      	ldr	r3, [r7, #8]
 8002a8a:	621a      	str	r2, [r3, #32]
 8002a8c:	e014      	b.n	8002ab8 <HAL_PCD_EP_DB_Transmit+0x17c>
        }
        else if (ep->xfer_len_db == 0U)
 8002a8e:	68bb      	ldr	r3, [r7, #8]
 8002a90:	6a1b      	ldr	r3, [r3, #32]
 8002a92:	2b00      	cmp	r3, #0
 8002a94:	d106      	bne.n	8002aa4 <HAL_PCD_EP_DB_Transmit+0x168>
        {
          len = TxByteNbre;
 8002a96:	8dfb      	ldrh	r3, [r7, #46]	; 0x2e
 8002a98:	63bb      	str	r3, [r7, #56]	; 0x38
          ep->xfer_fill_db = 0U;
 8002a9a:	68bb      	ldr	r3, [r7, #8]
 8002a9c:	2200      	movs	r2, #0
 8002a9e:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
 8002aa2:	e009      	b.n	8002ab8 <HAL_PCD_EP_DB_Transmit+0x17c>
        }
        else
        {
          ep->xfer_fill_db = 0U;
 8002aa4:	68bb      	ldr	r3, [r7, #8]
 8002aa6:	2200      	movs	r2, #0
 8002aa8:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
          len = ep->xfer_len_db;
 8002aac:	68bb      	ldr	r3, [r7, #8]
 8002aae:	6a1b      	ldr	r3, [r3, #32]
 8002ab0:	63bb      	str	r3, [r7, #56]	; 0x38
          ep->xfer_len_db = 0U;
 8002ab2:	68bb      	ldr	r3, [r7, #8]
 8002ab4:	2200      	movs	r2, #0
 8002ab6:	621a      	str	r2, [r3, #32]
        }

        /* Write remaining Data to Buffer */
        /* Set the Double buffer counter for pma buffer1 */
        PCD_SET_EP_DBUF0_CNT(hpcd->Instance, ep->num, ep->is_in, len);
 8002ab8:	68bb      	ldr	r3, [r7, #8]
 8002aba:	785b      	ldrb	r3, [r3, #1]
 8002abc:	2b00      	cmp	r3, #0
 8002abe:	d155      	bne.n	8002b6c <HAL_PCD_EP_DB_Transmit+0x230>
 8002ac0:	68fb      	ldr	r3, [r7, #12]
 8002ac2:	681b      	ldr	r3, [r3, #0]
 8002ac4:	61bb      	str	r3, [r7, #24]
 8002ac6:	68fb      	ldr	r3, [r7, #12]
 8002ac8:	681b      	ldr	r3, [r3, #0]
 8002aca:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8002ace:	b29b      	uxth	r3, r3
 8002ad0:	461a      	mov	r2, r3
 8002ad2:	69bb      	ldr	r3, [r7, #24]
 8002ad4:	4413      	add	r3, r2
 8002ad6:	61bb      	str	r3, [r7, #24]
 8002ad8:	68bb      	ldr	r3, [r7, #8]
 8002ada:	781b      	ldrb	r3, [r3, #0]
 8002adc:	011a      	lsls	r2, r3, #4
 8002ade:	69bb      	ldr	r3, [r7, #24]
 8002ae0:	4413      	add	r3, r2
 8002ae2:	f203 4304 	addw	r3, r3, #1028	; 0x404
 8002ae6:	617b      	str	r3, [r7, #20]
 8002ae8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8002aea:	2b00      	cmp	r3, #0
 8002aec:	d112      	bne.n	8002b14 <HAL_PCD_EP_DB_Transmit+0x1d8>
 8002aee:	697b      	ldr	r3, [r7, #20]
 8002af0:	881b      	ldrh	r3, [r3, #0]
 8002af2:	b29b      	uxth	r3, r3
 8002af4:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 8002af8:	b29a      	uxth	r2, r3
 8002afa:	697b      	ldr	r3, [r7, #20]
 8002afc:	801a      	strh	r2, [r3, #0]
 8002afe:	697b      	ldr	r3, [r7, #20]
 8002b00:	881b      	ldrh	r3, [r3, #0]
 8002b02:	b29b      	uxth	r3, r3
 8002b04:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8002b08:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8002b0c:	b29a      	uxth	r2, r3
 8002b0e:	697b      	ldr	r3, [r7, #20]
 8002b10:	801a      	strh	r2, [r3, #0]
 8002b12:	e047      	b.n	8002ba4 <HAL_PCD_EP_DB_Transmit+0x268>
 8002b14:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8002b16:	2b3e      	cmp	r3, #62	; 0x3e
 8002b18:	d811      	bhi.n	8002b3e <HAL_PCD_EP_DB_Transmit+0x202>
 8002b1a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8002b1c:	085b      	lsrs	r3, r3, #1
 8002b1e:	62bb      	str	r3, [r7, #40]	; 0x28
 8002b20:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8002b22:	f003 0301 	and.w	r3, r3, #1
 8002b26:	2b00      	cmp	r3, #0
 8002b28:	d002      	beq.n	8002b30 <HAL_PCD_EP_DB_Transmit+0x1f4>
 8002b2a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002b2c:	3301      	adds	r3, #1
 8002b2e:	62bb      	str	r3, [r7, #40]	; 0x28
 8002b30:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002b32:	b29b      	uxth	r3, r3
 8002b34:	029b      	lsls	r3, r3, #10
 8002b36:	b29a      	uxth	r2, r3
 8002b38:	697b      	ldr	r3, [r7, #20]
 8002b3a:	801a      	strh	r2, [r3, #0]
 8002b3c:	e032      	b.n	8002ba4 <HAL_PCD_EP_DB_Transmit+0x268>
 8002b3e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8002b40:	095b      	lsrs	r3, r3, #5
 8002b42:	62bb      	str	r3, [r7, #40]	; 0x28
 8002b44:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8002b46:	f003 031f 	and.w	r3, r3, #31
 8002b4a:	2b00      	cmp	r3, #0
 8002b4c:	d102      	bne.n	8002b54 <HAL_PCD_EP_DB_Transmit+0x218>
 8002b4e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002b50:	3b01      	subs	r3, #1
 8002b52:	62bb      	str	r3, [r7, #40]	; 0x28
 8002b54:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002b56:	b29b      	uxth	r3, r3
 8002b58:	029b      	lsls	r3, r3, #10
 8002b5a:	b29b      	uxth	r3, r3
 8002b5c:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8002b60:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8002b64:	b29a      	uxth	r2, r3
 8002b66:	697b      	ldr	r3, [r7, #20]
 8002b68:	801a      	strh	r2, [r3, #0]
 8002b6a:	e01b      	b.n	8002ba4 <HAL_PCD_EP_DB_Transmit+0x268>
 8002b6c:	68bb      	ldr	r3, [r7, #8]
 8002b6e:	785b      	ldrb	r3, [r3, #1]
 8002b70:	2b01      	cmp	r3, #1
 8002b72:	d117      	bne.n	8002ba4 <HAL_PCD_EP_DB_Transmit+0x268>
 8002b74:	68fb      	ldr	r3, [r7, #12]
 8002b76:	681b      	ldr	r3, [r3, #0]
 8002b78:	623b      	str	r3, [r7, #32]
 8002b7a:	68fb      	ldr	r3, [r7, #12]
 8002b7c:	681b      	ldr	r3, [r3, #0]
 8002b7e:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8002b82:	b29b      	uxth	r3, r3
 8002b84:	461a      	mov	r2, r3
 8002b86:	6a3b      	ldr	r3, [r7, #32]
 8002b88:	4413      	add	r3, r2
 8002b8a:	623b      	str	r3, [r7, #32]
 8002b8c:	68bb      	ldr	r3, [r7, #8]
 8002b8e:	781b      	ldrb	r3, [r3, #0]
 8002b90:	011a      	lsls	r2, r3, #4
 8002b92:	6a3b      	ldr	r3, [r7, #32]
 8002b94:	4413      	add	r3, r2
 8002b96:	f203 4304 	addw	r3, r3, #1028	; 0x404
 8002b9a:	61fb      	str	r3, [r7, #28]
 8002b9c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8002b9e:	b29a      	uxth	r2, r3
 8002ba0:	69fb      	ldr	r3, [r7, #28]
 8002ba2:	801a      	strh	r2, [r3, #0]

        /* Copy user buffer to USB PMA */
        USB_WritePMA(hpcd->Instance, ep->xfer_buff,  ep->pmaaddr0, (uint16_t)len);
 8002ba4:	68fb      	ldr	r3, [r7, #12]
 8002ba6:	6818      	ldr	r0, [r3, #0]
 8002ba8:	68bb      	ldr	r3, [r7, #8]
 8002baa:	6959      	ldr	r1, [r3, #20]
 8002bac:	68bb      	ldr	r3, [r7, #8]
 8002bae:	891a      	ldrh	r2, [r3, #8]
 8002bb0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8002bb2:	b29b      	uxth	r3, r3
 8002bb4:	f003 fa50 	bl	8006058 <USB_WritePMA>
 8002bb8:	e130      	b.n	8002e1c <HAL_PCD_EP_DB_Transmit+0x4e0>
    }
  }
  else /* Data Buffer1 ACK received */
  {
    /* multi-packet on the NON control IN endpoint */
    TxByteNbre = (uint16_t)PCD_GET_EP_DBUF1_CNT(hpcd->Instance, ep->num);
 8002bba:	68fb      	ldr	r3, [r7, #12]
 8002bbc:	681b      	ldr	r3, [r3, #0]
 8002bbe:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8002bc2:	b29b      	uxth	r3, r3
 8002bc4:	461a      	mov	r2, r3
 8002bc6:	68bb      	ldr	r3, [r7, #8]
 8002bc8:	781b      	ldrb	r3, [r3, #0]
 8002bca:	00db      	lsls	r3, r3, #3
 8002bcc:	4413      	add	r3, r2
 8002bce:	3306      	adds	r3, #6
 8002bd0:	005b      	lsls	r3, r3, #1
 8002bd2:	68fa      	ldr	r2, [r7, #12]
 8002bd4:	6812      	ldr	r2, [r2, #0]
 8002bd6:	4413      	add	r3, r2
 8002bd8:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8002bdc:	881b      	ldrh	r3, [r3, #0]
 8002bde:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8002be2:	85fb      	strh	r3, [r7, #46]	; 0x2e

    if (ep->xfer_len >= TxByteNbre)
 8002be4:	68bb      	ldr	r3, [r7, #8]
 8002be6:	699a      	ldr	r2, [r3, #24]
 8002be8:	8dfb      	ldrh	r3, [r7, #46]	; 0x2e
 8002bea:	429a      	cmp	r2, r3
 8002bec:	d306      	bcc.n	8002bfc <HAL_PCD_EP_DB_Transmit+0x2c0>
    {
      ep->xfer_len -= TxByteNbre;
 8002bee:	68bb      	ldr	r3, [r7, #8]
 8002bf0:	699a      	ldr	r2, [r3, #24]
 8002bf2:	8dfb      	ldrh	r3, [r7, #46]	; 0x2e
 8002bf4:	1ad2      	subs	r2, r2, r3
 8002bf6:	68bb      	ldr	r3, [r7, #8]
 8002bf8:	619a      	str	r2, [r3, #24]
 8002bfa:	e002      	b.n	8002c02 <HAL_PCD_EP_DB_Transmit+0x2c6>
    }
    else
    {
      ep->xfer_len = 0U;
 8002bfc:	68bb      	ldr	r3, [r7, #8]
 8002bfe:	2200      	movs	r2, #0
 8002c00:	619a      	str	r2, [r3, #24]
    }

    /* Transfer is completed */
    if (ep->xfer_len == 0U)
 8002c02:	68bb      	ldr	r3, [r7, #8]
 8002c04:	699b      	ldr	r3, [r3, #24]
 8002c06:	2b00      	cmp	r3, #0
 8002c08:	d12c      	bne.n	8002c64 <HAL_PCD_EP_DB_Transmit+0x328>
    {
      /* TX COMPLETE */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->DataInStageCallback(hpcd, ep->num);
#else
      HAL_PCD_DataInStageCallback(hpcd, ep->num);
 8002c0a:	68bb      	ldr	r3, [r7, #8]
 8002c0c:	781b      	ldrb	r3, [r3, #0]
 8002c0e:	4619      	mov	r1, r3
 8002c10:	68f8      	ldr	r0, [r7, #12]
 8002c12:	f005 f858 	bl	8007cc6 <HAL_PCD_DataInStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      /*need to Free USB Buff*/
      if ((wEPVal & USB_EP_DTOG_RX) == 0U)
 8002c16:	88fb      	ldrh	r3, [r7, #6]
 8002c18:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8002c1c:	2b00      	cmp	r3, #0
 8002c1e:	f040 80fd 	bne.w	8002e1c <HAL_PCD_EP_DB_Transmit+0x4e0>
      {
        PCD_FreeUserBuffer(hpcd->Instance, ep->num, 1U);
 8002c22:	68fb      	ldr	r3, [r7, #12]
 8002c24:	681b      	ldr	r3, [r3, #0]
 8002c26:	461a      	mov	r2, r3
 8002c28:	68bb      	ldr	r3, [r7, #8]
 8002c2a:	781b      	ldrb	r3, [r3, #0]
 8002c2c:	009b      	lsls	r3, r3, #2
 8002c2e:	4413      	add	r3, r2
 8002c30:	881b      	ldrh	r3, [r3, #0]
 8002c32:	b29b      	uxth	r3, r3
 8002c34:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8002c38:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8002c3c:	84fb      	strh	r3, [r7, #38]	; 0x26
 8002c3e:	68fb      	ldr	r3, [r7, #12]
 8002c40:	681b      	ldr	r3, [r3, #0]
 8002c42:	461a      	mov	r2, r3
 8002c44:	68bb      	ldr	r3, [r7, #8]
 8002c46:	781b      	ldrb	r3, [r3, #0]
 8002c48:	009b      	lsls	r3, r3, #2
 8002c4a:	441a      	add	r2, r3
 8002c4c:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 8002c4e:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8002c52:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8002c56:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8002c5a:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8002c5e:	b29b      	uxth	r3, r3
 8002c60:	8013      	strh	r3, [r2, #0]
 8002c62:	e0db      	b.n	8002e1c <HAL_PCD_EP_DB_Transmit+0x4e0>
      }
    }
    else /* Transfer is not yet Done */
    {
      /* need to Free USB Buff */
      if ((wEPVal & USB_EP_DTOG_RX) == 0U)
 8002c64:	88fb      	ldrh	r3, [r7, #6]
 8002c66:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8002c6a:	2b00      	cmp	r3, #0
 8002c6c:	d11f      	bne.n	8002cae <HAL_PCD_EP_DB_Transmit+0x372>
      {
        PCD_FreeUserBuffer(hpcd->Instance, ep->num, 1U);
 8002c6e:	68fb      	ldr	r3, [r7, #12]
 8002c70:	681b      	ldr	r3, [r3, #0]
 8002c72:	461a      	mov	r2, r3
 8002c74:	68bb      	ldr	r3, [r7, #8]
 8002c76:	781b      	ldrb	r3, [r3, #0]
 8002c78:	009b      	lsls	r3, r3, #2
 8002c7a:	4413      	add	r3, r2
 8002c7c:	881b      	ldrh	r3, [r3, #0]
 8002c7e:	b29b      	uxth	r3, r3
 8002c80:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8002c84:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8002c88:	85bb      	strh	r3, [r7, #44]	; 0x2c
 8002c8a:	68fb      	ldr	r3, [r7, #12]
 8002c8c:	681b      	ldr	r3, [r3, #0]
 8002c8e:	461a      	mov	r2, r3
 8002c90:	68bb      	ldr	r3, [r7, #8]
 8002c92:	781b      	ldrb	r3, [r3, #0]
 8002c94:	009b      	lsls	r3, r3, #2
 8002c96:	441a      	add	r2, r3
 8002c98:	8dbb      	ldrh	r3, [r7, #44]	; 0x2c
 8002c9a:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8002c9e:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8002ca2:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8002ca6:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8002caa:	b29b      	uxth	r3, r3
 8002cac:	8013      	strh	r3, [r2, #0]
      }

      /* Still there is data to Fill in the next Buffer */
      if (ep->xfer_fill_db == 1U)
 8002cae:	68bb      	ldr	r3, [r7, #8]
 8002cb0:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 8002cb4:	2b01      	cmp	r3, #1
 8002cb6:	f040 80b1 	bne.w	8002e1c <HAL_PCD_EP_DB_Transmit+0x4e0>
      {
        ep->xfer_buff += TxByteNbre;
 8002cba:	68bb      	ldr	r3, [r7, #8]
 8002cbc:	695a      	ldr	r2, [r3, #20]
 8002cbe:	8dfb      	ldrh	r3, [r7, #46]	; 0x2e
 8002cc0:	441a      	add	r2, r3
 8002cc2:	68bb      	ldr	r3, [r7, #8]
 8002cc4:	615a      	str	r2, [r3, #20]
        ep->xfer_count += TxByteNbre;
 8002cc6:	68bb      	ldr	r3, [r7, #8]
 8002cc8:	69da      	ldr	r2, [r3, #28]
 8002cca:	8dfb      	ldrh	r3, [r7, #46]	; 0x2e
 8002ccc:	441a      	add	r2, r3
 8002cce:	68bb      	ldr	r3, [r7, #8]
 8002cd0:	61da      	str	r2, [r3, #28]

        /* Calculate the len of the new buffer to fill */
        if (ep->xfer_len_db >= ep->maxpacket)
 8002cd2:	68bb      	ldr	r3, [r7, #8]
 8002cd4:	6a1a      	ldr	r2, [r3, #32]
 8002cd6:	68bb      	ldr	r3, [r7, #8]
 8002cd8:	691b      	ldr	r3, [r3, #16]
 8002cda:	429a      	cmp	r2, r3
 8002cdc:	d309      	bcc.n	8002cf2 <HAL_PCD_EP_DB_Transmit+0x3b6>
        {
          len = ep->maxpacket;
 8002cde:	68bb      	ldr	r3, [r7, #8]
 8002ce0:	691b      	ldr	r3, [r3, #16]
 8002ce2:	63bb      	str	r3, [r7, #56]	; 0x38
          ep->xfer_len_db -= len;
 8002ce4:	68bb      	ldr	r3, [r7, #8]
 8002ce6:	6a1a      	ldr	r2, [r3, #32]
 8002ce8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8002cea:	1ad2      	subs	r2, r2, r3
 8002cec:	68bb      	ldr	r3, [r7, #8]
 8002cee:	621a      	str	r2, [r3, #32]
 8002cf0:	e014      	b.n	8002d1c <HAL_PCD_EP_DB_Transmit+0x3e0>
        }
        else if (ep->xfer_len_db == 0U)
 8002cf2:	68bb      	ldr	r3, [r7, #8]
 8002cf4:	6a1b      	ldr	r3, [r3, #32]
 8002cf6:	2b00      	cmp	r3, #0
 8002cf8:	d106      	bne.n	8002d08 <HAL_PCD_EP_DB_Transmit+0x3cc>
        {
          len = TxByteNbre;
 8002cfa:	8dfb      	ldrh	r3, [r7, #46]	; 0x2e
 8002cfc:	63bb      	str	r3, [r7, #56]	; 0x38
          ep->xfer_fill_db = 0U;
 8002cfe:	68bb      	ldr	r3, [r7, #8]
 8002d00:	2200      	movs	r2, #0
 8002d02:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
 8002d06:	e009      	b.n	8002d1c <HAL_PCD_EP_DB_Transmit+0x3e0>
        }
        else
        {
          len = ep->xfer_len_db;
 8002d08:	68bb      	ldr	r3, [r7, #8]
 8002d0a:	6a1b      	ldr	r3, [r3, #32]
 8002d0c:	63bb      	str	r3, [r7, #56]	; 0x38
          ep->xfer_len_db = 0U;
 8002d0e:	68bb      	ldr	r3, [r7, #8]
 8002d10:	2200      	movs	r2, #0
 8002d12:	621a      	str	r2, [r3, #32]
          ep->xfer_fill_db = 0;
 8002d14:	68bb      	ldr	r3, [r7, #8]
 8002d16:	2200      	movs	r2, #0
 8002d18:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
        }

        /* Set the Double buffer counter for pmabuffer1 */
        PCD_SET_EP_DBUF1_CNT(hpcd->Instance, ep->num, ep->is_in, len);
 8002d1c:	68fb      	ldr	r3, [r7, #12]
 8002d1e:	681b      	ldr	r3, [r3, #0]
 8002d20:	637b      	str	r3, [r7, #52]	; 0x34
 8002d22:	68bb      	ldr	r3, [r7, #8]
 8002d24:	785b      	ldrb	r3, [r3, #1]
 8002d26:	2b00      	cmp	r3, #0
 8002d28:	d155      	bne.n	8002dd6 <HAL_PCD_EP_DB_Transmit+0x49a>
 8002d2a:	68fb      	ldr	r3, [r7, #12]
 8002d2c:	681b      	ldr	r3, [r3, #0]
 8002d2e:	647b      	str	r3, [r7, #68]	; 0x44
 8002d30:	68fb      	ldr	r3, [r7, #12]
 8002d32:	681b      	ldr	r3, [r3, #0]
 8002d34:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8002d38:	b29b      	uxth	r3, r3
 8002d3a:	461a      	mov	r2, r3
 8002d3c:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8002d3e:	4413      	add	r3, r2
 8002d40:	647b      	str	r3, [r7, #68]	; 0x44
 8002d42:	68bb      	ldr	r3, [r7, #8]
 8002d44:	781b      	ldrb	r3, [r3, #0]
 8002d46:	011a      	lsls	r2, r3, #4
 8002d48:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8002d4a:	4413      	add	r3, r2
 8002d4c:	f203 430c 	addw	r3, r3, #1036	; 0x40c
 8002d50:	643b      	str	r3, [r7, #64]	; 0x40
 8002d52:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8002d54:	2b00      	cmp	r3, #0
 8002d56:	d112      	bne.n	8002d7e <HAL_PCD_EP_DB_Transmit+0x442>
 8002d58:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8002d5a:	881b      	ldrh	r3, [r3, #0]
 8002d5c:	b29b      	uxth	r3, r3
 8002d5e:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 8002d62:	b29a      	uxth	r2, r3
 8002d64:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8002d66:	801a      	strh	r2, [r3, #0]
 8002d68:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8002d6a:	881b      	ldrh	r3, [r3, #0]
 8002d6c:	b29b      	uxth	r3, r3
 8002d6e:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8002d72:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8002d76:	b29a      	uxth	r2, r3
 8002d78:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8002d7a:	801a      	strh	r2, [r3, #0]
 8002d7c:	e044      	b.n	8002e08 <HAL_PCD_EP_DB_Transmit+0x4cc>
 8002d7e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8002d80:	2b3e      	cmp	r3, #62	; 0x3e
 8002d82:	d811      	bhi.n	8002da8 <HAL_PCD_EP_DB_Transmit+0x46c>
 8002d84:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8002d86:	085b      	lsrs	r3, r3, #1
 8002d88:	63fb      	str	r3, [r7, #60]	; 0x3c
 8002d8a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8002d8c:	f003 0301 	and.w	r3, r3, #1
 8002d90:	2b00      	cmp	r3, #0
 8002d92:	d002      	beq.n	8002d9a <HAL_PCD_EP_DB_Transmit+0x45e>
 8002d94:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8002d96:	3301      	adds	r3, #1
 8002d98:	63fb      	str	r3, [r7, #60]	; 0x3c
 8002d9a:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8002d9c:	b29b      	uxth	r3, r3
 8002d9e:	029b      	lsls	r3, r3, #10
 8002da0:	b29a      	uxth	r2, r3
 8002da2:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8002da4:	801a      	strh	r2, [r3, #0]
 8002da6:	e02f      	b.n	8002e08 <HAL_PCD_EP_DB_Transmit+0x4cc>
 8002da8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8002daa:	095b      	lsrs	r3, r3, #5
 8002dac:	63fb      	str	r3, [r7, #60]	; 0x3c
 8002dae:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8002db0:	f003 031f 	and.w	r3, r3, #31
 8002db4:	2b00      	cmp	r3, #0
 8002db6:	d102      	bne.n	8002dbe <HAL_PCD_EP_DB_Transmit+0x482>
 8002db8:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8002dba:	3b01      	subs	r3, #1
 8002dbc:	63fb      	str	r3, [r7, #60]	; 0x3c
 8002dbe:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8002dc0:	b29b      	uxth	r3, r3
 8002dc2:	029b      	lsls	r3, r3, #10
 8002dc4:	b29b      	uxth	r3, r3
 8002dc6:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8002dca:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8002dce:	b29a      	uxth	r2, r3
 8002dd0:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8002dd2:	801a      	strh	r2, [r3, #0]
 8002dd4:	e018      	b.n	8002e08 <HAL_PCD_EP_DB_Transmit+0x4cc>
 8002dd6:	68bb      	ldr	r3, [r7, #8]
 8002dd8:	785b      	ldrb	r3, [r3, #1]
 8002dda:	2b01      	cmp	r3, #1
 8002ddc:	d114      	bne.n	8002e08 <HAL_PCD_EP_DB_Transmit+0x4cc>
 8002dde:	68fb      	ldr	r3, [r7, #12]
 8002de0:	681b      	ldr	r3, [r3, #0]
 8002de2:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8002de6:	b29b      	uxth	r3, r3
 8002de8:	461a      	mov	r2, r3
 8002dea:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8002dec:	4413      	add	r3, r2
 8002dee:	637b      	str	r3, [r7, #52]	; 0x34
 8002df0:	68bb      	ldr	r3, [r7, #8]
 8002df2:	781b      	ldrb	r3, [r3, #0]
 8002df4:	011a      	lsls	r2, r3, #4
 8002df6:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8002df8:	4413      	add	r3, r2
 8002dfa:	f203 430c 	addw	r3, r3, #1036	; 0x40c
 8002dfe:	633b      	str	r3, [r7, #48]	; 0x30
 8002e00:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8002e02:	b29a      	uxth	r2, r3
 8002e04:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002e06:	801a      	strh	r2, [r3, #0]

        /* Copy the user buffer to USB PMA */
        USB_WritePMA(hpcd->Instance, ep->xfer_buff,  ep->pmaaddr1, (uint16_t)len);
 8002e08:	68fb      	ldr	r3, [r7, #12]
 8002e0a:	6818      	ldr	r0, [r3, #0]
 8002e0c:	68bb      	ldr	r3, [r7, #8]
 8002e0e:	6959      	ldr	r1, [r3, #20]
 8002e10:	68bb      	ldr	r3, [r7, #8]
 8002e12:	895a      	ldrh	r2, [r3, #10]
 8002e14:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8002e16:	b29b      	uxth	r3, r3
 8002e18:	f003 f91e 	bl	8006058 <USB_WritePMA>
      }
    }
  }

  /*enable endpoint IN*/
  PCD_SET_EP_TX_STATUS(hpcd->Instance, ep->num, USB_EP_TX_VALID);
 8002e1c:	68fb      	ldr	r3, [r7, #12]
 8002e1e:	681b      	ldr	r3, [r3, #0]
 8002e20:	461a      	mov	r2, r3
 8002e22:	68bb      	ldr	r3, [r7, #8]
 8002e24:	781b      	ldrb	r3, [r3, #0]
 8002e26:	009b      	lsls	r3, r3, #2
 8002e28:	4413      	add	r3, r2
 8002e2a:	881b      	ldrh	r3, [r3, #0]
 8002e2c:	b29b      	uxth	r3, r3
 8002e2e:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8002e32:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8002e36:	823b      	strh	r3, [r7, #16]
 8002e38:	8a3b      	ldrh	r3, [r7, #16]
 8002e3a:	f083 0310 	eor.w	r3, r3, #16
 8002e3e:	823b      	strh	r3, [r7, #16]
 8002e40:	8a3b      	ldrh	r3, [r7, #16]
 8002e42:	f083 0320 	eor.w	r3, r3, #32
 8002e46:	823b      	strh	r3, [r7, #16]
 8002e48:	68fb      	ldr	r3, [r7, #12]
 8002e4a:	681b      	ldr	r3, [r3, #0]
 8002e4c:	461a      	mov	r2, r3
 8002e4e:	68bb      	ldr	r3, [r7, #8]
 8002e50:	781b      	ldrb	r3, [r3, #0]
 8002e52:	009b      	lsls	r3, r3, #2
 8002e54:	441a      	add	r2, r3
 8002e56:	8a3b      	ldrh	r3, [r7, #16]
 8002e58:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8002e5c:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8002e60:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8002e64:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8002e68:	b29b      	uxth	r3, r3
 8002e6a:	8013      	strh	r3, [r2, #0]

  return HAL_OK;
 8002e6c:	2300      	movs	r3, #0
}
 8002e6e:	4618      	mov	r0, r3
 8002e70:	3748      	adds	r7, #72	; 0x48
 8002e72:	46bd      	mov	sp, r7
 8002e74:	bd80      	pop	{r7, pc}

08002e76 <HAL_PCDEx_PMAConfig>:
  * @retval HAL status
  */

HAL_StatusTypeDef  HAL_PCDEx_PMAConfig(PCD_HandleTypeDef *hpcd, uint16_t ep_addr,
                                       uint16_t ep_kind, uint32_t pmaadress)
{
 8002e76:	b480      	push	{r7}
 8002e78:	b087      	sub	sp, #28
 8002e7a:	af00      	add	r7, sp, #0
 8002e7c:	60f8      	str	r0, [r7, #12]
 8002e7e:	607b      	str	r3, [r7, #4]
 8002e80:	460b      	mov	r3, r1
 8002e82:	817b      	strh	r3, [r7, #10]
 8002e84:	4613      	mov	r3, r2
 8002e86:	813b      	strh	r3, [r7, #8]
  PCD_EPTypeDef *ep;

  /* initialize ep structure*/
  if ((0x80U & ep_addr) == 0x80U)
 8002e88:	897b      	ldrh	r3, [r7, #10]
 8002e8a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002e8e:	b29b      	uxth	r3, r3
 8002e90:	2b00      	cmp	r3, #0
 8002e92:	d00b      	beq.n	8002eac <HAL_PCDEx_PMAConfig+0x36>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8002e94:	897b      	ldrh	r3, [r7, #10]
 8002e96:	f003 0307 	and.w	r3, r3, #7
 8002e9a:	1c5a      	adds	r2, r3, #1
 8002e9c:	4613      	mov	r3, r2
 8002e9e:	009b      	lsls	r3, r3, #2
 8002ea0:	4413      	add	r3, r2
 8002ea2:	00db      	lsls	r3, r3, #3
 8002ea4:	68fa      	ldr	r2, [r7, #12]
 8002ea6:	4413      	add	r3, r2
 8002ea8:	617b      	str	r3, [r7, #20]
 8002eaa:	e009      	b.n	8002ec0 <HAL_PCDEx_PMAConfig+0x4a>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr];
 8002eac:	897a      	ldrh	r2, [r7, #10]
 8002eae:	4613      	mov	r3, r2
 8002eb0:	009b      	lsls	r3, r3, #2
 8002eb2:	4413      	add	r3, r2
 8002eb4:	00db      	lsls	r3, r3, #3
 8002eb6:	f503 73b4 	add.w	r3, r3, #360	; 0x168
 8002eba:	68fa      	ldr	r2, [r7, #12]
 8002ebc:	4413      	add	r3, r2
 8002ebe:	617b      	str	r3, [r7, #20]
  }

  /* Here we check if the endpoint is single or double Buffer*/
  if (ep_kind == PCD_SNG_BUF)
 8002ec0:	893b      	ldrh	r3, [r7, #8]
 8002ec2:	2b00      	cmp	r3, #0
 8002ec4:	d107      	bne.n	8002ed6 <HAL_PCDEx_PMAConfig+0x60>
  {
    /* Single Buffer */
    ep->doublebuffer = 0U;
 8002ec6:	697b      	ldr	r3, [r7, #20]
 8002ec8:	2200      	movs	r2, #0
 8002eca:	731a      	strb	r2, [r3, #12]
    /* Configure the PMA */
    ep->pmaadress = (uint16_t)pmaadress;
 8002ecc:	687b      	ldr	r3, [r7, #4]
 8002ece:	b29a      	uxth	r2, r3
 8002ed0:	697b      	ldr	r3, [r7, #20]
 8002ed2:	80da      	strh	r2, [r3, #6]
 8002ed4:	e00b      	b.n	8002eee <HAL_PCDEx_PMAConfig+0x78>
  }
  else /* USB_DBL_BUF */
  {
    /* Double Buffer Endpoint */
    ep->doublebuffer = 1U;
 8002ed6:	697b      	ldr	r3, [r7, #20]
 8002ed8:	2201      	movs	r2, #1
 8002eda:	731a      	strb	r2, [r3, #12]
    /* Configure the PMA */
    ep->pmaaddr0 = (uint16_t)(pmaadress & 0xFFFFU);
 8002edc:	687b      	ldr	r3, [r7, #4]
 8002ede:	b29a      	uxth	r2, r3
 8002ee0:	697b      	ldr	r3, [r7, #20]
 8002ee2:	811a      	strh	r2, [r3, #8]
    ep->pmaaddr1 = (uint16_t)((pmaadress & 0xFFFF0000U) >> 16);
 8002ee4:	687b      	ldr	r3, [r7, #4]
 8002ee6:	0c1b      	lsrs	r3, r3, #16
 8002ee8:	b29a      	uxth	r2, r3
 8002eea:	697b      	ldr	r3, [r7, #20]
 8002eec:	815a      	strh	r2, [r3, #10]
  }

  return HAL_OK;
 8002eee:	2300      	movs	r3, #0
}
 8002ef0:	4618      	mov	r0, r3
 8002ef2:	371c      	adds	r7, #28
 8002ef4:	46bd      	mov	sp, r7
 8002ef6:	bc80      	pop	{r7}
 8002ef8:	4770      	bx	lr
	...

08002efc <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8002efc:	b580      	push	{r7, lr}
 8002efe:	b086      	sub	sp, #24
 8002f00:	af00      	add	r7, sp, #0
 8002f02:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8002f04:	687b      	ldr	r3, [r7, #4]
 8002f06:	2b00      	cmp	r3, #0
 8002f08:	d101      	bne.n	8002f0e <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8002f0a:	2301      	movs	r3, #1
 8002f0c:	e26c      	b.n	80033e8 <HAL_RCC_OscConfig+0x4ec>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8002f0e:	687b      	ldr	r3, [r7, #4]
 8002f10:	681b      	ldr	r3, [r3, #0]
 8002f12:	f003 0301 	and.w	r3, r3, #1
 8002f16:	2b00      	cmp	r3, #0
 8002f18:	f000 8087 	beq.w	800302a <HAL_RCC_OscConfig+0x12e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 8002f1c:	4b92      	ldr	r3, [pc, #584]	; (8003168 <HAL_RCC_OscConfig+0x26c>)
 8002f1e:	685b      	ldr	r3, [r3, #4]
 8002f20:	f003 030c 	and.w	r3, r3, #12
 8002f24:	2b04      	cmp	r3, #4
 8002f26:	d00c      	beq.n	8002f42 <HAL_RCC_OscConfig+0x46>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 8002f28:	4b8f      	ldr	r3, [pc, #572]	; (8003168 <HAL_RCC_OscConfig+0x26c>)
 8002f2a:	685b      	ldr	r3, [r3, #4]
 8002f2c:	f003 030c 	and.w	r3, r3, #12
 8002f30:	2b08      	cmp	r3, #8
 8002f32:	d112      	bne.n	8002f5a <HAL_RCC_OscConfig+0x5e>
 8002f34:	4b8c      	ldr	r3, [pc, #560]	; (8003168 <HAL_RCC_OscConfig+0x26c>)
 8002f36:	685b      	ldr	r3, [r3, #4]
 8002f38:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8002f3c:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8002f40:	d10b      	bne.n	8002f5a <HAL_RCC_OscConfig+0x5e>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8002f42:	4b89      	ldr	r3, [pc, #548]	; (8003168 <HAL_RCC_OscConfig+0x26c>)
 8002f44:	681b      	ldr	r3, [r3, #0]
 8002f46:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002f4a:	2b00      	cmp	r3, #0
 8002f4c:	d06c      	beq.n	8003028 <HAL_RCC_OscConfig+0x12c>
 8002f4e:	687b      	ldr	r3, [r7, #4]
 8002f50:	685b      	ldr	r3, [r3, #4]
 8002f52:	2b00      	cmp	r3, #0
 8002f54:	d168      	bne.n	8003028 <HAL_RCC_OscConfig+0x12c>
      {
        return HAL_ERROR;
 8002f56:	2301      	movs	r3, #1
 8002f58:	e246      	b.n	80033e8 <HAL_RCC_OscConfig+0x4ec>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8002f5a:	687b      	ldr	r3, [r7, #4]
 8002f5c:	685b      	ldr	r3, [r3, #4]
 8002f5e:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8002f62:	d106      	bne.n	8002f72 <HAL_RCC_OscConfig+0x76>
 8002f64:	4b80      	ldr	r3, [pc, #512]	; (8003168 <HAL_RCC_OscConfig+0x26c>)
 8002f66:	681b      	ldr	r3, [r3, #0]
 8002f68:	4a7f      	ldr	r2, [pc, #508]	; (8003168 <HAL_RCC_OscConfig+0x26c>)
 8002f6a:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8002f6e:	6013      	str	r3, [r2, #0]
 8002f70:	e02e      	b.n	8002fd0 <HAL_RCC_OscConfig+0xd4>
 8002f72:	687b      	ldr	r3, [r7, #4]
 8002f74:	685b      	ldr	r3, [r3, #4]
 8002f76:	2b00      	cmp	r3, #0
 8002f78:	d10c      	bne.n	8002f94 <HAL_RCC_OscConfig+0x98>
 8002f7a:	4b7b      	ldr	r3, [pc, #492]	; (8003168 <HAL_RCC_OscConfig+0x26c>)
 8002f7c:	681b      	ldr	r3, [r3, #0]
 8002f7e:	4a7a      	ldr	r2, [pc, #488]	; (8003168 <HAL_RCC_OscConfig+0x26c>)
 8002f80:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8002f84:	6013      	str	r3, [r2, #0]
 8002f86:	4b78      	ldr	r3, [pc, #480]	; (8003168 <HAL_RCC_OscConfig+0x26c>)
 8002f88:	681b      	ldr	r3, [r3, #0]
 8002f8a:	4a77      	ldr	r2, [pc, #476]	; (8003168 <HAL_RCC_OscConfig+0x26c>)
 8002f8c:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8002f90:	6013      	str	r3, [r2, #0]
 8002f92:	e01d      	b.n	8002fd0 <HAL_RCC_OscConfig+0xd4>
 8002f94:	687b      	ldr	r3, [r7, #4]
 8002f96:	685b      	ldr	r3, [r3, #4]
 8002f98:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8002f9c:	d10c      	bne.n	8002fb8 <HAL_RCC_OscConfig+0xbc>
 8002f9e:	4b72      	ldr	r3, [pc, #456]	; (8003168 <HAL_RCC_OscConfig+0x26c>)
 8002fa0:	681b      	ldr	r3, [r3, #0]
 8002fa2:	4a71      	ldr	r2, [pc, #452]	; (8003168 <HAL_RCC_OscConfig+0x26c>)
 8002fa4:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8002fa8:	6013      	str	r3, [r2, #0]
 8002faa:	4b6f      	ldr	r3, [pc, #444]	; (8003168 <HAL_RCC_OscConfig+0x26c>)
 8002fac:	681b      	ldr	r3, [r3, #0]
 8002fae:	4a6e      	ldr	r2, [pc, #440]	; (8003168 <HAL_RCC_OscConfig+0x26c>)
 8002fb0:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8002fb4:	6013      	str	r3, [r2, #0]
 8002fb6:	e00b      	b.n	8002fd0 <HAL_RCC_OscConfig+0xd4>
 8002fb8:	4b6b      	ldr	r3, [pc, #428]	; (8003168 <HAL_RCC_OscConfig+0x26c>)
 8002fba:	681b      	ldr	r3, [r3, #0]
 8002fbc:	4a6a      	ldr	r2, [pc, #424]	; (8003168 <HAL_RCC_OscConfig+0x26c>)
 8002fbe:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8002fc2:	6013      	str	r3, [r2, #0]
 8002fc4:	4b68      	ldr	r3, [pc, #416]	; (8003168 <HAL_RCC_OscConfig+0x26c>)
 8002fc6:	681b      	ldr	r3, [r3, #0]
 8002fc8:	4a67      	ldr	r2, [pc, #412]	; (8003168 <HAL_RCC_OscConfig+0x26c>)
 8002fca:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8002fce:	6013      	str	r3, [r2, #0]


      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8002fd0:	687b      	ldr	r3, [r7, #4]
 8002fd2:	685b      	ldr	r3, [r3, #4]
 8002fd4:	2b00      	cmp	r3, #0
 8002fd6:	d013      	beq.n	8003000 <HAL_RCC_OscConfig+0x104>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002fd8:	f7fd fbd8 	bl	800078c <HAL_GetTick>
 8002fdc:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8002fde:	e008      	b.n	8002ff2 <HAL_RCC_OscConfig+0xf6>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8002fe0:	f7fd fbd4 	bl	800078c <HAL_GetTick>
 8002fe4:	4602      	mov	r2, r0
 8002fe6:	693b      	ldr	r3, [r7, #16]
 8002fe8:	1ad3      	subs	r3, r2, r3
 8002fea:	2b64      	cmp	r3, #100	; 0x64
 8002fec:	d901      	bls.n	8002ff2 <HAL_RCC_OscConfig+0xf6>
          {
            return HAL_TIMEOUT;
 8002fee:	2303      	movs	r3, #3
 8002ff0:	e1fa      	b.n	80033e8 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8002ff2:	4b5d      	ldr	r3, [pc, #372]	; (8003168 <HAL_RCC_OscConfig+0x26c>)
 8002ff4:	681b      	ldr	r3, [r3, #0]
 8002ff6:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002ffa:	2b00      	cmp	r3, #0
 8002ffc:	d0f0      	beq.n	8002fe0 <HAL_RCC_OscConfig+0xe4>
 8002ffe:	e014      	b.n	800302a <HAL_RCC_OscConfig+0x12e>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003000:	f7fd fbc4 	bl	800078c <HAL_GetTick>
 8003004:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8003006:	e008      	b.n	800301a <HAL_RCC_OscConfig+0x11e>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8003008:	f7fd fbc0 	bl	800078c <HAL_GetTick>
 800300c:	4602      	mov	r2, r0
 800300e:	693b      	ldr	r3, [r7, #16]
 8003010:	1ad3      	subs	r3, r2, r3
 8003012:	2b64      	cmp	r3, #100	; 0x64
 8003014:	d901      	bls.n	800301a <HAL_RCC_OscConfig+0x11e>
          {
            return HAL_TIMEOUT;
 8003016:	2303      	movs	r3, #3
 8003018:	e1e6      	b.n	80033e8 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800301a:	4b53      	ldr	r3, [pc, #332]	; (8003168 <HAL_RCC_OscConfig+0x26c>)
 800301c:	681b      	ldr	r3, [r3, #0]
 800301e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003022:	2b00      	cmp	r3, #0
 8003024:	d1f0      	bne.n	8003008 <HAL_RCC_OscConfig+0x10c>
 8003026:	e000      	b.n	800302a <HAL_RCC_OscConfig+0x12e>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8003028:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 800302a:	687b      	ldr	r3, [r7, #4]
 800302c:	681b      	ldr	r3, [r3, #0]
 800302e:	f003 0302 	and.w	r3, r3, #2
 8003032:	2b00      	cmp	r3, #0
 8003034:	d063      	beq.n	80030fe <HAL_RCC_OscConfig+0x202>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 8003036:	4b4c      	ldr	r3, [pc, #304]	; (8003168 <HAL_RCC_OscConfig+0x26c>)
 8003038:	685b      	ldr	r3, [r3, #4]
 800303a:	f003 030c 	and.w	r3, r3, #12
 800303e:	2b00      	cmp	r3, #0
 8003040:	d00b      	beq.n	800305a <HAL_RCC_OscConfig+0x15e>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI_DIV2)))
 8003042:	4b49      	ldr	r3, [pc, #292]	; (8003168 <HAL_RCC_OscConfig+0x26c>)
 8003044:	685b      	ldr	r3, [r3, #4]
 8003046:	f003 030c 	and.w	r3, r3, #12
 800304a:	2b08      	cmp	r3, #8
 800304c:	d11c      	bne.n	8003088 <HAL_RCC_OscConfig+0x18c>
 800304e:	4b46      	ldr	r3, [pc, #280]	; (8003168 <HAL_RCC_OscConfig+0x26c>)
 8003050:	685b      	ldr	r3, [r3, #4]
 8003052:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8003056:	2b00      	cmp	r3, #0
 8003058:	d116      	bne.n	8003088 <HAL_RCC_OscConfig+0x18c>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800305a:	4b43      	ldr	r3, [pc, #268]	; (8003168 <HAL_RCC_OscConfig+0x26c>)
 800305c:	681b      	ldr	r3, [r3, #0]
 800305e:	f003 0302 	and.w	r3, r3, #2
 8003062:	2b00      	cmp	r3, #0
 8003064:	d005      	beq.n	8003072 <HAL_RCC_OscConfig+0x176>
 8003066:	687b      	ldr	r3, [r7, #4]
 8003068:	691b      	ldr	r3, [r3, #16]
 800306a:	2b01      	cmp	r3, #1
 800306c:	d001      	beq.n	8003072 <HAL_RCC_OscConfig+0x176>
      {
        return HAL_ERROR;
 800306e:	2301      	movs	r3, #1
 8003070:	e1ba      	b.n	80033e8 <HAL_RCC_OscConfig+0x4ec>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8003072:	4b3d      	ldr	r3, [pc, #244]	; (8003168 <HAL_RCC_OscConfig+0x26c>)
 8003074:	681b      	ldr	r3, [r3, #0]
 8003076:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 800307a:	687b      	ldr	r3, [r7, #4]
 800307c:	695b      	ldr	r3, [r3, #20]
 800307e:	00db      	lsls	r3, r3, #3
 8003080:	4939      	ldr	r1, [pc, #228]	; (8003168 <HAL_RCC_OscConfig+0x26c>)
 8003082:	4313      	orrs	r3, r2
 8003084:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8003086:	e03a      	b.n	80030fe <HAL_RCC_OscConfig+0x202>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8003088:	687b      	ldr	r3, [r7, #4]
 800308a:	691b      	ldr	r3, [r3, #16]
 800308c:	2b00      	cmp	r3, #0
 800308e:	d020      	beq.n	80030d2 <HAL_RCC_OscConfig+0x1d6>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8003090:	4b36      	ldr	r3, [pc, #216]	; (800316c <HAL_RCC_OscConfig+0x270>)
 8003092:	2201      	movs	r2, #1
 8003094:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003096:	f7fd fb79 	bl	800078c <HAL_GetTick>
 800309a:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800309c:	e008      	b.n	80030b0 <HAL_RCC_OscConfig+0x1b4>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 800309e:	f7fd fb75 	bl	800078c <HAL_GetTick>
 80030a2:	4602      	mov	r2, r0
 80030a4:	693b      	ldr	r3, [r7, #16]
 80030a6:	1ad3      	subs	r3, r2, r3
 80030a8:	2b02      	cmp	r3, #2
 80030aa:	d901      	bls.n	80030b0 <HAL_RCC_OscConfig+0x1b4>
          {
            return HAL_TIMEOUT;
 80030ac:	2303      	movs	r3, #3
 80030ae:	e19b      	b.n	80033e8 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80030b0:	4b2d      	ldr	r3, [pc, #180]	; (8003168 <HAL_RCC_OscConfig+0x26c>)
 80030b2:	681b      	ldr	r3, [r3, #0]
 80030b4:	f003 0302 	and.w	r3, r3, #2
 80030b8:	2b00      	cmp	r3, #0
 80030ba:	d0f0      	beq.n	800309e <HAL_RCC_OscConfig+0x1a2>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80030bc:	4b2a      	ldr	r3, [pc, #168]	; (8003168 <HAL_RCC_OscConfig+0x26c>)
 80030be:	681b      	ldr	r3, [r3, #0]
 80030c0:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 80030c4:	687b      	ldr	r3, [r7, #4]
 80030c6:	695b      	ldr	r3, [r3, #20]
 80030c8:	00db      	lsls	r3, r3, #3
 80030ca:	4927      	ldr	r1, [pc, #156]	; (8003168 <HAL_RCC_OscConfig+0x26c>)
 80030cc:	4313      	orrs	r3, r2
 80030ce:	600b      	str	r3, [r1, #0]
 80030d0:	e015      	b.n	80030fe <HAL_RCC_OscConfig+0x202>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 80030d2:	4b26      	ldr	r3, [pc, #152]	; (800316c <HAL_RCC_OscConfig+0x270>)
 80030d4:	2200      	movs	r2, #0
 80030d6:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80030d8:	f7fd fb58 	bl	800078c <HAL_GetTick>
 80030dc:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80030de:	e008      	b.n	80030f2 <HAL_RCC_OscConfig+0x1f6>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80030e0:	f7fd fb54 	bl	800078c <HAL_GetTick>
 80030e4:	4602      	mov	r2, r0
 80030e6:	693b      	ldr	r3, [r7, #16]
 80030e8:	1ad3      	subs	r3, r2, r3
 80030ea:	2b02      	cmp	r3, #2
 80030ec:	d901      	bls.n	80030f2 <HAL_RCC_OscConfig+0x1f6>
          {
            return HAL_TIMEOUT;
 80030ee:	2303      	movs	r3, #3
 80030f0:	e17a      	b.n	80033e8 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80030f2:	4b1d      	ldr	r3, [pc, #116]	; (8003168 <HAL_RCC_OscConfig+0x26c>)
 80030f4:	681b      	ldr	r3, [r3, #0]
 80030f6:	f003 0302 	and.w	r3, r3, #2
 80030fa:	2b00      	cmp	r3, #0
 80030fc:	d1f0      	bne.n	80030e0 <HAL_RCC_OscConfig+0x1e4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 80030fe:	687b      	ldr	r3, [r7, #4]
 8003100:	681b      	ldr	r3, [r3, #0]
 8003102:	f003 0308 	and.w	r3, r3, #8
 8003106:	2b00      	cmp	r3, #0
 8003108:	d03a      	beq.n	8003180 <HAL_RCC_OscConfig+0x284>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if (RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 800310a:	687b      	ldr	r3, [r7, #4]
 800310c:	699b      	ldr	r3, [r3, #24]
 800310e:	2b00      	cmp	r3, #0
 8003110:	d019      	beq.n	8003146 <HAL_RCC_OscConfig+0x24a>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8003112:	4b17      	ldr	r3, [pc, #92]	; (8003170 <HAL_RCC_OscConfig+0x274>)
 8003114:	2201      	movs	r2, #1
 8003116:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8003118:	f7fd fb38 	bl	800078c <HAL_GetTick>
 800311c:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800311e:	e008      	b.n	8003132 <HAL_RCC_OscConfig+0x236>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8003120:	f7fd fb34 	bl	800078c <HAL_GetTick>
 8003124:	4602      	mov	r2, r0
 8003126:	693b      	ldr	r3, [r7, #16]
 8003128:	1ad3      	subs	r3, r2, r3
 800312a:	2b02      	cmp	r3, #2
 800312c:	d901      	bls.n	8003132 <HAL_RCC_OscConfig+0x236>
        {
          return HAL_TIMEOUT;
 800312e:	2303      	movs	r3, #3
 8003130:	e15a      	b.n	80033e8 <HAL_RCC_OscConfig+0x4ec>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8003132:	4b0d      	ldr	r3, [pc, #52]	; (8003168 <HAL_RCC_OscConfig+0x26c>)
 8003134:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003136:	f003 0302 	and.w	r3, r3, #2
 800313a:	2b00      	cmp	r3, #0
 800313c:	d0f0      	beq.n	8003120 <HAL_RCC_OscConfig+0x224>
        }
      }
      /*  To have a fully stabilized clock in the specified range, a software delay of 1ms
          should be added.*/
      RCC_Delay(1);
 800313e:	2001      	movs	r0, #1
 8003140:	f000 faa8 	bl	8003694 <RCC_Delay>
 8003144:	e01c      	b.n	8003180 <HAL_RCC_OscConfig+0x284>
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8003146:	4b0a      	ldr	r3, [pc, #40]	; (8003170 <HAL_RCC_OscConfig+0x274>)
 8003148:	2200      	movs	r2, #0
 800314a:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800314c:	f7fd fb1e 	bl	800078c <HAL_GetTick>
 8003150:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8003152:	e00f      	b.n	8003174 <HAL_RCC_OscConfig+0x278>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8003154:	f7fd fb1a 	bl	800078c <HAL_GetTick>
 8003158:	4602      	mov	r2, r0
 800315a:	693b      	ldr	r3, [r7, #16]
 800315c:	1ad3      	subs	r3, r2, r3
 800315e:	2b02      	cmp	r3, #2
 8003160:	d908      	bls.n	8003174 <HAL_RCC_OscConfig+0x278>
        {
          return HAL_TIMEOUT;
 8003162:	2303      	movs	r3, #3
 8003164:	e140      	b.n	80033e8 <HAL_RCC_OscConfig+0x4ec>
 8003166:	bf00      	nop
 8003168:	40021000 	.word	0x40021000
 800316c:	42420000 	.word	0x42420000
 8003170:	42420480 	.word	0x42420480
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8003174:	4b9e      	ldr	r3, [pc, #632]	; (80033f0 <HAL_RCC_OscConfig+0x4f4>)
 8003176:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003178:	f003 0302 	and.w	r3, r3, #2
 800317c:	2b00      	cmp	r3, #0
 800317e:	d1e9      	bne.n	8003154 <HAL_RCC_OscConfig+0x258>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8003180:	687b      	ldr	r3, [r7, #4]
 8003182:	681b      	ldr	r3, [r3, #0]
 8003184:	f003 0304 	and.w	r3, r3, #4
 8003188:	2b00      	cmp	r3, #0
 800318a:	f000 80a6 	beq.w	80032da <HAL_RCC_OscConfig+0x3de>
  {
    FlagStatus       pwrclkchanged = RESET;
 800318e:	2300      	movs	r3, #0
 8003190:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 8003192:	4b97      	ldr	r3, [pc, #604]	; (80033f0 <HAL_RCC_OscConfig+0x4f4>)
 8003194:	69db      	ldr	r3, [r3, #28]
 8003196:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800319a:	2b00      	cmp	r3, #0
 800319c:	d10d      	bne.n	80031ba <HAL_RCC_OscConfig+0x2be>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 800319e:	4b94      	ldr	r3, [pc, #592]	; (80033f0 <HAL_RCC_OscConfig+0x4f4>)
 80031a0:	69db      	ldr	r3, [r3, #28]
 80031a2:	4a93      	ldr	r2, [pc, #588]	; (80033f0 <HAL_RCC_OscConfig+0x4f4>)
 80031a4:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80031a8:	61d3      	str	r3, [r2, #28]
 80031aa:	4b91      	ldr	r3, [pc, #580]	; (80033f0 <HAL_RCC_OscConfig+0x4f4>)
 80031ac:	69db      	ldr	r3, [r3, #28]
 80031ae:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80031b2:	60bb      	str	r3, [r7, #8]
 80031b4:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 80031b6:	2301      	movs	r3, #1
 80031b8:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80031ba:	4b8e      	ldr	r3, [pc, #568]	; (80033f4 <HAL_RCC_OscConfig+0x4f8>)
 80031bc:	681b      	ldr	r3, [r3, #0]
 80031be:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80031c2:	2b00      	cmp	r3, #0
 80031c4:	d118      	bne.n	80031f8 <HAL_RCC_OscConfig+0x2fc>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 80031c6:	4b8b      	ldr	r3, [pc, #556]	; (80033f4 <HAL_RCC_OscConfig+0x4f8>)
 80031c8:	681b      	ldr	r3, [r3, #0]
 80031ca:	4a8a      	ldr	r2, [pc, #552]	; (80033f4 <HAL_RCC_OscConfig+0x4f8>)
 80031cc:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80031d0:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 80031d2:	f7fd fadb 	bl	800078c <HAL_GetTick>
 80031d6:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80031d8:	e008      	b.n	80031ec <HAL_RCC_OscConfig+0x2f0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80031da:	f7fd fad7 	bl	800078c <HAL_GetTick>
 80031de:	4602      	mov	r2, r0
 80031e0:	693b      	ldr	r3, [r7, #16]
 80031e2:	1ad3      	subs	r3, r2, r3
 80031e4:	2b64      	cmp	r3, #100	; 0x64
 80031e6:	d901      	bls.n	80031ec <HAL_RCC_OscConfig+0x2f0>
        {
          return HAL_TIMEOUT;
 80031e8:	2303      	movs	r3, #3
 80031ea:	e0fd      	b.n	80033e8 <HAL_RCC_OscConfig+0x4ec>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80031ec:	4b81      	ldr	r3, [pc, #516]	; (80033f4 <HAL_RCC_OscConfig+0x4f8>)
 80031ee:	681b      	ldr	r3, [r3, #0]
 80031f0:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80031f4:	2b00      	cmp	r3, #0
 80031f6:	d0f0      	beq.n	80031da <HAL_RCC_OscConfig+0x2de>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 80031f8:	687b      	ldr	r3, [r7, #4]
 80031fa:	68db      	ldr	r3, [r3, #12]
 80031fc:	2b01      	cmp	r3, #1
 80031fe:	d106      	bne.n	800320e <HAL_RCC_OscConfig+0x312>
 8003200:	4b7b      	ldr	r3, [pc, #492]	; (80033f0 <HAL_RCC_OscConfig+0x4f4>)
 8003202:	6a1b      	ldr	r3, [r3, #32]
 8003204:	4a7a      	ldr	r2, [pc, #488]	; (80033f0 <HAL_RCC_OscConfig+0x4f4>)
 8003206:	f043 0301 	orr.w	r3, r3, #1
 800320a:	6213      	str	r3, [r2, #32]
 800320c:	e02d      	b.n	800326a <HAL_RCC_OscConfig+0x36e>
 800320e:	687b      	ldr	r3, [r7, #4]
 8003210:	68db      	ldr	r3, [r3, #12]
 8003212:	2b00      	cmp	r3, #0
 8003214:	d10c      	bne.n	8003230 <HAL_RCC_OscConfig+0x334>
 8003216:	4b76      	ldr	r3, [pc, #472]	; (80033f0 <HAL_RCC_OscConfig+0x4f4>)
 8003218:	6a1b      	ldr	r3, [r3, #32]
 800321a:	4a75      	ldr	r2, [pc, #468]	; (80033f0 <HAL_RCC_OscConfig+0x4f4>)
 800321c:	f023 0301 	bic.w	r3, r3, #1
 8003220:	6213      	str	r3, [r2, #32]
 8003222:	4b73      	ldr	r3, [pc, #460]	; (80033f0 <HAL_RCC_OscConfig+0x4f4>)
 8003224:	6a1b      	ldr	r3, [r3, #32]
 8003226:	4a72      	ldr	r2, [pc, #456]	; (80033f0 <HAL_RCC_OscConfig+0x4f4>)
 8003228:	f023 0304 	bic.w	r3, r3, #4
 800322c:	6213      	str	r3, [r2, #32]
 800322e:	e01c      	b.n	800326a <HAL_RCC_OscConfig+0x36e>
 8003230:	687b      	ldr	r3, [r7, #4]
 8003232:	68db      	ldr	r3, [r3, #12]
 8003234:	2b05      	cmp	r3, #5
 8003236:	d10c      	bne.n	8003252 <HAL_RCC_OscConfig+0x356>
 8003238:	4b6d      	ldr	r3, [pc, #436]	; (80033f0 <HAL_RCC_OscConfig+0x4f4>)
 800323a:	6a1b      	ldr	r3, [r3, #32]
 800323c:	4a6c      	ldr	r2, [pc, #432]	; (80033f0 <HAL_RCC_OscConfig+0x4f4>)
 800323e:	f043 0304 	orr.w	r3, r3, #4
 8003242:	6213      	str	r3, [r2, #32]
 8003244:	4b6a      	ldr	r3, [pc, #424]	; (80033f0 <HAL_RCC_OscConfig+0x4f4>)
 8003246:	6a1b      	ldr	r3, [r3, #32]
 8003248:	4a69      	ldr	r2, [pc, #420]	; (80033f0 <HAL_RCC_OscConfig+0x4f4>)
 800324a:	f043 0301 	orr.w	r3, r3, #1
 800324e:	6213      	str	r3, [r2, #32]
 8003250:	e00b      	b.n	800326a <HAL_RCC_OscConfig+0x36e>
 8003252:	4b67      	ldr	r3, [pc, #412]	; (80033f0 <HAL_RCC_OscConfig+0x4f4>)
 8003254:	6a1b      	ldr	r3, [r3, #32]
 8003256:	4a66      	ldr	r2, [pc, #408]	; (80033f0 <HAL_RCC_OscConfig+0x4f4>)
 8003258:	f023 0301 	bic.w	r3, r3, #1
 800325c:	6213      	str	r3, [r2, #32]
 800325e:	4b64      	ldr	r3, [pc, #400]	; (80033f0 <HAL_RCC_OscConfig+0x4f4>)
 8003260:	6a1b      	ldr	r3, [r3, #32]
 8003262:	4a63      	ldr	r2, [pc, #396]	; (80033f0 <HAL_RCC_OscConfig+0x4f4>)
 8003264:	f023 0304 	bic.w	r3, r3, #4
 8003268:	6213      	str	r3, [r2, #32]
    /* Check the LSE State */
    if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 800326a:	687b      	ldr	r3, [r7, #4]
 800326c:	68db      	ldr	r3, [r3, #12]
 800326e:	2b00      	cmp	r3, #0
 8003270:	d015      	beq.n	800329e <HAL_RCC_OscConfig+0x3a2>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8003272:	f7fd fa8b 	bl	800078c <HAL_GetTick>
 8003276:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8003278:	e00a      	b.n	8003290 <HAL_RCC_OscConfig+0x394>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800327a:	f7fd fa87 	bl	800078c <HAL_GetTick>
 800327e:	4602      	mov	r2, r0
 8003280:	693b      	ldr	r3, [r7, #16]
 8003282:	1ad3      	subs	r3, r2, r3
 8003284:	f241 3288 	movw	r2, #5000	; 0x1388
 8003288:	4293      	cmp	r3, r2
 800328a:	d901      	bls.n	8003290 <HAL_RCC_OscConfig+0x394>
        {
          return HAL_TIMEOUT;
 800328c:	2303      	movs	r3, #3
 800328e:	e0ab      	b.n	80033e8 <HAL_RCC_OscConfig+0x4ec>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8003290:	4b57      	ldr	r3, [pc, #348]	; (80033f0 <HAL_RCC_OscConfig+0x4f4>)
 8003292:	6a1b      	ldr	r3, [r3, #32]
 8003294:	f003 0302 	and.w	r3, r3, #2
 8003298:	2b00      	cmp	r3, #0
 800329a:	d0ee      	beq.n	800327a <HAL_RCC_OscConfig+0x37e>
 800329c:	e014      	b.n	80032c8 <HAL_RCC_OscConfig+0x3cc>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800329e:	f7fd fa75 	bl	800078c <HAL_GetTick>
 80032a2:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80032a4:	e00a      	b.n	80032bc <HAL_RCC_OscConfig+0x3c0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80032a6:	f7fd fa71 	bl	800078c <HAL_GetTick>
 80032aa:	4602      	mov	r2, r0
 80032ac:	693b      	ldr	r3, [r7, #16]
 80032ae:	1ad3      	subs	r3, r2, r3
 80032b0:	f241 3288 	movw	r2, #5000	; 0x1388
 80032b4:	4293      	cmp	r3, r2
 80032b6:	d901      	bls.n	80032bc <HAL_RCC_OscConfig+0x3c0>
        {
          return HAL_TIMEOUT;
 80032b8:	2303      	movs	r3, #3
 80032ba:	e095      	b.n	80033e8 <HAL_RCC_OscConfig+0x4ec>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80032bc:	4b4c      	ldr	r3, [pc, #304]	; (80033f0 <HAL_RCC_OscConfig+0x4f4>)
 80032be:	6a1b      	ldr	r3, [r3, #32]
 80032c0:	f003 0302 	and.w	r3, r3, #2
 80032c4:	2b00      	cmp	r3, #0
 80032c6:	d1ee      	bne.n	80032a6 <HAL_RCC_OscConfig+0x3aa>
        }
      }
    }

    /* Require to disable power clock if necessary */
    if (pwrclkchanged == SET)
 80032c8:	7dfb      	ldrb	r3, [r7, #23]
 80032ca:	2b01      	cmp	r3, #1
 80032cc:	d105      	bne.n	80032da <HAL_RCC_OscConfig+0x3de>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80032ce:	4b48      	ldr	r3, [pc, #288]	; (80033f0 <HAL_RCC_OscConfig+0x4f4>)
 80032d0:	69db      	ldr	r3, [r3, #28]
 80032d2:	4a47      	ldr	r2, [pc, #284]	; (80033f0 <HAL_RCC_OscConfig+0x4f4>)
 80032d4:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 80032d8:	61d3      	str	r3, [r2, #28]

#endif /* RCC_CR_PLL2ON */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 80032da:	687b      	ldr	r3, [r7, #4]
 80032dc:	69db      	ldr	r3, [r3, #28]
 80032de:	2b00      	cmp	r3, #0
 80032e0:	f000 8081 	beq.w	80033e6 <HAL_RCC_OscConfig+0x4ea>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 80032e4:	4b42      	ldr	r3, [pc, #264]	; (80033f0 <HAL_RCC_OscConfig+0x4f4>)
 80032e6:	685b      	ldr	r3, [r3, #4]
 80032e8:	f003 030c 	and.w	r3, r3, #12
 80032ec:	2b08      	cmp	r3, #8
 80032ee:	d061      	beq.n	80033b4 <HAL_RCC_OscConfig+0x4b8>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 80032f0:	687b      	ldr	r3, [r7, #4]
 80032f2:	69db      	ldr	r3, [r3, #28]
 80032f4:	2b02      	cmp	r3, #2
 80032f6:	d146      	bne.n	8003386 <HAL_RCC_OscConfig+0x48a>
        /* Check the parameters */
        assert_param(IS_RCC_PLLSOURCE(RCC_OscInitStruct->PLL.PLLSource));
        assert_param(IS_RCC_PLL_MUL(RCC_OscInitStruct->PLL.PLLMUL));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80032f8:	4b3f      	ldr	r3, [pc, #252]	; (80033f8 <HAL_RCC_OscConfig+0x4fc>)
 80032fa:	2200      	movs	r2, #0
 80032fc:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80032fe:	f7fd fa45 	bl	800078c <HAL_GetTick>
 8003302:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8003304:	e008      	b.n	8003318 <HAL_RCC_OscConfig+0x41c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8003306:	f7fd fa41 	bl	800078c <HAL_GetTick>
 800330a:	4602      	mov	r2, r0
 800330c:	693b      	ldr	r3, [r7, #16]
 800330e:	1ad3      	subs	r3, r2, r3
 8003310:	2b02      	cmp	r3, #2
 8003312:	d901      	bls.n	8003318 <HAL_RCC_OscConfig+0x41c>
          {
            return HAL_TIMEOUT;
 8003314:	2303      	movs	r3, #3
 8003316:	e067      	b.n	80033e8 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8003318:	4b35      	ldr	r3, [pc, #212]	; (80033f0 <HAL_RCC_OscConfig+0x4f4>)
 800331a:	681b      	ldr	r3, [r3, #0]
 800331c:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003320:	2b00      	cmp	r3, #0
 8003322:	d1f0      	bne.n	8003306 <HAL_RCC_OscConfig+0x40a>
          }
        }

        /* Configure the HSE prediv factor --------------------------------*/
        /* It can be written only when the PLL is disabled. Not used in PLL source is different than HSE */
        if (RCC_OscInitStruct->PLL.PLLSource == RCC_PLLSOURCE_HSE)
 8003324:	687b      	ldr	r3, [r7, #4]
 8003326:	6a1b      	ldr	r3, [r3, #32]
 8003328:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800332c:	d108      	bne.n	8003340 <HAL_RCC_OscConfig+0x444>
          /* Set PREDIV1 source */
          SET_BIT(RCC->CFGR2, RCC_OscInitStruct->Prediv1Source);
#endif /* RCC_CFGR2_PREDIV1SRC */

          /* Set PREDIV1 Value */
          __HAL_RCC_HSE_PREDIV_CONFIG(RCC_OscInitStruct->HSEPredivValue);
 800332e:	4b30      	ldr	r3, [pc, #192]	; (80033f0 <HAL_RCC_OscConfig+0x4f4>)
 8003330:	685b      	ldr	r3, [r3, #4]
 8003332:	f423 3200 	bic.w	r2, r3, #131072	; 0x20000
 8003336:	687b      	ldr	r3, [r7, #4]
 8003338:	689b      	ldr	r3, [r3, #8]
 800333a:	492d      	ldr	r1, [pc, #180]	; (80033f0 <HAL_RCC_OscConfig+0x4f4>)
 800333c:	4313      	orrs	r3, r2
 800333e:	604b      	str	r3, [r1, #4]
        }

        /* Configure the main PLL clock source and multiplication factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8003340:	4b2b      	ldr	r3, [pc, #172]	; (80033f0 <HAL_RCC_OscConfig+0x4f4>)
 8003342:	685b      	ldr	r3, [r3, #4]
 8003344:	f423 1274 	bic.w	r2, r3, #3997696	; 0x3d0000
 8003348:	687b      	ldr	r3, [r7, #4]
 800334a:	6a19      	ldr	r1, [r3, #32]
 800334c:	687b      	ldr	r3, [r7, #4]
 800334e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003350:	430b      	orrs	r3, r1
 8003352:	4927      	ldr	r1, [pc, #156]	; (80033f0 <HAL_RCC_OscConfig+0x4f4>)
 8003354:	4313      	orrs	r3, r2
 8003356:	604b      	str	r3, [r1, #4]
                             RCC_OscInitStruct->PLL.PLLMUL);
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8003358:	4b27      	ldr	r3, [pc, #156]	; (80033f8 <HAL_RCC_OscConfig+0x4fc>)
 800335a:	2201      	movs	r2, #1
 800335c:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800335e:	f7fd fa15 	bl	800078c <HAL_GetTick>
 8003362:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8003364:	e008      	b.n	8003378 <HAL_RCC_OscConfig+0x47c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8003366:	f7fd fa11 	bl	800078c <HAL_GetTick>
 800336a:	4602      	mov	r2, r0
 800336c:	693b      	ldr	r3, [r7, #16]
 800336e:	1ad3      	subs	r3, r2, r3
 8003370:	2b02      	cmp	r3, #2
 8003372:	d901      	bls.n	8003378 <HAL_RCC_OscConfig+0x47c>
          {
            return HAL_TIMEOUT;
 8003374:	2303      	movs	r3, #3
 8003376:	e037      	b.n	80033e8 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8003378:	4b1d      	ldr	r3, [pc, #116]	; (80033f0 <HAL_RCC_OscConfig+0x4f4>)
 800337a:	681b      	ldr	r3, [r3, #0]
 800337c:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003380:	2b00      	cmp	r3, #0
 8003382:	d0f0      	beq.n	8003366 <HAL_RCC_OscConfig+0x46a>
 8003384:	e02f      	b.n	80033e6 <HAL_RCC_OscConfig+0x4ea>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8003386:	4b1c      	ldr	r3, [pc, #112]	; (80033f8 <HAL_RCC_OscConfig+0x4fc>)
 8003388:	2200      	movs	r2, #0
 800338a:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800338c:	f7fd f9fe 	bl	800078c <HAL_GetTick>
 8003390:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8003392:	e008      	b.n	80033a6 <HAL_RCC_OscConfig+0x4aa>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8003394:	f7fd f9fa 	bl	800078c <HAL_GetTick>
 8003398:	4602      	mov	r2, r0
 800339a:	693b      	ldr	r3, [r7, #16]
 800339c:	1ad3      	subs	r3, r2, r3
 800339e:	2b02      	cmp	r3, #2
 80033a0:	d901      	bls.n	80033a6 <HAL_RCC_OscConfig+0x4aa>
          {
            return HAL_TIMEOUT;
 80033a2:	2303      	movs	r3, #3
 80033a4:	e020      	b.n	80033e8 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 80033a6:	4b12      	ldr	r3, [pc, #72]	; (80033f0 <HAL_RCC_OscConfig+0x4f4>)
 80033a8:	681b      	ldr	r3, [r3, #0]
 80033aa:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80033ae:	2b00      	cmp	r3, #0
 80033b0:	d1f0      	bne.n	8003394 <HAL_RCC_OscConfig+0x498>
 80033b2:	e018      	b.n	80033e6 <HAL_RCC_OscConfig+0x4ea>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 80033b4:	687b      	ldr	r3, [r7, #4]
 80033b6:	69db      	ldr	r3, [r3, #28]
 80033b8:	2b01      	cmp	r3, #1
 80033ba:	d101      	bne.n	80033c0 <HAL_RCC_OscConfig+0x4c4>
      {
        return HAL_ERROR;
 80033bc:	2301      	movs	r3, #1
 80033be:	e013      	b.n	80033e8 <HAL_RCC_OscConfig+0x4ec>
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->CFGR;
 80033c0:	4b0b      	ldr	r3, [pc, #44]	; (80033f0 <HAL_RCC_OscConfig+0x4f4>)
 80033c2:	685b      	ldr	r3, [r3, #4]
 80033c4:	60fb      	str	r3, [r7, #12]
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80033c6:	68fb      	ldr	r3, [r7, #12]
 80033c8:	f403 3280 	and.w	r2, r3, #65536	; 0x10000
 80033cc:	687b      	ldr	r3, [r7, #4]
 80033ce:	6a1b      	ldr	r3, [r3, #32]
 80033d0:	429a      	cmp	r2, r3
 80033d2:	d106      	bne.n	80033e2 <HAL_RCC_OscConfig+0x4e6>
            (READ_BIT(pll_config, RCC_CFGR_PLLMULL) != RCC_OscInitStruct->PLL.PLLMUL))
 80033d4:	68fb      	ldr	r3, [r7, #12]
 80033d6:	f403 1270 	and.w	r2, r3, #3932160	; 0x3c0000
 80033da:	687b      	ldr	r3, [r7, #4]
 80033dc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80033de:	429a      	cmp	r2, r3
 80033e0:	d001      	beq.n	80033e6 <HAL_RCC_OscConfig+0x4ea>
        {
          return HAL_ERROR;
 80033e2:	2301      	movs	r3, #1
 80033e4:	e000      	b.n	80033e8 <HAL_RCC_OscConfig+0x4ec>
        }
      }
    }
  }

  return HAL_OK;
 80033e6:	2300      	movs	r3, #0
}
 80033e8:	4618      	mov	r0, r3
 80033ea:	3718      	adds	r7, #24
 80033ec:	46bd      	mov	sp, r7
 80033ee:	bd80      	pop	{r7, pc}
 80033f0:	40021000 	.word	0x40021000
 80033f4:	40007000 	.word	0x40007000
 80033f8:	42420060 	.word	0x42420060

080033fc <HAL_RCC_ClockConfig>:
  *         You can use @ref HAL_RCC_GetClockConfig() function to know which clock is
  *         currently used as system clock source.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 80033fc:	b580      	push	{r7, lr}
 80033fe:	b084      	sub	sp, #16
 8003400:	af00      	add	r7, sp, #0
 8003402:	6078      	str	r0, [r7, #4]
 8003404:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 8003406:	687b      	ldr	r3, [r7, #4]
 8003408:	2b00      	cmp	r3, #0
 800340a:	d101      	bne.n	8003410 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 800340c:	2301      	movs	r3, #1
 800340e:	e0d0      	b.n	80035b2 <HAL_RCC_ClockConfig+0x1b6>
  must be correctly programmed according to the frequency of the CPU clock
    (HCLK) of the device. */

#if defined(FLASH_ACR_LATENCY)
  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8003410:	4b6a      	ldr	r3, [pc, #424]	; (80035bc <HAL_RCC_ClockConfig+0x1c0>)
 8003412:	681b      	ldr	r3, [r3, #0]
 8003414:	f003 0307 	and.w	r3, r3, #7
 8003418:	683a      	ldr	r2, [r7, #0]
 800341a:	429a      	cmp	r2, r3
 800341c:	d910      	bls.n	8003440 <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800341e:	4b67      	ldr	r3, [pc, #412]	; (80035bc <HAL_RCC_ClockConfig+0x1c0>)
 8003420:	681b      	ldr	r3, [r3, #0]
 8003422:	f023 0207 	bic.w	r2, r3, #7
 8003426:	4965      	ldr	r1, [pc, #404]	; (80035bc <HAL_RCC_ClockConfig+0x1c0>)
 8003428:	683b      	ldr	r3, [r7, #0]
 800342a:	4313      	orrs	r3, r2
 800342c:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 800342e:	4b63      	ldr	r3, [pc, #396]	; (80035bc <HAL_RCC_ClockConfig+0x1c0>)
 8003430:	681b      	ldr	r3, [r3, #0]
 8003432:	f003 0307 	and.w	r3, r3, #7
 8003436:	683a      	ldr	r2, [r7, #0]
 8003438:	429a      	cmp	r2, r3
 800343a:	d001      	beq.n	8003440 <HAL_RCC_ClockConfig+0x44>
  {
    return HAL_ERROR;
 800343c:	2301      	movs	r3, #1
 800343e:	e0b8      	b.n	80035b2 <HAL_RCC_ClockConfig+0x1b6>
  }
}

#endif /* FLASH_ACR_LATENCY */
/*-------------------------- HCLK Configuration --------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8003440:	687b      	ldr	r3, [r7, #4]
 8003442:	681b      	ldr	r3, [r3, #0]
 8003444:	f003 0302 	and.w	r3, r3, #2
 8003448:	2b00      	cmp	r3, #0
 800344a:	d020      	beq.n	800348e <HAL_RCC_ClockConfig+0x92>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
    a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800344c:	687b      	ldr	r3, [r7, #4]
 800344e:	681b      	ldr	r3, [r3, #0]
 8003450:	f003 0304 	and.w	r3, r3, #4
 8003454:	2b00      	cmp	r3, #0
 8003456:	d005      	beq.n	8003464 <HAL_RCC_ClockConfig+0x68>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8003458:	4b59      	ldr	r3, [pc, #356]	; (80035c0 <HAL_RCC_ClockConfig+0x1c4>)
 800345a:	685b      	ldr	r3, [r3, #4]
 800345c:	4a58      	ldr	r2, [pc, #352]	; (80035c0 <HAL_RCC_ClockConfig+0x1c4>)
 800345e:	f443 63e0 	orr.w	r3, r3, #1792	; 0x700
 8003462:	6053      	str	r3, [r2, #4]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8003464:	687b      	ldr	r3, [r7, #4]
 8003466:	681b      	ldr	r3, [r3, #0]
 8003468:	f003 0308 	and.w	r3, r3, #8
 800346c:	2b00      	cmp	r3, #0
 800346e:	d005      	beq.n	800347c <HAL_RCC_ClockConfig+0x80>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8003470:	4b53      	ldr	r3, [pc, #332]	; (80035c0 <HAL_RCC_ClockConfig+0x1c4>)
 8003472:	685b      	ldr	r3, [r3, #4]
 8003474:	4a52      	ldr	r2, [pc, #328]	; (80035c0 <HAL_RCC_ClockConfig+0x1c4>)
 8003476:	f443 5360 	orr.w	r3, r3, #14336	; 0x3800
 800347a:	6053      	str	r3, [r2, #4]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 800347c:	4b50      	ldr	r3, [pc, #320]	; (80035c0 <HAL_RCC_ClockConfig+0x1c4>)
 800347e:	685b      	ldr	r3, [r3, #4]
 8003480:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8003484:	687b      	ldr	r3, [r7, #4]
 8003486:	689b      	ldr	r3, [r3, #8]
 8003488:	494d      	ldr	r1, [pc, #308]	; (80035c0 <HAL_RCC_ClockConfig+0x1c4>)
 800348a:	4313      	orrs	r3, r2
 800348c:	604b      	str	r3, [r1, #4]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 800348e:	687b      	ldr	r3, [r7, #4]
 8003490:	681b      	ldr	r3, [r3, #0]
 8003492:	f003 0301 	and.w	r3, r3, #1
 8003496:	2b00      	cmp	r3, #0
 8003498:	d040      	beq.n	800351c <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 800349a:	687b      	ldr	r3, [r7, #4]
 800349c:	685b      	ldr	r3, [r3, #4]
 800349e:	2b01      	cmp	r3, #1
 80034a0:	d107      	bne.n	80034b2 <HAL_RCC_ClockConfig+0xb6>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80034a2:	4b47      	ldr	r3, [pc, #284]	; (80035c0 <HAL_RCC_ClockConfig+0x1c4>)
 80034a4:	681b      	ldr	r3, [r3, #0]
 80034a6:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80034aa:	2b00      	cmp	r3, #0
 80034ac:	d115      	bne.n	80034da <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80034ae:	2301      	movs	r3, #1
 80034b0:	e07f      	b.n	80035b2 <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 80034b2:	687b      	ldr	r3, [r7, #4]
 80034b4:	685b      	ldr	r3, [r3, #4]
 80034b6:	2b02      	cmp	r3, #2
 80034b8:	d107      	bne.n	80034ca <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80034ba:	4b41      	ldr	r3, [pc, #260]	; (80035c0 <HAL_RCC_ClockConfig+0x1c4>)
 80034bc:	681b      	ldr	r3, [r3, #0]
 80034be:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80034c2:	2b00      	cmp	r3, #0
 80034c4:	d109      	bne.n	80034da <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80034c6:	2301      	movs	r3, #1
 80034c8:	e073      	b.n	80035b2 <HAL_RCC_ClockConfig+0x1b6>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80034ca:	4b3d      	ldr	r3, [pc, #244]	; (80035c0 <HAL_RCC_ClockConfig+0x1c4>)
 80034cc:	681b      	ldr	r3, [r3, #0]
 80034ce:	f003 0302 	and.w	r3, r3, #2
 80034d2:	2b00      	cmp	r3, #0
 80034d4:	d101      	bne.n	80034da <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80034d6:	2301      	movs	r3, #1
 80034d8:	e06b      	b.n	80035b2 <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 80034da:	4b39      	ldr	r3, [pc, #228]	; (80035c0 <HAL_RCC_ClockConfig+0x1c4>)
 80034dc:	685b      	ldr	r3, [r3, #4]
 80034de:	f023 0203 	bic.w	r2, r3, #3
 80034e2:	687b      	ldr	r3, [r7, #4]
 80034e4:	685b      	ldr	r3, [r3, #4]
 80034e6:	4936      	ldr	r1, [pc, #216]	; (80035c0 <HAL_RCC_ClockConfig+0x1c4>)
 80034e8:	4313      	orrs	r3, r2
 80034ea:	604b      	str	r3, [r1, #4]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 80034ec:	f7fd f94e 	bl	800078c <HAL_GetTick>
 80034f0:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80034f2:	e00a      	b.n	800350a <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 80034f4:	f7fd f94a 	bl	800078c <HAL_GetTick>
 80034f8:	4602      	mov	r2, r0
 80034fa:	68fb      	ldr	r3, [r7, #12]
 80034fc:	1ad3      	subs	r3, r2, r3
 80034fe:	f241 3288 	movw	r2, #5000	; 0x1388
 8003502:	4293      	cmp	r3, r2
 8003504:	d901      	bls.n	800350a <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8003506:	2303      	movs	r3, #3
 8003508:	e053      	b.n	80035b2 <HAL_RCC_ClockConfig+0x1b6>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800350a:	4b2d      	ldr	r3, [pc, #180]	; (80035c0 <HAL_RCC_ClockConfig+0x1c4>)
 800350c:	685b      	ldr	r3, [r3, #4]
 800350e:	f003 020c 	and.w	r2, r3, #12
 8003512:	687b      	ldr	r3, [r7, #4]
 8003514:	685b      	ldr	r3, [r3, #4]
 8003516:	009b      	lsls	r3, r3, #2
 8003518:	429a      	cmp	r2, r3
 800351a:	d1eb      	bne.n	80034f4 <HAL_RCC_ClockConfig+0xf8>
    }
  }

#if defined(FLASH_ACR_LATENCY)
  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 800351c:	4b27      	ldr	r3, [pc, #156]	; (80035bc <HAL_RCC_ClockConfig+0x1c0>)
 800351e:	681b      	ldr	r3, [r3, #0]
 8003520:	f003 0307 	and.w	r3, r3, #7
 8003524:	683a      	ldr	r2, [r7, #0]
 8003526:	429a      	cmp	r2, r3
 8003528:	d210      	bcs.n	800354c <HAL_RCC_ClockConfig+0x150>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800352a:	4b24      	ldr	r3, [pc, #144]	; (80035bc <HAL_RCC_ClockConfig+0x1c0>)
 800352c:	681b      	ldr	r3, [r3, #0]
 800352e:	f023 0207 	bic.w	r2, r3, #7
 8003532:	4922      	ldr	r1, [pc, #136]	; (80035bc <HAL_RCC_ClockConfig+0x1c0>)
 8003534:	683b      	ldr	r3, [r7, #0]
 8003536:	4313      	orrs	r3, r2
 8003538:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 800353a:	4b20      	ldr	r3, [pc, #128]	; (80035bc <HAL_RCC_ClockConfig+0x1c0>)
 800353c:	681b      	ldr	r3, [r3, #0]
 800353e:	f003 0307 	and.w	r3, r3, #7
 8003542:	683a      	ldr	r2, [r7, #0]
 8003544:	429a      	cmp	r2, r3
 8003546:	d001      	beq.n	800354c <HAL_RCC_ClockConfig+0x150>
  {
    return HAL_ERROR;
 8003548:	2301      	movs	r3, #1
 800354a:	e032      	b.n	80035b2 <HAL_RCC_ClockConfig+0x1b6>
  }
}
#endif /* FLASH_ACR_LATENCY */

/*-------------------------- PCLK1 Configuration ---------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800354c:	687b      	ldr	r3, [r7, #4]
 800354e:	681b      	ldr	r3, [r3, #0]
 8003550:	f003 0304 	and.w	r3, r3, #4
 8003554:	2b00      	cmp	r3, #0
 8003556:	d008      	beq.n	800356a <HAL_RCC_ClockConfig+0x16e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8003558:	4b19      	ldr	r3, [pc, #100]	; (80035c0 <HAL_RCC_ClockConfig+0x1c4>)
 800355a:	685b      	ldr	r3, [r3, #4]
 800355c:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 8003560:	687b      	ldr	r3, [r7, #4]
 8003562:	68db      	ldr	r3, [r3, #12]
 8003564:	4916      	ldr	r1, [pc, #88]	; (80035c0 <HAL_RCC_ClockConfig+0x1c4>)
 8003566:	4313      	orrs	r3, r2
 8003568:	604b      	str	r3, [r1, #4]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800356a:	687b      	ldr	r3, [r7, #4]
 800356c:	681b      	ldr	r3, [r3, #0]
 800356e:	f003 0308 	and.w	r3, r3, #8
 8003572:	2b00      	cmp	r3, #0
 8003574:	d009      	beq.n	800358a <HAL_RCC_ClockConfig+0x18e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 8003576:	4b12      	ldr	r3, [pc, #72]	; (80035c0 <HAL_RCC_ClockConfig+0x1c4>)
 8003578:	685b      	ldr	r3, [r3, #4]
 800357a:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 800357e:	687b      	ldr	r3, [r7, #4]
 8003580:	691b      	ldr	r3, [r3, #16]
 8003582:	00db      	lsls	r3, r3, #3
 8003584:	490e      	ldr	r1, [pc, #56]	; (80035c0 <HAL_RCC_ClockConfig+0x1c4>)
 8003586:	4313      	orrs	r3, r2
 8003588:	604b      	str	r3, [r1, #4]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 800358a:	f000 f821 	bl	80035d0 <HAL_RCC_GetSysClockFreq>
 800358e:	4601      	mov	r1, r0
 8003590:	4b0b      	ldr	r3, [pc, #44]	; (80035c0 <HAL_RCC_ClockConfig+0x1c4>)
 8003592:	685b      	ldr	r3, [r3, #4]
 8003594:	091b      	lsrs	r3, r3, #4
 8003596:	f003 030f 	and.w	r3, r3, #15
 800359a:	4a0a      	ldr	r2, [pc, #40]	; (80035c4 <HAL_RCC_ClockConfig+0x1c8>)
 800359c:	5cd3      	ldrb	r3, [r2, r3]
 800359e:	fa21 f303 	lsr.w	r3, r1, r3
 80035a2:	4a09      	ldr	r2, [pc, #36]	; (80035c8 <HAL_RCC_ClockConfig+0x1cc>)
 80035a4:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick(uwTickPrio);
 80035a6:	4b09      	ldr	r3, [pc, #36]	; (80035cc <HAL_RCC_ClockConfig+0x1d0>)
 80035a8:	681b      	ldr	r3, [r3, #0]
 80035aa:	4618      	mov	r0, r3
 80035ac:	f7fd f8ac 	bl	8000708 <HAL_InitTick>

  return HAL_OK;
 80035b0:	2300      	movs	r3, #0
}
 80035b2:	4618      	mov	r0, r3
 80035b4:	3710      	adds	r7, #16
 80035b6:	46bd      	mov	sp, r7
 80035b8:	bd80      	pop	{r7, pc}
 80035ba:	bf00      	nop
 80035bc:	40022000 	.word	0x40022000
 80035c0:	40021000 	.word	0x40021000
 80035c4:	08008240 	.word	0x08008240
 80035c8:	20000000 	.word	0x20000000
 80035cc:	20000004 	.word	0x20000004

080035d0 <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 80035d0:	b490      	push	{r4, r7}
 80035d2:	b08a      	sub	sp, #40	; 0x28
 80035d4:	af00      	add	r7, sp, #0
#if defined(RCC_CFGR2_PREDIV1SRC)
  const uint8_t aPLLMULFactorTable[14] = {0, 0, 4, 5, 6, 7, 8, 9, 0, 0, 0, 0, 0, 13};
  const uint8_t aPredivFactorTable[16] = {1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16};
#else
  const uint8_t aPLLMULFactorTable[16] = {2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 16};
 80035d6:	4b2a      	ldr	r3, [pc, #168]	; (8003680 <HAL_RCC_GetSysClockFreq+0xb0>)
 80035d8:	1d3c      	adds	r4, r7, #4
 80035da:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 80035dc:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
#if defined(RCC_CFGR2_PREDIV1)
  const uint8_t aPredivFactorTable[16] = {1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16};
#else
  const uint8_t aPredivFactorTable[2] = {1, 2};
 80035e0:	4b28      	ldr	r3, [pc, #160]	; (8003684 <HAL_RCC_GetSysClockFreq+0xb4>)
 80035e2:	881b      	ldrh	r3, [r3, #0]
 80035e4:	803b      	strh	r3, [r7, #0]
#endif /*RCC_CFGR2_PREDIV1*/

#endif
  uint32_t tmpreg = 0U, prediv = 0U, pllclk = 0U, pllmul = 0U;
 80035e6:	2300      	movs	r3, #0
 80035e8:	61fb      	str	r3, [r7, #28]
 80035ea:	2300      	movs	r3, #0
 80035ec:	61bb      	str	r3, [r7, #24]
 80035ee:	2300      	movs	r3, #0
 80035f0:	627b      	str	r3, [r7, #36]	; 0x24
 80035f2:	2300      	movs	r3, #0
 80035f4:	617b      	str	r3, [r7, #20]
  uint32_t sysclockfreq = 0U;
 80035f6:	2300      	movs	r3, #0
 80035f8:	623b      	str	r3, [r7, #32]
#if defined(RCC_CFGR2_PREDIV1SRC)
  uint32_t prediv2 = 0U, pll2mul = 0U;
#endif /*RCC_CFGR2_PREDIV1SRC*/

  tmpreg = RCC->CFGR;
 80035fa:	4b23      	ldr	r3, [pc, #140]	; (8003688 <HAL_RCC_GetSysClockFreq+0xb8>)
 80035fc:	685b      	ldr	r3, [r3, #4]
 80035fe:	61fb      	str	r3, [r7, #28]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 8003600:	69fb      	ldr	r3, [r7, #28]
 8003602:	f003 030c 	and.w	r3, r3, #12
 8003606:	2b04      	cmp	r3, #4
 8003608:	d002      	beq.n	8003610 <HAL_RCC_GetSysClockFreq+0x40>
 800360a:	2b08      	cmp	r3, #8
 800360c:	d003      	beq.n	8003616 <HAL_RCC_GetSysClockFreq+0x46>
 800360e:	e02d      	b.n	800366c <HAL_RCC_GetSysClockFreq+0x9c>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 8003610:	4b1e      	ldr	r3, [pc, #120]	; (800368c <HAL_RCC_GetSysClockFreq+0xbc>)
 8003612:	623b      	str	r3, [r7, #32]
      break;
 8003614:	e02d      	b.n	8003672 <HAL_RCC_GetSysClockFreq+0xa2>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMULL) >> RCC_CFGR_PLLMULL_Pos];
 8003616:	69fb      	ldr	r3, [r7, #28]
 8003618:	0c9b      	lsrs	r3, r3, #18
 800361a:	f003 030f 	and.w	r3, r3, #15
 800361e:	f107 0228 	add.w	r2, r7, #40	; 0x28
 8003622:	4413      	add	r3, r2
 8003624:	f813 3c24 	ldrb.w	r3, [r3, #-36]
 8003628:	617b      	str	r3, [r7, #20]
      if ((tmpreg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI_DIV2)
 800362a:	69fb      	ldr	r3, [r7, #28]
 800362c:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8003630:	2b00      	cmp	r3, #0
 8003632:	d013      	beq.n	800365c <HAL_RCC_GetSysClockFreq+0x8c>
      {
#if defined(RCC_CFGR2_PREDIV1)
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR2 & RCC_CFGR2_PREDIV1) >> RCC_CFGR2_PREDIV1_Pos];
#else
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR & RCC_CFGR_PLLXTPRE) >> RCC_CFGR_PLLXTPRE_Pos];
 8003634:	4b14      	ldr	r3, [pc, #80]	; (8003688 <HAL_RCC_GetSysClockFreq+0xb8>)
 8003636:	685b      	ldr	r3, [r3, #4]
 8003638:	0c5b      	lsrs	r3, r3, #17
 800363a:	f003 0301 	and.w	r3, r3, #1
 800363e:	f107 0228 	add.w	r2, r7, #40	; 0x28
 8003642:	4413      	add	r3, r2
 8003644:	f813 3c28 	ldrb.w	r3, [r3, #-40]
 8003648:	61bb      	str	r3, [r7, #24]
        {
          pllclk = pllclk / 2;
        }
#else
        /* HSE used as PLL clock source : PLLCLK = HSE/PREDIV1 * PLLMUL */
        pllclk = (uint32_t)((HSE_VALUE  * pllmul) / prediv);
 800364a:	697b      	ldr	r3, [r7, #20]
 800364c:	4a0f      	ldr	r2, [pc, #60]	; (800368c <HAL_RCC_GetSysClockFreq+0xbc>)
 800364e:	fb02 f203 	mul.w	r2, r2, r3
 8003652:	69bb      	ldr	r3, [r7, #24]
 8003654:	fbb2 f3f3 	udiv	r3, r2, r3
 8003658:	627b      	str	r3, [r7, #36]	; 0x24
 800365a:	e004      	b.n	8003666 <HAL_RCC_GetSysClockFreq+0x96>
#endif /*RCC_CFGR2_PREDIV1SRC*/
      }
      else
      {
        /* HSI used as PLL clock source : PLLCLK = HSI/2 * PLLMUL */
        pllclk = (uint32_t)((HSI_VALUE >> 1) * pllmul);
 800365c:	697b      	ldr	r3, [r7, #20]
 800365e:	4a0c      	ldr	r2, [pc, #48]	; (8003690 <HAL_RCC_GetSysClockFreq+0xc0>)
 8003660:	fb02 f303 	mul.w	r3, r2, r3
 8003664:	627b      	str	r3, [r7, #36]	; 0x24
      }
      sysclockfreq = pllclk;
 8003666:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003668:	623b      	str	r3, [r7, #32]
      break;
 800366a:	e002      	b.n	8003672 <HAL_RCC_GetSysClockFreq+0xa2>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    default: /* HSI used as system clock */
    {
      sysclockfreq = HSI_VALUE;
 800366c:	4b07      	ldr	r3, [pc, #28]	; (800368c <HAL_RCC_GetSysClockFreq+0xbc>)
 800366e:	623b      	str	r3, [r7, #32]
      break;
 8003670:	bf00      	nop
    }
  }
  return sysclockfreq;
 8003672:	6a3b      	ldr	r3, [r7, #32]
}
 8003674:	4618      	mov	r0, r3
 8003676:	3728      	adds	r7, #40	; 0x28
 8003678:	46bd      	mov	sp, r7
 800367a:	bc90      	pop	{r4, r7}
 800367c:	4770      	bx	lr
 800367e:	bf00      	nop
 8003680:	080081e4 	.word	0x080081e4
 8003684:	080081f4 	.word	0x080081f4
 8003688:	40021000 	.word	0x40021000
 800368c:	007a1200 	.word	0x007a1200
 8003690:	003d0900 	.word	0x003d0900

08003694 <RCC_Delay>:
  * @brief  This function provides delay (in milliseconds) based on CPU cycles method.
  * @param  mdelay: specifies the delay time length, in milliseconds.
  * @retval None
  */
static void RCC_Delay(uint32_t mdelay)
{
 8003694:	b480      	push	{r7}
 8003696:	b085      	sub	sp, #20
 8003698:	af00      	add	r7, sp, #0
 800369a:	6078      	str	r0, [r7, #4]
  __IO uint32_t Delay = mdelay * (SystemCoreClock / 8U / 1000U);
 800369c:	4b0a      	ldr	r3, [pc, #40]	; (80036c8 <RCC_Delay+0x34>)
 800369e:	681b      	ldr	r3, [r3, #0]
 80036a0:	4a0a      	ldr	r2, [pc, #40]	; (80036cc <RCC_Delay+0x38>)
 80036a2:	fba2 2303 	umull	r2, r3, r2, r3
 80036a6:	0a5b      	lsrs	r3, r3, #9
 80036a8:	687a      	ldr	r2, [r7, #4]
 80036aa:	fb02 f303 	mul.w	r3, r2, r3
 80036ae:	60fb      	str	r3, [r7, #12]
  do
  {
    __NOP();
 80036b0:	bf00      	nop
  }
  while (Delay --);
 80036b2:	68fb      	ldr	r3, [r7, #12]
 80036b4:	1e5a      	subs	r2, r3, #1
 80036b6:	60fa      	str	r2, [r7, #12]
 80036b8:	2b00      	cmp	r3, #0
 80036ba:	d1f9      	bne.n	80036b0 <RCC_Delay+0x1c>
}
 80036bc:	bf00      	nop
 80036be:	3714      	adds	r7, #20
 80036c0:	46bd      	mov	sp, r7
 80036c2:	bc80      	pop	{r7}
 80036c4:	4770      	bx	lr
 80036c6:	bf00      	nop
 80036c8:	20000000 	.word	0x20000000
 80036cc:	10624dd3 	.word	0x10624dd3

080036d0 <HAL_RCCEx_PeriphCLKConfig>:
  *         manually disable it.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 80036d0:	b580      	push	{r7, lr}
 80036d2:	b086      	sub	sp, #24
 80036d4:	af00      	add	r7, sp, #0
 80036d6:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U, temp_reg = 0U;
 80036d8:	2300      	movs	r3, #0
 80036da:	613b      	str	r3, [r7, #16]
 80036dc:	2300      	movs	r3, #0
 80036de:	60fb      	str	r3, [r7, #12]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*------------------------------- RTC/LCD Configuration ------------------------*/
  if ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC))
 80036e0:	687b      	ldr	r3, [r7, #4]
 80036e2:	681b      	ldr	r3, [r3, #0]
 80036e4:	f003 0301 	and.w	r3, r3, #1
 80036e8:	2b00      	cmp	r3, #0
 80036ea:	d07d      	beq.n	80037e8 <HAL_RCCEx_PeriphCLKConfig+0x118>
  {
    /* check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    FlagStatus       pwrclkchanged = RESET;
 80036ec:	2300      	movs	r3, #0
 80036ee:	75fb      	strb	r3, [r7, #23]

    /* As soon as function is called to change RTC clock source, activation of the
       power domain is done. */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 80036f0:	4b4f      	ldr	r3, [pc, #316]	; (8003830 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 80036f2:	69db      	ldr	r3, [r3, #28]
 80036f4:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80036f8:	2b00      	cmp	r3, #0
 80036fa:	d10d      	bne.n	8003718 <HAL_RCCEx_PeriphCLKConfig+0x48>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 80036fc:	4b4c      	ldr	r3, [pc, #304]	; (8003830 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 80036fe:	69db      	ldr	r3, [r3, #28]
 8003700:	4a4b      	ldr	r2, [pc, #300]	; (8003830 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8003702:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8003706:	61d3      	str	r3, [r2, #28]
 8003708:	4b49      	ldr	r3, [pc, #292]	; (8003830 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 800370a:	69db      	ldr	r3, [r3, #28]
 800370c:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003710:	60bb      	str	r3, [r7, #8]
 8003712:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8003714:	2301      	movs	r3, #1
 8003716:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003718:	4b46      	ldr	r3, [pc, #280]	; (8003834 <HAL_RCCEx_PeriphCLKConfig+0x164>)
 800371a:	681b      	ldr	r3, [r3, #0]
 800371c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003720:	2b00      	cmp	r3, #0
 8003722:	d118      	bne.n	8003756 <HAL_RCCEx_PeriphCLKConfig+0x86>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8003724:	4b43      	ldr	r3, [pc, #268]	; (8003834 <HAL_RCCEx_PeriphCLKConfig+0x164>)
 8003726:	681b      	ldr	r3, [r3, #0]
 8003728:	4a42      	ldr	r2, [pc, #264]	; (8003834 <HAL_RCCEx_PeriphCLKConfig+0x164>)
 800372a:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800372e:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8003730:	f7fd f82c 	bl	800078c <HAL_GetTick>
 8003734:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003736:	e008      	b.n	800374a <HAL_RCCEx_PeriphCLKConfig+0x7a>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8003738:	f7fd f828 	bl	800078c <HAL_GetTick>
 800373c:	4602      	mov	r2, r0
 800373e:	693b      	ldr	r3, [r7, #16]
 8003740:	1ad3      	subs	r3, r2, r3
 8003742:	2b64      	cmp	r3, #100	; 0x64
 8003744:	d901      	bls.n	800374a <HAL_RCCEx_PeriphCLKConfig+0x7a>
        {
          return HAL_TIMEOUT;
 8003746:	2303      	movs	r3, #3
 8003748:	e06d      	b.n	8003826 <HAL_RCCEx_PeriphCLKConfig+0x156>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800374a:	4b3a      	ldr	r3, [pc, #232]	; (8003834 <HAL_RCCEx_PeriphCLKConfig+0x164>)
 800374c:	681b      	ldr	r3, [r3, #0]
 800374e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003752:	2b00      	cmp	r3, #0
 8003754:	d0f0      	beq.n	8003738 <HAL_RCCEx_PeriphCLKConfig+0x68>
        }
      }
    }

    /* Reset the Backup domain only if the RTC Clock source selection is modified from reset value */
    temp_reg = (RCC->BDCR & RCC_BDCR_RTCSEL);
 8003756:	4b36      	ldr	r3, [pc, #216]	; (8003830 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8003758:	6a1b      	ldr	r3, [r3, #32]
 800375a:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800375e:	60fb      	str	r3, [r7, #12]
    if ((temp_reg != 0x00000000U) && (temp_reg != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 8003760:	68fb      	ldr	r3, [r7, #12]
 8003762:	2b00      	cmp	r3, #0
 8003764:	d02e      	beq.n	80037c4 <HAL_RCCEx_PeriphCLKConfig+0xf4>
 8003766:	687b      	ldr	r3, [r7, #4]
 8003768:	685b      	ldr	r3, [r3, #4]
 800376a:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800376e:	68fa      	ldr	r2, [r7, #12]
 8003770:	429a      	cmp	r2, r3
 8003772:	d027      	beq.n	80037c4 <HAL_RCCEx_PeriphCLKConfig+0xf4>
    {
      /* Store the content of BDCR register before the reset of Backup Domain */
      temp_reg = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 8003774:	4b2e      	ldr	r3, [pc, #184]	; (8003830 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8003776:	6a1b      	ldr	r3, [r3, #32]
 8003778:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800377c:	60fb      	str	r3, [r7, #12]
      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 800377e:	4b2e      	ldr	r3, [pc, #184]	; (8003838 <HAL_RCCEx_PeriphCLKConfig+0x168>)
 8003780:	2201      	movs	r2, #1
 8003782:	601a      	str	r2, [r3, #0]
      __HAL_RCC_BACKUPRESET_RELEASE();
 8003784:	4b2c      	ldr	r3, [pc, #176]	; (8003838 <HAL_RCCEx_PeriphCLKConfig+0x168>)
 8003786:	2200      	movs	r2, #0
 8003788:	601a      	str	r2, [r3, #0]
      /* Restore the Content of BDCR register */
      RCC->BDCR = temp_reg;
 800378a:	4a29      	ldr	r2, [pc, #164]	; (8003830 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 800378c:	68fb      	ldr	r3, [r7, #12]
 800378e:	6213      	str	r3, [r2, #32]

      /* Wait for LSERDY if LSE was enabled */
      if (HAL_IS_BIT_SET(temp_reg, RCC_BDCR_LSEON))
 8003790:	68fb      	ldr	r3, [r7, #12]
 8003792:	f003 0301 	and.w	r3, r3, #1
 8003796:	2b00      	cmp	r3, #0
 8003798:	d014      	beq.n	80037c4 <HAL_RCCEx_PeriphCLKConfig+0xf4>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800379a:	f7fc fff7 	bl	800078c <HAL_GetTick>
 800379e:	6138      	str	r0, [r7, #16]

        /* Wait till LSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80037a0:	e00a      	b.n	80037b8 <HAL_RCCEx_PeriphCLKConfig+0xe8>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80037a2:	f7fc fff3 	bl	800078c <HAL_GetTick>
 80037a6:	4602      	mov	r2, r0
 80037a8:	693b      	ldr	r3, [r7, #16]
 80037aa:	1ad3      	subs	r3, r2, r3
 80037ac:	f241 3288 	movw	r2, #5000	; 0x1388
 80037b0:	4293      	cmp	r3, r2
 80037b2:	d901      	bls.n	80037b8 <HAL_RCCEx_PeriphCLKConfig+0xe8>
          {
            return HAL_TIMEOUT;
 80037b4:	2303      	movs	r3, #3
 80037b6:	e036      	b.n	8003826 <HAL_RCCEx_PeriphCLKConfig+0x156>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80037b8:	4b1d      	ldr	r3, [pc, #116]	; (8003830 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 80037ba:	6a1b      	ldr	r3, [r3, #32]
 80037bc:	f003 0302 	and.w	r3, r3, #2
 80037c0:	2b00      	cmp	r3, #0
 80037c2:	d0ee      	beq.n	80037a2 <HAL_RCCEx_PeriphCLKConfig+0xd2>
          }
        }
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 80037c4:	4b1a      	ldr	r3, [pc, #104]	; (8003830 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 80037c6:	6a1b      	ldr	r3, [r3, #32]
 80037c8:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 80037cc:	687b      	ldr	r3, [r7, #4]
 80037ce:	685b      	ldr	r3, [r3, #4]
 80037d0:	4917      	ldr	r1, [pc, #92]	; (8003830 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 80037d2:	4313      	orrs	r3, r2
 80037d4:	620b      	str	r3, [r1, #32]

    /* Require to disable power clock if necessary */
    if (pwrclkchanged == SET)
 80037d6:	7dfb      	ldrb	r3, [r7, #23]
 80037d8:	2b01      	cmp	r3, #1
 80037da:	d105      	bne.n	80037e8 <HAL_RCCEx_PeriphCLKConfig+0x118>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80037dc:	4b14      	ldr	r3, [pc, #80]	; (8003830 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 80037de:	69db      	ldr	r3, [r3, #28]
 80037e0:	4a13      	ldr	r2, [pc, #76]	; (8003830 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 80037e2:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 80037e6:	61d3      	str	r3, [r2, #28]
    }
  }

  /*------------------------------ ADC clock Configuration ------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 80037e8:	687b      	ldr	r3, [r7, #4]
 80037ea:	681b      	ldr	r3, [r3, #0]
 80037ec:	f003 0302 	and.w	r3, r3, #2
 80037f0:	2b00      	cmp	r3, #0
 80037f2:	d008      	beq.n	8003806 <HAL_RCCEx_PeriphCLKConfig+0x136>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADCPLLCLK_DIV(PeriphClkInit->AdcClockSelection));

    /* Configure the ADC clock source */
    __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 80037f4:	4b0e      	ldr	r3, [pc, #56]	; (8003830 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 80037f6:	685b      	ldr	r3, [r3, #4]
 80037f8:	f423 4240 	bic.w	r2, r3, #49152	; 0xc000
 80037fc:	687b      	ldr	r3, [r7, #4]
 80037fe:	689b      	ldr	r3, [r3, #8]
 8003800:	490b      	ldr	r1, [pc, #44]	; (8003830 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8003802:	4313      	orrs	r3, r2
 8003804:	604b      	str	r3, [r1, #4]

#if defined(STM32F102x6) || defined(STM32F102xB) || defined(STM32F103x6)\
 || defined(STM32F103xB) || defined(STM32F103xE) || defined(STM32F103xG)\
 || defined(STM32F105xC) || defined(STM32F107xC)
  /*------------------------------ USB clock Configuration ------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == RCC_PERIPHCLK_USB)
 8003806:	687b      	ldr	r3, [r7, #4]
 8003808:	681b      	ldr	r3, [r3, #0]
 800380a:	f003 0310 	and.w	r3, r3, #16
 800380e:	2b00      	cmp	r3, #0
 8003810:	d008      	beq.n	8003824 <HAL_RCCEx_PeriphCLKConfig+0x154>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USBPLLCLK_DIV(PeriphClkInit->UsbClockSelection));

    /* Configure the USB clock source */
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 8003812:	4b07      	ldr	r3, [pc, #28]	; (8003830 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8003814:	685b      	ldr	r3, [r3, #4]
 8003816:	f423 0280 	bic.w	r2, r3, #4194304	; 0x400000
 800381a:	687b      	ldr	r3, [r7, #4]
 800381c:	68db      	ldr	r3, [r3, #12]
 800381e:	4904      	ldr	r1, [pc, #16]	; (8003830 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8003820:	4313      	orrs	r3, r2
 8003822:	604b      	str	r3, [r1, #4]
  }
#endif /* STM32F102x6 || STM32F102xB || STM32F103x6 || STM32F103xB || STM32F103xE || STM32F103xG || STM32F105xC || STM32F107xC */

  return HAL_OK;
 8003824:	2300      	movs	r3, #0
}
 8003826:	4618      	mov	r0, r3
 8003828:	3718      	adds	r7, #24
 800382a:	46bd      	mov	sp, r7
 800382c:	bd80      	pop	{r7, pc}
 800382e:	bf00      	nop
 8003830:	40021000 	.word	0x40021000
 8003834:	40007000 	.word	0x40007000
 8003838:	42420440 	.word	0x42420440

0800383c <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 800383c:	b580      	push	{r7, lr}
 800383e:	b082      	sub	sp, #8
 8003840:	af00      	add	r7, sp, #0
 8003842:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8003844:	687b      	ldr	r3, [r7, #4]
 8003846:	2b00      	cmp	r3, #0
 8003848:	d101      	bne.n	800384e <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 800384a:	2301      	movs	r3, #1
 800384c:	e041      	b.n	80038d2 <HAL_TIM_Base_Init+0x96>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 800384e:	687b      	ldr	r3, [r7, #4]
 8003850:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8003854:	b2db      	uxtb	r3, r3
 8003856:	2b00      	cmp	r3, #0
 8003858:	d106      	bne.n	8003868 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 800385a:	687b      	ldr	r3, [r7, #4]
 800385c:	2200      	movs	r2, #0
 800385e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8003862:	6878      	ldr	r0, [r7, #4]
 8003864:	f7fc fea4 	bl	80005b0 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8003868:	687b      	ldr	r3, [r7, #4]
 800386a:	2202      	movs	r2, #2
 800386c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8003870:	687b      	ldr	r3, [r7, #4]
 8003872:	681a      	ldr	r2, [r3, #0]
 8003874:	687b      	ldr	r3, [r7, #4]
 8003876:	3304      	adds	r3, #4
 8003878:	4619      	mov	r1, r3
 800387a:	4610      	mov	r0, r2
 800387c:	f000 fa64 	bl	8003d48 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8003880:	687b      	ldr	r3, [r7, #4]
 8003882:	2201      	movs	r2, #1
 8003884:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8003888:	687b      	ldr	r3, [r7, #4]
 800388a:	2201      	movs	r2, #1
 800388c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8003890:	687b      	ldr	r3, [r7, #4]
 8003892:	2201      	movs	r2, #1
 8003894:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8003898:	687b      	ldr	r3, [r7, #4]
 800389a:	2201      	movs	r2, #1
 800389c:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 80038a0:	687b      	ldr	r3, [r7, #4]
 80038a2:	2201      	movs	r2, #1
 80038a4:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80038a8:	687b      	ldr	r3, [r7, #4]
 80038aa:	2201      	movs	r2, #1
 80038ac:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 80038b0:	687b      	ldr	r3, [r7, #4]
 80038b2:	2201      	movs	r2, #1
 80038b4:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 80038b8:	687b      	ldr	r3, [r7, #4]
 80038ba:	2201      	movs	r2, #1
 80038bc:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 80038c0:	687b      	ldr	r3, [r7, #4]
 80038c2:	2201      	movs	r2, #1
 80038c4:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 80038c8:	687b      	ldr	r3, [r7, #4]
 80038ca:	2201      	movs	r2, #1
 80038cc:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 80038d0:	2300      	movs	r3, #0
}
 80038d2:	4618      	mov	r0, r3
 80038d4:	3708      	adds	r7, #8
 80038d6:	46bd      	mov	sp, r7
 80038d8:	bd80      	pop	{r7, pc}
	...

080038dc <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 80038dc:	b480      	push	{r7}
 80038de:	b085      	sub	sp, #20
 80038e0:	af00      	add	r7, sp, #0
 80038e2:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 80038e4:	687b      	ldr	r3, [r7, #4]
 80038e6:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80038ea:	b2db      	uxtb	r3, r3
 80038ec:	2b01      	cmp	r3, #1
 80038ee:	d001      	beq.n	80038f4 <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 80038f0:	2301      	movs	r3, #1
 80038f2:	e03a      	b.n	800396a <HAL_TIM_Base_Start_IT+0x8e>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80038f4:	687b      	ldr	r3, [r7, #4]
 80038f6:	2202      	movs	r2, #2
 80038f8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 80038fc:	687b      	ldr	r3, [r7, #4]
 80038fe:	681b      	ldr	r3, [r3, #0]
 8003900:	68da      	ldr	r2, [r3, #12]
 8003902:	687b      	ldr	r3, [r7, #4]
 8003904:	681b      	ldr	r3, [r3, #0]
 8003906:	f042 0201 	orr.w	r2, r2, #1
 800390a:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800390c:	687b      	ldr	r3, [r7, #4]
 800390e:	681b      	ldr	r3, [r3, #0]
 8003910:	4a18      	ldr	r2, [pc, #96]	; (8003974 <HAL_TIM_Base_Start_IT+0x98>)
 8003912:	4293      	cmp	r3, r2
 8003914:	d00e      	beq.n	8003934 <HAL_TIM_Base_Start_IT+0x58>
 8003916:	687b      	ldr	r3, [r7, #4]
 8003918:	681b      	ldr	r3, [r3, #0]
 800391a:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800391e:	d009      	beq.n	8003934 <HAL_TIM_Base_Start_IT+0x58>
 8003920:	687b      	ldr	r3, [r7, #4]
 8003922:	681b      	ldr	r3, [r3, #0]
 8003924:	4a14      	ldr	r2, [pc, #80]	; (8003978 <HAL_TIM_Base_Start_IT+0x9c>)
 8003926:	4293      	cmp	r3, r2
 8003928:	d004      	beq.n	8003934 <HAL_TIM_Base_Start_IT+0x58>
 800392a:	687b      	ldr	r3, [r7, #4]
 800392c:	681b      	ldr	r3, [r3, #0]
 800392e:	4a13      	ldr	r2, [pc, #76]	; (800397c <HAL_TIM_Base_Start_IT+0xa0>)
 8003930:	4293      	cmp	r3, r2
 8003932:	d111      	bne.n	8003958 <HAL_TIM_Base_Start_IT+0x7c>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8003934:	687b      	ldr	r3, [r7, #4]
 8003936:	681b      	ldr	r3, [r3, #0]
 8003938:	689b      	ldr	r3, [r3, #8]
 800393a:	f003 0307 	and.w	r3, r3, #7
 800393e:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8003940:	68fb      	ldr	r3, [r7, #12]
 8003942:	2b06      	cmp	r3, #6
 8003944:	d010      	beq.n	8003968 <HAL_TIM_Base_Start_IT+0x8c>
    {
      __HAL_TIM_ENABLE(htim);
 8003946:	687b      	ldr	r3, [r7, #4]
 8003948:	681b      	ldr	r3, [r3, #0]
 800394a:	681a      	ldr	r2, [r3, #0]
 800394c:	687b      	ldr	r3, [r7, #4]
 800394e:	681b      	ldr	r3, [r3, #0]
 8003950:	f042 0201 	orr.w	r2, r2, #1
 8003954:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8003956:	e007      	b.n	8003968 <HAL_TIM_Base_Start_IT+0x8c>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8003958:	687b      	ldr	r3, [r7, #4]
 800395a:	681b      	ldr	r3, [r3, #0]
 800395c:	681a      	ldr	r2, [r3, #0]
 800395e:	687b      	ldr	r3, [r7, #4]
 8003960:	681b      	ldr	r3, [r3, #0]
 8003962:	f042 0201 	orr.w	r2, r2, #1
 8003966:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8003968:	2300      	movs	r3, #0
}
 800396a:	4618      	mov	r0, r3
 800396c:	3714      	adds	r7, #20
 800396e:	46bd      	mov	sp, r7
 8003970:	bc80      	pop	{r7}
 8003972:	4770      	bx	lr
 8003974:	40012c00 	.word	0x40012c00
 8003978:	40000400 	.word	0x40000400
 800397c:	40000800 	.word	0x40000800

08003980 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8003980:	b580      	push	{r7, lr}
 8003982:	b082      	sub	sp, #8
 8003984:	af00      	add	r7, sp, #0
 8003986:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 8003988:	687b      	ldr	r3, [r7, #4]
 800398a:	681b      	ldr	r3, [r3, #0]
 800398c:	691b      	ldr	r3, [r3, #16]
 800398e:	f003 0302 	and.w	r3, r3, #2
 8003992:	2b02      	cmp	r3, #2
 8003994:	d122      	bne.n	80039dc <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 8003996:	687b      	ldr	r3, [r7, #4]
 8003998:	681b      	ldr	r3, [r3, #0]
 800399a:	68db      	ldr	r3, [r3, #12]
 800399c:	f003 0302 	and.w	r3, r3, #2
 80039a0:	2b02      	cmp	r3, #2
 80039a2:	d11b      	bne.n	80039dc <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 80039a4:	687b      	ldr	r3, [r7, #4]
 80039a6:	681b      	ldr	r3, [r3, #0]
 80039a8:	f06f 0202 	mvn.w	r2, #2
 80039ac:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 80039ae:	687b      	ldr	r3, [r7, #4]
 80039b0:	2201      	movs	r2, #1
 80039b2:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 80039b4:	687b      	ldr	r3, [r7, #4]
 80039b6:	681b      	ldr	r3, [r3, #0]
 80039b8:	699b      	ldr	r3, [r3, #24]
 80039ba:	f003 0303 	and.w	r3, r3, #3
 80039be:	2b00      	cmp	r3, #0
 80039c0:	d003      	beq.n	80039ca <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 80039c2:	6878      	ldr	r0, [r7, #4]
 80039c4:	f000 f9a4 	bl	8003d10 <HAL_TIM_IC_CaptureCallback>
 80039c8:	e005      	b.n	80039d6 <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 80039ca:	6878      	ldr	r0, [r7, #4]
 80039cc:	f000 f997 	bl	8003cfe <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 80039d0:	6878      	ldr	r0, [r7, #4]
 80039d2:	f000 f9a6 	bl	8003d22 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80039d6:	687b      	ldr	r3, [r7, #4]
 80039d8:	2200      	movs	r2, #0
 80039da:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 80039dc:	687b      	ldr	r3, [r7, #4]
 80039de:	681b      	ldr	r3, [r3, #0]
 80039e0:	691b      	ldr	r3, [r3, #16]
 80039e2:	f003 0304 	and.w	r3, r3, #4
 80039e6:	2b04      	cmp	r3, #4
 80039e8:	d122      	bne.n	8003a30 <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 80039ea:	687b      	ldr	r3, [r7, #4]
 80039ec:	681b      	ldr	r3, [r3, #0]
 80039ee:	68db      	ldr	r3, [r3, #12]
 80039f0:	f003 0304 	and.w	r3, r3, #4
 80039f4:	2b04      	cmp	r3, #4
 80039f6:	d11b      	bne.n	8003a30 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 80039f8:	687b      	ldr	r3, [r7, #4]
 80039fa:	681b      	ldr	r3, [r3, #0]
 80039fc:	f06f 0204 	mvn.w	r2, #4
 8003a00:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8003a02:	687b      	ldr	r3, [r7, #4]
 8003a04:	2202      	movs	r2, #2
 8003a06:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8003a08:	687b      	ldr	r3, [r7, #4]
 8003a0a:	681b      	ldr	r3, [r3, #0]
 8003a0c:	699b      	ldr	r3, [r3, #24]
 8003a0e:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8003a12:	2b00      	cmp	r3, #0
 8003a14:	d003      	beq.n	8003a1e <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8003a16:	6878      	ldr	r0, [r7, #4]
 8003a18:	f000 f97a 	bl	8003d10 <HAL_TIM_IC_CaptureCallback>
 8003a1c:	e005      	b.n	8003a2a <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8003a1e:	6878      	ldr	r0, [r7, #4]
 8003a20:	f000 f96d 	bl	8003cfe <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8003a24:	6878      	ldr	r0, [r7, #4]
 8003a26:	f000 f97c 	bl	8003d22 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8003a2a:	687b      	ldr	r3, [r7, #4]
 8003a2c:	2200      	movs	r2, #0
 8003a2e:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 8003a30:	687b      	ldr	r3, [r7, #4]
 8003a32:	681b      	ldr	r3, [r3, #0]
 8003a34:	691b      	ldr	r3, [r3, #16]
 8003a36:	f003 0308 	and.w	r3, r3, #8
 8003a3a:	2b08      	cmp	r3, #8
 8003a3c:	d122      	bne.n	8003a84 <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 8003a3e:	687b      	ldr	r3, [r7, #4]
 8003a40:	681b      	ldr	r3, [r3, #0]
 8003a42:	68db      	ldr	r3, [r3, #12]
 8003a44:	f003 0308 	and.w	r3, r3, #8
 8003a48:	2b08      	cmp	r3, #8
 8003a4a:	d11b      	bne.n	8003a84 <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 8003a4c:	687b      	ldr	r3, [r7, #4]
 8003a4e:	681b      	ldr	r3, [r3, #0]
 8003a50:	f06f 0208 	mvn.w	r2, #8
 8003a54:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8003a56:	687b      	ldr	r3, [r7, #4]
 8003a58:	2204      	movs	r2, #4
 8003a5a:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8003a5c:	687b      	ldr	r3, [r7, #4]
 8003a5e:	681b      	ldr	r3, [r3, #0]
 8003a60:	69db      	ldr	r3, [r3, #28]
 8003a62:	f003 0303 	and.w	r3, r3, #3
 8003a66:	2b00      	cmp	r3, #0
 8003a68:	d003      	beq.n	8003a72 <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8003a6a:	6878      	ldr	r0, [r7, #4]
 8003a6c:	f000 f950 	bl	8003d10 <HAL_TIM_IC_CaptureCallback>
 8003a70:	e005      	b.n	8003a7e <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8003a72:	6878      	ldr	r0, [r7, #4]
 8003a74:	f000 f943 	bl	8003cfe <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8003a78:	6878      	ldr	r0, [r7, #4]
 8003a7a:	f000 f952 	bl	8003d22 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8003a7e:	687b      	ldr	r3, [r7, #4]
 8003a80:	2200      	movs	r2, #0
 8003a82:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 8003a84:	687b      	ldr	r3, [r7, #4]
 8003a86:	681b      	ldr	r3, [r3, #0]
 8003a88:	691b      	ldr	r3, [r3, #16]
 8003a8a:	f003 0310 	and.w	r3, r3, #16
 8003a8e:	2b10      	cmp	r3, #16
 8003a90:	d122      	bne.n	8003ad8 <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 8003a92:	687b      	ldr	r3, [r7, #4]
 8003a94:	681b      	ldr	r3, [r3, #0]
 8003a96:	68db      	ldr	r3, [r3, #12]
 8003a98:	f003 0310 	and.w	r3, r3, #16
 8003a9c:	2b10      	cmp	r3, #16
 8003a9e:	d11b      	bne.n	8003ad8 <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 8003aa0:	687b      	ldr	r3, [r7, #4]
 8003aa2:	681b      	ldr	r3, [r3, #0]
 8003aa4:	f06f 0210 	mvn.w	r2, #16
 8003aa8:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8003aaa:	687b      	ldr	r3, [r7, #4]
 8003aac:	2208      	movs	r2, #8
 8003aae:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8003ab0:	687b      	ldr	r3, [r7, #4]
 8003ab2:	681b      	ldr	r3, [r3, #0]
 8003ab4:	69db      	ldr	r3, [r3, #28]
 8003ab6:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8003aba:	2b00      	cmp	r3, #0
 8003abc:	d003      	beq.n	8003ac6 <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8003abe:	6878      	ldr	r0, [r7, #4]
 8003ac0:	f000 f926 	bl	8003d10 <HAL_TIM_IC_CaptureCallback>
 8003ac4:	e005      	b.n	8003ad2 <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8003ac6:	6878      	ldr	r0, [r7, #4]
 8003ac8:	f000 f919 	bl	8003cfe <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8003acc:	6878      	ldr	r0, [r7, #4]
 8003ace:	f000 f928 	bl	8003d22 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8003ad2:	687b      	ldr	r3, [r7, #4]
 8003ad4:	2200      	movs	r2, #0
 8003ad6:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 8003ad8:	687b      	ldr	r3, [r7, #4]
 8003ada:	681b      	ldr	r3, [r3, #0]
 8003adc:	691b      	ldr	r3, [r3, #16]
 8003ade:	f003 0301 	and.w	r3, r3, #1
 8003ae2:	2b01      	cmp	r3, #1
 8003ae4:	d10e      	bne.n	8003b04 <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 8003ae6:	687b      	ldr	r3, [r7, #4]
 8003ae8:	681b      	ldr	r3, [r3, #0]
 8003aea:	68db      	ldr	r3, [r3, #12]
 8003aec:	f003 0301 	and.w	r3, r3, #1
 8003af0:	2b01      	cmp	r3, #1
 8003af2:	d107      	bne.n	8003b04 <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 8003af4:	687b      	ldr	r3, [r7, #4]
 8003af6:	681b      	ldr	r3, [r3, #0]
 8003af8:	f06f 0201 	mvn.w	r2, #1
 8003afc:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 8003afe:	6878      	ldr	r0, [r7, #4]
 8003b00:	f7fc fb24 	bl	800014c <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 8003b04:	687b      	ldr	r3, [r7, #4]
 8003b06:	681b      	ldr	r3, [r3, #0]
 8003b08:	691b      	ldr	r3, [r3, #16]
 8003b0a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003b0e:	2b80      	cmp	r3, #128	; 0x80
 8003b10:	d10e      	bne.n	8003b30 <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 8003b12:	687b      	ldr	r3, [r7, #4]
 8003b14:	681b      	ldr	r3, [r3, #0]
 8003b16:	68db      	ldr	r3, [r3, #12]
 8003b18:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003b1c:	2b80      	cmp	r3, #128	; 0x80
 8003b1e:	d107      	bne.n	8003b30 <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 8003b20:	687b      	ldr	r3, [r7, #4]
 8003b22:	681b      	ldr	r3, [r3, #0]
 8003b24:	f06f 0280 	mvn.w	r2, #128	; 0x80
 8003b28:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 8003b2a:	6878      	ldr	r0, [r7, #4]
 8003b2c:	f000 fa6b 	bl	8004006 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 8003b30:	687b      	ldr	r3, [r7, #4]
 8003b32:	681b      	ldr	r3, [r3, #0]
 8003b34:	691b      	ldr	r3, [r3, #16]
 8003b36:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003b3a:	2b40      	cmp	r3, #64	; 0x40
 8003b3c:	d10e      	bne.n	8003b5c <HAL_TIM_IRQHandler+0x1dc>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 8003b3e:	687b      	ldr	r3, [r7, #4]
 8003b40:	681b      	ldr	r3, [r3, #0]
 8003b42:	68db      	ldr	r3, [r3, #12]
 8003b44:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003b48:	2b40      	cmp	r3, #64	; 0x40
 8003b4a:	d107      	bne.n	8003b5c <HAL_TIM_IRQHandler+0x1dc>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 8003b4c:	687b      	ldr	r3, [r7, #4]
 8003b4e:	681b      	ldr	r3, [r3, #0]
 8003b50:	f06f 0240 	mvn.w	r2, #64	; 0x40
 8003b54:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 8003b56:	6878      	ldr	r0, [r7, #4]
 8003b58:	f000 f8ec 	bl	8003d34 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 8003b5c:	687b      	ldr	r3, [r7, #4]
 8003b5e:	681b      	ldr	r3, [r3, #0]
 8003b60:	691b      	ldr	r3, [r3, #16]
 8003b62:	f003 0320 	and.w	r3, r3, #32
 8003b66:	2b20      	cmp	r3, #32
 8003b68:	d10e      	bne.n	8003b88 <HAL_TIM_IRQHandler+0x208>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 8003b6a:	687b      	ldr	r3, [r7, #4]
 8003b6c:	681b      	ldr	r3, [r3, #0]
 8003b6e:	68db      	ldr	r3, [r3, #12]
 8003b70:	f003 0320 	and.w	r3, r3, #32
 8003b74:	2b20      	cmp	r3, #32
 8003b76:	d107      	bne.n	8003b88 <HAL_TIM_IRQHandler+0x208>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 8003b78:	687b      	ldr	r3, [r7, #4]
 8003b7a:	681b      	ldr	r3, [r3, #0]
 8003b7c:	f06f 0220 	mvn.w	r2, #32
 8003b80:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 8003b82:	6878      	ldr	r0, [r7, #4]
 8003b84:	f000 fa36 	bl	8003ff4 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8003b88:	bf00      	nop
 8003b8a:	3708      	adds	r7, #8
 8003b8c:	46bd      	mov	sp, r7
 8003b8e:	bd80      	pop	{r7, pc}

08003b90 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 8003b90:	b580      	push	{r7, lr}
 8003b92:	b084      	sub	sp, #16
 8003b94:	af00      	add	r7, sp, #0
 8003b96:	6078      	str	r0, [r7, #4]
 8003b98:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 8003b9a:	687b      	ldr	r3, [r7, #4]
 8003b9c:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8003ba0:	2b01      	cmp	r3, #1
 8003ba2:	d101      	bne.n	8003ba8 <HAL_TIM_ConfigClockSource+0x18>
 8003ba4:	2302      	movs	r3, #2
 8003ba6:	e0a6      	b.n	8003cf6 <HAL_TIM_ConfigClockSource+0x166>
 8003ba8:	687b      	ldr	r3, [r7, #4]
 8003baa:	2201      	movs	r2, #1
 8003bac:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 8003bb0:	687b      	ldr	r3, [r7, #4]
 8003bb2:	2202      	movs	r2, #2
 8003bb4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 8003bb8:	687b      	ldr	r3, [r7, #4]
 8003bba:	681b      	ldr	r3, [r3, #0]
 8003bbc:	689b      	ldr	r3, [r3, #8]
 8003bbe:	60fb      	str	r3, [r7, #12]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 8003bc0:	68fb      	ldr	r3, [r7, #12]
 8003bc2:	f023 0377 	bic.w	r3, r3, #119	; 0x77
 8003bc6:	60fb      	str	r3, [r7, #12]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8003bc8:	68fb      	ldr	r3, [r7, #12]
 8003bca:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8003bce:	60fb      	str	r3, [r7, #12]
  htim->Instance->SMCR = tmpsmcr;
 8003bd0:	687b      	ldr	r3, [r7, #4]
 8003bd2:	681b      	ldr	r3, [r3, #0]
 8003bd4:	68fa      	ldr	r2, [r7, #12]
 8003bd6:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 8003bd8:	683b      	ldr	r3, [r7, #0]
 8003bda:	681b      	ldr	r3, [r3, #0]
 8003bdc:	2b40      	cmp	r3, #64	; 0x40
 8003bde:	d067      	beq.n	8003cb0 <HAL_TIM_ConfigClockSource+0x120>
 8003be0:	2b40      	cmp	r3, #64	; 0x40
 8003be2:	d80b      	bhi.n	8003bfc <HAL_TIM_ConfigClockSource+0x6c>
 8003be4:	2b10      	cmp	r3, #16
 8003be6:	d073      	beq.n	8003cd0 <HAL_TIM_ConfigClockSource+0x140>
 8003be8:	2b10      	cmp	r3, #16
 8003bea:	d802      	bhi.n	8003bf2 <HAL_TIM_ConfigClockSource+0x62>
 8003bec:	2b00      	cmp	r3, #0
 8003bee:	d06f      	beq.n	8003cd0 <HAL_TIM_ConfigClockSource+0x140>
        TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
        break;
      }

    default:
      break;
 8003bf0:	e078      	b.n	8003ce4 <HAL_TIM_ConfigClockSource+0x154>
  switch (sClockSourceConfig->ClockSource)
 8003bf2:	2b20      	cmp	r3, #32
 8003bf4:	d06c      	beq.n	8003cd0 <HAL_TIM_ConfigClockSource+0x140>
 8003bf6:	2b30      	cmp	r3, #48	; 0x30
 8003bf8:	d06a      	beq.n	8003cd0 <HAL_TIM_ConfigClockSource+0x140>
      break;
 8003bfa:	e073      	b.n	8003ce4 <HAL_TIM_ConfigClockSource+0x154>
  switch (sClockSourceConfig->ClockSource)
 8003bfc:	2b70      	cmp	r3, #112	; 0x70
 8003bfe:	d00d      	beq.n	8003c1c <HAL_TIM_ConfigClockSource+0x8c>
 8003c00:	2b70      	cmp	r3, #112	; 0x70
 8003c02:	d804      	bhi.n	8003c0e <HAL_TIM_ConfigClockSource+0x7e>
 8003c04:	2b50      	cmp	r3, #80	; 0x50
 8003c06:	d033      	beq.n	8003c70 <HAL_TIM_ConfigClockSource+0xe0>
 8003c08:	2b60      	cmp	r3, #96	; 0x60
 8003c0a:	d041      	beq.n	8003c90 <HAL_TIM_ConfigClockSource+0x100>
      break;
 8003c0c:	e06a      	b.n	8003ce4 <HAL_TIM_ConfigClockSource+0x154>
  switch (sClockSourceConfig->ClockSource)
 8003c0e:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8003c12:	d066      	beq.n	8003ce2 <HAL_TIM_ConfigClockSource+0x152>
 8003c14:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8003c18:	d017      	beq.n	8003c4a <HAL_TIM_ConfigClockSource+0xba>
      break;
 8003c1a:	e063      	b.n	8003ce4 <HAL_TIM_ConfigClockSource+0x154>
      TIM_ETR_SetConfig(htim->Instance,
 8003c1c:	687b      	ldr	r3, [r7, #4]
 8003c1e:	6818      	ldr	r0, [r3, #0]
 8003c20:	683b      	ldr	r3, [r7, #0]
 8003c22:	6899      	ldr	r1, [r3, #8]
 8003c24:	683b      	ldr	r3, [r7, #0]
 8003c26:	685a      	ldr	r2, [r3, #4]
 8003c28:	683b      	ldr	r3, [r7, #0]
 8003c2a:	68db      	ldr	r3, [r3, #12]
 8003c2c:	f000 f965 	bl	8003efa <TIM_ETR_SetConfig>
      tmpsmcr = htim->Instance->SMCR;
 8003c30:	687b      	ldr	r3, [r7, #4]
 8003c32:	681b      	ldr	r3, [r3, #0]
 8003c34:	689b      	ldr	r3, [r3, #8]
 8003c36:	60fb      	str	r3, [r7, #12]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 8003c38:	68fb      	ldr	r3, [r7, #12]
 8003c3a:	f043 0377 	orr.w	r3, r3, #119	; 0x77
 8003c3e:	60fb      	str	r3, [r7, #12]
      htim->Instance->SMCR = tmpsmcr;
 8003c40:	687b      	ldr	r3, [r7, #4]
 8003c42:	681b      	ldr	r3, [r3, #0]
 8003c44:	68fa      	ldr	r2, [r7, #12]
 8003c46:	609a      	str	r2, [r3, #8]
      break;
 8003c48:	e04c      	b.n	8003ce4 <HAL_TIM_ConfigClockSource+0x154>
      TIM_ETR_SetConfig(htim->Instance,
 8003c4a:	687b      	ldr	r3, [r7, #4]
 8003c4c:	6818      	ldr	r0, [r3, #0]
 8003c4e:	683b      	ldr	r3, [r7, #0]
 8003c50:	6899      	ldr	r1, [r3, #8]
 8003c52:	683b      	ldr	r3, [r7, #0]
 8003c54:	685a      	ldr	r2, [r3, #4]
 8003c56:	683b      	ldr	r3, [r7, #0]
 8003c58:	68db      	ldr	r3, [r3, #12]
 8003c5a:	f000 f94e 	bl	8003efa <TIM_ETR_SetConfig>
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 8003c5e:	687b      	ldr	r3, [r7, #4]
 8003c60:	681b      	ldr	r3, [r3, #0]
 8003c62:	689a      	ldr	r2, [r3, #8]
 8003c64:	687b      	ldr	r3, [r7, #4]
 8003c66:	681b      	ldr	r3, [r3, #0]
 8003c68:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8003c6c:	609a      	str	r2, [r3, #8]
      break;
 8003c6e:	e039      	b.n	8003ce4 <HAL_TIM_ConfigClockSource+0x154>
      TIM_TI1_ConfigInputStage(htim->Instance,
 8003c70:	687b      	ldr	r3, [r7, #4]
 8003c72:	6818      	ldr	r0, [r3, #0]
 8003c74:	683b      	ldr	r3, [r7, #0]
 8003c76:	6859      	ldr	r1, [r3, #4]
 8003c78:	683b      	ldr	r3, [r7, #0]
 8003c7a:	68db      	ldr	r3, [r3, #12]
 8003c7c:	461a      	mov	r2, r3
 8003c7e:	f000 f8c5 	bl	8003e0c <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 8003c82:	687b      	ldr	r3, [r7, #4]
 8003c84:	681b      	ldr	r3, [r3, #0]
 8003c86:	2150      	movs	r1, #80	; 0x50
 8003c88:	4618      	mov	r0, r3
 8003c8a:	f000 f91c 	bl	8003ec6 <TIM_ITRx_SetConfig>
      break;
 8003c8e:	e029      	b.n	8003ce4 <HAL_TIM_ConfigClockSource+0x154>
      TIM_TI2_ConfigInputStage(htim->Instance,
 8003c90:	687b      	ldr	r3, [r7, #4]
 8003c92:	6818      	ldr	r0, [r3, #0]
 8003c94:	683b      	ldr	r3, [r7, #0]
 8003c96:	6859      	ldr	r1, [r3, #4]
 8003c98:	683b      	ldr	r3, [r7, #0]
 8003c9a:	68db      	ldr	r3, [r3, #12]
 8003c9c:	461a      	mov	r2, r3
 8003c9e:	f000 f8e3 	bl	8003e68 <TIM_TI2_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 8003ca2:	687b      	ldr	r3, [r7, #4]
 8003ca4:	681b      	ldr	r3, [r3, #0]
 8003ca6:	2160      	movs	r1, #96	; 0x60
 8003ca8:	4618      	mov	r0, r3
 8003caa:	f000 f90c 	bl	8003ec6 <TIM_ITRx_SetConfig>
      break;
 8003cae:	e019      	b.n	8003ce4 <HAL_TIM_ConfigClockSource+0x154>
      TIM_TI1_ConfigInputStage(htim->Instance,
 8003cb0:	687b      	ldr	r3, [r7, #4]
 8003cb2:	6818      	ldr	r0, [r3, #0]
 8003cb4:	683b      	ldr	r3, [r7, #0]
 8003cb6:	6859      	ldr	r1, [r3, #4]
 8003cb8:	683b      	ldr	r3, [r7, #0]
 8003cba:	68db      	ldr	r3, [r3, #12]
 8003cbc:	461a      	mov	r2, r3
 8003cbe:	f000 f8a5 	bl	8003e0c <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 8003cc2:	687b      	ldr	r3, [r7, #4]
 8003cc4:	681b      	ldr	r3, [r3, #0]
 8003cc6:	2140      	movs	r1, #64	; 0x40
 8003cc8:	4618      	mov	r0, r3
 8003cca:	f000 f8fc 	bl	8003ec6 <TIM_ITRx_SetConfig>
      break;
 8003cce:	e009      	b.n	8003ce4 <HAL_TIM_ConfigClockSource+0x154>
        TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 8003cd0:	687b      	ldr	r3, [r7, #4]
 8003cd2:	681a      	ldr	r2, [r3, #0]
 8003cd4:	683b      	ldr	r3, [r7, #0]
 8003cd6:	681b      	ldr	r3, [r3, #0]
 8003cd8:	4619      	mov	r1, r3
 8003cda:	4610      	mov	r0, r2
 8003cdc:	f000 f8f3 	bl	8003ec6 <TIM_ITRx_SetConfig>
        break;
 8003ce0:	e000      	b.n	8003ce4 <HAL_TIM_ConfigClockSource+0x154>
      break;
 8003ce2:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 8003ce4:	687b      	ldr	r3, [r7, #4]
 8003ce6:	2201      	movs	r2, #1
 8003ce8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8003cec:	687b      	ldr	r3, [r7, #4]
 8003cee:	2200      	movs	r2, #0
 8003cf0:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8003cf4:	2300      	movs	r3, #0
}
 8003cf6:	4618      	mov	r0, r3
 8003cf8:	3710      	adds	r7, #16
 8003cfa:	46bd      	mov	sp, r7
 8003cfc:	bd80      	pop	{r7, pc}

08003cfe <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 8003cfe:	b480      	push	{r7}
 8003d00:	b083      	sub	sp, #12
 8003d02:	af00      	add	r7, sp, #0
 8003d04:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 8003d06:	bf00      	nop
 8003d08:	370c      	adds	r7, #12
 8003d0a:	46bd      	mov	sp, r7
 8003d0c:	bc80      	pop	{r7}
 8003d0e:	4770      	bx	lr

08003d10 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 8003d10:	b480      	push	{r7}
 8003d12:	b083      	sub	sp, #12
 8003d14:	af00      	add	r7, sp, #0
 8003d16:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 8003d18:	bf00      	nop
 8003d1a:	370c      	adds	r7, #12
 8003d1c:	46bd      	mov	sp, r7
 8003d1e:	bc80      	pop	{r7}
 8003d20:	4770      	bx	lr

08003d22 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 8003d22:	b480      	push	{r7}
 8003d24:	b083      	sub	sp, #12
 8003d26:	af00      	add	r7, sp, #0
 8003d28:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 8003d2a:	bf00      	nop
 8003d2c:	370c      	adds	r7, #12
 8003d2e:	46bd      	mov	sp, r7
 8003d30:	bc80      	pop	{r7}
 8003d32:	4770      	bx	lr

08003d34 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 8003d34:	b480      	push	{r7}
 8003d36:	b083      	sub	sp, #12
 8003d38:	af00      	add	r7, sp, #0
 8003d3a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 8003d3c:	bf00      	nop
 8003d3e:	370c      	adds	r7, #12
 8003d40:	46bd      	mov	sp, r7
 8003d42:	bc80      	pop	{r7}
 8003d44:	4770      	bx	lr
	...

08003d48 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 8003d48:	b480      	push	{r7}
 8003d4a:	b085      	sub	sp, #20
 8003d4c:	af00      	add	r7, sp, #0
 8003d4e:	6078      	str	r0, [r7, #4]
 8003d50:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8003d52:	687b      	ldr	r3, [r7, #4]
 8003d54:	681b      	ldr	r3, [r3, #0]
 8003d56:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8003d58:	687b      	ldr	r3, [r7, #4]
 8003d5a:	4a29      	ldr	r2, [pc, #164]	; (8003e00 <TIM_Base_SetConfig+0xb8>)
 8003d5c:	4293      	cmp	r3, r2
 8003d5e:	d00b      	beq.n	8003d78 <TIM_Base_SetConfig+0x30>
 8003d60:	687b      	ldr	r3, [r7, #4]
 8003d62:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8003d66:	d007      	beq.n	8003d78 <TIM_Base_SetConfig+0x30>
 8003d68:	687b      	ldr	r3, [r7, #4]
 8003d6a:	4a26      	ldr	r2, [pc, #152]	; (8003e04 <TIM_Base_SetConfig+0xbc>)
 8003d6c:	4293      	cmp	r3, r2
 8003d6e:	d003      	beq.n	8003d78 <TIM_Base_SetConfig+0x30>
 8003d70:	687b      	ldr	r3, [r7, #4]
 8003d72:	4a25      	ldr	r2, [pc, #148]	; (8003e08 <TIM_Base_SetConfig+0xc0>)
 8003d74:	4293      	cmp	r3, r2
 8003d76:	d108      	bne.n	8003d8a <TIM_Base_SetConfig+0x42>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8003d78:	68fb      	ldr	r3, [r7, #12]
 8003d7a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8003d7e:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8003d80:	683b      	ldr	r3, [r7, #0]
 8003d82:	685b      	ldr	r3, [r3, #4]
 8003d84:	68fa      	ldr	r2, [r7, #12]
 8003d86:	4313      	orrs	r3, r2
 8003d88:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8003d8a:	687b      	ldr	r3, [r7, #4]
 8003d8c:	4a1c      	ldr	r2, [pc, #112]	; (8003e00 <TIM_Base_SetConfig+0xb8>)
 8003d8e:	4293      	cmp	r3, r2
 8003d90:	d00b      	beq.n	8003daa <TIM_Base_SetConfig+0x62>
 8003d92:	687b      	ldr	r3, [r7, #4]
 8003d94:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8003d98:	d007      	beq.n	8003daa <TIM_Base_SetConfig+0x62>
 8003d9a:	687b      	ldr	r3, [r7, #4]
 8003d9c:	4a19      	ldr	r2, [pc, #100]	; (8003e04 <TIM_Base_SetConfig+0xbc>)
 8003d9e:	4293      	cmp	r3, r2
 8003da0:	d003      	beq.n	8003daa <TIM_Base_SetConfig+0x62>
 8003da2:	687b      	ldr	r3, [r7, #4]
 8003da4:	4a18      	ldr	r2, [pc, #96]	; (8003e08 <TIM_Base_SetConfig+0xc0>)
 8003da6:	4293      	cmp	r3, r2
 8003da8:	d108      	bne.n	8003dbc <TIM_Base_SetConfig+0x74>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8003daa:	68fb      	ldr	r3, [r7, #12]
 8003dac:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8003db0:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8003db2:	683b      	ldr	r3, [r7, #0]
 8003db4:	68db      	ldr	r3, [r3, #12]
 8003db6:	68fa      	ldr	r2, [r7, #12]
 8003db8:	4313      	orrs	r3, r2
 8003dba:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8003dbc:	68fb      	ldr	r3, [r7, #12]
 8003dbe:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 8003dc2:	683b      	ldr	r3, [r7, #0]
 8003dc4:	695b      	ldr	r3, [r3, #20]
 8003dc6:	4313      	orrs	r3, r2
 8003dc8:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8003dca:	687b      	ldr	r3, [r7, #4]
 8003dcc:	68fa      	ldr	r2, [r7, #12]
 8003dce:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8003dd0:	683b      	ldr	r3, [r7, #0]
 8003dd2:	689a      	ldr	r2, [r3, #8]
 8003dd4:	687b      	ldr	r3, [r7, #4]
 8003dd6:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8003dd8:	683b      	ldr	r3, [r7, #0]
 8003dda:	681a      	ldr	r2, [r3, #0]
 8003ddc:	687b      	ldr	r3, [r7, #4]
 8003dde:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8003de0:	687b      	ldr	r3, [r7, #4]
 8003de2:	4a07      	ldr	r2, [pc, #28]	; (8003e00 <TIM_Base_SetConfig+0xb8>)
 8003de4:	4293      	cmp	r3, r2
 8003de6:	d103      	bne.n	8003df0 <TIM_Base_SetConfig+0xa8>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8003de8:	683b      	ldr	r3, [r7, #0]
 8003dea:	691a      	ldr	r2, [r3, #16]
 8003dec:	687b      	ldr	r3, [r7, #4]
 8003dee:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8003df0:	687b      	ldr	r3, [r7, #4]
 8003df2:	2201      	movs	r2, #1
 8003df4:	615a      	str	r2, [r3, #20]
}
 8003df6:	bf00      	nop
 8003df8:	3714      	adds	r7, #20
 8003dfa:	46bd      	mov	sp, r7
 8003dfc:	bc80      	pop	{r7}
 8003dfe:	4770      	bx	lr
 8003e00:	40012c00 	.word	0x40012c00
 8003e04:	40000400 	.word	0x40000400
 8003e08:	40000800 	.word	0x40000800

08003e0c <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8003e0c:	b480      	push	{r7}
 8003e0e:	b087      	sub	sp, #28
 8003e10:	af00      	add	r7, sp, #0
 8003e12:	60f8      	str	r0, [r7, #12]
 8003e14:	60b9      	str	r1, [r7, #8]
 8003e16:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 8003e18:	68fb      	ldr	r3, [r7, #12]
 8003e1a:	6a1b      	ldr	r3, [r3, #32]
 8003e1c:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8003e1e:	68fb      	ldr	r3, [r7, #12]
 8003e20:	6a1b      	ldr	r3, [r3, #32]
 8003e22:	f023 0201 	bic.w	r2, r3, #1
 8003e26:	68fb      	ldr	r3, [r7, #12]
 8003e28:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8003e2a:	68fb      	ldr	r3, [r7, #12]
 8003e2c:	699b      	ldr	r3, [r3, #24]
 8003e2e:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8003e30:	693b      	ldr	r3, [r7, #16]
 8003e32:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8003e36:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 8003e38:	687b      	ldr	r3, [r7, #4]
 8003e3a:	011b      	lsls	r3, r3, #4
 8003e3c:	693a      	ldr	r2, [r7, #16]
 8003e3e:	4313      	orrs	r3, r2
 8003e40:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 8003e42:	697b      	ldr	r3, [r7, #20]
 8003e44:	f023 030a 	bic.w	r3, r3, #10
 8003e48:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 8003e4a:	697a      	ldr	r2, [r7, #20]
 8003e4c:	68bb      	ldr	r3, [r7, #8]
 8003e4e:	4313      	orrs	r3, r2
 8003e50:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 8003e52:	68fb      	ldr	r3, [r7, #12]
 8003e54:	693a      	ldr	r2, [r7, #16]
 8003e56:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8003e58:	68fb      	ldr	r3, [r7, #12]
 8003e5a:	697a      	ldr	r2, [r7, #20]
 8003e5c:	621a      	str	r2, [r3, #32]
}
 8003e5e:	bf00      	nop
 8003e60:	371c      	adds	r7, #28
 8003e62:	46bd      	mov	sp, r7
 8003e64:	bc80      	pop	{r7}
 8003e66:	4770      	bx	lr

08003e68 <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8003e68:	b480      	push	{r7}
 8003e6a:	b087      	sub	sp, #28
 8003e6c:	af00      	add	r7, sp, #0
 8003e6e:	60f8      	str	r0, [r7, #12]
 8003e70:	60b9      	str	r1, [r7, #8]
 8003e72:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8003e74:	68fb      	ldr	r3, [r7, #12]
 8003e76:	6a1b      	ldr	r3, [r3, #32]
 8003e78:	f023 0210 	bic.w	r2, r3, #16
 8003e7c:	68fb      	ldr	r3, [r7, #12]
 8003e7e:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8003e80:	68fb      	ldr	r3, [r7, #12]
 8003e82:	699b      	ldr	r3, [r3, #24]
 8003e84:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 8003e86:	68fb      	ldr	r3, [r7, #12]
 8003e88:	6a1b      	ldr	r3, [r3, #32]
 8003e8a:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 8003e8c:	697b      	ldr	r3, [r7, #20]
 8003e8e:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 8003e92:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 8003e94:	687b      	ldr	r3, [r7, #4]
 8003e96:	031b      	lsls	r3, r3, #12
 8003e98:	697a      	ldr	r2, [r7, #20]
 8003e9a:	4313      	orrs	r3, r2
 8003e9c:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8003e9e:	693b      	ldr	r3, [r7, #16]
 8003ea0:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 8003ea4:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity << 4U);
 8003ea6:	68bb      	ldr	r3, [r7, #8]
 8003ea8:	011b      	lsls	r3, r3, #4
 8003eaa:	693a      	ldr	r2, [r7, #16]
 8003eac:	4313      	orrs	r3, r2
 8003eae:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 8003eb0:	68fb      	ldr	r3, [r7, #12]
 8003eb2:	697a      	ldr	r2, [r7, #20]
 8003eb4:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8003eb6:	68fb      	ldr	r3, [r7, #12]
 8003eb8:	693a      	ldr	r2, [r7, #16]
 8003eba:	621a      	str	r2, [r3, #32]
}
 8003ebc:	bf00      	nop
 8003ebe:	371c      	adds	r7, #28
 8003ec0:	46bd      	mov	sp, r7
 8003ec2:	bc80      	pop	{r7}
 8003ec4:	4770      	bx	lr

08003ec6 <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 8003ec6:	b480      	push	{r7}
 8003ec8:	b085      	sub	sp, #20
 8003eca:	af00      	add	r7, sp, #0
 8003ecc:	6078      	str	r0, [r7, #4]
 8003ece:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 8003ed0:	687b      	ldr	r3, [r7, #4]
 8003ed2:	689b      	ldr	r3, [r3, #8]
 8003ed4:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 8003ed6:	68fb      	ldr	r3, [r7, #12]
 8003ed8:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8003edc:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 8003ede:	683a      	ldr	r2, [r7, #0]
 8003ee0:	68fb      	ldr	r3, [r7, #12]
 8003ee2:	4313      	orrs	r3, r2
 8003ee4:	f043 0307 	orr.w	r3, r3, #7
 8003ee8:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8003eea:	687b      	ldr	r3, [r7, #4]
 8003eec:	68fa      	ldr	r2, [r7, #12]
 8003eee:	609a      	str	r2, [r3, #8]
}
 8003ef0:	bf00      	nop
 8003ef2:	3714      	adds	r7, #20
 8003ef4:	46bd      	mov	sp, r7
 8003ef6:	bc80      	pop	{r7}
 8003ef8:	4770      	bx	lr

08003efa <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 8003efa:	b480      	push	{r7}
 8003efc:	b087      	sub	sp, #28
 8003efe:	af00      	add	r7, sp, #0
 8003f00:	60f8      	str	r0, [r7, #12]
 8003f02:	60b9      	str	r1, [r7, #8]
 8003f04:	607a      	str	r2, [r7, #4]
 8003f06:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 8003f08:	68fb      	ldr	r3, [r7, #12]
 8003f0a:	689b      	ldr	r3, [r3, #8]
 8003f0c:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8003f0e:	697b      	ldr	r3, [r7, #20]
 8003f10:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8003f14:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 8003f16:	683b      	ldr	r3, [r7, #0]
 8003f18:	021a      	lsls	r2, r3, #8
 8003f1a:	687b      	ldr	r3, [r7, #4]
 8003f1c:	431a      	orrs	r2, r3
 8003f1e:	68bb      	ldr	r3, [r7, #8]
 8003f20:	4313      	orrs	r3, r2
 8003f22:	697a      	ldr	r2, [r7, #20]
 8003f24:	4313      	orrs	r3, r2
 8003f26:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8003f28:	68fb      	ldr	r3, [r7, #12]
 8003f2a:	697a      	ldr	r2, [r7, #20]
 8003f2c:	609a      	str	r2, [r3, #8]
}
 8003f2e:	bf00      	nop
 8003f30:	371c      	adds	r7, #28
 8003f32:	46bd      	mov	sp, r7
 8003f34:	bc80      	pop	{r7}
 8003f36:	4770      	bx	lr

08003f38 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        TIM_MasterConfigTypeDef *sMasterConfig)
{
 8003f38:	b480      	push	{r7}
 8003f3a:	b085      	sub	sp, #20
 8003f3c:	af00      	add	r7, sp, #0
 8003f3e:	6078      	str	r0, [r7, #4]
 8003f40:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8003f42:	687b      	ldr	r3, [r7, #4]
 8003f44:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8003f48:	2b01      	cmp	r3, #1
 8003f4a:	d101      	bne.n	8003f50 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8003f4c:	2302      	movs	r3, #2
 8003f4e:	e046      	b.n	8003fde <HAL_TIMEx_MasterConfigSynchronization+0xa6>
 8003f50:	687b      	ldr	r3, [r7, #4]
 8003f52:	2201      	movs	r2, #1
 8003f54:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8003f58:	687b      	ldr	r3, [r7, #4]
 8003f5a:	2202      	movs	r2, #2
 8003f5c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8003f60:	687b      	ldr	r3, [r7, #4]
 8003f62:	681b      	ldr	r3, [r3, #0]
 8003f64:	685b      	ldr	r3, [r3, #4]
 8003f66:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8003f68:	687b      	ldr	r3, [r7, #4]
 8003f6a:	681b      	ldr	r3, [r3, #0]
 8003f6c:	689b      	ldr	r3, [r3, #8]
 8003f6e:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8003f70:	68fb      	ldr	r3, [r7, #12]
 8003f72:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8003f76:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8003f78:	683b      	ldr	r3, [r7, #0]
 8003f7a:	681b      	ldr	r3, [r3, #0]
 8003f7c:	68fa      	ldr	r2, [r7, #12]
 8003f7e:	4313      	orrs	r3, r2
 8003f80:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8003f82:	687b      	ldr	r3, [r7, #4]
 8003f84:	681b      	ldr	r3, [r3, #0]
 8003f86:	68fa      	ldr	r2, [r7, #12]
 8003f88:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8003f8a:	687b      	ldr	r3, [r7, #4]
 8003f8c:	681b      	ldr	r3, [r3, #0]
 8003f8e:	4a16      	ldr	r2, [pc, #88]	; (8003fe8 <HAL_TIMEx_MasterConfigSynchronization+0xb0>)
 8003f90:	4293      	cmp	r3, r2
 8003f92:	d00e      	beq.n	8003fb2 <HAL_TIMEx_MasterConfigSynchronization+0x7a>
 8003f94:	687b      	ldr	r3, [r7, #4]
 8003f96:	681b      	ldr	r3, [r3, #0]
 8003f98:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8003f9c:	d009      	beq.n	8003fb2 <HAL_TIMEx_MasterConfigSynchronization+0x7a>
 8003f9e:	687b      	ldr	r3, [r7, #4]
 8003fa0:	681b      	ldr	r3, [r3, #0]
 8003fa2:	4a12      	ldr	r2, [pc, #72]	; (8003fec <HAL_TIMEx_MasterConfigSynchronization+0xb4>)
 8003fa4:	4293      	cmp	r3, r2
 8003fa6:	d004      	beq.n	8003fb2 <HAL_TIMEx_MasterConfigSynchronization+0x7a>
 8003fa8:	687b      	ldr	r3, [r7, #4]
 8003faa:	681b      	ldr	r3, [r3, #0]
 8003fac:	4a10      	ldr	r2, [pc, #64]	; (8003ff0 <HAL_TIMEx_MasterConfigSynchronization+0xb8>)
 8003fae:	4293      	cmp	r3, r2
 8003fb0:	d10c      	bne.n	8003fcc <HAL_TIMEx_MasterConfigSynchronization+0x94>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 8003fb2:	68bb      	ldr	r3, [r7, #8]
 8003fb4:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8003fb8:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8003fba:	683b      	ldr	r3, [r7, #0]
 8003fbc:	685b      	ldr	r3, [r3, #4]
 8003fbe:	68ba      	ldr	r2, [r7, #8]
 8003fc0:	4313      	orrs	r3, r2
 8003fc2:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8003fc4:	687b      	ldr	r3, [r7, #4]
 8003fc6:	681b      	ldr	r3, [r3, #0]
 8003fc8:	68ba      	ldr	r2, [r7, #8]
 8003fca:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8003fcc:	687b      	ldr	r3, [r7, #4]
 8003fce:	2201      	movs	r2, #1
 8003fd0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8003fd4:	687b      	ldr	r3, [r7, #4]
 8003fd6:	2200      	movs	r2, #0
 8003fd8:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8003fdc:	2300      	movs	r3, #0
}
 8003fde:	4618      	mov	r0, r3
 8003fe0:	3714      	adds	r7, #20
 8003fe2:	46bd      	mov	sp, r7
 8003fe4:	bc80      	pop	{r7}
 8003fe6:	4770      	bx	lr
 8003fe8:	40012c00 	.word	0x40012c00
 8003fec:	40000400 	.word	0x40000400
 8003ff0:	40000800 	.word	0x40000800

08003ff4 <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8003ff4:	b480      	push	{r7}
 8003ff6:	b083      	sub	sp, #12
 8003ff8:	af00      	add	r7, sp, #0
 8003ffa:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8003ffc:	bf00      	nop
 8003ffe:	370c      	adds	r7, #12
 8004000:	46bd      	mov	sp, r7
 8004002:	bc80      	pop	{r7}
 8004004:	4770      	bx	lr

08004006 <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8004006:	b480      	push	{r7}
 8004008:	b083      	sub	sp, #12
 800400a:	af00      	add	r7, sp, #0
 800400c:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 800400e:	bf00      	nop
 8004010:	370c      	adds	r7, #12
 8004012:	46bd      	mov	sp, r7
 8004014:	bc80      	pop	{r7}
 8004016:	4770      	bx	lr

08004018 <USB_CoreInit>:
  * @param  cfg pointer to a USB_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_CoreInit(USB_TypeDef *USBx, USB_CfgTypeDef cfg)
{
 8004018:	b084      	sub	sp, #16
 800401a:	b480      	push	{r7}
 800401c:	b083      	sub	sp, #12
 800401e:	af00      	add	r7, sp, #0
 8004020:	6078      	str	r0, [r7, #4]
 8004022:	f107 0014 	add.w	r0, r7, #20
 8004026:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  /* NOTE : - This function is not required by USB Device FS peripheral, it is used
              only by USB OTG FS peripheral.
            - This function is added to ensure compatibility across platforms.
   */

  return HAL_OK;
 800402a:	2300      	movs	r3, #0
}
 800402c:	4618      	mov	r0, r3
 800402e:	370c      	adds	r7, #12
 8004030:	46bd      	mov	sp, r7
 8004032:	bc80      	pop	{r7}
 8004034:	b004      	add	sp, #16
 8004036:	4770      	bx	lr

08004038 <USB_EnableGlobalInt>:
  *         Enables the controller's Global Int in the AHB Config reg
  * @param  USBx Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EnableGlobalInt(USB_TypeDef *USBx)
{
 8004038:	b480      	push	{r7}
 800403a:	b085      	sub	sp, #20
 800403c:	af00      	add	r7, sp, #0
 800403e:	6078      	str	r0, [r7, #4]
  uint32_t winterruptmask;

  /* Clear pending interrupts */
  USBx->ISTR = 0U;
 8004040:	687b      	ldr	r3, [r7, #4]
 8004042:	2200      	movs	r2, #0
 8004044:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44

  /* Set winterruptmask variable */
  winterruptmask = USB_CNTR_CTRM  | USB_CNTR_WKUPM |
 8004048:	f44f 433f 	mov.w	r3, #48896	; 0xbf00
 800404c:	60fb      	str	r3, [r7, #12]
                   USB_CNTR_SUSPM | USB_CNTR_ERRM |
                   USB_CNTR_SOFM | USB_CNTR_ESOFM |
                   USB_CNTR_RESETM;

  /* Set interrupt mask */
  USBx->CNTR = (uint16_t)winterruptmask;
 800404e:	68fb      	ldr	r3, [r7, #12]
 8004050:	b29a      	uxth	r2, r3
 8004052:	687b      	ldr	r3, [r7, #4]
 8004054:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40

  return HAL_OK;
 8004058:	2300      	movs	r3, #0
}
 800405a:	4618      	mov	r0, r3
 800405c:	3714      	adds	r7, #20
 800405e:	46bd      	mov	sp, r7
 8004060:	bc80      	pop	{r7}
 8004062:	4770      	bx	lr

08004064 <USB_DisableGlobalInt>:
  *         Disable the controller's Global Int in the AHB Config reg
  * @param  USBx Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DisableGlobalInt(USB_TypeDef *USBx)
{
 8004064:	b480      	push	{r7}
 8004066:	b085      	sub	sp, #20
 8004068:	af00      	add	r7, sp, #0
 800406a:	6078      	str	r0, [r7, #4]
  uint32_t winterruptmask;

  /* Set winterruptmask variable */
  winterruptmask = USB_CNTR_CTRM  | USB_CNTR_WKUPM |
 800406c:	f44f 433f 	mov.w	r3, #48896	; 0xbf00
 8004070:	60fb      	str	r3, [r7, #12]
                   USB_CNTR_SUSPM | USB_CNTR_ERRM |
                   USB_CNTR_SOFM | USB_CNTR_ESOFM |
                   USB_CNTR_RESETM;

  /* Clear interrupt mask */
  USBx->CNTR &= (uint16_t)(~winterruptmask);
 8004072:	687b      	ldr	r3, [r7, #4]
 8004074:	f8b3 3040 	ldrh.w	r3, [r3, #64]	; 0x40
 8004078:	b29a      	uxth	r2, r3
 800407a:	68fb      	ldr	r3, [r7, #12]
 800407c:	b29b      	uxth	r3, r3
 800407e:	43db      	mvns	r3, r3
 8004080:	b29b      	uxth	r3, r3
 8004082:	4013      	ands	r3, r2
 8004084:	b29a      	uxth	r2, r3
 8004086:	687b      	ldr	r3, [r7, #4]
 8004088:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40

  return HAL_OK;
 800408c:	2300      	movs	r3, #0
}
 800408e:	4618      	mov	r0, r3
 8004090:	3714      	adds	r7, #20
 8004092:	46bd      	mov	sp, r7
 8004094:	bc80      	pop	{r7}
 8004096:	4770      	bx	lr

08004098 <USB_SetCurrentMode>:
  *          This parameter can be one of the these values:
  *            @arg USB_DEVICE_MODE Peripheral mode
  * @retval HAL status
  */
HAL_StatusTypeDef USB_SetCurrentMode(USB_TypeDef *USBx, USB_ModeTypeDef mode)
{
 8004098:	b480      	push	{r7}
 800409a:	b083      	sub	sp, #12
 800409c:	af00      	add	r7, sp, #0
 800409e:	6078      	str	r0, [r7, #4]
 80040a0:	460b      	mov	r3, r1
 80040a2:	70fb      	strb	r3, [r7, #3]

  /* NOTE : - This function is not required by USB Device FS peripheral, it is used
              only by USB OTG FS peripheral.
            - This function is added to ensure compatibility across platforms.
   */
  return HAL_OK;
 80040a4:	2300      	movs	r3, #0
}
 80040a6:	4618      	mov	r0, r3
 80040a8:	370c      	adds	r7, #12
 80040aa:	46bd      	mov	sp, r7
 80040ac:	bc80      	pop	{r7}
 80040ae:	4770      	bx	lr

080040b0 <USB_DevInit>:
  * @param  cfg  pointer to a USB_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DevInit(USB_TypeDef *USBx, USB_CfgTypeDef cfg)
{
 80040b0:	b084      	sub	sp, #16
 80040b2:	b480      	push	{r7}
 80040b4:	b083      	sub	sp, #12
 80040b6:	af00      	add	r7, sp, #0
 80040b8:	6078      	str	r0, [r7, #4]
 80040ba:	f107 0014 	add.w	r0, r7, #20
 80040be:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  /* Prevent unused argument(s) compilation warning */
  UNUSED(cfg);

  /* Init Device */
  /* CNTR_FRES = 1 */
  USBx->CNTR = (uint16_t)USB_CNTR_FRES;
 80040c2:	687b      	ldr	r3, [r7, #4]
 80040c4:	2201      	movs	r2, #1
 80040c6:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40

  /* CNTR_FRES = 0 */
  USBx->CNTR = 0U;
 80040ca:	687b      	ldr	r3, [r7, #4]
 80040cc:	2200      	movs	r2, #0
 80040ce:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40

  /* Clear pending interrupts */
  USBx->ISTR = 0U;
 80040d2:	687b      	ldr	r3, [r7, #4]
 80040d4:	2200      	movs	r2, #0
 80040d6:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44

  /*Set Btable Address*/
  USBx->BTABLE = BTABLE_ADDRESS;
 80040da:	687b      	ldr	r3, [r7, #4]
 80040dc:	2200      	movs	r2, #0
 80040de:	f8a3 2050 	strh.w	r2, [r3, #80]	; 0x50

  return HAL_OK;
 80040e2:	2300      	movs	r3, #0
}
 80040e4:	4618      	mov	r0, r3
 80040e6:	370c      	adds	r7, #12
 80040e8:	46bd      	mov	sp, r7
 80040ea:	bc80      	pop	{r7}
 80040ec:	b004      	add	sp, #16
 80040ee:	4770      	bx	lr

080040f0 <USB_ActivateEndpoint>:
  * @param  USBx Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_ActivateEndpoint(USB_TypeDef *USBx, USB_EPTypeDef *ep)
{
 80040f0:	b480      	push	{r7}
 80040f2:	b09b      	sub	sp, #108	; 0x6c
 80040f4:	af00      	add	r7, sp, #0
 80040f6:	6078      	str	r0, [r7, #4]
 80040f8:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef ret = HAL_OK;
 80040fa:	2300      	movs	r3, #0
 80040fc:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
  uint16_t wEpRegVal;

  wEpRegVal = PCD_GET_ENDPOINT(USBx, ep->num) & USB_EP_T_MASK;
 8004100:	687a      	ldr	r2, [r7, #4]
 8004102:	683b      	ldr	r3, [r7, #0]
 8004104:	781b      	ldrb	r3, [r3, #0]
 8004106:	009b      	lsls	r3, r3, #2
 8004108:	4413      	add	r3, r2
 800410a:	881b      	ldrh	r3, [r3, #0]
 800410c:	b29b      	uxth	r3, r3
 800410e:	f423 43ec 	bic.w	r3, r3, #30208	; 0x7600
 8004112:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8004116:	f8a7 3064 	strh.w	r3, [r7, #100]	; 0x64

  /* initialize Endpoint */
  switch (ep->type)
 800411a:	683b      	ldr	r3, [r7, #0]
 800411c:	78db      	ldrb	r3, [r3, #3]
 800411e:	2b03      	cmp	r3, #3
 8004120:	d81f      	bhi.n	8004162 <USB_ActivateEndpoint+0x72>
 8004122:	a201      	add	r2, pc, #4	; (adr r2, 8004128 <USB_ActivateEndpoint+0x38>)
 8004124:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004128:	08004139 	.word	0x08004139
 800412c:	08004155 	.word	0x08004155
 8004130:	0800416b 	.word	0x0800416b
 8004134:	08004147 	.word	0x08004147
  {
    case EP_TYPE_CTRL:
      wEpRegVal |= USB_EP_CONTROL;
 8004138:	f8b7 3064 	ldrh.w	r3, [r7, #100]	; 0x64
 800413c:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8004140:	f8a7 3064 	strh.w	r3, [r7, #100]	; 0x64
      break;
 8004144:	e012      	b.n	800416c <USB_ActivateEndpoint+0x7c>
    case EP_TYPE_BULK:
      wEpRegVal |= USB_EP_BULK;
      break;

    case EP_TYPE_INTR:
      wEpRegVal |= USB_EP_INTERRUPT;
 8004146:	f8b7 3064 	ldrh.w	r3, [r7, #100]	; 0x64
 800414a:	f443 63c0 	orr.w	r3, r3, #1536	; 0x600
 800414e:	f8a7 3064 	strh.w	r3, [r7, #100]	; 0x64
      break;
 8004152:	e00b      	b.n	800416c <USB_ActivateEndpoint+0x7c>

    case EP_TYPE_ISOC:
      wEpRegVal |= USB_EP_ISOCHRONOUS;
 8004154:	f8b7 3064 	ldrh.w	r3, [r7, #100]	; 0x64
 8004158:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 800415c:	f8a7 3064 	strh.w	r3, [r7, #100]	; 0x64
      break;
 8004160:	e004      	b.n	800416c <USB_ActivateEndpoint+0x7c>

    default:
      ret = HAL_ERROR;
 8004162:	2301      	movs	r3, #1
 8004164:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
      break;
 8004168:	e000      	b.n	800416c <USB_ActivateEndpoint+0x7c>
      break;
 800416a:	bf00      	nop
  }

  PCD_SET_ENDPOINT(USBx, ep->num, (wEpRegVal | USB_EP_CTR_RX | USB_EP_CTR_TX));
 800416c:	687a      	ldr	r2, [r7, #4]
 800416e:	683b      	ldr	r3, [r7, #0]
 8004170:	781b      	ldrb	r3, [r3, #0]
 8004172:	009b      	lsls	r3, r3, #2
 8004174:	441a      	add	r2, r3
 8004176:	f8b7 3064 	ldrh.w	r3, [r7, #100]	; 0x64
 800417a:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 800417e:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8004182:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8004186:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800418a:	b29b      	uxth	r3, r3
 800418c:	8013      	strh	r3, [r2, #0]

  PCD_SET_EP_ADDRESS(USBx, ep->num, ep->num);
 800418e:	687a      	ldr	r2, [r7, #4]
 8004190:	683b      	ldr	r3, [r7, #0]
 8004192:	781b      	ldrb	r3, [r3, #0]
 8004194:	009b      	lsls	r3, r3, #2
 8004196:	4413      	add	r3, r2
 8004198:	881b      	ldrh	r3, [r3, #0]
 800419a:	b29b      	uxth	r3, r3
 800419c:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80041a0:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80041a4:	b29a      	uxth	r2, r3
 80041a6:	683b      	ldr	r3, [r7, #0]
 80041a8:	781b      	ldrb	r3, [r3, #0]
 80041aa:	b29b      	uxth	r3, r3
 80041ac:	4313      	orrs	r3, r2
 80041ae:	f8a7 305e 	strh.w	r3, [r7, #94]	; 0x5e
 80041b2:	687a      	ldr	r2, [r7, #4]
 80041b4:	683b      	ldr	r3, [r7, #0]
 80041b6:	781b      	ldrb	r3, [r3, #0]
 80041b8:	009b      	lsls	r3, r3, #2
 80041ba:	441a      	add	r2, r3
 80041bc:	f8b7 305e 	ldrh.w	r3, [r7, #94]	; 0x5e
 80041c0:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 80041c4:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 80041c8:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80041cc:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80041d0:	b29b      	uxth	r3, r3
 80041d2:	8013      	strh	r3, [r2, #0]

  if (ep->doublebuffer == 0U)
 80041d4:	683b      	ldr	r3, [r7, #0]
 80041d6:	7b1b      	ldrb	r3, [r3, #12]
 80041d8:	2b00      	cmp	r3, #0
 80041da:	f040 8149 	bne.w	8004470 <USB_ActivateEndpoint+0x380>
  {
    if (ep->is_in != 0U)
 80041de:	683b      	ldr	r3, [r7, #0]
 80041e0:	785b      	ldrb	r3, [r3, #1]
 80041e2:	2b00      	cmp	r3, #0
 80041e4:	f000 8084 	beq.w	80042f0 <USB_ActivateEndpoint+0x200>
    {
      /*Set the endpoint Transmit buffer address */
      PCD_SET_EP_TX_ADDRESS(USBx, ep->num, ep->pmaadress);
 80041e8:	687b      	ldr	r3, [r7, #4]
 80041ea:	617b      	str	r3, [r7, #20]
 80041ec:	687b      	ldr	r3, [r7, #4]
 80041ee:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 80041f2:	b29b      	uxth	r3, r3
 80041f4:	461a      	mov	r2, r3
 80041f6:	697b      	ldr	r3, [r7, #20]
 80041f8:	4413      	add	r3, r2
 80041fa:	617b      	str	r3, [r7, #20]
 80041fc:	683b      	ldr	r3, [r7, #0]
 80041fe:	781b      	ldrb	r3, [r3, #0]
 8004200:	011a      	lsls	r2, r3, #4
 8004202:	697b      	ldr	r3, [r7, #20]
 8004204:	4413      	add	r3, r2
 8004206:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 800420a:	613b      	str	r3, [r7, #16]
 800420c:	683b      	ldr	r3, [r7, #0]
 800420e:	88db      	ldrh	r3, [r3, #6]
 8004210:	085b      	lsrs	r3, r3, #1
 8004212:	b29b      	uxth	r3, r3
 8004214:	005b      	lsls	r3, r3, #1
 8004216:	b29a      	uxth	r2, r3
 8004218:	693b      	ldr	r3, [r7, #16]
 800421a:	801a      	strh	r2, [r3, #0]
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 800421c:	687a      	ldr	r2, [r7, #4]
 800421e:	683b      	ldr	r3, [r7, #0]
 8004220:	781b      	ldrb	r3, [r3, #0]
 8004222:	009b      	lsls	r3, r3, #2
 8004224:	4413      	add	r3, r2
 8004226:	881b      	ldrh	r3, [r3, #0]
 8004228:	81fb      	strh	r3, [r7, #14]
 800422a:	89fb      	ldrh	r3, [r7, #14]
 800422c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004230:	2b00      	cmp	r3, #0
 8004232:	d01b      	beq.n	800426c <USB_ActivateEndpoint+0x17c>
 8004234:	687a      	ldr	r2, [r7, #4]
 8004236:	683b      	ldr	r3, [r7, #0]
 8004238:	781b      	ldrb	r3, [r3, #0]
 800423a:	009b      	lsls	r3, r3, #2
 800423c:	4413      	add	r3, r2
 800423e:	881b      	ldrh	r3, [r3, #0]
 8004240:	b29b      	uxth	r3, r3
 8004242:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8004246:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800424a:	81bb      	strh	r3, [r7, #12]
 800424c:	687a      	ldr	r2, [r7, #4]
 800424e:	683b      	ldr	r3, [r7, #0]
 8004250:	781b      	ldrb	r3, [r3, #0]
 8004252:	009b      	lsls	r3, r3, #2
 8004254:	441a      	add	r2, r3
 8004256:	89bb      	ldrh	r3, [r7, #12]
 8004258:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 800425c:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8004260:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8004264:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 8004268:	b29b      	uxth	r3, r3
 800426a:	8013      	strh	r3, [r2, #0]

      if (ep->type != EP_TYPE_ISOC)
 800426c:	683b      	ldr	r3, [r7, #0]
 800426e:	78db      	ldrb	r3, [r3, #3]
 8004270:	2b01      	cmp	r3, #1
 8004272:	d020      	beq.n	80042b6 <USB_ActivateEndpoint+0x1c6>
      {
        /* Configure NAK status for the Endpoint */
        PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_NAK);
 8004274:	687a      	ldr	r2, [r7, #4]
 8004276:	683b      	ldr	r3, [r7, #0]
 8004278:	781b      	ldrb	r3, [r3, #0]
 800427a:	009b      	lsls	r3, r3, #2
 800427c:	4413      	add	r3, r2
 800427e:	881b      	ldrh	r3, [r3, #0]
 8004280:	b29b      	uxth	r3, r3
 8004282:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8004286:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800428a:	813b      	strh	r3, [r7, #8]
 800428c:	893b      	ldrh	r3, [r7, #8]
 800428e:	f083 0320 	eor.w	r3, r3, #32
 8004292:	813b      	strh	r3, [r7, #8]
 8004294:	687a      	ldr	r2, [r7, #4]
 8004296:	683b      	ldr	r3, [r7, #0]
 8004298:	781b      	ldrb	r3, [r3, #0]
 800429a:	009b      	lsls	r3, r3, #2
 800429c:	441a      	add	r2, r3
 800429e:	893b      	ldrh	r3, [r7, #8]
 80042a0:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 80042a4:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 80042a8:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80042ac:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80042b0:	b29b      	uxth	r3, r3
 80042b2:	8013      	strh	r3, [r2, #0]
 80042b4:	e27f      	b.n	80047b6 <USB_ActivateEndpoint+0x6c6>
      }
      else
      {
        /* Configure TX Endpoint to disabled state */
        PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_DIS);
 80042b6:	687a      	ldr	r2, [r7, #4]
 80042b8:	683b      	ldr	r3, [r7, #0]
 80042ba:	781b      	ldrb	r3, [r3, #0]
 80042bc:	009b      	lsls	r3, r3, #2
 80042be:	4413      	add	r3, r2
 80042c0:	881b      	ldrh	r3, [r3, #0]
 80042c2:	b29b      	uxth	r3, r3
 80042c4:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80042c8:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 80042cc:	817b      	strh	r3, [r7, #10]
 80042ce:	687a      	ldr	r2, [r7, #4]
 80042d0:	683b      	ldr	r3, [r7, #0]
 80042d2:	781b      	ldrb	r3, [r3, #0]
 80042d4:	009b      	lsls	r3, r3, #2
 80042d6:	441a      	add	r2, r3
 80042d8:	897b      	ldrh	r3, [r7, #10]
 80042da:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 80042de:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 80042e2:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80042e6:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80042ea:	b29b      	uxth	r3, r3
 80042ec:	8013      	strh	r3, [r2, #0]
 80042ee:	e262      	b.n	80047b6 <USB_ActivateEndpoint+0x6c6>
      }
    }
    else
    {
      /*Set the endpoint Receive buffer address */
      PCD_SET_EP_RX_ADDRESS(USBx, ep->num, ep->pmaadress);
 80042f0:	687b      	ldr	r3, [r7, #4]
 80042f2:	62fb      	str	r3, [r7, #44]	; 0x2c
 80042f4:	687b      	ldr	r3, [r7, #4]
 80042f6:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 80042fa:	b29b      	uxth	r3, r3
 80042fc:	461a      	mov	r2, r3
 80042fe:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004300:	4413      	add	r3, r2
 8004302:	62fb      	str	r3, [r7, #44]	; 0x2c
 8004304:	683b      	ldr	r3, [r7, #0]
 8004306:	781b      	ldrb	r3, [r3, #0]
 8004308:	011a      	lsls	r2, r3, #4
 800430a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800430c:	4413      	add	r3, r2
 800430e:	f503 6381 	add.w	r3, r3, #1032	; 0x408
 8004312:	62bb      	str	r3, [r7, #40]	; 0x28
 8004314:	683b      	ldr	r3, [r7, #0]
 8004316:	88db      	ldrh	r3, [r3, #6]
 8004318:	085b      	lsrs	r3, r3, #1
 800431a:	b29b      	uxth	r3, r3
 800431c:	005b      	lsls	r3, r3, #1
 800431e:	b29a      	uxth	r2, r3
 8004320:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004322:	801a      	strh	r2, [r3, #0]

      /*Set the endpoint Receive buffer counter*/
      PCD_SET_EP_RX_CNT(USBx, ep->num, ep->maxpacket);
 8004324:	687b      	ldr	r3, [r7, #4]
 8004326:	627b      	str	r3, [r7, #36]	; 0x24
 8004328:	687b      	ldr	r3, [r7, #4]
 800432a:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 800432e:	b29b      	uxth	r3, r3
 8004330:	461a      	mov	r2, r3
 8004332:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004334:	4413      	add	r3, r2
 8004336:	627b      	str	r3, [r7, #36]	; 0x24
 8004338:	683b      	ldr	r3, [r7, #0]
 800433a:	781b      	ldrb	r3, [r3, #0]
 800433c:	011a      	lsls	r2, r3, #4
 800433e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004340:	4413      	add	r3, r2
 8004342:	f203 430c 	addw	r3, r3, #1036	; 0x40c
 8004346:	623b      	str	r3, [r7, #32]
 8004348:	683b      	ldr	r3, [r7, #0]
 800434a:	691b      	ldr	r3, [r3, #16]
 800434c:	2b00      	cmp	r3, #0
 800434e:	d112      	bne.n	8004376 <USB_ActivateEndpoint+0x286>
 8004350:	6a3b      	ldr	r3, [r7, #32]
 8004352:	881b      	ldrh	r3, [r3, #0]
 8004354:	b29b      	uxth	r3, r3
 8004356:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 800435a:	b29a      	uxth	r2, r3
 800435c:	6a3b      	ldr	r3, [r7, #32]
 800435e:	801a      	strh	r2, [r3, #0]
 8004360:	6a3b      	ldr	r3, [r7, #32]
 8004362:	881b      	ldrh	r3, [r3, #0]
 8004364:	b29b      	uxth	r3, r3
 8004366:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800436a:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800436e:	b29a      	uxth	r2, r3
 8004370:	6a3b      	ldr	r3, [r7, #32]
 8004372:	801a      	strh	r2, [r3, #0]
 8004374:	e02f      	b.n	80043d6 <USB_ActivateEndpoint+0x2e6>
 8004376:	683b      	ldr	r3, [r7, #0]
 8004378:	691b      	ldr	r3, [r3, #16]
 800437a:	2b3e      	cmp	r3, #62	; 0x3e
 800437c:	d813      	bhi.n	80043a6 <USB_ActivateEndpoint+0x2b6>
 800437e:	683b      	ldr	r3, [r7, #0]
 8004380:	691b      	ldr	r3, [r3, #16]
 8004382:	085b      	lsrs	r3, r3, #1
 8004384:	663b      	str	r3, [r7, #96]	; 0x60
 8004386:	683b      	ldr	r3, [r7, #0]
 8004388:	691b      	ldr	r3, [r3, #16]
 800438a:	f003 0301 	and.w	r3, r3, #1
 800438e:	2b00      	cmp	r3, #0
 8004390:	d002      	beq.n	8004398 <USB_ActivateEndpoint+0x2a8>
 8004392:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8004394:	3301      	adds	r3, #1
 8004396:	663b      	str	r3, [r7, #96]	; 0x60
 8004398:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 800439a:	b29b      	uxth	r3, r3
 800439c:	029b      	lsls	r3, r3, #10
 800439e:	b29a      	uxth	r2, r3
 80043a0:	6a3b      	ldr	r3, [r7, #32]
 80043a2:	801a      	strh	r2, [r3, #0]
 80043a4:	e017      	b.n	80043d6 <USB_ActivateEndpoint+0x2e6>
 80043a6:	683b      	ldr	r3, [r7, #0]
 80043a8:	691b      	ldr	r3, [r3, #16]
 80043aa:	095b      	lsrs	r3, r3, #5
 80043ac:	663b      	str	r3, [r7, #96]	; 0x60
 80043ae:	683b      	ldr	r3, [r7, #0]
 80043b0:	691b      	ldr	r3, [r3, #16]
 80043b2:	f003 031f 	and.w	r3, r3, #31
 80043b6:	2b00      	cmp	r3, #0
 80043b8:	d102      	bne.n	80043c0 <USB_ActivateEndpoint+0x2d0>
 80043ba:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 80043bc:	3b01      	subs	r3, #1
 80043be:	663b      	str	r3, [r7, #96]	; 0x60
 80043c0:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 80043c2:	b29b      	uxth	r3, r3
 80043c4:	029b      	lsls	r3, r3, #10
 80043c6:	b29b      	uxth	r3, r3
 80043c8:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 80043cc:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 80043d0:	b29a      	uxth	r2, r3
 80043d2:	6a3b      	ldr	r3, [r7, #32]
 80043d4:	801a      	strh	r2, [r3, #0]
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 80043d6:	687a      	ldr	r2, [r7, #4]
 80043d8:	683b      	ldr	r3, [r7, #0]
 80043da:	781b      	ldrb	r3, [r3, #0]
 80043dc:	009b      	lsls	r3, r3, #2
 80043de:	4413      	add	r3, r2
 80043e0:	881b      	ldrh	r3, [r3, #0]
 80043e2:	83fb      	strh	r3, [r7, #30]
 80043e4:	8bfb      	ldrh	r3, [r7, #30]
 80043e6:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80043ea:	2b00      	cmp	r3, #0
 80043ec:	d01b      	beq.n	8004426 <USB_ActivateEndpoint+0x336>
 80043ee:	687a      	ldr	r2, [r7, #4]
 80043f0:	683b      	ldr	r3, [r7, #0]
 80043f2:	781b      	ldrb	r3, [r3, #0]
 80043f4:	009b      	lsls	r3, r3, #2
 80043f6:	4413      	add	r3, r2
 80043f8:	881b      	ldrh	r3, [r3, #0]
 80043fa:	b29b      	uxth	r3, r3
 80043fc:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8004400:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8004404:	83bb      	strh	r3, [r7, #28]
 8004406:	687a      	ldr	r2, [r7, #4]
 8004408:	683b      	ldr	r3, [r7, #0]
 800440a:	781b      	ldrb	r3, [r3, #0]
 800440c:	009b      	lsls	r3, r3, #2
 800440e:	441a      	add	r2, r3
 8004410:	8bbb      	ldrh	r3, [r7, #28]
 8004412:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8004416:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 800441a:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 800441e:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8004422:	b29b      	uxth	r3, r3
 8004424:	8013      	strh	r3, [r2, #0]

      /* Configure VALID status for the Endpoint*/
      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_VALID);
 8004426:	687a      	ldr	r2, [r7, #4]
 8004428:	683b      	ldr	r3, [r7, #0]
 800442a:	781b      	ldrb	r3, [r3, #0]
 800442c:	009b      	lsls	r3, r3, #2
 800442e:	4413      	add	r3, r2
 8004430:	881b      	ldrh	r3, [r3, #0]
 8004432:	b29b      	uxth	r3, r3
 8004434:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8004438:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800443c:	837b      	strh	r3, [r7, #26]
 800443e:	8b7b      	ldrh	r3, [r7, #26]
 8004440:	f483 5380 	eor.w	r3, r3, #4096	; 0x1000
 8004444:	837b      	strh	r3, [r7, #26]
 8004446:	8b7b      	ldrh	r3, [r7, #26]
 8004448:	f483 5300 	eor.w	r3, r3, #8192	; 0x2000
 800444c:	837b      	strh	r3, [r7, #26]
 800444e:	687a      	ldr	r2, [r7, #4]
 8004450:	683b      	ldr	r3, [r7, #0]
 8004452:	781b      	ldrb	r3, [r3, #0]
 8004454:	009b      	lsls	r3, r3, #2
 8004456:	441a      	add	r2, r3
 8004458:	8b7b      	ldrh	r3, [r7, #26]
 800445a:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 800445e:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8004462:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8004466:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800446a:	b29b      	uxth	r3, r3
 800446c:	8013      	strh	r3, [r2, #0]
 800446e:	e1a2      	b.n	80047b6 <USB_ActivateEndpoint+0x6c6>
  }
  /*Double Buffer*/
  else
  {
    /* Set the endpoint as double buffered */
    PCD_SET_EP_DBUF(USBx, ep->num);
 8004470:	687a      	ldr	r2, [r7, #4]
 8004472:	683b      	ldr	r3, [r7, #0]
 8004474:	781b      	ldrb	r3, [r3, #0]
 8004476:	009b      	lsls	r3, r3, #2
 8004478:	4413      	add	r3, r2
 800447a:	881b      	ldrh	r3, [r3, #0]
 800447c:	b29b      	uxth	r3, r3
 800447e:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8004482:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8004486:	f8a7 305c 	strh.w	r3, [r7, #92]	; 0x5c
 800448a:	687a      	ldr	r2, [r7, #4]
 800448c:	683b      	ldr	r3, [r7, #0]
 800448e:	781b      	ldrb	r3, [r3, #0]
 8004490:	009b      	lsls	r3, r3, #2
 8004492:	441a      	add	r2, r3
 8004494:	f8b7 305c 	ldrh.w	r3, [r7, #92]	; 0x5c
 8004498:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 800449c:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 80044a0:	f443 4301 	orr.w	r3, r3, #33024	; 0x8100
 80044a4:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80044a8:	b29b      	uxth	r3, r3
 80044aa:	8013      	strh	r3, [r2, #0]

    /* Set buffer address for double buffered mode */
    PCD_SET_EP_DBUF_ADDR(USBx, ep->num, ep->pmaaddr0, ep->pmaaddr1);
 80044ac:	687b      	ldr	r3, [r7, #4]
 80044ae:	65bb      	str	r3, [r7, #88]	; 0x58
 80044b0:	687b      	ldr	r3, [r7, #4]
 80044b2:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 80044b6:	b29b      	uxth	r3, r3
 80044b8:	461a      	mov	r2, r3
 80044ba:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 80044bc:	4413      	add	r3, r2
 80044be:	65bb      	str	r3, [r7, #88]	; 0x58
 80044c0:	683b      	ldr	r3, [r7, #0]
 80044c2:	781b      	ldrb	r3, [r3, #0]
 80044c4:	011a      	lsls	r2, r3, #4
 80044c6:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 80044c8:	4413      	add	r3, r2
 80044ca:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 80044ce:	657b      	str	r3, [r7, #84]	; 0x54
 80044d0:	683b      	ldr	r3, [r7, #0]
 80044d2:	891b      	ldrh	r3, [r3, #8]
 80044d4:	085b      	lsrs	r3, r3, #1
 80044d6:	b29b      	uxth	r3, r3
 80044d8:	005b      	lsls	r3, r3, #1
 80044da:	b29a      	uxth	r2, r3
 80044dc:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80044de:	801a      	strh	r2, [r3, #0]
 80044e0:	687b      	ldr	r3, [r7, #4]
 80044e2:	653b      	str	r3, [r7, #80]	; 0x50
 80044e4:	687b      	ldr	r3, [r7, #4]
 80044e6:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 80044ea:	b29b      	uxth	r3, r3
 80044ec:	461a      	mov	r2, r3
 80044ee:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80044f0:	4413      	add	r3, r2
 80044f2:	653b      	str	r3, [r7, #80]	; 0x50
 80044f4:	683b      	ldr	r3, [r7, #0]
 80044f6:	781b      	ldrb	r3, [r3, #0]
 80044f8:	011a      	lsls	r2, r3, #4
 80044fa:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80044fc:	4413      	add	r3, r2
 80044fe:	f503 6381 	add.w	r3, r3, #1032	; 0x408
 8004502:	64fb      	str	r3, [r7, #76]	; 0x4c
 8004504:	683b      	ldr	r3, [r7, #0]
 8004506:	895b      	ldrh	r3, [r3, #10]
 8004508:	085b      	lsrs	r3, r3, #1
 800450a:	b29b      	uxth	r3, r3
 800450c:	005b      	lsls	r3, r3, #1
 800450e:	b29a      	uxth	r2, r3
 8004510:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8004512:	801a      	strh	r2, [r3, #0]

    if (ep->is_in == 0U)
 8004514:	683b      	ldr	r3, [r7, #0]
 8004516:	785b      	ldrb	r3, [r3, #1]
 8004518:	2b00      	cmp	r3, #0
 800451a:	f040 8091 	bne.w	8004640 <USB_ActivateEndpoint+0x550>
    {
      /* Clear the data toggle bits for the endpoint IN/OUT */
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 800451e:	687a      	ldr	r2, [r7, #4]
 8004520:	683b      	ldr	r3, [r7, #0]
 8004522:	781b      	ldrb	r3, [r3, #0]
 8004524:	009b      	lsls	r3, r3, #2
 8004526:	4413      	add	r3, r2
 8004528:	881b      	ldrh	r3, [r3, #0]
 800452a:	87bb      	strh	r3, [r7, #60]	; 0x3c
 800452c:	8fbb      	ldrh	r3, [r7, #60]	; 0x3c
 800452e:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8004532:	2b00      	cmp	r3, #0
 8004534:	d01b      	beq.n	800456e <USB_ActivateEndpoint+0x47e>
 8004536:	687a      	ldr	r2, [r7, #4]
 8004538:	683b      	ldr	r3, [r7, #0]
 800453a:	781b      	ldrb	r3, [r3, #0]
 800453c:	009b      	lsls	r3, r3, #2
 800453e:	4413      	add	r3, r2
 8004540:	881b      	ldrh	r3, [r3, #0]
 8004542:	b29b      	uxth	r3, r3
 8004544:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8004548:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800454c:	877b      	strh	r3, [r7, #58]	; 0x3a
 800454e:	687a      	ldr	r2, [r7, #4]
 8004550:	683b      	ldr	r3, [r7, #0]
 8004552:	781b      	ldrb	r3, [r3, #0]
 8004554:	009b      	lsls	r3, r3, #2
 8004556:	441a      	add	r2, r3
 8004558:	8f7b      	ldrh	r3, [r7, #58]	; 0x3a
 800455a:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 800455e:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8004562:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8004566:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800456a:	b29b      	uxth	r3, r3
 800456c:	8013      	strh	r3, [r2, #0]
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 800456e:	687a      	ldr	r2, [r7, #4]
 8004570:	683b      	ldr	r3, [r7, #0]
 8004572:	781b      	ldrb	r3, [r3, #0]
 8004574:	009b      	lsls	r3, r3, #2
 8004576:	4413      	add	r3, r2
 8004578:	881b      	ldrh	r3, [r3, #0]
 800457a:	873b      	strh	r3, [r7, #56]	; 0x38
 800457c:	8f3b      	ldrh	r3, [r7, #56]	; 0x38
 800457e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004582:	2b00      	cmp	r3, #0
 8004584:	d01b      	beq.n	80045be <USB_ActivateEndpoint+0x4ce>
 8004586:	687a      	ldr	r2, [r7, #4]
 8004588:	683b      	ldr	r3, [r7, #0]
 800458a:	781b      	ldrb	r3, [r3, #0]
 800458c:	009b      	lsls	r3, r3, #2
 800458e:	4413      	add	r3, r2
 8004590:	881b      	ldrh	r3, [r3, #0]
 8004592:	b29b      	uxth	r3, r3
 8004594:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8004598:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800459c:	86fb      	strh	r3, [r7, #54]	; 0x36
 800459e:	687a      	ldr	r2, [r7, #4]
 80045a0:	683b      	ldr	r3, [r7, #0]
 80045a2:	781b      	ldrb	r3, [r3, #0]
 80045a4:	009b      	lsls	r3, r3, #2
 80045a6:	441a      	add	r2, r3
 80045a8:	8efb      	ldrh	r3, [r7, #54]	; 0x36
 80045aa:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 80045ae:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 80045b2:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80045b6:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 80045ba:	b29b      	uxth	r3, r3
 80045bc:	8013      	strh	r3, [r2, #0]

      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_VALID);
 80045be:	687a      	ldr	r2, [r7, #4]
 80045c0:	683b      	ldr	r3, [r7, #0]
 80045c2:	781b      	ldrb	r3, [r3, #0]
 80045c4:	009b      	lsls	r3, r3, #2
 80045c6:	4413      	add	r3, r2
 80045c8:	881b      	ldrh	r3, [r3, #0]
 80045ca:	b29b      	uxth	r3, r3
 80045cc:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 80045d0:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80045d4:	86bb      	strh	r3, [r7, #52]	; 0x34
 80045d6:	8ebb      	ldrh	r3, [r7, #52]	; 0x34
 80045d8:	f483 5380 	eor.w	r3, r3, #4096	; 0x1000
 80045dc:	86bb      	strh	r3, [r7, #52]	; 0x34
 80045de:	8ebb      	ldrh	r3, [r7, #52]	; 0x34
 80045e0:	f483 5300 	eor.w	r3, r3, #8192	; 0x2000
 80045e4:	86bb      	strh	r3, [r7, #52]	; 0x34
 80045e6:	687a      	ldr	r2, [r7, #4]
 80045e8:	683b      	ldr	r3, [r7, #0]
 80045ea:	781b      	ldrb	r3, [r3, #0]
 80045ec:	009b      	lsls	r3, r3, #2
 80045ee:	441a      	add	r2, r3
 80045f0:	8ebb      	ldrh	r3, [r7, #52]	; 0x34
 80045f2:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 80045f6:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 80045fa:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80045fe:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8004602:	b29b      	uxth	r3, r3
 8004604:	8013      	strh	r3, [r2, #0]
      PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_DIS);
 8004606:	687a      	ldr	r2, [r7, #4]
 8004608:	683b      	ldr	r3, [r7, #0]
 800460a:	781b      	ldrb	r3, [r3, #0]
 800460c:	009b      	lsls	r3, r3, #2
 800460e:	4413      	add	r3, r2
 8004610:	881b      	ldrh	r3, [r3, #0]
 8004612:	b29b      	uxth	r3, r3
 8004614:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8004618:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800461c:	867b      	strh	r3, [r7, #50]	; 0x32
 800461e:	687a      	ldr	r2, [r7, #4]
 8004620:	683b      	ldr	r3, [r7, #0]
 8004622:	781b      	ldrb	r3, [r3, #0]
 8004624:	009b      	lsls	r3, r3, #2
 8004626:	441a      	add	r2, r3
 8004628:	8e7b      	ldrh	r3, [r7, #50]	; 0x32
 800462a:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 800462e:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8004632:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8004636:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800463a:	b29b      	uxth	r3, r3
 800463c:	8013      	strh	r3, [r2, #0]
 800463e:	e0ba      	b.n	80047b6 <USB_ActivateEndpoint+0x6c6>
    }
    else
    {
      /* Clear the data toggle bits for the endpoint IN/OUT */
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 8004640:	687a      	ldr	r2, [r7, #4]
 8004642:	683b      	ldr	r3, [r7, #0]
 8004644:	781b      	ldrb	r3, [r3, #0]
 8004646:	009b      	lsls	r3, r3, #2
 8004648:	4413      	add	r3, r2
 800464a:	881b      	ldrh	r3, [r3, #0]
 800464c:	f8a7 304a 	strh.w	r3, [r7, #74]	; 0x4a
 8004650:	f8b7 304a 	ldrh.w	r3, [r7, #74]	; 0x4a
 8004654:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8004658:	2b00      	cmp	r3, #0
 800465a:	d01d      	beq.n	8004698 <USB_ActivateEndpoint+0x5a8>
 800465c:	687a      	ldr	r2, [r7, #4]
 800465e:	683b      	ldr	r3, [r7, #0]
 8004660:	781b      	ldrb	r3, [r3, #0]
 8004662:	009b      	lsls	r3, r3, #2
 8004664:	4413      	add	r3, r2
 8004666:	881b      	ldrh	r3, [r3, #0]
 8004668:	b29b      	uxth	r3, r3
 800466a:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800466e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8004672:	f8a7 3048 	strh.w	r3, [r7, #72]	; 0x48
 8004676:	687a      	ldr	r2, [r7, #4]
 8004678:	683b      	ldr	r3, [r7, #0]
 800467a:	781b      	ldrb	r3, [r3, #0]
 800467c:	009b      	lsls	r3, r3, #2
 800467e:	441a      	add	r2, r3
 8004680:	f8b7 3048 	ldrh.w	r3, [r7, #72]	; 0x48
 8004684:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8004688:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 800468c:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8004690:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8004694:	b29b      	uxth	r3, r3
 8004696:	8013      	strh	r3, [r2, #0]
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 8004698:	687a      	ldr	r2, [r7, #4]
 800469a:	683b      	ldr	r3, [r7, #0]
 800469c:	781b      	ldrb	r3, [r3, #0]
 800469e:	009b      	lsls	r3, r3, #2
 80046a0:	4413      	add	r3, r2
 80046a2:	881b      	ldrh	r3, [r3, #0]
 80046a4:	f8a7 3046 	strh.w	r3, [r7, #70]	; 0x46
 80046a8:	f8b7 3046 	ldrh.w	r3, [r7, #70]	; 0x46
 80046ac:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80046b0:	2b00      	cmp	r3, #0
 80046b2:	d01d      	beq.n	80046f0 <USB_ActivateEndpoint+0x600>
 80046b4:	687a      	ldr	r2, [r7, #4]
 80046b6:	683b      	ldr	r3, [r7, #0]
 80046b8:	781b      	ldrb	r3, [r3, #0]
 80046ba:	009b      	lsls	r3, r3, #2
 80046bc:	4413      	add	r3, r2
 80046be:	881b      	ldrh	r3, [r3, #0]
 80046c0:	b29b      	uxth	r3, r3
 80046c2:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80046c6:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80046ca:	f8a7 3044 	strh.w	r3, [r7, #68]	; 0x44
 80046ce:	687a      	ldr	r2, [r7, #4]
 80046d0:	683b      	ldr	r3, [r7, #0]
 80046d2:	781b      	ldrb	r3, [r3, #0]
 80046d4:	009b      	lsls	r3, r3, #2
 80046d6:	441a      	add	r2, r3
 80046d8:	f8b7 3044 	ldrh.w	r3, [r7, #68]	; 0x44
 80046dc:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 80046e0:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 80046e4:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80046e8:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 80046ec:	b29b      	uxth	r3, r3
 80046ee:	8013      	strh	r3, [r2, #0]

      if (ep->type != EP_TYPE_ISOC)
 80046f0:	683b      	ldr	r3, [r7, #0]
 80046f2:	78db      	ldrb	r3, [r3, #3]
 80046f4:	2b01      	cmp	r3, #1
 80046f6:	d024      	beq.n	8004742 <USB_ActivateEndpoint+0x652>
      {
        /* Configure NAK status for the Endpoint */
        PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_NAK);
 80046f8:	687a      	ldr	r2, [r7, #4]
 80046fa:	683b      	ldr	r3, [r7, #0]
 80046fc:	781b      	ldrb	r3, [r3, #0]
 80046fe:	009b      	lsls	r3, r3, #2
 8004700:	4413      	add	r3, r2
 8004702:	881b      	ldrh	r3, [r3, #0]
 8004704:	b29b      	uxth	r3, r3
 8004706:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800470a:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800470e:	f8a7 3040 	strh.w	r3, [r7, #64]	; 0x40
 8004712:	f8b7 3040 	ldrh.w	r3, [r7, #64]	; 0x40
 8004716:	f083 0320 	eor.w	r3, r3, #32
 800471a:	f8a7 3040 	strh.w	r3, [r7, #64]	; 0x40
 800471e:	687a      	ldr	r2, [r7, #4]
 8004720:	683b      	ldr	r3, [r7, #0]
 8004722:	781b      	ldrb	r3, [r3, #0]
 8004724:	009b      	lsls	r3, r3, #2
 8004726:	441a      	add	r2, r3
 8004728:	f8b7 3040 	ldrh.w	r3, [r7, #64]	; 0x40
 800472c:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8004730:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8004734:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8004738:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800473c:	b29b      	uxth	r3, r3
 800473e:	8013      	strh	r3, [r2, #0]
 8004740:	e01d      	b.n	800477e <USB_ActivateEndpoint+0x68e>
      }
      else
      {
        /* Configure TX Endpoint to disabled state */
        PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_DIS);
 8004742:	687a      	ldr	r2, [r7, #4]
 8004744:	683b      	ldr	r3, [r7, #0]
 8004746:	781b      	ldrb	r3, [r3, #0]
 8004748:	009b      	lsls	r3, r3, #2
 800474a:	4413      	add	r3, r2
 800474c:	881b      	ldrh	r3, [r3, #0]
 800474e:	b29b      	uxth	r3, r3
 8004750:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8004754:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8004758:	f8a7 3042 	strh.w	r3, [r7, #66]	; 0x42
 800475c:	687a      	ldr	r2, [r7, #4]
 800475e:	683b      	ldr	r3, [r7, #0]
 8004760:	781b      	ldrb	r3, [r3, #0]
 8004762:	009b      	lsls	r3, r3, #2
 8004764:	441a      	add	r2, r3
 8004766:	f8b7 3042 	ldrh.w	r3, [r7, #66]	; 0x42
 800476a:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 800476e:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8004772:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8004776:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800477a:	b29b      	uxth	r3, r3
 800477c:	8013      	strh	r3, [r2, #0]
      }

      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_DIS);
 800477e:	687a      	ldr	r2, [r7, #4]
 8004780:	683b      	ldr	r3, [r7, #0]
 8004782:	781b      	ldrb	r3, [r3, #0]
 8004784:	009b      	lsls	r3, r3, #2
 8004786:	4413      	add	r3, r2
 8004788:	881b      	ldrh	r3, [r3, #0]
 800478a:	b29b      	uxth	r3, r3
 800478c:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8004790:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8004794:	87fb      	strh	r3, [r7, #62]	; 0x3e
 8004796:	687a      	ldr	r2, [r7, #4]
 8004798:	683b      	ldr	r3, [r7, #0]
 800479a:	781b      	ldrb	r3, [r3, #0]
 800479c:	009b      	lsls	r3, r3, #2
 800479e:	441a      	add	r2, r3
 80047a0:	8ffb      	ldrh	r3, [r7, #62]	; 0x3e
 80047a2:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 80047a6:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 80047aa:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80047ae:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80047b2:	b29b      	uxth	r3, r3
 80047b4:	8013      	strh	r3, [r2, #0]
    }
  }

  return ret;
 80047b6:	f897 3067 	ldrb.w	r3, [r7, #103]	; 0x67
}
 80047ba:	4618      	mov	r0, r3
 80047bc:	376c      	adds	r7, #108	; 0x6c
 80047be:	46bd      	mov	sp, r7
 80047c0:	bc80      	pop	{r7}
 80047c2:	4770      	bx	lr

080047c4 <USB_DeactivateEndpoint>:
  * @param  USBx Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DeactivateEndpoint(USB_TypeDef *USBx, USB_EPTypeDef *ep)
{
 80047c4:	b480      	push	{r7}
 80047c6:	b08d      	sub	sp, #52	; 0x34
 80047c8:	af00      	add	r7, sp, #0
 80047ca:	6078      	str	r0, [r7, #4]
 80047cc:	6039      	str	r1, [r7, #0]
  if (ep->doublebuffer == 0U)
 80047ce:	683b      	ldr	r3, [r7, #0]
 80047d0:	7b1b      	ldrb	r3, [r3, #12]
 80047d2:	2b00      	cmp	r3, #0
 80047d4:	f040 808e 	bne.w	80048f4 <USB_DeactivateEndpoint+0x130>
  {
    if (ep->is_in != 0U)
 80047d8:	683b      	ldr	r3, [r7, #0]
 80047da:	785b      	ldrb	r3, [r3, #1]
 80047dc:	2b00      	cmp	r3, #0
 80047de:	d044      	beq.n	800486a <USB_DeactivateEndpoint+0xa6>
    {
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 80047e0:	687a      	ldr	r2, [r7, #4]
 80047e2:	683b      	ldr	r3, [r7, #0]
 80047e4:	781b      	ldrb	r3, [r3, #0]
 80047e6:	009b      	lsls	r3, r3, #2
 80047e8:	4413      	add	r3, r2
 80047ea:	881b      	ldrh	r3, [r3, #0]
 80047ec:	81bb      	strh	r3, [r7, #12]
 80047ee:	89bb      	ldrh	r3, [r7, #12]
 80047f0:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80047f4:	2b00      	cmp	r3, #0
 80047f6:	d01b      	beq.n	8004830 <USB_DeactivateEndpoint+0x6c>
 80047f8:	687a      	ldr	r2, [r7, #4]
 80047fa:	683b      	ldr	r3, [r7, #0]
 80047fc:	781b      	ldrb	r3, [r3, #0]
 80047fe:	009b      	lsls	r3, r3, #2
 8004800:	4413      	add	r3, r2
 8004802:	881b      	ldrh	r3, [r3, #0]
 8004804:	b29b      	uxth	r3, r3
 8004806:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800480a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800480e:	817b      	strh	r3, [r7, #10]
 8004810:	687a      	ldr	r2, [r7, #4]
 8004812:	683b      	ldr	r3, [r7, #0]
 8004814:	781b      	ldrb	r3, [r3, #0]
 8004816:	009b      	lsls	r3, r3, #2
 8004818:	441a      	add	r2, r3
 800481a:	897b      	ldrh	r3, [r7, #10]
 800481c:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8004820:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8004824:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8004828:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 800482c:	b29b      	uxth	r3, r3
 800482e:	8013      	strh	r3, [r2, #0]

      /* Configure DISABLE status for the Endpoint*/
      PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_DIS);
 8004830:	687a      	ldr	r2, [r7, #4]
 8004832:	683b      	ldr	r3, [r7, #0]
 8004834:	781b      	ldrb	r3, [r3, #0]
 8004836:	009b      	lsls	r3, r3, #2
 8004838:	4413      	add	r3, r2
 800483a:	881b      	ldrh	r3, [r3, #0]
 800483c:	b29b      	uxth	r3, r3
 800483e:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8004842:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8004846:	813b      	strh	r3, [r7, #8]
 8004848:	687a      	ldr	r2, [r7, #4]
 800484a:	683b      	ldr	r3, [r7, #0]
 800484c:	781b      	ldrb	r3, [r3, #0]
 800484e:	009b      	lsls	r3, r3, #2
 8004850:	441a      	add	r2, r3
 8004852:	893b      	ldrh	r3, [r7, #8]
 8004854:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8004858:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 800485c:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8004860:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8004864:	b29b      	uxth	r3, r3
 8004866:	8013      	strh	r3, [r2, #0]
 8004868:	e192      	b.n	8004b90 <USB_DeactivateEndpoint+0x3cc>
    }
    else
    {
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 800486a:	687a      	ldr	r2, [r7, #4]
 800486c:	683b      	ldr	r3, [r7, #0]
 800486e:	781b      	ldrb	r3, [r3, #0]
 8004870:	009b      	lsls	r3, r3, #2
 8004872:	4413      	add	r3, r2
 8004874:	881b      	ldrh	r3, [r3, #0]
 8004876:	827b      	strh	r3, [r7, #18]
 8004878:	8a7b      	ldrh	r3, [r7, #18]
 800487a:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800487e:	2b00      	cmp	r3, #0
 8004880:	d01b      	beq.n	80048ba <USB_DeactivateEndpoint+0xf6>
 8004882:	687a      	ldr	r2, [r7, #4]
 8004884:	683b      	ldr	r3, [r7, #0]
 8004886:	781b      	ldrb	r3, [r3, #0]
 8004888:	009b      	lsls	r3, r3, #2
 800488a:	4413      	add	r3, r2
 800488c:	881b      	ldrh	r3, [r3, #0]
 800488e:	b29b      	uxth	r3, r3
 8004890:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8004894:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8004898:	823b      	strh	r3, [r7, #16]
 800489a:	687a      	ldr	r2, [r7, #4]
 800489c:	683b      	ldr	r3, [r7, #0]
 800489e:	781b      	ldrb	r3, [r3, #0]
 80048a0:	009b      	lsls	r3, r3, #2
 80048a2:	441a      	add	r2, r3
 80048a4:	8a3b      	ldrh	r3, [r7, #16]
 80048a6:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 80048aa:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 80048ae:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 80048b2:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80048b6:	b29b      	uxth	r3, r3
 80048b8:	8013      	strh	r3, [r2, #0]

      /* Configure DISABLE status for the Endpoint*/
      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_DIS);
 80048ba:	687a      	ldr	r2, [r7, #4]
 80048bc:	683b      	ldr	r3, [r7, #0]
 80048be:	781b      	ldrb	r3, [r3, #0]
 80048c0:	009b      	lsls	r3, r3, #2
 80048c2:	4413      	add	r3, r2
 80048c4:	881b      	ldrh	r3, [r3, #0]
 80048c6:	b29b      	uxth	r3, r3
 80048c8:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 80048cc:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80048d0:	81fb      	strh	r3, [r7, #14]
 80048d2:	687a      	ldr	r2, [r7, #4]
 80048d4:	683b      	ldr	r3, [r7, #0]
 80048d6:	781b      	ldrb	r3, [r3, #0]
 80048d8:	009b      	lsls	r3, r3, #2
 80048da:	441a      	add	r2, r3
 80048dc:	89fb      	ldrh	r3, [r7, #14]
 80048de:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 80048e2:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 80048e6:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80048ea:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80048ee:	b29b      	uxth	r3, r3
 80048f0:	8013      	strh	r3, [r2, #0]
 80048f2:	e14d      	b.n	8004b90 <USB_DeactivateEndpoint+0x3cc>
    }
  }
  /*Double Buffer*/
  else
  {
    if (ep->is_in == 0U)
 80048f4:	683b      	ldr	r3, [r7, #0]
 80048f6:	785b      	ldrb	r3, [r3, #1]
 80048f8:	2b00      	cmp	r3, #0
 80048fa:	f040 80a5 	bne.w	8004a48 <USB_DeactivateEndpoint+0x284>
    {
      /* Clear the data toggle bits for the endpoint IN/OUT*/
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 80048fe:	687a      	ldr	r2, [r7, #4]
 8004900:	683b      	ldr	r3, [r7, #0]
 8004902:	781b      	ldrb	r3, [r3, #0]
 8004904:	009b      	lsls	r3, r3, #2
 8004906:	4413      	add	r3, r2
 8004908:	881b      	ldrh	r3, [r3, #0]
 800490a:	843b      	strh	r3, [r7, #32]
 800490c:	8c3b      	ldrh	r3, [r7, #32]
 800490e:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8004912:	2b00      	cmp	r3, #0
 8004914:	d01b      	beq.n	800494e <USB_DeactivateEndpoint+0x18a>
 8004916:	687a      	ldr	r2, [r7, #4]
 8004918:	683b      	ldr	r3, [r7, #0]
 800491a:	781b      	ldrb	r3, [r3, #0]
 800491c:	009b      	lsls	r3, r3, #2
 800491e:	4413      	add	r3, r2
 8004920:	881b      	ldrh	r3, [r3, #0]
 8004922:	b29b      	uxth	r3, r3
 8004924:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8004928:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800492c:	83fb      	strh	r3, [r7, #30]
 800492e:	687a      	ldr	r2, [r7, #4]
 8004930:	683b      	ldr	r3, [r7, #0]
 8004932:	781b      	ldrb	r3, [r3, #0]
 8004934:	009b      	lsls	r3, r3, #2
 8004936:	441a      	add	r2, r3
 8004938:	8bfb      	ldrh	r3, [r7, #30]
 800493a:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 800493e:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8004942:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8004946:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800494a:	b29b      	uxth	r3, r3
 800494c:	8013      	strh	r3, [r2, #0]
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 800494e:	687a      	ldr	r2, [r7, #4]
 8004950:	683b      	ldr	r3, [r7, #0]
 8004952:	781b      	ldrb	r3, [r3, #0]
 8004954:	009b      	lsls	r3, r3, #2
 8004956:	4413      	add	r3, r2
 8004958:	881b      	ldrh	r3, [r3, #0]
 800495a:	83bb      	strh	r3, [r7, #28]
 800495c:	8bbb      	ldrh	r3, [r7, #28]
 800495e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004962:	2b00      	cmp	r3, #0
 8004964:	d01b      	beq.n	800499e <USB_DeactivateEndpoint+0x1da>
 8004966:	687a      	ldr	r2, [r7, #4]
 8004968:	683b      	ldr	r3, [r7, #0]
 800496a:	781b      	ldrb	r3, [r3, #0]
 800496c:	009b      	lsls	r3, r3, #2
 800496e:	4413      	add	r3, r2
 8004970:	881b      	ldrh	r3, [r3, #0]
 8004972:	b29b      	uxth	r3, r3
 8004974:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8004978:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800497c:	837b      	strh	r3, [r7, #26]
 800497e:	687a      	ldr	r2, [r7, #4]
 8004980:	683b      	ldr	r3, [r7, #0]
 8004982:	781b      	ldrb	r3, [r3, #0]
 8004984:	009b      	lsls	r3, r3, #2
 8004986:	441a      	add	r2, r3
 8004988:	8b7b      	ldrh	r3, [r7, #26]
 800498a:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 800498e:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8004992:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8004996:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 800499a:	b29b      	uxth	r3, r3
 800499c:	8013      	strh	r3, [r2, #0]

      /* Reset value of the data toggle bits for the endpoint out*/
      PCD_TX_DTOG(USBx, ep->num);
 800499e:	687a      	ldr	r2, [r7, #4]
 80049a0:	683b      	ldr	r3, [r7, #0]
 80049a2:	781b      	ldrb	r3, [r3, #0]
 80049a4:	009b      	lsls	r3, r3, #2
 80049a6:	4413      	add	r3, r2
 80049a8:	881b      	ldrh	r3, [r3, #0]
 80049aa:	b29b      	uxth	r3, r3
 80049ac:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80049b0:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80049b4:	833b      	strh	r3, [r7, #24]
 80049b6:	687a      	ldr	r2, [r7, #4]
 80049b8:	683b      	ldr	r3, [r7, #0]
 80049ba:	781b      	ldrb	r3, [r3, #0]
 80049bc:	009b      	lsls	r3, r3, #2
 80049be:	441a      	add	r2, r3
 80049c0:	8b3b      	ldrh	r3, [r7, #24]
 80049c2:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 80049c6:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 80049ca:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80049ce:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 80049d2:	b29b      	uxth	r3, r3
 80049d4:	8013      	strh	r3, [r2, #0]

      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_DIS);
 80049d6:	687a      	ldr	r2, [r7, #4]
 80049d8:	683b      	ldr	r3, [r7, #0]
 80049da:	781b      	ldrb	r3, [r3, #0]
 80049dc:	009b      	lsls	r3, r3, #2
 80049de:	4413      	add	r3, r2
 80049e0:	881b      	ldrh	r3, [r3, #0]
 80049e2:	b29b      	uxth	r3, r3
 80049e4:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 80049e8:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80049ec:	82fb      	strh	r3, [r7, #22]
 80049ee:	687a      	ldr	r2, [r7, #4]
 80049f0:	683b      	ldr	r3, [r7, #0]
 80049f2:	781b      	ldrb	r3, [r3, #0]
 80049f4:	009b      	lsls	r3, r3, #2
 80049f6:	441a      	add	r2, r3
 80049f8:	8afb      	ldrh	r3, [r7, #22]
 80049fa:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 80049fe:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8004a02:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8004a06:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8004a0a:	b29b      	uxth	r3, r3
 8004a0c:	8013      	strh	r3, [r2, #0]
      PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_DIS);
 8004a0e:	687a      	ldr	r2, [r7, #4]
 8004a10:	683b      	ldr	r3, [r7, #0]
 8004a12:	781b      	ldrb	r3, [r3, #0]
 8004a14:	009b      	lsls	r3, r3, #2
 8004a16:	4413      	add	r3, r2
 8004a18:	881b      	ldrh	r3, [r3, #0]
 8004a1a:	b29b      	uxth	r3, r3
 8004a1c:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8004a20:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8004a24:	82bb      	strh	r3, [r7, #20]
 8004a26:	687a      	ldr	r2, [r7, #4]
 8004a28:	683b      	ldr	r3, [r7, #0]
 8004a2a:	781b      	ldrb	r3, [r3, #0]
 8004a2c:	009b      	lsls	r3, r3, #2
 8004a2e:	441a      	add	r2, r3
 8004a30:	8abb      	ldrh	r3, [r7, #20]
 8004a32:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8004a36:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8004a3a:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8004a3e:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8004a42:	b29b      	uxth	r3, r3
 8004a44:	8013      	strh	r3, [r2, #0]
 8004a46:	e0a3      	b.n	8004b90 <USB_DeactivateEndpoint+0x3cc>
    }
    else
    {
      /* Clear the data toggle bits for the endpoint IN/OUT*/
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 8004a48:	687a      	ldr	r2, [r7, #4]
 8004a4a:	683b      	ldr	r3, [r7, #0]
 8004a4c:	781b      	ldrb	r3, [r3, #0]
 8004a4e:	009b      	lsls	r3, r3, #2
 8004a50:	4413      	add	r3, r2
 8004a52:	881b      	ldrh	r3, [r3, #0]
 8004a54:	85fb      	strh	r3, [r7, #46]	; 0x2e
 8004a56:	8dfb      	ldrh	r3, [r7, #46]	; 0x2e
 8004a58:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8004a5c:	2b00      	cmp	r3, #0
 8004a5e:	d01b      	beq.n	8004a98 <USB_DeactivateEndpoint+0x2d4>
 8004a60:	687a      	ldr	r2, [r7, #4]
 8004a62:	683b      	ldr	r3, [r7, #0]
 8004a64:	781b      	ldrb	r3, [r3, #0]
 8004a66:	009b      	lsls	r3, r3, #2
 8004a68:	4413      	add	r3, r2
 8004a6a:	881b      	ldrh	r3, [r3, #0]
 8004a6c:	b29b      	uxth	r3, r3
 8004a6e:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8004a72:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8004a76:	85bb      	strh	r3, [r7, #44]	; 0x2c
 8004a78:	687a      	ldr	r2, [r7, #4]
 8004a7a:	683b      	ldr	r3, [r7, #0]
 8004a7c:	781b      	ldrb	r3, [r3, #0]
 8004a7e:	009b      	lsls	r3, r3, #2
 8004a80:	441a      	add	r2, r3
 8004a82:	8dbb      	ldrh	r3, [r7, #44]	; 0x2c
 8004a84:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8004a88:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8004a8c:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8004a90:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8004a94:	b29b      	uxth	r3, r3
 8004a96:	8013      	strh	r3, [r2, #0]
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 8004a98:	687a      	ldr	r2, [r7, #4]
 8004a9a:	683b      	ldr	r3, [r7, #0]
 8004a9c:	781b      	ldrb	r3, [r3, #0]
 8004a9e:	009b      	lsls	r3, r3, #2
 8004aa0:	4413      	add	r3, r2
 8004aa2:	881b      	ldrh	r3, [r3, #0]
 8004aa4:	857b      	strh	r3, [r7, #42]	; 0x2a
 8004aa6:	8d7b      	ldrh	r3, [r7, #42]	; 0x2a
 8004aa8:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004aac:	2b00      	cmp	r3, #0
 8004aae:	d01b      	beq.n	8004ae8 <USB_DeactivateEndpoint+0x324>
 8004ab0:	687a      	ldr	r2, [r7, #4]
 8004ab2:	683b      	ldr	r3, [r7, #0]
 8004ab4:	781b      	ldrb	r3, [r3, #0]
 8004ab6:	009b      	lsls	r3, r3, #2
 8004ab8:	4413      	add	r3, r2
 8004aba:	881b      	ldrh	r3, [r3, #0]
 8004abc:	b29b      	uxth	r3, r3
 8004abe:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8004ac2:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8004ac6:	853b      	strh	r3, [r7, #40]	; 0x28
 8004ac8:	687a      	ldr	r2, [r7, #4]
 8004aca:	683b      	ldr	r3, [r7, #0]
 8004acc:	781b      	ldrb	r3, [r3, #0]
 8004ace:	009b      	lsls	r3, r3, #2
 8004ad0:	441a      	add	r2, r3
 8004ad2:	8d3b      	ldrh	r3, [r7, #40]	; 0x28
 8004ad4:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8004ad8:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8004adc:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8004ae0:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 8004ae4:	b29b      	uxth	r3, r3
 8004ae6:	8013      	strh	r3, [r2, #0]
      PCD_RX_DTOG(USBx, ep->num);
 8004ae8:	687a      	ldr	r2, [r7, #4]
 8004aea:	683b      	ldr	r3, [r7, #0]
 8004aec:	781b      	ldrb	r3, [r3, #0]
 8004aee:	009b      	lsls	r3, r3, #2
 8004af0:	4413      	add	r3, r2
 8004af2:	881b      	ldrh	r3, [r3, #0]
 8004af4:	b29b      	uxth	r3, r3
 8004af6:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8004afa:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8004afe:	84fb      	strh	r3, [r7, #38]	; 0x26
 8004b00:	687a      	ldr	r2, [r7, #4]
 8004b02:	683b      	ldr	r3, [r7, #0]
 8004b04:	781b      	ldrb	r3, [r3, #0]
 8004b06:	009b      	lsls	r3, r3, #2
 8004b08:	441a      	add	r2, r3
 8004b0a:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 8004b0c:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8004b10:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8004b14:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8004b18:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8004b1c:	b29b      	uxth	r3, r3
 8004b1e:	8013      	strh	r3, [r2, #0]

      /* Configure DISABLE status for the Endpoint*/
      PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_DIS);
 8004b20:	687a      	ldr	r2, [r7, #4]
 8004b22:	683b      	ldr	r3, [r7, #0]
 8004b24:	781b      	ldrb	r3, [r3, #0]
 8004b26:	009b      	lsls	r3, r3, #2
 8004b28:	4413      	add	r3, r2
 8004b2a:	881b      	ldrh	r3, [r3, #0]
 8004b2c:	b29b      	uxth	r3, r3
 8004b2e:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8004b32:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8004b36:	84bb      	strh	r3, [r7, #36]	; 0x24
 8004b38:	687a      	ldr	r2, [r7, #4]
 8004b3a:	683b      	ldr	r3, [r7, #0]
 8004b3c:	781b      	ldrb	r3, [r3, #0]
 8004b3e:	009b      	lsls	r3, r3, #2
 8004b40:	441a      	add	r2, r3
 8004b42:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8004b44:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8004b48:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8004b4c:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8004b50:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8004b54:	b29b      	uxth	r3, r3
 8004b56:	8013      	strh	r3, [r2, #0]
      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_DIS);
 8004b58:	687a      	ldr	r2, [r7, #4]
 8004b5a:	683b      	ldr	r3, [r7, #0]
 8004b5c:	781b      	ldrb	r3, [r3, #0]
 8004b5e:	009b      	lsls	r3, r3, #2
 8004b60:	4413      	add	r3, r2
 8004b62:	881b      	ldrh	r3, [r3, #0]
 8004b64:	b29b      	uxth	r3, r3
 8004b66:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8004b6a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8004b6e:	847b      	strh	r3, [r7, #34]	; 0x22
 8004b70:	687a      	ldr	r2, [r7, #4]
 8004b72:	683b      	ldr	r3, [r7, #0]
 8004b74:	781b      	ldrb	r3, [r3, #0]
 8004b76:	009b      	lsls	r3, r3, #2
 8004b78:	441a      	add	r2, r3
 8004b7a:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 8004b7c:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8004b80:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8004b84:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8004b88:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8004b8c:	b29b      	uxth	r3, r3
 8004b8e:	8013      	strh	r3, [r2, #0]
    }
  }

  return HAL_OK;
 8004b90:	2300      	movs	r3, #0
}
 8004b92:	4618      	mov	r0, r3
 8004b94:	3734      	adds	r7, #52	; 0x34
 8004b96:	46bd      	mov	sp, r7
 8004b98:	bc80      	pop	{r7}
 8004b9a:	4770      	bx	lr

08004b9c <USB_EPStartXfer>:
  * @param  USBx Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPStartXfer(USB_TypeDef *USBx, USB_EPTypeDef *ep)
{
 8004b9c:	b580      	push	{r7, lr}
 8004b9e:	b0c4      	sub	sp, #272	; 0x110
 8004ba0:	af00      	add	r7, sp, #0
 8004ba2:	1d3b      	adds	r3, r7, #4
 8004ba4:	6018      	str	r0, [r3, #0]
 8004ba6:	463b      	mov	r3, r7
 8004ba8:	6019      	str	r1, [r3, #0]
  uint32_t len;
  uint16_t pmabuffer;
  uint16_t wEPVal;

  /* IN endpoint */
  if (ep->is_in == 1U)
 8004baa:	463b      	mov	r3, r7
 8004bac:	681b      	ldr	r3, [r3, #0]
 8004bae:	785b      	ldrb	r3, [r3, #1]
 8004bb0:	2b01      	cmp	r3, #1
 8004bb2:	f040 8557 	bne.w	8005664 <USB_EPStartXfer+0xac8>
  {
    /*Multi packet transfer*/
    if (ep->xfer_len > ep->maxpacket)
 8004bb6:	463b      	mov	r3, r7
 8004bb8:	681b      	ldr	r3, [r3, #0]
 8004bba:	699a      	ldr	r2, [r3, #24]
 8004bbc:	463b      	mov	r3, r7
 8004bbe:	681b      	ldr	r3, [r3, #0]
 8004bc0:	691b      	ldr	r3, [r3, #16]
 8004bc2:	429a      	cmp	r2, r3
 8004bc4:	d905      	bls.n	8004bd2 <USB_EPStartXfer+0x36>
    {
      len = ep->maxpacket;
 8004bc6:	463b      	mov	r3, r7
 8004bc8:	681b      	ldr	r3, [r3, #0]
 8004bca:	691b      	ldr	r3, [r3, #16]
 8004bcc:	f8c7 310c 	str.w	r3, [r7, #268]	; 0x10c
 8004bd0:	e004      	b.n	8004bdc <USB_EPStartXfer+0x40>
    }
    else
    {
      len = ep->xfer_len;
 8004bd2:	463b      	mov	r3, r7
 8004bd4:	681b      	ldr	r3, [r3, #0]
 8004bd6:	699b      	ldr	r3, [r3, #24]
 8004bd8:	f8c7 310c 	str.w	r3, [r7, #268]	; 0x10c
    }

    /* configure and validate Tx endpoint */
    if (ep->doublebuffer == 0U)
 8004bdc:	463b      	mov	r3, r7
 8004bde:	681b      	ldr	r3, [r3, #0]
 8004be0:	7b1b      	ldrb	r3, [r3, #12]
 8004be2:	2b00      	cmp	r3, #0
 8004be4:	d12c      	bne.n	8004c40 <USB_EPStartXfer+0xa4>
    {
      USB_WritePMA(USBx, ep->xfer_buff, ep->pmaadress, (uint16_t)len);
 8004be6:	463b      	mov	r3, r7
 8004be8:	681b      	ldr	r3, [r3, #0]
 8004bea:	6959      	ldr	r1, [r3, #20]
 8004bec:	463b      	mov	r3, r7
 8004bee:	681b      	ldr	r3, [r3, #0]
 8004bf0:	88da      	ldrh	r2, [r3, #6]
 8004bf2:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8004bf6:	b29b      	uxth	r3, r3
 8004bf8:	1d38      	adds	r0, r7, #4
 8004bfa:	6800      	ldr	r0, [r0, #0]
 8004bfc:	f001 fa2c 	bl	8006058 <USB_WritePMA>
      PCD_SET_EP_TX_CNT(USBx, ep->num, len);
 8004c00:	1d3b      	adds	r3, r7, #4
 8004c02:	681b      	ldr	r3, [r3, #0]
 8004c04:	617b      	str	r3, [r7, #20]
 8004c06:	1d3b      	adds	r3, r7, #4
 8004c08:	681b      	ldr	r3, [r3, #0]
 8004c0a:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8004c0e:	b29b      	uxth	r3, r3
 8004c10:	461a      	mov	r2, r3
 8004c12:	697b      	ldr	r3, [r7, #20]
 8004c14:	4413      	add	r3, r2
 8004c16:	617b      	str	r3, [r7, #20]
 8004c18:	463b      	mov	r3, r7
 8004c1a:	681b      	ldr	r3, [r3, #0]
 8004c1c:	781b      	ldrb	r3, [r3, #0]
 8004c1e:	011a      	lsls	r2, r3, #4
 8004c20:	697b      	ldr	r3, [r7, #20]
 8004c22:	4413      	add	r3, r2
 8004c24:	f203 4204 	addw	r2, r3, #1028	; 0x404
 8004c28:	f107 0310 	add.w	r3, r7, #16
 8004c2c:	601a      	str	r2, [r3, #0]
 8004c2e:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8004c32:	b29a      	uxth	r2, r3
 8004c34:	f107 0310 	add.w	r3, r7, #16
 8004c38:	681b      	ldr	r3, [r3, #0]
 8004c3a:	801a      	strh	r2, [r3, #0]
 8004c3c:	f000 bcdd 	b.w	80055fa <USB_EPStartXfer+0xa5e>
    }
    else
    {
      /* double buffer bulk management */
      if (ep->type == EP_TYPE_BULK)
 8004c40:	463b      	mov	r3, r7
 8004c42:	681b      	ldr	r3, [r3, #0]
 8004c44:	78db      	ldrb	r3, [r3, #3]
 8004c46:	2b02      	cmp	r3, #2
 8004c48:	f040 8347 	bne.w	80052da <USB_EPStartXfer+0x73e>
      {
        if (ep->xfer_len_db > ep->maxpacket)
 8004c4c:	463b      	mov	r3, r7
 8004c4e:	681b      	ldr	r3, [r3, #0]
 8004c50:	6a1a      	ldr	r2, [r3, #32]
 8004c52:	463b      	mov	r3, r7
 8004c54:	681b      	ldr	r3, [r3, #0]
 8004c56:	691b      	ldr	r3, [r3, #16]
 8004c58:	429a      	cmp	r2, r3
 8004c5a:	f240 82eb 	bls.w	8005234 <USB_EPStartXfer+0x698>
        {
          /* enable double buffer */
          PCD_SET_EP_DBUF(USBx, ep->num);
 8004c5e:	1d3b      	adds	r3, r7, #4
 8004c60:	681a      	ldr	r2, [r3, #0]
 8004c62:	463b      	mov	r3, r7
 8004c64:	681b      	ldr	r3, [r3, #0]
 8004c66:	781b      	ldrb	r3, [r3, #0]
 8004c68:	009b      	lsls	r3, r3, #2
 8004c6a:	4413      	add	r3, r2
 8004c6c:	881b      	ldrh	r3, [r3, #0]
 8004c6e:	b29b      	uxth	r3, r3
 8004c70:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8004c74:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8004c78:	f8a7 305a 	strh.w	r3, [r7, #90]	; 0x5a
 8004c7c:	1d3b      	adds	r3, r7, #4
 8004c7e:	681a      	ldr	r2, [r3, #0]
 8004c80:	463b      	mov	r3, r7
 8004c82:	681b      	ldr	r3, [r3, #0]
 8004c84:	781b      	ldrb	r3, [r3, #0]
 8004c86:	009b      	lsls	r3, r3, #2
 8004c88:	441a      	add	r2, r3
 8004c8a:	f8b7 305a 	ldrh.w	r3, [r7, #90]	; 0x5a
 8004c8e:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8004c92:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8004c96:	f443 4301 	orr.w	r3, r3, #33024	; 0x8100
 8004c9a:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8004c9e:	b29b      	uxth	r3, r3
 8004ca0:	8013      	strh	r3, [r2, #0]

          /* each Time to write in PMA xfer_len_db will */
          ep->xfer_len_db -= len;
 8004ca2:	463b      	mov	r3, r7
 8004ca4:	681b      	ldr	r3, [r3, #0]
 8004ca6:	6a1a      	ldr	r2, [r3, #32]
 8004ca8:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8004cac:	1ad2      	subs	r2, r2, r3
 8004cae:	463b      	mov	r3, r7
 8004cb0:	681b      	ldr	r3, [r3, #0]
 8004cb2:	621a      	str	r2, [r3, #32]

          /* Fill the two first buffer in the Buffer0 & Buffer1 */
          if ((PCD_GET_ENDPOINT(USBx, ep->num) & USB_EP_DTOG_TX) != 0U)
 8004cb4:	1d3b      	adds	r3, r7, #4
 8004cb6:	681a      	ldr	r2, [r3, #0]
 8004cb8:	463b      	mov	r3, r7
 8004cba:	681b      	ldr	r3, [r3, #0]
 8004cbc:	781b      	ldrb	r3, [r3, #0]
 8004cbe:	009b      	lsls	r3, r3, #2
 8004cc0:	4413      	add	r3, r2
 8004cc2:	881b      	ldrh	r3, [r3, #0]
 8004cc4:	b29b      	uxth	r3, r3
 8004cc6:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004cca:	2b00      	cmp	r3, #0
 8004ccc:	f000 8159 	beq.w	8004f82 <USB_EPStartXfer+0x3e6>
          {
            /* Set the Double buffer counter for pmabuffer1 */
            PCD_SET_EP_DBUF1_CNT(USBx, ep->num, ep->is_in, len);
 8004cd0:	1d3b      	adds	r3, r7, #4
 8004cd2:	681b      	ldr	r3, [r3, #0]
 8004cd4:	637b      	str	r3, [r7, #52]	; 0x34
 8004cd6:	463b      	mov	r3, r7
 8004cd8:	681b      	ldr	r3, [r3, #0]
 8004cda:	785b      	ldrb	r3, [r3, #1]
 8004cdc:	2b00      	cmp	r3, #0
 8004cde:	d164      	bne.n	8004daa <USB_EPStartXfer+0x20e>
 8004ce0:	1d3b      	adds	r3, r7, #4
 8004ce2:	681b      	ldr	r3, [r3, #0]
 8004ce4:	62fb      	str	r3, [r7, #44]	; 0x2c
 8004ce6:	1d3b      	adds	r3, r7, #4
 8004ce8:	681b      	ldr	r3, [r3, #0]
 8004cea:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8004cee:	b29b      	uxth	r3, r3
 8004cf0:	461a      	mov	r2, r3
 8004cf2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004cf4:	4413      	add	r3, r2
 8004cf6:	62fb      	str	r3, [r7, #44]	; 0x2c
 8004cf8:	463b      	mov	r3, r7
 8004cfa:	681b      	ldr	r3, [r3, #0]
 8004cfc:	781b      	ldrb	r3, [r3, #0]
 8004cfe:	011a      	lsls	r2, r3, #4
 8004d00:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004d02:	4413      	add	r3, r2
 8004d04:	f203 430c 	addw	r3, r3, #1036	; 0x40c
 8004d08:	62bb      	str	r3, [r7, #40]	; 0x28
 8004d0a:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8004d0e:	2b00      	cmp	r3, #0
 8004d10:	d112      	bne.n	8004d38 <USB_EPStartXfer+0x19c>
 8004d12:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004d14:	881b      	ldrh	r3, [r3, #0]
 8004d16:	b29b      	uxth	r3, r3
 8004d18:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 8004d1c:	b29a      	uxth	r2, r3
 8004d1e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004d20:	801a      	strh	r2, [r3, #0]
 8004d22:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004d24:	881b      	ldrh	r3, [r3, #0]
 8004d26:	b29b      	uxth	r3, r3
 8004d28:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8004d2c:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8004d30:	b29a      	uxth	r2, r3
 8004d32:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004d34:	801a      	strh	r2, [r3, #0]
 8004d36:	e054      	b.n	8004de2 <USB_EPStartXfer+0x246>
 8004d38:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8004d3c:	2b3e      	cmp	r3, #62	; 0x3e
 8004d3e:	d817      	bhi.n	8004d70 <USB_EPStartXfer+0x1d4>
 8004d40:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8004d44:	085b      	lsrs	r3, r3, #1
 8004d46:	f8c7 3104 	str.w	r3, [r7, #260]	; 0x104
 8004d4a:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8004d4e:	f003 0301 	and.w	r3, r3, #1
 8004d52:	2b00      	cmp	r3, #0
 8004d54:	d004      	beq.n	8004d60 <USB_EPStartXfer+0x1c4>
 8004d56:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8004d5a:	3301      	adds	r3, #1
 8004d5c:	f8c7 3104 	str.w	r3, [r7, #260]	; 0x104
 8004d60:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8004d64:	b29b      	uxth	r3, r3
 8004d66:	029b      	lsls	r3, r3, #10
 8004d68:	b29a      	uxth	r2, r3
 8004d6a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004d6c:	801a      	strh	r2, [r3, #0]
 8004d6e:	e038      	b.n	8004de2 <USB_EPStartXfer+0x246>
 8004d70:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8004d74:	095b      	lsrs	r3, r3, #5
 8004d76:	f8c7 3104 	str.w	r3, [r7, #260]	; 0x104
 8004d7a:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8004d7e:	f003 031f 	and.w	r3, r3, #31
 8004d82:	2b00      	cmp	r3, #0
 8004d84:	d104      	bne.n	8004d90 <USB_EPStartXfer+0x1f4>
 8004d86:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8004d8a:	3b01      	subs	r3, #1
 8004d8c:	f8c7 3104 	str.w	r3, [r7, #260]	; 0x104
 8004d90:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8004d94:	b29b      	uxth	r3, r3
 8004d96:	029b      	lsls	r3, r3, #10
 8004d98:	b29b      	uxth	r3, r3
 8004d9a:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8004d9e:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8004da2:	b29a      	uxth	r2, r3
 8004da4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004da6:	801a      	strh	r2, [r3, #0]
 8004da8:	e01b      	b.n	8004de2 <USB_EPStartXfer+0x246>
 8004daa:	463b      	mov	r3, r7
 8004dac:	681b      	ldr	r3, [r3, #0]
 8004dae:	785b      	ldrb	r3, [r3, #1]
 8004db0:	2b01      	cmp	r3, #1
 8004db2:	d116      	bne.n	8004de2 <USB_EPStartXfer+0x246>
 8004db4:	1d3b      	adds	r3, r7, #4
 8004db6:	681b      	ldr	r3, [r3, #0]
 8004db8:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8004dbc:	b29b      	uxth	r3, r3
 8004dbe:	461a      	mov	r2, r3
 8004dc0:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8004dc2:	4413      	add	r3, r2
 8004dc4:	637b      	str	r3, [r7, #52]	; 0x34
 8004dc6:	463b      	mov	r3, r7
 8004dc8:	681b      	ldr	r3, [r3, #0]
 8004dca:	781b      	ldrb	r3, [r3, #0]
 8004dcc:	011a      	lsls	r2, r3, #4
 8004dce:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8004dd0:	4413      	add	r3, r2
 8004dd2:	f203 430c 	addw	r3, r3, #1036	; 0x40c
 8004dd6:	633b      	str	r3, [r7, #48]	; 0x30
 8004dd8:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8004ddc:	b29a      	uxth	r2, r3
 8004dde:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004de0:	801a      	strh	r2, [r3, #0]
            pmabuffer = ep->pmaaddr1;
 8004de2:	463b      	mov	r3, r7
 8004de4:	681b      	ldr	r3, [r3, #0]
 8004de6:	895b      	ldrh	r3, [r3, #10]
 8004de8:	f8a7 310a 	strh.w	r3, [r7, #266]	; 0x10a

            /* Write the user buffer to USB PMA */
            USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 8004dec:	463b      	mov	r3, r7
 8004dee:	681b      	ldr	r3, [r3, #0]
 8004df0:	6959      	ldr	r1, [r3, #20]
 8004df2:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8004df6:	b29b      	uxth	r3, r3
 8004df8:	f8b7 210a 	ldrh.w	r2, [r7, #266]	; 0x10a
 8004dfc:	1d38      	adds	r0, r7, #4
 8004dfe:	6800      	ldr	r0, [r0, #0]
 8004e00:	f001 f92a 	bl	8006058 <USB_WritePMA>
            ep->xfer_buff += len;
 8004e04:	463b      	mov	r3, r7
 8004e06:	681b      	ldr	r3, [r3, #0]
 8004e08:	695a      	ldr	r2, [r3, #20]
 8004e0a:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8004e0e:	441a      	add	r2, r3
 8004e10:	463b      	mov	r3, r7
 8004e12:	681b      	ldr	r3, [r3, #0]
 8004e14:	615a      	str	r2, [r3, #20]

            if (ep->xfer_len_db > ep->maxpacket)
 8004e16:	463b      	mov	r3, r7
 8004e18:	681b      	ldr	r3, [r3, #0]
 8004e1a:	6a1a      	ldr	r2, [r3, #32]
 8004e1c:	463b      	mov	r3, r7
 8004e1e:	681b      	ldr	r3, [r3, #0]
 8004e20:	691b      	ldr	r3, [r3, #16]
 8004e22:	429a      	cmp	r2, r3
 8004e24:	d909      	bls.n	8004e3a <USB_EPStartXfer+0x29e>
            {
              ep->xfer_len_db -= len;
 8004e26:	463b      	mov	r3, r7
 8004e28:	681b      	ldr	r3, [r3, #0]
 8004e2a:	6a1a      	ldr	r2, [r3, #32]
 8004e2c:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8004e30:	1ad2      	subs	r2, r2, r3
 8004e32:	463b      	mov	r3, r7
 8004e34:	681b      	ldr	r3, [r3, #0]
 8004e36:	621a      	str	r2, [r3, #32]
 8004e38:	e008      	b.n	8004e4c <USB_EPStartXfer+0x2b0>
            }
            else
            {
              len = ep->xfer_len_db;
 8004e3a:	463b      	mov	r3, r7
 8004e3c:	681b      	ldr	r3, [r3, #0]
 8004e3e:	6a1b      	ldr	r3, [r3, #32]
 8004e40:	f8c7 310c 	str.w	r3, [r7, #268]	; 0x10c
              ep->xfer_len_db = 0U;
 8004e44:	463b      	mov	r3, r7
 8004e46:	681b      	ldr	r3, [r3, #0]
 8004e48:	2200      	movs	r2, #0
 8004e4a:	621a      	str	r2, [r3, #32]
            }

            /* Set the Double buffer counter for pmabuffer0 */
            PCD_SET_EP_DBUF0_CNT(USBx, ep->num, ep->is_in, len);
 8004e4c:	463b      	mov	r3, r7
 8004e4e:	681b      	ldr	r3, [r3, #0]
 8004e50:	785b      	ldrb	r3, [r3, #1]
 8004e52:	2b00      	cmp	r3, #0
 8004e54:	d164      	bne.n	8004f20 <USB_EPStartXfer+0x384>
 8004e56:	1d3b      	adds	r3, r7, #4
 8004e58:	681b      	ldr	r3, [r3, #0]
 8004e5a:	61fb      	str	r3, [r7, #28]
 8004e5c:	1d3b      	adds	r3, r7, #4
 8004e5e:	681b      	ldr	r3, [r3, #0]
 8004e60:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8004e64:	b29b      	uxth	r3, r3
 8004e66:	461a      	mov	r2, r3
 8004e68:	69fb      	ldr	r3, [r7, #28]
 8004e6a:	4413      	add	r3, r2
 8004e6c:	61fb      	str	r3, [r7, #28]
 8004e6e:	463b      	mov	r3, r7
 8004e70:	681b      	ldr	r3, [r3, #0]
 8004e72:	781b      	ldrb	r3, [r3, #0]
 8004e74:	011a      	lsls	r2, r3, #4
 8004e76:	69fb      	ldr	r3, [r7, #28]
 8004e78:	4413      	add	r3, r2
 8004e7a:	f203 4304 	addw	r3, r3, #1028	; 0x404
 8004e7e:	61bb      	str	r3, [r7, #24]
 8004e80:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8004e84:	2b00      	cmp	r3, #0
 8004e86:	d112      	bne.n	8004eae <USB_EPStartXfer+0x312>
 8004e88:	69bb      	ldr	r3, [r7, #24]
 8004e8a:	881b      	ldrh	r3, [r3, #0]
 8004e8c:	b29b      	uxth	r3, r3
 8004e8e:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 8004e92:	b29a      	uxth	r2, r3
 8004e94:	69bb      	ldr	r3, [r7, #24]
 8004e96:	801a      	strh	r2, [r3, #0]
 8004e98:	69bb      	ldr	r3, [r7, #24]
 8004e9a:	881b      	ldrh	r3, [r3, #0]
 8004e9c:	b29b      	uxth	r3, r3
 8004e9e:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8004ea2:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8004ea6:	b29a      	uxth	r2, r3
 8004ea8:	69bb      	ldr	r3, [r7, #24]
 8004eaa:	801a      	strh	r2, [r3, #0]
 8004eac:	e057      	b.n	8004f5e <USB_EPStartXfer+0x3c2>
 8004eae:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8004eb2:	2b3e      	cmp	r3, #62	; 0x3e
 8004eb4:	d817      	bhi.n	8004ee6 <USB_EPStartXfer+0x34a>
 8004eb6:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8004eba:	085b      	lsrs	r3, r3, #1
 8004ebc:	f8c7 3100 	str.w	r3, [r7, #256]	; 0x100
 8004ec0:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8004ec4:	f003 0301 	and.w	r3, r3, #1
 8004ec8:	2b00      	cmp	r3, #0
 8004eca:	d004      	beq.n	8004ed6 <USB_EPStartXfer+0x33a>
 8004ecc:	f8d7 3100 	ldr.w	r3, [r7, #256]	; 0x100
 8004ed0:	3301      	adds	r3, #1
 8004ed2:	f8c7 3100 	str.w	r3, [r7, #256]	; 0x100
 8004ed6:	f8d7 3100 	ldr.w	r3, [r7, #256]	; 0x100
 8004eda:	b29b      	uxth	r3, r3
 8004edc:	029b      	lsls	r3, r3, #10
 8004ede:	b29a      	uxth	r2, r3
 8004ee0:	69bb      	ldr	r3, [r7, #24]
 8004ee2:	801a      	strh	r2, [r3, #0]
 8004ee4:	e03b      	b.n	8004f5e <USB_EPStartXfer+0x3c2>
 8004ee6:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8004eea:	095b      	lsrs	r3, r3, #5
 8004eec:	f8c7 3100 	str.w	r3, [r7, #256]	; 0x100
 8004ef0:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8004ef4:	f003 031f 	and.w	r3, r3, #31
 8004ef8:	2b00      	cmp	r3, #0
 8004efa:	d104      	bne.n	8004f06 <USB_EPStartXfer+0x36a>
 8004efc:	f8d7 3100 	ldr.w	r3, [r7, #256]	; 0x100
 8004f00:	3b01      	subs	r3, #1
 8004f02:	f8c7 3100 	str.w	r3, [r7, #256]	; 0x100
 8004f06:	f8d7 3100 	ldr.w	r3, [r7, #256]	; 0x100
 8004f0a:	b29b      	uxth	r3, r3
 8004f0c:	029b      	lsls	r3, r3, #10
 8004f0e:	b29b      	uxth	r3, r3
 8004f10:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8004f14:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8004f18:	b29a      	uxth	r2, r3
 8004f1a:	69bb      	ldr	r3, [r7, #24]
 8004f1c:	801a      	strh	r2, [r3, #0]
 8004f1e:	e01e      	b.n	8004f5e <USB_EPStartXfer+0x3c2>
 8004f20:	463b      	mov	r3, r7
 8004f22:	681b      	ldr	r3, [r3, #0]
 8004f24:	785b      	ldrb	r3, [r3, #1]
 8004f26:	2b01      	cmp	r3, #1
 8004f28:	d119      	bne.n	8004f5e <USB_EPStartXfer+0x3c2>
 8004f2a:	1d3b      	adds	r3, r7, #4
 8004f2c:	681b      	ldr	r3, [r3, #0]
 8004f2e:	627b      	str	r3, [r7, #36]	; 0x24
 8004f30:	1d3b      	adds	r3, r7, #4
 8004f32:	681b      	ldr	r3, [r3, #0]
 8004f34:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8004f38:	b29b      	uxth	r3, r3
 8004f3a:	461a      	mov	r2, r3
 8004f3c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004f3e:	4413      	add	r3, r2
 8004f40:	627b      	str	r3, [r7, #36]	; 0x24
 8004f42:	463b      	mov	r3, r7
 8004f44:	681b      	ldr	r3, [r3, #0]
 8004f46:	781b      	ldrb	r3, [r3, #0]
 8004f48:	011a      	lsls	r2, r3, #4
 8004f4a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004f4c:	4413      	add	r3, r2
 8004f4e:	f203 4304 	addw	r3, r3, #1028	; 0x404
 8004f52:	623b      	str	r3, [r7, #32]
 8004f54:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8004f58:	b29a      	uxth	r2, r3
 8004f5a:	6a3b      	ldr	r3, [r7, #32]
 8004f5c:	801a      	strh	r2, [r3, #0]
            pmabuffer = ep->pmaaddr0;
 8004f5e:	463b      	mov	r3, r7
 8004f60:	681b      	ldr	r3, [r3, #0]
 8004f62:	891b      	ldrh	r3, [r3, #8]
 8004f64:	f8a7 310a 	strh.w	r3, [r7, #266]	; 0x10a

            /* Write the user buffer to USB PMA */
            USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 8004f68:	463b      	mov	r3, r7
 8004f6a:	681b      	ldr	r3, [r3, #0]
 8004f6c:	6959      	ldr	r1, [r3, #20]
 8004f6e:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8004f72:	b29b      	uxth	r3, r3
 8004f74:	f8b7 210a 	ldrh.w	r2, [r7, #266]	; 0x10a
 8004f78:	1d38      	adds	r0, r7, #4
 8004f7a:	6800      	ldr	r0, [r0, #0]
 8004f7c:	f001 f86c 	bl	8006058 <USB_WritePMA>
 8004f80:	e33b      	b.n	80055fa <USB_EPStartXfer+0xa5e>
          }
          else
          {
            /* Set the Double buffer counter for pmabuffer0 */
            PCD_SET_EP_DBUF0_CNT(USBx, ep->num, ep->is_in, len);
 8004f82:	463b      	mov	r3, r7
 8004f84:	681b      	ldr	r3, [r3, #0]
 8004f86:	785b      	ldrb	r3, [r3, #1]
 8004f88:	2b00      	cmp	r3, #0
 8004f8a:	d164      	bne.n	8005056 <USB_EPStartXfer+0x4ba>
 8004f8c:	1d3b      	adds	r3, r7, #4
 8004f8e:	681b      	ldr	r3, [r3, #0]
 8004f90:	64fb      	str	r3, [r7, #76]	; 0x4c
 8004f92:	1d3b      	adds	r3, r7, #4
 8004f94:	681b      	ldr	r3, [r3, #0]
 8004f96:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8004f9a:	b29b      	uxth	r3, r3
 8004f9c:	461a      	mov	r2, r3
 8004f9e:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8004fa0:	4413      	add	r3, r2
 8004fa2:	64fb      	str	r3, [r7, #76]	; 0x4c
 8004fa4:	463b      	mov	r3, r7
 8004fa6:	681b      	ldr	r3, [r3, #0]
 8004fa8:	781b      	ldrb	r3, [r3, #0]
 8004faa:	011a      	lsls	r2, r3, #4
 8004fac:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8004fae:	4413      	add	r3, r2
 8004fb0:	f203 4304 	addw	r3, r3, #1028	; 0x404
 8004fb4:	64bb      	str	r3, [r7, #72]	; 0x48
 8004fb6:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8004fba:	2b00      	cmp	r3, #0
 8004fbc:	d112      	bne.n	8004fe4 <USB_EPStartXfer+0x448>
 8004fbe:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8004fc0:	881b      	ldrh	r3, [r3, #0]
 8004fc2:	b29b      	uxth	r3, r3
 8004fc4:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 8004fc8:	b29a      	uxth	r2, r3
 8004fca:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8004fcc:	801a      	strh	r2, [r3, #0]
 8004fce:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8004fd0:	881b      	ldrh	r3, [r3, #0]
 8004fd2:	b29b      	uxth	r3, r3
 8004fd4:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8004fd8:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8004fdc:	b29a      	uxth	r2, r3
 8004fde:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8004fe0:	801a      	strh	r2, [r3, #0]
 8004fe2:	e057      	b.n	8005094 <USB_EPStartXfer+0x4f8>
 8004fe4:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8004fe8:	2b3e      	cmp	r3, #62	; 0x3e
 8004fea:	d817      	bhi.n	800501c <USB_EPStartXfer+0x480>
 8004fec:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8004ff0:	085b      	lsrs	r3, r3, #1
 8004ff2:	f8c7 30fc 	str.w	r3, [r7, #252]	; 0xfc
 8004ff6:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8004ffa:	f003 0301 	and.w	r3, r3, #1
 8004ffe:	2b00      	cmp	r3, #0
 8005000:	d004      	beq.n	800500c <USB_EPStartXfer+0x470>
 8005002:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8005006:	3301      	adds	r3, #1
 8005008:	f8c7 30fc 	str.w	r3, [r7, #252]	; 0xfc
 800500c:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8005010:	b29b      	uxth	r3, r3
 8005012:	029b      	lsls	r3, r3, #10
 8005014:	b29a      	uxth	r2, r3
 8005016:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8005018:	801a      	strh	r2, [r3, #0]
 800501a:	e03b      	b.n	8005094 <USB_EPStartXfer+0x4f8>
 800501c:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8005020:	095b      	lsrs	r3, r3, #5
 8005022:	f8c7 30fc 	str.w	r3, [r7, #252]	; 0xfc
 8005026:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 800502a:	f003 031f 	and.w	r3, r3, #31
 800502e:	2b00      	cmp	r3, #0
 8005030:	d104      	bne.n	800503c <USB_EPStartXfer+0x4a0>
 8005032:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8005036:	3b01      	subs	r3, #1
 8005038:	f8c7 30fc 	str.w	r3, [r7, #252]	; 0xfc
 800503c:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8005040:	b29b      	uxth	r3, r3
 8005042:	029b      	lsls	r3, r3, #10
 8005044:	b29b      	uxth	r3, r3
 8005046:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800504a:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800504e:	b29a      	uxth	r2, r3
 8005050:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8005052:	801a      	strh	r2, [r3, #0]
 8005054:	e01e      	b.n	8005094 <USB_EPStartXfer+0x4f8>
 8005056:	463b      	mov	r3, r7
 8005058:	681b      	ldr	r3, [r3, #0]
 800505a:	785b      	ldrb	r3, [r3, #1]
 800505c:	2b01      	cmp	r3, #1
 800505e:	d119      	bne.n	8005094 <USB_EPStartXfer+0x4f8>
 8005060:	1d3b      	adds	r3, r7, #4
 8005062:	681b      	ldr	r3, [r3, #0]
 8005064:	657b      	str	r3, [r7, #84]	; 0x54
 8005066:	1d3b      	adds	r3, r7, #4
 8005068:	681b      	ldr	r3, [r3, #0]
 800506a:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 800506e:	b29b      	uxth	r3, r3
 8005070:	461a      	mov	r2, r3
 8005072:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8005074:	4413      	add	r3, r2
 8005076:	657b      	str	r3, [r7, #84]	; 0x54
 8005078:	463b      	mov	r3, r7
 800507a:	681b      	ldr	r3, [r3, #0]
 800507c:	781b      	ldrb	r3, [r3, #0]
 800507e:	011a      	lsls	r2, r3, #4
 8005080:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8005082:	4413      	add	r3, r2
 8005084:	f203 4304 	addw	r3, r3, #1028	; 0x404
 8005088:	653b      	str	r3, [r7, #80]	; 0x50
 800508a:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 800508e:	b29a      	uxth	r2, r3
 8005090:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8005092:	801a      	strh	r2, [r3, #0]
            pmabuffer = ep->pmaaddr0;
 8005094:	463b      	mov	r3, r7
 8005096:	681b      	ldr	r3, [r3, #0]
 8005098:	891b      	ldrh	r3, [r3, #8]
 800509a:	f8a7 310a 	strh.w	r3, [r7, #266]	; 0x10a

            /* Write the user buffer to USB PMA */
            USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 800509e:	463b      	mov	r3, r7
 80050a0:	681b      	ldr	r3, [r3, #0]
 80050a2:	6959      	ldr	r1, [r3, #20]
 80050a4:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 80050a8:	b29b      	uxth	r3, r3
 80050aa:	f8b7 210a 	ldrh.w	r2, [r7, #266]	; 0x10a
 80050ae:	1d38      	adds	r0, r7, #4
 80050b0:	6800      	ldr	r0, [r0, #0]
 80050b2:	f000 ffd1 	bl	8006058 <USB_WritePMA>
            ep->xfer_buff += len;
 80050b6:	463b      	mov	r3, r7
 80050b8:	681b      	ldr	r3, [r3, #0]
 80050ba:	695a      	ldr	r2, [r3, #20]
 80050bc:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 80050c0:	441a      	add	r2, r3
 80050c2:	463b      	mov	r3, r7
 80050c4:	681b      	ldr	r3, [r3, #0]
 80050c6:	615a      	str	r2, [r3, #20]

            if (ep->xfer_len_db > ep->maxpacket)
 80050c8:	463b      	mov	r3, r7
 80050ca:	681b      	ldr	r3, [r3, #0]
 80050cc:	6a1a      	ldr	r2, [r3, #32]
 80050ce:	463b      	mov	r3, r7
 80050d0:	681b      	ldr	r3, [r3, #0]
 80050d2:	691b      	ldr	r3, [r3, #16]
 80050d4:	429a      	cmp	r2, r3
 80050d6:	d909      	bls.n	80050ec <USB_EPStartXfer+0x550>
            {
              ep->xfer_len_db -= len;
 80050d8:	463b      	mov	r3, r7
 80050da:	681b      	ldr	r3, [r3, #0]
 80050dc:	6a1a      	ldr	r2, [r3, #32]
 80050de:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 80050e2:	1ad2      	subs	r2, r2, r3
 80050e4:	463b      	mov	r3, r7
 80050e6:	681b      	ldr	r3, [r3, #0]
 80050e8:	621a      	str	r2, [r3, #32]
 80050ea:	e008      	b.n	80050fe <USB_EPStartXfer+0x562>
            }
            else
            {
              len = ep->xfer_len_db;
 80050ec:	463b      	mov	r3, r7
 80050ee:	681b      	ldr	r3, [r3, #0]
 80050f0:	6a1b      	ldr	r3, [r3, #32]
 80050f2:	f8c7 310c 	str.w	r3, [r7, #268]	; 0x10c
              ep->xfer_len_db = 0U;
 80050f6:	463b      	mov	r3, r7
 80050f8:	681b      	ldr	r3, [r3, #0]
 80050fa:	2200      	movs	r2, #0
 80050fc:	621a      	str	r2, [r3, #32]
            }

            /* Set the Double buffer counter for pmabuffer1 */
            PCD_SET_EP_DBUF1_CNT(USBx, ep->num, ep->is_in, len);
 80050fe:	1d3b      	adds	r3, r7, #4
 8005100:	681b      	ldr	r3, [r3, #0]
 8005102:	647b      	str	r3, [r7, #68]	; 0x44
 8005104:	463b      	mov	r3, r7
 8005106:	681b      	ldr	r3, [r3, #0]
 8005108:	785b      	ldrb	r3, [r3, #1]
 800510a:	2b00      	cmp	r3, #0
 800510c:	d164      	bne.n	80051d8 <USB_EPStartXfer+0x63c>
 800510e:	1d3b      	adds	r3, r7, #4
 8005110:	681b      	ldr	r3, [r3, #0]
 8005112:	63fb      	str	r3, [r7, #60]	; 0x3c
 8005114:	1d3b      	adds	r3, r7, #4
 8005116:	681b      	ldr	r3, [r3, #0]
 8005118:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 800511c:	b29b      	uxth	r3, r3
 800511e:	461a      	mov	r2, r3
 8005120:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8005122:	4413      	add	r3, r2
 8005124:	63fb      	str	r3, [r7, #60]	; 0x3c
 8005126:	463b      	mov	r3, r7
 8005128:	681b      	ldr	r3, [r3, #0]
 800512a:	781b      	ldrb	r3, [r3, #0]
 800512c:	011a      	lsls	r2, r3, #4
 800512e:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8005130:	4413      	add	r3, r2
 8005132:	f203 430c 	addw	r3, r3, #1036	; 0x40c
 8005136:	63bb      	str	r3, [r7, #56]	; 0x38
 8005138:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 800513c:	2b00      	cmp	r3, #0
 800513e:	d112      	bne.n	8005166 <USB_EPStartXfer+0x5ca>
 8005140:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005142:	881b      	ldrh	r3, [r3, #0]
 8005144:	b29b      	uxth	r3, r3
 8005146:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 800514a:	b29a      	uxth	r2, r3
 800514c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800514e:	801a      	strh	r2, [r3, #0]
 8005150:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005152:	881b      	ldrh	r3, [r3, #0]
 8005154:	b29b      	uxth	r3, r3
 8005156:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800515a:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800515e:	b29a      	uxth	r2, r3
 8005160:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005162:	801a      	strh	r2, [r3, #0]
 8005164:	e054      	b.n	8005210 <USB_EPStartXfer+0x674>
 8005166:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 800516a:	2b3e      	cmp	r3, #62	; 0x3e
 800516c:	d817      	bhi.n	800519e <USB_EPStartXfer+0x602>
 800516e:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8005172:	085b      	lsrs	r3, r3, #1
 8005174:	f8c7 30f8 	str.w	r3, [r7, #248]	; 0xf8
 8005178:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 800517c:	f003 0301 	and.w	r3, r3, #1
 8005180:	2b00      	cmp	r3, #0
 8005182:	d004      	beq.n	800518e <USB_EPStartXfer+0x5f2>
 8005184:	f8d7 30f8 	ldr.w	r3, [r7, #248]	; 0xf8
 8005188:	3301      	adds	r3, #1
 800518a:	f8c7 30f8 	str.w	r3, [r7, #248]	; 0xf8
 800518e:	f8d7 30f8 	ldr.w	r3, [r7, #248]	; 0xf8
 8005192:	b29b      	uxth	r3, r3
 8005194:	029b      	lsls	r3, r3, #10
 8005196:	b29a      	uxth	r2, r3
 8005198:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800519a:	801a      	strh	r2, [r3, #0]
 800519c:	e038      	b.n	8005210 <USB_EPStartXfer+0x674>
 800519e:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 80051a2:	095b      	lsrs	r3, r3, #5
 80051a4:	f8c7 30f8 	str.w	r3, [r7, #248]	; 0xf8
 80051a8:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 80051ac:	f003 031f 	and.w	r3, r3, #31
 80051b0:	2b00      	cmp	r3, #0
 80051b2:	d104      	bne.n	80051be <USB_EPStartXfer+0x622>
 80051b4:	f8d7 30f8 	ldr.w	r3, [r7, #248]	; 0xf8
 80051b8:	3b01      	subs	r3, #1
 80051ba:	f8c7 30f8 	str.w	r3, [r7, #248]	; 0xf8
 80051be:	f8d7 30f8 	ldr.w	r3, [r7, #248]	; 0xf8
 80051c2:	b29b      	uxth	r3, r3
 80051c4:	029b      	lsls	r3, r3, #10
 80051c6:	b29b      	uxth	r3, r3
 80051c8:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 80051cc:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 80051d0:	b29a      	uxth	r2, r3
 80051d2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80051d4:	801a      	strh	r2, [r3, #0]
 80051d6:	e01b      	b.n	8005210 <USB_EPStartXfer+0x674>
 80051d8:	463b      	mov	r3, r7
 80051da:	681b      	ldr	r3, [r3, #0]
 80051dc:	785b      	ldrb	r3, [r3, #1]
 80051de:	2b01      	cmp	r3, #1
 80051e0:	d116      	bne.n	8005210 <USB_EPStartXfer+0x674>
 80051e2:	1d3b      	adds	r3, r7, #4
 80051e4:	681b      	ldr	r3, [r3, #0]
 80051e6:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 80051ea:	b29b      	uxth	r3, r3
 80051ec:	461a      	mov	r2, r3
 80051ee:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80051f0:	4413      	add	r3, r2
 80051f2:	647b      	str	r3, [r7, #68]	; 0x44
 80051f4:	463b      	mov	r3, r7
 80051f6:	681b      	ldr	r3, [r3, #0]
 80051f8:	781b      	ldrb	r3, [r3, #0]
 80051fa:	011a      	lsls	r2, r3, #4
 80051fc:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80051fe:	4413      	add	r3, r2
 8005200:	f203 430c 	addw	r3, r3, #1036	; 0x40c
 8005204:	643b      	str	r3, [r7, #64]	; 0x40
 8005206:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 800520a:	b29a      	uxth	r2, r3
 800520c:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800520e:	801a      	strh	r2, [r3, #0]
            pmabuffer = ep->pmaaddr1;
 8005210:	463b      	mov	r3, r7
 8005212:	681b      	ldr	r3, [r3, #0]
 8005214:	895b      	ldrh	r3, [r3, #10]
 8005216:	f8a7 310a 	strh.w	r3, [r7, #266]	; 0x10a

            /* Write the user buffer to USB PMA */
            USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 800521a:	463b      	mov	r3, r7
 800521c:	681b      	ldr	r3, [r3, #0]
 800521e:	6959      	ldr	r1, [r3, #20]
 8005220:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8005224:	b29b      	uxth	r3, r3
 8005226:	f8b7 210a 	ldrh.w	r2, [r7, #266]	; 0x10a
 800522a:	1d38      	adds	r0, r7, #4
 800522c:	6800      	ldr	r0, [r0, #0]
 800522e:	f000 ff13 	bl	8006058 <USB_WritePMA>
 8005232:	e1e2      	b.n	80055fa <USB_EPStartXfer+0xa5e>
          }
        }
        /* auto Switch to single buffer mode when transfer <Mps no need to manage in double buffer */
        else
        {
          len = ep->xfer_len_db;
 8005234:	463b      	mov	r3, r7
 8005236:	681b      	ldr	r3, [r3, #0]
 8005238:	6a1b      	ldr	r3, [r3, #32]
 800523a:	f8c7 310c 	str.w	r3, [r7, #268]	; 0x10c

          /* disable double buffer mode */
          PCD_CLEAR_EP_DBUF(USBx, ep->num);
 800523e:	1d3b      	adds	r3, r7, #4
 8005240:	681a      	ldr	r2, [r3, #0]
 8005242:	463b      	mov	r3, r7
 8005244:	681b      	ldr	r3, [r3, #0]
 8005246:	781b      	ldrb	r3, [r3, #0]
 8005248:	009b      	lsls	r3, r3, #2
 800524a:	4413      	add	r3, r2
 800524c:	881b      	ldrh	r3, [r3, #0]
 800524e:	b29b      	uxth	r3, r3
 8005250:	f423 43e2 	bic.w	r3, r3, #28928	; 0x7100
 8005254:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8005258:	f8a7 3066 	strh.w	r3, [r7, #102]	; 0x66
 800525c:	1d3b      	adds	r3, r7, #4
 800525e:	681a      	ldr	r2, [r3, #0]
 8005260:	463b      	mov	r3, r7
 8005262:	681b      	ldr	r3, [r3, #0]
 8005264:	781b      	ldrb	r3, [r3, #0]
 8005266:	009b      	lsls	r3, r3, #2
 8005268:	441a      	add	r2, r3
 800526a:	f8b7 3066 	ldrh.w	r3, [r7, #102]	; 0x66
 800526e:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8005272:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8005276:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800527a:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800527e:	b29b      	uxth	r3, r3
 8005280:	8013      	strh	r3, [r2, #0]

          /* Set Tx count with nbre of byte to be transmitted */
          PCD_SET_EP_TX_CNT(USBx, ep->num, len);
 8005282:	1d3b      	adds	r3, r7, #4
 8005284:	681b      	ldr	r3, [r3, #0]
 8005286:	663b      	str	r3, [r7, #96]	; 0x60
 8005288:	1d3b      	adds	r3, r7, #4
 800528a:	681b      	ldr	r3, [r3, #0]
 800528c:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8005290:	b29b      	uxth	r3, r3
 8005292:	461a      	mov	r2, r3
 8005294:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8005296:	4413      	add	r3, r2
 8005298:	663b      	str	r3, [r7, #96]	; 0x60
 800529a:	463b      	mov	r3, r7
 800529c:	681b      	ldr	r3, [r3, #0]
 800529e:	781b      	ldrb	r3, [r3, #0]
 80052a0:	011a      	lsls	r2, r3, #4
 80052a2:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 80052a4:	4413      	add	r3, r2
 80052a6:	f203 4304 	addw	r3, r3, #1028	; 0x404
 80052aa:	65fb      	str	r3, [r7, #92]	; 0x5c
 80052ac:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 80052b0:	b29a      	uxth	r2, r3
 80052b2:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 80052b4:	801a      	strh	r2, [r3, #0]
          pmabuffer = ep->pmaaddr0;
 80052b6:	463b      	mov	r3, r7
 80052b8:	681b      	ldr	r3, [r3, #0]
 80052ba:	891b      	ldrh	r3, [r3, #8]
 80052bc:	f8a7 310a 	strh.w	r3, [r7, #266]	; 0x10a

          /* Write the user buffer to USB PMA */
          USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 80052c0:	463b      	mov	r3, r7
 80052c2:	681b      	ldr	r3, [r3, #0]
 80052c4:	6959      	ldr	r1, [r3, #20]
 80052c6:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 80052ca:	b29b      	uxth	r3, r3
 80052cc:	f8b7 210a 	ldrh.w	r2, [r7, #266]	; 0x10a
 80052d0:	1d38      	adds	r0, r7, #4
 80052d2:	6800      	ldr	r0, [r0, #0]
 80052d4:	f000 fec0 	bl	8006058 <USB_WritePMA>
 80052d8:	e18f      	b.n	80055fa <USB_EPStartXfer+0xa5e>

      /* manage isochronous double buffer IN mode */
      else
      {
        /* Write the data to the USB endpoint */
        if ((PCD_GET_ENDPOINT(USBx, ep->num) & USB_EP_DTOG_TX) != 0U)
 80052da:	1d3b      	adds	r3, r7, #4
 80052dc:	681a      	ldr	r2, [r3, #0]
 80052de:	463b      	mov	r3, r7
 80052e0:	681b      	ldr	r3, [r3, #0]
 80052e2:	781b      	ldrb	r3, [r3, #0]
 80052e4:	009b      	lsls	r3, r3, #2
 80052e6:	4413      	add	r3, r2
 80052e8:	881b      	ldrh	r3, [r3, #0]
 80052ea:	b29b      	uxth	r3, r3
 80052ec:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80052f0:	2b00      	cmp	r3, #0
 80052f2:	f000 808f 	beq.w	8005414 <USB_EPStartXfer+0x878>
        {
          /* Set the Double buffer counter for pmabuffer1 */
          PCD_SET_EP_DBUF1_CNT(USBx, ep->num, ep->is_in, len);
 80052f6:	1d3b      	adds	r3, r7, #4
 80052f8:	681b      	ldr	r3, [r3, #0]
 80052fa:	67bb      	str	r3, [r7, #120]	; 0x78
 80052fc:	463b      	mov	r3, r7
 80052fe:	681b      	ldr	r3, [r3, #0]
 8005300:	785b      	ldrb	r3, [r3, #1]
 8005302:	2b00      	cmp	r3, #0
 8005304:	d164      	bne.n	80053d0 <USB_EPStartXfer+0x834>
 8005306:	1d3b      	adds	r3, r7, #4
 8005308:	681b      	ldr	r3, [r3, #0]
 800530a:	673b      	str	r3, [r7, #112]	; 0x70
 800530c:	1d3b      	adds	r3, r7, #4
 800530e:	681b      	ldr	r3, [r3, #0]
 8005310:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8005314:	b29b      	uxth	r3, r3
 8005316:	461a      	mov	r2, r3
 8005318:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 800531a:	4413      	add	r3, r2
 800531c:	673b      	str	r3, [r7, #112]	; 0x70
 800531e:	463b      	mov	r3, r7
 8005320:	681b      	ldr	r3, [r3, #0]
 8005322:	781b      	ldrb	r3, [r3, #0]
 8005324:	011a      	lsls	r2, r3, #4
 8005326:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8005328:	4413      	add	r3, r2
 800532a:	f203 430c 	addw	r3, r3, #1036	; 0x40c
 800532e:	66fb      	str	r3, [r7, #108]	; 0x6c
 8005330:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8005334:	2b00      	cmp	r3, #0
 8005336:	d112      	bne.n	800535e <USB_EPStartXfer+0x7c2>
 8005338:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800533a:	881b      	ldrh	r3, [r3, #0]
 800533c:	b29b      	uxth	r3, r3
 800533e:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 8005342:	b29a      	uxth	r2, r3
 8005344:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8005346:	801a      	strh	r2, [r3, #0]
 8005348:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800534a:	881b      	ldrh	r3, [r3, #0]
 800534c:	b29b      	uxth	r3, r3
 800534e:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8005352:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8005356:	b29a      	uxth	r2, r3
 8005358:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800535a:	801a      	strh	r2, [r3, #0]
 800535c:	e054      	b.n	8005408 <USB_EPStartXfer+0x86c>
 800535e:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8005362:	2b3e      	cmp	r3, #62	; 0x3e
 8005364:	d817      	bhi.n	8005396 <USB_EPStartXfer+0x7fa>
 8005366:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 800536a:	085b      	lsrs	r3, r3, #1
 800536c:	f8c7 30f4 	str.w	r3, [r7, #244]	; 0xf4
 8005370:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8005374:	f003 0301 	and.w	r3, r3, #1
 8005378:	2b00      	cmp	r3, #0
 800537a:	d004      	beq.n	8005386 <USB_EPStartXfer+0x7ea>
 800537c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8005380:	3301      	adds	r3, #1
 8005382:	f8c7 30f4 	str.w	r3, [r7, #244]	; 0xf4
 8005386:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800538a:	b29b      	uxth	r3, r3
 800538c:	029b      	lsls	r3, r3, #10
 800538e:	b29a      	uxth	r2, r3
 8005390:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8005392:	801a      	strh	r2, [r3, #0]
 8005394:	e038      	b.n	8005408 <USB_EPStartXfer+0x86c>
 8005396:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 800539a:	095b      	lsrs	r3, r3, #5
 800539c:	f8c7 30f4 	str.w	r3, [r7, #244]	; 0xf4
 80053a0:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 80053a4:	f003 031f 	and.w	r3, r3, #31
 80053a8:	2b00      	cmp	r3, #0
 80053aa:	d104      	bne.n	80053b6 <USB_EPStartXfer+0x81a>
 80053ac:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80053b0:	3b01      	subs	r3, #1
 80053b2:	f8c7 30f4 	str.w	r3, [r7, #244]	; 0xf4
 80053b6:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80053ba:	b29b      	uxth	r3, r3
 80053bc:	029b      	lsls	r3, r3, #10
 80053be:	b29b      	uxth	r3, r3
 80053c0:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 80053c4:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 80053c8:	b29a      	uxth	r2, r3
 80053ca:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80053cc:	801a      	strh	r2, [r3, #0]
 80053ce:	e01b      	b.n	8005408 <USB_EPStartXfer+0x86c>
 80053d0:	463b      	mov	r3, r7
 80053d2:	681b      	ldr	r3, [r3, #0]
 80053d4:	785b      	ldrb	r3, [r3, #1]
 80053d6:	2b01      	cmp	r3, #1
 80053d8:	d116      	bne.n	8005408 <USB_EPStartXfer+0x86c>
 80053da:	1d3b      	adds	r3, r7, #4
 80053dc:	681b      	ldr	r3, [r3, #0]
 80053de:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 80053e2:	b29b      	uxth	r3, r3
 80053e4:	461a      	mov	r2, r3
 80053e6:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 80053e8:	4413      	add	r3, r2
 80053ea:	67bb      	str	r3, [r7, #120]	; 0x78
 80053ec:	463b      	mov	r3, r7
 80053ee:	681b      	ldr	r3, [r3, #0]
 80053f0:	781b      	ldrb	r3, [r3, #0]
 80053f2:	011a      	lsls	r2, r3, #4
 80053f4:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 80053f6:	4413      	add	r3, r2
 80053f8:	f203 430c 	addw	r3, r3, #1036	; 0x40c
 80053fc:	677b      	str	r3, [r7, #116]	; 0x74
 80053fe:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8005402:	b29a      	uxth	r2, r3
 8005404:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8005406:	801a      	strh	r2, [r3, #0]
          pmabuffer = ep->pmaaddr1;
 8005408:	463b      	mov	r3, r7
 800540a:	681b      	ldr	r3, [r3, #0]
 800540c:	895b      	ldrh	r3, [r3, #10]
 800540e:	f8a7 310a 	strh.w	r3, [r7, #266]	; 0x10a
 8005412:	e097      	b.n	8005544 <USB_EPStartXfer+0x9a8>
        }
        else
        {
          /* Set the Double buffer counter for pmabuffer0 */
          PCD_SET_EP_DBUF0_CNT(USBx, ep->num, ep->is_in, len);
 8005414:	463b      	mov	r3, r7
 8005416:	681b      	ldr	r3, [r3, #0]
 8005418:	785b      	ldrb	r3, [r3, #1]
 800541a:	2b00      	cmp	r3, #0
 800541c:	d168      	bne.n	80054f0 <USB_EPStartXfer+0x954>
 800541e:	1d3b      	adds	r3, r7, #4
 8005420:	681b      	ldr	r3, [r3, #0]
 8005422:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 8005426:	1d3b      	adds	r3, r7, #4
 8005428:	681b      	ldr	r3, [r3, #0]
 800542a:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 800542e:	b29b      	uxth	r3, r3
 8005430:	461a      	mov	r2, r3
 8005432:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 8005436:	4413      	add	r3, r2
 8005438:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 800543c:	463b      	mov	r3, r7
 800543e:	681b      	ldr	r3, [r3, #0]
 8005440:	781b      	ldrb	r3, [r3, #0]
 8005442:	011a      	lsls	r2, r3, #4
 8005444:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 8005448:	4413      	add	r3, r2
 800544a:	f203 4304 	addw	r3, r3, #1028	; 0x404
 800544e:	67fb      	str	r3, [r7, #124]	; 0x7c
 8005450:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8005454:	2b00      	cmp	r3, #0
 8005456:	d112      	bne.n	800547e <USB_EPStartXfer+0x8e2>
 8005458:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 800545a:	881b      	ldrh	r3, [r3, #0]
 800545c:	b29b      	uxth	r3, r3
 800545e:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 8005462:	b29a      	uxth	r2, r3
 8005464:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 8005466:	801a      	strh	r2, [r3, #0]
 8005468:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 800546a:	881b      	ldrh	r3, [r3, #0]
 800546c:	b29b      	uxth	r3, r3
 800546e:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8005472:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8005476:	b29a      	uxth	r2, r3
 8005478:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 800547a:	801a      	strh	r2, [r3, #0]
 800547c:	e05d      	b.n	800553a <USB_EPStartXfer+0x99e>
 800547e:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8005482:	2b3e      	cmp	r3, #62	; 0x3e
 8005484:	d817      	bhi.n	80054b6 <USB_EPStartXfer+0x91a>
 8005486:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 800548a:	085b      	lsrs	r3, r3, #1
 800548c:	f8c7 30f0 	str.w	r3, [r7, #240]	; 0xf0
 8005490:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8005494:	f003 0301 	and.w	r3, r3, #1
 8005498:	2b00      	cmp	r3, #0
 800549a:	d004      	beq.n	80054a6 <USB_EPStartXfer+0x90a>
 800549c:	f8d7 30f0 	ldr.w	r3, [r7, #240]	; 0xf0
 80054a0:	3301      	adds	r3, #1
 80054a2:	f8c7 30f0 	str.w	r3, [r7, #240]	; 0xf0
 80054a6:	f8d7 30f0 	ldr.w	r3, [r7, #240]	; 0xf0
 80054aa:	b29b      	uxth	r3, r3
 80054ac:	029b      	lsls	r3, r3, #10
 80054ae:	b29a      	uxth	r2, r3
 80054b0:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 80054b2:	801a      	strh	r2, [r3, #0]
 80054b4:	e041      	b.n	800553a <USB_EPStartXfer+0x99e>
 80054b6:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 80054ba:	095b      	lsrs	r3, r3, #5
 80054bc:	f8c7 30f0 	str.w	r3, [r7, #240]	; 0xf0
 80054c0:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 80054c4:	f003 031f 	and.w	r3, r3, #31
 80054c8:	2b00      	cmp	r3, #0
 80054ca:	d104      	bne.n	80054d6 <USB_EPStartXfer+0x93a>
 80054cc:	f8d7 30f0 	ldr.w	r3, [r7, #240]	; 0xf0
 80054d0:	3b01      	subs	r3, #1
 80054d2:	f8c7 30f0 	str.w	r3, [r7, #240]	; 0xf0
 80054d6:	f8d7 30f0 	ldr.w	r3, [r7, #240]	; 0xf0
 80054da:	b29b      	uxth	r3, r3
 80054dc:	029b      	lsls	r3, r3, #10
 80054de:	b29b      	uxth	r3, r3
 80054e0:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 80054e4:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 80054e8:	b29a      	uxth	r2, r3
 80054ea:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 80054ec:	801a      	strh	r2, [r3, #0]
 80054ee:	e024      	b.n	800553a <USB_EPStartXfer+0x99e>
 80054f0:	463b      	mov	r3, r7
 80054f2:	681b      	ldr	r3, [r3, #0]
 80054f4:	785b      	ldrb	r3, [r3, #1]
 80054f6:	2b01      	cmp	r3, #1
 80054f8:	d11f      	bne.n	800553a <USB_EPStartXfer+0x99e>
 80054fa:	1d3b      	adds	r3, r7, #4
 80054fc:	681b      	ldr	r3, [r3, #0]
 80054fe:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
 8005502:	1d3b      	adds	r3, r7, #4
 8005504:	681b      	ldr	r3, [r3, #0]
 8005506:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 800550a:	b29b      	uxth	r3, r3
 800550c:	461a      	mov	r2, r3
 800550e:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 8005512:	4413      	add	r3, r2
 8005514:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
 8005518:	463b      	mov	r3, r7
 800551a:	681b      	ldr	r3, [r3, #0]
 800551c:	781b      	ldrb	r3, [r3, #0]
 800551e:	011a      	lsls	r2, r3, #4
 8005520:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 8005524:	4413      	add	r3, r2
 8005526:	f203 4304 	addw	r3, r3, #1028	; 0x404
 800552a:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
 800552e:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8005532:	b29a      	uxth	r2, r3
 8005534:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 8005538:	801a      	strh	r2, [r3, #0]
          pmabuffer = ep->pmaaddr0;
 800553a:	463b      	mov	r3, r7
 800553c:	681b      	ldr	r3, [r3, #0]
 800553e:	891b      	ldrh	r3, [r3, #8]
 8005540:	f8a7 310a 	strh.w	r3, [r7, #266]	; 0x10a
        }

        USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 8005544:	463b      	mov	r3, r7
 8005546:	681b      	ldr	r3, [r3, #0]
 8005548:	6959      	ldr	r1, [r3, #20]
 800554a:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 800554e:	b29b      	uxth	r3, r3
 8005550:	f8b7 210a 	ldrh.w	r2, [r7, #266]	; 0x10a
 8005554:	1d38      	adds	r0, r7, #4
 8005556:	6800      	ldr	r0, [r0, #0]
 8005558:	f000 fd7e 	bl	8006058 <USB_WritePMA>
        PCD_FreeUserBuffer(USBx, ep->num, ep->is_in);
 800555c:	463b      	mov	r3, r7
 800555e:	681b      	ldr	r3, [r3, #0]
 8005560:	785b      	ldrb	r3, [r3, #1]
 8005562:	2b00      	cmp	r3, #0
 8005564:	d122      	bne.n	80055ac <USB_EPStartXfer+0xa10>
 8005566:	1d3b      	adds	r3, r7, #4
 8005568:	681a      	ldr	r2, [r3, #0]
 800556a:	463b      	mov	r3, r7
 800556c:	681b      	ldr	r3, [r3, #0]
 800556e:	781b      	ldrb	r3, [r3, #0]
 8005570:	009b      	lsls	r3, r3, #2
 8005572:	4413      	add	r3, r2
 8005574:	881b      	ldrh	r3, [r3, #0]
 8005576:	b29b      	uxth	r3, r3
 8005578:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800557c:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8005580:	f8a7 3068 	strh.w	r3, [r7, #104]	; 0x68
 8005584:	1d3b      	adds	r3, r7, #4
 8005586:	681a      	ldr	r2, [r3, #0]
 8005588:	463b      	mov	r3, r7
 800558a:	681b      	ldr	r3, [r3, #0]
 800558c:	781b      	ldrb	r3, [r3, #0]
 800558e:	009b      	lsls	r3, r3, #2
 8005590:	441a      	add	r2, r3
 8005592:	f8b7 3068 	ldrh.w	r3, [r7, #104]	; 0x68
 8005596:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 800559a:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 800559e:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80055a2:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 80055a6:	b29b      	uxth	r3, r3
 80055a8:	8013      	strh	r3, [r2, #0]
 80055aa:	e026      	b.n	80055fa <USB_EPStartXfer+0xa5e>
 80055ac:	463b      	mov	r3, r7
 80055ae:	681b      	ldr	r3, [r3, #0]
 80055b0:	785b      	ldrb	r3, [r3, #1]
 80055b2:	2b01      	cmp	r3, #1
 80055b4:	d121      	bne.n	80055fa <USB_EPStartXfer+0xa5e>
 80055b6:	1d3b      	adds	r3, r7, #4
 80055b8:	681a      	ldr	r2, [r3, #0]
 80055ba:	463b      	mov	r3, r7
 80055bc:	681b      	ldr	r3, [r3, #0]
 80055be:	781b      	ldrb	r3, [r3, #0]
 80055c0:	009b      	lsls	r3, r3, #2
 80055c2:	4413      	add	r3, r2
 80055c4:	881b      	ldrh	r3, [r3, #0]
 80055c6:	b29b      	uxth	r3, r3
 80055c8:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80055cc:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80055d0:	f8a7 306a 	strh.w	r3, [r7, #106]	; 0x6a
 80055d4:	1d3b      	adds	r3, r7, #4
 80055d6:	681a      	ldr	r2, [r3, #0]
 80055d8:	463b      	mov	r3, r7
 80055da:	681b      	ldr	r3, [r3, #0]
 80055dc:	781b      	ldrb	r3, [r3, #0]
 80055de:	009b      	lsls	r3, r3, #2
 80055e0:	441a      	add	r2, r3
 80055e2:	f8b7 306a 	ldrh.w	r3, [r7, #106]	; 0x6a
 80055e6:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 80055ea:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 80055ee:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 80055f2:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80055f6:	b29b      	uxth	r3, r3
 80055f8:	8013      	strh	r3, [r2, #0]
      }
    }

    PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_VALID);
 80055fa:	1d3b      	adds	r3, r7, #4
 80055fc:	681a      	ldr	r2, [r3, #0]
 80055fe:	463b      	mov	r3, r7
 8005600:	681b      	ldr	r3, [r3, #0]
 8005602:	781b      	ldrb	r3, [r3, #0]
 8005604:	009b      	lsls	r3, r3, #2
 8005606:	4413      	add	r3, r2
 8005608:	881b      	ldrh	r3, [r3, #0]
 800560a:	b29b      	uxth	r3, r3
 800560c:	f107 020e 	add.w	r2, r7, #14
 8005610:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8005614:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8005618:	8013      	strh	r3, [r2, #0]
 800561a:	f107 030e 	add.w	r3, r7, #14
 800561e:	f107 020e 	add.w	r2, r7, #14
 8005622:	8812      	ldrh	r2, [r2, #0]
 8005624:	f082 0210 	eor.w	r2, r2, #16
 8005628:	801a      	strh	r2, [r3, #0]
 800562a:	f107 030e 	add.w	r3, r7, #14
 800562e:	f107 020e 	add.w	r2, r7, #14
 8005632:	8812      	ldrh	r2, [r2, #0]
 8005634:	f082 0220 	eor.w	r2, r2, #32
 8005638:	801a      	strh	r2, [r3, #0]
 800563a:	1d3b      	adds	r3, r7, #4
 800563c:	681a      	ldr	r2, [r3, #0]
 800563e:	463b      	mov	r3, r7
 8005640:	681b      	ldr	r3, [r3, #0]
 8005642:	781b      	ldrb	r3, [r3, #0]
 8005644:	009b      	lsls	r3, r3, #2
 8005646:	441a      	add	r2, r3
 8005648:	f107 030e 	add.w	r3, r7, #14
 800564c:	881b      	ldrh	r3, [r3, #0]
 800564e:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8005652:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8005656:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800565a:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800565e:	b29b      	uxth	r3, r3
 8005660:	8013      	strh	r3, [r2, #0]
 8005662:	e3b5      	b.n	8005dd0 <USB_EPStartXfer+0x1234>
  }
  else /* OUT endpoint */
  {
    if (ep->doublebuffer == 0U)
 8005664:	463b      	mov	r3, r7
 8005666:	681b      	ldr	r3, [r3, #0]
 8005668:	7b1b      	ldrb	r3, [r3, #12]
 800566a:	2b00      	cmp	r3, #0
 800566c:	f040 8090 	bne.w	8005790 <USB_EPStartXfer+0xbf4>
    {
      /* Multi packet transfer */
      if (ep->xfer_len > ep->maxpacket)
 8005670:	463b      	mov	r3, r7
 8005672:	681b      	ldr	r3, [r3, #0]
 8005674:	699a      	ldr	r2, [r3, #24]
 8005676:	463b      	mov	r3, r7
 8005678:	681b      	ldr	r3, [r3, #0]
 800567a:	691b      	ldr	r3, [r3, #16]
 800567c:	429a      	cmp	r2, r3
 800567e:	d90e      	bls.n	800569e <USB_EPStartXfer+0xb02>
      {
        len = ep->maxpacket;
 8005680:	463b      	mov	r3, r7
 8005682:	681b      	ldr	r3, [r3, #0]
 8005684:	691b      	ldr	r3, [r3, #16]
 8005686:	f8c7 310c 	str.w	r3, [r7, #268]	; 0x10c
        ep->xfer_len -= len;
 800568a:	463b      	mov	r3, r7
 800568c:	681b      	ldr	r3, [r3, #0]
 800568e:	699a      	ldr	r2, [r3, #24]
 8005690:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8005694:	1ad2      	subs	r2, r2, r3
 8005696:	463b      	mov	r3, r7
 8005698:	681b      	ldr	r3, [r3, #0]
 800569a:	619a      	str	r2, [r3, #24]
 800569c:	e008      	b.n	80056b0 <USB_EPStartXfer+0xb14>
      }
      else
      {
        len = ep->xfer_len;
 800569e:	463b      	mov	r3, r7
 80056a0:	681b      	ldr	r3, [r3, #0]
 80056a2:	699b      	ldr	r3, [r3, #24]
 80056a4:	f8c7 310c 	str.w	r3, [r7, #268]	; 0x10c
        ep->xfer_len = 0U;
 80056a8:	463b      	mov	r3, r7
 80056aa:	681b      	ldr	r3, [r3, #0]
 80056ac:	2200      	movs	r2, #0
 80056ae:	619a      	str	r2, [r3, #24]
      }
      /* configure and validate Rx endpoint */
      PCD_SET_EP_RX_CNT(USBx, ep->num, len);
 80056b0:	1d3b      	adds	r3, r7, #4
 80056b2:	681b      	ldr	r3, [r3, #0]
 80056b4:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
 80056b8:	1d3b      	adds	r3, r7, #4
 80056ba:	681b      	ldr	r3, [r3, #0]
 80056bc:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 80056c0:	b29b      	uxth	r3, r3
 80056c2:	461a      	mov	r2, r3
 80056c4:	f8d7 3094 	ldr.w	r3, [r7, #148]	; 0x94
 80056c8:	4413      	add	r3, r2
 80056ca:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
 80056ce:	463b      	mov	r3, r7
 80056d0:	681b      	ldr	r3, [r3, #0]
 80056d2:	781b      	ldrb	r3, [r3, #0]
 80056d4:	011a      	lsls	r2, r3, #4
 80056d6:	f8d7 3094 	ldr.w	r3, [r7, #148]	; 0x94
 80056da:	4413      	add	r3, r2
 80056dc:	f203 430c 	addw	r3, r3, #1036	; 0x40c
 80056e0:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
 80056e4:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 80056e8:	2b00      	cmp	r3, #0
 80056ea:	d116      	bne.n	800571a <USB_EPStartXfer+0xb7e>
 80056ec:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 80056f0:	881b      	ldrh	r3, [r3, #0]
 80056f2:	b29b      	uxth	r3, r3
 80056f4:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 80056f8:	b29a      	uxth	r2, r3
 80056fa:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 80056fe:	801a      	strh	r2, [r3, #0]
 8005700:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 8005704:	881b      	ldrh	r3, [r3, #0]
 8005706:	b29b      	uxth	r3, r3
 8005708:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800570c:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8005710:	b29a      	uxth	r2, r3
 8005712:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 8005716:	801a      	strh	r2, [r3, #0]
 8005718:	e32c      	b.n	8005d74 <USB_EPStartXfer+0x11d8>
 800571a:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 800571e:	2b3e      	cmp	r3, #62	; 0x3e
 8005720:	d818      	bhi.n	8005754 <USB_EPStartXfer+0xbb8>
 8005722:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8005726:	085b      	lsrs	r3, r3, #1
 8005728:	f8c7 30ec 	str.w	r3, [r7, #236]	; 0xec
 800572c:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8005730:	f003 0301 	and.w	r3, r3, #1
 8005734:	2b00      	cmp	r3, #0
 8005736:	d004      	beq.n	8005742 <USB_EPStartXfer+0xba6>
 8005738:	f8d7 30ec 	ldr.w	r3, [r7, #236]	; 0xec
 800573c:	3301      	adds	r3, #1
 800573e:	f8c7 30ec 	str.w	r3, [r7, #236]	; 0xec
 8005742:	f8d7 30ec 	ldr.w	r3, [r7, #236]	; 0xec
 8005746:	b29b      	uxth	r3, r3
 8005748:	029b      	lsls	r3, r3, #10
 800574a:	b29a      	uxth	r2, r3
 800574c:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 8005750:	801a      	strh	r2, [r3, #0]
 8005752:	e30f      	b.n	8005d74 <USB_EPStartXfer+0x11d8>
 8005754:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8005758:	095b      	lsrs	r3, r3, #5
 800575a:	f8c7 30ec 	str.w	r3, [r7, #236]	; 0xec
 800575e:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8005762:	f003 031f 	and.w	r3, r3, #31
 8005766:	2b00      	cmp	r3, #0
 8005768:	d104      	bne.n	8005774 <USB_EPStartXfer+0xbd8>
 800576a:	f8d7 30ec 	ldr.w	r3, [r7, #236]	; 0xec
 800576e:	3b01      	subs	r3, #1
 8005770:	f8c7 30ec 	str.w	r3, [r7, #236]	; 0xec
 8005774:	f8d7 30ec 	ldr.w	r3, [r7, #236]	; 0xec
 8005778:	b29b      	uxth	r3, r3
 800577a:	029b      	lsls	r3, r3, #10
 800577c:	b29b      	uxth	r3, r3
 800577e:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8005782:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8005786:	b29a      	uxth	r2, r3
 8005788:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 800578c:	801a      	strh	r2, [r3, #0]
 800578e:	e2f1      	b.n	8005d74 <USB_EPStartXfer+0x11d8>
    }
    else
    {
      /* First Transfer Coming From HAL_PCD_EP_Receive & From ISR */
      /* Set the Double buffer counter */
      if (ep->type == EP_TYPE_BULK)
 8005790:	463b      	mov	r3, r7
 8005792:	681b      	ldr	r3, [r3, #0]
 8005794:	78db      	ldrb	r3, [r3, #3]
 8005796:	2b02      	cmp	r3, #2
 8005798:	f040 818f 	bne.w	8005aba <USB_EPStartXfer+0xf1e>
      {
        PCD_SET_EP_DBUF_CNT(USBx, ep->num, ep->is_in, ep->maxpacket);
 800579c:	463b      	mov	r3, r7
 800579e:	681b      	ldr	r3, [r3, #0]
 80057a0:	785b      	ldrb	r3, [r3, #1]
 80057a2:	2b00      	cmp	r3, #0
 80057a4:	d175      	bne.n	8005892 <USB_EPStartXfer+0xcf6>
 80057a6:	1d3b      	adds	r3, r7, #4
 80057a8:	681b      	ldr	r3, [r3, #0]
 80057aa:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 80057ae:	1d3b      	adds	r3, r7, #4
 80057b0:	681b      	ldr	r3, [r3, #0]
 80057b2:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 80057b6:	b29b      	uxth	r3, r3
 80057b8:	461a      	mov	r2, r3
 80057ba:	f8d7 30b0 	ldr.w	r3, [r7, #176]	; 0xb0
 80057be:	4413      	add	r3, r2
 80057c0:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 80057c4:	463b      	mov	r3, r7
 80057c6:	681b      	ldr	r3, [r3, #0]
 80057c8:	781b      	ldrb	r3, [r3, #0]
 80057ca:	011a      	lsls	r2, r3, #4
 80057cc:	f8d7 30b0 	ldr.w	r3, [r7, #176]	; 0xb0
 80057d0:	4413      	add	r3, r2
 80057d2:	f203 4304 	addw	r3, r3, #1028	; 0x404
 80057d6:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
 80057da:	463b      	mov	r3, r7
 80057dc:	681b      	ldr	r3, [r3, #0]
 80057de:	691b      	ldr	r3, [r3, #16]
 80057e0:	2b00      	cmp	r3, #0
 80057e2:	d116      	bne.n	8005812 <USB_EPStartXfer+0xc76>
 80057e4:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 80057e8:	881b      	ldrh	r3, [r3, #0]
 80057ea:	b29b      	uxth	r3, r3
 80057ec:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 80057f0:	b29a      	uxth	r2, r3
 80057f2:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 80057f6:	801a      	strh	r2, [r3, #0]
 80057f8:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 80057fc:	881b      	ldrh	r3, [r3, #0]
 80057fe:	b29b      	uxth	r3, r3
 8005800:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8005804:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8005808:	b29a      	uxth	r2, r3
 800580a:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 800580e:	801a      	strh	r2, [r3, #0]
 8005810:	e065      	b.n	80058de <USB_EPStartXfer+0xd42>
 8005812:	463b      	mov	r3, r7
 8005814:	681b      	ldr	r3, [r3, #0]
 8005816:	691b      	ldr	r3, [r3, #16]
 8005818:	2b3e      	cmp	r3, #62	; 0x3e
 800581a:	d81a      	bhi.n	8005852 <USB_EPStartXfer+0xcb6>
 800581c:	463b      	mov	r3, r7
 800581e:	681b      	ldr	r3, [r3, #0]
 8005820:	691b      	ldr	r3, [r3, #16]
 8005822:	085b      	lsrs	r3, r3, #1
 8005824:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
 8005828:	463b      	mov	r3, r7
 800582a:	681b      	ldr	r3, [r3, #0]
 800582c:	691b      	ldr	r3, [r3, #16]
 800582e:	f003 0301 	and.w	r3, r3, #1
 8005832:	2b00      	cmp	r3, #0
 8005834:	d004      	beq.n	8005840 <USB_EPStartXfer+0xca4>
 8005836:	f8d7 30e8 	ldr.w	r3, [r7, #232]	; 0xe8
 800583a:	3301      	adds	r3, #1
 800583c:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
 8005840:	f8d7 30e8 	ldr.w	r3, [r7, #232]	; 0xe8
 8005844:	b29b      	uxth	r3, r3
 8005846:	029b      	lsls	r3, r3, #10
 8005848:	b29a      	uxth	r2, r3
 800584a:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 800584e:	801a      	strh	r2, [r3, #0]
 8005850:	e045      	b.n	80058de <USB_EPStartXfer+0xd42>
 8005852:	463b      	mov	r3, r7
 8005854:	681b      	ldr	r3, [r3, #0]
 8005856:	691b      	ldr	r3, [r3, #16]
 8005858:	095b      	lsrs	r3, r3, #5
 800585a:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
 800585e:	463b      	mov	r3, r7
 8005860:	681b      	ldr	r3, [r3, #0]
 8005862:	691b      	ldr	r3, [r3, #16]
 8005864:	f003 031f 	and.w	r3, r3, #31
 8005868:	2b00      	cmp	r3, #0
 800586a:	d104      	bne.n	8005876 <USB_EPStartXfer+0xcda>
 800586c:	f8d7 30e8 	ldr.w	r3, [r7, #232]	; 0xe8
 8005870:	3b01      	subs	r3, #1
 8005872:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
 8005876:	f8d7 30e8 	ldr.w	r3, [r7, #232]	; 0xe8
 800587a:	b29b      	uxth	r3, r3
 800587c:	029b      	lsls	r3, r3, #10
 800587e:	b29b      	uxth	r3, r3
 8005880:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8005884:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8005888:	b29a      	uxth	r2, r3
 800588a:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 800588e:	801a      	strh	r2, [r3, #0]
 8005890:	e025      	b.n	80058de <USB_EPStartXfer+0xd42>
 8005892:	463b      	mov	r3, r7
 8005894:	681b      	ldr	r3, [r3, #0]
 8005896:	785b      	ldrb	r3, [r3, #1]
 8005898:	2b01      	cmp	r3, #1
 800589a:	d120      	bne.n	80058de <USB_EPStartXfer+0xd42>
 800589c:	1d3b      	adds	r3, r7, #4
 800589e:	681b      	ldr	r3, [r3, #0]
 80058a0:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 80058a4:	1d3b      	adds	r3, r7, #4
 80058a6:	681b      	ldr	r3, [r3, #0]
 80058a8:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 80058ac:	b29b      	uxth	r3, r3
 80058ae:	461a      	mov	r2, r3
 80058b0:	f8d7 30b8 	ldr.w	r3, [r7, #184]	; 0xb8
 80058b4:	4413      	add	r3, r2
 80058b6:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 80058ba:	463b      	mov	r3, r7
 80058bc:	681b      	ldr	r3, [r3, #0]
 80058be:	781b      	ldrb	r3, [r3, #0]
 80058c0:	011a      	lsls	r2, r3, #4
 80058c2:	f8d7 30b8 	ldr.w	r3, [r7, #184]	; 0xb8
 80058c6:	4413      	add	r3, r2
 80058c8:	f203 4304 	addw	r3, r3, #1028	; 0x404
 80058cc:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 80058d0:	463b      	mov	r3, r7
 80058d2:	681b      	ldr	r3, [r3, #0]
 80058d4:	691b      	ldr	r3, [r3, #16]
 80058d6:	b29a      	uxth	r2, r3
 80058d8:	f8d7 30b4 	ldr.w	r3, [r7, #180]	; 0xb4
 80058dc:	801a      	strh	r2, [r3, #0]
 80058de:	1d3b      	adds	r3, r7, #4
 80058e0:	681b      	ldr	r3, [r3, #0]
 80058e2:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
 80058e6:	463b      	mov	r3, r7
 80058e8:	681b      	ldr	r3, [r3, #0]
 80058ea:	785b      	ldrb	r3, [r3, #1]
 80058ec:	2b00      	cmp	r3, #0
 80058ee:	d175      	bne.n	80059dc <USB_EPStartXfer+0xe40>
 80058f0:	1d3b      	adds	r3, r7, #4
 80058f2:	681b      	ldr	r3, [r3, #0]
 80058f4:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
 80058f8:	1d3b      	adds	r3, r7, #4
 80058fa:	681b      	ldr	r3, [r3, #0]
 80058fc:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8005900:	b29b      	uxth	r3, r3
 8005902:	461a      	mov	r2, r3
 8005904:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 8005908:	4413      	add	r3, r2
 800590a:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
 800590e:	463b      	mov	r3, r7
 8005910:	681b      	ldr	r3, [r3, #0]
 8005912:	781b      	ldrb	r3, [r3, #0]
 8005914:	011a      	lsls	r2, r3, #4
 8005916:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 800591a:	4413      	add	r3, r2
 800591c:	f203 430c 	addw	r3, r3, #1036	; 0x40c
 8005920:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
 8005924:	463b      	mov	r3, r7
 8005926:	681b      	ldr	r3, [r3, #0]
 8005928:	691b      	ldr	r3, [r3, #16]
 800592a:	2b00      	cmp	r3, #0
 800592c:	d116      	bne.n	800595c <USB_EPStartXfer+0xdc0>
 800592e:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 8005932:	881b      	ldrh	r3, [r3, #0]
 8005934:	b29b      	uxth	r3, r3
 8005936:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 800593a:	b29a      	uxth	r2, r3
 800593c:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 8005940:	801a      	strh	r2, [r3, #0]
 8005942:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 8005946:	881b      	ldrh	r3, [r3, #0]
 8005948:	b29b      	uxth	r3, r3
 800594a:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800594e:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8005952:	b29a      	uxth	r2, r3
 8005954:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 8005958:	801a      	strh	r2, [r3, #0]
 800595a:	e061      	b.n	8005a20 <USB_EPStartXfer+0xe84>
 800595c:	463b      	mov	r3, r7
 800595e:	681b      	ldr	r3, [r3, #0]
 8005960:	691b      	ldr	r3, [r3, #16]
 8005962:	2b3e      	cmp	r3, #62	; 0x3e
 8005964:	d81a      	bhi.n	800599c <USB_EPStartXfer+0xe00>
 8005966:	463b      	mov	r3, r7
 8005968:	681b      	ldr	r3, [r3, #0]
 800596a:	691b      	ldr	r3, [r3, #16]
 800596c:	085b      	lsrs	r3, r3, #1
 800596e:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
 8005972:	463b      	mov	r3, r7
 8005974:	681b      	ldr	r3, [r3, #0]
 8005976:	691b      	ldr	r3, [r3, #16]
 8005978:	f003 0301 	and.w	r3, r3, #1
 800597c:	2b00      	cmp	r3, #0
 800597e:	d004      	beq.n	800598a <USB_EPStartXfer+0xdee>
 8005980:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8005984:	3301      	adds	r3, #1
 8005986:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
 800598a:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800598e:	b29b      	uxth	r3, r3
 8005990:	029b      	lsls	r3, r3, #10
 8005992:	b29a      	uxth	r2, r3
 8005994:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 8005998:	801a      	strh	r2, [r3, #0]
 800599a:	e041      	b.n	8005a20 <USB_EPStartXfer+0xe84>
 800599c:	463b      	mov	r3, r7
 800599e:	681b      	ldr	r3, [r3, #0]
 80059a0:	691b      	ldr	r3, [r3, #16]
 80059a2:	095b      	lsrs	r3, r3, #5
 80059a4:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
 80059a8:	463b      	mov	r3, r7
 80059aa:	681b      	ldr	r3, [r3, #0]
 80059ac:	691b      	ldr	r3, [r3, #16]
 80059ae:	f003 031f 	and.w	r3, r3, #31
 80059b2:	2b00      	cmp	r3, #0
 80059b4:	d104      	bne.n	80059c0 <USB_EPStartXfer+0xe24>
 80059b6:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80059ba:	3b01      	subs	r3, #1
 80059bc:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
 80059c0:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80059c4:	b29b      	uxth	r3, r3
 80059c6:	029b      	lsls	r3, r3, #10
 80059c8:	b29b      	uxth	r3, r3
 80059ca:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 80059ce:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 80059d2:	b29a      	uxth	r2, r3
 80059d4:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 80059d8:	801a      	strh	r2, [r3, #0]
 80059da:	e021      	b.n	8005a20 <USB_EPStartXfer+0xe84>
 80059dc:	463b      	mov	r3, r7
 80059de:	681b      	ldr	r3, [r3, #0]
 80059e0:	785b      	ldrb	r3, [r3, #1]
 80059e2:	2b01      	cmp	r3, #1
 80059e4:	d11c      	bne.n	8005a20 <USB_EPStartXfer+0xe84>
 80059e6:	1d3b      	adds	r3, r7, #4
 80059e8:	681b      	ldr	r3, [r3, #0]
 80059ea:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 80059ee:	b29b      	uxth	r3, r3
 80059f0:	461a      	mov	r2, r3
 80059f2:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 80059f6:	4413      	add	r3, r2
 80059f8:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
 80059fc:	463b      	mov	r3, r7
 80059fe:	681b      	ldr	r3, [r3, #0]
 8005a00:	781b      	ldrb	r3, [r3, #0]
 8005a02:	011a      	lsls	r2, r3, #4
 8005a04:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 8005a08:	4413      	add	r3, r2
 8005a0a:	f203 430c 	addw	r3, r3, #1036	; 0x40c
 8005a0e:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
 8005a12:	463b      	mov	r3, r7
 8005a14:	681b      	ldr	r3, [r3, #0]
 8005a16:	691b      	ldr	r3, [r3, #16]
 8005a18:	b29a      	uxth	r2, r3
 8005a1a:	f8d7 30a4 	ldr.w	r3, [r7, #164]	; 0xa4
 8005a1e:	801a      	strh	r2, [r3, #0]

        /* Coming from ISR */
        if (ep->xfer_count != 0U)
 8005a20:	463b      	mov	r3, r7
 8005a22:	681b      	ldr	r3, [r3, #0]
 8005a24:	69db      	ldr	r3, [r3, #28]
 8005a26:	2b00      	cmp	r3, #0
 8005a28:	f000 81a4 	beq.w	8005d74 <USB_EPStartXfer+0x11d8>
        {
          /* update last value to check if there is blocking state */
          wEPVal = PCD_GET_ENDPOINT(USBx, ep->num);
 8005a2c:	1d3b      	adds	r3, r7, #4
 8005a2e:	681a      	ldr	r2, [r3, #0]
 8005a30:	463b      	mov	r3, r7
 8005a32:	681b      	ldr	r3, [r3, #0]
 8005a34:	781b      	ldrb	r3, [r3, #0]
 8005a36:	009b      	lsls	r3, r3, #2
 8005a38:	4413      	add	r3, r2
 8005a3a:	881b      	ldrh	r3, [r3, #0]
 8005a3c:	f8a7 309a 	strh.w	r3, [r7, #154]	; 0x9a

          /*Blocking State */
          if ((((wEPVal & USB_EP_DTOG_RX) != 0U) && ((wEPVal & USB_EP_DTOG_TX) != 0U)) ||
 8005a40:	f8b7 309a 	ldrh.w	r3, [r7, #154]	; 0x9a
 8005a44:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8005a48:	2b00      	cmp	r3, #0
 8005a4a:	d005      	beq.n	8005a58 <USB_EPStartXfer+0xebc>
 8005a4c:	f8b7 309a 	ldrh.w	r3, [r7, #154]	; 0x9a
 8005a50:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005a54:	2b00      	cmp	r3, #0
 8005a56:	d10d      	bne.n	8005a74 <USB_EPStartXfer+0xed8>
              (((wEPVal & USB_EP_DTOG_RX) == 0U) && ((wEPVal & USB_EP_DTOG_TX) == 0U)))
 8005a58:	f8b7 309a 	ldrh.w	r3, [r7, #154]	; 0x9a
 8005a5c:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
          if ((((wEPVal & USB_EP_DTOG_RX) != 0U) && ((wEPVal & USB_EP_DTOG_TX) != 0U)) ||
 8005a60:	2b00      	cmp	r3, #0
 8005a62:	f040 8187 	bne.w	8005d74 <USB_EPStartXfer+0x11d8>
              (((wEPVal & USB_EP_DTOG_RX) == 0U) && ((wEPVal & USB_EP_DTOG_TX) == 0U)))
 8005a66:	f8b7 309a 	ldrh.w	r3, [r7, #154]	; 0x9a
 8005a6a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005a6e:	2b00      	cmp	r3, #0
 8005a70:	f040 8180 	bne.w	8005d74 <USB_EPStartXfer+0x11d8>
          {
            PCD_FreeUserBuffer(USBx, ep->num, 0U);
 8005a74:	1d3b      	adds	r3, r7, #4
 8005a76:	681a      	ldr	r2, [r3, #0]
 8005a78:	463b      	mov	r3, r7
 8005a7a:	681b      	ldr	r3, [r3, #0]
 8005a7c:	781b      	ldrb	r3, [r3, #0]
 8005a7e:	009b      	lsls	r3, r3, #2
 8005a80:	4413      	add	r3, r2
 8005a82:	881b      	ldrh	r3, [r3, #0]
 8005a84:	b29b      	uxth	r3, r3
 8005a86:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8005a8a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8005a8e:	f8a7 3098 	strh.w	r3, [r7, #152]	; 0x98
 8005a92:	1d3b      	adds	r3, r7, #4
 8005a94:	681a      	ldr	r2, [r3, #0]
 8005a96:	463b      	mov	r3, r7
 8005a98:	681b      	ldr	r3, [r3, #0]
 8005a9a:	781b      	ldrb	r3, [r3, #0]
 8005a9c:	009b      	lsls	r3, r3, #2
 8005a9e:	441a      	add	r2, r3
 8005aa0:	f8b7 3098 	ldrh.w	r3, [r7, #152]	; 0x98
 8005aa4:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8005aa8:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8005aac:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8005ab0:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 8005ab4:	b29b      	uxth	r3, r3
 8005ab6:	8013      	strh	r3, [r2, #0]
 8005ab8:	e15c      	b.n	8005d74 <USB_EPStartXfer+0x11d8>
          }
        }
      }
      /* iso out double */
      else if (ep->type == EP_TYPE_ISOC)
 8005aba:	463b      	mov	r3, r7
 8005abc:	681b      	ldr	r3, [r3, #0]
 8005abe:	78db      	ldrb	r3, [r3, #3]
 8005ac0:	2b01      	cmp	r3, #1
 8005ac2:	f040 8155 	bne.w	8005d70 <USB_EPStartXfer+0x11d4>
      {
        /* Multi packet transfer */
        if (ep->xfer_len > ep->maxpacket)
 8005ac6:	463b      	mov	r3, r7
 8005ac8:	681b      	ldr	r3, [r3, #0]
 8005aca:	699a      	ldr	r2, [r3, #24]
 8005acc:	463b      	mov	r3, r7
 8005ace:	681b      	ldr	r3, [r3, #0]
 8005ad0:	691b      	ldr	r3, [r3, #16]
 8005ad2:	429a      	cmp	r2, r3
 8005ad4:	d90e      	bls.n	8005af4 <USB_EPStartXfer+0xf58>
        {
          len = ep->maxpacket;
 8005ad6:	463b      	mov	r3, r7
 8005ad8:	681b      	ldr	r3, [r3, #0]
 8005ada:	691b      	ldr	r3, [r3, #16]
 8005adc:	f8c7 310c 	str.w	r3, [r7, #268]	; 0x10c
          ep->xfer_len -= len;
 8005ae0:	463b      	mov	r3, r7
 8005ae2:	681b      	ldr	r3, [r3, #0]
 8005ae4:	699a      	ldr	r2, [r3, #24]
 8005ae6:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8005aea:	1ad2      	subs	r2, r2, r3
 8005aec:	463b      	mov	r3, r7
 8005aee:	681b      	ldr	r3, [r3, #0]
 8005af0:	619a      	str	r2, [r3, #24]
 8005af2:	e008      	b.n	8005b06 <USB_EPStartXfer+0xf6a>
        }
        else
        {
          len = ep->xfer_len;
 8005af4:	463b      	mov	r3, r7
 8005af6:	681b      	ldr	r3, [r3, #0]
 8005af8:	699b      	ldr	r3, [r3, #24]
 8005afa:	f8c7 310c 	str.w	r3, [r7, #268]	; 0x10c
          ep->xfer_len = 0U;
 8005afe:	463b      	mov	r3, r7
 8005b00:	681b      	ldr	r3, [r3, #0]
 8005b02:	2200      	movs	r2, #0
 8005b04:	619a      	str	r2, [r3, #24]
        }
        PCD_SET_EP_DBUF_CNT(USBx, ep->num, ep->is_in, len);
 8005b06:	463b      	mov	r3, r7
 8005b08:	681b      	ldr	r3, [r3, #0]
 8005b0a:	785b      	ldrb	r3, [r3, #1]
 8005b0c:	2b00      	cmp	r3, #0
 8005b0e:	d16f      	bne.n	8005bf0 <USB_EPStartXfer+0x1054>
 8005b10:	1d3b      	adds	r3, r7, #4
 8005b12:	681b      	ldr	r3, [r3, #0]
 8005b14:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 8005b18:	1d3b      	adds	r3, r7, #4
 8005b1a:	681b      	ldr	r3, [r3, #0]
 8005b1c:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8005b20:	b29b      	uxth	r3, r3
 8005b22:	461a      	mov	r2, r3
 8005b24:	f8d7 30d0 	ldr.w	r3, [r7, #208]	; 0xd0
 8005b28:	4413      	add	r3, r2
 8005b2a:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 8005b2e:	463b      	mov	r3, r7
 8005b30:	681b      	ldr	r3, [r3, #0]
 8005b32:	781b      	ldrb	r3, [r3, #0]
 8005b34:	011a      	lsls	r2, r3, #4
 8005b36:	f8d7 30d0 	ldr.w	r3, [r7, #208]	; 0xd0
 8005b3a:	4413      	add	r3, r2
 8005b3c:	f203 4304 	addw	r3, r3, #1028	; 0x404
 8005b40:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
 8005b44:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8005b48:	2b00      	cmp	r3, #0
 8005b4a:	d116      	bne.n	8005b7a <USB_EPStartXfer+0xfde>
 8005b4c:	f8d7 30cc 	ldr.w	r3, [r7, #204]	; 0xcc
 8005b50:	881b      	ldrh	r3, [r3, #0]
 8005b52:	b29b      	uxth	r3, r3
 8005b54:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 8005b58:	b29a      	uxth	r2, r3
 8005b5a:	f8d7 30cc 	ldr.w	r3, [r7, #204]	; 0xcc
 8005b5e:	801a      	strh	r2, [r3, #0]
 8005b60:	f8d7 30cc 	ldr.w	r3, [r7, #204]	; 0xcc
 8005b64:	881b      	ldrh	r3, [r3, #0]
 8005b66:	b29b      	uxth	r3, r3
 8005b68:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8005b6c:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8005b70:	b29a      	uxth	r2, r3
 8005b72:	f8d7 30cc 	ldr.w	r3, [r7, #204]	; 0xcc
 8005b76:	801a      	strh	r2, [r3, #0]
 8005b78:	e05f      	b.n	8005c3a <USB_EPStartXfer+0x109e>
 8005b7a:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8005b7e:	2b3e      	cmp	r3, #62	; 0x3e
 8005b80:	d818      	bhi.n	8005bb4 <USB_EPStartXfer+0x1018>
 8005b82:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8005b86:	085b      	lsrs	r3, r3, #1
 8005b88:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
 8005b8c:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8005b90:	f003 0301 	and.w	r3, r3, #1
 8005b94:	2b00      	cmp	r3, #0
 8005b96:	d004      	beq.n	8005ba2 <USB_EPStartXfer+0x1006>
 8005b98:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8005b9c:	3301      	adds	r3, #1
 8005b9e:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
 8005ba2:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8005ba6:	b29b      	uxth	r3, r3
 8005ba8:	029b      	lsls	r3, r3, #10
 8005baa:	b29a      	uxth	r2, r3
 8005bac:	f8d7 30cc 	ldr.w	r3, [r7, #204]	; 0xcc
 8005bb0:	801a      	strh	r2, [r3, #0]
 8005bb2:	e042      	b.n	8005c3a <USB_EPStartXfer+0x109e>
 8005bb4:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8005bb8:	095b      	lsrs	r3, r3, #5
 8005bba:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
 8005bbe:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8005bc2:	f003 031f 	and.w	r3, r3, #31
 8005bc6:	2b00      	cmp	r3, #0
 8005bc8:	d104      	bne.n	8005bd4 <USB_EPStartXfer+0x1038>
 8005bca:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8005bce:	3b01      	subs	r3, #1
 8005bd0:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
 8005bd4:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8005bd8:	b29b      	uxth	r3, r3
 8005bda:	029b      	lsls	r3, r3, #10
 8005bdc:	b29b      	uxth	r3, r3
 8005bde:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8005be2:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8005be6:	b29a      	uxth	r2, r3
 8005be8:	f8d7 30cc 	ldr.w	r3, [r7, #204]	; 0xcc
 8005bec:	801a      	strh	r2, [r3, #0]
 8005bee:	e024      	b.n	8005c3a <USB_EPStartXfer+0x109e>
 8005bf0:	463b      	mov	r3, r7
 8005bf2:	681b      	ldr	r3, [r3, #0]
 8005bf4:	785b      	ldrb	r3, [r3, #1]
 8005bf6:	2b01      	cmp	r3, #1
 8005bf8:	d11f      	bne.n	8005c3a <USB_EPStartXfer+0x109e>
 8005bfa:	1d3b      	adds	r3, r7, #4
 8005bfc:	681b      	ldr	r3, [r3, #0]
 8005bfe:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
 8005c02:	1d3b      	adds	r3, r7, #4
 8005c04:	681b      	ldr	r3, [r3, #0]
 8005c06:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8005c0a:	b29b      	uxth	r3, r3
 8005c0c:	461a      	mov	r2, r3
 8005c0e:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 8005c12:	4413      	add	r3, r2
 8005c14:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
 8005c18:	463b      	mov	r3, r7
 8005c1a:	681b      	ldr	r3, [r3, #0]
 8005c1c:	781b      	ldrb	r3, [r3, #0]
 8005c1e:	011a      	lsls	r2, r3, #4
 8005c20:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 8005c24:	4413      	add	r3, r2
 8005c26:	f203 4304 	addw	r3, r3, #1028	; 0x404
 8005c2a:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
 8005c2e:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8005c32:	b29a      	uxth	r2, r3
 8005c34:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 8005c38:	801a      	strh	r2, [r3, #0]
 8005c3a:	1d3b      	adds	r3, r7, #4
 8005c3c:	681b      	ldr	r3, [r3, #0]
 8005c3e:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 8005c42:	463b      	mov	r3, r7
 8005c44:	681b      	ldr	r3, [r3, #0]
 8005c46:	785b      	ldrb	r3, [r3, #1]
 8005c48:	2b00      	cmp	r3, #0
 8005c4a:	d16f      	bne.n	8005d2c <USB_EPStartXfer+0x1190>
 8005c4c:	1d3b      	adds	r3, r7, #4
 8005c4e:	681b      	ldr	r3, [r3, #0]
 8005c50:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 8005c54:	1d3b      	adds	r3, r7, #4
 8005c56:	681b      	ldr	r3, [r3, #0]
 8005c58:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8005c5c:	b29b      	uxth	r3, r3
 8005c5e:	461a      	mov	r2, r3
 8005c60:	f8d7 30c0 	ldr.w	r3, [r7, #192]	; 0xc0
 8005c64:	4413      	add	r3, r2
 8005c66:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 8005c6a:	463b      	mov	r3, r7
 8005c6c:	681b      	ldr	r3, [r3, #0]
 8005c6e:	781b      	ldrb	r3, [r3, #0]
 8005c70:	011a      	lsls	r2, r3, #4
 8005c72:	f8d7 30c0 	ldr.w	r3, [r7, #192]	; 0xc0
 8005c76:	4413      	add	r3, r2
 8005c78:	f203 430c 	addw	r3, r3, #1036	; 0x40c
 8005c7c:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
 8005c80:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8005c84:	2b00      	cmp	r3, #0
 8005c86:	d116      	bne.n	8005cb6 <USB_EPStartXfer+0x111a>
 8005c88:	f8d7 30bc 	ldr.w	r3, [r7, #188]	; 0xbc
 8005c8c:	881b      	ldrh	r3, [r3, #0]
 8005c8e:	b29b      	uxth	r3, r3
 8005c90:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 8005c94:	b29a      	uxth	r2, r3
 8005c96:	f8d7 30bc 	ldr.w	r3, [r7, #188]	; 0xbc
 8005c9a:	801a      	strh	r2, [r3, #0]
 8005c9c:	f8d7 30bc 	ldr.w	r3, [r7, #188]	; 0xbc
 8005ca0:	881b      	ldrh	r3, [r3, #0]
 8005ca2:	b29b      	uxth	r3, r3
 8005ca4:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8005ca8:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8005cac:	b29a      	uxth	r2, r3
 8005cae:	f8d7 30bc 	ldr.w	r3, [r7, #188]	; 0xbc
 8005cb2:	801a      	strh	r2, [r3, #0]
 8005cb4:	e05e      	b.n	8005d74 <USB_EPStartXfer+0x11d8>
 8005cb6:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8005cba:	2b3e      	cmp	r3, #62	; 0x3e
 8005cbc:	d818      	bhi.n	8005cf0 <USB_EPStartXfer+0x1154>
 8005cbe:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8005cc2:	085b      	lsrs	r3, r3, #1
 8005cc4:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
 8005cc8:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8005ccc:	f003 0301 	and.w	r3, r3, #1
 8005cd0:	2b00      	cmp	r3, #0
 8005cd2:	d004      	beq.n	8005cde <USB_EPStartXfer+0x1142>
 8005cd4:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8005cd8:	3301      	adds	r3, #1
 8005cda:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
 8005cde:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8005ce2:	b29b      	uxth	r3, r3
 8005ce4:	029b      	lsls	r3, r3, #10
 8005ce6:	b29a      	uxth	r2, r3
 8005ce8:	f8d7 30bc 	ldr.w	r3, [r7, #188]	; 0xbc
 8005cec:	801a      	strh	r2, [r3, #0]
 8005cee:	e041      	b.n	8005d74 <USB_EPStartXfer+0x11d8>
 8005cf0:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8005cf4:	095b      	lsrs	r3, r3, #5
 8005cf6:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
 8005cfa:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8005cfe:	f003 031f 	and.w	r3, r3, #31
 8005d02:	2b00      	cmp	r3, #0
 8005d04:	d104      	bne.n	8005d10 <USB_EPStartXfer+0x1174>
 8005d06:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8005d0a:	3b01      	subs	r3, #1
 8005d0c:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
 8005d10:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8005d14:	b29b      	uxth	r3, r3
 8005d16:	029b      	lsls	r3, r3, #10
 8005d18:	b29b      	uxth	r3, r3
 8005d1a:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8005d1e:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8005d22:	b29a      	uxth	r2, r3
 8005d24:	f8d7 30bc 	ldr.w	r3, [r7, #188]	; 0xbc
 8005d28:	801a      	strh	r2, [r3, #0]
 8005d2a:	e023      	b.n	8005d74 <USB_EPStartXfer+0x11d8>
 8005d2c:	463b      	mov	r3, r7
 8005d2e:	681b      	ldr	r3, [r3, #0]
 8005d30:	785b      	ldrb	r3, [r3, #1]
 8005d32:	2b01      	cmp	r3, #1
 8005d34:	d11e      	bne.n	8005d74 <USB_EPStartXfer+0x11d8>
 8005d36:	1d3b      	adds	r3, r7, #4
 8005d38:	681b      	ldr	r3, [r3, #0]
 8005d3a:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8005d3e:	b29b      	uxth	r3, r3
 8005d40:	461a      	mov	r2, r3
 8005d42:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 8005d46:	4413      	add	r3, r2
 8005d48:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 8005d4c:	463b      	mov	r3, r7
 8005d4e:	681b      	ldr	r3, [r3, #0]
 8005d50:	781b      	ldrb	r3, [r3, #0]
 8005d52:	011a      	lsls	r2, r3, #4
 8005d54:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 8005d58:	4413      	add	r3, r2
 8005d5a:	f203 430c 	addw	r3, r3, #1036	; 0x40c
 8005d5e:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
 8005d62:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8005d66:	b29a      	uxth	r2, r3
 8005d68:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 8005d6c:	801a      	strh	r2, [r3, #0]
 8005d6e:	e001      	b.n	8005d74 <USB_EPStartXfer+0x11d8>
      }
      else
      {
        return HAL_ERROR;
 8005d70:	2301      	movs	r3, #1
 8005d72:	e02e      	b.n	8005dd2 <USB_EPStartXfer+0x1236>
      }
    }

    PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_VALID);
 8005d74:	1d3b      	adds	r3, r7, #4
 8005d76:	681a      	ldr	r2, [r3, #0]
 8005d78:	463b      	mov	r3, r7
 8005d7a:	681b      	ldr	r3, [r3, #0]
 8005d7c:	781b      	ldrb	r3, [r3, #0]
 8005d7e:	009b      	lsls	r3, r3, #2
 8005d80:	4413      	add	r3, r2
 8005d82:	881b      	ldrh	r3, [r3, #0]
 8005d84:	b29b      	uxth	r3, r3
 8005d86:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8005d8a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8005d8e:	f8a7 308e 	strh.w	r3, [r7, #142]	; 0x8e
 8005d92:	f8b7 308e 	ldrh.w	r3, [r7, #142]	; 0x8e
 8005d96:	f483 5380 	eor.w	r3, r3, #4096	; 0x1000
 8005d9a:	f8a7 308e 	strh.w	r3, [r7, #142]	; 0x8e
 8005d9e:	f8b7 308e 	ldrh.w	r3, [r7, #142]	; 0x8e
 8005da2:	f483 5300 	eor.w	r3, r3, #8192	; 0x2000
 8005da6:	f8a7 308e 	strh.w	r3, [r7, #142]	; 0x8e
 8005daa:	1d3b      	adds	r3, r7, #4
 8005dac:	681a      	ldr	r2, [r3, #0]
 8005dae:	463b      	mov	r3, r7
 8005db0:	681b      	ldr	r3, [r3, #0]
 8005db2:	781b      	ldrb	r3, [r3, #0]
 8005db4:	009b      	lsls	r3, r3, #2
 8005db6:	441a      	add	r2, r3
 8005db8:	f8b7 308e 	ldrh.w	r3, [r7, #142]	; 0x8e
 8005dbc:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8005dc0:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8005dc4:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8005dc8:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8005dcc:	b29b      	uxth	r3, r3
 8005dce:	8013      	strh	r3, [r2, #0]
  }

  return HAL_OK;
 8005dd0:	2300      	movs	r3, #0
}
 8005dd2:	4618      	mov	r0, r3
 8005dd4:	f507 7788 	add.w	r7, r7, #272	; 0x110
 8005dd8:	46bd      	mov	sp, r7
 8005dda:	bd80      	pop	{r7, pc}

08005ddc <USB_EPSetStall>:
  * @param  USBx Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPSetStall(USB_TypeDef *USBx, USB_EPTypeDef *ep)
{
 8005ddc:	b480      	push	{r7}
 8005dde:	b085      	sub	sp, #20
 8005de0:	af00      	add	r7, sp, #0
 8005de2:	6078      	str	r0, [r7, #4]
 8005de4:	6039      	str	r1, [r7, #0]
  if (ep->is_in != 0U)
 8005de6:	683b      	ldr	r3, [r7, #0]
 8005de8:	785b      	ldrb	r3, [r3, #1]
 8005dea:	2b00      	cmp	r3, #0
 8005dec:	d020      	beq.n	8005e30 <USB_EPSetStall+0x54>
  {
    PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_STALL);
 8005dee:	687a      	ldr	r2, [r7, #4]
 8005df0:	683b      	ldr	r3, [r7, #0]
 8005df2:	781b      	ldrb	r3, [r3, #0]
 8005df4:	009b      	lsls	r3, r3, #2
 8005df6:	4413      	add	r3, r2
 8005df8:	881b      	ldrh	r3, [r3, #0]
 8005dfa:	b29b      	uxth	r3, r3
 8005dfc:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8005e00:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8005e04:	81bb      	strh	r3, [r7, #12]
 8005e06:	89bb      	ldrh	r3, [r7, #12]
 8005e08:	f083 0310 	eor.w	r3, r3, #16
 8005e0c:	81bb      	strh	r3, [r7, #12]
 8005e0e:	687a      	ldr	r2, [r7, #4]
 8005e10:	683b      	ldr	r3, [r7, #0]
 8005e12:	781b      	ldrb	r3, [r3, #0]
 8005e14:	009b      	lsls	r3, r3, #2
 8005e16:	441a      	add	r2, r3
 8005e18:	89bb      	ldrh	r3, [r7, #12]
 8005e1a:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8005e1e:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8005e22:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8005e26:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8005e2a:	b29b      	uxth	r3, r3
 8005e2c:	8013      	strh	r3, [r2, #0]
 8005e2e:	e01f      	b.n	8005e70 <USB_EPSetStall+0x94>
  }
  else
  {
    PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_STALL);
 8005e30:	687a      	ldr	r2, [r7, #4]
 8005e32:	683b      	ldr	r3, [r7, #0]
 8005e34:	781b      	ldrb	r3, [r3, #0]
 8005e36:	009b      	lsls	r3, r3, #2
 8005e38:	4413      	add	r3, r2
 8005e3a:	881b      	ldrh	r3, [r3, #0]
 8005e3c:	b29b      	uxth	r3, r3
 8005e3e:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8005e42:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8005e46:	81fb      	strh	r3, [r7, #14]
 8005e48:	89fb      	ldrh	r3, [r7, #14]
 8005e4a:	f483 5380 	eor.w	r3, r3, #4096	; 0x1000
 8005e4e:	81fb      	strh	r3, [r7, #14]
 8005e50:	687a      	ldr	r2, [r7, #4]
 8005e52:	683b      	ldr	r3, [r7, #0]
 8005e54:	781b      	ldrb	r3, [r3, #0]
 8005e56:	009b      	lsls	r3, r3, #2
 8005e58:	441a      	add	r2, r3
 8005e5a:	89fb      	ldrh	r3, [r7, #14]
 8005e5c:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8005e60:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8005e64:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8005e68:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8005e6c:	b29b      	uxth	r3, r3
 8005e6e:	8013      	strh	r3, [r2, #0]
  }

  return HAL_OK;
 8005e70:	2300      	movs	r3, #0
}
 8005e72:	4618      	mov	r0, r3
 8005e74:	3714      	adds	r7, #20
 8005e76:	46bd      	mov	sp, r7
 8005e78:	bc80      	pop	{r7}
 8005e7a:	4770      	bx	lr

08005e7c <USB_EPClearStall>:
  * @param  USBx Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPClearStall(USB_TypeDef *USBx, USB_EPTypeDef *ep)
{
 8005e7c:	b480      	push	{r7}
 8005e7e:	b087      	sub	sp, #28
 8005e80:	af00      	add	r7, sp, #0
 8005e82:	6078      	str	r0, [r7, #4]
 8005e84:	6039      	str	r1, [r7, #0]
  if (ep->doublebuffer == 0U)
 8005e86:	683b      	ldr	r3, [r7, #0]
 8005e88:	7b1b      	ldrb	r3, [r3, #12]
 8005e8a:	2b00      	cmp	r3, #0
 8005e8c:	f040 809d 	bne.w	8005fca <USB_EPClearStall+0x14e>
  {
    if (ep->is_in != 0U)
 8005e90:	683b      	ldr	r3, [r7, #0]
 8005e92:	785b      	ldrb	r3, [r3, #1]
 8005e94:	2b00      	cmp	r3, #0
 8005e96:	d04c      	beq.n	8005f32 <USB_EPClearStall+0xb6>
    {
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 8005e98:	687a      	ldr	r2, [r7, #4]
 8005e9a:	683b      	ldr	r3, [r7, #0]
 8005e9c:	781b      	ldrb	r3, [r3, #0]
 8005e9e:	009b      	lsls	r3, r3, #2
 8005ea0:	4413      	add	r3, r2
 8005ea2:	881b      	ldrh	r3, [r3, #0]
 8005ea4:	823b      	strh	r3, [r7, #16]
 8005ea6:	8a3b      	ldrh	r3, [r7, #16]
 8005ea8:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005eac:	2b00      	cmp	r3, #0
 8005eae:	d01b      	beq.n	8005ee8 <USB_EPClearStall+0x6c>
 8005eb0:	687a      	ldr	r2, [r7, #4]
 8005eb2:	683b      	ldr	r3, [r7, #0]
 8005eb4:	781b      	ldrb	r3, [r3, #0]
 8005eb6:	009b      	lsls	r3, r3, #2
 8005eb8:	4413      	add	r3, r2
 8005eba:	881b      	ldrh	r3, [r3, #0]
 8005ebc:	b29b      	uxth	r3, r3
 8005ebe:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8005ec2:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8005ec6:	81fb      	strh	r3, [r7, #14]
 8005ec8:	687a      	ldr	r2, [r7, #4]
 8005eca:	683b      	ldr	r3, [r7, #0]
 8005ecc:	781b      	ldrb	r3, [r3, #0]
 8005ece:	009b      	lsls	r3, r3, #2
 8005ed0:	441a      	add	r2, r3
 8005ed2:	89fb      	ldrh	r3, [r7, #14]
 8005ed4:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8005ed8:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8005edc:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8005ee0:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 8005ee4:	b29b      	uxth	r3, r3
 8005ee6:	8013      	strh	r3, [r2, #0]

      if (ep->type != EP_TYPE_ISOC)
 8005ee8:	683b      	ldr	r3, [r7, #0]
 8005eea:	78db      	ldrb	r3, [r3, #3]
 8005eec:	2b01      	cmp	r3, #1
 8005eee:	d06c      	beq.n	8005fca <USB_EPClearStall+0x14e>
      {
        /* Configure NAK status for the Endpoint */
        PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_NAK);
 8005ef0:	687a      	ldr	r2, [r7, #4]
 8005ef2:	683b      	ldr	r3, [r7, #0]
 8005ef4:	781b      	ldrb	r3, [r3, #0]
 8005ef6:	009b      	lsls	r3, r3, #2
 8005ef8:	4413      	add	r3, r2
 8005efa:	881b      	ldrh	r3, [r3, #0]
 8005efc:	b29b      	uxth	r3, r3
 8005efe:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8005f02:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8005f06:	81bb      	strh	r3, [r7, #12]
 8005f08:	89bb      	ldrh	r3, [r7, #12]
 8005f0a:	f083 0320 	eor.w	r3, r3, #32
 8005f0e:	81bb      	strh	r3, [r7, #12]
 8005f10:	687a      	ldr	r2, [r7, #4]
 8005f12:	683b      	ldr	r3, [r7, #0]
 8005f14:	781b      	ldrb	r3, [r3, #0]
 8005f16:	009b      	lsls	r3, r3, #2
 8005f18:	441a      	add	r2, r3
 8005f1a:	89bb      	ldrh	r3, [r7, #12]
 8005f1c:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8005f20:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8005f24:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8005f28:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8005f2c:	b29b      	uxth	r3, r3
 8005f2e:	8013      	strh	r3, [r2, #0]
 8005f30:	e04b      	b.n	8005fca <USB_EPClearStall+0x14e>
      }
    }
    else
    {
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 8005f32:	687a      	ldr	r2, [r7, #4]
 8005f34:	683b      	ldr	r3, [r7, #0]
 8005f36:	781b      	ldrb	r3, [r3, #0]
 8005f38:	009b      	lsls	r3, r3, #2
 8005f3a:	4413      	add	r3, r2
 8005f3c:	881b      	ldrh	r3, [r3, #0]
 8005f3e:	82fb      	strh	r3, [r7, #22]
 8005f40:	8afb      	ldrh	r3, [r7, #22]
 8005f42:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8005f46:	2b00      	cmp	r3, #0
 8005f48:	d01b      	beq.n	8005f82 <USB_EPClearStall+0x106>
 8005f4a:	687a      	ldr	r2, [r7, #4]
 8005f4c:	683b      	ldr	r3, [r7, #0]
 8005f4e:	781b      	ldrb	r3, [r3, #0]
 8005f50:	009b      	lsls	r3, r3, #2
 8005f52:	4413      	add	r3, r2
 8005f54:	881b      	ldrh	r3, [r3, #0]
 8005f56:	b29b      	uxth	r3, r3
 8005f58:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8005f5c:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8005f60:	82bb      	strh	r3, [r7, #20]
 8005f62:	687a      	ldr	r2, [r7, #4]
 8005f64:	683b      	ldr	r3, [r7, #0]
 8005f66:	781b      	ldrb	r3, [r3, #0]
 8005f68:	009b      	lsls	r3, r3, #2
 8005f6a:	441a      	add	r2, r3
 8005f6c:	8abb      	ldrh	r3, [r7, #20]
 8005f6e:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8005f72:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8005f76:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8005f7a:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8005f7e:	b29b      	uxth	r3, r3
 8005f80:	8013      	strh	r3, [r2, #0]

      /* Configure VALID status for the Endpoint */
      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_VALID);
 8005f82:	687a      	ldr	r2, [r7, #4]
 8005f84:	683b      	ldr	r3, [r7, #0]
 8005f86:	781b      	ldrb	r3, [r3, #0]
 8005f88:	009b      	lsls	r3, r3, #2
 8005f8a:	4413      	add	r3, r2
 8005f8c:	881b      	ldrh	r3, [r3, #0]
 8005f8e:	b29b      	uxth	r3, r3
 8005f90:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8005f94:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8005f98:	827b      	strh	r3, [r7, #18]
 8005f9a:	8a7b      	ldrh	r3, [r7, #18]
 8005f9c:	f483 5380 	eor.w	r3, r3, #4096	; 0x1000
 8005fa0:	827b      	strh	r3, [r7, #18]
 8005fa2:	8a7b      	ldrh	r3, [r7, #18]
 8005fa4:	f483 5300 	eor.w	r3, r3, #8192	; 0x2000
 8005fa8:	827b      	strh	r3, [r7, #18]
 8005faa:	687a      	ldr	r2, [r7, #4]
 8005fac:	683b      	ldr	r3, [r7, #0]
 8005fae:	781b      	ldrb	r3, [r3, #0]
 8005fb0:	009b      	lsls	r3, r3, #2
 8005fb2:	441a      	add	r2, r3
 8005fb4:	8a7b      	ldrh	r3, [r7, #18]
 8005fb6:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8005fba:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8005fbe:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8005fc2:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8005fc6:	b29b      	uxth	r3, r3
 8005fc8:	8013      	strh	r3, [r2, #0]
    }
  }

  return HAL_OK;
 8005fca:	2300      	movs	r3, #0
}
 8005fcc:	4618      	mov	r0, r3
 8005fce:	371c      	adds	r7, #28
 8005fd0:	46bd      	mov	sp, r7
 8005fd2:	bc80      	pop	{r7}
 8005fd4:	4770      	bx	lr

08005fd6 <USB_SetDevAddress>:
  * @param  address new device address to be assigned
  *          This parameter can be a value from 0 to 255
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_SetDevAddress(USB_TypeDef *USBx, uint8_t address)
{
 8005fd6:	b480      	push	{r7}
 8005fd8:	b083      	sub	sp, #12
 8005fda:	af00      	add	r7, sp, #0
 8005fdc:	6078      	str	r0, [r7, #4]
 8005fde:	460b      	mov	r3, r1
 8005fe0:	70fb      	strb	r3, [r7, #3]
  if (address == 0U)
 8005fe2:	78fb      	ldrb	r3, [r7, #3]
 8005fe4:	2b00      	cmp	r3, #0
 8005fe6:	d103      	bne.n	8005ff0 <USB_SetDevAddress+0x1a>
  {
    /* set device address and enable function */
    USBx->DADDR = (uint16_t)USB_DADDR_EF;
 8005fe8:	687b      	ldr	r3, [r7, #4]
 8005fea:	2280      	movs	r2, #128	; 0x80
 8005fec:	f8a3 204c 	strh.w	r2, [r3, #76]	; 0x4c
  }

  return HAL_OK;
 8005ff0:	2300      	movs	r3, #0
}
 8005ff2:	4618      	mov	r0, r3
 8005ff4:	370c      	adds	r7, #12
 8005ff6:	46bd      	mov	sp, r7
 8005ff8:	bc80      	pop	{r7}
 8005ffa:	4770      	bx	lr

08005ffc <USB_DevConnect>:
  * @brief  USB_DevConnect Connect the USB device by enabling the pull-up/pull-down
  * @param  USBx Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_DevConnect(USB_TypeDef *USBx)
{
 8005ffc:	b480      	push	{r7}
 8005ffe:	b083      	sub	sp, #12
 8006000:	af00      	add	r7, sp, #0
 8006002:	6078      	str	r0, [r7, #4]
  /* NOTE : - This function is not required by USB Device FS peripheral, it is used
              only by USB OTG FS peripheral.
            - This function is added to ensure compatibility across platforms.
   */

  return HAL_OK;
 8006004:	2300      	movs	r3, #0
}
 8006006:	4618      	mov	r0, r3
 8006008:	370c      	adds	r7, #12
 800600a:	46bd      	mov	sp, r7
 800600c:	bc80      	pop	{r7}
 800600e:	4770      	bx	lr

08006010 <USB_DevDisconnect>:
  * @brief  USB_DevDisconnect Disconnect the USB device by disabling the pull-up/pull-down
  * @param  USBx Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_DevDisconnect(USB_TypeDef *USBx)
{
 8006010:	b480      	push	{r7}
 8006012:	b083      	sub	sp, #12
 8006014:	af00      	add	r7, sp, #0
 8006016:	6078      	str	r0, [r7, #4]
  /* NOTE : - This function is not required by USB Device FS peripheral, it is used
              only by USB OTG FS peripheral.
            - This function is added to ensure compatibility across platforms.
   */

  return HAL_OK;
 8006018:	2300      	movs	r3, #0
}
 800601a:	4618      	mov	r0, r3
 800601c:	370c      	adds	r7, #12
 800601e:	46bd      	mov	sp, r7
 8006020:	bc80      	pop	{r7}
 8006022:	4770      	bx	lr

08006024 <USB_ReadInterrupts>:
  * @brief  USB_ReadInterrupts return the global USB interrupt status
  * @param  USBx Selected device
  * @retval HAL status
  */
uint32_t  USB_ReadInterrupts(USB_TypeDef *USBx)
{
 8006024:	b480      	push	{r7}
 8006026:	b085      	sub	sp, #20
 8006028:	af00      	add	r7, sp, #0
 800602a:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;

  tmpreg = USBx->ISTR;
 800602c:	687b      	ldr	r3, [r7, #4]
 800602e:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 8006032:	b29b      	uxth	r3, r3
 8006034:	60fb      	str	r3, [r7, #12]
  return tmpreg;
 8006036:	68fb      	ldr	r3, [r7, #12]
}
 8006038:	4618      	mov	r0, r3
 800603a:	3714      	adds	r7, #20
 800603c:	46bd      	mov	sp, r7
 800603e:	bc80      	pop	{r7}
 8006040:	4770      	bx	lr

08006042 <USB_EP0_OutStart>:
  * @param  USBx Selected device
  * @param  psetup pointer to setup packet
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EP0_OutStart(USB_TypeDef *USBx, uint8_t *psetup)
{
 8006042:	b480      	push	{r7}
 8006044:	b083      	sub	sp, #12
 8006046:	af00      	add	r7, sp, #0
 8006048:	6078      	str	r0, [r7, #4]
 800604a:	6039      	str	r1, [r7, #0]
  UNUSED(psetup);
  /* NOTE : - This function is not required by USB Device FS peripheral, it is used
              only by USB OTG FS peripheral.
            - This function is added to ensure compatibility across platforms.
   */
  return HAL_OK;
 800604c:	2300      	movs	r3, #0
}
 800604e:	4618      	mov	r0, r3
 8006050:	370c      	adds	r7, #12
 8006052:	46bd      	mov	sp, r7
 8006054:	bc80      	pop	{r7}
 8006056:	4770      	bx	lr

08006058 <USB_WritePMA>:
  * @param   wPMABufAddr address into PMA.
  * @param   wNBytes no. of bytes to be copied.
  * @retval None
  */
void USB_WritePMA(USB_TypeDef *USBx, uint8_t *pbUsrBuf, uint16_t wPMABufAddr, uint16_t wNBytes)
{
 8006058:	b480      	push	{r7}
 800605a:	b08d      	sub	sp, #52	; 0x34
 800605c:	af00      	add	r7, sp, #0
 800605e:	60f8      	str	r0, [r7, #12]
 8006060:	60b9      	str	r1, [r7, #8]
 8006062:	4611      	mov	r1, r2
 8006064:	461a      	mov	r2, r3
 8006066:	460b      	mov	r3, r1
 8006068:	80fb      	strh	r3, [r7, #6]
 800606a:	4613      	mov	r3, r2
 800606c:	80bb      	strh	r3, [r7, #4]
  uint32_t n = ((uint32_t)wNBytes + 1U) >> 1;
 800606e:	88bb      	ldrh	r3, [r7, #4]
 8006070:	3301      	adds	r3, #1
 8006072:	085b      	lsrs	r3, r3, #1
 8006074:	623b      	str	r3, [r7, #32]
  uint32_t BaseAddr = (uint32_t)USBx;
 8006076:	68fb      	ldr	r3, [r7, #12]
 8006078:	61fb      	str	r3, [r7, #28]
  uint32_t i, temp1, temp2;
  __IO uint16_t *pdwVal;
  uint8_t *pBuf = pbUsrBuf;
 800607a:	68bb      	ldr	r3, [r7, #8]
 800607c:	627b      	str	r3, [r7, #36]	; 0x24

  pdwVal = (__IO uint16_t *)(BaseAddr + 0x400U + ((uint32_t)wPMABufAddr * PMA_ACCESS));
 800607e:	88fb      	ldrh	r3, [r7, #6]
 8006080:	005a      	lsls	r2, r3, #1
 8006082:	69fb      	ldr	r3, [r7, #28]
 8006084:	4413      	add	r3, r2
 8006086:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 800608a:	62bb      	str	r3, [r7, #40]	; 0x28

  for (i = n; i != 0U; i--)
 800608c:	6a3b      	ldr	r3, [r7, #32]
 800608e:	62fb      	str	r3, [r7, #44]	; 0x2c
 8006090:	e01e      	b.n	80060d0 <USB_WritePMA+0x78>
  {
    temp1 = *pBuf;
 8006092:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006094:	781b      	ldrb	r3, [r3, #0]
 8006096:	61bb      	str	r3, [r7, #24]
    pBuf++;
 8006098:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800609a:	3301      	adds	r3, #1
 800609c:	627b      	str	r3, [r7, #36]	; 0x24
    temp2 = temp1 | ((uint16_t)((uint16_t) *pBuf << 8));
 800609e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80060a0:	781b      	ldrb	r3, [r3, #0]
 80060a2:	b29b      	uxth	r3, r3
 80060a4:	021b      	lsls	r3, r3, #8
 80060a6:	b29b      	uxth	r3, r3
 80060a8:	461a      	mov	r2, r3
 80060aa:	69bb      	ldr	r3, [r7, #24]
 80060ac:	4313      	orrs	r3, r2
 80060ae:	617b      	str	r3, [r7, #20]
    *pdwVal = (uint16_t)temp2;
 80060b0:	697b      	ldr	r3, [r7, #20]
 80060b2:	b29a      	uxth	r2, r3
 80060b4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80060b6:	801a      	strh	r2, [r3, #0]
    pdwVal++;
 80060b8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80060ba:	3302      	adds	r3, #2
 80060bc:	62bb      	str	r3, [r7, #40]	; 0x28

#if PMA_ACCESS > 1U
    pdwVal++;
 80060be:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80060c0:	3302      	adds	r3, #2
 80060c2:	62bb      	str	r3, [r7, #40]	; 0x28
#endif

    pBuf++;
 80060c4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80060c6:	3301      	adds	r3, #1
 80060c8:	627b      	str	r3, [r7, #36]	; 0x24
  for (i = n; i != 0U; i--)
 80060ca:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80060cc:	3b01      	subs	r3, #1
 80060ce:	62fb      	str	r3, [r7, #44]	; 0x2c
 80060d0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80060d2:	2b00      	cmp	r3, #0
 80060d4:	d1dd      	bne.n	8006092 <USB_WritePMA+0x3a>
  }
}
 80060d6:	bf00      	nop
 80060d8:	3734      	adds	r7, #52	; 0x34
 80060da:	46bd      	mov	sp, r7
 80060dc:	bc80      	pop	{r7}
 80060de:	4770      	bx	lr

080060e0 <USB_ReadPMA>:
  * @param   wPMABufAddr address into PMA.
  * @param   wNBytes no. of bytes to be copied.
  * @retval None
  */
void USB_ReadPMA(USB_TypeDef *USBx, uint8_t *pbUsrBuf, uint16_t wPMABufAddr, uint16_t wNBytes)
{
 80060e0:	b480      	push	{r7}
 80060e2:	b08b      	sub	sp, #44	; 0x2c
 80060e4:	af00      	add	r7, sp, #0
 80060e6:	60f8      	str	r0, [r7, #12]
 80060e8:	60b9      	str	r1, [r7, #8]
 80060ea:	4611      	mov	r1, r2
 80060ec:	461a      	mov	r2, r3
 80060ee:	460b      	mov	r3, r1
 80060f0:	80fb      	strh	r3, [r7, #6]
 80060f2:	4613      	mov	r3, r2
 80060f4:	80bb      	strh	r3, [r7, #4]
  uint32_t n = (uint32_t)wNBytes >> 1;
 80060f6:	88bb      	ldrh	r3, [r7, #4]
 80060f8:	085b      	lsrs	r3, r3, #1
 80060fa:	b29b      	uxth	r3, r3
 80060fc:	61bb      	str	r3, [r7, #24]
  uint32_t BaseAddr = (uint32_t)USBx;
 80060fe:	68fb      	ldr	r3, [r7, #12]
 8006100:	617b      	str	r3, [r7, #20]
  uint32_t i, temp;
  __IO uint16_t *pdwVal;
  uint8_t *pBuf = pbUsrBuf;
 8006102:	68bb      	ldr	r3, [r7, #8]
 8006104:	61fb      	str	r3, [r7, #28]

  pdwVal = (__IO uint16_t *)(BaseAddr + 0x400U + ((uint32_t)wPMABufAddr * PMA_ACCESS));
 8006106:	88fb      	ldrh	r3, [r7, #6]
 8006108:	005a      	lsls	r2, r3, #1
 800610a:	697b      	ldr	r3, [r7, #20]
 800610c:	4413      	add	r3, r2
 800610e:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8006112:	623b      	str	r3, [r7, #32]

  for (i = n; i != 0U; i--)
 8006114:	69bb      	ldr	r3, [r7, #24]
 8006116:	627b      	str	r3, [r7, #36]	; 0x24
 8006118:	e01b      	b.n	8006152 <USB_ReadPMA+0x72>
  {
    temp = *(__IO uint16_t *)pdwVal;
 800611a:	6a3b      	ldr	r3, [r7, #32]
 800611c:	881b      	ldrh	r3, [r3, #0]
 800611e:	b29b      	uxth	r3, r3
 8006120:	613b      	str	r3, [r7, #16]
    pdwVal++;
 8006122:	6a3b      	ldr	r3, [r7, #32]
 8006124:	3302      	adds	r3, #2
 8006126:	623b      	str	r3, [r7, #32]
    *pBuf = (uint8_t)((temp >> 0) & 0xFFU);
 8006128:	693b      	ldr	r3, [r7, #16]
 800612a:	b2da      	uxtb	r2, r3
 800612c:	69fb      	ldr	r3, [r7, #28]
 800612e:	701a      	strb	r2, [r3, #0]
    pBuf++;
 8006130:	69fb      	ldr	r3, [r7, #28]
 8006132:	3301      	adds	r3, #1
 8006134:	61fb      	str	r3, [r7, #28]
    *pBuf = (uint8_t)((temp >> 8) & 0xFFU);
 8006136:	693b      	ldr	r3, [r7, #16]
 8006138:	0a1b      	lsrs	r3, r3, #8
 800613a:	b2da      	uxtb	r2, r3
 800613c:	69fb      	ldr	r3, [r7, #28]
 800613e:	701a      	strb	r2, [r3, #0]
    pBuf++;
 8006140:	69fb      	ldr	r3, [r7, #28]
 8006142:	3301      	adds	r3, #1
 8006144:	61fb      	str	r3, [r7, #28]

#if PMA_ACCESS > 1U
    pdwVal++;
 8006146:	6a3b      	ldr	r3, [r7, #32]
 8006148:	3302      	adds	r3, #2
 800614a:	623b      	str	r3, [r7, #32]
  for (i = n; i != 0U; i--)
 800614c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800614e:	3b01      	subs	r3, #1
 8006150:	627b      	str	r3, [r7, #36]	; 0x24
 8006152:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006154:	2b00      	cmp	r3, #0
 8006156:	d1e0      	bne.n	800611a <USB_ReadPMA+0x3a>
#endif
  }

  if ((wNBytes % 2U) != 0U)
 8006158:	88bb      	ldrh	r3, [r7, #4]
 800615a:	f003 0301 	and.w	r3, r3, #1
 800615e:	b29b      	uxth	r3, r3
 8006160:	2b00      	cmp	r3, #0
 8006162:	d007      	beq.n	8006174 <USB_ReadPMA+0x94>
  {
    temp = *pdwVal;
 8006164:	6a3b      	ldr	r3, [r7, #32]
 8006166:	881b      	ldrh	r3, [r3, #0]
 8006168:	b29b      	uxth	r3, r3
 800616a:	613b      	str	r3, [r7, #16]
    *pBuf = (uint8_t)((temp >> 0) & 0xFFU);
 800616c:	693b      	ldr	r3, [r7, #16]
 800616e:	b2da      	uxtb	r2, r3
 8006170:	69fb      	ldr	r3, [r7, #28]
 8006172:	701a      	strb	r2, [r3, #0]
  }
}
 8006174:	bf00      	nop
 8006176:	372c      	adds	r7, #44	; 0x2c
 8006178:	46bd      	mov	sp, r7
 800617a:	bc80      	pop	{r7}
 800617c:	4770      	bx	lr

0800617e <USBD_CDC_Init>:
  * @param  pdev: device instance
  * @param  cfgidx: Configuration index
  * @retval status
  */
static uint8_t  USBD_CDC_Init(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 800617e:	b580      	push	{r7, lr}
 8006180:	b084      	sub	sp, #16
 8006182:	af00      	add	r7, sp, #0
 8006184:	6078      	str	r0, [r7, #4]
 8006186:	460b      	mov	r3, r1
 8006188:	70fb      	strb	r3, [r7, #3]
  uint8_t ret = 0U;
 800618a:	2300      	movs	r3, #0
 800618c:	73fb      	strb	r3, [r7, #15]
  USBD_CDC_HandleTypeDef   *hcdc;

  if (pdev->dev_speed == USBD_SPEED_HIGH)
 800618e:	687b      	ldr	r3, [r7, #4]
 8006190:	7c1b      	ldrb	r3, [r3, #16]
 8006192:	2b00      	cmp	r3, #0
 8006194:	d115      	bne.n	80061c2 <USBD_CDC_Init+0x44>
  {
    /* Open EP IN */
    USBD_LL_OpenEP(pdev, CDC_IN_EP, USBD_EP_TYPE_BULK,
 8006196:	f44f 7300 	mov.w	r3, #512	; 0x200
 800619a:	2202      	movs	r2, #2
 800619c:	2181      	movs	r1, #129	; 0x81
 800619e:	6878      	ldr	r0, [r7, #4]
 80061a0:	f001 fe75 	bl	8007e8e <USBD_LL_OpenEP>
                   CDC_DATA_HS_IN_PACKET_SIZE);

    pdev->ep_in[CDC_IN_EP & 0xFU].is_used = 1U;
 80061a4:	687b      	ldr	r3, [r7, #4]
 80061a6:	2201      	movs	r2, #1
 80061a8:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Open EP OUT */
    USBD_LL_OpenEP(pdev, CDC_OUT_EP, USBD_EP_TYPE_BULK,
 80061aa:	f44f 7300 	mov.w	r3, #512	; 0x200
 80061ae:	2202      	movs	r2, #2
 80061b0:	2101      	movs	r1, #1
 80061b2:	6878      	ldr	r0, [r7, #4]
 80061b4:	f001 fe6b 	bl	8007e8e <USBD_LL_OpenEP>
                   CDC_DATA_HS_OUT_PACKET_SIZE);

    pdev->ep_out[CDC_OUT_EP & 0xFU].is_used = 1U;
 80061b8:	687b      	ldr	r3, [r7, #4]
 80061ba:	2201      	movs	r2, #1
 80061bc:	f8c3 216c 	str.w	r2, [r3, #364]	; 0x16c
 80061c0:	e012      	b.n	80061e8 <USBD_CDC_Init+0x6a>

  }
  else
  {
    /* Open EP IN */
    USBD_LL_OpenEP(pdev, CDC_IN_EP, USBD_EP_TYPE_BULK,
 80061c2:	2340      	movs	r3, #64	; 0x40
 80061c4:	2202      	movs	r2, #2
 80061c6:	2181      	movs	r1, #129	; 0x81
 80061c8:	6878      	ldr	r0, [r7, #4]
 80061ca:	f001 fe60 	bl	8007e8e <USBD_LL_OpenEP>
                   CDC_DATA_FS_IN_PACKET_SIZE);

    pdev->ep_in[CDC_IN_EP & 0xFU].is_used = 1U;
 80061ce:	687b      	ldr	r3, [r7, #4]
 80061d0:	2201      	movs	r2, #1
 80061d2:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Open EP OUT */
    USBD_LL_OpenEP(pdev, CDC_OUT_EP, USBD_EP_TYPE_BULK,
 80061d4:	2340      	movs	r3, #64	; 0x40
 80061d6:	2202      	movs	r2, #2
 80061d8:	2101      	movs	r1, #1
 80061da:	6878      	ldr	r0, [r7, #4]
 80061dc:	f001 fe57 	bl	8007e8e <USBD_LL_OpenEP>
                   CDC_DATA_FS_OUT_PACKET_SIZE);

    pdev->ep_out[CDC_OUT_EP & 0xFU].is_used = 1U;
 80061e0:	687b      	ldr	r3, [r7, #4]
 80061e2:	2201      	movs	r2, #1
 80061e4:	f8c3 216c 	str.w	r2, [r3, #364]	; 0x16c
  }
  /* Open Command IN EP */
  USBD_LL_OpenEP(pdev, CDC_CMD_EP, USBD_EP_TYPE_INTR, CDC_CMD_PACKET_SIZE);
 80061e8:	2308      	movs	r3, #8
 80061ea:	2203      	movs	r2, #3
 80061ec:	2182      	movs	r1, #130	; 0x82
 80061ee:	6878      	ldr	r0, [r7, #4]
 80061f0:	f001 fe4d 	bl	8007e8e <USBD_LL_OpenEP>
  pdev->ep_in[CDC_CMD_EP & 0xFU].is_used = 1U;
 80061f4:	687b      	ldr	r3, [r7, #4]
 80061f6:	2201      	movs	r2, #1
 80061f8:	641a      	str	r2, [r3, #64]	; 0x40

  pdev->pClassData = USBD_malloc(sizeof(USBD_CDC_HandleTypeDef));
 80061fa:	f44f 7007 	mov.w	r0, #540	; 0x21c
 80061fe:	f001 ff6d 	bl	80080dc <USBD_static_malloc>
 8006202:	4602      	mov	r2, r0
 8006204:	687b      	ldr	r3, [r7, #4]
 8006206:	f8c3 22b8 	str.w	r2, [r3, #696]	; 0x2b8

  if (pdev->pClassData == NULL)
 800620a:	687b      	ldr	r3, [r7, #4]
 800620c:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8006210:	2b00      	cmp	r3, #0
 8006212:	d102      	bne.n	800621a <USBD_CDC_Init+0x9c>
  {
    ret = 1U;
 8006214:	2301      	movs	r3, #1
 8006216:	73fb      	strb	r3, [r7, #15]
 8006218:	e026      	b.n	8006268 <USBD_CDC_Init+0xea>
  }
  else
  {
    hcdc = (USBD_CDC_HandleTypeDef *) pdev->pClassData;
 800621a:	687b      	ldr	r3, [r7, #4]
 800621c:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8006220:	60bb      	str	r3, [r7, #8]

    /* Init  physical Interface components */
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Init();
 8006222:	687b      	ldr	r3, [r7, #4]
 8006224:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 8006228:	681b      	ldr	r3, [r3, #0]
 800622a:	4798      	blx	r3

    /* Init Xfer states */
    hcdc->TxState = 0U;
 800622c:	68bb      	ldr	r3, [r7, #8]
 800622e:	2200      	movs	r2, #0
 8006230:	f8c3 2214 	str.w	r2, [r3, #532]	; 0x214
    hcdc->RxState = 0U;
 8006234:	68bb      	ldr	r3, [r7, #8]
 8006236:	2200      	movs	r2, #0
 8006238:	f8c3 2218 	str.w	r2, [r3, #536]	; 0x218

    if (pdev->dev_speed == USBD_SPEED_HIGH)
 800623c:	687b      	ldr	r3, [r7, #4]
 800623e:	7c1b      	ldrb	r3, [r3, #16]
 8006240:	2b00      	cmp	r3, #0
 8006242:	d109      	bne.n	8006258 <USBD_CDC_Init+0xda>
    {
      /* Prepare Out endpoint to receive next packet */
      USBD_LL_PrepareReceive(pdev, CDC_OUT_EP, hcdc->RxBuffer,
 8006244:	68bb      	ldr	r3, [r7, #8]
 8006246:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 800624a:	f44f 7300 	mov.w	r3, #512	; 0x200
 800624e:	2101      	movs	r1, #1
 8006250:	6878      	ldr	r0, [r7, #4]
 8006252:	f001 ff0d 	bl	8008070 <USBD_LL_PrepareReceive>
 8006256:	e007      	b.n	8006268 <USBD_CDC_Init+0xea>
                             CDC_DATA_HS_OUT_PACKET_SIZE);
    }
    else
    {
      /* Prepare Out endpoint to receive next packet */
      USBD_LL_PrepareReceive(pdev, CDC_OUT_EP, hcdc->RxBuffer,
 8006258:	68bb      	ldr	r3, [r7, #8]
 800625a:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 800625e:	2340      	movs	r3, #64	; 0x40
 8006260:	2101      	movs	r1, #1
 8006262:	6878      	ldr	r0, [r7, #4]
 8006264:	f001 ff04 	bl	8008070 <USBD_LL_PrepareReceive>
                             CDC_DATA_FS_OUT_PACKET_SIZE);
    }
  }
  return ret;
 8006268:	7bfb      	ldrb	r3, [r7, #15]
}
 800626a:	4618      	mov	r0, r3
 800626c:	3710      	adds	r7, #16
 800626e:	46bd      	mov	sp, r7
 8006270:	bd80      	pop	{r7, pc}

08006272 <USBD_CDC_DeInit>:
  * @param  pdev: device instance
  * @param  cfgidx: Configuration index
  * @retval status
  */
static uint8_t  USBD_CDC_DeInit(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 8006272:	b580      	push	{r7, lr}
 8006274:	b084      	sub	sp, #16
 8006276:	af00      	add	r7, sp, #0
 8006278:	6078      	str	r0, [r7, #4]
 800627a:	460b      	mov	r3, r1
 800627c:	70fb      	strb	r3, [r7, #3]
  uint8_t ret = 0U;
 800627e:	2300      	movs	r3, #0
 8006280:	73fb      	strb	r3, [r7, #15]

  /* Close EP IN */
  USBD_LL_CloseEP(pdev, CDC_IN_EP);
 8006282:	2181      	movs	r1, #129	; 0x81
 8006284:	6878      	ldr	r0, [r7, #4]
 8006286:	f001 fe28 	bl	8007eda <USBD_LL_CloseEP>
  pdev->ep_in[CDC_IN_EP & 0xFU].is_used = 0U;
 800628a:	687b      	ldr	r3, [r7, #4]
 800628c:	2200      	movs	r2, #0
 800628e:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Close EP OUT */
  USBD_LL_CloseEP(pdev, CDC_OUT_EP);
 8006290:	2101      	movs	r1, #1
 8006292:	6878      	ldr	r0, [r7, #4]
 8006294:	f001 fe21 	bl	8007eda <USBD_LL_CloseEP>
  pdev->ep_out[CDC_OUT_EP & 0xFU].is_used = 0U;
 8006298:	687b      	ldr	r3, [r7, #4]
 800629a:	2200      	movs	r2, #0
 800629c:	f8c3 216c 	str.w	r2, [r3, #364]	; 0x16c

  /* Close Command IN EP */
  USBD_LL_CloseEP(pdev, CDC_CMD_EP);
 80062a0:	2182      	movs	r1, #130	; 0x82
 80062a2:	6878      	ldr	r0, [r7, #4]
 80062a4:	f001 fe19 	bl	8007eda <USBD_LL_CloseEP>
  pdev->ep_in[CDC_CMD_EP & 0xFU].is_used = 0U;
 80062a8:	687b      	ldr	r3, [r7, #4]
 80062aa:	2200      	movs	r2, #0
 80062ac:	641a      	str	r2, [r3, #64]	; 0x40

  /* DeInit  physical Interface components */
  if (pdev->pClassData != NULL)
 80062ae:	687b      	ldr	r3, [r7, #4]
 80062b0:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 80062b4:	2b00      	cmp	r3, #0
 80062b6:	d00e      	beq.n	80062d6 <USBD_CDC_DeInit+0x64>
  {
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->DeInit();
 80062b8:	687b      	ldr	r3, [r7, #4]
 80062ba:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 80062be:	685b      	ldr	r3, [r3, #4]
 80062c0:	4798      	blx	r3
    USBD_free(pdev->pClassData);
 80062c2:	687b      	ldr	r3, [r7, #4]
 80062c4:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 80062c8:	4618      	mov	r0, r3
 80062ca:	f001 ff13 	bl	80080f4 <USBD_static_free>
    pdev->pClassData = NULL;
 80062ce:	687b      	ldr	r3, [r7, #4]
 80062d0:	2200      	movs	r2, #0
 80062d2:	f8c3 22b8 	str.w	r2, [r3, #696]	; 0x2b8
  }

  return ret;
 80062d6:	7bfb      	ldrb	r3, [r7, #15]
}
 80062d8:	4618      	mov	r0, r3
 80062da:	3710      	adds	r7, #16
 80062dc:	46bd      	mov	sp, r7
 80062de:	bd80      	pop	{r7, pc}

080062e0 <USBD_CDC_Setup>:
  * @param  req: usb requests
  * @retval status
  */
static uint8_t  USBD_CDC_Setup(USBD_HandleTypeDef *pdev,
                               USBD_SetupReqTypedef *req)
{
 80062e0:	b580      	push	{r7, lr}
 80062e2:	b086      	sub	sp, #24
 80062e4:	af00      	add	r7, sp, #0
 80062e6:	6078      	str	r0, [r7, #4]
 80062e8:	6039      	str	r1, [r7, #0]
  USBD_CDC_HandleTypeDef   *hcdc = (USBD_CDC_HandleTypeDef *) pdev->pClassData;
 80062ea:	687b      	ldr	r3, [r7, #4]
 80062ec:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 80062f0:	613b      	str	r3, [r7, #16]
  uint8_t ifalt = 0U;
 80062f2:	2300      	movs	r3, #0
 80062f4:	73fb      	strb	r3, [r7, #15]
  uint16_t status_info = 0U;
 80062f6:	2300      	movs	r3, #0
 80062f8:	81bb      	strh	r3, [r7, #12]
  uint8_t ret = USBD_OK;
 80062fa:	2300      	movs	r3, #0
 80062fc:	75fb      	strb	r3, [r7, #23]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 80062fe:	683b      	ldr	r3, [r7, #0]
 8006300:	781b      	ldrb	r3, [r3, #0]
 8006302:	f003 0360 	and.w	r3, r3, #96	; 0x60
 8006306:	2b00      	cmp	r3, #0
 8006308:	d039      	beq.n	800637e <USBD_CDC_Setup+0x9e>
 800630a:	2b20      	cmp	r3, #32
 800630c:	d17c      	bne.n	8006408 <USBD_CDC_Setup+0x128>
  {
    case USB_REQ_TYPE_CLASS :
      if (req->wLength)
 800630e:	683b      	ldr	r3, [r7, #0]
 8006310:	88db      	ldrh	r3, [r3, #6]
 8006312:	2b00      	cmp	r3, #0
 8006314:	d029      	beq.n	800636a <USBD_CDC_Setup+0x8a>
      {
        if (req->bmRequest & 0x80U)
 8006316:	683b      	ldr	r3, [r7, #0]
 8006318:	781b      	ldrb	r3, [r3, #0]
 800631a:	b25b      	sxtb	r3, r3
 800631c:	2b00      	cmp	r3, #0
 800631e:	da11      	bge.n	8006344 <USBD_CDC_Setup+0x64>
        {
          ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(req->bRequest,
 8006320:	687b      	ldr	r3, [r7, #4]
 8006322:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 8006326:	689b      	ldr	r3, [r3, #8]
 8006328:	683a      	ldr	r2, [r7, #0]
 800632a:	7850      	ldrb	r0, [r2, #1]
                                                            (uint8_t *)(void *)hcdc->data,
 800632c:	6939      	ldr	r1, [r7, #16]
          ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(req->bRequest,
 800632e:	683a      	ldr	r2, [r7, #0]
 8006330:	88d2      	ldrh	r2, [r2, #6]
 8006332:	4798      	blx	r3
                                                            req->wLength);

          USBD_CtlSendData(pdev, (uint8_t *)(void *)hcdc->data, req->wLength);
 8006334:	6939      	ldr	r1, [r7, #16]
 8006336:	683b      	ldr	r3, [r7, #0]
 8006338:	88db      	ldrh	r3, [r3, #6]
 800633a:	461a      	mov	r2, r3
 800633c:	6878      	ldr	r0, [r7, #4]
 800633e:	f001 f9f9 	bl	8007734 <USBD_CtlSendData>
      else
      {
        ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(req->bRequest,
                                                          (uint8_t *)(void *)req, 0U);
      }
      break;
 8006342:	e068      	b.n	8006416 <USBD_CDC_Setup+0x136>
          hcdc->CmdOpCode = req->bRequest;
 8006344:	683b      	ldr	r3, [r7, #0]
 8006346:	785a      	ldrb	r2, [r3, #1]
 8006348:	693b      	ldr	r3, [r7, #16]
 800634a:	f883 2200 	strb.w	r2, [r3, #512]	; 0x200
          hcdc->CmdLength = (uint8_t)req->wLength;
 800634e:	683b      	ldr	r3, [r7, #0]
 8006350:	88db      	ldrh	r3, [r3, #6]
 8006352:	b2da      	uxtb	r2, r3
 8006354:	693b      	ldr	r3, [r7, #16]
 8006356:	f883 2201 	strb.w	r2, [r3, #513]	; 0x201
          USBD_CtlPrepareRx(pdev, (uint8_t *)(void *)hcdc->data, req->wLength);
 800635a:	6939      	ldr	r1, [r7, #16]
 800635c:	683b      	ldr	r3, [r7, #0]
 800635e:	88db      	ldrh	r3, [r3, #6]
 8006360:	461a      	mov	r2, r3
 8006362:	6878      	ldr	r0, [r7, #4]
 8006364:	f001 fa14 	bl	8007790 <USBD_CtlPrepareRx>
      break;
 8006368:	e055      	b.n	8006416 <USBD_CDC_Setup+0x136>
        ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(req->bRequest,
 800636a:	687b      	ldr	r3, [r7, #4]
 800636c:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 8006370:	689b      	ldr	r3, [r3, #8]
 8006372:	683a      	ldr	r2, [r7, #0]
 8006374:	7850      	ldrb	r0, [r2, #1]
 8006376:	2200      	movs	r2, #0
 8006378:	6839      	ldr	r1, [r7, #0]
 800637a:	4798      	blx	r3
      break;
 800637c:	e04b      	b.n	8006416 <USBD_CDC_Setup+0x136>

    case USB_REQ_TYPE_STANDARD:
      switch (req->bRequest)
 800637e:	683b      	ldr	r3, [r7, #0]
 8006380:	785b      	ldrb	r3, [r3, #1]
 8006382:	2b0a      	cmp	r3, #10
 8006384:	d017      	beq.n	80063b6 <USBD_CDC_Setup+0xd6>
 8006386:	2b0b      	cmp	r3, #11
 8006388:	d029      	beq.n	80063de <USBD_CDC_Setup+0xfe>
 800638a:	2b00      	cmp	r3, #0
 800638c:	d133      	bne.n	80063f6 <USBD_CDC_Setup+0x116>
      {
        case USB_REQ_GET_STATUS:
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800638e:	687b      	ldr	r3, [r7, #4]
 8006390:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8006394:	2b03      	cmp	r3, #3
 8006396:	d107      	bne.n	80063a8 <USBD_CDC_Setup+0xc8>
          {
            USBD_CtlSendData(pdev, (uint8_t *)(void *)&status_info, 2U);
 8006398:	f107 030c 	add.w	r3, r7, #12
 800639c:	2202      	movs	r2, #2
 800639e:	4619      	mov	r1, r3
 80063a0:	6878      	ldr	r0, [r7, #4]
 80063a2:	f001 f9c7 	bl	8007734 <USBD_CtlSendData>
          else
          {
            USBD_CtlError(pdev, req);
            ret = USBD_FAIL;
          }
          break;
 80063a6:	e02e      	b.n	8006406 <USBD_CDC_Setup+0x126>
            USBD_CtlError(pdev, req);
 80063a8:	6839      	ldr	r1, [r7, #0]
 80063aa:	6878      	ldr	r0, [r7, #4]
 80063ac:	f001 f958 	bl	8007660 <USBD_CtlError>
            ret = USBD_FAIL;
 80063b0:	2302      	movs	r3, #2
 80063b2:	75fb      	strb	r3, [r7, #23]
          break;
 80063b4:	e027      	b.n	8006406 <USBD_CDC_Setup+0x126>

        case USB_REQ_GET_INTERFACE:
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 80063b6:	687b      	ldr	r3, [r7, #4]
 80063b8:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 80063bc:	2b03      	cmp	r3, #3
 80063be:	d107      	bne.n	80063d0 <USBD_CDC_Setup+0xf0>
          {
            USBD_CtlSendData(pdev, &ifalt, 1U);
 80063c0:	f107 030f 	add.w	r3, r7, #15
 80063c4:	2201      	movs	r2, #1
 80063c6:	4619      	mov	r1, r3
 80063c8:	6878      	ldr	r0, [r7, #4]
 80063ca:	f001 f9b3 	bl	8007734 <USBD_CtlSendData>
          else
          {
            USBD_CtlError(pdev, req);
            ret = USBD_FAIL;
          }
          break;
 80063ce:	e01a      	b.n	8006406 <USBD_CDC_Setup+0x126>
            USBD_CtlError(pdev, req);
 80063d0:	6839      	ldr	r1, [r7, #0]
 80063d2:	6878      	ldr	r0, [r7, #4]
 80063d4:	f001 f944 	bl	8007660 <USBD_CtlError>
            ret = USBD_FAIL;
 80063d8:	2302      	movs	r3, #2
 80063da:	75fb      	strb	r3, [r7, #23]
          break;
 80063dc:	e013      	b.n	8006406 <USBD_CDC_Setup+0x126>

        case USB_REQ_SET_INTERFACE:
          if (pdev->dev_state != USBD_STATE_CONFIGURED)
 80063de:	687b      	ldr	r3, [r7, #4]
 80063e0:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 80063e4:	2b03      	cmp	r3, #3
 80063e6:	d00d      	beq.n	8006404 <USBD_CDC_Setup+0x124>
          {
            USBD_CtlError(pdev, req);
 80063e8:	6839      	ldr	r1, [r7, #0]
 80063ea:	6878      	ldr	r0, [r7, #4]
 80063ec:	f001 f938 	bl	8007660 <USBD_CtlError>
            ret = USBD_FAIL;
 80063f0:	2302      	movs	r3, #2
 80063f2:	75fb      	strb	r3, [r7, #23]
          }
          break;
 80063f4:	e006      	b.n	8006404 <USBD_CDC_Setup+0x124>

        default:
          USBD_CtlError(pdev, req);
 80063f6:	6839      	ldr	r1, [r7, #0]
 80063f8:	6878      	ldr	r0, [r7, #4]
 80063fa:	f001 f931 	bl	8007660 <USBD_CtlError>
          ret = USBD_FAIL;
 80063fe:	2302      	movs	r3, #2
 8006400:	75fb      	strb	r3, [r7, #23]
          break;
 8006402:	e000      	b.n	8006406 <USBD_CDC_Setup+0x126>
          break;
 8006404:	bf00      	nop
      }
      break;
 8006406:	e006      	b.n	8006416 <USBD_CDC_Setup+0x136>

    default:
      USBD_CtlError(pdev, req);
 8006408:	6839      	ldr	r1, [r7, #0]
 800640a:	6878      	ldr	r0, [r7, #4]
 800640c:	f001 f928 	bl	8007660 <USBD_CtlError>
      ret = USBD_FAIL;
 8006410:	2302      	movs	r3, #2
 8006412:	75fb      	strb	r3, [r7, #23]
      break;
 8006414:	bf00      	nop
  }

  return ret;
 8006416:	7dfb      	ldrb	r3, [r7, #23]
}
 8006418:	4618      	mov	r0, r3
 800641a:	3718      	adds	r7, #24
 800641c:	46bd      	mov	sp, r7
 800641e:	bd80      	pop	{r7, pc}

08006420 <USBD_CDC_DataIn>:
  * @param  pdev: device instance
  * @param  epnum: endpoint number
  * @retval status
  */
static uint8_t  USBD_CDC_DataIn(USBD_HandleTypeDef *pdev, uint8_t epnum)
{
 8006420:	b580      	push	{r7, lr}
 8006422:	b084      	sub	sp, #16
 8006424:	af00      	add	r7, sp, #0
 8006426:	6078      	str	r0, [r7, #4]
 8006428:	460b      	mov	r3, r1
 800642a:	70fb      	strb	r3, [r7, #3]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassData;
 800642c:	687b      	ldr	r3, [r7, #4]
 800642e:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8006432:	60fb      	str	r3, [r7, #12]
  PCD_HandleTypeDef *hpcd = pdev->pData;
 8006434:	687b      	ldr	r3, [r7, #4]
 8006436:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 800643a:	60bb      	str	r3, [r7, #8]

  if (pdev->pClassData != NULL)
 800643c:	687b      	ldr	r3, [r7, #4]
 800643e:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8006442:	2b00      	cmp	r3, #0
 8006444:	d03a      	beq.n	80064bc <USBD_CDC_DataIn+0x9c>
  {
    if ((pdev->ep_in[epnum].total_length > 0U) && ((pdev->ep_in[epnum].total_length % hpcd->IN_ep[epnum].maxpacket) == 0U))
 8006446:	78fa      	ldrb	r2, [r7, #3]
 8006448:	6879      	ldr	r1, [r7, #4]
 800644a:	4613      	mov	r3, r2
 800644c:	009b      	lsls	r3, r3, #2
 800644e:	4413      	add	r3, r2
 8006450:	009b      	lsls	r3, r3, #2
 8006452:	440b      	add	r3, r1
 8006454:	331c      	adds	r3, #28
 8006456:	681b      	ldr	r3, [r3, #0]
 8006458:	2b00      	cmp	r3, #0
 800645a:	d029      	beq.n	80064b0 <USBD_CDC_DataIn+0x90>
 800645c:	78fa      	ldrb	r2, [r7, #3]
 800645e:	6879      	ldr	r1, [r7, #4]
 8006460:	4613      	mov	r3, r2
 8006462:	009b      	lsls	r3, r3, #2
 8006464:	4413      	add	r3, r2
 8006466:	009b      	lsls	r3, r3, #2
 8006468:	440b      	add	r3, r1
 800646a:	331c      	adds	r3, #28
 800646c:	681a      	ldr	r2, [r3, #0]
 800646e:	78f9      	ldrb	r1, [r7, #3]
 8006470:	68b8      	ldr	r0, [r7, #8]
 8006472:	460b      	mov	r3, r1
 8006474:	009b      	lsls	r3, r3, #2
 8006476:	440b      	add	r3, r1
 8006478:	00db      	lsls	r3, r3, #3
 800647a:	4403      	add	r3, r0
 800647c:	3338      	adds	r3, #56	; 0x38
 800647e:	681b      	ldr	r3, [r3, #0]
 8006480:	fbb2 f1f3 	udiv	r1, r2, r3
 8006484:	fb03 f301 	mul.w	r3, r3, r1
 8006488:	1ad3      	subs	r3, r2, r3
 800648a:	2b00      	cmp	r3, #0
 800648c:	d110      	bne.n	80064b0 <USBD_CDC_DataIn+0x90>
    {
      /* Update the packet total length */
      pdev->ep_in[epnum].total_length = 0U;
 800648e:	78fa      	ldrb	r2, [r7, #3]
 8006490:	6879      	ldr	r1, [r7, #4]
 8006492:	4613      	mov	r3, r2
 8006494:	009b      	lsls	r3, r3, #2
 8006496:	4413      	add	r3, r2
 8006498:	009b      	lsls	r3, r3, #2
 800649a:	440b      	add	r3, r1
 800649c:	331c      	adds	r3, #28
 800649e:	2200      	movs	r2, #0
 80064a0:	601a      	str	r2, [r3, #0]

      /* Send ZLP */
      USBD_LL_Transmit(pdev, epnum, NULL, 0U);
 80064a2:	78f9      	ldrb	r1, [r7, #3]
 80064a4:	2300      	movs	r3, #0
 80064a6:	2200      	movs	r2, #0
 80064a8:	6878      	ldr	r0, [r7, #4]
 80064aa:	f001 fdbe 	bl	800802a <USBD_LL_Transmit>
 80064ae:	e003      	b.n	80064b8 <USBD_CDC_DataIn+0x98>
    }
    else
    {
      hcdc->TxState = 0U;
 80064b0:	68fb      	ldr	r3, [r7, #12]
 80064b2:	2200      	movs	r2, #0
 80064b4:	f8c3 2214 	str.w	r2, [r3, #532]	; 0x214
    }
    return USBD_OK;
 80064b8:	2300      	movs	r3, #0
 80064ba:	e000      	b.n	80064be <USBD_CDC_DataIn+0x9e>
  }
  else
  {
    return USBD_FAIL;
 80064bc:	2302      	movs	r3, #2
  }
}
 80064be:	4618      	mov	r0, r3
 80064c0:	3710      	adds	r7, #16
 80064c2:	46bd      	mov	sp, r7
 80064c4:	bd80      	pop	{r7, pc}

080064c6 <USBD_CDC_DataOut>:
  * @param  pdev: device instance
  * @param  epnum: endpoint number
  * @retval status
  */
static uint8_t  USBD_CDC_DataOut(USBD_HandleTypeDef *pdev, uint8_t epnum)
{
 80064c6:	b580      	push	{r7, lr}
 80064c8:	b084      	sub	sp, #16
 80064ca:	af00      	add	r7, sp, #0
 80064cc:	6078      	str	r0, [r7, #4]
 80064ce:	460b      	mov	r3, r1
 80064d0:	70fb      	strb	r3, [r7, #3]
  USBD_CDC_HandleTypeDef   *hcdc = (USBD_CDC_HandleTypeDef *) pdev->pClassData;
 80064d2:	687b      	ldr	r3, [r7, #4]
 80064d4:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 80064d8:	60fb      	str	r3, [r7, #12]

  /* Get the received data length */
  hcdc->RxLength = USBD_LL_GetRxDataSize(pdev, epnum);
 80064da:	78fb      	ldrb	r3, [r7, #3]
 80064dc:	4619      	mov	r1, r3
 80064de:	6878      	ldr	r0, [r7, #4]
 80064e0:	f001 fde9 	bl	80080b6 <USBD_LL_GetRxDataSize>
 80064e4:	4602      	mov	r2, r0
 80064e6:	68fb      	ldr	r3, [r7, #12]
 80064e8:	f8c3 220c 	str.w	r2, [r3, #524]	; 0x20c

  /* USB data will be immediately processed, this allow next USB traffic being
  NAKed till the end of the application Xfer */
  if (pdev->pClassData != NULL)
 80064ec:	687b      	ldr	r3, [r7, #4]
 80064ee:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 80064f2:	2b00      	cmp	r3, #0
 80064f4:	d00d      	beq.n	8006512 <USBD_CDC_DataOut+0x4c>
  {
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Receive(hcdc->RxBuffer, &hcdc->RxLength);
 80064f6:	687b      	ldr	r3, [r7, #4]
 80064f8:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 80064fc:	68db      	ldr	r3, [r3, #12]
 80064fe:	68fa      	ldr	r2, [r7, #12]
 8006500:	f8d2 0204 	ldr.w	r0, [r2, #516]	; 0x204
 8006504:	68fa      	ldr	r2, [r7, #12]
 8006506:	f502 7203 	add.w	r2, r2, #524	; 0x20c
 800650a:	4611      	mov	r1, r2
 800650c:	4798      	blx	r3

    return USBD_OK;
 800650e:	2300      	movs	r3, #0
 8006510:	e000      	b.n	8006514 <USBD_CDC_DataOut+0x4e>
  }
  else
  {
    return USBD_FAIL;
 8006512:	2302      	movs	r3, #2
  }
}
 8006514:	4618      	mov	r0, r3
 8006516:	3710      	adds	r7, #16
 8006518:	46bd      	mov	sp, r7
 800651a:	bd80      	pop	{r7, pc}

0800651c <USBD_CDC_EP0_RxReady>:
  *         Handle EP0 Rx Ready event
  * @param  pdev: device instance
  * @retval status
  */
static uint8_t  USBD_CDC_EP0_RxReady(USBD_HandleTypeDef *pdev)
{
 800651c:	b580      	push	{r7, lr}
 800651e:	b084      	sub	sp, #16
 8006520:	af00      	add	r7, sp, #0
 8006522:	6078      	str	r0, [r7, #4]
  USBD_CDC_HandleTypeDef   *hcdc = (USBD_CDC_HandleTypeDef *) pdev->pClassData;
 8006524:	687b      	ldr	r3, [r7, #4]
 8006526:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800652a:	60fb      	str	r3, [r7, #12]

  if ((pdev->pUserData != NULL) && (hcdc->CmdOpCode != 0xFFU))
 800652c:	687b      	ldr	r3, [r7, #4]
 800652e:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 8006532:	2b00      	cmp	r3, #0
 8006534:	d015      	beq.n	8006562 <USBD_CDC_EP0_RxReady+0x46>
 8006536:	68fb      	ldr	r3, [r7, #12]
 8006538:	f893 3200 	ldrb.w	r3, [r3, #512]	; 0x200
 800653c:	2bff      	cmp	r3, #255	; 0xff
 800653e:	d010      	beq.n	8006562 <USBD_CDC_EP0_RxReady+0x46>
  {
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(hcdc->CmdOpCode,
 8006540:	687b      	ldr	r3, [r7, #4]
 8006542:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 8006546:	689b      	ldr	r3, [r3, #8]
 8006548:	68fa      	ldr	r2, [r7, #12]
 800654a:	f892 0200 	ldrb.w	r0, [r2, #512]	; 0x200
                                                      (uint8_t *)(void *)hcdc->data,
 800654e:	68f9      	ldr	r1, [r7, #12]
                                                      (uint16_t)hcdc->CmdLength);
 8006550:	68fa      	ldr	r2, [r7, #12]
 8006552:	f892 2201 	ldrb.w	r2, [r2, #513]	; 0x201
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(hcdc->CmdOpCode,
 8006556:	b292      	uxth	r2, r2
 8006558:	4798      	blx	r3
    hcdc->CmdOpCode = 0xFFU;
 800655a:	68fb      	ldr	r3, [r7, #12]
 800655c:	22ff      	movs	r2, #255	; 0xff
 800655e:	f883 2200 	strb.w	r2, [r3, #512]	; 0x200

  }
  return USBD_OK;
 8006562:	2300      	movs	r3, #0
}
 8006564:	4618      	mov	r0, r3
 8006566:	3710      	adds	r7, #16
 8006568:	46bd      	mov	sp, r7
 800656a:	bd80      	pop	{r7, pc}

0800656c <USBD_CDC_GetFSCfgDesc>:
  * @param  speed : current device speed
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t  *USBD_CDC_GetFSCfgDesc(uint16_t *length)
{
 800656c:	b480      	push	{r7}
 800656e:	b083      	sub	sp, #12
 8006570:	af00      	add	r7, sp, #0
 8006572:	6078      	str	r0, [r7, #4]
  *length = sizeof(USBD_CDC_CfgFSDesc);
 8006574:	687b      	ldr	r3, [r7, #4]
 8006576:	2243      	movs	r2, #67	; 0x43
 8006578:	801a      	strh	r2, [r3, #0]
  return USBD_CDC_CfgFSDesc;
 800657a:	4b03      	ldr	r3, [pc, #12]	; (8006588 <USBD_CDC_GetFSCfgDesc+0x1c>)
}
 800657c:	4618      	mov	r0, r3
 800657e:	370c      	adds	r7, #12
 8006580:	46bd      	mov	sp, r7
 8006582:	bc80      	pop	{r7}
 8006584:	4770      	bx	lr
 8006586:	bf00      	nop
 8006588:	20000094 	.word	0x20000094

0800658c <USBD_CDC_GetHSCfgDesc>:
  * @param  speed : current device speed
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t  *USBD_CDC_GetHSCfgDesc(uint16_t *length)
{
 800658c:	b480      	push	{r7}
 800658e:	b083      	sub	sp, #12
 8006590:	af00      	add	r7, sp, #0
 8006592:	6078      	str	r0, [r7, #4]
  *length = sizeof(USBD_CDC_CfgHSDesc);
 8006594:	687b      	ldr	r3, [r7, #4]
 8006596:	2243      	movs	r2, #67	; 0x43
 8006598:	801a      	strh	r2, [r3, #0]
  return USBD_CDC_CfgHSDesc;
 800659a:	4b03      	ldr	r3, [pc, #12]	; (80065a8 <USBD_CDC_GetHSCfgDesc+0x1c>)
}
 800659c:	4618      	mov	r0, r3
 800659e:	370c      	adds	r7, #12
 80065a0:	46bd      	mov	sp, r7
 80065a2:	bc80      	pop	{r7}
 80065a4:	4770      	bx	lr
 80065a6:	bf00      	nop
 80065a8:	20000050 	.word	0x20000050

080065ac <USBD_CDC_GetOtherSpeedCfgDesc>:
  * @param  speed : current device speed
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t  *USBD_CDC_GetOtherSpeedCfgDesc(uint16_t *length)
{
 80065ac:	b480      	push	{r7}
 80065ae:	b083      	sub	sp, #12
 80065b0:	af00      	add	r7, sp, #0
 80065b2:	6078      	str	r0, [r7, #4]
  *length = sizeof(USBD_CDC_OtherSpeedCfgDesc);
 80065b4:	687b      	ldr	r3, [r7, #4]
 80065b6:	2243      	movs	r2, #67	; 0x43
 80065b8:	801a      	strh	r2, [r3, #0]
  return USBD_CDC_OtherSpeedCfgDesc;
 80065ba:	4b03      	ldr	r3, [pc, #12]	; (80065c8 <USBD_CDC_GetOtherSpeedCfgDesc+0x1c>)
}
 80065bc:	4618      	mov	r0, r3
 80065be:	370c      	adds	r7, #12
 80065c0:	46bd      	mov	sp, r7
 80065c2:	bc80      	pop	{r7}
 80065c4:	4770      	bx	lr
 80065c6:	bf00      	nop
 80065c8:	200000d8 	.word	0x200000d8

080065cc <USBD_CDC_GetDeviceQualifierDescriptor>:
*         return Device Qualifier descriptor
* @param  length : pointer data length
* @retval pointer to descriptor buffer
*/
uint8_t  *USBD_CDC_GetDeviceQualifierDescriptor(uint16_t *length)
{
 80065cc:	b480      	push	{r7}
 80065ce:	b083      	sub	sp, #12
 80065d0:	af00      	add	r7, sp, #0
 80065d2:	6078      	str	r0, [r7, #4]
  *length = sizeof(USBD_CDC_DeviceQualifierDesc);
 80065d4:	687b      	ldr	r3, [r7, #4]
 80065d6:	220a      	movs	r2, #10
 80065d8:	801a      	strh	r2, [r3, #0]
  return USBD_CDC_DeviceQualifierDesc;
 80065da:	4b03      	ldr	r3, [pc, #12]	; (80065e8 <USBD_CDC_GetDeviceQualifierDescriptor+0x1c>)
}
 80065dc:	4618      	mov	r0, r3
 80065de:	370c      	adds	r7, #12
 80065e0:	46bd      	mov	sp, r7
 80065e2:	bc80      	pop	{r7}
 80065e4:	4770      	bx	lr
 80065e6:	bf00      	nop
 80065e8:	2000000c 	.word	0x2000000c

080065ec <USBD_CDC_RegisterInterface>:
  * @param  fops: CD  Interface callback
  * @retval status
  */
uint8_t  USBD_CDC_RegisterInterface(USBD_HandleTypeDef   *pdev,
                                    USBD_CDC_ItfTypeDef *fops)
{
 80065ec:	b480      	push	{r7}
 80065ee:	b085      	sub	sp, #20
 80065f0:	af00      	add	r7, sp, #0
 80065f2:	6078      	str	r0, [r7, #4]
 80065f4:	6039      	str	r1, [r7, #0]
  uint8_t  ret = USBD_FAIL;
 80065f6:	2302      	movs	r3, #2
 80065f8:	73fb      	strb	r3, [r7, #15]

  if (fops != NULL)
 80065fa:	683b      	ldr	r3, [r7, #0]
 80065fc:	2b00      	cmp	r3, #0
 80065fe:	d005      	beq.n	800660c <USBD_CDC_RegisterInterface+0x20>
  {
    pdev->pUserData = fops;
 8006600:	687b      	ldr	r3, [r7, #4]
 8006602:	683a      	ldr	r2, [r7, #0]
 8006604:	f8c3 22bc 	str.w	r2, [r3, #700]	; 0x2bc
    ret = USBD_OK;
 8006608:	2300      	movs	r3, #0
 800660a:	73fb      	strb	r3, [r7, #15]
  }

  return ret;
 800660c:	7bfb      	ldrb	r3, [r7, #15]
}
 800660e:	4618      	mov	r0, r3
 8006610:	3714      	adds	r7, #20
 8006612:	46bd      	mov	sp, r7
 8006614:	bc80      	pop	{r7}
 8006616:	4770      	bx	lr

08006618 <USBD_CDC_SetTxBuffer>:
  * @retval status
  */
uint8_t  USBD_CDC_SetTxBuffer(USBD_HandleTypeDef   *pdev,
                              uint8_t  *pbuff,
                              uint16_t length)
{
 8006618:	b480      	push	{r7}
 800661a:	b087      	sub	sp, #28
 800661c:	af00      	add	r7, sp, #0
 800661e:	60f8      	str	r0, [r7, #12]
 8006620:	60b9      	str	r1, [r7, #8]
 8006622:	4613      	mov	r3, r2
 8006624:	80fb      	strh	r3, [r7, #6]
  USBD_CDC_HandleTypeDef   *hcdc = (USBD_CDC_HandleTypeDef *) pdev->pClassData;
 8006626:	68fb      	ldr	r3, [r7, #12]
 8006628:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800662c:	617b      	str	r3, [r7, #20]

  hcdc->TxBuffer = pbuff;
 800662e:	697b      	ldr	r3, [r7, #20]
 8006630:	68ba      	ldr	r2, [r7, #8]
 8006632:	f8c3 2208 	str.w	r2, [r3, #520]	; 0x208
  hcdc->TxLength = length;
 8006636:	88fa      	ldrh	r2, [r7, #6]
 8006638:	697b      	ldr	r3, [r7, #20]
 800663a:	f8c3 2210 	str.w	r2, [r3, #528]	; 0x210

  return USBD_OK;
 800663e:	2300      	movs	r3, #0
}
 8006640:	4618      	mov	r0, r3
 8006642:	371c      	adds	r7, #28
 8006644:	46bd      	mov	sp, r7
 8006646:	bc80      	pop	{r7}
 8006648:	4770      	bx	lr

0800664a <USBD_CDC_SetRxBuffer>:
  * @param  pbuff: Rx Buffer
  * @retval status
  */
uint8_t  USBD_CDC_SetRxBuffer(USBD_HandleTypeDef   *pdev,
                              uint8_t  *pbuff)
{
 800664a:	b480      	push	{r7}
 800664c:	b085      	sub	sp, #20
 800664e:	af00      	add	r7, sp, #0
 8006650:	6078      	str	r0, [r7, #4]
 8006652:	6039      	str	r1, [r7, #0]
  USBD_CDC_HandleTypeDef   *hcdc = (USBD_CDC_HandleTypeDef *) pdev->pClassData;
 8006654:	687b      	ldr	r3, [r7, #4]
 8006656:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800665a:	60fb      	str	r3, [r7, #12]

  hcdc->RxBuffer = pbuff;
 800665c:	68fb      	ldr	r3, [r7, #12]
 800665e:	683a      	ldr	r2, [r7, #0]
 8006660:	f8c3 2204 	str.w	r2, [r3, #516]	; 0x204

  return USBD_OK;
 8006664:	2300      	movs	r3, #0
}
 8006666:	4618      	mov	r0, r3
 8006668:	3714      	adds	r7, #20
 800666a:	46bd      	mov	sp, r7
 800666c:	bc80      	pop	{r7}
 800666e:	4770      	bx	lr

08006670 <USBD_CDC_TransmitPacket>:
  *         Transmit packet on IN endpoint
  * @param  pdev: device instance
  * @retval status
  */
uint8_t  USBD_CDC_TransmitPacket(USBD_HandleTypeDef *pdev)
{
 8006670:	b580      	push	{r7, lr}
 8006672:	b084      	sub	sp, #16
 8006674:	af00      	add	r7, sp, #0
 8006676:	6078      	str	r0, [r7, #4]
  USBD_CDC_HandleTypeDef   *hcdc = (USBD_CDC_HandleTypeDef *) pdev->pClassData;
 8006678:	687b      	ldr	r3, [r7, #4]
 800667a:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800667e:	60fb      	str	r3, [r7, #12]

  if (pdev->pClassData != NULL)
 8006680:	687b      	ldr	r3, [r7, #4]
 8006682:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8006686:	2b00      	cmp	r3, #0
 8006688:	d01c      	beq.n	80066c4 <USBD_CDC_TransmitPacket+0x54>
  {
    if (hcdc->TxState == 0U)
 800668a:	68fb      	ldr	r3, [r7, #12]
 800668c:	f8d3 3214 	ldr.w	r3, [r3, #532]	; 0x214
 8006690:	2b00      	cmp	r3, #0
 8006692:	d115      	bne.n	80066c0 <USBD_CDC_TransmitPacket+0x50>
    {
      /* Tx Transfer in progress */
      hcdc->TxState = 1U;
 8006694:	68fb      	ldr	r3, [r7, #12]
 8006696:	2201      	movs	r2, #1
 8006698:	f8c3 2214 	str.w	r2, [r3, #532]	; 0x214

      /* Update the packet total length */
      pdev->ep_in[CDC_IN_EP & 0xFU].total_length = hcdc->TxLength;
 800669c:	68fb      	ldr	r3, [r7, #12]
 800669e:	f8d3 2210 	ldr.w	r2, [r3, #528]	; 0x210
 80066a2:	687b      	ldr	r3, [r7, #4]
 80066a4:	631a      	str	r2, [r3, #48]	; 0x30

      /* Transmit next packet */
      USBD_LL_Transmit(pdev, CDC_IN_EP, hcdc->TxBuffer,
 80066a6:	68fb      	ldr	r3, [r7, #12]
 80066a8:	f8d3 2208 	ldr.w	r2, [r3, #520]	; 0x208
                       (uint16_t)hcdc->TxLength);
 80066ac:	68fb      	ldr	r3, [r7, #12]
 80066ae:	f8d3 3210 	ldr.w	r3, [r3, #528]	; 0x210
      USBD_LL_Transmit(pdev, CDC_IN_EP, hcdc->TxBuffer,
 80066b2:	b29b      	uxth	r3, r3
 80066b4:	2181      	movs	r1, #129	; 0x81
 80066b6:	6878      	ldr	r0, [r7, #4]
 80066b8:	f001 fcb7 	bl	800802a <USBD_LL_Transmit>

      return USBD_OK;
 80066bc:	2300      	movs	r3, #0
 80066be:	e002      	b.n	80066c6 <USBD_CDC_TransmitPacket+0x56>
    }
    else
    {
      return USBD_BUSY;
 80066c0:	2301      	movs	r3, #1
 80066c2:	e000      	b.n	80066c6 <USBD_CDC_TransmitPacket+0x56>
    }
  }
  else
  {
    return USBD_FAIL;
 80066c4:	2302      	movs	r3, #2
  }
}
 80066c6:	4618      	mov	r0, r3
 80066c8:	3710      	adds	r7, #16
 80066ca:	46bd      	mov	sp, r7
 80066cc:	bd80      	pop	{r7, pc}

080066ce <USBD_CDC_ReceivePacket>:
  *         prepare OUT Endpoint for reception
  * @param  pdev: device instance
  * @retval status
  */
uint8_t  USBD_CDC_ReceivePacket(USBD_HandleTypeDef *pdev)
{
 80066ce:	b580      	push	{r7, lr}
 80066d0:	b084      	sub	sp, #16
 80066d2:	af00      	add	r7, sp, #0
 80066d4:	6078      	str	r0, [r7, #4]
  USBD_CDC_HandleTypeDef   *hcdc = (USBD_CDC_HandleTypeDef *) pdev->pClassData;
 80066d6:	687b      	ldr	r3, [r7, #4]
 80066d8:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 80066dc:	60fb      	str	r3, [r7, #12]

  /* Suspend or Resume USB Out process */
  if (pdev->pClassData != NULL)
 80066de:	687b      	ldr	r3, [r7, #4]
 80066e0:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 80066e4:	2b00      	cmp	r3, #0
 80066e6:	d017      	beq.n	8006718 <USBD_CDC_ReceivePacket+0x4a>
  {
    if (pdev->dev_speed == USBD_SPEED_HIGH)
 80066e8:	687b      	ldr	r3, [r7, #4]
 80066ea:	7c1b      	ldrb	r3, [r3, #16]
 80066ec:	2b00      	cmp	r3, #0
 80066ee:	d109      	bne.n	8006704 <USBD_CDC_ReceivePacket+0x36>
    {
      /* Prepare Out endpoint to receive next packet */
      USBD_LL_PrepareReceive(pdev,
 80066f0:	68fb      	ldr	r3, [r7, #12]
 80066f2:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 80066f6:	f44f 7300 	mov.w	r3, #512	; 0x200
 80066fa:	2101      	movs	r1, #1
 80066fc:	6878      	ldr	r0, [r7, #4]
 80066fe:	f001 fcb7 	bl	8008070 <USBD_LL_PrepareReceive>
 8006702:	e007      	b.n	8006714 <USBD_CDC_ReceivePacket+0x46>
                             CDC_DATA_HS_OUT_PACKET_SIZE);
    }
    else
    {
      /* Prepare Out endpoint to receive next packet */
      USBD_LL_PrepareReceive(pdev,
 8006704:	68fb      	ldr	r3, [r7, #12]
 8006706:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 800670a:	2340      	movs	r3, #64	; 0x40
 800670c:	2101      	movs	r1, #1
 800670e:	6878      	ldr	r0, [r7, #4]
 8006710:	f001 fcae 	bl	8008070 <USBD_LL_PrepareReceive>
                             CDC_OUT_EP,
                             hcdc->RxBuffer,
                             CDC_DATA_FS_OUT_PACKET_SIZE);
    }
    return USBD_OK;
 8006714:	2300      	movs	r3, #0
 8006716:	e000      	b.n	800671a <USBD_CDC_ReceivePacket+0x4c>
  }
  else
  {
    return USBD_FAIL;
 8006718:	2302      	movs	r3, #2
  }
}
 800671a:	4618      	mov	r0, r3
 800671c:	3710      	adds	r7, #16
 800671e:	46bd      	mov	sp, r7
 8006720:	bd80      	pop	{r7, pc}

08006722 <USBD_Init>:
* @param  id: Low level core index
* @retval None
*/
USBD_StatusTypeDef USBD_Init(USBD_HandleTypeDef *pdev,
                             USBD_DescriptorsTypeDef *pdesc, uint8_t id)
{
 8006722:	b580      	push	{r7, lr}
 8006724:	b084      	sub	sp, #16
 8006726:	af00      	add	r7, sp, #0
 8006728:	60f8      	str	r0, [r7, #12]
 800672a:	60b9      	str	r1, [r7, #8]
 800672c:	4613      	mov	r3, r2
 800672e:	71fb      	strb	r3, [r7, #7]
  /* Check whether the USB Host handle is valid */
  if (pdev == NULL)
 8006730:	68fb      	ldr	r3, [r7, #12]
 8006732:	2b00      	cmp	r3, #0
 8006734:	d101      	bne.n	800673a <USBD_Init+0x18>
  {
#if (USBD_DEBUG_LEVEL > 1U)
    USBD_ErrLog("Invalid Device handle");
#endif
    return USBD_FAIL;
 8006736:	2302      	movs	r3, #2
 8006738:	e01a      	b.n	8006770 <USBD_Init+0x4e>
  }

  /* Unlink previous class*/
  if (pdev->pClass != NULL)
 800673a:	68fb      	ldr	r3, [r7, #12]
 800673c:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8006740:	2b00      	cmp	r3, #0
 8006742:	d003      	beq.n	800674c <USBD_Init+0x2a>
  {
    pdev->pClass = NULL;
 8006744:	68fb      	ldr	r3, [r7, #12]
 8006746:	2200      	movs	r2, #0
 8006748:	f8c3 22b4 	str.w	r2, [r3, #692]	; 0x2b4
  }

  /* Assign USBD Descriptors */
  if (pdesc != NULL)
 800674c:	68bb      	ldr	r3, [r7, #8]
 800674e:	2b00      	cmp	r3, #0
 8006750:	d003      	beq.n	800675a <USBD_Init+0x38>
  {
    pdev->pDesc = pdesc;
 8006752:	68fb      	ldr	r3, [r7, #12]
 8006754:	68ba      	ldr	r2, [r7, #8]
 8006756:	f8c3 22b0 	str.w	r2, [r3, #688]	; 0x2b0
  }

  /* Set Device initial State */
  pdev->dev_state = USBD_STATE_DEFAULT;
 800675a:	68fb      	ldr	r3, [r7, #12]
 800675c:	2201      	movs	r2, #1
 800675e:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
  pdev->id = id;
 8006762:	68fb      	ldr	r3, [r7, #12]
 8006764:	79fa      	ldrb	r2, [r7, #7]
 8006766:	701a      	strb	r2, [r3, #0]
  /* Initialize low level driver */
  USBD_LL_Init(pdev);
 8006768:	68f8      	ldr	r0, [r7, #12]
 800676a:	f001 fb1b 	bl	8007da4 <USBD_LL_Init>

  return USBD_OK;
 800676e:	2300      	movs	r3, #0
}
 8006770:	4618      	mov	r0, r3
 8006772:	3710      	adds	r7, #16
 8006774:	46bd      	mov	sp, r7
 8006776:	bd80      	pop	{r7, pc}

08006778 <USBD_RegisterClass>:
  * @param  pDevice : Device Handle
  * @param  pclass: Class handle
  * @retval USBD Status
  */
USBD_StatusTypeDef  USBD_RegisterClass(USBD_HandleTypeDef *pdev, USBD_ClassTypeDef *pclass)
{
 8006778:	b480      	push	{r7}
 800677a:	b085      	sub	sp, #20
 800677c:	af00      	add	r7, sp, #0
 800677e:	6078      	str	r0, [r7, #4]
 8006780:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef status = USBD_OK;
 8006782:	2300      	movs	r3, #0
 8006784:	73fb      	strb	r3, [r7, #15]
  if (pclass != NULL)
 8006786:	683b      	ldr	r3, [r7, #0]
 8006788:	2b00      	cmp	r3, #0
 800678a:	d006      	beq.n	800679a <USBD_RegisterClass+0x22>
  {
    /* link the class to the USB Device handle */
    pdev->pClass = pclass;
 800678c:	687b      	ldr	r3, [r7, #4]
 800678e:	683a      	ldr	r2, [r7, #0]
 8006790:	f8c3 22b4 	str.w	r2, [r3, #692]	; 0x2b4
    status = USBD_OK;
 8006794:	2300      	movs	r3, #0
 8006796:	73fb      	strb	r3, [r7, #15]
 8006798:	e001      	b.n	800679e <USBD_RegisterClass+0x26>
  else
  {
#if (USBD_DEBUG_LEVEL > 1U)
    USBD_ErrLog("Invalid Class handle");
#endif
    status = USBD_FAIL;
 800679a:	2302      	movs	r3, #2
 800679c:	73fb      	strb	r3, [r7, #15]
  }

  return status;
 800679e:	7bfb      	ldrb	r3, [r7, #15]
}
 80067a0:	4618      	mov	r0, r3
 80067a2:	3714      	adds	r7, #20
 80067a4:	46bd      	mov	sp, r7
 80067a6:	bc80      	pop	{r7}
 80067a8:	4770      	bx	lr

080067aa <USBD_Start>:
  *         Start the USB Device Core.
  * @param  pdev: Device Handle
  * @retval USBD Status
  */
USBD_StatusTypeDef  USBD_Start(USBD_HandleTypeDef *pdev)
{
 80067aa:	b580      	push	{r7, lr}
 80067ac:	b082      	sub	sp, #8
 80067ae:	af00      	add	r7, sp, #0
 80067b0:	6078      	str	r0, [r7, #4]
  /* Start the low level driver  */
  USBD_LL_Start(pdev);
 80067b2:	6878      	ldr	r0, [r7, #4]
 80067b4:	f001 fb50 	bl	8007e58 <USBD_LL_Start>

  return USBD_OK;
 80067b8:	2300      	movs	r3, #0
}
 80067ba:	4618      	mov	r0, r3
 80067bc:	3708      	adds	r7, #8
 80067be:	46bd      	mov	sp, r7
 80067c0:	bd80      	pop	{r7, pc}

080067c2 <USBD_RunTestMode>:
*         Launch test mode process
* @param  pdev: device instance
* @retval status
*/
USBD_StatusTypeDef  USBD_RunTestMode(USBD_HandleTypeDef  *pdev)
{
 80067c2:	b480      	push	{r7}
 80067c4:	b083      	sub	sp, #12
 80067c6:	af00      	add	r7, sp, #0
 80067c8:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument compilation warning */
  UNUSED(pdev);

  return USBD_OK;
 80067ca:	2300      	movs	r3, #0
}
 80067cc:	4618      	mov	r0, r3
 80067ce:	370c      	adds	r7, #12
 80067d0:	46bd      	mov	sp, r7
 80067d2:	bc80      	pop	{r7}
 80067d4:	4770      	bx	lr

080067d6 <USBD_SetClassConfig>:
* @param  cfgidx: configuration index
* @retval status
*/

USBD_StatusTypeDef USBD_SetClassConfig(USBD_HandleTypeDef  *pdev, uint8_t cfgidx)
{
 80067d6:	b580      	push	{r7, lr}
 80067d8:	b084      	sub	sp, #16
 80067da:	af00      	add	r7, sp, #0
 80067dc:	6078      	str	r0, [r7, #4]
 80067de:	460b      	mov	r3, r1
 80067e0:	70fb      	strb	r3, [r7, #3]
  USBD_StatusTypeDef ret = USBD_FAIL;
 80067e2:	2302      	movs	r3, #2
 80067e4:	73fb      	strb	r3, [r7, #15]

  if (pdev->pClass != NULL)
 80067e6:	687b      	ldr	r3, [r7, #4]
 80067e8:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 80067ec:	2b00      	cmp	r3, #0
 80067ee:	d00c      	beq.n	800680a <USBD_SetClassConfig+0x34>
  {
    /* Set configuration  and Start the Class*/
    if (pdev->pClass->Init(pdev, cfgidx) == 0U)
 80067f0:	687b      	ldr	r3, [r7, #4]
 80067f2:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 80067f6:	681b      	ldr	r3, [r3, #0]
 80067f8:	78fa      	ldrb	r2, [r7, #3]
 80067fa:	4611      	mov	r1, r2
 80067fc:	6878      	ldr	r0, [r7, #4]
 80067fe:	4798      	blx	r3
 8006800:	4603      	mov	r3, r0
 8006802:	2b00      	cmp	r3, #0
 8006804:	d101      	bne.n	800680a <USBD_SetClassConfig+0x34>
    {
      ret = USBD_OK;
 8006806:	2300      	movs	r3, #0
 8006808:	73fb      	strb	r3, [r7, #15]
    }
  }

  return ret;
 800680a:	7bfb      	ldrb	r3, [r7, #15]
}
 800680c:	4618      	mov	r0, r3
 800680e:	3710      	adds	r7, #16
 8006810:	46bd      	mov	sp, r7
 8006812:	bd80      	pop	{r7, pc}

08006814 <USBD_ClrClassConfig>:
* @param  pdev: device instance
* @param  cfgidx: configuration index
* @retval status: USBD_StatusTypeDef
*/
USBD_StatusTypeDef USBD_ClrClassConfig(USBD_HandleTypeDef  *pdev, uint8_t cfgidx)
{
 8006814:	b580      	push	{r7, lr}
 8006816:	b082      	sub	sp, #8
 8006818:	af00      	add	r7, sp, #0
 800681a:	6078      	str	r0, [r7, #4]
 800681c:	460b      	mov	r3, r1
 800681e:	70fb      	strb	r3, [r7, #3]
  /* Clear configuration  and De-initialize the Class process*/
  pdev->pClass->DeInit(pdev, cfgidx);
 8006820:	687b      	ldr	r3, [r7, #4]
 8006822:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8006826:	685b      	ldr	r3, [r3, #4]
 8006828:	78fa      	ldrb	r2, [r7, #3]
 800682a:	4611      	mov	r1, r2
 800682c:	6878      	ldr	r0, [r7, #4]
 800682e:	4798      	blx	r3

  return USBD_OK;
 8006830:	2300      	movs	r3, #0
}
 8006832:	4618      	mov	r0, r3
 8006834:	3708      	adds	r7, #8
 8006836:	46bd      	mov	sp, r7
 8006838:	bd80      	pop	{r7, pc}

0800683a <USBD_LL_SetupStage>:
*         Handle the setup stage
* @param  pdev: device instance
* @retval status
*/
USBD_StatusTypeDef USBD_LL_SetupStage(USBD_HandleTypeDef *pdev, uint8_t *psetup)
{
 800683a:	b580      	push	{r7, lr}
 800683c:	b082      	sub	sp, #8
 800683e:	af00      	add	r7, sp, #0
 8006840:	6078      	str	r0, [r7, #4]
 8006842:	6039      	str	r1, [r7, #0]
  USBD_ParseSetupRequest(&pdev->request, psetup);
 8006844:	687b      	ldr	r3, [r7, #4]
 8006846:	f503 732a 	add.w	r3, r3, #680	; 0x2a8
 800684a:	6839      	ldr	r1, [r7, #0]
 800684c:	4618      	mov	r0, r3
 800684e:	f000 fecb 	bl	80075e8 <USBD_ParseSetupRequest>

  pdev->ep0_state = USBD_EP0_SETUP;
 8006852:	687b      	ldr	r3, [r7, #4]
 8006854:	2201      	movs	r2, #1
 8006856:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294

  pdev->ep0_data_len = pdev->request.wLength;
 800685a:	687b      	ldr	r3, [r7, #4]
 800685c:	f8b3 32ae 	ldrh.w	r3, [r3, #686]	; 0x2ae
 8006860:	461a      	mov	r2, r3
 8006862:	687b      	ldr	r3, [r7, #4]
 8006864:	f8c3 2298 	str.w	r2, [r3, #664]	; 0x298

  switch (pdev->request.bmRequest & 0x1FU)
 8006868:	687b      	ldr	r3, [r7, #4]
 800686a:	f893 32a8 	ldrb.w	r3, [r3, #680]	; 0x2a8
 800686e:	f003 031f 	and.w	r3, r3, #31
 8006872:	2b01      	cmp	r3, #1
 8006874:	d00c      	beq.n	8006890 <USBD_LL_SetupStage+0x56>
 8006876:	2b01      	cmp	r3, #1
 8006878:	d302      	bcc.n	8006880 <USBD_LL_SetupStage+0x46>
 800687a:	2b02      	cmp	r3, #2
 800687c:	d010      	beq.n	80068a0 <USBD_LL_SetupStage+0x66>
 800687e:	e017      	b.n	80068b0 <USBD_LL_SetupStage+0x76>
  {
    case USB_REQ_RECIPIENT_DEVICE:
      USBD_StdDevReq(pdev, &pdev->request);
 8006880:	687b      	ldr	r3, [r7, #4]
 8006882:	f503 732a 	add.w	r3, r3, #680	; 0x2a8
 8006886:	4619      	mov	r1, r3
 8006888:	6878      	ldr	r0, [r7, #4]
 800688a:	f000 f9cb 	bl	8006c24 <USBD_StdDevReq>
      break;
 800688e:	e01a      	b.n	80068c6 <USBD_LL_SetupStage+0x8c>

    case USB_REQ_RECIPIENT_INTERFACE:
      USBD_StdItfReq(pdev, &pdev->request);
 8006890:	687b      	ldr	r3, [r7, #4]
 8006892:	f503 732a 	add.w	r3, r3, #680	; 0x2a8
 8006896:	4619      	mov	r1, r3
 8006898:	6878      	ldr	r0, [r7, #4]
 800689a:	f000 fa2d 	bl	8006cf8 <USBD_StdItfReq>
      break;
 800689e:	e012      	b.n	80068c6 <USBD_LL_SetupStage+0x8c>

    case USB_REQ_RECIPIENT_ENDPOINT:
      USBD_StdEPReq(pdev, &pdev->request);
 80068a0:	687b      	ldr	r3, [r7, #4]
 80068a2:	f503 732a 	add.w	r3, r3, #680	; 0x2a8
 80068a6:	4619      	mov	r1, r3
 80068a8:	6878      	ldr	r0, [r7, #4]
 80068aa:	f000 fa6b 	bl	8006d84 <USBD_StdEPReq>
      break;
 80068ae:	e00a      	b.n	80068c6 <USBD_LL_SetupStage+0x8c>

    default:
      USBD_LL_StallEP(pdev, (pdev->request.bmRequest & 0x80U));
 80068b0:	687b      	ldr	r3, [r7, #4]
 80068b2:	f893 32a8 	ldrb.w	r3, [r3, #680]	; 0x2a8
 80068b6:	f023 037f 	bic.w	r3, r3, #127	; 0x7f
 80068ba:	b2db      	uxtb	r3, r3
 80068bc:	4619      	mov	r1, r3
 80068be:	6878      	ldr	r0, [r7, #4]
 80068c0:	f001 fb2a 	bl	8007f18 <USBD_LL_StallEP>
      break;
 80068c4:	bf00      	nop
  }

  return USBD_OK;
 80068c6:	2300      	movs	r3, #0
}
 80068c8:	4618      	mov	r0, r3
 80068ca:	3708      	adds	r7, #8
 80068cc:	46bd      	mov	sp, r7
 80068ce:	bd80      	pop	{r7, pc}

080068d0 <USBD_LL_DataOutStage>:
* @param  epnum: endpoint index
* @retval status
*/
USBD_StatusTypeDef USBD_LL_DataOutStage(USBD_HandleTypeDef *pdev,
                                        uint8_t epnum, uint8_t *pdata)
{
 80068d0:	b580      	push	{r7, lr}
 80068d2:	b086      	sub	sp, #24
 80068d4:	af00      	add	r7, sp, #0
 80068d6:	60f8      	str	r0, [r7, #12]
 80068d8:	460b      	mov	r3, r1
 80068da:	607a      	str	r2, [r7, #4]
 80068dc:	72fb      	strb	r3, [r7, #11]
  USBD_EndpointTypeDef *pep;

  if (epnum == 0U)
 80068de:	7afb      	ldrb	r3, [r7, #11]
 80068e0:	2b00      	cmp	r3, #0
 80068e2:	d14b      	bne.n	800697c <USBD_LL_DataOutStage+0xac>
  {
    pep = &pdev->ep_out[0];
 80068e4:	68fb      	ldr	r3, [r7, #12]
 80068e6:	f503 73aa 	add.w	r3, r3, #340	; 0x154
 80068ea:	617b      	str	r3, [r7, #20]

    if (pdev->ep0_state == USBD_EP0_DATA_OUT)
 80068ec:	68fb      	ldr	r3, [r7, #12]
 80068ee:	f8d3 3294 	ldr.w	r3, [r3, #660]	; 0x294
 80068f2:	2b03      	cmp	r3, #3
 80068f4:	d134      	bne.n	8006960 <USBD_LL_DataOutStage+0x90>
    {
      if (pep->rem_length > pep->maxpacket)
 80068f6:	697b      	ldr	r3, [r7, #20]
 80068f8:	68da      	ldr	r2, [r3, #12]
 80068fa:	697b      	ldr	r3, [r7, #20]
 80068fc:	691b      	ldr	r3, [r3, #16]
 80068fe:	429a      	cmp	r2, r3
 8006900:	d919      	bls.n	8006936 <USBD_LL_DataOutStage+0x66>
      {
        pep->rem_length -= pep->maxpacket;
 8006902:	697b      	ldr	r3, [r7, #20]
 8006904:	68da      	ldr	r2, [r3, #12]
 8006906:	697b      	ldr	r3, [r7, #20]
 8006908:	691b      	ldr	r3, [r3, #16]
 800690a:	1ad2      	subs	r2, r2, r3
 800690c:	697b      	ldr	r3, [r7, #20]
 800690e:	60da      	str	r2, [r3, #12]

        USBD_CtlContinueRx(pdev, pdata,
                           (uint16_t)MIN(pep->rem_length, pep->maxpacket));
 8006910:	697b      	ldr	r3, [r7, #20]
 8006912:	68da      	ldr	r2, [r3, #12]
 8006914:	697b      	ldr	r3, [r7, #20]
 8006916:	691b      	ldr	r3, [r3, #16]
        USBD_CtlContinueRx(pdev, pdata,
 8006918:	429a      	cmp	r2, r3
 800691a:	d203      	bcs.n	8006924 <USBD_LL_DataOutStage+0x54>
                           (uint16_t)MIN(pep->rem_length, pep->maxpacket));
 800691c:	697b      	ldr	r3, [r7, #20]
 800691e:	68db      	ldr	r3, [r3, #12]
        USBD_CtlContinueRx(pdev, pdata,
 8006920:	b29b      	uxth	r3, r3
 8006922:	e002      	b.n	800692a <USBD_LL_DataOutStage+0x5a>
                           (uint16_t)MIN(pep->rem_length, pep->maxpacket));
 8006924:	697b      	ldr	r3, [r7, #20]
 8006926:	691b      	ldr	r3, [r3, #16]
        USBD_CtlContinueRx(pdev, pdata,
 8006928:	b29b      	uxth	r3, r3
 800692a:	461a      	mov	r2, r3
 800692c:	6879      	ldr	r1, [r7, #4]
 800692e:	68f8      	ldr	r0, [r7, #12]
 8006930:	f000 ff4c 	bl	80077cc <USBD_CtlContinueRx>
 8006934:	e038      	b.n	80069a8 <USBD_LL_DataOutStage+0xd8>
      }
      else
      {
        if ((pdev->pClass->EP0_RxReady != NULL) &&
 8006936:	68fb      	ldr	r3, [r7, #12]
 8006938:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800693c:	691b      	ldr	r3, [r3, #16]
 800693e:	2b00      	cmp	r3, #0
 8006940:	d00a      	beq.n	8006958 <USBD_LL_DataOutStage+0x88>
            (pdev->dev_state == USBD_STATE_CONFIGURED))
 8006942:	68fb      	ldr	r3, [r7, #12]
 8006944:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
        if ((pdev->pClass->EP0_RxReady != NULL) &&
 8006948:	2b03      	cmp	r3, #3
 800694a:	d105      	bne.n	8006958 <USBD_LL_DataOutStage+0x88>
        {
          pdev->pClass->EP0_RxReady(pdev);
 800694c:	68fb      	ldr	r3, [r7, #12]
 800694e:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8006952:	691b      	ldr	r3, [r3, #16]
 8006954:	68f8      	ldr	r0, [r7, #12]
 8006956:	4798      	blx	r3
        }
        USBD_CtlSendStatus(pdev);
 8006958:	68f8      	ldr	r0, [r7, #12]
 800695a:	f000 ff49 	bl	80077f0 <USBD_CtlSendStatus>
 800695e:	e023      	b.n	80069a8 <USBD_LL_DataOutStage+0xd8>
      }
    }
    else
    {
      if (pdev->ep0_state == USBD_EP0_STATUS_OUT)
 8006960:	68fb      	ldr	r3, [r7, #12]
 8006962:	f8d3 3294 	ldr.w	r3, [r3, #660]	; 0x294
 8006966:	2b05      	cmp	r3, #5
 8006968:	d11e      	bne.n	80069a8 <USBD_LL_DataOutStage+0xd8>
      {
        /*
         * STATUS PHASE completed, update ep0_state to idle
         */
        pdev->ep0_state = USBD_EP0_IDLE;
 800696a:	68fb      	ldr	r3, [r7, #12]
 800696c:	2200      	movs	r2, #0
 800696e:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294
        USBD_LL_StallEP(pdev, 0U);
 8006972:	2100      	movs	r1, #0
 8006974:	68f8      	ldr	r0, [r7, #12]
 8006976:	f001 facf 	bl	8007f18 <USBD_LL_StallEP>
 800697a:	e015      	b.n	80069a8 <USBD_LL_DataOutStage+0xd8>
      }
    }
  }
  else if ((pdev->pClass->DataOut != NULL) &&
 800697c:	68fb      	ldr	r3, [r7, #12]
 800697e:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8006982:	699b      	ldr	r3, [r3, #24]
 8006984:	2b00      	cmp	r3, #0
 8006986:	d00d      	beq.n	80069a4 <USBD_LL_DataOutStage+0xd4>
           (pdev->dev_state == USBD_STATE_CONFIGURED))
 8006988:	68fb      	ldr	r3, [r7, #12]
 800698a:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
  else if ((pdev->pClass->DataOut != NULL) &&
 800698e:	2b03      	cmp	r3, #3
 8006990:	d108      	bne.n	80069a4 <USBD_LL_DataOutStage+0xd4>
  {
    pdev->pClass->DataOut(pdev, epnum);
 8006992:	68fb      	ldr	r3, [r7, #12]
 8006994:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8006998:	699b      	ldr	r3, [r3, #24]
 800699a:	7afa      	ldrb	r2, [r7, #11]
 800699c:	4611      	mov	r1, r2
 800699e:	68f8      	ldr	r0, [r7, #12]
 80069a0:	4798      	blx	r3
 80069a2:	e001      	b.n	80069a8 <USBD_LL_DataOutStage+0xd8>
  }
  else
  {
    /* should never be in this condition */
    return USBD_FAIL;
 80069a4:	2302      	movs	r3, #2
 80069a6:	e000      	b.n	80069aa <USBD_LL_DataOutStage+0xda>
  }

  return USBD_OK;
 80069a8:	2300      	movs	r3, #0
}
 80069aa:	4618      	mov	r0, r3
 80069ac:	3718      	adds	r7, #24
 80069ae:	46bd      	mov	sp, r7
 80069b0:	bd80      	pop	{r7, pc}

080069b2 <USBD_LL_DataInStage>:
* @param  epnum: endpoint index
* @retval status
*/
USBD_StatusTypeDef USBD_LL_DataInStage(USBD_HandleTypeDef *pdev,
                                       uint8_t epnum, uint8_t *pdata)
{
 80069b2:	b580      	push	{r7, lr}
 80069b4:	b086      	sub	sp, #24
 80069b6:	af00      	add	r7, sp, #0
 80069b8:	60f8      	str	r0, [r7, #12]
 80069ba:	460b      	mov	r3, r1
 80069bc:	607a      	str	r2, [r7, #4]
 80069be:	72fb      	strb	r3, [r7, #11]
  USBD_EndpointTypeDef *pep;

  if (epnum == 0U)
 80069c0:	7afb      	ldrb	r3, [r7, #11]
 80069c2:	2b00      	cmp	r3, #0
 80069c4:	d17f      	bne.n	8006ac6 <USBD_LL_DataInStage+0x114>
  {
    pep = &pdev->ep_in[0];
 80069c6:	68fb      	ldr	r3, [r7, #12]
 80069c8:	3314      	adds	r3, #20
 80069ca:	617b      	str	r3, [r7, #20]

    if (pdev->ep0_state == USBD_EP0_DATA_IN)
 80069cc:	68fb      	ldr	r3, [r7, #12]
 80069ce:	f8d3 3294 	ldr.w	r3, [r3, #660]	; 0x294
 80069d2:	2b02      	cmp	r3, #2
 80069d4:	d15c      	bne.n	8006a90 <USBD_LL_DataInStage+0xde>
    {
      if (pep->rem_length > pep->maxpacket)
 80069d6:	697b      	ldr	r3, [r7, #20]
 80069d8:	68da      	ldr	r2, [r3, #12]
 80069da:	697b      	ldr	r3, [r7, #20]
 80069dc:	691b      	ldr	r3, [r3, #16]
 80069de:	429a      	cmp	r2, r3
 80069e0:	d915      	bls.n	8006a0e <USBD_LL_DataInStage+0x5c>
      {
        pep->rem_length -= pep->maxpacket;
 80069e2:	697b      	ldr	r3, [r7, #20]
 80069e4:	68da      	ldr	r2, [r3, #12]
 80069e6:	697b      	ldr	r3, [r7, #20]
 80069e8:	691b      	ldr	r3, [r3, #16]
 80069ea:	1ad2      	subs	r2, r2, r3
 80069ec:	697b      	ldr	r3, [r7, #20]
 80069ee:	60da      	str	r2, [r3, #12]

        USBD_CtlContinueSendData(pdev, pdata, (uint16_t)pep->rem_length);
 80069f0:	697b      	ldr	r3, [r7, #20]
 80069f2:	68db      	ldr	r3, [r3, #12]
 80069f4:	b29b      	uxth	r3, r3
 80069f6:	461a      	mov	r2, r3
 80069f8:	6879      	ldr	r1, [r7, #4]
 80069fa:	68f8      	ldr	r0, [r7, #12]
 80069fc:	f000 feb6 	bl	800776c <USBD_CtlContinueSendData>

        /* Prepare endpoint for premature end of transfer */
        USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 8006a00:	2300      	movs	r3, #0
 8006a02:	2200      	movs	r2, #0
 8006a04:	2100      	movs	r1, #0
 8006a06:	68f8      	ldr	r0, [r7, #12]
 8006a08:	f001 fb32 	bl	8008070 <USBD_LL_PrepareReceive>
 8006a0c:	e04e      	b.n	8006aac <USBD_LL_DataInStage+0xfa>
      }
      else
      {
        /* last packet is MPS multiple, so send ZLP packet */
        if ((pep->total_length % pep->maxpacket == 0U) &&
 8006a0e:	697b      	ldr	r3, [r7, #20]
 8006a10:	689b      	ldr	r3, [r3, #8]
 8006a12:	697a      	ldr	r2, [r7, #20]
 8006a14:	6912      	ldr	r2, [r2, #16]
 8006a16:	fbb3 f1f2 	udiv	r1, r3, r2
 8006a1a:	fb02 f201 	mul.w	r2, r2, r1
 8006a1e:	1a9b      	subs	r3, r3, r2
 8006a20:	2b00      	cmp	r3, #0
 8006a22:	d11c      	bne.n	8006a5e <USBD_LL_DataInStage+0xac>
            (pep->total_length >= pep->maxpacket) &&
 8006a24:	697b      	ldr	r3, [r7, #20]
 8006a26:	689a      	ldr	r2, [r3, #8]
 8006a28:	697b      	ldr	r3, [r7, #20]
 8006a2a:	691b      	ldr	r3, [r3, #16]
        if ((pep->total_length % pep->maxpacket == 0U) &&
 8006a2c:	429a      	cmp	r2, r3
 8006a2e:	d316      	bcc.n	8006a5e <USBD_LL_DataInStage+0xac>
            (pep->total_length < pdev->ep0_data_len))
 8006a30:	697b      	ldr	r3, [r7, #20]
 8006a32:	689a      	ldr	r2, [r3, #8]
 8006a34:	68fb      	ldr	r3, [r7, #12]
 8006a36:	f8d3 3298 	ldr.w	r3, [r3, #664]	; 0x298
            (pep->total_length >= pep->maxpacket) &&
 8006a3a:	429a      	cmp	r2, r3
 8006a3c:	d20f      	bcs.n	8006a5e <USBD_LL_DataInStage+0xac>
        {
          USBD_CtlContinueSendData(pdev, NULL, 0U);
 8006a3e:	2200      	movs	r2, #0
 8006a40:	2100      	movs	r1, #0
 8006a42:	68f8      	ldr	r0, [r7, #12]
 8006a44:	f000 fe92 	bl	800776c <USBD_CtlContinueSendData>
          pdev->ep0_data_len = 0U;
 8006a48:	68fb      	ldr	r3, [r7, #12]
 8006a4a:	2200      	movs	r2, #0
 8006a4c:	f8c3 2298 	str.w	r2, [r3, #664]	; 0x298

          /* Prepare endpoint for premature end of transfer */
          USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 8006a50:	2300      	movs	r3, #0
 8006a52:	2200      	movs	r2, #0
 8006a54:	2100      	movs	r1, #0
 8006a56:	68f8      	ldr	r0, [r7, #12]
 8006a58:	f001 fb0a 	bl	8008070 <USBD_LL_PrepareReceive>
 8006a5c:	e026      	b.n	8006aac <USBD_LL_DataInStage+0xfa>
        }
        else
        {
          if ((pdev->pClass->EP0_TxSent != NULL) &&
 8006a5e:	68fb      	ldr	r3, [r7, #12]
 8006a60:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8006a64:	68db      	ldr	r3, [r3, #12]
 8006a66:	2b00      	cmp	r3, #0
 8006a68:	d00a      	beq.n	8006a80 <USBD_LL_DataInStage+0xce>
              (pdev->dev_state == USBD_STATE_CONFIGURED))
 8006a6a:	68fb      	ldr	r3, [r7, #12]
 8006a6c:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
          if ((pdev->pClass->EP0_TxSent != NULL) &&
 8006a70:	2b03      	cmp	r3, #3
 8006a72:	d105      	bne.n	8006a80 <USBD_LL_DataInStage+0xce>
          {
            pdev->pClass->EP0_TxSent(pdev);
 8006a74:	68fb      	ldr	r3, [r7, #12]
 8006a76:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8006a7a:	68db      	ldr	r3, [r3, #12]
 8006a7c:	68f8      	ldr	r0, [r7, #12]
 8006a7e:	4798      	blx	r3
          }
          USBD_LL_StallEP(pdev, 0x80U);
 8006a80:	2180      	movs	r1, #128	; 0x80
 8006a82:	68f8      	ldr	r0, [r7, #12]
 8006a84:	f001 fa48 	bl	8007f18 <USBD_LL_StallEP>
          USBD_CtlReceiveStatus(pdev);
 8006a88:	68f8      	ldr	r0, [r7, #12]
 8006a8a:	f000 fec4 	bl	8007816 <USBD_CtlReceiveStatus>
 8006a8e:	e00d      	b.n	8006aac <USBD_LL_DataInStage+0xfa>
        }
      }
    }
    else
    {
      if ((pdev->ep0_state == USBD_EP0_STATUS_IN) ||
 8006a90:	68fb      	ldr	r3, [r7, #12]
 8006a92:	f8d3 3294 	ldr.w	r3, [r3, #660]	; 0x294
 8006a96:	2b04      	cmp	r3, #4
 8006a98:	d004      	beq.n	8006aa4 <USBD_LL_DataInStage+0xf2>
          (pdev->ep0_state == USBD_EP0_IDLE))
 8006a9a:	68fb      	ldr	r3, [r7, #12]
 8006a9c:	f8d3 3294 	ldr.w	r3, [r3, #660]	; 0x294
      if ((pdev->ep0_state == USBD_EP0_STATUS_IN) ||
 8006aa0:	2b00      	cmp	r3, #0
 8006aa2:	d103      	bne.n	8006aac <USBD_LL_DataInStage+0xfa>
      {
        USBD_LL_StallEP(pdev, 0x80U);
 8006aa4:	2180      	movs	r1, #128	; 0x80
 8006aa6:	68f8      	ldr	r0, [r7, #12]
 8006aa8:	f001 fa36 	bl	8007f18 <USBD_LL_StallEP>
      }
    }

    if (pdev->dev_test_mode == 1U)
 8006aac:	68fb      	ldr	r3, [r7, #12]
 8006aae:	f893 32a0 	ldrb.w	r3, [r3, #672]	; 0x2a0
 8006ab2:	2b01      	cmp	r3, #1
 8006ab4:	d11d      	bne.n	8006af2 <USBD_LL_DataInStage+0x140>
    {
      USBD_RunTestMode(pdev);
 8006ab6:	68f8      	ldr	r0, [r7, #12]
 8006ab8:	f7ff fe83 	bl	80067c2 <USBD_RunTestMode>
      pdev->dev_test_mode = 0U;
 8006abc:	68fb      	ldr	r3, [r7, #12]
 8006abe:	2200      	movs	r2, #0
 8006ac0:	f883 22a0 	strb.w	r2, [r3, #672]	; 0x2a0
 8006ac4:	e015      	b.n	8006af2 <USBD_LL_DataInStage+0x140>
    }
  }
  else if ((pdev->pClass->DataIn != NULL) &&
 8006ac6:	68fb      	ldr	r3, [r7, #12]
 8006ac8:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8006acc:	695b      	ldr	r3, [r3, #20]
 8006ace:	2b00      	cmp	r3, #0
 8006ad0:	d00d      	beq.n	8006aee <USBD_LL_DataInStage+0x13c>
           (pdev->dev_state == USBD_STATE_CONFIGURED))
 8006ad2:	68fb      	ldr	r3, [r7, #12]
 8006ad4:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
  else if ((pdev->pClass->DataIn != NULL) &&
 8006ad8:	2b03      	cmp	r3, #3
 8006ada:	d108      	bne.n	8006aee <USBD_LL_DataInStage+0x13c>
  {
    pdev->pClass->DataIn(pdev, epnum);
 8006adc:	68fb      	ldr	r3, [r7, #12]
 8006ade:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8006ae2:	695b      	ldr	r3, [r3, #20]
 8006ae4:	7afa      	ldrb	r2, [r7, #11]
 8006ae6:	4611      	mov	r1, r2
 8006ae8:	68f8      	ldr	r0, [r7, #12]
 8006aea:	4798      	blx	r3
 8006aec:	e001      	b.n	8006af2 <USBD_LL_DataInStage+0x140>
  }
  else
  {
    /* should never be in this condition */
    return USBD_FAIL;
 8006aee:	2302      	movs	r3, #2
 8006af0:	e000      	b.n	8006af4 <USBD_LL_DataInStage+0x142>
  }

  return USBD_OK;
 8006af2:	2300      	movs	r3, #0
}
 8006af4:	4618      	mov	r0, r3
 8006af6:	3718      	adds	r7, #24
 8006af8:	46bd      	mov	sp, r7
 8006afa:	bd80      	pop	{r7, pc}

08006afc <USBD_LL_Reset>:
* @param  pdev: device instance
* @retval status
*/

USBD_StatusTypeDef USBD_LL_Reset(USBD_HandleTypeDef *pdev)
{
 8006afc:	b580      	push	{r7, lr}
 8006afe:	b082      	sub	sp, #8
 8006b00:	af00      	add	r7, sp, #0
 8006b02:	6078      	str	r0, [r7, #4]
  /* Open EP0 OUT */
  USBD_LL_OpenEP(pdev, 0x00U, USBD_EP_TYPE_CTRL, USB_MAX_EP0_SIZE);
 8006b04:	2340      	movs	r3, #64	; 0x40
 8006b06:	2200      	movs	r2, #0
 8006b08:	2100      	movs	r1, #0
 8006b0a:	6878      	ldr	r0, [r7, #4]
 8006b0c:	f001 f9bf 	bl	8007e8e <USBD_LL_OpenEP>
  pdev->ep_out[0x00U & 0xFU].is_used = 1U;
 8006b10:	687b      	ldr	r3, [r7, #4]
 8006b12:	2201      	movs	r2, #1
 8006b14:	f8c3 2158 	str.w	r2, [r3, #344]	; 0x158

  pdev->ep_out[0].maxpacket = USB_MAX_EP0_SIZE;
 8006b18:	687b      	ldr	r3, [r7, #4]
 8006b1a:	2240      	movs	r2, #64	; 0x40
 8006b1c:	f8c3 2164 	str.w	r2, [r3, #356]	; 0x164

  /* Open EP0 IN */
  USBD_LL_OpenEP(pdev, 0x80U, USBD_EP_TYPE_CTRL, USB_MAX_EP0_SIZE);
 8006b20:	2340      	movs	r3, #64	; 0x40
 8006b22:	2200      	movs	r2, #0
 8006b24:	2180      	movs	r1, #128	; 0x80
 8006b26:	6878      	ldr	r0, [r7, #4]
 8006b28:	f001 f9b1 	bl	8007e8e <USBD_LL_OpenEP>
  pdev->ep_in[0x80U & 0xFU].is_used = 1U;
 8006b2c:	687b      	ldr	r3, [r7, #4]
 8006b2e:	2201      	movs	r2, #1
 8006b30:	619a      	str	r2, [r3, #24]

  pdev->ep_in[0].maxpacket = USB_MAX_EP0_SIZE;
 8006b32:	687b      	ldr	r3, [r7, #4]
 8006b34:	2240      	movs	r2, #64	; 0x40
 8006b36:	625a      	str	r2, [r3, #36]	; 0x24

  /* Upon Reset call user call back */
  pdev->dev_state = USBD_STATE_DEFAULT;
 8006b38:	687b      	ldr	r3, [r7, #4]
 8006b3a:	2201      	movs	r2, #1
 8006b3c:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
  pdev->ep0_state = USBD_EP0_IDLE;
 8006b40:	687b      	ldr	r3, [r7, #4]
 8006b42:	2200      	movs	r2, #0
 8006b44:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294
  pdev->dev_config = 0U;
 8006b48:	687b      	ldr	r3, [r7, #4]
 8006b4a:	2200      	movs	r2, #0
 8006b4c:	605a      	str	r2, [r3, #4]
  pdev->dev_remote_wakeup = 0U;
 8006b4e:	687b      	ldr	r3, [r7, #4]
 8006b50:	2200      	movs	r2, #0
 8006b52:	f8c3 22a4 	str.w	r2, [r3, #676]	; 0x2a4

  if (pdev->pClassData)
 8006b56:	687b      	ldr	r3, [r7, #4]
 8006b58:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8006b5c:	2b00      	cmp	r3, #0
 8006b5e:	d009      	beq.n	8006b74 <USBD_LL_Reset+0x78>
  {
    pdev->pClass->DeInit(pdev, (uint8_t)pdev->dev_config);
 8006b60:	687b      	ldr	r3, [r7, #4]
 8006b62:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8006b66:	685b      	ldr	r3, [r3, #4]
 8006b68:	687a      	ldr	r2, [r7, #4]
 8006b6a:	6852      	ldr	r2, [r2, #4]
 8006b6c:	b2d2      	uxtb	r2, r2
 8006b6e:	4611      	mov	r1, r2
 8006b70:	6878      	ldr	r0, [r7, #4]
 8006b72:	4798      	blx	r3
  }

  return USBD_OK;
 8006b74:	2300      	movs	r3, #0
}
 8006b76:	4618      	mov	r0, r3
 8006b78:	3708      	adds	r7, #8
 8006b7a:	46bd      	mov	sp, r7
 8006b7c:	bd80      	pop	{r7, pc}

08006b7e <USBD_LL_SetSpeed>:
* @param  pdev: device instance
* @retval status
*/
USBD_StatusTypeDef USBD_LL_SetSpeed(USBD_HandleTypeDef *pdev,
                                    USBD_SpeedTypeDef speed)
{
 8006b7e:	b480      	push	{r7}
 8006b80:	b083      	sub	sp, #12
 8006b82:	af00      	add	r7, sp, #0
 8006b84:	6078      	str	r0, [r7, #4]
 8006b86:	460b      	mov	r3, r1
 8006b88:	70fb      	strb	r3, [r7, #3]
  pdev->dev_speed = speed;
 8006b8a:	687b      	ldr	r3, [r7, #4]
 8006b8c:	78fa      	ldrb	r2, [r7, #3]
 8006b8e:	741a      	strb	r2, [r3, #16]

  return USBD_OK;
 8006b90:	2300      	movs	r3, #0
}
 8006b92:	4618      	mov	r0, r3
 8006b94:	370c      	adds	r7, #12
 8006b96:	46bd      	mov	sp, r7
 8006b98:	bc80      	pop	{r7}
 8006b9a:	4770      	bx	lr

08006b9c <USBD_LL_Suspend>:
* @param  pdev: device instance
* @retval status
*/

USBD_StatusTypeDef USBD_LL_Suspend(USBD_HandleTypeDef *pdev)
{
 8006b9c:	b480      	push	{r7}
 8006b9e:	b083      	sub	sp, #12
 8006ba0:	af00      	add	r7, sp, #0
 8006ba2:	6078      	str	r0, [r7, #4]
  pdev->dev_old_state =  pdev->dev_state;
 8006ba4:	687b      	ldr	r3, [r7, #4]
 8006ba6:	f893 229c 	ldrb.w	r2, [r3, #668]	; 0x29c
 8006baa:	687b      	ldr	r3, [r7, #4]
 8006bac:	f883 229d 	strb.w	r2, [r3, #669]	; 0x29d
  pdev->dev_state  = USBD_STATE_SUSPENDED;
 8006bb0:	687b      	ldr	r3, [r7, #4]
 8006bb2:	2204      	movs	r2, #4
 8006bb4:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c

  return USBD_OK;
 8006bb8:	2300      	movs	r3, #0
}
 8006bba:	4618      	mov	r0, r3
 8006bbc:	370c      	adds	r7, #12
 8006bbe:	46bd      	mov	sp, r7
 8006bc0:	bc80      	pop	{r7}
 8006bc2:	4770      	bx	lr

08006bc4 <USBD_LL_Resume>:
* @param  pdev: device instance
* @retval status
*/

USBD_StatusTypeDef USBD_LL_Resume(USBD_HandleTypeDef *pdev)
{
 8006bc4:	b480      	push	{r7}
 8006bc6:	b083      	sub	sp, #12
 8006bc8:	af00      	add	r7, sp, #0
 8006bca:	6078      	str	r0, [r7, #4]
  if (pdev->dev_state == USBD_STATE_SUSPENDED)
 8006bcc:	687b      	ldr	r3, [r7, #4]
 8006bce:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8006bd2:	2b04      	cmp	r3, #4
 8006bd4:	d105      	bne.n	8006be2 <USBD_LL_Resume+0x1e>
  {
    pdev->dev_state = pdev->dev_old_state;
 8006bd6:	687b      	ldr	r3, [r7, #4]
 8006bd8:	f893 229d 	ldrb.w	r2, [r3, #669]	; 0x29d
 8006bdc:	687b      	ldr	r3, [r7, #4]
 8006bde:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
  }

  return USBD_OK;
 8006be2:	2300      	movs	r3, #0
}
 8006be4:	4618      	mov	r0, r3
 8006be6:	370c      	adds	r7, #12
 8006be8:	46bd      	mov	sp, r7
 8006bea:	bc80      	pop	{r7}
 8006bec:	4770      	bx	lr

08006bee <USBD_LL_SOF>:
* @param  pdev: device instance
* @retval status
*/

USBD_StatusTypeDef USBD_LL_SOF(USBD_HandleTypeDef *pdev)
{
 8006bee:	b580      	push	{r7, lr}
 8006bf0:	b082      	sub	sp, #8
 8006bf2:	af00      	add	r7, sp, #0
 8006bf4:	6078      	str	r0, [r7, #4]
  if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8006bf6:	687b      	ldr	r3, [r7, #4]
 8006bf8:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8006bfc:	2b03      	cmp	r3, #3
 8006bfe:	d10b      	bne.n	8006c18 <USBD_LL_SOF+0x2a>
  {
    if (pdev->pClass->SOF != NULL)
 8006c00:	687b      	ldr	r3, [r7, #4]
 8006c02:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8006c06:	69db      	ldr	r3, [r3, #28]
 8006c08:	2b00      	cmp	r3, #0
 8006c0a:	d005      	beq.n	8006c18 <USBD_LL_SOF+0x2a>
    {
      pdev->pClass->SOF(pdev);
 8006c0c:	687b      	ldr	r3, [r7, #4]
 8006c0e:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8006c12:	69db      	ldr	r3, [r3, #28]
 8006c14:	6878      	ldr	r0, [r7, #4]
 8006c16:	4798      	blx	r3
    }
  }

  return USBD_OK;
 8006c18:	2300      	movs	r3, #0
}
 8006c1a:	4618      	mov	r0, r3
 8006c1c:	3708      	adds	r7, #8
 8006c1e:	46bd      	mov	sp, r7
 8006c20:	bd80      	pop	{r7, pc}
	...

08006c24 <USBD_StdDevReq>:
* @param  req: usb request
* @retval status
*/
USBD_StatusTypeDef  USBD_StdDevReq(USBD_HandleTypeDef *pdev,
                                   USBD_SetupReqTypedef *req)
{
 8006c24:	b580      	push	{r7, lr}
 8006c26:	b084      	sub	sp, #16
 8006c28:	af00      	add	r7, sp, #0
 8006c2a:	6078      	str	r0, [r7, #4]
 8006c2c:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 8006c2e:	2300      	movs	r3, #0
 8006c30:	73fb      	strb	r3, [r7, #15]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 8006c32:	683b      	ldr	r3, [r7, #0]
 8006c34:	781b      	ldrb	r3, [r3, #0]
 8006c36:	f003 0360 	and.w	r3, r3, #96	; 0x60
 8006c3a:	2b20      	cmp	r3, #32
 8006c3c:	d004      	beq.n	8006c48 <USBD_StdDevReq+0x24>
 8006c3e:	2b40      	cmp	r3, #64	; 0x40
 8006c40:	d002      	beq.n	8006c48 <USBD_StdDevReq+0x24>
 8006c42:	2b00      	cmp	r3, #0
 8006c44:	d008      	beq.n	8006c58 <USBD_StdDevReq+0x34>
 8006c46:	e04c      	b.n	8006ce2 <USBD_StdDevReq+0xbe>
  {
    case USB_REQ_TYPE_CLASS:
    case USB_REQ_TYPE_VENDOR:
      pdev->pClass->Setup(pdev, req);
 8006c48:	687b      	ldr	r3, [r7, #4]
 8006c4a:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8006c4e:	689b      	ldr	r3, [r3, #8]
 8006c50:	6839      	ldr	r1, [r7, #0]
 8006c52:	6878      	ldr	r0, [r7, #4]
 8006c54:	4798      	blx	r3
      break;
 8006c56:	e049      	b.n	8006cec <USBD_StdDevReq+0xc8>

    case USB_REQ_TYPE_STANDARD:
      switch (req->bRequest)
 8006c58:	683b      	ldr	r3, [r7, #0]
 8006c5a:	785b      	ldrb	r3, [r3, #1]
 8006c5c:	2b09      	cmp	r3, #9
 8006c5e:	d83a      	bhi.n	8006cd6 <USBD_StdDevReq+0xb2>
 8006c60:	a201      	add	r2, pc, #4	; (adr r2, 8006c68 <USBD_StdDevReq+0x44>)
 8006c62:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006c66:	bf00      	nop
 8006c68:	08006cb9 	.word	0x08006cb9
 8006c6c:	08006ccd 	.word	0x08006ccd
 8006c70:	08006cd7 	.word	0x08006cd7
 8006c74:	08006cc3 	.word	0x08006cc3
 8006c78:	08006cd7 	.word	0x08006cd7
 8006c7c:	08006c9b 	.word	0x08006c9b
 8006c80:	08006c91 	.word	0x08006c91
 8006c84:	08006cd7 	.word	0x08006cd7
 8006c88:	08006caf 	.word	0x08006caf
 8006c8c:	08006ca5 	.word	0x08006ca5
      {
        case USB_REQ_GET_DESCRIPTOR:
          USBD_GetDescriptor(pdev, req);
 8006c90:	6839      	ldr	r1, [r7, #0]
 8006c92:	6878      	ldr	r0, [r7, #4]
 8006c94:	f000 f9d4 	bl	8007040 <USBD_GetDescriptor>
          break;
 8006c98:	e022      	b.n	8006ce0 <USBD_StdDevReq+0xbc>

        case USB_REQ_SET_ADDRESS:
          USBD_SetAddress(pdev, req);
 8006c9a:	6839      	ldr	r1, [r7, #0]
 8006c9c:	6878      	ldr	r0, [r7, #4]
 8006c9e:	f000 fb37 	bl	8007310 <USBD_SetAddress>
          break;
 8006ca2:	e01d      	b.n	8006ce0 <USBD_StdDevReq+0xbc>

        case USB_REQ_SET_CONFIGURATION:
          USBD_SetConfig(pdev, req);
 8006ca4:	6839      	ldr	r1, [r7, #0]
 8006ca6:	6878      	ldr	r0, [r7, #4]
 8006ca8:	f000 fb74 	bl	8007394 <USBD_SetConfig>
          break;
 8006cac:	e018      	b.n	8006ce0 <USBD_StdDevReq+0xbc>

        case USB_REQ_GET_CONFIGURATION:
          USBD_GetConfig(pdev, req);
 8006cae:	6839      	ldr	r1, [r7, #0]
 8006cb0:	6878      	ldr	r0, [r7, #4]
 8006cb2:	f000 fbfd 	bl	80074b0 <USBD_GetConfig>
          break;
 8006cb6:	e013      	b.n	8006ce0 <USBD_StdDevReq+0xbc>

        case USB_REQ_GET_STATUS:
          USBD_GetStatus(pdev, req);
 8006cb8:	6839      	ldr	r1, [r7, #0]
 8006cba:	6878      	ldr	r0, [r7, #4]
 8006cbc:	f000 fc2c 	bl	8007518 <USBD_GetStatus>
          break;
 8006cc0:	e00e      	b.n	8006ce0 <USBD_StdDevReq+0xbc>

        case USB_REQ_SET_FEATURE:
          USBD_SetFeature(pdev, req);
 8006cc2:	6839      	ldr	r1, [r7, #0]
 8006cc4:	6878      	ldr	r0, [r7, #4]
 8006cc6:	f000 fc5a 	bl	800757e <USBD_SetFeature>
          break;
 8006cca:	e009      	b.n	8006ce0 <USBD_StdDevReq+0xbc>

        case USB_REQ_CLEAR_FEATURE:
          USBD_ClrFeature(pdev, req);
 8006ccc:	6839      	ldr	r1, [r7, #0]
 8006cce:	6878      	ldr	r0, [r7, #4]
 8006cd0:	f000 fc69 	bl	80075a6 <USBD_ClrFeature>
          break;
 8006cd4:	e004      	b.n	8006ce0 <USBD_StdDevReq+0xbc>

        default:
          USBD_CtlError(pdev, req);
 8006cd6:	6839      	ldr	r1, [r7, #0]
 8006cd8:	6878      	ldr	r0, [r7, #4]
 8006cda:	f000 fcc1 	bl	8007660 <USBD_CtlError>
          break;
 8006cde:	bf00      	nop
      }
      break;
 8006ce0:	e004      	b.n	8006cec <USBD_StdDevReq+0xc8>

    default:
      USBD_CtlError(pdev, req);
 8006ce2:	6839      	ldr	r1, [r7, #0]
 8006ce4:	6878      	ldr	r0, [r7, #4]
 8006ce6:	f000 fcbb 	bl	8007660 <USBD_CtlError>
      break;
 8006cea:	bf00      	nop
  }

  return ret;
 8006cec:	7bfb      	ldrb	r3, [r7, #15]
}
 8006cee:	4618      	mov	r0, r3
 8006cf0:	3710      	adds	r7, #16
 8006cf2:	46bd      	mov	sp, r7
 8006cf4:	bd80      	pop	{r7, pc}
 8006cf6:	bf00      	nop

08006cf8 <USBD_StdItfReq>:
* @param  req: usb request
* @retval status
*/
USBD_StatusTypeDef  USBD_StdItfReq(USBD_HandleTypeDef *pdev,
                                   USBD_SetupReqTypedef  *req)
{
 8006cf8:	b580      	push	{r7, lr}
 8006cfa:	b084      	sub	sp, #16
 8006cfc:	af00      	add	r7, sp, #0
 8006cfe:	6078      	str	r0, [r7, #4]
 8006d00:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 8006d02:	2300      	movs	r3, #0
 8006d04:	73fb      	strb	r3, [r7, #15]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 8006d06:	683b      	ldr	r3, [r7, #0]
 8006d08:	781b      	ldrb	r3, [r3, #0]
 8006d0a:	f003 0360 	and.w	r3, r3, #96	; 0x60
 8006d0e:	2b20      	cmp	r3, #32
 8006d10:	d003      	beq.n	8006d1a <USBD_StdItfReq+0x22>
 8006d12:	2b40      	cmp	r3, #64	; 0x40
 8006d14:	d001      	beq.n	8006d1a <USBD_StdItfReq+0x22>
 8006d16:	2b00      	cmp	r3, #0
 8006d18:	d12a      	bne.n	8006d70 <USBD_StdItfReq+0x78>
  {
    case USB_REQ_TYPE_CLASS:
    case USB_REQ_TYPE_VENDOR:
    case USB_REQ_TYPE_STANDARD:
      switch (pdev->dev_state)
 8006d1a:	687b      	ldr	r3, [r7, #4]
 8006d1c:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8006d20:	3b01      	subs	r3, #1
 8006d22:	2b02      	cmp	r3, #2
 8006d24:	d81d      	bhi.n	8006d62 <USBD_StdItfReq+0x6a>
      {
        case USBD_STATE_DEFAULT:
        case USBD_STATE_ADDRESSED:
        case USBD_STATE_CONFIGURED:

          if (LOBYTE(req->wIndex) <= USBD_MAX_NUM_INTERFACES)
 8006d26:	683b      	ldr	r3, [r7, #0]
 8006d28:	889b      	ldrh	r3, [r3, #4]
 8006d2a:	b2db      	uxtb	r3, r3
 8006d2c:	2b01      	cmp	r3, #1
 8006d2e:	d813      	bhi.n	8006d58 <USBD_StdItfReq+0x60>
          {
            ret = (USBD_StatusTypeDef)pdev->pClass->Setup(pdev, req);
 8006d30:	687b      	ldr	r3, [r7, #4]
 8006d32:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8006d36:	689b      	ldr	r3, [r3, #8]
 8006d38:	6839      	ldr	r1, [r7, #0]
 8006d3a:	6878      	ldr	r0, [r7, #4]
 8006d3c:	4798      	blx	r3
 8006d3e:	4603      	mov	r3, r0
 8006d40:	73fb      	strb	r3, [r7, #15]

            if ((req->wLength == 0U) && (ret == USBD_OK))
 8006d42:	683b      	ldr	r3, [r7, #0]
 8006d44:	88db      	ldrh	r3, [r3, #6]
 8006d46:	2b00      	cmp	r3, #0
 8006d48:	d110      	bne.n	8006d6c <USBD_StdItfReq+0x74>
 8006d4a:	7bfb      	ldrb	r3, [r7, #15]
 8006d4c:	2b00      	cmp	r3, #0
 8006d4e:	d10d      	bne.n	8006d6c <USBD_StdItfReq+0x74>
            {
              USBD_CtlSendStatus(pdev);
 8006d50:	6878      	ldr	r0, [r7, #4]
 8006d52:	f000 fd4d 	bl	80077f0 <USBD_CtlSendStatus>
          }
          else
          {
            USBD_CtlError(pdev, req);
          }
          break;
 8006d56:	e009      	b.n	8006d6c <USBD_StdItfReq+0x74>
            USBD_CtlError(pdev, req);
 8006d58:	6839      	ldr	r1, [r7, #0]
 8006d5a:	6878      	ldr	r0, [r7, #4]
 8006d5c:	f000 fc80 	bl	8007660 <USBD_CtlError>
          break;
 8006d60:	e004      	b.n	8006d6c <USBD_StdItfReq+0x74>

        default:
          USBD_CtlError(pdev, req);
 8006d62:	6839      	ldr	r1, [r7, #0]
 8006d64:	6878      	ldr	r0, [r7, #4]
 8006d66:	f000 fc7b 	bl	8007660 <USBD_CtlError>
          break;
 8006d6a:	e000      	b.n	8006d6e <USBD_StdItfReq+0x76>
          break;
 8006d6c:	bf00      	nop
      }
      break;
 8006d6e:	e004      	b.n	8006d7a <USBD_StdItfReq+0x82>

    default:
      USBD_CtlError(pdev, req);
 8006d70:	6839      	ldr	r1, [r7, #0]
 8006d72:	6878      	ldr	r0, [r7, #4]
 8006d74:	f000 fc74 	bl	8007660 <USBD_CtlError>
      break;
 8006d78:	bf00      	nop
  }

  return USBD_OK;
 8006d7a:	2300      	movs	r3, #0
}
 8006d7c:	4618      	mov	r0, r3
 8006d7e:	3710      	adds	r7, #16
 8006d80:	46bd      	mov	sp, r7
 8006d82:	bd80      	pop	{r7, pc}

08006d84 <USBD_StdEPReq>:
* @param  req: usb request
* @retval status
*/
USBD_StatusTypeDef  USBD_StdEPReq(USBD_HandleTypeDef *pdev,
                                  USBD_SetupReqTypedef  *req)
{
 8006d84:	b580      	push	{r7, lr}
 8006d86:	b084      	sub	sp, #16
 8006d88:	af00      	add	r7, sp, #0
 8006d8a:	6078      	str	r0, [r7, #4]
 8006d8c:	6039      	str	r1, [r7, #0]
  USBD_EndpointTypeDef *pep;
  uint8_t   ep_addr;
  USBD_StatusTypeDef ret = USBD_OK;
 8006d8e:	2300      	movs	r3, #0
 8006d90:	73fb      	strb	r3, [r7, #15]
  ep_addr  = LOBYTE(req->wIndex);
 8006d92:	683b      	ldr	r3, [r7, #0]
 8006d94:	889b      	ldrh	r3, [r3, #4]
 8006d96:	73bb      	strb	r3, [r7, #14]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 8006d98:	683b      	ldr	r3, [r7, #0]
 8006d9a:	781b      	ldrb	r3, [r3, #0]
 8006d9c:	f003 0360 	and.w	r3, r3, #96	; 0x60
 8006da0:	2b20      	cmp	r3, #32
 8006da2:	d004      	beq.n	8006dae <USBD_StdEPReq+0x2a>
 8006da4:	2b40      	cmp	r3, #64	; 0x40
 8006da6:	d002      	beq.n	8006dae <USBD_StdEPReq+0x2a>
 8006da8:	2b00      	cmp	r3, #0
 8006daa:	d008      	beq.n	8006dbe <USBD_StdEPReq+0x3a>
 8006dac:	e13d      	b.n	800702a <USBD_StdEPReq+0x2a6>
  {
    case USB_REQ_TYPE_CLASS:
    case USB_REQ_TYPE_VENDOR:
      pdev->pClass->Setup(pdev, req);
 8006dae:	687b      	ldr	r3, [r7, #4]
 8006db0:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8006db4:	689b      	ldr	r3, [r3, #8]
 8006db6:	6839      	ldr	r1, [r7, #0]
 8006db8:	6878      	ldr	r0, [r7, #4]
 8006dba:	4798      	blx	r3
      break;
 8006dbc:	e13a      	b.n	8007034 <USBD_StdEPReq+0x2b0>

    case USB_REQ_TYPE_STANDARD:
      /* Check if it is a class request */
      if ((req->bmRequest & 0x60U) == 0x20U)
 8006dbe:	683b      	ldr	r3, [r7, #0]
 8006dc0:	781b      	ldrb	r3, [r3, #0]
 8006dc2:	f003 0360 	and.w	r3, r3, #96	; 0x60
 8006dc6:	2b20      	cmp	r3, #32
 8006dc8:	d10a      	bne.n	8006de0 <USBD_StdEPReq+0x5c>
      {
        ret = (USBD_StatusTypeDef)pdev->pClass->Setup(pdev, req);
 8006dca:	687b      	ldr	r3, [r7, #4]
 8006dcc:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8006dd0:	689b      	ldr	r3, [r3, #8]
 8006dd2:	6839      	ldr	r1, [r7, #0]
 8006dd4:	6878      	ldr	r0, [r7, #4]
 8006dd6:	4798      	blx	r3
 8006dd8:	4603      	mov	r3, r0
 8006dda:	73fb      	strb	r3, [r7, #15]

        return ret;
 8006ddc:	7bfb      	ldrb	r3, [r7, #15]
 8006dde:	e12a      	b.n	8007036 <USBD_StdEPReq+0x2b2>
      }

      switch (req->bRequest)
 8006de0:	683b      	ldr	r3, [r7, #0]
 8006de2:	785b      	ldrb	r3, [r3, #1]
 8006de4:	2b01      	cmp	r3, #1
 8006de6:	d03e      	beq.n	8006e66 <USBD_StdEPReq+0xe2>
 8006de8:	2b03      	cmp	r3, #3
 8006dea:	d002      	beq.n	8006df2 <USBD_StdEPReq+0x6e>
 8006dec:	2b00      	cmp	r3, #0
 8006dee:	d070      	beq.n	8006ed2 <USBD_StdEPReq+0x14e>
 8006df0:	e115      	b.n	800701e <USBD_StdEPReq+0x29a>
      {
        case USB_REQ_SET_FEATURE:
          switch (pdev->dev_state)
 8006df2:	687b      	ldr	r3, [r7, #4]
 8006df4:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8006df8:	2b02      	cmp	r3, #2
 8006dfa:	d002      	beq.n	8006e02 <USBD_StdEPReq+0x7e>
 8006dfc:	2b03      	cmp	r3, #3
 8006dfe:	d015      	beq.n	8006e2c <USBD_StdEPReq+0xa8>
 8006e00:	e02b      	b.n	8006e5a <USBD_StdEPReq+0xd6>
          {
            case USBD_STATE_ADDRESSED:
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 8006e02:	7bbb      	ldrb	r3, [r7, #14]
 8006e04:	2b00      	cmp	r3, #0
 8006e06:	d00c      	beq.n	8006e22 <USBD_StdEPReq+0x9e>
 8006e08:	7bbb      	ldrb	r3, [r7, #14]
 8006e0a:	2b80      	cmp	r3, #128	; 0x80
 8006e0c:	d009      	beq.n	8006e22 <USBD_StdEPReq+0x9e>
              {
                USBD_LL_StallEP(pdev, ep_addr);
 8006e0e:	7bbb      	ldrb	r3, [r7, #14]
 8006e10:	4619      	mov	r1, r3
 8006e12:	6878      	ldr	r0, [r7, #4]
 8006e14:	f001 f880 	bl	8007f18 <USBD_LL_StallEP>
                USBD_LL_StallEP(pdev, 0x80U);
 8006e18:	2180      	movs	r1, #128	; 0x80
 8006e1a:	6878      	ldr	r0, [r7, #4]
 8006e1c:	f001 f87c 	bl	8007f18 <USBD_LL_StallEP>
              }
              else
              {
                USBD_CtlError(pdev, req);
              }
              break;
 8006e20:	e020      	b.n	8006e64 <USBD_StdEPReq+0xe0>
                USBD_CtlError(pdev, req);
 8006e22:	6839      	ldr	r1, [r7, #0]
 8006e24:	6878      	ldr	r0, [r7, #4]
 8006e26:	f000 fc1b 	bl	8007660 <USBD_CtlError>
              break;
 8006e2a:	e01b      	b.n	8006e64 <USBD_StdEPReq+0xe0>

            case USBD_STATE_CONFIGURED:
              if (req->wValue == USB_FEATURE_EP_HALT)
 8006e2c:	683b      	ldr	r3, [r7, #0]
 8006e2e:	885b      	ldrh	r3, [r3, #2]
 8006e30:	2b00      	cmp	r3, #0
 8006e32:	d10e      	bne.n	8006e52 <USBD_StdEPReq+0xce>
              {
                if ((ep_addr != 0x00U) &&
 8006e34:	7bbb      	ldrb	r3, [r7, #14]
 8006e36:	2b00      	cmp	r3, #0
 8006e38:	d00b      	beq.n	8006e52 <USBD_StdEPReq+0xce>
 8006e3a:	7bbb      	ldrb	r3, [r7, #14]
 8006e3c:	2b80      	cmp	r3, #128	; 0x80
 8006e3e:	d008      	beq.n	8006e52 <USBD_StdEPReq+0xce>
                    (ep_addr != 0x80U) && (req->wLength == 0x00U))
 8006e40:	683b      	ldr	r3, [r7, #0]
 8006e42:	88db      	ldrh	r3, [r3, #6]
 8006e44:	2b00      	cmp	r3, #0
 8006e46:	d104      	bne.n	8006e52 <USBD_StdEPReq+0xce>
                {
                  USBD_LL_StallEP(pdev, ep_addr);
 8006e48:	7bbb      	ldrb	r3, [r7, #14]
 8006e4a:	4619      	mov	r1, r3
 8006e4c:	6878      	ldr	r0, [r7, #4]
 8006e4e:	f001 f863 	bl	8007f18 <USBD_LL_StallEP>
                }
              }
              USBD_CtlSendStatus(pdev);
 8006e52:	6878      	ldr	r0, [r7, #4]
 8006e54:	f000 fccc 	bl	80077f0 <USBD_CtlSendStatus>

              break;
 8006e58:	e004      	b.n	8006e64 <USBD_StdEPReq+0xe0>

            default:
              USBD_CtlError(pdev, req);
 8006e5a:	6839      	ldr	r1, [r7, #0]
 8006e5c:	6878      	ldr	r0, [r7, #4]
 8006e5e:	f000 fbff 	bl	8007660 <USBD_CtlError>
              break;
 8006e62:	bf00      	nop
          }
          break;
 8006e64:	e0e0      	b.n	8007028 <USBD_StdEPReq+0x2a4>

        case USB_REQ_CLEAR_FEATURE:

          switch (pdev->dev_state)
 8006e66:	687b      	ldr	r3, [r7, #4]
 8006e68:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8006e6c:	2b02      	cmp	r3, #2
 8006e6e:	d002      	beq.n	8006e76 <USBD_StdEPReq+0xf2>
 8006e70:	2b03      	cmp	r3, #3
 8006e72:	d015      	beq.n	8006ea0 <USBD_StdEPReq+0x11c>
 8006e74:	e026      	b.n	8006ec4 <USBD_StdEPReq+0x140>
          {
            case USBD_STATE_ADDRESSED:
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 8006e76:	7bbb      	ldrb	r3, [r7, #14]
 8006e78:	2b00      	cmp	r3, #0
 8006e7a:	d00c      	beq.n	8006e96 <USBD_StdEPReq+0x112>
 8006e7c:	7bbb      	ldrb	r3, [r7, #14]
 8006e7e:	2b80      	cmp	r3, #128	; 0x80
 8006e80:	d009      	beq.n	8006e96 <USBD_StdEPReq+0x112>
              {
                USBD_LL_StallEP(pdev, ep_addr);
 8006e82:	7bbb      	ldrb	r3, [r7, #14]
 8006e84:	4619      	mov	r1, r3
 8006e86:	6878      	ldr	r0, [r7, #4]
 8006e88:	f001 f846 	bl	8007f18 <USBD_LL_StallEP>
                USBD_LL_StallEP(pdev, 0x80U);
 8006e8c:	2180      	movs	r1, #128	; 0x80
 8006e8e:	6878      	ldr	r0, [r7, #4]
 8006e90:	f001 f842 	bl	8007f18 <USBD_LL_StallEP>
              }
              else
              {
                USBD_CtlError(pdev, req);
              }
              break;
 8006e94:	e01c      	b.n	8006ed0 <USBD_StdEPReq+0x14c>
                USBD_CtlError(pdev, req);
 8006e96:	6839      	ldr	r1, [r7, #0]
 8006e98:	6878      	ldr	r0, [r7, #4]
 8006e9a:	f000 fbe1 	bl	8007660 <USBD_CtlError>
              break;
 8006e9e:	e017      	b.n	8006ed0 <USBD_StdEPReq+0x14c>

            case USBD_STATE_CONFIGURED:
              if (req->wValue == USB_FEATURE_EP_HALT)
 8006ea0:	683b      	ldr	r3, [r7, #0]
 8006ea2:	885b      	ldrh	r3, [r3, #2]
 8006ea4:	2b00      	cmp	r3, #0
 8006ea6:	d112      	bne.n	8006ece <USBD_StdEPReq+0x14a>
              {
                if ((ep_addr & 0x7FU) != 0x00U)
 8006ea8:	7bbb      	ldrb	r3, [r7, #14]
 8006eaa:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8006eae:	2b00      	cmp	r3, #0
 8006eb0:	d004      	beq.n	8006ebc <USBD_StdEPReq+0x138>
                {
                  USBD_LL_ClearStallEP(pdev, ep_addr);
 8006eb2:	7bbb      	ldrb	r3, [r7, #14]
 8006eb4:	4619      	mov	r1, r3
 8006eb6:	6878      	ldr	r0, [r7, #4]
 8006eb8:	f001 f84d 	bl	8007f56 <USBD_LL_ClearStallEP>
                }
                USBD_CtlSendStatus(pdev);
 8006ebc:	6878      	ldr	r0, [r7, #4]
 8006ebe:	f000 fc97 	bl	80077f0 <USBD_CtlSendStatus>
              }
              break;
 8006ec2:	e004      	b.n	8006ece <USBD_StdEPReq+0x14a>

            default:
              USBD_CtlError(pdev, req);
 8006ec4:	6839      	ldr	r1, [r7, #0]
 8006ec6:	6878      	ldr	r0, [r7, #4]
 8006ec8:	f000 fbca 	bl	8007660 <USBD_CtlError>
              break;
 8006ecc:	e000      	b.n	8006ed0 <USBD_StdEPReq+0x14c>
              break;
 8006ece:	bf00      	nop
          }
          break;
 8006ed0:	e0aa      	b.n	8007028 <USBD_StdEPReq+0x2a4>

        case USB_REQ_GET_STATUS:
          switch (pdev->dev_state)
 8006ed2:	687b      	ldr	r3, [r7, #4]
 8006ed4:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8006ed8:	2b02      	cmp	r3, #2
 8006eda:	d002      	beq.n	8006ee2 <USBD_StdEPReq+0x15e>
 8006edc:	2b03      	cmp	r3, #3
 8006ede:	d032      	beq.n	8006f46 <USBD_StdEPReq+0x1c2>
 8006ee0:	e097      	b.n	8007012 <USBD_StdEPReq+0x28e>
          {
            case USBD_STATE_ADDRESSED:
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 8006ee2:	7bbb      	ldrb	r3, [r7, #14]
 8006ee4:	2b00      	cmp	r3, #0
 8006ee6:	d007      	beq.n	8006ef8 <USBD_StdEPReq+0x174>
 8006ee8:	7bbb      	ldrb	r3, [r7, #14]
 8006eea:	2b80      	cmp	r3, #128	; 0x80
 8006eec:	d004      	beq.n	8006ef8 <USBD_StdEPReq+0x174>
              {
                USBD_CtlError(pdev, req);
 8006eee:	6839      	ldr	r1, [r7, #0]
 8006ef0:	6878      	ldr	r0, [r7, #4]
 8006ef2:	f000 fbb5 	bl	8007660 <USBD_CtlError>
                break;
 8006ef6:	e091      	b.n	800701c <USBD_StdEPReq+0x298>
              }
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 8006ef8:	f997 300e 	ldrsb.w	r3, [r7, #14]
 8006efc:	2b00      	cmp	r3, #0
 8006efe:	da0b      	bge.n	8006f18 <USBD_StdEPReq+0x194>
 8006f00:	7bbb      	ldrb	r3, [r7, #14]
 8006f02:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 8006f06:	4613      	mov	r3, r2
 8006f08:	009b      	lsls	r3, r3, #2
 8006f0a:	4413      	add	r3, r2
 8006f0c:	009b      	lsls	r3, r3, #2
 8006f0e:	3310      	adds	r3, #16
 8006f10:	687a      	ldr	r2, [r7, #4]
 8006f12:	4413      	add	r3, r2
 8006f14:	3304      	adds	r3, #4
 8006f16:	e00b      	b.n	8006f30 <USBD_StdEPReq+0x1ac>
                    &pdev->ep_out[ep_addr & 0x7FU];
 8006f18:	7bbb      	ldrb	r3, [r7, #14]
 8006f1a:	f003 027f 	and.w	r2, r3, #127	; 0x7f
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 8006f1e:	4613      	mov	r3, r2
 8006f20:	009b      	lsls	r3, r3, #2
 8006f22:	4413      	add	r3, r2
 8006f24:	009b      	lsls	r3, r3, #2
 8006f26:	f503 73a8 	add.w	r3, r3, #336	; 0x150
 8006f2a:	687a      	ldr	r2, [r7, #4]
 8006f2c:	4413      	add	r3, r2
 8006f2e:	3304      	adds	r3, #4
 8006f30:	60bb      	str	r3, [r7, #8]

              pep->status = 0x0000U;
 8006f32:	68bb      	ldr	r3, [r7, #8]
 8006f34:	2200      	movs	r2, #0
 8006f36:	601a      	str	r2, [r3, #0]

              USBD_CtlSendData(pdev, (uint8_t *)(void *)&pep->status, 2U);
 8006f38:	68bb      	ldr	r3, [r7, #8]
 8006f3a:	2202      	movs	r2, #2
 8006f3c:	4619      	mov	r1, r3
 8006f3e:	6878      	ldr	r0, [r7, #4]
 8006f40:	f000 fbf8 	bl	8007734 <USBD_CtlSendData>
              break;
 8006f44:	e06a      	b.n	800701c <USBD_StdEPReq+0x298>

            case USBD_STATE_CONFIGURED:
              if ((ep_addr & 0x80U) == 0x80U)
 8006f46:	f997 300e 	ldrsb.w	r3, [r7, #14]
 8006f4a:	2b00      	cmp	r3, #0
 8006f4c:	da11      	bge.n	8006f72 <USBD_StdEPReq+0x1ee>
              {
                if (pdev->ep_in[ep_addr & 0xFU].is_used == 0U)
 8006f4e:	7bbb      	ldrb	r3, [r7, #14]
 8006f50:	f003 020f 	and.w	r2, r3, #15
 8006f54:	6879      	ldr	r1, [r7, #4]
 8006f56:	4613      	mov	r3, r2
 8006f58:	009b      	lsls	r3, r3, #2
 8006f5a:	4413      	add	r3, r2
 8006f5c:	009b      	lsls	r3, r3, #2
 8006f5e:	440b      	add	r3, r1
 8006f60:	3318      	adds	r3, #24
 8006f62:	681b      	ldr	r3, [r3, #0]
 8006f64:	2b00      	cmp	r3, #0
 8006f66:	d117      	bne.n	8006f98 <USBD_StdEPReq+0x214>
                {
                  USBD_CtlError(pdev, req);
 8006f68:	6839      	ldr	r1, [r7, #0]
 8006f6a:	6878      	ldr	r0, [r7, #4]
 8006f6c:	f000 fb78 	bl	8007660 <USBD_CtlError>
                  break;
 8006f70:	e054      	b.n	800701c <USBD_StdEPReq+0x298>
                }
              }
              else
              {
                if (pdev->ep_out[ep_addr & 0xFU].is_used == 0U)
 8006f72:	7bbb      	ldrb	r3, [r7, #14]
 8006f74:	f003 020f 	and.w	r2, r3, #15
 8006f78:	6879      	ldr	r1, [r7, #4]
 8006f7a:	4613      	mov	r3, r2
 8006f7c:	009b      	lsls	r3, r3, #2
 8006f7e:	4413      	add	r3, r2
 8006f80:	009b      	lsls	r3, r3, #2
 8006f82:	440b      	add	r3, r1
 8006f84:	f503 73ac 	add.w	r3, r3, #344	; 0x158
 8006f88:	681b      	ldr	r3, [r3, #0]
 8006f8a:	2b00      	cmp	r3, #0
 8006f8c:	d104      	bne.n	8006f98 <USBD_StdEPReq+0x214>
                {
                  USBD_CtlError(pdev, req);
 8006f8e:	6839      	ldr	r1, [r7, #0]
 8006f90:	6878      	ldr	r0, [r7, #4]
 8006f92:	f000 fb65 	bl	8007660 <USBD_CtlError>
                  break;
 8006f96:	e041      	b.n	800701c <USBD_StdEPReq+0x298>
                }
              }

              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 8006f98:	f997 300e 	ldrsb.w	r3, [r7, #14]
 8006f9c:	2b00      	cmp	r3, #0
 8006f9e:	da0b      	bge.n	8006fb8 <USBD_StdEPReq+0x234>
 8006fa0:	7bbb      	ldrb	r3, [r7, #14]
 8006fa2:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 8006fa6:	4613      	mov	r3, r2
 8006fa8:	009b      	lsls	r3, r3, #2
 8006faa:	4413      	add	r3, r2
 8006fac:	009b      	lsls	r3, r3, #2
 8006fae:	3310      	adds	r3, #16
 8006fb0:	687a      	ldr	r2, [r7, #4]
 8006fb2:	4413      	add	r3, r2
 8006fb4:	3304      	adds	r3, #4
 8006fb6:	e00b      	b.n	8006fd0 <USBD_StdEPReq+0x24c>
                    &pdev->ep_out[ep_addr & 0x7FU];
 8006fb8:	7bbb      	ldrb	r3, [r7, #14]
 8006fba:	f003 027f 	and.w	r2, r3, #127	; 0x7f
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 8006fbe:	4613      	mov	r3, r2
 8006fc0:	009b      	lsls	r3, r3, #2
 8006fc2:	4413      	add	r3, r2
 8006fc4:	009b      	lsls	r3, r3, #2
 8006fc6:	f503 73a8 	add.w	r3, r3, #336	; 0x150
 8006fca:	687a      	ldr	r2, [r7, #4]
 8006fcc:	4413      	add	r3, r2
 8006fce:	3304      	adds	r3, #4
 8006fd0:	60bb      	str	r3, [r7, #8]

              if ((ep_addr == 0x00U) || (ep_addr == 0x80U))
 8006fd2:	7bbb      	ldrb	r3, [r7, #14]
 8006fd4:	2b00      	cmp	r3, #0
 8006fd6:	d002      	beq.n	8006fde <USBD_StdEPReq+0x25a>
 8006fd8:	7bbb      	ldrb	r3, [r7, #14]
 8006fda:	2b80      	cmp	r3, #128	; 0x80
 8006fdc:	d103      	bne.n	8006fe6 <USBD_StdEPReq+0x262>
              {
                pep->status = 0x0000U;
 8006fde:	68bb      	ldr	r3, [r7, #8]
 8006fe0:	2200      	movs	r2, #0
 8006fe2:	601a      	str	r2, [r3, #0]
 8006fe4:	e00e      	b.n	8007004 <USBD_StdEPReq+0x280>
              }
              else if (USBD_LL_IsStallEP(pdev, ep_addr))
 8006fe6:	7bbb      	ldrb	r3, [r7, #14]
 8006fe8:	4619      	mov	r1, r3
 8006fea:	6878      	ldr	r0, [r7, #4]
 8006fec:	f000 ffd2 	bl	8007f94 <USBD_LL_IsStallEP>
 8006ff0:	4603      	mov	r3, r0
 8006ff2:	2b00      	cmp	r3, #0
 8006ff4:	d003      	beq.n	8006ffe <USBD_StdEPReq+0x27a>
              {
                pep->status = 0x0001U;
 8006ff6:	68bb      	ldr	r3, [r7, #8]
 8006ff8:	2201      	movs	r2, #1
 8006ffa:	601a      	str	r2, [r3, #0]
 8006ffc:	e002      	b.n	8007004 <USBD_StdEPReq+0x280>
              }
              else
              {
                pep->status = 0x0000U;
 8006ffe:	68bb      	ldr	r3, [r7, #8]
 8007000:	2200      	movs	r2, #0
 8007002:	601a      	str	r2, [r3, #0]
              }

              USBD_CtlSendData(pdev, (uint8_t *)(void *)&pep->status, 2U);
 8007004:	68bb      	ldr	r3, [r7, #8]
 8007006:	2202      	movs	r2, #2
 8007008:	4619      	mov	r1, r3
 800700a:	6878      	ldr	r0, [r7, #4]
 800700c:	f000 fb92 	bl	8007734 <USBD_CtlSendData>
              break;
 8007010:	e004      	b.n	800701c <USBD_StdEPReq+0x298>

            default:
              USBD_CtlError(pdev, req);
 8007012:	6839      	ldr	r1, [r7, #0]
 8007014:	6878      	ldr	r0, [r7, #4]
 8007016:	f000 fb23 	bl	8007660 <USBD_CtlError>
              break;
 800701a:	bf00      	nop
          }
          break;
 800701c:	e004      	b.n	8007028 <USBD_StdEPReq+0x2a4>

        default:
          USBD_CtlError(pdev, req);
 800701e:	6839      	ldr	r1, [r7, #0]
 8007020:	6878      	ldr	r0, [r7, #4]
 8007022:	f000 fb1d 	bl	8007660 <USBD_CtlError>
          break;
 8007026:	bf00      	nop
      }
      break;
 8007028:	e004      	b.n	8007034 <USBD_StdEPReq+0x2b0>

    default:
      USBD_CtlError(pdev, req);
 800702a:	6839      	ldr	r1, [r7, #0]
 800702c:	6878      	ldr	r0, [r7, #4]
 800702e:	f000 fb17 	bl	8007660 <USBD_CtlError>
      break;
 8007032:	bf00      	nop
  }

  return ret;
 8007034:	7bfb      	ldrb	r3, [r7, #15]
}
 8007036:	4618      	mov	r0, r3
 8007038:	3710      	adds	r7, #16
 800703a:	46bd      	mov	sp, r7
 800703c:	bd80      	pop	{r7, pc}
	...

08007040 <USBD_GetDescriptor>:
* @param  req: usb request
* @retval status
*/
static void USBD_GetDescriptor(USBD_HandleTypeDef *pdev,
                               USBD_SetupReqTypedef *req)
{
 8007040:	b580      	push	{r7, lr}
 8007042:	b084      	sub	sp, #16
 8007044:	af00      	add	r7, sp, #0
 8007046:	6078      	str	r0, [r7, #4]
 8007048:	6039      	str	r1, [r7, #0]
  uint16_t len = 0U;
 800704a:	2300      	movs	r3, #0
 800704c:	813b      	strh	r3, [r7, #8]
  uint8_t *pbuf = NULL;
 800704e:	2300      	movs	r3, #0
 8007050:	60fb      	str	r3, [r7, #12]
  uint8_t err = 0U;
 8007052:	2300      	movs	r3, #0
 8007054:	72fb      	strb	r3, [r7, #11]

  switch (req->wValue >> 8)
 8007056:	683b      	ldr	r3, [r7, #0]
 8007058:	885b      	ldrh	r3, [r3, #2]
 800705a:	0a1b      	lsrs	r3, r3, #8
 800705c:	b29b      	uxth	r3, r3
 800705e:	3b01      	subs	r3, #1
 8007060:	2b06      	cmp	r3, #6
 8007062:	f200 8128 	bhi.w	80072b6 <USBD_GetDescriptor+0x276>
 8007066:	a201      	add	r2, pc, #4	; (adr r2, 800706c <USBD_GetDescriptor+0x2c>)
 8007068:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800706c:	08007089 	.word	0x08007089
 8007070:	080070a1 	.word	0x080070a1
 8007074:	080070e1 	.word	0x080070e1
 8007078:	080072b7 	.word	0x080072b7
 800707c:	080072b7 	.word	0x080072b7
 8007080:	08007257 	.word	0x08007257
 8007084:	08007283 	.word	0x08007283
        err++;
      }
      break;
#endif
    case USB_DESC_TYPE_DEVICE:
      pbuf = pdev->pDesc->GetDeviceDescriptor(pdev->dev_speed, &len);
 8007088:	687b      	ldr	r3, [r7, #4]
 800708a:	f8d3 32b0 	ldr.w	r3, [r3, #688]	; 0x2b0
 800708e:	681b      	ldr	r3, [r3, #0]
 8007090:	687a      	ldr	r2, [r7, #4]
 8007092:	7c12      	ldrb	r2, [r2, #16]
 8007094:	f107 0108 	add.w	r1, r7, #8
 8007098:	4610      	mov	r0, r2
 800709a:	4798      	blx	r3
 800709c:	60f8      	str	r0, [r7, #12]
      break;
 800709e:	e112      	b.n	80072c6 <USBD_GetDescriptor+0x286>

    case USB_DESC_TYPE_CONFIGURATION:
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 80070a0:	687b      	ldr	r3, [r7, #4]
 80070a2:	7c1b      	ldrb	r3, [r3, #16]
 80070a4:	2b00      	cmp	r3, #0
 80070a6:	d10d      	bne.n	80070c4 <USBD_GetDescriptor+0x84>
      {
        pbuf = pdev->pClass->GetHSConfigDescriptor(&len);
 80070a8:	687b      	ldr	r3, [r7, #4]
 80070aa:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 80070ae:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80070b0:	f107 0208 	add.w	r2, r7, #8
 80070b4:	4610      	mov	r0, r2
 80070b6:	4798      	blx	r3
 80070b8:	60f8      	str	r0, [r7, #12]
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
 80070ba:	68fb      	ldr	r3, [r7, #12]
 80070bc:	3301      	adds	r3, #1
 80070be:	2202      	movs	r2, #2
 80070c0:	701a      	strb	r2, [r3, #0]
      else
      {
        pbuf = pdev->pClass->GetFSConfigDescriptor(&len);
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
      }
      break;
 80070c2:	e100      	b.n	80072c6 <USBD_GetDescriptor+0x286>
        pbuf = pdev->pClass->GetFSConfigDescriptor(&len);
 80070c4:	687b      	ldr	r3, [r7, #4]
 80070c6:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 80070ca:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80070cc:	f107 0208 	add.w	r2, r7, #8
 80070d0:	4610      	mov	r0, r2
 80070d2:	4798      	blx	r3
 80070d4:	60f8      	str	r0, [r7, #12]
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
 80070d6:	68fb      	ldr	r3, [r7, #12]
 80070d8:	3301      	adds	r3, #1
 80070da:	2202      	movs	r2, #2
 80070dc:	701a      	strb	r2, [r3, #0]
      break;
 80070de:	e0f2      	b.n	80072c6 <USBD_GetDescriptor+0x286>

    case USB_DESC_TYPE_STRING:
      switch ((uint8_t)(req->wValue))
 80070e0:	683b      	ldr	r3, [r7, #0]
 80070e2:	885b      	ldrh	r3, [r3, #2]
 80070e4:	b2db      	uxtb	r3, r3
 80070e6:	2b05      	cmp	r3, #5
 80070e8:	f200 80ac 	bhi.w	8007244 <USBD_GetDescriptor+0x204>
 80070ec:	a201      	add	r2, pc, #4	; (adr r2, 80070f4 <USBD_GetDescriptor+0xb4>)
 80070ee:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80070f2:	bf00      	nop
 80070f4:	0800710d 	.word	0x0800710d
 80070f8:	08007141 	.word	0x08007141
 80070fc:	08007175 	.word	0x08007175
 8007100:	080071a9 	.word	0x080071a9
 8007104:	080071dd 	.word	0x080071dd
 8007108:	08007211 	.word	0x08007211
      {
        case USBD_IDX_LANGID_STR:
          if (pdev->pDesc->GetLangIDStrDescriptor != NULL)
 800710c:	687b      	ldr	r3, [r7, #4]
 800710e:	f8d3 32b0 	ldr.w	r3, [r3, #688]	; 0x2b0
 8007112:	685b      	ldr	r3, [r3, #4]
 8007114:	2b00      	cmp	r3, #0
 8007116:	d00b      	beq.n	8007130 <USBD_GetDescriptor+0xf0>
          {
            pbuf = pdev->pDesc->GetLangIDStrDescriptor(pdev->dev_speed, &len);
 8007118:	687b      	ldr	r3, [r7, #4]
 800711a:	f8d3 32b0 	ldr.w	r3, [r3, #688]	; 0x2b0
 800711e:	685b      	ldr	r3, [r3, #4]
 8007120:	687a      	ldr	r2, [r7, #4]
 8007122:	7c12      	ldrb	r2, [r2, #16]
 8007124:	f107 0108 	add.w	r1, r7, #8
 8007128:	4610      	mov	r0, r2
 800712a:	4798      	blx	r3
 800712c:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 800712e:	e091      	b.n	8007254 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 8007130:	6839      	ldr	r1, [r7, #0]
 8007132:	6878      	ldr	r0, [r7, #4]
 8007134:	f000 fa94 	bl	8007660 <USBD_CtlError>
            err++;
 8007138:	7afb      	ldrb	r3, [r7, #11]
 800713a:	3301      	adds	r3, #1
 800713c:	72fb      	strb	r3, [r7, #11]
          break;
 800713e:	e089      	b.n	8007254 <USBD_GetDescriptor+0x214>

        case USBD_IDX_MFC_STR:
          if (pdev->pDesc->GetManufacturerStrDescriptor != NULL)
 8007140:	687b      	ldr	r3, [r7, #4]
 8007142:	f8d3 32b0 	ldr.w	r3, [r3, #688]	; 0x2b0
 8007146:	689b      	ldr	r3, [r3, #8]
 8007148:	2b00      	cmp	r3, #0
 800714a:	d00b      	beq.n	8007164 <USBD_GetDescriptor+0x124>
          {
            pbuf = pdev->pDesc->GetManufacturerStrDescriptor(pdev->dev_speed, &len);
 800714c:	687b      	ldr	r3, [r7, #4]
 800714e:	f8d3 32b0 	ldr.w	r3, [r3, #688]	; 0x2b0
 8007152:	689b      	ldr	r3, [r3, #8]
 8007154:	687a      	ldr	r2, [r7, #4]
 8007156:	7c12      	ldrb	r2, [r2, #16]
 8007158:	f107 0108 	add.w	r1, r7, #8
 800715c:	4610      	mov	r0, r2
 800715e:	4798      	blx	r3
 8007160:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 8007162:	e077      	b.n	8007254 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 8007164:	6839      	ldr	r1, [r7, #0]
 8007166:	6878      	ldr	r0, [r7, #4]
 8007168:	f000 fa7a 	bl	8007660 <USBD_CtlError>
            err++;
 800716c:	7afb      	ldrb	r3, [r7, #11]
 800716e:	3301      	adds	r3, #1
 8007170:	72fb      	strb	r3, [r7, #11]
          break;
 8007172:	e06f      	b.n	8007254 <USBD_GetDescriptor+0x214>

        case USBD_IDX_PRODUCT_STR:
          if (pdev->pDesc->GetProductStrDescriptor != NULL)
 8007174:	687b      	ldr	r3, [r7, #4]
 8007176:	f8d3 32b0 	ldr.w	r3, [r3, #688]	; 0x2b0
 800717a:	68db      	ldr	r3, [r3, #12]
 800717c:	2b00      	cmp	r3, #0
 800717e:	d00b      	beq.n	8007198 <USBD_GetDescriptor+0x158>
          {
            pbuf = pdev->pDesc->GetProductStrDescriptor(pdev->dev_speed, &len);
 8007180:	687b      	ldr	r3, [r7, #4]
 8007182:	f8d3 32b0 	ldr.w	r3, [r3, #688]	; 0x2b0
 8007186:	68db      	ldr	r3, [r3, #12]
 8007188:	687a      	ldr	r2, [r7, #4]
 800718a:	7c12      	ldrb	r2, [r2, #16]
 800718c:	f107 0108 	add.w	r1, r7, #8
 8007190:	4610      	mov	r0, r2
 8007192:	4798      	blx	r3
 8007194:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 8007196:	e05d      	b.n	8007254 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 8007198:	6839      	ldr	r1, [r7, #0]
 800719a:	6878      	ldr	r0, [r7, #4]
 800719c:	f000 fa60 	bl	8007660 <USBD_CtlError>
            err++;
 80071a0:	7afb      	ldrb	r3, [r7, #11]
 80071a2:	3301      	adds	r3, #1
 80071a4:	72fb      	strb	r3, [r7, #11]
          break;
 80071a6:	e055      	b.n	8007254 <USBD_GetDescriptor+0x214>

        case USBD_IDX_SERIAL_STR:
          if (pdev->pDesc->GetSerialStrDescriptor != NULL)
 80071a8:	687b      	ldr	r3, [r7, #4]
 80071aa:	f8d3 32b0 	ldr.w	r3, [r3, #688]	; 0x2b0
 80071ae:	691b      	ldr	r3, [r3, #16]
 80071b0:	2b00      	cmp	r3, #0
 80071b2:	d00b      	beq.n	80071cc <USBD_GetDescriptor+0x18c>
          {
            pbuf = pdev->pDesc->GetSerialStrDescriptor(pdev->dev_speed, &len);
 80071b4:	687b      	ldr	r3, [r7, #4]
 80071b6:	f8d3 32b0 	ldr.w	r3, [r3, #688]	; 0x2b0
 80071ba:	691b      	ldr	r3, [r3, #16]
 80071bc:	687a      	ldr	r2, [r7, #4]
 80071be:	7c12      	ldrb	r2, [r2, #16]
 80071c0:	f107 0108 	add.w	r1, r7, #8
 80071c4:	4610      	mov	r0, r2
 80071c6:	4798      	blx	r3
 80071c8:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 80071ca:	e043      	b.n	8007254 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 80071cc:	6839      	ldr	r1, [r7, #0]
 80071ce:	6878      	ldr	r0, [r7, #4]
 80071d0:	f000 fa46 	bl	8007660 <USBD_CtlError>
            err++;
 80071d4:	7afb      	ldrb	r3, [r7, #11]
 80071d6:	3301      	adds	r3, #1
 80071d8:	72fb      	strb	r3, [r7, #11]
          break;
 80071da:	e03b      	b.n	8007254 <USBD_GetDescriptor+0x214>

        case USBD_IDX_CONFIG_STR:
          if (pdev->pDesc->GetConfigurationStrDescriptor != NULL)
 80071dc:	687b      	ldr	r3, [r7, #4]
 80071de:	f8d3 32b0 	ldr.w	r3, [r3, #688]	; 0x2b0
 80071e2:	695b      	ldr	r3, [r3, #20]
 80071e4:	2b00      	cmp	r3, #0
 80071e6:	d00b      	beq.n	8007200 <USBD_GetDescriptor+0x1c0>
          {
            pbuf = pdev->pDesc->GetConfigurationStrDescriptor(pdev->dev_speed, &len);
 80071e8:	687b      	ldr	r3, [r7, #4]
 80071ea:	f8d3 32b0 	ldr.w	r3, [r3, #688]	; 0x2b0
 80071ee:	695b      	ldr	r3, [r3, #20]
 80071f0:	687a      	ldr	r2, [r7, #4]
 80071f2:	7c12      	ldrb	r2, [r2, #16]
 80071f4:	f107 0108 	add.w	r1, r7, #8
 80071f8:	4610      	mov	r0, r2
 80071fa:	4798      	blx	r3
 80071fc:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 80071fe:	e029      	b.n	8007254 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 8007200:	6839      	ldr	r1, [r7, #0]
 8007202:	6878      	ldr	r0, [r7, #4]
 8007204:	f000 fa2c 	bl	8007660 <USBD_CtlError>
            err++;
 8007208:	7afb      	ldrb	r3, [r7, #11]
 800720a:	3301      	adds	r3, #1
 800720c:	72fb      	strb	r3, [r7, #11]
          break;
 800720e:	e021      	b.n	8007254 <USBD_GetDescriptor+0x214>

        case USBD_IDX_INTERFACE_STR:
          if (pdev->pDesc->GetInterfaceStrDescriptor != NULL)
 8007210:	687b      	ldr	r3, [r7, #4]
 8007212:	f8d3 32b0 	ldr.w	r3, [r3, #688]	; 0x2b0
 8007216:	699b      	ldr	r3, [r3, #24]
 8007218:	2b00      	cmp	r3, #0
 800721a:	d00b      	beq.n	8007234 <USBD_GetDescriptor+0x1f4>
          {
            pbuf = pdev->pDesc->GetInterfaceStrDescriptor(pdev->dev_speed, &len);
 800721c:	687b      	ldr	r3, [r7, #4]
 800721e:	f8d3 32b0 	ldr.w	r3, [r3, #688]	; 0x2b0
 8007222:	699b      	ldr	r3, [r3, #24]
 8007224:	687a      	ldr	r2, [r7, #4]
 8007226:	7c12      	ldrb	r2, [r2, #16]
 8007228:	f107 0108 	add.w	r1, r7, #8
 800722c:	4610      	mov	r0, r2
 800722e:	4798      	blx	r3
 8007230:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 8007232:	e00f      	b.n	8007254 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 8007234:	6839      	ldr	r1, [r7, #0]
 8007236:	6878      	ldr	r0, [r7, #4]
 8007238:	f000 fa12 	bl	8007660 <USBD_CtlError>
            err++;
 800723c:	7afb      	ldrb	r3, [r7, #11]
 800723e:	3301      	adds	r3, #1
 8007240:	72fb      	strb	r3, [r7, #11]
          break;
 8007242:	e007      	b.n	8007254 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
#else
          USBD_CtlError(pdev, req);
 8007244:	6839      	ldr	r1, [r7, #0]
 8007246:	6878      	ldr	r0, [r7, #4]
 8007248:	f000 fa0a 	bl	8007660 <USBD_CtlError>
          err++;
 800724c:	7afb      	ldrb	r3, [r7, #11]
 800724e:	3301      	adds	r3, #1
 8007250:	72fb      	strb	r3, [r7, #11]
#endif
      }
      break;
 8007252:	e038      	b.n	80072c6 <USBD_GetDescriptor+0x286>
 8007254:	e037      	b.n	80072c6 <USBD_GetDescriptor+0x286>

    case USB_DESC_TYPE_DEVICE_QUALIFIER:
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 8007256:	687b      	ldr	r3, [r7, #4]
 8007258:	7c1b      	ldrb	r3, [r3, #16]
 800725a:	2b00      	cmp	r3, #0
 800725c:	d109      	bne.n	8007272 <USBD_GetDescriptor+0x232>
      {
        pbuf = pdev->pClass->GetDeviceQualifierDescriptor(&len);
 800725e:	687b      	ldr	r3, [r7, #4]
 8007260:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8007264:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8007266:	f107 0208 	add.w	r2, r7, #8
 800726a:	4610      	mov	r0, r2
 800726c:	4798      	blx	r3
 800726e:	60f8      	str	r0, [r7, #12]
      else
      {
        USBD_CtlError(pdev, req);
        err++;
      }
      break;
 8007270:	e029      	b.n	80072c6 <USBD_GetDescriptor+0x286>
        USBD_CtlError(pdev, req);
 8007272:	6839      	ldr	r1, [r7, #0]
 8007274:	6878      	ldr	r0, [r7, #4]
 8007276:	f000 f9f3 	bl	8007660 <USBD_CtlError>
        err++;
 800727a:	7afb      	ldrb	r3, [r7, #11]
 800727c:	3301      	adds	r3, #1
 800727e:	72fb      	strb	r3, [r7, #11]
      break;
 8007280:	e021      	b.n	80072c6 <USBD_GetDescriptor+0x286>

    case USB_DESC_TYPE_OTHER_SPEED_CONFIGURATION:
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 8007282:	687b      	ldr	r3, [r7, #4]
 8007284:	7c1b      	ldrb	r3, [r3, #16]
 8007286:	2b00      	cmp	r3, #0
 8007288:	d10d      	bne.n	80072a6 <USBD_GetDescriptor+0x266>
      {
        pbuf = pdev->pClass->GetOtherSpeedConfigDescriptor(&len);
 800728a:	687b      	ldr	r3, [r7, #4]
 800728c:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8007290:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8007292:	f107 0208 	add.w	r2, r7, #8
 8007296:	4610      	mov	r0, r2
 8007298:	4798      	blx	r3
 800729a:	60f8      	str	r0, [r7, #12]
        pbuf[1] = USB_DESC_TYPE_OTHER_SPEED_CONFIGURATION;
 800729c:	68fb      	ldr	r3, [r7, #12]
 800729e:	3301      	adds	r3, #1
 80072a0:	2207      	movs	r2, #7
 80072a2:	701a      	strb	r2, [r3, #0]
      else
      {
        USBD_CtlError(pdev, req);
        err++;
      }
      break;
 80072a4:	e00f      	b.n	80072c6 <USBD_GetDescriptor+0x286>
        USBD_CtlError(pdev, req);
 80072a6:	6839      	ldr	r1, [r7, #0]
 80072a8:	6878      	ldr	r0, [r7, #4]
 80072aa:	f000 f9d9 	bl	8007660 <USBD_CtlError>
        err++;
 80072ae:	7afb      	ldrb	r3, [r7, #11]
 80072b0:	3301      	adds	r3, #1
 80072b2:	72fb      	strb	r3, [r7, #11]
      break;
 80072b4:	e007      	b.n	80072c6 <USBD_GetDescriptor+0x286>

    default:
      USBD_CtlError(pdev, req);
 80072b6:	6839      	ldr	r1, [r7, #0]
 80072b8:	6878      	ldr	r0, [r7, #4]
 80072ba:	f000 f9d1 	bl	8007660 <USBD_CtlError>
      err++;
 80072be:	7afb      	ldrb	r3, [r7, #11]
 80072c0:	3301      	adds	r3, #1
 80072c2:	72fb      	strb	r3, [r7, #11]
      break;
 80072c4:	bf00      	nop
  }

  if (err != 0U)
 80072c6:	7afb      	ldrb	r3, [r7, #11]
 80072c8:	2b00      	cmp	r3, #0
 80072ca:	d11c      	bne.n	8007306 <USBD_GetDescriptor+0x2c6>
  {
    return;
  }
  else
  {
    if ((len != 0U) && (req->wLength != 0U))
 80072cc:	893b      	ldrh	r3, [r7, #8]
 80072ce:	2b00      	cmp	r3, #0
 80072d0:	d011      	beq.n	80072f6 <USBD_GetDescriptor+0x2b6>
 80072d2:	683b      	ldr	r3, [r7, #0]
 80072d4:	88db      	ldrh	r3, [r3, #6]
 80072d6:	2b00      	cmp	r3, #0
 80072d8:	d00d      	beq.n	80072f6 <USBD_GetDescriptor+0x2b6>
    {
      len = MIN(len, req->wLength);
 80072da:	683b      	ldr	r3, [r7, #0]
 80072dc:	88da      	ldrh	r2, [r3, #6]
 80072de:	893b      	ldrh	r3, [r7, #8]
 80072e0:	4293      	cmp	r3, r2
 80072e2:	bf28      	it	cs
 80072e4:	4613      	movcs	r3, r2
 80072e6:	b29b      	uxth	r3, r3
 80072e8:	813b      	strh	r3, [r7, #8]
      (void)USBD_CtlSendData(pdev, pbuf, len);
 80072ea:	893b      	ldrh	r3, [r7, #8]
 80072ec:	461a      	mov	r2, r3
 80072ee:	68f9      	ldr	r1, [r7, #12]
 80072f0:	6878      	ldr	r0, [r7, #4]
 80072f2:	f000 fa1f 	bl	8007734 <USBD_CtlSendData>
    }

    if (req->wLength == 0U)
 80072f6:	683b      	ldr	r3, [r7, #0]
 80072f8:	88db      	ldrh	r3, [r3, #6]
 80072fa:	2b00      	cmp	r3, #0
 80072fc:	d104      	bne.n	8007308 <USBD_GetDescriptor+0x2c8>
    {
      (void)USBD_CtlSendStatus(pdev);
 80072fe:	6878      	ldr	r0, [r7, #4]
 8007300:	f000 fa76 	bl	80077f0 <USBD_CtlSendStatus>
 8007304:	e000      	b.n	8007308 <USBD_GetDescriptor+0x2c8>
    return;
 8007306:	bf00      	nop
    }
  }
}
 8007308:	3710      	adds	r7, #16
 800730a:	46bd      	mov	sp, r7
 800730c:	bd80      	pop	{r7, pc}
 800730e:	bf00      	nop

08007310 <USBD_SetAddress>:
* @param  req: usb request
* @retval status
*/
static void USBD_SetAddress(USBD_HandleTypeDef *pdev,
                            USBD_SetupReqTypedef *req)
{
 8007310:	b580      	push	{r7, lr}
 8007312:	b084      	sub	sp, #16
 8007314:	af00      	add	r7, sp, #0
 8007316:	6078      	str	r0, [r7, #4]
 8007318:	6039      	str	r1, [r7, #0]
  uint8_t  dev_addr;

  if ((req->wIndex == 0U) && (req->wLength == 0U) && (req->wValue < 128U))
 800731a:	683b      	ldr	r3, [r7, #0]
 800731c:	889b      	ldrh	r3, [r3, #4]
 800731e:	2b00      	cmp	r3, #0
 8007320:	d130      	bne.n	8007384 <USBD_SetAddress+0x74>
 8007322:	683b      	ldr	r3, [r7, #0]
 8007324:	88db      	ldrh	r3, [r3, #6]
 8007326:	2b00      	cmp	r3, #0
 8007328:	d12c      	bne.n	8007384 <USBD_SetAddress+0x74>
 800732a:	683b      	ldr	r3, [r7, #0]
 800732c:	885b      	ldrh	r3, [r3, #2]
 800732e:	2b7f      	cmp	r3, #127	; 0x7f
 8007330:	d828      	bhi.n	8007384 <USBD_SetAddress+0x74>
  {
    dev_addr = (uint8_t)(req->wValue) & 0x7FU;
 8007332:	683b      	ldr	r3, [r7, #0]
 8007334:	885b      	ldrh	r3, [r3, #2]
 8007336:	b2db      	uxtb	r3, r3
 8007338:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800733c:	73fb      	strb	r3, [r7, #15]

    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800733e:	687b      	ldr	r3, [r7, #4]
 8007340:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8007344:	2b03      	cmp	r3, #3
 8007346:	d104      	bne.n	8007352 <USBD_SetAddress+0x42>
    {
      USBD_CtlError(pdev, req);
 8007348:	6839      	ldr	r1, [r7, #0]
 800734a:	6878      	ldr	r0, [r7, #4]
 800734c:	f000 f988 	bl	8007660 <USBD_CtlError>
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8007350:	e01c      	b.n	800738c <USBD_SetAddress+0x7c>
    }
    else
    {
      pdev->dev_address = dev_addr;
 8007352:	687b      	ldr	r3, [r7, #4]
 8007354:	7bfa      	ldrb	r2, [r7, #15]
 8007356:	f883 229e 	strb.w	r2, [r3, #670]	; 0x29e
      USBD_LL_SetUSBAddress(pdev, dev_addr);
 800735a:	7bfb      	ldrb	r3, [r7, #15]
 800735c:	4619      	mov	r1, r3
 800735e:	6878      	ldr	r0, [r7, #4]
 8007360:	f000 fe44 	bl	8007fec <USBD_LL_SetUSBAddress>
      USBD_CtlSendStatus(pdev);
 8007364:	6878      	ldr	r0, [r7, #4]
 8007366:	f000 fa43 	bl	80077f0 <USBD_CtlSendStatus>

      if (dev_addr != 0U)
 800736a:	7bfb      	ldrb	r3, [r7, #15]
 800736c:	2b00      	cmp	r3, #0
 800736e:	d004      	beq.n	800737a <USBD_SetAddress+0x6a>
      {
        pdev->dev_state = USBD_STATE_ADDRESSED;
 8007370:	687b      	ldr	r3, [r7, #4]
 8007372:	2202      	movs	r2, #2
 8007374:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8007378:	e008      	b.n	800738c <USBD_SetAddress+0x7c>
      }
      else
      {
        pdev->dev_state = USBD_STATE_DEFAULT;
 800737a:	687b      	ldr	r3, [r7, #4]
 800737c:	2201      	movs	r2, #1
 800737e:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8007382:	e003      	b.n	800738c <USBD_SetAddress+0x7c>
      }
    }
  }
  else
  {
    USBD_CtlError(pdev, req);
 8007384:	6839      	ldr	r1, [r7, #0]
 8007386:	6878      	ldr	r0, [r7, #4]
 8007388:	f000 f96a 	bl	8007660 <USBD_CtlError>
  }
}
 800738c:	bf00      	nop
 800738e:	3710      	adds	r7, #16
 8007390:	46bd      	mov	sp, r7
 8007392:	bd80      	pop	{r7, pc}

08007394 <USBD_SetConfig>:
* @param  pdev: device instance
* @param  req: usb request
* @retval status
*/
static void USBD_SetConfig(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8007394:	b580      	push	{r7, lr}
 8007396:	b082      	sub	sp, #8
 8007398:	af00      	add	r7, sp, #0
 800739a:	6078      	str	r0, [r7, #4]
 800739c:	6039      	str	r1, [r7, #0]
  static uint8_t cfgidx;

  cfgidx = (uint8_t)(req->wValue);
 800739e:	683b      	ldr	r3, [r7, #0]
 80073a0:	885b      	ldrh	r3, [r3, #2]
 80073a2:	b2da      	uxtb	r2, r3
 80073a4:	4b41      	ldr	r3, [pc, #260]	; (80074ac <USBD_SetConfig+0x118>)
 80073a6:	701a      	strb	r2, [r3, #0]

  if (cfgidx > USBD_MAX_NUM_CONFIGURATION)
 80073a8:	4b40      	ldr	r3, [pc, #256]	; (80074ac <USBD_SetConfig+0x118>)
 80073aa:	781b      	ldrb	r3, [r3, #0]
 80073ac:	2b01      	cmp	r3, #1
 80073ae:	d904      	bls.n	80073ba <USBD_SetConfig+0x26>
  {
    USBD_CtlError(pdev, req);
 80073b0:	6839      	ldr	r1, [r7, #0]
 80073b2:	6878      	ldr	r0, [r7, #4]
 80073b4:	f000 f954 	bl	8007660 <USBD_CtlError>
 80073b8:	e075      	b.n	80074a6 <USBD_SetConfig+0x112>
  }
  else
  {
    switch (pdev->dev_state)
 80073ba:	687b      	ldr	r3, [r7, #4]
 80073bc:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 80073c0:	2b02      	cmp	r3, #2
 80073c2:	d002      	beq.n	80073ca <USBD_SetConfig+0x36>
 80073c4:	2b03      	cmp	r3, #3
 80073c6:	d023      	beq.n	8007410 <USBD_SetConfig+0x7c>
 80073c8:	e062      	b.n	8007490 <USBD_SetConfig+0xfc>
    {
      case USBD_STATE_ADDRESSED:
        if (cfgidx)
 80073ca:	4b38      	ldr	r3, [pc, #224]	; (80074ac <USBD_SetConfig+0x118>)
 80073cc:	781b      	ldrb	r3, [r3, #0]
 80073ce:	2b00      	cmp	r3, #0
 80073d0:	d01a      	beq.n	8007408 <USBD_SetConfig+0x74>
        {
          pdev->dev_config = cfgidx;
 80073d2:	4b36      	ldr	r3, [pc, #216]	; (80074ac <USBD_SetConfig+0x118>)
 80073d4:	781b      	ldrb	r3, [r3, #0]
 80073d6:	461a      	mov	r2, r3
 80073d8:	687b      	ldr	r3, [r7, #4]
 80073da:	605a      	str	r2, [r3, #4]
          pdev->dev_state = USBD_STATE_CONFIGURED;
 80073dc:	687b      	ldr	r3, [r7, #4]
 80073de:	2203      	movs	r2, #3
 80073e0:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
          if (USBD_SetClassConfig(pdev, cfgidx) == USBD_FAIL)
 80073e4:	4b31      	ldr	r3, [pc, #196]	; (80074ac <USBD_SetConfig+0x118>)
 80073e6:	781b      	ldrb	r3, [r3, #0]
 80073e8:	4619      	mov	r1, r3
 80073ea:	6878      	ldr	r0, [r7, #4]
 80073ec:	f7ff f9f3 	bl	80067d6 <USBD_SetClassConfig>
 80073f0:	4603      	mov	r3, r0
 80073f2:	2b02      	cmp	r3, #2
 80073f4:	d104      	bne.n	8007400 <USBD_SetConfig+0x6c>
          {
            USBD_CtlError(pdev, req);
 80073f6:	6839      	ldr	r1, [r7, #0]
 80073f8:	6878      	ldr	r0, [r7, #4]
 80073fa:	f000 f931 	bl	8007660 <USBD_CtlError>
            return;
 80073fe:	e052      	b.n	80074a6 <USBD_SetConfig+0x112>
          }
          USBD_CtlSendStatus(pdev);
 8007400:	6878      	ldr	r0, [r7, #4]
 8007402:	f000 f9f5 	bl	80077f0 <USBD_CtlSendStatus>
        }
        else
        {
          USBD_CtlSendStatus(pdev);
        }
        break;
 8007406:	e04e      	b.n	80074a6 <USBD_SetConfig+0x112>
          USBD_CtlSendStatus(pdev);
 8007408:	6878      	ldr	r0, [r7, #4]
 800740a:	f000 f9f1 	bl	80077f0 <USBD_CtlSendStatus>
        break;
 800740e:	e04a      	b.n	80074a6 <USBD_SetConfig+0x112>

      case USBD_STATE_CONFIGURED:
        if (cfgidx == 0U)
 8007410:	4b26      	ldr	r3, [pc, #152]	; (80074ac <USBD_SetConfig+0x118>)
 8007412:	781b      	ldrb	r3, [r3, #0]
 8007414:	2b00      	cmp	r3, #0
 8007416:	d112      	bne.n	800743e <USBD_SetConfig+0xaa>
        {
          pdev->dev_state = USBD_STATE_ADDRESSED;
 8007418:	687b      	ldr	r3, [r7, #4]
 800741a:	2202      	movs	r2, #2
 800741c:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
          pdev->dev_config = cfgidx;
 8007420:	4b22      	ldr	r3, [pc, #136]	; (80074ac <USBD_SetConfig+0x118>)
 8007422:	781b      	ldrb	r3, [r3, #0]
 8007424:	461a      	mov	r2, r3
 8007426:	687b      	ldr	r3, [r7, #4]
 8007428:	605a      	str	r2, [r3, #4]
          USBD_ClrClassConfig(pdev, cfgidx);
 800742a:	4b20      	ldr	r3, [pc, #128]	; (80074ac <USBD_SetConfig+0x118>)
 800742c:	781b      	ldrb	r3, [r3, #0]
 800742e:	4619      	mov	r1, r3
 8007430:	6878      	ldr	r0, [r7, #4]
 8007432:	f7ff f9ef 	bl	8006814 <USBD_ClrClassConfig>
          USBD_CtlSendStatus(pdev);
 8007436:	6878      	ldr	r0, [r7, #4]
 8007438:	f000 f9da 	bl	80077f0 <USBD_CtlSendStatus>
        }
        else
        {
          USBD_CtlSendStatus(pdev);
        }
        break;
 800743c:	e033      	b.n	80074a6 <USBD_SetConfig+0x112>
        else if (cfgidx != pdev->dev_config)
 800743e:	4b1b      	ldr	r3, [pc, #108]	; (80074ac <USBD_SetConfig+0x118>)
 8007440:	781b      	ldrb	r3, [r3, #0]
 8007442:	461a      	mov	r2, r3
 8007444:	687b      	ldr	r3, [r7, #4]
 8007446:	685b      	ldr	r3, [r3, #4]
 8007448:	429a      	cmp	r2, r3
 800744a:	d01d      	beq.n	8007488 <USBD_SetConfig+0xf4>
          USBD_ClrClassConfig(pdev, (uint8_t)pdev->dev_config);
 800744c:	687b      	ldr	r3, [r7, #4]
 800744e:	685b      	ldr	r3, [r3, #4]
 8007450:	b2db      	uxtb	r3, r3
 8007452:	4619      	mov	r1, r3
 8007454:	6878      	ldr	r0, [r7, #4]
 8007456:	f7ff f9dd 	bl	8006814 <USBD_ClrClassConfig>
          pdev->dev_config = cfgidx;
 800745a:	4b14      	ldr	r3, [pc, #80]	; (80074ac <USBD_SetConfig+0x118>)
 800745c:	781b      	ldrb	r3, [r3, #0]
 800745e:	461a      	mov	r2, r3
 8007460:	687b      	ldr	r3, [r7, #4]
 8007462:	605a      	str	r2, [r3, #4]
          if (USBD_SetClassConfig(pdev, cfgidx) == USBD_FAIL)
 8007464:	4b11      	ldr	r3, [pc, #68]	; (80074ac <USBD_SetConfig+0x118>)
 8007466:	781b      	ldrb	r3, [r3, #0]
 8007468:	4619      	mov	r1, r3
 800746a:	6878      	ldr	r0, [r7, #4]
 800746c:	f7ff f9b3 	bl	80067d6 <USBD_SetClassConfig>
 8007470:	4603      	mov	r3, r0
 8007472:	2b02      	cmp	r3, #2
 8007474:	d104      	bne.n	8007480 <USBD_SetConfig+0xec>
            USBD_CtlError(pdev, req);
 8007476:	6839      	ldr	r1, [r7, #0]
 8007478:	6878      	ldr	r0, [r7, #4]
 800747a:	f000 f8f1 	bl	8007660 <USBD_CtlError>
            return;
 800747e:	e012      	b.n	80074a6 <USBD_SetConfig+0x112>
          USBD_CtlSendStatus(pdev);
 8007480:	6878      	ldr	r0, [r7, #4]
 8007482:	f000 f9b5 	bl	80077f0 <USBD_CtlSendStatus>
        break;
 8007486:	e00e      	b.n	80074a6 <USBD_SetConfig+0x112>
          USBD_CtlSendStatus(pdev);
 8007488:	6878      	ldr	r0, [r7, #4]
 800748a:	f000 f9b1 	bl	80077f0 <USBD_CtlSendStatus>
        break;
 800748e:	e00a      	b.n	80074a6 <USBD_SetConfig+0x112>

      default:
        USBD_CtlError(pdev, req);
 8007490:	6839      	ldr	r1, [r7, #0]
 8007492:	6878      	ldr	r0, [r7, #4]
 8007494:	f000 f8e4 	bl	8007660 <USBD_CtlError>
        USBD_ClrClassConfig(pdev, cfgidx);
 8007498:	4b04      	ldr	r3, [pc, #16]	; (80074ac <USBD_SetConfig+0x118>)
 800749a:	781b      	ldrb	r3, [r3, #0]
 800749c:	4619      	mov	r1, r3
 800749e:	6878      	ldr	r0, [r7, #4]
 80074a0:	f7ff f9b8 	bl	8006814 <USBD_ClrClassConfig>
        break;
 80074a4:	bf00      	nop
    }
  }
}
 80074a6:	3708      	adds	r7, #8
 80074a8:	46bd      	mov	sp, r7
 80074aa:	bd80      	pop	{r7, pc}
 80074ac:	20000198 	.word	0x20000198

080074b0 <USBD_GetConfig>:
* @param  pdev: device instance
* @param  req: usb request
* @retval status
*/
static void USBD_GetConfig(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 80074b0:	b580      	push	{r7, lr}
 80074b2:	b082      	sub	sp, #8
 80074b4:	af00      	add	r7, sp, #0
 80074b6:	6078      	str	r0, [r7, #4]
 80074b8:	6039      	str	r1, [r7, #0]
  if (req->wLength != 1U)
 80074ba:	683b      	ldr	r3, [r7, #0]
 80074bc:	88db      	ldrh	r3, [r3, #6]
 80074be:	2b01      	cmp	r3, #1
 80074c0:	d004      	beq.n	80074cc <USBD_GetConfig+0x1c>
  {
    USBD_CtlError(pdev, req);
 80074c2:	6839      	ldr	r1, [r7, #0]
 80074c4:	6878      	ldr	r0, [r7, #4]
 80074c6:	f000 f8cb 	bl	8007660 <USBD_CtlError>
      default:
        USBD_CtlError(pdev, req);
        break;
    }
  }
}
 80074ca:	e021      	b.n	8007510 <USBD_GetConfig+0x60>
    switch (pdev->dev_state)
 80074cc:	687b      	ldr	r3, [r7, #4]
 80074ce:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 80074d2:	2b01      	cmp	r3, #1
 80074d4:	db17      	blt.n	8007506 <USBD_GetConfig+0x56>
 80074d6:	2b02      	cmp	r3, #2
 80074d8:	dd02      	ble.n	80074e0 <USBD_GetConfig+0x30>
 80074da:	2b03      	cmp	r3, #3
 80074dc:	d00b      	beq.n	80074f6 <USBD_GetConfig+0x46>
 80074de:	e012      	b.n	8007506 <USBD_GetConfig+0x56>
        pdev->dev_default_config = 0U;
 80074e0:	687b      	ldr	r3, [r7, #4]
 80074e2:	2200      	movs	r2, #0
 80074e4:	609a      	str	r2, [r3, #8]
        USBD_CtlSendData(pdev, (uint8_t *)(void *)&pdev->dev_default_config, 1U);
 80074e6:	687b      	ldr	r3, [r7, #4]
 80074e8:	3308      	adds	r3, #8
 80074ea:	2201      	movs	r2, #1
 80074ec:	4619      	mov	r1, r3
 80074ee:	6878      	ldr	r0, [r7, #4]
 80074f0:	f000 f920 	bl	8007734 <USBD_CtlSendData>
        break;
 80074f4:	e00c      	b.n	8007510 <USBD_GetConfig+0x60>
        USBD_CtlSendData(pdev, (uint8_t *)(void *)&pdev->dev_config, 1U);
 80074f6:	687b      	ldr	r3, [r7, #4]
 80074f8:	3304      	adds	r3, #4
 80074fa:	2201      	movs	r2, #1
 80074fc:	4619      	mov	r1, r3
 80074fe:	6878      	ldr	r0, [r7, #4]
 8007500:	f000 f918 	bl	8007734 <USBD_CtlSendData>
        break;
 8007504:	e004      	b.n	8007510 <USBD_GetConfig+0x60>
        USBD_CtlError(pdev, req);
 8007506:	6839      	ldr	r1, [r7, #0]
 8007508:	6878      	ldr	r0, [r7, #4]
 800750a:	f000 f8a9 	bl	8007660 <USBD_CtlError>
        break;
 800750e:	bf00      	nop
}
 8007510:	bf00      	nop
 8007512:	3708      	adds	r7, #8
 8007514:	46bd      	mov	sp, r7
 8007516:	bd80      	pop	{r7, pc}

08007518 <USBD_GetStatus>:
* @param  pdev: device instance
* @param  req: usb request
* @retval status
*/
static void USBD_GetStatus(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8007518:	b580      	push	{r7, lr}
 800751a:	b082      	sub	sp, #8
 800751c:	af00      	add	r7, sp, #0
 800751e:	6078      	str	r0, [r7, #4]
 8007520:	6039      	str	r1, [r7, #0]
  switch (pdev->dev_state)
 8007522:	687b      	ldr	r3, [r7, #4]
 8007524:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8007528:	3b01      	subs	r3, #1
 800752a:	2b02      	cmp	r3, #2
 800752c:	d81e      	bhi.n	800756c <USBD_GetStatus+0x54>
  {
    case USBD_STATE_DEFAULT:
    case USBD_STATE_ADDRESSED:
    case USBD_STATE_CONFIGURED:
      if (req->wLength != 0x2U)
 800752e:	683b      	ldr	r3, [r7, #0]
 8007530:	88db      	ldrh	r3, [r3, #6]
 8007532:	2b02      	cmp	r3, #2
 8007534:	d004      	beq.n	8007540 <USBD_GetStatus+0x28>
      {
        USBD_CtlError(pdev, req);
 8007536:	6839      	ldr	r1, [r7, #0]
 8007538:	6878      	ldr	r0, [r7, #4]
 800753a:	f000 f891 	bl	8007660 <USBD_CtlError>
        break;
 800753e:	e01a      	b.n	8007576 <USBD_GetStatus+0x5e>
      }

#if (USBD_SELF_POWERED == 1U)
      pdev->dev_config_status = USB_CONFIG_SELF_POWERED;
 8007540:	687b      	ldr	r3, [r7, #4]
 8007542:	2201      	movs	r2, #1
 8007544:	60da      	str	r2, [r3, #12]
#else
      pdev->dev_config_status = 0U;
#endif

      if (pdev->dev_remote_wakeup)
 8007546:	687b      	ldr	r3, [r7, #4]
 8007548:	f8d3 32a4 	ldr.w	r3, [r3, #676]	; 0x2a4
 800754c:	2b00      	cmp	r3, #0
 800754e:	d005      	beq.n	800755c <USBD_GetStatus+0x44>
      {
        pdev->dev_config_status |= USB_CONFIG_REMOTE_WAKEUP;
 8007550:	687b      	ldr	r3, [r7, #4]
 8007552:	68db      	ldr	r3, [r3, #12]
 8007554:	f043 0202 	orr.w	r2, r3, #2
 8007558:	687b      	ldr	r3, [r7, #4]
 800755a:	60da      	str	r2, [r3, #12]
      }

      USBD_CtlSendData(pdev, (uint8_t *)(void *)&pdev->dev_config_status, 2U);
 800755c:	687b      	ldr	r3, [r7, #4]
 800755e:	330c      	adds	r3, #12
 8007560:	2202      	movs	r2, #2
 8007562:	4619      	mov	r1, r3
 8007564:	6878      	ldr	r0, [r7, #4]
 8007566:	f000 f8e5 	bl	8007734 <USBD_CtlSendData>
      break;
 800756a:	e004      	b.n	8007576 <USBD_GetStatus+0x5e>

    default:
      USBD_CtlError(pdev, req);
 800756c:	6839      	ldr	r1, [r7, #0]
 800756e:	6878      	ldr	r0, [r7, #4]
 8007570:	f000 f876 	bl	8007660 <USBD_CtlError>
      break;
 8007574:	bf00      	nop
  }
}
 8007576:	bf00      	nop
 8007578:	3708      	adds	r7, #8
 800757a:	46bd      	mov	sp, r7
 800757c:	bd80      	pop	{r7, pc}

0800757e <USBD_SetFeature>:
* @param  req: usb request
* @retval status
*/
static void USBD_SetFeature(USBD_HandleTypeDef *pdev,
                            USBD_SetupReqTypedef *req)
{
 800757e:	b580      	push	{r7, lr}
 8007580:	b082      	sub	sp, #8
 8007582:	af00      	add	r7, sp, #0
 8007584:	6078      	str	r0, [r7, #4]
 8007586:	6039      	str	r1, [r7, #0]
  if (req->wValue == USB_FEATURE_REMOTE_WAKEUP)
 8007588:	683b      	ldr	r3, [r7, #0]
 800758a:	885b      	ldrh	r3, [r3, #2]
 800758c:	2b01      	cmp	r3, #1
 800758e:	d106      	bne.n	800759e <USBD_SetFeature+0x20>
  {
    pdev->dev_remote_wakeup = 1U;
 8007590:	687b      	ldr	r3, [r7, #4]
 8007592:	2201      	movs	r2, #1
 8007594:	f8c3 22a4 	str.w	r2, [r3, #676]	; 0x2a4
    USBD_CtlSendStatus(pdev);
 8007598:	6878      	ldr	r0, [r7, #4]
 800759a:	f000 f929 	bl	80077f0 <USBD_CtlSendStatus>
  }
}
 800759e:	bf00      	nop
 80075a0:	3708      	adds	r7, #8
 80075a2:	46bd      	mov	sp, r7
 80075a4:	bd80      	pop	{r7, pc}

080075a6 <USBD_ClrFeature>:
* @param  req: usb request
* @retval status
*/
static void USBD_ClrFeature(USBD_HandleTypeDef *pdev,
                            USBD_SetupReqTypedef *req)
{
 80075a6:	b580      	push	{r7, lr}
 80075a8:	b082      	sub	sp, #8
 80075aa:	af00      	add	r7, sp, #0
 80075ac:	6078      	str	r0, [r7, #4]
 80075ae:	6039      	str	r1, [r7, #0]
  switch (pdev->dev_state)
 80075b0:	687b      	ldr	r3, [r7, #4]
 80075b2:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 80075b6:	3b01      	subs	r3, #1
 80075b8:	2b02      	cmp	r3, #2
 80075ba:	d80b      	bhi.n	80075d4 <USBD_ClrFeature+0x2e>
  {
    case USBD_STATE_DEFAULT:
    case USBD_STATE_ADDRESSED:
    case USBD_STATE_CONFIGURED:
      if (req->wValue == USB_FEATURE_REMOTE_WAKEUP)
 80075bc:	683b      	ldr	r3, [r7, #0]
 80075be:	885b      	ldrh	r3, [r3, #2]
 80075c0:	2b01      	cmp	r3, #1
 80075c2:	d10c      	bne.n	80075de <USBD_ClrFeature+0x38>
      {
        pdev->dev_remote_wakeup = 0U;
 80075c4:	687b      	ldr	r3, [r7, #4]
 80075c6:	2200      	movs	r2, #0
 80075c8:	f8c3 22a4 	str.w	r2, [r3, #676]	; 0x2a4
        USBD_CtlSendStatus(pdev);
 80075cc:	6878      	ldr	r0, [r7, #4]
 80075ce:	f000 f90f 	bl	80077f0 <USBD_CtlSendStatus>
      }
      break;
 80075d2:	e004      	b.n	80075de <USBD_ClrFeature+0x38>

    default:
      USBD_CtlError(pdev, req);
 80075d4:	6839      	ldr	r1, [r7, #0]
 80075d6:	6878      	ldr	r0, [r7, #4]
 80075d8:	f000 f842 	bl	8007660 <USBD_CtlError>
      break;
 80075dc:	e000      	b.n	80075e0 <USBD_ClrFeature+0x3a>
      break;
 80075de:	bf00      	nop
  }
}
 80075e0:	bf00      	nop
 80075e2:	3708      	adds	r7, #8
 80075e4:	46bd      	mov	sp, r7
 80075e6:	bd80      	pop	{r7, pc}

080075e8 <USBD_ParseSetupRequest>:
* @param  req: usb request
* @retval None
*/

void USBD_ParseSetupRequest(USBD_SetupReqTypedef *req, uint8_t *pdata)
{
 80075e8:	b480      	push	{r7}
 80075ea:	b083      	sub	sp, #12
 80075ec:	af00      	add	r7, sp, #0
 80075ee:	6078      	str	r0, [r7, #4]
 80075f0:	6039      	str	r1, [r7, #0]
  req->bmRequest = *(uint8_t *)(pdata);
 80075f2:	683b      	ldr	r3, [r7, #0]
 80075f4:	781a      	ldrb	r2, [r3, #0]
 80075f6:	687b      	ldr	r3, [r7, #4]
 80075f8:	701a      	strb	r2, [r3, #0]
  req->bRequest = *(uint8_t *)(pdata + 1U);
 80075fa:	683b      	ldr	r3, [r7, #0]
 80075fc:	785a      	ldrb	r2, [r3, #1]
 80075fe:	687b      	ldr	r3, [r7, #4]
 8007600:	705a      	strb	r2, [r3, #1]
  req->wValue = SWAPBYTE(pdata + 2U);
 8007602:	683b      	ldr	r3, [r7, #0]
 8007604:	3302      	adds	r3, #2
 8007606:	781b      	ldrb	r3, [r3, #0]
 8007608:	b29a      	uxth	r2, r3
 800760a:	683b      	ldr	r3, [r7, #0]
 800760c:	3303      	adds	r3, #3
 800760e:	781b      	ldrb	r3, [r3, #0]
 8007610:	b29b      	uxth	r3, r3
 8007612:	021b      	lsls	r3, r3, #8
 8007614:	b29b      	uxth	r3, r3
 8007616:	4413      	add	r3, r2
 8007618:	b29a      	uxth	r2, r3
 800761a:	687b      	ldr	r3, [r7, #4]
 800761c:	805a      	strh	r2, [r3, #2]
  req->wIndex = SWAPBYTE(pdata + 4U);
 800761e:	683b      	ldr	r3, [r7, #0]
 8007620:	3304      	adds	r3, #4
 8007622:	781b      	ldrb	r3, [r3, #0]
 8007624:	b29a      	uxth	r2, r3
 8007626:	683b      	ldr	r3, [r7, #0]
 8007628:	3305      	adds	r3, #5
 800762a:	781b      	ldrb	r3, [r3, #0]
 800762c:	b29b      	uxth	r3, r3
 800762e:	021b      	lsls	r3, r3, #8
 8007630:	b29b      	uxth	r3, r3
 8007632:	4413      	add	r3, r2
 8007634:	b29a      	uxth	r2, r3
 8007636:	687b      	ldr	r3, [r7, #4]
 8007638:	809a      	strh	r2, [r3, #4]
  req->wLength = SWAPBYTE(pdata + 6U);
 800763a:	683b      	ldr	r3, [r7, #0]
 800763c:	3306      	adds	r3, #6
 800763e:	781b      	ldrb	r3, [r3, #0]
 8007640:	b29a      	uxth	r2, r3
 8007642:	683b      	ldr	r3, [r7, #0]
 8007644:	3307      	adds	r3, #7
 8007646:	781b      	ldrb	r3, [r3, #0]
 8007648:	b29b      	uxth	r3, r3
 800764a:	021b      	lsls	r3, r3, #8
 800764c:	b29b      	uxth	r3, r3
 800764e:	4413      	add	r3, r2
 8007650:	b29a      	uxth	r2, r3
 8007652:	687b      	ldr	r3, [r7, #4]
 8007654:	80da      	strh	r2, [r3, #6]

}
 8007656:	bf00      	nop
 8007658:	370c      	adds	r7, #12
 800765a:	46bd      	mov	sp, r7
 800765c:	bc80      	pop	{r7}
 800765e:	4770      	bx	lr

08007660 <USBD_CtlError>:
* @retval None
*/

void USBD_CtlError(USBD_HandleTypeDef *pdev,
                   USBD_SetupReqTypedef *req)
{
 8007660:	b580      	push	{r7, lr}
 8007662:	b082      	sub	sp, #8
 8007664:	af00      	add	r7, sp, #0
 8007666:	6078      	str	r0, [r7, #4]
 8007668:	6039      	str	r1, [r7, #0]
  USBD_LL_StallEP(pdev, 0x80U);
 800766a:	2180      	movs	r1, #128	; 0x80
 800766c:	6878      	ldr	r0, [r7, #4]
 800766e:	f000 fc53 	bl	8007f18 <USBD_LL_StallEP>
  USBD_LL_StallEP(pdev, 0U);
 8007672:	2100      	movs	r1, #0
 8007674:	6878      	ldr	r0, [r7, #4]
 8007676:	f000 fc4f 	bl	8007f18 <USBD_LL_StallEP>
}
 800767a:	bf00      	nop
 800767c:	3708      	adds	r7, #8
 800767e:	46bd      	mov	sp, r7
 8007680:	bd80      	pop	{r7, pc}

08007682 <USBD_GetString>:
  * @param  unicode : Formatted string buffer (unicode)
  * @param  len : descriptor length
  * @retval None
  */
void USBD_GetString(uint8_t *desc, uint8_t *unicode, uint16_t *len)
{
 8007682:	b580      	push	{r7, lr}
 8007684:	b086      	sub	sp, #24
 8007686:	af00      	add	r7, sp, #0
 8007688:	60f8      	str	r0, [r7, #12]
 800768a:	60b9      	str	r1, [r7, #8]
 800768c:	607a      	str	r2, [r7, #4]
  uint8_t idx = 0U;
 800768e:	2300      	movs	r3, #0
 8007690:	75fb      	strb	r3, [r7, #23]

  if (desc != NULL)
 8007692:	68fb      	ldr	r3, [r7, #12]
 8007694:	2b00      	cmp	r3, #0
 8007696:	d032      	beq.n	80076fe <USBD_GetString+0x7c>
  {
    *len = (uint16_t)USBD_GetLen(desc) * 2U + 2U;
 8007698:	68f8      	ldr	r0, [r7, #12]
 800769a:	f000 f834 	bl	8007706 <USBD_GetLen>
 800769e:	4603      	mov	r3, r0
 80076a0:	3301      	adds	r3, #1
 80076a2:	b29b      	uxth	r3, r3
 80076a4:	005b      	lsls	r3, r3, #1
 80076a6:	b29a      	uxth	r2, r3
 80076a8:	687b      	ldr	r3, [r7, #4]
 80076aa:	801a      	strh	r2, [r3, #0]
    unicode[idx++] = *(uint8_t *)(void *)len;
 80076ac:	7dfb      	ldrb	r3, [r7, #23]
 80076ae:	1c5a      	adds	r2, r3, #1
 80076b0:	75fa      	strb	r2, [r7, #23]
 80076b2:	461a      	mov	r2, r3
 80076b4:	68bb      	ldr	r3, [r7, #8]
 80076b6:	4413      	add	r3, r2
 80076b8:	687a      	ldr	r2, [r7, #4]
 80076ba:	7812      	ldrb	r2, [r2, #0]
 80076bc:	701a      	strb	r2, [r3, #0]
    unicode[idx++] = USB_DESC_TYPE_STRING;
 80076be:	7dfb      	ldrb	r3, [r7, #23]
 80076c0:	1c5a      	adds	r2, r3, #1
 80076c2:	75fa      	strb	r2, [r7, #23]
 80076c4:	461a      	mov	r2, r3
 80076c6:	68bb      	ldr	r3, [r7, #8]
 80076c8:	4413      	add	r3, r2
 80076ca:	2203      	movs	r2, #3
 80076cc:	701a      	strb	r2, [r3, #0]

    while (*desc != '\0')
 80076ce:	e012      	b.n	80076f6 <USBD_GetString+0x74>
    {
      unicode[idx++] = *desc++;
 80076d0:	68fb      	ldr	r3, [r7, #12]
 80076d2:	1c5a      	adds	r2, r3, #1
 80076d4:	60fa      	str	r2, [r7, #12]
 80076d6:	7dfa      	ldrb	r2, [r7, #23]
 80076d8:	1c51      	adds	r1, r2, #1
 80076da:	75f9      	strb	r1, [r7, #23]
 80076dc:	4611      	mov	r1, r2
 80076de:	68ba      	ldr	r2, [r7, #8]
 80076e0:	440a      	add	r2, r1
 80076e2:	781b      	ldrb	r3, [r3, #0]
 80076e4:	7013      	strb	r3, [r2, #0]
      unicode[idx++] =  0U;
 80076e6:	7dfb      	ldrb	r3, [r7, #23]
 80076e8:	1c5a      	adds	r2, r3, #1
 80076ea:	75fa      	strb	r2, [r7, #23]
 80076ec:	461a      	mov	r2, r3
 80076ee:	68bb      	ldr	r3, [r7, #8]
 80076f0:	4413      	add	r3, r2
 80076f2:	2200      	movs	r2, #0
 80076f4:	701a      	strb	r2, [r3, #0]
    while (*desc != '\0')
 80076f6:	68fb      	ldr	r3, [r7, #12]
 80076f8:	781b      	ldrb	r3, [r3, #0]
 80076fa:	2b00      	cmp	r3, #0
 80076fc:	d1e8      	bne.n	80076d0 <USBD_GetString+0x4e>
    }
  }
}
 80076fe:	bf00      	nop
 8007700:	3718      	adds	r7, #24
 8007702:	46bd      	mov	sp, r7
 8007704:	bd80      	pop	{r7, pc}

08007706 <USBD_GetLen>:
  *         return the string length
   * @param  buf : pointer to the ascii string buffer
  * @retval string length
  */
static uint8_t USBD_GetLen(uint8_t *buf)
{
 8007706:	b480      	push	{r7}
 8007708:	b085      	sub	sp, #20
 800770a:	af00      	add	r7, sp, #0
 800770c:	6078      	str	r0, [r7, #4]
  uint8_t  len = 0U;
 800770e:	2300      	movs	r3, #0
 8007710:	73fb      	strb	r3, [r7, #15]

  while (*buf != '\0')
 8007712:	e005      	b.n	8007720 <USBD_GetLen+0x1a>
  {
    len++;
 8007714:	7bfb      	ldrb	r3, [r7, #15]
 8007716:	3301      	adds	r3, #1
 8007718:	73fb      	strb	r3, [r7, #15]
    buf++;
 800771a:	687b      	ldr	r3, [r7, #4]
 800771c:	3301      	adds	r3, #1
 800771e:	607b      	str	r3, [r7, #4]
  while (*buf != '\0')
 8007720:	687b      	ldr	r3, [r7, #4]
 8007722:	781b      	ldrb	r3, [r3, #0]
 8007724:	2b00      	cmp	r3, #0
 8007726:	d1f5      	bne.n	8007714 <USBD_GetLen+0xe>
  }

  return len;
 8007728:	7bfb      	ldrb	r3, [r7, #15]
}
 800772a:	4618      	mov	r0, r3
 800772c:	3714      	adds	r7, #20
 800772e:	46bd      	mov	sp, r7
 8007730:	bc80      	pop	{r7}
 8007732:	4770      	bx	lr

08007734 <USBD_CtlSendData>:
* @param  len: length of data to be sent
* @retval status
*/
USBD_StatusTypeDef USBD_CtlSendData(USBD_HandleTypeDef *pdev,
                                    uint8_t *pbuf, uint16_t len)
{
 8007734:	b580      	push	{r7, lr}
 8007736:	b084      	sub	sp, #16
 8007738:	af00      	add	r7, sp, #0
 800773a:	60f8      	str	r0, [r7, #12]
 800773c:	60b9      	str	r1, [r7, #8]
 800773e:	4613      	mov	r3, r2
 8007740:	80fb      	strh	r3, [r7, #6]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_DATA_IN;
 8007742:	68fb      	ldr	r3, [r7, #12]
 8007744:	2202      	movs	r2, #2
 8007746:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294
  pdev->ep_in[0].total_length = len;
 800774a:	88fa      	ldrh	r2, [r7, #6]
 800774c:	68fb      	ldr	r3, [r7, #12]
 800774e:	61da      	str	r2, [r3, #28]
  pdev->ep_in[0].rem_length   = len;
 8007750:	88fa      	ldrh	r2, [r7, #6]
 8007752:	68fb      	ldr	r3, [r7, #12]
 8007754:	621a      	str	r2, [r3, #32]

  /* Start the transfer */
  USBD_LL_Transmit(pdev, 0x00U, pbuf, len);
 8007756:	88fb      	ldrh	r3, [r7, #6]
 8007758:	68ba      	ldr	r2, [r7, #8]
 800775a:	2100      	movs	r1, #0
 800775c:	68f8      	ldr	r0, [r7, #12]
 800775e:	f000 fc64 	bl	800802a <USBD_LL_Transmit>

  return USBD_OK;
 8007762:	2300      	movs	r3, #0
}
 8007764:	4618      	mov	r0, r3
 8007766:	3710      	adds	r7, #16
 8007768:	46bd      	mov	sp, r7
 800776a:	bd80      	pop	{r7, pc}

0800776c <USBD_CtlContinueSendData>:
* @param  len: length of data to be sent
* @retval status
*/
USBD_StatusTypeDef USBD_CtlContinueSendData(USBD_HandleTypeDef *pdev,
                                            uint8_t *pbuf, uint16_t len)
{
 800776c:	b580      	push	{r7, lr}
 800776e:	b084      	sub	sp, #16
 8007770:	af00      	add	r7, sp, #0
 8007772:	60f8      	str	r0, [r7, #12]
 8007774:	60b9      	str	r1, [r7, #8]
 8007776:	4613      	mov	r3, r2
 8007778:	80fb      	strh	r3, [r7, #6]
  /* Start the next transfer */
  USBD_LL_Transmit(pdev, 0x00U, pbuf, len);
 800777a:	88fb      	ldrh	r3, [r7, #6]
 800777c:	68ba      	ldr	r2, [r7, #8]
 800777e:	2100      	movs	r1, #0
 8007780:	68f8      	ldr	r0, [r7, #12]
 8007782:	f000 fc52 	bl	800802a <USBD_LL_Transmit>

  return USBD_OK;
 8007786:	2300      	movs	r3, #0
}
 8007788:	4618      	mov	r0, r3
 800778a:	3710      	adds	r7, #16
 800778c:	46bd      	mov	sp, r7
 800778e:	bd80      	pop	{r7, pc}

08007790 <USBD_CtlPrepareRx>:
* @param  len: length of data to be received
* @retval status
*/
USBD_StatusTypeDef USBD_CtlPrepareRx(USBD_HandleTypeDef *pdev,
                                     uint8_t *pbuf, uint16_t len)
{
 8007790:	b580      	push	{r7, lr}
 8007792:	b084      	sub	sp, #16
 8007794:	af00      	add	r7, sp, #0
 8007796:	60f8      	str	r0, [r7, #12]
 8007798:	60b9      	str	r1, [r7, #8]
 800779a:	4613      	mov	r3, r2
 800779c:	80fb      	strh	r3, [r7, #6]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_DATA_OUT;
 800779e:	68fb      	ldr	r3, [r7, #12]
 80077a0:	2203      	movs	r2, #3
 80077a2:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294
  pdev->ep_out[0].total_length = len;
 80077a6:	88fa      	ldrh	r2, [r7, #6]
 80077a8:	68fb      	ldr	r3, [r7, #12]
 80077aa:	f8c3 215c 	str.w	r2, [r3, #348]	; 0x15c
  pdev->ep_out[0].rem_length   = len;
 80077ae:	88fa      	ldrh	r2, [r7, #6]
 80077b0:	68fb      	ldr	r3, [r7, #12]
 80077b2:	f8c3 2160 	str.w	r2, [r3, #352]	; 0x160

  /* Start the transfer */
  USBD_LL_PrepareReceive(pdev, 0U, pbuf, len);
 80077b6:	88fb      	ldrh	r3, [r7, #6]
 80077b8:	68ba      	ldr	r2, [r7, #8]
 80077ba:	2100      	movs	r1, #0
 80077bc:	68f8      	ldr	r0, [r7, #12]
 80077be:	f000 fc57 	bl	8008070 <USBD_LL_PrepareReceive>

  return USBD_OK;
 80077c2:	2300      	movs	r3, #0
}
 80077c4:	4618      	mov	r0, r3
 80077c6:	3710      	adds	r7, #16
 80077c8:	46bd      	mov	sp, r7
 80077ca:	bd80      	pop	{r7, pc}

080077cc <USBD_CtlContinueRx>:
* @param  len: length of data to be received
* @retval status
*/
USBD_StatusTypeDef USBD_CtlContinueRx(USBD_HandleTypeDef *pdev,
                                      uint8_t *pbuf, uint16_t len)
{
 80077cc:	b580      	push	{r7, lr}
 80077ce:	b084      	sub	sp, #16
 80077d0:	af00      	add	r7, sp, #0
 80077d2:	60f8      	str	r0, [r7, #12]
 80077d4:	60b9      	str	r1, [r7, #8]
 80077d6:	4613      	mov	r3, r2
 80077d8:	80fb      	strh	r3, [r7, #6]
  USBD_LL_PrepareReceive(pdev, 0U, pbuf, len);
 80077da:	88fb      	ldrh	r3, [r7, #6]
 80077dc:	68ba      	ldr	r2, [r7, #8]
 80077de:	2100      	movs	r1, #0
 80077e0:	68f8      	ldr	r0, [r7, #12]
 80077e2:	f000 fc45 	bl	8008070 <USBD_LL_PrepareReceive>

  return USBD_OK;
 80077e6:	2300      	movs	r3, #0
}
 80077e8:	4618      	mov	r0, r3
 80077ea:	3710      	adds	r7, #16
 80077ec:	46bd      	mov	sp, r7
 80077ee:	bd80      	pop	{r7, pc}

080077f0 <USBD_CtlSendStatus>:
*         send zero lzngth packet on the ctl pipe
* @param  pdev: device instance
* @retval status
*/
USBD_StatusTypeDef USBD_CtlSendStatus(USBD_HandleTypeDef *pdev)
{
 80077f0:	b580      	push	{r7, lr}
 80077f2:	b082      	sub	sp, #8
 80077f4:	af00      	add	r7, sp, #0
 80077f6:	6078      	str	r0, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_STATUS_IN;
 80077f8:	687b      	ldr	r3, [r7, #4]
 80077fa:	2204      	movs	r2, #4
 80077fc:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294

  /* Start the transfer */
  USBD_LL_Transmit(pdev, 0x00U, NULL, 0U);
 8007800:	2300      	movs	r3, #0
 8007802:	2200      	movs	r2, #0
 8007804:	2100      	movs	r1, #0
 8007806:	6878      	ldr	r0, [r7, #4]
 8007808:	f000 fc0f 	bl	800802a <USBD_LL_Transmit>

  return USBD_OK;
 800780c:	2300      	movs	r3, #0
}
 800780e:	4618      	mov	r0, r3
 8007810:	3708      	adds	r7, #8
 8007812:	46bd      	mov	sp, r7
 8007814:	bd80      	pop	{r7, pc}

08007816 <USBD_CtlReceiveStatus>:
*         receive zero lzngth packet on the ctl pipe
* @param  pdev: device instance
* @retval status
*/
USBD_StatusTypeDef USBD_CtlReceiveStatus(USBD_HandleTypeDef *pdev)
{
 8007816:	b580      	push	{r7, lr}
 8007818:	b082      	sub	sp, #8
 800781a:	af00      	add	r7, sp, #0
 800781c:	6078      	str	r0, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_STATUS_OUT;
 800781e:	687b      	ldr	r3, [r7, #4]
 8007820:	2205      	movs	r2, #5
 8007822:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294

  /* Start the transfer */
  USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 8007826:	2300      	movs	r3, #0
 8007828:	2200      	movs	r2, #0
 800782a:	2100      	movs	r1, #0
 800782c:	6878      	ldr	r0, [r7, #4]
 800782e:	f000 fc1f 	bl	8008070 <USBD_LL_PrepareReceive>

  return USBD_OK;
 8007832:	2300      	movs	r3, #0
}
 8007834:	4618      	mov	r0, r3
 8007836:	3708      	adds	r7, #8
 8007838:	46bd      	mov	sp, r7
 800783a:	bd80      	pop	{r7, pc}

0800783c <MX_USB_DEVICE_Init>:
/**
  * Init USB device Library, add supported class and start the library
  * @retval None
  */
void MX_USB_DEVICE_Init(void)
{
 800783c:	b580      	push	{r7, lr}
 800783e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USB_DEVICE_Init_PreTreatment */

  /* USER CODE END USB_DEVICE_Init_PreTreatment */

  /* Init Device Library, add supported class and start the library. */
  if (USBD_Init(&hUsbDeviceFS, &FS_Desc, DEVICE_FS) != USBD_OK)
 8007840:	2200      	movs	r2, #0
 8007842:	4912      	ldr	r1, [pc, #72]	; (800788c <MX_USB_DEVICE_Init+0x50>)
 8007844:	4812      	ldr	r0, [pc, #72]	; (8007890 <MX_USB_DEVICE_Init+0x54>)
 8007846:	f7fe ff6c 	bl	8006722 <USBD_Init>
 800784a:	4603      	mov	r3, r0
 800784c:	2b00      	cmp	r3, #0
 800784e:	d001      	beq.n	8007854 <MX_USB_DEVICE_Init+0x18>
  {
    Error_Handler();
 8007850:	f7f8 fe12 	bl	8000478 <Error_Handler>
  }
  if (USBD_RegisterClass(&hUsbDeviceFS, &USBD_CDC) != USBD_OK)
 8007854:	490f      	ldr	r1, [pc, #60]	; (8007894 <MX_USB_DEVICE_Init+0x58>)
 8007856:	480e      	ldr	r0, [pc, #56]	; (8007890 <MX_USB_DEVICE_Init+0x54>)
 8007858:	f7fe ff8e 	bl	8006778 <USBD_RegisterClass>
 800785c:	4603      	mov	r3, r0
 800785e:	2b00      	cmp	r3, #0
 8007860:	d001      	beq.n	8007866 <MX_USB_DEVICE_Init+0x2a>
  {
    Error_Handler();
 8007862:	f7f8 fe09 	bl	8000478 <Error_Handler>
  }
  if (USBD_CDC_RegisterInterface(&hUsbDeviceFS, &USBD_Interface_fops_FS) != USBD_OK)
 8007866:	490c      	ldr	r1, [pc, #48]	; (8007898 <MX_USB_DEVICE_Init+0x5c>)
 8007868:	4809      	ldr	r0, [pc, #36]	; (8007890 <MX_USB_DEVICE_Init+0x54>)
 800786a:	f7fe febf 	bl	80065ec <USBD_CDC_RegisterInterface>
 800786e:	4603      	mov	r3, r0
 8007870:	2b00      	cmp	r3, #0
 8007872:	d001      	beq.n	8007878 <MX_USB_DEVICE_Init+0x3c>
  {
    Error_Handler();
 8007874:	f7f8 fe00 	bl	8000478 <Error_Handler>
  }
  if (USBD_Start(&hUsbDeviceFS) != USBD_OK)
 8007878:	4805      	ldr	r0, [pc, #20]	; (8007890 <MX_USB_DEVICE_Init+0x54>)
 800787a:	f7fe ff96 	bl	80067aa <USBD_Start>
 800787e:	4603      	mov	r3, r0
 8007880:	2b00      	cmp	r3, #0
 8007882:	d001      	beq.n	8007888 <MX_USB_DEVICE_Init+0x4c>
  {
    Error_Handler();
 8007884:	f7f8 fdf8 	bl	8000478 <Error_Handler>
  }

  /* USER CODE BEGIN USB_DEVICE_Init_PostTreatment */

  /* USER CODE END USB_DEVICE_Init_PostTreatment */
}
 8007888:	bf00      	nop
 800788a:	bd80      	pop	{r7, pc}
 800788c:	2000012c 	.word	0x2000012c
 8007890:	2000122c 	.word	0x2000122c
 8007894:	20000018 	.word	0x20000018
 8007898:	2000011c 	.word	0x2000011c

0800789c <CDC_Init_FS>:
/**
  * @brief  Initializes the CDC media low layer over the FS USB IP
  * @retval USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_Init_FS(void)
{
 800789c:	b580      	push	{r7, lr}
 800789e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN 3 */
  /* Set Application Buffers */
  USBD_CDC_SetTxBuffer(&hUsbDeviceFS, UserTxBufferFS, 0);
 80078a0:	2200      	movs	r2, #0
 80078a2:	4905      	ldr	r1, [pc, #20]	; (80078b8 <CDC_Init_FS+0x1c>)
 80078a4:	4805      	ldr	r0, [pc, #20]	; (80078bc <CDC_Init_FS+0x20>)
 80078a6:	f7fe feb7 	bl	8006618 <USBD_CDC_SetTxBuffer>
  USBD_CDC_SetRxBuffer(&hUsbDeviceFS, UserRxBufferFS);
 80078aa:	4905      	ldr	r1, [pc, #20]	; (80078c0 <CDC_Init_FS+0x24>)
 80078ac:	4803      	ldr	r0, [pc, #12]	; (80078bc <CDC_Init_FS+0x20>)
 80078ae:	f7fe fecc 	bl	800664a <USBD_CDC_SetRxBuffer>
  return (USBD_OK);
 80078b2:	2300      	movs	r3, #0
  /* USER CODE END 3 */
}
 80078b4:	4618      	mov	r0, r3
 80078b6:	bd80      	pop	{r7, pc}
 80078b8:	200018d8 	.word	0x200018d8
 80078bc:	2000122c 	.word	0x2000122c
 80078c0:	200014f0 	.word	0x200014f0

080078c4 <CDC_DeInit_FS>:
/**
  * @brief  DeInitializes the CDC media low layer
  * @retval USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_DeInit_FS(void)
{
 80078c4:	b480      	push	{r7}
 80078c6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN 4 */
  return (USBD_OK);
 80078c8:	2300      	movs	r3, #0
  /* USER CODE END 4 */
}
 80078ca:	4618      	mov	r0, r3
 80078cc:	46bd      	mov	sp, r7
 80078ce:	bc80      	pop	{r7}
 80078d0:	4770      	bx	lr
	...

080078d4 <CDC_Control_FS>:
  * @param  pbuf: Buffer containing command data (request parameters)
  * @param  length: Number of data to be sent (in bytes)
  * @retval Result of the operation: USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_Control_FS(uint8_t cmd, uint8_t* pbuf, uint16_t length)
{
 80078d4:	b480      	push	{r7}
 80078d6:	b083      	sub	sp, #12
 80078d8:	af00      	add	r7, sp, #0
 80078da:	4603      	mov	r3, r0
 80078dc:	6039      	str	r1, [r7, #0]
 80078de:	71fb      	strb	r3, [r7, #7]
 80078e0:	4613      	mov	r3, r2
 80078e2:	80bb      	strh	r3, [r7, #4]
  /* USER CODE BEGIN 5 */
  switch(cmd)
 80078e4:	79fb      	ldrb	r3, [r7, #7]
 80078e6:	2b23      	cmp	r3, #35	; 0x23
 80078e8:	d84a      	bhi.n	8007980 <CDC_Control_FS+0xac>
 80078ea:	a201      	add	r2, pc, #4	; (adr r2, 80078f0 <CDC_Control_FS+0x1c>)
 80078ec:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80078f0:	08007981 	.word	0x08007981
 80078f4:	08007981 	.word	0x08007981
 80078f8:	08007981 	.word	0x08007981
 80078fc:	08007981 	.word	0x08007981
 8007900:	08007981 	.word	0x08007981
 8007904:	08007981 	.word	0x08007981
 8007908:	08007981 	.word	0x08007981
 800790c:	08007981 	.word	0x08007981
 8007910:	08007981 	.word	0x08007981
 8007914:	08007981 	.word	0x08007981
 8007918:	08007981 	.word	0x08007981
 800791c:	08007981 	.word	0x08007981
 8007920:	08007981 	.word	0x08007981
 8007924:	08007981 	.word	0x08007981
 8007928:	08007981 	.word	0x08007981
 800792c:	08007981 	.word	0x08007981
 8007930:	08007981 	.word	0x08007981
 8007934:	08007981 	.word	0x08007981
 8007938:	08007981 	.word	0x08007981
 800793c:	08007981 	.word	0x08007981
 8007940:	08007981 	.word	0x08007981
 8007944:	08007981 	.word	0x08007981
 8007948:	08007981 	.word	0x08007981
 800794c:	08007981 	.word	0x08007981
 8007950:	08007981 	.word	0x08007981
 8007954:	08007981 	.word	0x08007981
 8007958:	08007981 	.word	0x08007981
 800795c:	08007981 	.word	0x08007981
 8007960:	08007981 	.word	0x08007981
 8007964:	08007981 	.word	0x08007981
 8007968:	08007981 	.word	0x08007981
 800796c:	08007981 	.word	0x08007981
 8007970:	08007981 	.word	0x08007981
 8007974:	08007981 	.word	0x08007981
 8007978:	08007981 	.word	0x08007981
 800797c:	08007981 	.word	0x08007981
    case CDC_SEND_BREAK:

    break;

  default:
    break;
 8007980:	bf00      	nop
  }

  return (USBD_OK);
 8007982:	2300      	movs	r3, #0
  /* USER CODE END 5 */
}
 8007984:	4618      	mov	r0, r3
 8007986:	370c      	adds	r7, #12
 8007988:	46bd      	mov	sp, r7
 800798a:	bc80      	pop	{r7}
 800798c:	4770      	bx	lr
 800798e:	bf00      	nop

08007990 <CDC_Receive_FS>:
  * @param  Buf: Buffer of data to be received
  * @param  Len: Number of data received (in bytes)
  * @retval Result of the operation: USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_Receive_FS(uint8_t* Buf, uint32_t *Len)
{
 8007990:	b580      	push	{r7, lr}
 8007992:	b082      	sub	sp, #8
 8007994:	af00      	add	r7, sp, #0
 8007996:	6078      	str	r0, [r7, #4]
 8007998:	6039      	str	r1, [r7, #0]
  /* USER CODE BEGIN 6 */
  USBD_CDC_SetRxBuffer(&hUsbDeviceFS, &Buf[0]);
 800799a:	6879      	ldr	r1, [r7, #4]
 800799c:	4805      	ldr	r0, [pc, #20]	; (80079b4 <CDC_Receive_FS+0x24>)
 800799e:	f7fe fe54 	bl	800664a <USBD_CDC_SetRxBuffer>
  USBD_CDC_ReceivePacket(&hUsbDeviceFS);
 80079a2:	4804      	ldr	r0, [pc, #16]	; (80079b4 <CDC_Receive_FS+0x24>)
 80079a4:	f7fe fe93 	bl	80066ce <USBD_CDC_ReceivePacket>
  return (USBD_OK);
 80079a8:	2300      	movs	r3, #0
  /* USER CODE END 6 */
}
 80079aa:	4618      	mov	r0, r3
 80079ac:	3708      	adds	r7, #8
 80079ae:	46bd      	mov	sp, r7
 80079b0:	bd80      	pop	{r7, pc}
 80079b2:	bf00      	nop
 80079b4:	2000122c 	.word	0x2000122c

080079b8 <CDC_Transmit_FS>:
  * @param  Buf: Buffer of data to be sent
  * @param  Len: Number of data to be sent (in bytes)
  * @retval USBD_OK if all operations are OK else USBD_FAIL or USBD_BUSY
  */
uint8_t CDC_Transmit_FS(uint8_t* Buf, uint16_t Len)
{
 80079b8:	b580      	push	{r7, lr}
 80079ba:	b084      	sub	sp, #16
 80079bc:	af00      	add	r7, sp, #0
 80079be:	6078      	str	r0, [r7, #4]
 80079c0:	460b      	mov	r3, r1
 80079c2:	807b      	strh	r3, [r7, #2]
  uint8_t result = USBD_OK;
 80079c4:	2300      	movs	r3, #0
 80079c6:	73fb      	strb	r3, [r7, #15]
  /* USER CODE BEGIN 7 */
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef*)hUsbDeviceFS.pClassData;
 80079c8:	4b0d      	ldr	r3, [pc, #52]	; (8007a00 <CDC_Transmit_FS+0x48>)
 80079ca:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 80079ce:	60bb      	str	r3, [r7, #8]
  if (hcdc->TxState != 0){
 80079d0:	68bb      	ldr	r3, [r7, #8]
 80079d2:	f8d3 3214 	ldr.w	r3, [r3, #532]	; 0x214
 80079d6:	2b00      	cmp	r3, #0
 80079d8:	d001      	beq.n	80079de <CDC_Transmit_FS+0x26>
    return USBD_BUSY;
 80079da:	2301      	movs	r3, #1
 80079dc:	e00b      	b.n	80079f6 <CDC_Transmit_FS+0x3e>
  }
  USBD_CDC_SetTxBuffer(&hUsbDeviceFS, Buf, Len);
 80079de:	887b      	ldrh	r3, [r7, #2]
 80079e0:	461a      	mov	r2, r3
 80079e2:	6879      	ldr	r1, [r7, #4]
 80079e4:	4806      	ldr	r0, [pc, #24]	; (8007a00 <CDC_Transmit_FS+0x48>)
 80079e6:	f7fe fe17 	bl	8006618 <USBD_CDC_SetTxBuffer>
  result = USBD_CDC_TransmitPacket(&hUsbDeviceFS);
 80079ea:	4805      	ldr	r0, [pc, #20]	; (8007a00 <CDC_Transmit_FS+0x48>)
 80079ec:	f7fe fe40 	bl	8006670 <USBD_CDC_TransmitPacket>
 80079f0:	4603      	mov	r3, r0
 80079f2:	73fb      	strb	r3, [r7, #15]
  /* USER CODE END 7 */
  return result;
 80079f4:	7bfb      	ldrb	r3, [r7, #15]
}
 80079f6:	4618      	mov	r0, r3
 80079f8:	3710      	adds	r7, #16
 80079fa:	46bd      	mov	sp, r7
 80079fc:	bd80      	pop	{r7, pc}
 80079fe:	bf00      	nop
 8007a00:	2000122c 	.word	0x2000122c

08007a04 <USBD_FS_DeviceDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_DeviceDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8007a04:	b480      	push	{r7}
 8007a06:	b083      	sub	sp, #12
 8007a08:	af00      	add	r7, sp, #0
 8007a0a:	4603      	mov	r3, r0
 8007a0c:	6039      	str	r1, [r7, #0]
 8007a0e:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = sizeof(USBD_FS_DeviceDesc);
 8007a10:	683b      	ldr	r3, [r7, #0]
 8007a12:	2212      	movs	r2, #18
 8007a14:	801a      	strh	r2, [r3, #0]
  return USBD_FS_DeviceDesc;
 8007a16:	4b03      	ldr	r3, [pc, #12]	; (8007a24 <USBD_FS_DeviceDescriptor+0x20>)
}
 8007a18:	4618      	mov	r0, r3
 8007a1a:	370c      	adds	r7, #12
 8007a1c:	46bd      	mov	sp, r7
 8007a1e:	bc80      	pop	{r7}
 8007a20:	4770      	bx	lr
 8007a22:	bf00      	nop
 8007a24:	20000148 	.word	0x20000148

08007a28 <USBD_FS_LangIDStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_LangIDStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8007a28:	b480      	push	{r7}
 8007a2a:	b083      	sub	sp, #12
 8007a2c:	af00      	add	r7, sp, #0
 8007a2e:	4603      	mov	r3, r0
 8007a30:	6039      	str	r1, [r7, #0]
 8007a32:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = sizeof(USBD_LangIDDesc);
 8007a34:	683b      	ldr	r3, [r7, #0]
 8007a36:	2204      	movs	r2, #4
 8007a38:	801a      	strh	r2, [r3, #0]
  return USBD_LangIDDesc;
 8007a3a:	4b03      	ldr	r3, [pc, #12]	; (8007a48 <USBD_FS_LangIDStrDescriptor+0x20>)
}
 8007a3c:	4618      	mov	r0, r3
 8007a3e:	370c      	adds	r7, #12
 8007a40:	46bd      	mov	sp, r7
 8007a42:	bc80      	pop	{r7}
 8007a44:	4770      	bx	lr
 8007a46:	bf00      	nop
 8007a48:	2000015c 	.word	0x2000015c

08007a4c <USBD_FS_ProductStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_ProductStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8007a4c:	b580      	push	{r7, lr}
 8007a4e:	b082      	sub	sp, #8
 8007a50:	af00      	add	r7, sp, #0
 8007a52:	4603      	mov	r3, r0
 8007a54:	6039      	str	r1, [r7, #0]
 8007a56:	71fb      	strb	r3, [r7, #7]
  if(speed == 0)
 8007a58:	79fb      	ldrb	r3, [r7, #7]
 8007a5a:	2b00      	cmp	r3, #0
 8007a5c:	d105      	bne.n	8007a6a <USBD_FS_ProductStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_PRODUCT_STRING_FS, USBD_StrDesc, length);
 8007a5e:	683a      	ldr	r2, [r7, #0]
 8007a60:	4907      	ldr	r1, [pc, #28]	; (8007a80 <USBD_FS_ProductStrDescriptor+0x34>)
 8007a62:	4808      	ldr	r0, [pc, #32]	; (8007a84 <USBD_FS_ProductStrDescriptor+0x38>)
 8007a64:	f7ff fe0d 	bl	8007682 <USBD_GetString>
 8007a68:	e004      	b.n	8007a74 <USBD_FS_ProductStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_PRODUCT_STRING_FS, USBD_StrDesc, length);
 8007a6a:	683a      	ldr	r2, [r7, #0]
 8007a6c:	4904      	ldr	r1, [pc, #16]	; (8007a80 <USBD_FS_ProductStrDescriptor+0x34>)
 8007a6e:	4805      	ldr	r0, [pc, #20]	; (8007a84 <USBD_FS_ProductStrDescriptor+0x38>)
 8007a70:	f7ff fe07 	bl	8007682 <USBD_GetString>
  }
  return USBD_StrDesc;
 8007a74:	4b02      	ldr	r3, [pc, #8]	; (8007a80 <USBD_FS_ProductStrDescriptor+0x34>)
}
 8007a76:	4618      	mov	r0, r3
 8007a78:	3708      	adds	r7, #8
 8007a7a:	46bd      	mov	sp, r7
 8007a7c:	bd80      	pop	{r7, pc}
 8007a7e:	bf00      	nop
 8007a80:	20001cc0 	.word	0x20001cc0
 8007a84:	080081f8 	.word	0x080081f8

08007a88 <USBD_FS_ManufacturerStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_ManufacturerStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8007a88:	b580      	push	{r7, lr}
 8007a8a:	b082      	sub	sp, #8
 8007a8c:	af00      	add	r7, sp, #0
 8007a8e:	4603      	mov	r3, r0
 8007a90:	6039      	str	r1, [r7, #0]
 8007a92:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  USBD_GetString((uint8_t *)USBD_MANUFACTURER_STRING, USBD_StrDesc, length);
 8007a94:	683a      	ldr	r2, [r7, #0]
 8007a96:	4904      	ldr	r1, [pc, #16]	; (8007aa8 <USBD_FS_ManufacturerStrDescriptor+0x20>)
 8007a98:	4804      	ldr	r0, [pc, #16]	; (8007aac <USBD_FS_ManufacturerStrDescriptor+0x24>)
 8007a9a:	f7ff fdf2 	bl	8007682 <USBD_GetString>
  return USBD_StrDesc;
 8007a9e:	4b02      	ldr	r3, [pc, #8]	; (8007aa8 <USBD_FS_ManufacturerStrDescriptor+0x20>)
}
 8007aa0:	4618      	mov	r0, r3
 8007aa2:	3708      	adds	r7, #8
 8007aa4:	46bd      	mov	sp, r7
 8007aa6:	bd80      	pop	{r7, pc}
 8007aa8:	20001cc0 	.word	0x20001cc0
 8007aac:	08008210 	.word	0x08008210

08007ab0 <USBD_FS_SerialStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_SerialStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8007ab0:	b580      	push	{r7, lr}
 8007ab2:	b082      	sub	sp, #8
 8007ab4:	af00      	add	r7, sp, #0
 8007ab6:	4603      	mov	r3, r0
 8007ab8:	6039      	str	r1, [r7, #0]
 8007aba:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = USB_SIZ_STRING_SERIAL;
 8007abc:	683b      	ldr	r3, [r7, #0]
 8007abe:	221a      	movs	r2, #26
 8007ac0:	801a      	strh	r2, [r3, #0]

  /* Update the serial number string descriptor with the data from the unique
   * ID */
  Get_SerialNum();
 8007ac2:	f000 f843 	bl	8007b4c <Get_SerialNum>
  /* USER CODE BEGIN USBD_FS_SerialStrDescriptor */

  /* USER CODE END USBD_FS_SerialStrDescriptor */
  return (uint8_t *) USBD_StringSerial;
 8007ac6:	4b02      	ldr	r3, [pc, #8]	; (8007ad0 <USBD_FS_SerialStrDescriptor+0x20>)
}
 8007ac8:	4618      	mov	r0, r3
 8007aca:	3708      	adds	r7, #8
 8007acc:	46bd      	mov	sp, r7
 8007ace:	bd80      	pop	{r7, pc}
 8007ad0:	20000160 	.word	0x20000160

08007ad4 <USBD_FS_ConfigStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_ConfigStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8007ad4:	b580      	push	{r7, lr}
 8007ad6:	b082      	sub	sp, #8
 8007ad8:	af00      	add	r7, sp, #0
 8007ada:	4603      	mov	r3, r0
 8007adc:	6039      	str	r1, [r7, #0]
 8007ade:	71fb      	strb	r3, [r7, #7]
  if(speed == USBD_SPEED_HIGH)
 8007ae0:	79fb      	ldrb	r3, [r7, #7]
 8007ae2:	2b00      	cmp	r3, #0
 8007ae4:	d105      	bne.n	8007af2 <USBD_FS_ConfigStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_CONFIGURATION_STRING_FS, USBD_StrDesc, length);
 8007ae6:	683a      	ldr	r2, [r7, #0]
 8007ae8:	4907      	ldr	r1, [pc, #28]	; (8007b08 <USBD_FS_ConfigStrDescriptor+0x34>)
 8007aea:	4808      	ldr	r0, [pc, #32]	; (8007b0c <USBD_FS_ConfigStrDescriptor+0x38>)
 8007aec:	f7ff fdc9 	bl	8007682 <USBD_GetString>
 8007af0:	e004      	b.n	8007afc <USBD_FS_ConfigStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_CONFIGURATION_STRING_FS, USBD_StrDesc, length);
 8007af2:	683a      	ldr	r2, [r7, #0]
 8007af4:	4904      	ldr	r1, [pc, #16]	; (8007b08 <USBD_FS_ConfigStrDescriptor+0x34>)
 8007af6:	4805      	ldr	r0, [pc, #20]	; (8007b0c <USBD_FS_ConfigStrDescriptor+0x38>)
 8007af8:	f7ff fdc3 	bl	8007682 <USBD_GetString>
  }
  return USBD_StrDesc;
 8007afc:	4b02      	ldr	r3, [pc, #8]	; (8007b08 <USBD_FS_ConfigStrDescriptor+0x34>)
}
 8007afe:	4618      	mov	r0, r3
 8007b00:	3708      	adds	r7, #8
 8007b02:	46bd      	mov	sp, r7
 8007b04:	bd80      	pop	{r7, pc}
 8007b06:	bf00      	nop
 8007b08:	20001cc0 	.word	0x20001cc0
 8007b0c:	08008224 	.word	0x08008224

08007b10 <USBD_FS_InterfaceStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_InterfaceStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8007b10:	b580      	push	{r7, lr}
 8007b12:	b082      	sub	sp, #8
 8007b14:	af00      	add	r7, sp, #0
 8007b16:	4603      	mov	r3, r0
 8007b18:	6039      	str	r1, [r7, #0]
 8007b1a:	71fb      	strb	r3, [r7, #7]
  if(speed == 0)
 8007b1c:	79fb      	ldrb	r3, [r7, #7]
 8007b1e:	2b00      	cmp	r3, #0
 8007b20:	d105      	bne.n	8007b2e <USBD_FS_InterfaceStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_INTERFACE_STRING_FS, USBD_StrDesc, length);
 8007b22:	683a      	ldr	r2, [r7, #0]
 8007b24:	4907      	ldr	r1, [pc, #28]	; (8007b44 <USBD_FS_InterfaceStrDescriptor+0x34>)
 8007b26:	4808      	ldr	r0, [pc, #32]	; (8007b48 <USBD_FS_InterfaceStrDescriptor+0x38>)
 8007b28:	f7ff fdab 	bl	8007682 <USBD_GetString>
 8007b2c:	e004      	b.n	8007b38 <USBD_FS_InterfaceStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_INTERFACE_STRING_FS, USBD_StrDesc, length);
 8007b2e:	683a      	ldr	r2, [r7, #0]
 8007b30:	4904      	ldr	r1, [pc, #16]	; (8007b44 <USBD_FS_InterfaceStrDescriptor+0x34>)
 8007b32:	4805      	ldr	r0, [pc, #20]	; (8007b48 <USBD_FS_InterfaceStrDescriptor+0x38>)
 8007b34:	f7ff fda5 	bl	8007682 <USBD_GetString>
  }
  return USBD_StrDesc;
 8007b38:	4b02      	ldr	r3, [pc, #8]	; (8007b44 <USBD_FS_InterfaceStrDescriptor+0x34>)
}
 8007b3a:	4618      	mov	r0, r3
 8007b3c:	3708      	adds	r7, #8
 8007b3e:	46bd      	mov	sp, r7
 8007b40:	bd80      	pop	{r7, pc}
 8007b42:	bf00      	nop
 8007b44:	20001cc0 	.word	0x20001cc0
 8007b48:	08008230 	.word	0x08008230

08007b4c <Get_SerialNum>:
  * @brief  Create the serial number string descriptor
  * @param  None
  * @retval None
  */
static void Get_SerialNum(void)
{
 8007b4c:	b580      	push	{r7, lr}
 8007b4e:	b084      	sub	sp, #16
 8007b50:	af00      	add	r7, sp, #0
  uint32_t deviceserial0, deviceserial1, deviceserial2;

  deviceserial0 = *(uint32_t *) DEVICE_ID1;
 8007b52:	4b0f      	ldr	r3, [pc, #60]	; (8007b90 <Get_SerialNum+0x44>)
 8007b54:	681b      	ldr	r3, [r3, #0]
 8007b56:	60fb      	str	r3, [r7, #12]
  deviceserial1 = *(uint32_t *) DEVICE_ID2;
 8007b58:	4b0e      	ldr	r3, [pc, #56]	; (8007b94 <Get_SerialNum+0x48>)
 8007b5a:	681b      	ldr	r3, [r3, #0]
 8007b5c:	60bb      	str	r3, [r7, #8]
  deviceserial2 = *(uint32_t *) DEVICE_ID3;
 8007b5e:	4b0e      	ldr	r3, [pc, #56]	; (8007b98 <Get_SerialNum+0x4c>)
 8007b60:	681b      	ldr	r3, [r3, #0]
 8007b62:	607b      	str	r3, [r7, #4]

  deviceserial0 += deviceserial2;
 8007b64:	68fa      	ldr	r2, [r7, #12]
 8007b66:	687b      	ldr	r3, [r7, #4]
 8007b68:	4413      	add	r3, r2
 8007b6a:	60fb      	str	r3, [r7, #12]

  if (deviceserial0 != 0)
 8007b6c:	68fb      	ldr	r3, [r7, #12]
 8007b6e:	2b00      	cmp	r3, #0
 8007b70:	d009      	beq.n	8007b86 <Get_SerialNum+0x3a>
  {
    IntToUnicode(deviceserial0, &USBD_StringSerial[2], 8);
 8007b72:	2208      	movs	r2, #8
 8007b74:	4909      	ldr	r1, [pc, #36]	; (8007b9c <Get_SerialNum+0x50>)
 8007b76:	68f8      	ldr	r0, [r7, #12]
 8007b78:	f000 f814 	bl	8007ba4 <IntToUnicode>
    IntToUnicode(deviceserial1, &USBD_StringSerial[18], 4);
 8007b7c:	2204      	movs	r2, #4
 8007b7e:	4908      	ldr	r1, [pc, #32]	; (8007ba0 <Get_SerialNum+0x54>)
 8007b80:	68b8      	ldr	r0, [r7, #8]
 8007b82:	f000 f80f 	bl	8007ba4 <IntToUnicode>
  }
}
 8007b86:	bf00      	nop
 8007b88:	3710      	adds	r7, #16
 8007b8a:	46bd      	mov	sp, r7
 8007b8c:	bd80      	pop	{r7, pc}
 8007b8e:	bf00      	nop
 8007b90:	1ffff7e8 	.word	0x1ffff7e8
 8007b94:	1ffff7ec 	.word	0x1ffff7ec
 8007b98:	1ffff7f0 	.word	0x1ffff7f0
 8007b9c:	20000162 	.word	0x20000162
 8007ba0:	20000172 	.word	0x20000172

08007ba4 <IntToUnicode>:
  * @param  pbuf: pointer to the buffer
  * @param  len: buffer length
  * @retval None
  */
static void IntToUnicode(uint32_t value, uint8_t * pbuf, uint8_t len)
{
 8007ba4:	b480      	push	{r7}
 8007ba6:	b087      	sub	sp, #28
 8007ba8:	af00      	add	r7, sp, #0
 8007baa:	60f8      	str	r0, [r7, #12]
 8007bac:	60b9      	str	r1, [r7, #8]
 8007bae:	4613      	mov	r3, r2
 8007bb0:	71fb      	strb	r3, [r7, #7]
  uint8_t idx = 0;
 8007bb2:	2300      	movs	r3, #0
 8007bb4:	75fb      	strb	r3, [r7, #23]

  for (idx = 0; idx < len; idx++)
 8007bb6:	2300      	movs	r3, #0
 8007bb8:	75fb      	strb	r3, [r7, #23]
 8007bba:	e027      	b.n	8007c0c <IntToUnicode+0x68>
  {
    if (((value >> 28)) < 0xA)
 8007bbc:	68fb      	ldr	r3, [r7, #12]
 8007bbe:	0f1b      	lsrs	r3, r3, #28
 8007bc0:	2b09      	cmp	r3, #9
 8007bc2:	d80b      	bhi.n	8007bdc <IntToUnicode+0x38>
    {
      pbuf[2 * idx] = (value >> 28) + '0';
 8007bc4:	68fb      	ldr	r3, [r7, #12]
 8007bc6:	0f1b      	lsrs	r3, r3, #28
 8007bc8:	b2da      	uxtb	r2, r3
 8007bca:	7dfb      	ldrb	r3, [r7, #23]
 8007bcc:	005b      	lsls	r3, r3, #1
 8007bce:	4619      	mov	r1, r3
 8007bd0:	68bb      	ldr	r3, [r7, #8]
 8007bd2:	440b      	add	r3, r1
 8007bd4:	3230      	adds	r2, #48	; 0x30
 8007bd6:	b2d2      	uxtb	r2, r2
 8007bd8:	701a      	strb	r2, [r3, #0]
 8007bda:	e00a      	b.n	8007bf2 <IntToUnicode+0x4e>
    }
    else
    {
      pbuf[2 * idx] = (value >> 28) + 'A' - 10;
 8007bdc:	68fb      	ldr	r3, [r7, #12]
 8007bde:	0f1b      	lsrs	r3, r3, #28
 8007be0:	b2da      	uxtb	r2, r3
 8007be2:	7dfb      	ldrb	r3, [r7, #23]
 8007be4:	005b      	lsls	r3, r3, #1
 8007be6:	4619      	mov	r1, r3
 8007be8:	68bb      	ldr	r3, [r7, #8]
 8007bea:	440b      	add	r3, r1
 8007bec:	3237      	adds	r2, #55	; 0x37
 8007bee:	b2d2      	uxtb	r2, r2
 8007bf0:	701a      	strb	r2, [r3, #0]
    }

    value = value << 4;
 8007bf2:	68fb      	ldr	r3, [r7, #12]
 8007bf4:	011b      	lsls	r3, r3, #4
 8007bf6:	60fb      	str	r3, [r7, #12]

    pbuf[2 * idx + 1] = 0;
 8007bf8:	7dfb      	ldrb	r3, [r7, #23]
 8007bfa:	005b      	lsls	r3, r3, #1
 8007bfc:	3301      	adds	r3, #1
 8007bfe:	68ba      	ldr	r2, [r7, #8]
 8007c00:	4413      	add	r3, r2
 8007c02:	2200      	movs	r2, #0
 8007c04:	701a      	strb	r2, [r3, #0]
  for (idx = 0; idx < len; idx++)
 8007c06:	7dfb      	ldrb	r3, [r7, #23]
 8007c08:	3301      	adds	r3, #1
 8007c0a:	75fb      	strb	r3, [r7, #23]
 8007c0c:	7dfa      	ldrb	r2, [r7, #23]
 8007c0e:	79fb      	ldrb	r3, [r7, #7]
 8007c10:	429a      	cmp	r2, r3
 8007c12:	d3d3      	bcc.n	8007bbc <IntToUnicode+0x18>
  }
}
 8007c14:	bf00      	nop
 8007c16:	371c      	adds	r7, #28
 8007c18:	46bd      	mov	sp, r7
 8007c1a:	bc80      	pop	{r7}
 8007c1c:	4770      	bx	lr
	...

08007c20 <HAL_PCD_MspInit>:
                       LL Driver Callbacks (PCD -> USB Device Library)
*******************************************************************************/
/* MSP Init */

void HAL_PCD_MspInit(PCD_HandleTypeDef* pcdHandle)
{
 8007c20:	b580      	push	{r7, lr}
 8007c22:	b084      	sub	sp, #16
 8007c24:	af00      	add	r7, sp, #0
 8007c26:	6078      	str	r0, [r7, #4]
  if(pcdHandle->Instance==USB)
 8007c28:	687b      	ldr	r3, [r7, #4]
 8007c2a:	681b      	ldr	r3, [r3, #0]
 8007c2c:	4a0d      	ldr	r2, [pc, #52]	; (8007c64 <HAL_PCD_MspInit+0x44>)
 8007c2e:	4293      	cmp	r3, r2
 8007c30:	d113      	bne.n	8007c5a <HAL_PCD_MspInit+0x3a>
  {
  /* USER CODE BEGIN USB_MspInit 0 */

  /* USER CODE END USB_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USB_CLK_ENABLE();
 8007c32:	4b0d      	ldr	r3, [pc, #52]	; (8007c68 <HAL_PCD_MspInit+0x48>)
 8007c34:	69db      	ldr	r3, [r3, #28]
 8007c36:	4a0c      	ldr	r2, [pc, #48]	; (8007c68 <HAL_PCD_MspInit+0x48>)
 8007c38:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 8007c3c:	61d3      	str	r3, [r2, #28]
 8007c3e:	4b0a      	ldr	r3, [pc, #40]	; (8007c68 <HAL_PCD_MspInit+0x48>)
 8007c40:	69db      	ldr	r3, [r3, #28]
 8007c42:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8007c46:	60fb      	str	r3, [r7, #12]
 8007c48:	68fb      	ldr	r3, [r7, #12]

    /* Peripheral interrupt init */
    HAL_NVIC_SetPriority(USB_LP_CAN1_RX0_IRQn, 0, 0);
 8007c4a:	2200      	movs	r2, #0
 8007c4c:	2100      	movs	r1, #0
 8007c4e:	2014      	movs	r0, #20
 8007c50:	f7f9 fa39 	bl	80010c6 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USB_LP_CAN1_RX0_IRQn);
 8007c54:	2014      	movs	r0, #20
 8007c56:	f7f9 fa52 	bl	80010fe <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USB_MspInit 1 */

  /* USER CODE END USB_MspInit 1 */
  }
}
 8007c5a:	bf00      	nop
 8007c5c:	3710      	adds	r7, #16
 8007c5e:	46bd      	mov	sp, r7
 8007c60:	bd80      	pop	{r7, pc}
 8007c62:	bf00      	nop
 8007c64:	40005c00 	.word	0x40005c00
 8007c68:	40021000 	.word	0x40021000

08007c6c <HAL_PCD_SetupStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SetupStageCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SetupStageCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8007c6c:	b580      	push	{r7, lr}
 8007c6e:	b082      	sub	sp, #8
 8007c70:	af00      	add	r7, sp, #0
 8007c72:	6078      	str	r0, [r7, #4]
  USBD_LL_SetupStage((USBD_HandleTypeDef*)hpcd->pData, (uint8_t *)hpcd->Setup);
 8007c74:	687b      	ldr	r3, [r7, #4]
 8007c76:	f8d3 22e8 	ldr.w	r2, [r3, #744]	; 0x2e8
 8007c7a:	687b      	ldr	r3, [r7, #4]
 8007c7c:	f503 732c 	add.w	r3, r3, #688	; 0x2b0
 8007c80:	4619      	mov	r1, r3
 8007c82:	4610      	mov	r0, r2
 8007c84:	f7fe fdd9 	bl	800683a <USBD_LL_SetupStage>
}
 8007c88:	bf00      	nop
 8007c8a:	3708      	adds	r7, #8
 8007c8c:	46bd      	mov	sp, r7
 8007c8e:	bd80      	pop	{r7, pc}

08007c90 <HAL_PCD_DataOutStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_DataOutStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_DataOutStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8007c90:	b580      	push	{r7, lr}
 8007c92:	b082      	sub	sp, #8
 8007c94:	af00      	add	r7, sp, #0
 8007c96:	6078      	str	r0, [r7, #4]
 8007c98:	460b      	mov	r3, r1
 8007c9a:	70fb      	strb	r3, [r7, #3]
  USBD_LL_DataOutStage((USBD_HandleTypeDef*)hpcd->pData, epnum, hpcd->OUT_ep[epnum].xfer_buff);
 8007c9c:	687b      	ldr	r3, [r7, #4]
 8007c9e:	f8d3 02e8 	ldr.w	r0, [r3, #744]	; 0x2e8
 8007ca2:	78fa      	ldrb	r2, [r7, #3]
 8007ca4:	6879      	ldr	r1, [r7, #4]
 8007ca6:	4613      	mov	r3, r2
 8007ca8:	009b      	lsls	r3, r3, #2
 8007caa:	4413      	add	r3, r2
 8007cac:	00db      	lsls	r3, r3, #3
 8007cae:	440b      	add	r3, r1
 8007cb0:	f503 73be 	add.w	r3, r3, #380	; 0x17c
 8007cb4:	681a      	ldr	r2, [r3, #0]
 8007cb6:	78fb      	ldrb	r3, [r7, #3]
 8007cb8:	4619      	mov	r1, r3
 8007cba:	f7fe fe09 	bl	80068d0 <USBD_LL_DataOutStage>
}
 8007cbe:	bf00      	nop
 8007cc0:	3708      	adds	r7, #8
 8007cc2:	46bd      	mov	sp, r7
 8007cc4:	bd80      	pop	{r7, pc}

08007cc6 <HAL_PCD_DataInStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_DataInStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_DataInStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8007cc6:	b580      	push	{r7, lr}
 8007cc8:	b082      	sub	sp, #8
 8007cca:	af00      	add	r7, sp, #0
 8007ccc:	6078      	str	r0, [r7, #4]
 8007cce:	460b      	mov	r3, r1
 8007cd0:	70fb      	strb	r3, [r7, #3]
  USBD_LL_DataInStage((USBD_HandleTypeDef*)hpcd->pData, epnum, hpcd->IN_ep[epnum].xfer_buff);
 8007cd2:	687b      	ldr	r3, [r7, #4]
 8007cd4:	f8d3 02e8 	ldr.w	r0, [r3, #744]	; 0x2e8
 8007cd8:	78fa      	ldrb	r2, [r7, #3]
 8007cda:	6879      	ldr	r1, [r7, #4]
 8007cdc:	4613      	mov	r3, r2
 8007cde:	009b      	lsls	r3, r3, #2
 8007ce0:	4413      	add	r3, r2
 8007ce2:	00db      	lsls	r3, r3, #3
 8007ce4:	440b      	add	r3, r1
 8007ce6:	333c      	adds	r3, #60	; 0x3c
 8007ce8:	681a      	ldr	r2, [r3, #0]
 8007cea:	78fb      	ldrb	r3, [r7, #3]
 8007cec:	4619      	mov	r1, r3
 8007cee:	f7fe fe60 	bl	80069b2 <USBD_LL_DataInStage>
}
 8007cf2:	bf00      	nop
 8007cf4:	3708      	adds	r7, #8
 8007cf6:	46bd      	mov	sp, r7
 8007cf8:	bd80      	pop	{r7, pc}

08007cfa <HAL_PCD_SOFCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SOFCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SOFCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8007cfa:	b580      	push	{r7, lr}
 8007cfc:	b082      	sub	sp, #8
 8007cfe:	af00      	add	r7, sp, #0
 8007d00:	6078      	str	r0, [r7, #4]
  USBD_LL_SOF((USBD_HandleTypeDef*)hpcd->pData);
 8007d02:	687b      	ldr	r3, [r7, #4]
 8007d04:	f8d3 32e8 	ldr.w	r3, [r3, #744]	; 0x2e8
 8007d08:	4618      	mov	r0, r3
 8007d0a:	f7fe ff70 	bl	8006bee <USBD_LL_SOF>
}
 8007d0e:	bf00      	nop
 8007d10:	3708      	adds	r7, #8
 8007d12:	46bd      	mov	sp, r7
 8007d14:	bd80      	pop	{r7, pc}

08007d16 <HAL_PCD_ResetCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ResetCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_ResetCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8007d16:	b580      	push	{r7, lr}
 8007d18:	b084      	sub	sp, #16
 8007d1a:	af00      	add	r7, sp, #0
 8007d1c:	6078      	str	r0, [r7, #4]
  USBD_SpeedTypeDef speed = USBD_SPEED_FULL;
 8007d1e:	2301      	movs	r3, #1
 8007d20:	73fb      	strb	r3, [r7, #15]

  if ( hpcd->Init.speed != PCD_SPEED_FULL)
 8007d22:	687b      	ldr	r3, [r7, #4]
 8007d24:	689b      	ldr	r3, [r3, #8]
 8007d26:	2b02      	cmp	r3, #2
 8007d28:	d001      	beq.n	8007d2e <HAL_PCD_ResetCallback+0x18>
  {
    Error_Handler();
 8007d2a:	f7f8 fba5 	bl	8000478 <Error_Handler>
  }
    /* Set Speed. */
  USBD_LL_SetSpeed((USBD_HandleTypeDef*)hpcd->pData, speed);
 8007d2e:	687b      	ldr	r3, [r7, #4]
 8007d30:	f8d3 32e8 	ldr.w	r3, [r3, #744]	; 0x2e8
 8007d34:	7bfa      	ldrb	r2, [r7, #15]
 8007d36:	4611      	mov	r1, r2
 8007d38:	4618      	mov	r0, r3
 8007d3a:	f7fe ff20 	bl	8006b7e <USBD_LL_SetSpeed>

  /* Reset Device. */
  USBD_LL_Reset((USBD_HandleTypeDef*)hpcd->pData);
 8007d3e:	687b      	ldr	r3, [r7, #4]
 8007d40:	f8d3 32e8 	ldr.w	r3, [r3, #744]	; 0x2e8
 8007d44:	4618      	mov	r0, r3
 8007d46:	f7fe fed9 	bl	8006afc <USBD_LL_Reset>
}
 8007d4a:	bf00      	nop
 8007d4c:	3710      	adds	r7, #16
 8007d4e:	46bd      	mov	sp, r7
 8007d50:	bd80      	pop	{r7, pc}
	...

08007d54 <HAL_PCD_SuspendCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SuspendCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SuspendCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8007d54:	b580      	push	{r7, lr}
 8007d56:	b082      	sub	sp, #8
 8007d58:	af00      	add	r7, sp, #0
 8007d5a:	6078      	str	r0, [r7, #4]
  /* Inform USB library that core enters in suspend Mode. */
  USBD_LL_Suspend((USBD_HandleTypeDef*)hpcd->pData);
 8007d5c:	687b      	ldr	r3, [r7, #4]
 8007d5e:	f8d3 32e8 	ldr.w	r3, [r3, #744]	; 0x2e8
 8007d62:	4618      	mov	r0, r3
 8007d64:	f7fe ff1a 	bl	8006b9c <USBD_LL_Suspend>
  /* Enter in STOP mode. */
  /* USER CODE BEGIN 2 */
  if (hpcd->Init.low_power_enable)
 8007d68:	687b      	ldr	r3, [r7, #4]
 8007d6a:	699b      	ldr	r3, [r3, #24]
 8007d6c:	2b00      	cmp	r3, #0
 8007d6e:	d005      	beq.n	8007d7c <HAL_PCD_SuspendCallback+0x28>
  {
    /* Set SLEEPDEEP bit and SleepOnExit of Cortex System Control Register. */
    SCB->SCR |= (uint32_t)((uint32_t)(SCB_SCR_SLEEPDEEP_Msk | SCB_SCR_SLEEPONEXIT_Msk));
 8007d70:	4b04      	ldr	r3, [pc, #16]	; (8007d84 <HAL_PCD_SuspendCallback+0x30>)
 8007d72:	691b      	ldr	r3, [r3, #16]
 8007d74:	4a03      	ldr	r2, [pc, #12]	; (8007d84 <HAL_PCD_SuspendCallback+0x30>)
 8007d76:	f043 0306 	orr.w	r3, r3, #6
 8007d7a:	6113      	str	r3, [r2, #16]
  }
  /* USER CODE END 2 */
}
 8007d7c:	bf00      	nop
 8007d7e:	3708      	adds	r7, #8
 8007d80:	46bd      	mov	sp, r7
 8007d82:	bd80      	pop	{r7, pc}
 8007d84:	e000ed00 	.word	0xe000ed00

08007d88 <HAL_PCD_ResumeCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ResumeCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_ResumeCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8007d88:	b580      	push	{r7, lr}
 8007d8a:	b082      	sub	sp, #8
 8007d8c:	af00      	add	r7, sp, #0
 8007d8e:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN 3 */

  /* USER CODE END 3 */
  USBD_LL_Resume((USBD_HandleTypeDef*)hpcd->pData);
 8007d90:	687b      	ldr	r3, [r7, #4]
 8007d92:	f8d3 32e8 	ldr.w	r3, [r3, #744]	; 0x2e8
 8007d96:	4618      	mov	r0, r3
 8007d98:	f7fe ff14 	bl	8006bc4 <USBD_LL_Resume>
}
 8007d9c:	bf00      	nop
 8007d9e:	3708      	adds	r7, #8
 8007da0:	46bd      	mov	sp, r7
 8007da2:	bd80      	pop	{r7, pc}

08007da4 <USBD_LL_Init>:
  * @brief  Initializes the low level portion of the device driver.
  * @param  pdev: Device handle
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Init(USBD_HandleTypeDef *pdev)
{
 8007da4:	b580      	push	{r7, lr}
 8007da6:	b082      	sub	sp, #8
 8007da8:	af00      	add	r7, sp, #0
 8007daa:	6078      	str	r0, [r7, #4]
  /* Init USB Ip. */
  /* Link the driver to the stack. */
  hpcd_USB_FS.pData = pdev;
 8007dac:	4a28      	ldr	r2, [pc, #160]	; (8007e50 <USBD_LL_Init+0xac>)
 8007dae:	687b      	ldr	r3, [r7, #4]
 8007db0:	f8c2 32e8 	str.w	r3, [r2, #744]	; 0x2e8
  pdev->pData = &hpcd_USB_FS;
 8007db4:	687b      	ldr	r3, [r7, #4]
 8007db6:	4a26      	ldr	r2, [pc, #152]	; (8007e50 <USBD_LL_Init+0xac>)
 8007db8:	f8c3 22c0 	str.w	r2, [r3, #704]	; 0x2c0

  hpcd_USB_FS.Instance = USB;
 8007dbc:	4b24      	ldr	r3, [pc, #144]	; (8007e50 <USBD_LL_Init+0xac>)
 8007dbe:	4a25      	ldr	r2, [pc, #148]	; (8007e54 <USBD_LL_Init+0xb0>)
 8007dc0:	601a      	str	r2, [r3, #0]
  hpcd_USB_FS.Init.dev_endpoints = 8;
 8007dc2:	4b23      	ldr	r3, [pc, #140]	; (8007e50 <USBD_LL_Init+0xac>)
 8007dc4:	2208      	movs	r2, #8
 8007dc6:	605a      	str	r2, [r3, #4]
  hpcd_USB_FS.Init.speed = PCD_SPEED_FULL;
 8007dc8:	4b21      	ldr	r3, [pc, #132]	; (8007e50 <USBD_LL_Init+0xac>)
 8007dca:	2202      	movs	r2, #2
 8007dcc:	609a      	str	r2, [r3, #8]
  hpcd_USB_FS.Init.low_power_enable = DISABLE;
 8007dce:	4b20      	ldr	r3, [pc, #128]	; (8007e50 <USBD_LL_Init+0xac>)
 8007dd0:	2200      	movs	r2, #0
 8007dd2:	619a      	str	r2, [r3, #24]
  hpcd_USB_FS.Init.lpm_enable = DISABLE;
 8007dd4:	4b1e      	ldr	r3, [pc, #120]	; (8007e50 <USBD_LL_Init+0xac>)
 8007dd6:	2200      	movs	r2, #0
 8007dd8:	61da      	str	r2, [r3, #28]
  hpcd_USB_FS.Init.battery_charging_enable = DISABLE;
 8007dda:	4b1d      	ldr	r3, [pc, #116]	; (8007e50 <USBD_LL_Init+0xac>)
 8007ddc:	2200      	movs	r2, #0
 8007dde:	621a      	str	r2, [r3, #32]
  if (HAL_PCD_Init(&hpcd_USB_FS) != HAL_OK)
 8007de0:	481b      	ldr	r0, [pc, #108]	; (8007e50 <USBD_LL_Init+0xac>)
 8007de2:	f7f9 fd07 	bl	80017f4 <HAL_PCD_Init>
 8007de6:	4603      	mov	r3, r0
 8007de8:	2b00      	cmp	r3, #0
 8007dea:	d001      	beq.n	8007df0 <USBD_LL_Init+0x4c>
  {
    Error_Handler( );
 8007dec:	f7f8 fb44 	bl	8000478 <Error_Handler>
  HAL_PCD_RegisterDataInStageCallback(&hpcd_USB_FS, PCD_DataInStageCallback);
  HAL_PCD_RegisterIsoOutIncpltCallback(&hpcd_USB_FS, PCD_ISOOUTIncompleteCallback);
  HAL_PCD_RegisterIsoInIncpltCallback(&hpcd_USB_FS, PCD_ISOINIncompleteCallback);
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
  /* USER CODE BEGIN EndPoint_Configuration */
  HAL_PCDEx_PMAConfig((PCD_HandleTypeDef*)pdev->pData , 0x00 , PCD_SNG_BUF, 0x18);
 8007df0:	687b      	ldr	r3, [r7, #4]
 8007df2:	f8d3 02c0 	ldr.w	r0, [r3, #704]	; 0x2c0
 8007df6:	2318      	movs	r3, #24
 8007df8:	2200      	movs	r2, #0
 8007dfa:	2100      	movs	r1, #0
 8007dfc:	f7fb f83b 	bl	8002e76 <HAL_PCDEx_PMAConfig>
  HAL_PCDEx_PMAConfig((PCD_HandleTypeDef*)pdev->pData , 0x80 , PCD_SNG_BUF, 0x58);
 8007e00:	687b      	ldr	r3, [r7, #4]
 8007e02:	f8d3 02c0 	ldr.w	r0, [r3, #704]	; 0x2c0
 8007e06:	2358      	movs	r3, #88	; 0x58
 8007e08:	2200      	movs	r2, #0
 8007e0a:	2180      	movs	r1, #128	; 0x80
 8007e0c:	f7fb f833 	bl	8002e76 <HAL_PCDEx_PMAConfig>
  /* USER CODE END EndPoint_Configuration */
  /* USER CODE BEGIN EndPoint_Configuration_CDC */
  HAL_PCDEx_PMAConfig((PCD_HandleTypeDef*)pdev->pData , 0x81 , PCD_SNG_BUF, 0xC0);
 8007e10:	687b      	ldr	r3, [r7, #4]
 8007e12:	f8d3 02c0 	ldr.w	r0, [r3, #704]	; 0x2c0
 8007e16:	23c0      	movs	r3, #192	; 0xc0
 8007e18:	2200      	movs	r2, #0
 8007e1a:	2181      	movs	r1, #129	; 0x81
 8007e1c:	f7fb f82b 	bl	8002e76 <HAL_PCDEx_PMAConfig>
  HAL_PCDEx_PMAConfig((PCD_HandleTypeDef*)pdev->pData , 0x01 , PCD_SNG_BUF, 0x110);
 8007e20:	687b      	ldr	r3, [r7, #4]
 8007e22:	f8d3 02c0 	ldr.w	r0, [r3, #704]	; 0x2c0
 8007e26:	f44f 7388 	mov.w	r3, #272	; 0x110
 8007e2a:	2200      	movs	r2, #0
 8007e2c:	2101      	movs	r1, #1
 8007e2e:	f7fb f822 	bl	8002e76 <HAL_PCDEx_PMAConfig>
  HAL_PCDEx_PMAConfig((PCD_HandleTypeDef*)pdev->pData , 0x82 , PCD_SNG_BUF, 0x100);
 8007e32:	687b      	ldr	r3, [r7, #4]
 8007e34:	f8d3 02c0 	ldr.w	r0, [r3, #704]	; 0x2c0
 8007e38:	f44f 7380 	mov.w	r3, #256	; 0x100
 8007e3c:	2200      	movs	r2, #0
 8007e3e:	2182      	movs	r1, #130	; 0x82
 8007e40:	f7fb f819 	bl	8002e76 <HAL_PCDEx_PMAConfig>
  /* USER CODE END EndPoint_Configuration_CDC */
  return USBD_OK;
 8007e44:	2300      	movs	r3, #0
}
 8007e46:	4618      	mov	r0, r3
 8007e48:	3708      	adds	r7, #8
 8007e4a:	46bd      	mov	sp, r7
 8007e4c:	bd80      	pop	{r7, pc}
 8007e4e:	bf00      	nop
 8007e50:	20001ec0 	.word	0x20001ec0
 8007e54:	40005c00 	.word	0x40005c00

08007e58 <USBD_LL_Start>:
  * @brief  Starts the low level portion of the device driver.
  * @param  pdev: Device handle
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Start(USBD_HandleTypeDef *pdev)
{
 8007e58:	b580      	push	{r7, lr}
 8007e5a:	b084      	sub	sp, #16
 8007e5c:	af00      	add	r7, sp, #0
 8007e5e:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8007e60:	2300      	movs	r3, #0
 8007e62:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8007e64:	2300      	movs	r3, #0
 8007e66:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_Start(pdev->pData);
 8007e68:	687b      	ldr	r3, [r7, #4]
 8007e6a:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 8007e6e:	4618      	mov	r0, r3
 8007e70:	f7f9 fdcb 	bl	8001a0a <HAL_PCD_Start>
 8007e74:	4603      	mov	r3, r0
 8007e76:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 8007e78:	7bfb      	ldrb	r3, [r7, #15]
 8007e7a:	4618      	mov	r0, r3
 8007e7c:	f000 f94e 	bl	800811c <USBD_Get_USB_Status>
 8007e80:	4603      	mov	r3, r0
 8007e82:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 8007e84:	7bbb      	ldrb	r3, [r7, #14]
}
 8007e86:	4618      	mov	r0, r3
 8007e88:	3710      	adds	r7, #16
 8007e8a:	46bd      	mov	sp, r7
 8007e8c:	bd80      	pop	{r7, pc}

08007e8e <USBD_LL_OpenEP>:
  * @param  ep_type: Endpoint type
  * @param  ep_mps: Endpoint max packet size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_OpenEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t ep_type, uint16_t ep_mps)
{
 8007e8e:	b580      	push	{r7, lr}
 8007e90:	b084      	sub	sp, #16
 8007e92:	af00      	add	r7, sp, #0
 8007e94:	6078      	str	r0, [r7, #4]
 8007e96:	4608      	mov	r0, r1
 8007e98:	4611      	mov	r1, r2
 8007e9a:	461a      	mov	r2, r3
 8007e9c:	4603      	mov	r3, r0
 8007e9e:	70fb      	strb	r3, [r7, #3]
 8007ea0:	460b      	mov	r3, r1
 8007ea2:	70bb      	strb	r3, [r7, #2]
 8007ea4:	4613      	mov	r3, r2
 8007ea6:	803b      	strh	r3, [r7, #0]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8007ea8:	2300      	movs	r3, #0
 8007eaa:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8007eac:	2300      	movs	r3, #0
 8007eae:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_Open(pdev->pData, ep_addr, ep_mps, ep_type);
 8007eb0:	687b      	ldr	r3, [r7, #4]
 8007eb2:	f8d3 02c0 	ldr.w	r0, [r3, #704]	; 0x2c0
 8007eb6:	78bb      	ldrb	r3, [r7, #2]
 8007eb8:	883a      	ldrh	r2, [r7, #0]
 8007eba:	78f9      	ldrb	r1, [r7, #3]
 8007ebc:	f7f9 ff45 	bl	8001d4a <HAL_PCD_EP_Open>
 8007ec0:	4603      	mov	r3, r0
 8007ec2:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 8007ec4:	7bfb      	ldrb	r3, [r7, #15]
 8007ec6:	4618      	mov	r0, r3
 8007ec8:	f000 f928 	bl	800811c <USBD_Get_USB_Status>
 8007ecc:	4603      	mov	r3, r0
 8007ece:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 8007ed0:	7bbb      	ldrb	r3, [r7, #14]
}
 8007ed2:	4618      	mov	r0, r3
 8007ed4:	3710      	adds	r7, #16
 8007ed6:	46bd      	mov	sp, r7
 8007ed8:	bd80      	pop	{r7, pc}

08007eda <USBD_LL_CloseEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_CloseEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 8007eda:	b580      	push	{r7, lr}
 8007edc:	b084      	sub	sp, #16
 8007ede:	af00      	add	r7, sp, #0
 8007ee0:	6078      	str	r0, [r7, #4]
 8007ee2:	460b      	mov	r3, r1
 8007ee4:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8007ee6:	2300      	movs	r3, #0
 8007ee8:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8007eea:	2300      	movs	r3, #0
 8007eec:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_Close(pdev->pData, ep_addr);
 8007eee:	687b      	ldr	r3, [r7, #4]
 8007ef0:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 8007ef4:	78fa      	ldrb	r2, [r7, #3]
 8007ef6:	4611      	mov	r1, r2
 8007ef8:	4618      	mov	r0, r3
 8007efa:	f7f9 ff8c 	bl	8001e16 <HAL_PCD_EP_Close>
 8007efe:	4603      	mov	r3, r0
 8007f00:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 8007f02:	7bfb      	ldrb	r3, [r7, #15]
 8007f04:	4618      	mov	r0, r3
 8007f06:	f000 f909 	bl	800811c <USBD_Get_USB_Status>
 8007f0a:	4603      	mov	r3, r0
 8007f0c:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 8007f0e:	7bbb      	ldrb	r3, [r7, #14]
}
 8007f10:	4618      	mov	r0, r3
 8007f12:	3710      	adds	r7, #16
 8007f14:	46bd      	mov	sp, r7
 8007f16:	bd80      	pop	{r7, pc}

08007f18 <USBD_LL_StallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_StallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 8007f18:	b580      	push	{r7, lr}
 8007f1a:	b084      	sub	sp, #16
 8007f1c:	af00      	add	r7, sp, #0
 8007f1e:	6078      	str	r0, [r7, #4]
 8007f20:	460b      	mov	r3, r1
 8007f22:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8007f24:	2300      	movs	r3, #0
 8007f26:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8007f28:	2300      	movs	r3, #0
 8007f2a:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_SetStall(pdev->pData, ep_addr);
 8007f2c:	687b      	ldr	r3, [r7, #4]
 8007f2e:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 8007f32:	78fa      	ldrb	r2, [r7, #3]
 8007f34:	4611      	mov	r1, r2
 8007f36:	4618      	mov	r0, r3
 8007f38:	f7fa f84c 	bl	8001fd4 <HAL_PCD_EP_SetStall>
 8007f3c:	4603      	mov	r3, r0
 8007f3e:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 8007f40:	7bfb      	ldrb	r3, [r7, #15]
 8007f42:	4618      	mov	r0, r3
 8007f44:	f000 f8ea 	bl	800811c <USBD_Get_USB_Status>
 8007f48:	4603      	mov	r3, r0
 8007f4a:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 8007f4c:	7bbb      	ldrb	r3, [r7, #14]
}
 8007f4e:	4618      	mov	r0, r3
 8007f50:	3710      	adds	r7, #16
 8007f52:	46bd      	mov	sp, r7
 8007f54:	bd80      	pop	{r7, pc}

08007f56 <USBD_LL_ClearStallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_ClearStallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 8007f56:	b580      	push	{r7, lr}
 8007f58:	b084      	sub	sp, #16
 8007f5a:	af00      	add	r7, sp, #0
 8007f5c:	6078      	str	r0, [r7, #4]
 8007f5e:	460b      	mov	r3, r1
 8007f60:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8007f62:	2300      	movs	r3, #0
 8007f64:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8007f66:	2300      	movs	r3, #0
 8007f68:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_ClrStall(pdev->pData, ep_addr);
 8007f6a:	687b      	ldr	r3, [r7, #4]
 8007f6c:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 8007f70:	78fa      	ldrb	r2, [r7, #3]
 8007f72:	4611      	mov	r1, r2
 8007f74:	4618      	mov	r0, r3
 8007f76:	f7fa f88d 	bl	8002094 <HAL_PCD_EP_ClrStall>
 8007f7a:	4603      	mov	r3, r0
 8007f7c:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 8007f7e:	7bfb      	ldrb	r3, [r7, #15]
 8007f80:	4618      	mov	r0, r3
 8007f82:	f000 f8cb 	bl	800811c <USBD_Get_USB_Status>
 8007f86:	4603      	mov	r3, r0
 8007f88:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 8007f8a:	7bbb      	ldrb	r3, [r7, #14]
}
 8007f8c:	4618      	mov	r0, r3
 8007f8e:	3710      	adds	r7, #16
 8007f90:	46bd      	mov	sp, r7
 8007f92:	bd80      	pop	{r7, pc}

08007f94 <USBD_LL_IsStallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval Stall (1: Yes, 0: No)
  */
uint8_t USBD_LL_IsStallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 8007f94:	b480      	push	{r7}
 8007f96:	b085      	sub	sp, #20
 8007f98:	af00      	add	r7, sp, #0
 8007f9a:	6078      	str	r0, [r7, #4]
 8007f9c:	460b      	mov	r3, r1
 8007f9e:	70fb      	strb	r3, [r7, #3]
  PCD_HandleTypeDef *hpcd = (PCD_HandleTypeDef*) pdev->pData;
 8007fa0:	687b      	ldr	r3, [r7, #4]
 8007fa2:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 8007fa6:	60fb      	str	r3, [r7, #12]

  if((ep_addr & 0x80) == 0x80)
 8007fa8:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8007fac:	2b00      	cmp	r3, #0
 8007fae:	da0c      	bge.n	8007fca <USBD_LL_IsStallEP+0x36>
  {
    return hpcd->IN_ep[ep_addr & 0x7F].is_stall;
 8007fb0:	78fb      	ldrb	r3, [r7, #3]
 8007fb2:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8007fb6:	68f9      	ldr	r1, [r7, #12]
 8007fb8:	1c5a      	adds	r2, r3, #1
 8007fba:	4613      	mov	r3, r2
 8007fbc:	009b      	lsls	r3, r3, #2
 8007fbe:	4413      	add	r3, r2
 8007fc0:	00db      	lsls	r3, r3, #3
 8007fc2:	440b      	add	r3, r1
 8007fc4:	3302      	adds	r3, #2
 8007fc6:	781b      	ldrb	r3, [r3, #0]
 8007fc8:	e00b      	b.n	8007fe2 <USBD_LL_IsStallEP+0x4e>
  }
  else
  {
    return hpcd->OUT_ep[ep_addr & 0x7F].is_stall;
 8007fca:	78fb      	ldrb	r3, [r7, #3]
 8007fcc:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 8007fd0:	68f9      	ldr	r1, [r7, #12]
 8007fd2:	4613      	mov	r3, r2
 8007fd4:	009b      	lsls	r3, r3, #2
 8007fd6:	4413      	add	r3, r2
 8007fd8:	00db      	lsls	r3, r3, #3
 8007fda:	440b      	add	r3, r1
 8007fdc:	f503 73b5 	add.w	r3, r3, #362	; 0x16a
 8007fe0:	781b      	ldrb	r3, [r3, #0]
  }
}
 8007fe2:	4618      	mov	r0, r3
 8007fe4:	3714      	adds	r7, #20
 8007fe6:	46bd      	mov	sp, r7
 8007fe8:	bc80      	pop	{r7}
 8007fea:	4770      	bx	lr

08007fec <USBD_LL_SetUSBAddress>:
  * @param  pdev: Device handle
  * @param  dev_addr: Device address
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_SetUSBAddress(USBD_HandleTypeDef *pdev, uint8_t dev_addr)
{
 8007fec:	b580      	push	{r7, lr}
 8007fee:	b084      	sub	sp, #16
 8007ff0:	af00      	add	r7, sp, #0
 8007ff2:	6078      	str	r0, [r7, #4]
 8007ff4:	460b      	mov	r3, r1
 8007ff6:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8007ff8:	2300      	movs	r3, #0
 8007ffa:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8007ffc:	2300      	movs	r3, #0
 8007ffe:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_SetAddress(pdev->pData, dev_addr);
 8008000:	687b      	ldr	r3, [r7, #4]
 8008002:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 8008006:	78fa      	ldrb	r2, [r7, #3]
 8008008:	4611      	mov	r1, r2
 800800a:	4618      	mov	r0, r3
 800800c:	f7f9 fe78 	bl	8001d00 <HAL_PCD_SetAddress>
 8008010:	4603      	mov	r3, r0
 8008012:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 8008014:	7bfb      	ldrb	r3, [r7, #15]
 8008016:	4618      	mov	r0, r3
 8008018:	f000 f880 	bl	800811c <USBD_Get_USB_Status>
 800801c:	4603      	mov	r3, r0
 800801e:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 8008020:	7bbb      	ldrb	r3, [r7, #14]
}
 8008022:	4618      	mov	r0, r3
 8008024:	3710      	adds	r7, #16
 8008026:	46bd      	mov	sp, r7
 8008028:	bd80      	pop	{r7, pc}

0800802a <USBD_LL_Transmit>:
  * @param  pbuf: Pointer to data to be sent
  * @param  size: Data size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Transmit(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t *pbuf, uint16_t size)
{
 800802a:	b580      	push	{r7, lr}
 800802c:	b086      	sub	sp, #24
 800802e:	af00      	add	r7, sp, #0
 8008030:	60f8      	str	r0, [r7, #12]
 8008032:	607a      	str	r2, [r7, #4]
 8008034:	461a      	mov	r2, r3
 8008036:	460b      	mov	r3, r1
 8008038:	72fb      	strb	r3, [r7, #11]
 800803a:	4613      	mov	r3, r2
 800803c:	813b      	strh	r3, [r7, #8]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800803e:	2300      	movs	r3, #0
 8008040:	75fb      	strb	r3, [r7, #23]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8008042:	2300      	movs	r3, #0
 8008044:	75bb      	strb	r3, [r7, #22]

  hal_status = HAL_PCD_EP_Transmit(pdev->pData, ep_addr, pbuf, size);
 8008046:	68fb      	ldr	r3, [r7, #12]
 8008048:	f8d3 02c0 	ldr.w	r0, [r3, #704]	; 0x2c0
 800804c:	893b      	ldrh	r3, [r7, #8]
 800804e:	7af9      	ldrb	r1, [r7, #11]
 8008050:	687a      	ldr	r2, [r7, #4]
 8008052:	f7f9 ff7c 	bl	8001f4e <HAL_PCD_EP_Transmit>
 8008056:	4603      	mov	r3, r0
 8008058:	75fb      	strb	r3, [r7, #23]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800805a:	7dfb      	ldrb	r3, [r7, #23]
 800805c:	4618      	mov	r0, r3
 800805e:	f000 f85d 	bl	800811c <USBD_Get_USB_Status>
 8008062:	4603      	mov	r3, r0
 8008064:	75bb      	strb	r3, [r7, #22]

  return usb_status;
 8008066:	7dbb      	ldrb	r3, [r7, #22]
}
 8008068:	4618      	mov	r0, r3
 800806a:	3718      	adds	r7, #24
 800806c:	46bd      	mov	sp, r7
 800806e:	bd80      	pop	{r7, pc}

08008070 <USBD_LL_PrepareReceive>:
  * @param  pbuf: Pointer to data to be received
  * @param  size: Data size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_PrepareReceive(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t *pbuf, uint16_t size)
{
 8008070:	b580      	push	{r7, lr}
 8008072:	b086      	sub	sp, #24
 8008074:	af00      	add	r7, sp, #0
 8008076:	60f8      	str	r0, [r7, #12]
 8008078:	607a      	str	r2, [r7, #4]
 800807a:	461a      	mov	r2, r3
 800807c:	460b      	mov	r3, r1
 800807e:	72fb      	strb	r3, [r7, #11]
 8008080:	4613      	mov	r3, r2
 8008082:	813b      	strh	r3, [r7, #8]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8008084:	2300      	movs	r3, #0
 8008086:	75fb      	strb	r3, [r7, #23]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8008088:	2300      	movs	r3, #0
 800808a:	75bb      	strb	r3, [r7, #22]

  hal_status = HAL_PCD_EP_Receive(pdev->pData, ep_addr, pbuf, size);
 800808c:	68fb      	ldr	r3, [r7, #12]
 800808e:	f8d3 02c0 	ldr.w	r0, [r3, #704]	; 0x2c0
 8008092:	893b      	ldrh	r3, [r7, #8]
 8008094:	7af9      	ldrb	r1, [r7, #11]
 8008096:	687a      	ldr	r2, [r7, #4]
 8008098:	f7f9 ff05 	bl	8001ea6 <HAL_PCD_EP_Receive>
 800809c:	4603      	mov	r3, r0
 800809e:	75fb      	strb	r3, [r7, #23]

  usb_status =  USBD_Get_USB_Status(hal_status);
 80080a0:	7dfb      	ldrb	r3, [r7, #23]
 80080a2:	4618      	mov	r0, r3
 80080a4:	f000 f83a 	bl	800811c <USBD_Get_USB_Status>
 80080a8:	4603      	mov	r3, r0
 80080aa:	75bb      	strb	r3, [r7, #22]

  return usb_status;
 80080ac:	7dbb      	ldrb	r3, [r7, #22]
}
 80080ae:	4618      	mov	r0, r3
 80080b0:	3718      	adds	r7, #24
 80080b2:	46bd      	mov	sp, r7
 80080b4:	bd80      	pop	{r7, pc}

080080b6 <USBD_LL_GetRxDataSize>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval Recived Data Size
  */
uint32_t USBD_LL_GetRxDataSize(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 80080b6:	b580      	push	{r7, lr}
 80080b8:	b082      	sub	sp, #8
 80080ba:	af00      	add	r7, sp, #0
 80080bc:	6078      	str	r0, [r7, #4]
 80080be:	460b      	mov	r3, r1
 80080c0:	70fb      	strb	r3, [r7, #3]
  return HAL_PCD_EP_GetRxCount((PCD_HandleTypeDef*) pdev->pData, ep_addr);
 80080c2:	687b      	ldr	r3, [r7, #4]
 80080c4:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 80080c8:	78fa      	ldrb	r2, [r7, #3]
 80080ca:	4611      	mov	r1, r2
 80080cc:	4618      	mov	r0, r3
 80080ce:	f7f9 ff27 	bl	8001f20 <HAL_PCD_EP_GetRxCount>
 80080d2:	4603      	mov	r3, r0
}
 80080d4:	4618      	mov	r0, r3
 80080d6:	3708      	adds	r7, #8
 80080d8:	46bd      	mov	sp, r7
 80080da:	bd80      	pop	{r7, pc}

080080dc <USBD_static_malloc>:
  * @brief  Static single allocation.
  * @param  size: Size of allocated memory
  * @retval None
  */
void *USBD_static_malloc(uint32_t size)
{
 80080dc:	b480      	push	{r7}
 80080de:	b083      	sub	sp, #12
 80080e0:	af00      	add	r7, sp, #0
 80080e2:	6078      	str	r0, [r7, #4]
  static uint32_t mem[(sizeof(USBD_CDC_HandleTypeDef)/4)+1];/* On 32-bit boundary */
  return mem;
 80080e4:	4b02      	ldr	r3, [pc, #8]	; (80080f0 <USBD_static_malloc+0x14>)
}
 80080e6:	4618      	mov	r0, r3
 80080e8:	370c      	adds	r7, #12
 80080ea:	46bd      	mov	sp, r7
 80080ec:	bc80      	pop	{r7}
 80080ee:	4770      	bx	lr
 80080f0:	2000019c 	.word	0x2000019c

080080f4 <USBD_static_free>:
  * @brief  Dummy memory free
  * @param  p: Pointer to allocated  memory address
  * @retval None
  */
void USBD_static_free(void *p)
{
 80080f4:	b480      	push	{r7}
 80080f6:	b083      	sub	sp, #12
 80080f8:	af00      	add	r7, sp, #0
 80080fa:	6078      	str	r0, [r7, #4]

}
 80080fc:	bf00      	nop
 80080fe:	370c      	adds	r7, #12
 8008100:	46bd      	mov	sp, r7
 8008102:	bc80      	pop	{r7}
 8008104:	4770      	bx	lr

08008106 <HAL_PCDEx_SetConnectionState>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCDEx_SetConnectionState(PCD_HandleTypeDef *hpcd, uint8_t state)
#else
void HAL_PCDEx_SetConnectionState(PCD_HandleTypeDef *hpcd, uint8_t state)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8008106:	b480      	push	{r7}
 8008108:	b083      	sub	sp, #12
 800810a:	af00      	add	r7, sp, #0
 800810c:	6078      	str	r0, [r7, #4]
 800810e:	460b      	mov	r3, r1
 8008110:	70fb      	strb	r3, [r7, #3]
  {
    /* Configure High connection state. */

  }
  /* USER CODE END 6 */
}
 8008112:	bf00      	nop
 8008114:	370c      	adds	r7, #12
 8008116:	46bd      	mov	sp, r7
 8008118:	bc80      	pop	{r7}
 800811a:	4770      	bx	lr

0800811c <USBD_Get_USB_Status>:
  * @brief  Retuns the USB status depending on the HAL status:
  * @param  hal_status: HAL status
  * @retval USB status
  */
USBD_StatusTypeDef USBD_Get_USB_Status(HAL_StatusTypeDef hal_status)
{
 800811c:	b480      	push	{r7}
 800811e:	b085      	sub	sp, #20
 8008120:	af00      	add	r7, sp, #0
 8008122:	4603      	mov	r3, r0
 8008124:	71fb      	strb	r3, [r7, #7]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8008126:	2300      	movs	r3, #0
 8008128:	73fb      	strb	r3, [r7, #15]

  switch (hal_status)
 800812a:	79fb      	ldrb	r3, [r7, #7]
 800812c:	2b03      	cmp	r3, #3
 800812e:	d817      	bhi.n	8008160 <USBD_Get_USB_Status+0x44>
 8008130:	a201      	add	r2, pc, #4	; (adr r2, 8008138 <USBD_Get_USB_Status+0x1c>)
 8008132:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8008136:	bf00      	nop
 8008138:	08008149 	.word	0x08008149
 800813c:	0800814f 	.word	0x0800814f
 8008140:	08008155 	.word	0x08008155
 8008144:	0800815b 	.word	0x0800815b
  {
    case HAL_OK :
      usb_status = USBD_OK;
 8008148:	2300      	movs	r3, #0
 800814a:	73fb      	strb	r3, [r7, #15]
    break;
 800814c:	e00b      	b.n	8008166 <USBD_Get_USB_Status+0x4a>
    case HAL_ERROR :
      usb_status = USBD_FAIL;
 800814e:	2302      	movs	r3, #2
 8008150:	73fb      	strb	r3, [r7, #15]
    break;
 8008152:	e008      	b.n	8008166 <USBD_Get_USB_Status+0x4a>
    case HAL_BUSY :
      usb_status = USBD_BUSY;
 8008154:	2301      	movs	r3, #1
 8008156:	73fb      	strb	r3, [r7, #15]
    break;
 8008158:	e005      	b.n	8008166 <USBD_Get_USB_Status+0x4a>
    case HAL_TIMEOUT :
      usb_status = USBD_FAIL;
 800815a:	2302      	movs	r3, #2
 800815c:	73fb      	strb	r3, [r7, #15]
    break;
 800815e:	e002      	b.n	8008166 <USBD_Get_USB_Status+0x4a>
    default :
      usb_status = USBD_FAIL;
 8008160:	2302      	movs	r3, #2
 8008162:	73fb      	strb	r3, [r7, #15]
    break;
 8008164:	bf00      	nop
  }
  return usb_status;
 8008166:	7bfb      	ldrb	r3, [r7, #15]
}
 8008168:	4618      	mov	r0, r3
 800816a:	3714      	adds	r7, #20
 800816c:	46bd      	mov	sp, r7
 800816e:	bc80      	pop	{r7}
 8008170:	4770      	bx	lr
 8008172:	bf00      	nop

08008174 <__libc_init_array>:
 8008174:	b570      	push	{r4, r5, r6, lr}
 8008176:	2500      	movs	r5, #0
 8008178:	4e0c      	ldr	r6, [pc, #48]	; (80081ac <__libc_init_array+0x38>)
 800817a:	4c0d      	ldr	r4, [pc, #52]	; (80081b0 <__libc_init_array+0x3c>)
 800817c:	1ba4      	subs	r4, r4, r6
 800817e:	10a4      	asrs	r4, r4, #2
 8008180:	42a5      	cmp	r5, r4
 8008182:	d109      	bne.n	8008198 <__libc_init_array+0x24>
 8008184:	f000 f822 	bl	80081cc <_init>
 8008188:	2500      	movs	r5, #0
 800818a:	4e0a      	ldr	r6, [pc, #40]	; (80081b4 <__libc_init_array+0x40>)
 800818c:	4c0a      	ldr	r4, [pc, #40]	; (80081b8 <__libc_init_array+0x44>)
 800818e:	1ba4      	subs	r4, r4, r6
 8008190:	10a4      	asrs	r4, r4, #2
 8008192:	42a5      	cmp	r5, r4
 8008194:	d105      	bne.n	80081a2 <__libc_init_array+0x2e>
 8008196:	bd70      	pop	{r4, r5, r6, pc}
 8008198:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 800819c:	4798      	blx	r3
 800819e:	3501      	adds	r5, #1
 80081a0:	e7ee      	b.n	8008180 <__libc_init_array+0xc>
 80081a2:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 80081a6:	4798      	blx	r3
 80081a8:	3501      	adds	r5, #1
 80081aa:	e7f2      	b.n	8008192 <__libc_init_array+0x1e>
 80081ac:	08008250 	.word	0x08008250
 80081b0:	08008250 	.word	0x08008250
 80081b4:	08008250 	.word	0x08008250
 80081b8:	08008254 	.word	0x08008254

080081bc <memset>:
 80081bc:	4603      	mov	r3, r0
 80081be:	4402      	add	r2, r0
 80081c0:	4293      	cmp	r3, r2
 80081c2:	d100      	bne.n	80081c6 <memset+0xa>
 80081c4:	4770      	bx	lr
 80081c6:	f803 1b01 	strb.w	r1, [r3], #1
 80081ca:	e7f9      	b.n	80081c0 <memset+0x4>

080081cc <_init>:
 80081cc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80081ce:	bf00      	nop
 80081d0:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80081d2:	bc08      	pop	{r3}
 80081d4:	469e      	mov	lr, r3
 80081d6:	4770      	bx	lr

080081d8 <_fini>:
 80081d8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80081da:	bf00      	nop
 80081dc:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80081de:	bc08      	pop	{r3}
 80081e0:	469e      	mov	lr, r3
 80081e2:	4770      	bx	lr
