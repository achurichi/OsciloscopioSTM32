
OsciloscopioSTM32.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   0000010c  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         000080dc  0800010c  0800010c  0001010c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       0000006c  080081e8  080081e8  000181e8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08008254  08008254  0002017c  2**0
                  CONTENTS
  4 .ARM          00000000  08008254  08008254  0002017c  2**0
                  CONTENTS
  5 .preinit_array 00000000  08008254  08008254  0002017c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08008254  08008254  00018254  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08008258  08008258  00018258  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         0000017c  20000000  0800825c  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00003994  2000017c  080083d8  0002017c  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  20003b10  080083d8  00023b10  2**0
                  ALLOC
 11 .ARM.attributes 00000029  00000000  00000000  0002017c  2**0
                  CONTENTS, READONLY
 12 .debug_info   00016d1f  00000000  00000000  000201a5  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_abbrev 00003285  00000000  00000000  00036ec4  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_aranges 00001158  00000000  00000000  0003a150  2**3
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_ranges 00000fd0  00000000  00000000  0003b2a8  2**3
                  CONTENTS, READONLY, DEBUGGING
 16 .debug_macro  0001aef6  00000000  00000000  0003c278  2**0
                  CONTENTS, READONLY, DEBUGGING
 17 .debug_line   00010db0  00000000  00000000  0005716e  2**0
                  CONTENTS, READONLY, DEBUGGING
 18 .debug_str    00091c6e  00000000  00000000  00067f1e  2**0
                  CONTENTS, READONLY, DEBUGGING
 19 .comment      0000007b  00000000  00000000  000f9b8c  2**0
                  CONTENTS, READONLY
 20 .debug_frame  000046fc  00000000  00000000  000f9c08  2**2
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

0800010c <__do_global_dtors_aux>:
 800010c:	b510      	push	{r4, lr}
 800010e:	4c05      	ldr	r4, [pc, #20]	; (8000124 <__do_global_dtors_aux+0x18>)
 8000110:	7823      	ldrb	r3, [r4, #0]
 8000112:	b933      	cbnz	r3, 8000122 <__do_global_dtors_aux+0x16>
 8000114:	4b04      	ldr	r3, [pc, #16]	; (8000128 <__do_global_dtors_aux+0x1c>)
 8000116:	b113      	cbz	r3, 800011e <__do_global_dtors_aux+0x12>
 8000118:	4804      	ldr	r0, [pc, #16]	; (800012c <__do_global_dtors_aux+0x20>)
 800011a:	f3af 8000 	nop.w
 800011e:	2301      	movs	r3, #1
 8000120:	7023      	strb	r3, [r4, #0]
 8000122:	bd10      	pop	{r4, pc}
 8000124:	2000017c 	.word	0x2000017c
 8000128:	00000000 	.word	0x00000000
 800012c:	080081d0 	.word	0x080081d0

08000130 <frame_dummy>:
 8000130:	b508      	push	{r3, lr}
 8000132:	4b03      	ldr	r3, [pc, #12]	; (8000140 <frame_dummy+0x10>)
 8000134:	b11b      	cbz	r3, 800013e <frame_dummy+0xe>
 8000136:	4903      	ldr	r1, [pc, #12]	; (8000144 <frame_dummy+0x14>)
 8000138:	4803      	ldr	r0, [pc, #12]	; (8000148 <frame_dummy+0x18>)
 800013a:	f3af 8000 	nop.w
 800013e:	bd08      	pop	{r3, pc}
 8000140:	00000000 	.word	0x00000000
 8000144:	20000180 	.word	0x20000180
 8000148:	080081d0 	.word	0x080081d0

0800014c <HAL_TIM_PeriodElapsedCallback>:
static void MX_TIM2_Init(void);
/* USER CODE BEGIN PFP */

//char test[] = "\n";

void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim) {
 800014c:	b580      	push	{r7, lr}
 800014e:	b082      	sub	sp, #8
 8000150:	af00      	add	r7, sp, #0
 8000152:	6078      	str	r0, [r7, #4]

	HAL_GPIO_WritePin(GPIOC, GPIO_PIN_13, GPIO_PIN_RESET);
 8000154:	2200      	movs	r2, #0
 8000156:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 800015a:	4809      	ldr	r0, [pc, #36]	; (8000180 <HAL_TIM_PeriodElapsedCallback+0x34>)
 800015c:	f001 fb34 	bl	80017c8 <HAL_GPIO_WritePin>
	CDC_Transmit_FS((uint8_t *)adcSamples, NUM_SAMPLES_PLUS_ONE*2);
 8000160:	f242 7112 	movw	r1, #10002	; 0x2712
 8000164:	4807      	ldr	r0, [pc, #28]	; (8000184 <HAL_TIM_PeriodElapsedCallback+0x38>)
 8000166:	f007 fc29 	bl	80079bc <CDC_Transmit_FS>
//	HAL_UART_Transmit(&huart1, adcSamples, NUM_SAMPLES, 100);
//	HAL_UART_Transmit(&huart1, (uint8_t*)"\n", 1, 100);
//	CDC_Transmit_FS(test, strlen(test));
//	CDC_Transmit_FS((uint8_t*)"\n", 1);
	HAL_GPIO_WritePin(GPIOC, GPIO_PIN_13, GPIO_PIN_SET);
 800016a:	2201      	movs	r2, #1
 800016c:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8000170:	4803      	ldr	r0, [pc, #12]	; (8000180 <HAL_TIM_PeriodElapsedCallback+0x34>)
 8000172:	f001 fb29 	bl	80017c8 <HAL_GPIO_WritePin>

}
 8000176:	bf00      	nop
 8000178:	3708      	adds	r7, #8
 800017a:	46bd      	mov	sp, r7
 800017c:	bd80      	pop	{r7, pc}
 800017e:	bf00      	nop
 8000180:	40011000 	.word	0x40011000
 8000184:	20000430 	.word	0x20000430

08000188 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000188:	b580      	push	{r7, lr}
 800018a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN 1 */
	adcSamples[NUM_SAMPLES] = (uint16_t)'\n';
 800018c:	4b0e      	ldr	r3, [pc, #56]	; (80001c8 <main+0x40>)
 800018e:	f503 531c 	add.w	r3, r3, #9984	; 0x2700
 8000192:	3310      	adds	r3, #16
 8000194:	220a      	movs	r2, #10
 8000196:	801a      	strh	r2, [r3, #0]
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000198:	f000 faa2 	bl	80006e0 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 800019c:	f000 f81a 	bl	80001d4 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 80001a0:	f000 f91e 	bl	80003e0 <MX_GPIO_Init>
  MX_DMA_Init();
 80001a4:	f000 f8fe 	bl	80003a4 <MX_DMA_Init>
  MX_ADC1_Init();
 80001a8:	f000 f872 	bl	8000290 <MX_ADC1_Init>
  MX_TIM2_Init();
 80001ac:	f000 f8ae 	bl	800030c <MX_TIM2_Init>
  MX_USB_DEVICE_Init();
 80001b0:	f007 fb46 	bl	8007840 <MX_USB_DEVICE_Init>
  /* USER CODE BEGIN 2 */

  HAL_ADC_Start_DMA(&hadc1, (uint32_t *)adcSamples, NUM_SAMPLES);
 80001b4:	f241 3288 	movw	r2, #5000	; 0x1388
 80001b8:	4903      	ldr	r1, [pc, #12]	; (80001c8 <main+0x40>)
 80001ba:	4804      	ldr	r0, [pc, #16]	; (80001cc <main+0x44>)
 80001bc:	f000 fbca 	bl	8000954 <HAL_ADC_Start_DMA>
  HAL_TIM_Base_Start_IT(&htim2);
 80001c0:	4803      	ldr	r0, [pc, #12]	; (80001d0 <main+0x48>)
 80001c2:	f003 fb8d 	bl	80038e0 <HAL_TIM_Base_Start_IT>

  /* USER CODE END 2 */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
 80001c6:	e7fe      	b.n	80001c6 <main+0x3e>
 80001c8:	20000430 	.word	0x20000430
 80001cc:	200003bc 	.word	0x200003bc
 80001d0:	20002b44 	.word	0x20002b44

080001d4 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 80001d4:	b580      	push	{r7, lr}
 80001d6:	b094      	sub	sp, #80	; 0x50
 80001d8:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 80001da:	f107 0328 	add.w	r3, r7, #40	; 0x28
 80001de:	2228      	movs	r2, #40	; 0x28
 80001e0:	2100      	movs	r1, #0
 80001e2:	4618      	mov	r0, r3
 80001e4:	f007 ffec 	bl	80081c0 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 80001e8:	f107 0314 	add.w	r3, r7, #20
 80001ec:	2200      	movs	r2, #0
 80001ee:	601a      	str	r2, [r3, #0]
 80001f0:	605a      	str	r2, [r3, #4]
 80001f2:	609a      	str	r2, [r3, #8]
 80001f4:	60da      	str	r2, [r3, #12]
 80001f6:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 80001f8:	1d3b      	adds	r3, r7, #4
 80001fa:	2200      	movs	r2, #0
 80001fc:	601a      	str	r2, [r3, #0]
 80001fe:	605a      	str	r2, [r3, #4]
 8000200:	609a      	str	r2, [r3, #8]
 8000202:	60da      	str	r2, [r3, #12]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 8000204:	2301      	movs	r3, #1
 8000206:	62bb      	str	r3, [r7, #40]	; 0x28
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 8000208:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 800020c:	62fb      	str	r3, [r7, #44]	; 0x2c
  RCC_OscInitStruct.HSEPredivValue = RCC_HSE_PREDIV_DIV1;
 800020e:	2300      	movs	r3, #0
 8000210:	633b      	str	r3, [r7, #48]	; 0x30
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8000212:	2301      	movs	r3, #1
 8000214:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8000216:	2302      	movs	r3, #2
 8000218:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 800021a:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 800021e:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLMUL = RCC_PLL_MUL6;
 8000220:	f44f 1380 	mov.w	r3, #1048576	; 0x100000
 8000224:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000226:	f107 0328 	add.w	r3, r7, #40	; 0x28
 800022a:	4618      	mov	r0, r3
 800022c:	f002 fe68 	bl	8002f00 <HAL_RCC_OscConfig>
 8000230:	4603      	mov	r3, r0
 8000232:	2b00      	cmp	r3, #0
 8000234:	d001      	beq.n	800023a <SystemClock_Config+0x66>
  {
    Error_Handler();
 8000236:	f000 f91f 	bl	8000478 <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 800023a:	230f      	movs	r3, #15
 800023c:	617b      	str	r3, [r7, #20]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 800023e:	2302      	movs	r3, #2
 8000240:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000242:	2300      	movs	r3, #0
 8000244:	61fb      	str	r3, [r7, #28]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 8000246:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800024a:	623b      	str	r3, [r7, #32]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 800024c:	2300      	movs	r3, #0
 800024e:	627b      	str	r3, [r7, #36]	; 0x24

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_1) != HAL_OK)
 8000250:	f107 0314 	add.w	r3, r7, #20
 8000254:	2101      	movs	r1, #1
 8000256:	4618      	mov	r0, r3
 8000258:	f003 f8d2 	bl	8003400 <HAL_RCC_ClockConfig>
 800025c:	4603      	mov	r3, r0
 800025e:	2b00      	cmp	r3, #0
 8000260:	d001      	beq.n	8000266 <SystemClock_Config+0x92>
  {
    Error_Handler();
 8000262:	f000 f909 	bl	8000478 <Error_Handler>
  }
  PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_ADC|RCC_PERIPHCLK_USB;
 8000266:	2312      	movs	r3, #18
 8000268:	607b      	str	r3, [r7, #4]
  PeriphClkInit.AdcClockSelection = RCC_ADCPCLK2_DIV4;
 800026a:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 800026e:	60fb      	str	r3, [r7, #12]
  PeriphClkInit.UsbClockSelection = RCC_USBCLKSOURCE_PLL;
 8000270:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 8000274:	613b      	str	r3, [r7, #16]
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8000276:	1d3b      	adds	r3, r7, #4
 8000278:	4618      	mov	r0, r3
 800027a:	f003 fa2b 	bl	80036d4 <HAL_RCCEx_PeriphCLKConfig>
 800027e:	4603      	mov	r3, r0
 8000280:	2b00      	cmp	r3, #0
 8000282:	d001      	beq.n	8000288 <SystemClock_Config+0xb4>
  {
    Error_Handler();
 8000284:	f000 f8f8 	bl	8000478 <Error_Handler>
  }
}
 8000288:	bf00      	nop
 800028a:	3750      	adds	r7, #80	; 0x50
 800028c:	46bd      	mov	sp, r7
 800028e:	bd80      	pop	{r7, pc}

08000290 <MX_ADC1_Init>:
  * @brief ADC1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_ADC1_Init(void)
{
 8000290:	b580      	push	{r7, lr}
 8000292:	b084      	sub	sp, #16
 8000294:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC1_Init 0 */

  /* USER CODE END ADC1_Init 0 */

  ADC_ChannelConfTypeDef sConfig = {0};
 8000296:	1d3b      	adds	r3, r7, #4
 8000298:	2200      	movs	r2, #0
 800029a:	601a      	str	r2, [r3, #0]
 800029c:	605a      	str	r2, [r3, #4]
 800029e:	609a      	str	r2, [r3, #8]
  /* USER CODE BEGIN ADC1_Init 1 */

  /* USER CODE END ADC1_Init 1 */
  /** Common config
  */
  hadc1.Instance = ADC1;
 80002a0:	4b18      	ldr	r3, [pc, #96]	; (8000304 <MX_ADC1_Init+0x74>)
 80002a2:	4a19      	ldr	r2, [pc, #100]	; (8000308 <MX_ADC1_Init+0x78>)
 80002a4:	601a      	str	r2, [r3, #0]
  hadc1.Init.ScanConvMode = ADC_SCAN_DISABLE;
 80002a6:	4b17      	ldr	r3, [pc, #92]	; (8000304 <MX_ADC1_Init+0x74>)
 80002a8:	2200      	movs	r2, #0
 80002aa:	609a      	str	r2, [r3, #8]
  hadc1.Init.ContinuousConvMode = ENABLE;
 80002ac:	4b15      	ldr	r3, [pc, #84]	; (8000304 <MX_ADC1_Init+0x74>)
 80002ae:	2201      	movs	r2, #1
 80002b0:	731a      	strb	r2, [r3, #12]
  hadc1.Init.DiscontinuousConvMode = DISABLE;
 80002b2:	4b14      	ldr	r3, [pc, #80]	; (8000304 <MX_ADC1_Init+0x74>)
 80002b4:	2200      	movs	r2, #0
 80002b6:	751a      	strb	r2, [r3, #20]
  hadc1.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 80002b8:	4b12      	ldr	r3, [pc, #72]	; (8000304 <MX_ADC1_Init+0x74>)
 80002ba:	f44f 2260 	mov.w	r2, #917504	; 0xe0000
 80002be:	61da      	str	r2, [r3, #28]
  hadc1.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 80002c0:	4b10      	ldr	r3, [pc, #64]	; (8000304 <MX_ADC1_Init+0x74>)
 80002c2:	2200      	movs	r2, #0
 80002c4:	605a      	str	r2, [r3, #4]
  hadc1.Init.NbrOfConversion = 1;
 80002c6:	4b0f      	ldr	r3, [pc, #60]	; (8000304 <MX_ADC1_Init+0x74>)
 80002c8:	2201      	movs	r2, #1
 80002ca:	611a      	str	r2, [r3, #16]
  if (HAL_ADC_Init(&hadc1) != HAL_OK)
 80002cc:	480d      	ldr	r0, [pc, #52]	; (8000304 <MX_ADC1_Init+0x74>)
 80002ce:	f000 fa69 	bl	80007a4 <HAL_ADC_Init>
 80002d2:	4603      	mov	r3, r0
 80002d4:	2b00      	cmp	r3, #0
 80002d6:	d001      	beq.n	80002dc <MX_ADC1_Init+0x4c>
  {
    Error_Handler();
 80002d8:	f000 f8ce 	bl	8000478 <Error_Handler>
  }
  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_1;
 80002dc:	2301      	movs	r3, #1
 80002de:	607b      	str	r3, [r7, #4]
  sConfig.Rank = ADC_REGULAR_RANK_1;
 80002e0:	2301      	movs	r3, #1
 80002e2:	60bb      	str	r3, [r7, #8]
  sConfig.SamplingTime = ADC_SAMPLETIME_13CYCLES_5;
 80002e4:	2302      	movs	r3, #2
 80002e6:	60fb      	str	r3, [r7, #12]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 80002e8:	1d3b      	adds	r3, r7, #4
 80002ea:	4619      	mov	r1, r3
 80002ec:	4805      	ldr	r0, [pc, #20]	; (8000304 <MX_ADC1_Init+0x74>)
 80002ee:	f000 fc2b 	bl	8000b48 <HAL_ADC_ConfigChannel>
 80002f2:	4603      	mov	r3, r0
 80002f4:	2b00      	cmp	r3, #0
 80002f6:	d001      	beq.n	80002fc <MX_ADC1_Init+0x6c>
  {
    Error_Handler();
 80002f8:	f000 f8be 	bl	8000478 <Error_Handler>
  }
  /* USER CODE BEGIN ADC1_Init 2 */

  /* USER CODE END ADC1_Init 2 */

}
 80002fc:	bf00      	nop
 80002fe:	3710      	adds	r7, #16
 8000300:	46bd      	mov	sp, r7
 8000302:	bd80      	pop	{r7, pc}
 8000304:	200003bc 	.word	0x200003bc
 8000308:	40012400 	.word	0x40012400

0800030c <MX_TIM2_Init>:
  * @brief TIM2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM2_Init(void)
{
 800030c:	b580      	push	{r7, lr}
 800030e:	b086      	sub	sp, #24
 8000310:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM2_Init 0 */

  /* USER CODE END TIM2_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8000312:	f107 0308 	add.w	r3, r7, #8
 8000316:	2200      	movs	r2, #0
 8000318:	601a      	str	r2, [r3, #0]
 800031a:	605a      	str	r2, [r3, #4]
 800031c:	609a      	str	r2, [r3, #8]
 800031e:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8000320:	463b      	mov	r3, r7
 8000322:	2200      	movs	r2, #0
 8000324:	601a      	str	r2, [r3, #0]
 8000326:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM2_Init 1 */

  /* USER CODE END TIM2_Init 1 */
  htim2.Instance = TIM2;
 8000328:	4b1d      	ldr	r3, [pc, #116]	; (80003a0 <MX_TIM2_Init+0x94>)
 800032a:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 800032e:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 48000;
 8000330:	4b1b      	ldr	r3, [pc, #108]	; (80003a0 <MX_TIM2_Init+0x94>)
 8000332:	f64b 3280 	movw	r2, #48000	; 0xbb80
 8000336:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000338:	4b19      	ldr	r3, [pc, #100]	; (80003a0 <MX_TIM2_Init+0x94>)
 800033a:	2200      	movs	r2, #0
 800033c:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 39;
 800033e:	4b18      	ldr	r3, [pc, #96]	; (80003a0 <MX_TIM2_Init+0x94>)
 8000340:	2227      	movs	r2, #39	; 0x27
 8000342:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8000344:	4b16      	ldr	r3, [pc, #88]	; (80003a0 <MX_TIM2_Init+0x94>)
 8000346:	2200      	movs	r2, #0
 8000348:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_ENABLE;
 800034a:	4b15      	ldr	r3, [pc, #84]	; (80003a0 <MX_TIM2_Init+0x94>)
 800034c:	2280      	movs	r2, #128	; 0x80
 800034e:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim2) != HAL_OK)
 8000350:	4813      	ldr	r0, [pc, #76]	; (80003a0 <MX_TIM2_Init+0x94>)
 8000352:	f003 fa75 	bl	8003840 <HAL_TIM_Base_Init>
 8000356:	4603      	mov	r3, r0
 8000358:	2b00      	cmp	r3, #0
 800035a:	d001      	beq.n	8000360 <MX_TIM2_Init+0x54>
  {
    Error_Handler();
 800035c:	f000 f88c 	bl	8000478 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8000360:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8000364:	60bb      	str	r3, [r7, #8]
  if (HAL_TIM_ConfigClockSource(&htim2, &sClockSourceConfig) != HAL_OK)
 8000366:	f107 0308 	add.w	r3, r7, #8
 800036a:	4619      	mov	r1, r3
 800036c:	480c      	ldr	r0, [pc, #48]	; (80003a0 <MX_TIM2_Init+0x94>)
 800036e:	f003 fc11 	bl	8003b94 <HAL_TIM_ConfigClockSource>
 8000372:	4603      	mov	r3, r0
 8000374:	2b00      	cmp	r3, #0
 8000376:	d001      	beq.n	800037c <MX_TIM2_Init+0x70>
  {
    Error_Handler();
 8000378:	f000 f87e 	bl	8000478 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 800037c:	2300      	movs	r3, #0
 800037e:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8000380:	2300      	movs	r3, #0
 8000382:	607b      	str	r3, [r7, #4]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 8000384:	463b      	mov	r3, r7
 8000386:	4619      	mov	r1, r3
 8000388:	4805      	ldr	r0, [pc, #20]	; (80003a0 <MX_TIM2_Init+0x94>)
 800038a:	f003 fdd7 	bl	8003f3c <HAL_TIMEx_MasterConfigSynchronization>
 800038e:	4603      	mov	r3, r0
 8000390:	2b00      	cmp	r3, #0
 8000392:	d001      	beq.n	8000398 <MX_TIM2_Init+0x8c>
  {
    Error_Handler();
 8000394:	f000 f870 	bl	8000478 <Error_Handler>
  }
  /* USER CODE BEGIN TIM2_Init 2 */

  /* USER CODE END TIM2_Init 2 */

}
 8000398:	bf00      	nop
 800039a:	3718      	adds	r7, #24
 800039c:	46bd      	mov	sp, r7
 800039e:	bd80      	pop	{r7, pc}
 80003a0:	20002b44 	.word	0x20002b44

080003a4 <MX_DMA_Init>:

/**
  * Enable DMA controller clock
  */
static void MX_DMA_Init(void)
{
 80003a4:	b580      	push	{r7, lr}
 80003a6:	b082      	sub	sp, #8
 80003a8:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMA1_CLK_ENABLE();
 80003aa:	4b0c      	ldr	r3, [pc, #48]	; (80003dc <MX_DMA_Init+0x38>)
 80003ac:	695b      	ldr	r3, [r3, #20]
 80003ae:	4a0b      	ldr	r2, [pc, #44]	; (80003dc <MX_DMA_Init+0x38>)
 80003b0:	f043 0301 	orr.w	r3, r3, #1
 80003b4:	6153      	str	r3, [r2, #20]
 80003b6:	4b09      	ldr	r3, [pc, #36]	; (80003dc <MX_DMA_Init+0x38>)
 80003b8:	695b      	ldr	r3, [r3, #20]
 80003ba:	f003 0301 	and.w	r3, r3, #1
 80003be:	607b      	str	r3, [r7, #4]
 80003c0:	687b      	ldr	r3, [r7, #4]

  /* DMA interrupt init */
  /* DMA1_Channel1_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Channel1_IRQn, 0, 0);
 80003c2:	2200      	movs	r2, #0
 80003c4:	2100      	movs	r1, #0
 80003c6:	200b      	movs	r0, #11
 80003c8:	f000 fe7f 	bl	80010ca <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Channel1_IRQn);
 80003cc:	200b      	movs	r0, #11
 80003ce:	f000 fe98 	bl	8001102 <HAL_NVIC_EnableIRQ>

}
 80003d2:	bf00      	nop
 80003d4:	3708      	adds	r7, #8
 80003d6:	46bd      	mov	sp, r7
 80003d8:	bd80      	pop	{r7, pc}
 80003da:	bf00      	nop
 80003dc:	40021000 	.word	0x40021000

080003e0 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 80003e0:	b580      	push	{r7, lr}
 80003e2:	b088      	sub	sp, #32
 80003e4:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80003e6:	f107 0310 	add.w	r3, r7, #16
 80003ea:	2200      	movs	r2, #0
 80003ec:	601a      	str	r2, [r3, #0]
 80003ee:	605a      	str	r2, [r3, #4]
 80003f0:	609a      	str	r2, [r3, #8]
 80003f2:	60da      	str	r2, [r3, #12]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 80003f4:	4b1e      	ldr	r3, [pc, #120]	; (8000470 <MX_GPIO_Init+0x90>)
 80003f6:	699b      	ldr	r3, [r3, #24]
 80003f8:	4a1d      	ldr	r2, [pc, #116]	; (8000470 <MX_GPIO_Init+0x90>)
 80003fa:	f043 0310 	orr.w	r3, r3, #16
 80003fe:	6193      	str	r3, [r2, #24]
 8000400:	4b1b      	ldr	r3, [pc, #108]	; (8000470 <MX_GPIO_Init+0x90>)
 8000402:	699b      	ldr	r3, [r3, #24]
 8000404:	f003 0310 	and.w	r3, r3, #16
 8000408:	60fb      	str	r3, [r7, #12]
 800040a:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 800040c:	4b18      	ldr	r3, [pc, #96]	; (8000470 <MX_GPIO_Init+0x90>)
 800040e:	699b      	ldr	r3, [r3, #24]
 8000410:	4a17      	ldr	r2, [pc, #92]	; (8000470 <MX_GPIO_Init+0x90>)
 8000412:	f043 0320 	orr.w	r3, r3, #32
 8000416:	6193      	str	r3, [r2, #24]
 8000418:	4b15      	ldr	r3, [pc, #84]	; (8000470 <MX_GPIO_Init+0x90>)
 800041a:	699b      	ldr	r3, [r3, #24]
 800041c:	f003 0320 	and.w	r3, r3, #32
 8000420:	60bb      	str	r3, [r7, #8]
 8000422:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000424:	4b12      	ldr	r3, [pc, #72]	; (8000470 <MX_GPIO_Init+0x90>)
 8000426:	699b      	ldr	r3, [r3, #24]
 8000428:	4a11      	ldr	r2, [pc, #68]	; (8000470 <MX_GPIO_Init+0x90>)
 800042a:	f043 0304 	orr.w	r3, r3, #4
 800042e:	6193      	str	r3, [r2, #24]
 8000430:	4b0f      	ldr	r3, [pc, #60]	; (8000470 <MX_GPIO_Init+0x90>)
 8000432:	699b      	ldr	r3, [r3, #24]
 8000434:	f003 0304 	and.w	r3, r3, #4
 8000438:	607b      	str	r3, [r7, #4]
 800043a:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOC, GPIO_PIN_13, GPIO_PIN_RESET);
 800043c:	2200      	movs	r2, #0
 800043e:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8000442:	480c      	ldr	r0, [pc, #48]	; (8000474 <MX_GPIO_Init+0x94>)
 8000444:	f001 f9c0 	bl	80017c8 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : PC13 */
  GPIO_InitStruct.Pin = GPIO_PIN_13;
 8000448:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 800044c:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800044e:	2301      	movs	r3, #1
 8000450:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000452:	2300      	movs	r3, #0
 8000454:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8000456:	2303      	movs	r3, #3
 8000458:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 800045a:	f107 0310 	add.w	r3, r7, #16
 800045e:	4619      	mov	r1, r3
 8000460:	4804      	ldr	r0, [pc, #16]	; (8000474 <MX_GPIO_Init+0x94>)
 8000462:	f001 f857 	bl	8001514 <HAL_GPIO_Init>

}
 8000466:	bf00      	nop
 8000468:	3720      	adds	r7, #32
 800046a:	46bd      	mov	sp, r7
 800046c:	bd80      	pop	{r7, pc}
 800046e:	bf00      	nop
 8000470:	40021000 	.word	0x40021000
 8000474:	40011000 	.word	0x40011000

08000478 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000478:	b480      	push	{r7}
 800047a:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 800047c:	b672      	cpsid	i
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 800047e:	e7fe      	b.n	800047e <Error_Handler+0x6>

08000480 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000480:	b480      	push	{r7}
 8000482:	b085      	sub	sp, #20
 8000484:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_AFIO_CLK_ENABLE();
 8000486:	4b15      	ldr	r3, [pc, #84]	; (80004dc <HAL_MspInit+0x5c>)
 8000488:	699b      	ldr	r3, [r3, #24]
 800048a:	4a14      	ldr	r2, [pc, #80]	; (80004dc <HAL_MspInit+0x5c>)
 800048c:	f043 0301 	orr.w	r3, r3, #1
 8000490:	6193      	str	r3, [r2, #24]
 8000492:	4b12      	ldr	r3, [pc, #72]	; (80004dc <HAL_MspInit+0x5c>)
 8000494:	699b      	ldr	r3, [r3, #24]
 8000496:	f003 0301 	and.w	r3, r3, #1
 800049a:	60bb      	str	r3, [r7, #8]
 800049c:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_PWR_CLK_ENABLE();
 800049e:	4b0f      	ldr	r3, [pc, #60]	; (80004dc <HAL_MspInit+0x5c>)
 80004a0:	69db      	ldr	r3, [r3, #28]
 80004a2:	4a0e      	ldr	r2, [pc, #56]	; (80004dc <HAL_MspInit+0x5c>)
 80004a4:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80004a8:	61d3      	str	r3, [r2, #28]
 80004aa:	4b0c      	ldr	r3, [pc, #48]	; (80004dc <HAL_MspInit+0x5c>)
 80004ac:	69db      	ldr	r3, [r3, #28]
 80004ae:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80004b2:	607b      	str	r3, [r7, #4]
 80004b4:	687b      	ldr	r3, [r7, #4]

  /* System interrupt init*/

  /** NOJTAG: JTAG-DP Disabled and SW-DP Enabled
  */
  __HAL_AFIO_REMAP_SWJ_NOJTAG();
 80004b6:	4b0a      	ldr	r3, [pc, #40]	; (80004e0 <HAL_MspInit+0x60>)
 80004b8:	685b      	ldr	r3, [r3, #4]
 80004ba:	60fb      	str	r3, [r7, #12]
 80004bc:	68fb      	ldr	r3, [r7, #12]
 80004be:	f023 63e0 	bic.w	r3, r3, #117440512	; 0x7000000
 80004c2:	60fb      	str	r3, [r7, #12]
 80004c4:	68fb      	ldr	r3, [r7, #12]
 80004c6:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 80004ca:	60fb      	str	r3, [r7, #12]
 80004cc:	4a04      	ldr	r2, [pc, #16]	; (80004e0 <HAL_MspInit+0x60>)
 80004ce:	68fb      	ldr	r3, [r7, #12]
 80004d0:	6053      	str	r3, [r2, #4]

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 80004d2:	bf00      	nop
 80004d4:	3714      	adds	r7, #20
 80004d6:	46bd      	mov	sp, r7
 80004d8:	bc80      	pop	{r7}
 80004da:	4770      	bx	lr
 80004dc:	40021000 	.word	0x40021000
 80004e0:	40010000 	.word	0x40010000

080004e4 <HAL_ADC_MspInit>:
* This function configures the hardware resources used in this example
* @param hadc: ADC handle pointer
* @retval None
*/
void HAL_ADC_MspInit(ADC_HandleTypeDef* hadc)
{
 80004e4:	b580      	push	{r7, lr}
 80004e6:	b088      	sub	sp, #32
 80004e8:	af00      	add	r7, sp, #0
 80004ea:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80004ec:	f107 0310 	add.w	r3, r7, #16
 80004f0:	2200      	movs	r2, #0
 80004f2:	601a      	str	r2, [r3, #0]
 80004f4:	605a      	str	r2, [r3, #4]
 80004f6:	609a      	str	r2, [r3, #8]
 80004f8:	60da      	str	r2, [r3, #12]
  if(hadc->Instance==ADC1)
 80004fa:	687b      	ldr	r3, [r7, #4]
 80004fc:	681b      	ldr	r3, [r3, #0]
 80004fe:	4a28      	ldr	r2, [pc, #160]	; (80005a0 <HAL_ADC_MspInit+0xbc>)
 8000500:	4293      	cmp	r3, r2
 8000502:	d149      	bne.n	8000598 <HAL_ADC_MspInit+0xb4>
  {
  /* USER CODE BEGIN ADC1_MspInit 0 */

  /* USER CODE END ADC1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_ADC1_CLK_ENABLE();
 8000504:	4b27      	ldr	r3, [pc, #156]	; (80005a4 <HAL_ADC_MspInit+0xc0>)
 8000506:	699b      	ldr	r3, [r3, #24]
 8000508:	4a26      	ldr	r2, [pc, #152]	; (80005a4 <HAL_ADC_MspInit+0xc0>)
 800050a:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 800050e:	6193      	str	r3, [r2, #24]
 8000510:	4b24      	ldr	r3, [pc, #144]	; (80005a4 <HAL_ADC_MspInit+0xc0>)
 8000512:	699b      	ldr	r3, [r3, #24]
 8000514:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8000518:	60fb      	str	r3, [r7, #12]
 800051a:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 800051c:	4b21      	ldr	r3, [pc, #132]	; (80005a4 <HAL_ADC_MspInit+0xc0>)
 800051e:	699b      	ldr	r3, [r3, #24]
 8000520:	4a20      	ldr	r2, [pc, #128]	; (80005a4 <HAL_ADC_MspInit+0xc0>)
 8000522:	f043 0304 	orr.w	r3, r3, #4
 8000526:	6193      	str	r3, [r2, #24]
 8000528:	4b1e      	ldr	r3, [pc, #120]	; (80005a4 <HAL_ADC_MspInit+0xc0>)
 800052a:	699b      	ldr	r3, [r3, #24]
 800052c:	f003 0304 	and.w	r3, r3, #4
 8000530:	60bb      	str	r3, [r7, #8]
 8000532:	68bb      	ldr	r3, [r7, #8]
    /**ADC1 GPIO Configuration
    PA1     ------> ADC1_IN1
    */
    GPIO_InitStruct.Pin = GPIO_PIN_1;
 8000534:	2302      	movs	r3, #2
 8000536:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8000538:	2303      	movs	r3, #3
 800053a:	617b      	str	r3, [r7, #20]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800053c:	f107 0310 	add.w	r3, r7, #16
 8000540:	4619      	mov	r1, r3
 8000542:	4819      	ldr	r0, [pc, #100]	; (80005a8 <HAL_ADC_MspInit+0xc4>)
 8000544:	f000 ffe6 	bl	8001514 <HAL_GPIO_Init>

    /* ADC1 DMA Init */
    /* ADC1 Init */
    hdma_adc1.Instance = DMA1_Channel1;
 8000548:	4b18      	ldr	r3, [pc, #96]	; (80005ac <HAL_ADC_MspInit+0xc8>)
 800054a:	4a19      	ldr	r2, [pc, #100]	; (80005b0 <HAL_ADC_MspInit+0xcc>)
 800054c:	601a      	str	r2, [r3, #0]
    hdma_adc1.Init.Direction = DMA_PERIPH_TO_MEMORY;
 800054e:	4b17      	ldr	r3, [pc, #92]	; (80005ac <HAL_ADC_MspInit+0xc8>)
 8000550:	2200      	movs	r2, #0
 8000552:	605a      	str	r2, [r3, #4]
    hdma_adc1.Init.PeriphInc = DMA_PINC_DISABLE;
 8000554:	4b15      	ldr	r3, [pc, #84]	; (80005ac <HAL_ADC_MspInit+0xc8>)
 8000556:	2200      	movs	r2, #0
 8000558:	609a      	str	r2, [r3, #8]
    hdma_adc1.Init.MemInc = DMA_MINC_ENABLE;
 800055a:	4b14      	ldr	r3, [pc, #80]	; (80005ac <HAL_ADC_MspInit+0xc8>)
 800055c:	2280      	movs	r2, #128	; 0x80
 800055e:	60da      	str	r2, [r3, #12]
    hdma_adc1.Init.PeriphDataAlignment = DMA_PDATAALIGN_HALFWORD;
 8000560:	4b12      	ldr	r3, [pc, #72]	; (80005ac <HAL_ADC_MspInit+0xc8>)
 8000562:	f44f 7280 	mov.w	r2, #256	; 0x100
 8000566:	611a      	str	r2, [r3, #16]
    hdma_adc1.Init.MemDataAlignment = DMA_MDATAALIGN_HALFWORD;
 8000568:	4b10      	ldr	r3, [pc, #64]	; (80005ac <HAL_ADC_MspInit+0xc8>)
 800056a:	f44f 6280 	mov.w	r2, #1024	; 0x400
 800056e:	615a      	str	r2, [r3, #20]
    hdma_adc1.Init.Mode = DMA_CIRCULAR;
 8000570:	4b0e      	ldr	r3, [pc, #56]	; (80005ac <HAL_ADC_MspInit+0xc8>)
 8000572:	2220      	movs	r2, #32
 8000574:	619a      	str	r2, [r3, #24]
    hdma_adc1.Init.Priority = DMA_PRIORITY_LOW;
 8000576:	4b0d      	ldr	r3, [pc, #52]	; (80005ac <HAL_ADC_MspInit+0xc8>)
 8000578:	2200      	movs	r2, #0
 800057a:	61da      	str	r2, [r3, #28]
    if (HAL_DMA_Init(&hdma_adc1) != HAL_OK)
 800057c:	480b      	ldr	r0, [pc, #44]	; (80005ac <HAL_ADC_MspInit+0xc8>)
 800057e:	f000 fddb 	bl	8001138 <HAL_DMA_Init>
 8000582:	4603      	mov	r3, r0
 8000584:	2b00      	cmp	r3, #0
 8000586:	d001      	beq.n	800058c <HAL_ADC_MspInit+0xa8>
    {
      Error_Handler();
 8000588:	f7ff ff76 	bl	8000478 <Error_Handler>
    }

    __HAL_LINKDMA(hadc,DMA_Handle,hdma_adc1);
 800058c:	687b      	ldr	r3, [r7, #4]
 800058e:	4a07      	ldr	r2, [pc, #28]	; (80005ac <HAL_ADC_MspInit+0xc8>)
 8000590:	621a      	str	r2, [r3, #32]
 8000592:	4a06      	ldr	r2, [pc, #24]	; (80005ac <HAL_ADC_MspInit+0xc8>)
 8000594:	687b      	ldr	r3, [r7, #4]
 8000596:	6253      	str	r3, [r2, #36]	; 0x24
  /* USER CODE BEGIN ADC1_MspInit 1 */

  /* USER CODE END ADC1_MspInit 1 */
  }

}
 8000598:	bf00      	nop
 800059a:	3720      	adds	r7, #32
 800059c:	46bd      	mov	sp, r7
 800059e:	bd80      	pop	{r7, pc}
 80005a0:	40012400 	.word	0x40012400
 80005a4:	40021000 	.word	0x40021000
 80005a8:	40010800 	.word	0x40010800
 80005ac:	200003ec 	.word	0x200003ec
 80005b0:	40020008 	.word	0x40020008

080005b4 <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 80005b4:	b580      	push	{r7, lr}
 80005b6:	b084      	sub	sp, #16
 80005b8:	af00      	add	r7, sp, #0
 80005ba:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM2)
 80005bc:	687b      	ldr	r3, [r7, #4]
 80005be:	681b      	ldr	r3, [r3, #0]
 80005c0:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80005c4:	d113      	bne.n	80005ee <HAL_TIM_Base_MspInit+0x3a>
  {
  /* USER CODE BEGIN TIM2_MspInit 0 */

  /* USER CODE END TIM2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM2_CLK_ENABLE();
 80005c6:	4b0c      	ldr	r3, [pc, #48]	; (80005f8 <HAL_TIM_Base_MspInit+0x44>)
 80005c8:	69db      	ldr	r3, [r3, #28]
 80005ca:	4a0b      	ldr	r2, [pc, #44]	; (80005f8 <HAL_TIM_Base_MspInit+0x44>)
 80005cc:	f043 0301 	orr.w	r3, r3, #1
 80005d0:	61d3      	str	r3, [r2, #28]
 80005d2:	4b09      	ldr	r3, [pc, #36]	; (80005f8 <HAL_TIM_Base_MspInit+0x44>)
 80005d4:	69db      	ldr	r3, [r3, #28]
 80005d6:	f003 0301 	and.w	r3, r3, #1
 80005da:	60fb      	str	r3, [r7, #12]
 80005dc:	68fb      	ldr	r3, [r7, #12]
    /* TIM2 interrupt Init */
    HAL_NVIC_SetPriority(TIM2_IRQn, 0, 0);
 80005de:	2200      	movs	r2, #0
 80005e0:	2100      	movs	r1, #0
 80005e2:	201c      	movs	r0, #28
 80005e4:	f000 fd71 	bl	80010ca <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM2_IRQn);
 80005e8:	201c      	movs	r0, #28
 80005ea:	f000 fd8a 	bl	8001102 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN TIM2_MspInit 1 */

  /* USER CODE END TIM2_MspInit 1 */
  }

}
 80005ee:	bf00      	nop
 80005f0:	3710      	adds	r7, #16
 80005f2:	46bd      	mov	sp, r7
 80005f4:	bd80      	pop	{r7, pc}
 80005f6:	bf00      	nop
 80005f8:	40021000 	.word	0x40021000

080005fc <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 80005fc:	b480      	push	{r7}
 80005fe:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8000600:	e7fe      	b.n	8000600 <NMI_Handler+0x4>

08000602 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8000602:	b480      	push	{r7}
 8000604:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8000606:	e7fe      	b.n	8000606 <HardFault_Handler+0x4>

08000608 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8000608:	b480      	push	{r7}
 800060a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 800060c:	e7fe      	b.n	800060c <MemManage_Handler+0x4>

0800060e <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 800060e:	b480      	push	{r7}
 8000610:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8000612:	e7fe      	b.n	8000612 <BusFault_Handler+0x4>

08000614 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8000614:	b480      	push	{r7}
 8000616:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8000618:	e7fe      	b.n	8000618 <UsageFault_Handler+0x4>

0800061a <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 800061a:	b480      	push	{r7}
 800061c:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 800061e:	bf00      	nop
 8000620:	46bd      	mov	sp, r7
 8000622:	bc80      	pop	{r7}
 8000624:	4770      	bx	lr

08000626 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8000626:	b480      	push	{r7}
 8000628:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 800062a:	bf00      	nop
 800062c:	46bd      	mov	sp, r7
 800062e:	bc80      	pop	{r7}
 8000630:	4770      	bx	lr

08000632 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8000632:	b480      	push	{r7}
 8000634:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8000636:	bf00      	nop
 8000638:	46bd      	mov	sp, r7
 800063a:	bc80      	pop	{r7}
 800063c:	4770      	bx	lr

0800063e <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 800063e:	b580      	push	{r7, lr}
 8000640:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8000642:	f000 f893 	bl	800076c <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8000646:	bf00      	nop
 8000648:	bd80      	pop	{r7, pc}
	...

0800064c <DMA1_Channel1_IRQHandler>:

/**
  * @brief This function handles DMA1 channel1 global interrupt.
  */
void DMA1_Channel1_IRQHandler(void)
{
 800064c:	b580      	push	{r7, lr}
 800064e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Channel1_IRQn 0 */

  /* USER CODE END DMA1_Channel1_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_adc1);
 8000650:	4802      	ldr	r0, [pc, #8]	; (800065c <DMA1_Channel1_IRQHandler+0x10>)
 8000652:	f000 fe2b 	bl	80012ac <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Channel1_IRQn 1 */

  /* USER CODE END DMA1_Channel1_IRQn 1 */
}
 8000656:	bf00      	nop
 8000658:	bd80      	pop	{r7, pc}
 800065a:	bf00      	nop
 800065c:	200003ec 	.word	0x200003ec

08000660 <USB_LP_CAN1_RX0_IRQHandler>:

/**
  * @brief This function handles USB low priority or CAN RX0 interrupts.
  */
void USB_LP_CAN1_RX0_IRQHandler(void)
{
 8000660:	b580      	push	{r7, lr}
 8000662:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USB_LP_CAN1_RX0_IRQn 0 */

  /* USER CODE END USB_LP_CAN1_RX0_IRQn 0 */
  HAL_PCD_IRQHandler(&hpcd_USB_FS);
 8000664:	4802      	ldr	r0, [pc, #8]	; (8000670 <USB_LP_CAN1_RX0_IRQHandler+0x10>)
 8000666:	f001 f9f8 	bl	8001a5a <HAL_PCD_IRQHandler>
  /* USER CODE BEGIN USB_LP_CAN1_RX0_IRQn 1 */

  /* USER CODE END USB_LP_CAN1_RX0_IRQn 1 */
}
 800066a:	bf00      	nop
 800066c:	bd80      	pop	{r7, pc}
 800066e:	bf00      	nop
 8000670:	20003824 	.word	0x20003824

08000674 <TIM2_IRQHandler>:

/**
  * @brief This function handles TIM2 global interrupt.
  */
void TIM2_IRQHandler(void)
{
 8000674:	b580      	push	{r7, lr}
 8000676:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM2_IRQn 0 */

  /* USER CODE END TIM2_IRQn 0 */
  HAL_TIM_IRQHandler(&htim2);
 8000678:	4802      	ldr	r0, [pc, #8]	; (8000684 <TIM2_IRQHandler+0x10>)
 800067a:	f003 f983 	bl	8003984 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM2_IRQn 1 */

  /* USER CODE END TIM2_IRQn 1 */
}
 800067e:	bf00      	nop
 8000680:	bd80      	pop	{r7, pc}
 8000682:	bf00      	nop
 8000684:	20002b44 	.word	0x20002b44

08000688 <SystemInit>:
  * @note   This function should be used only after reset.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 8000688:	b480      	push	{r7}
 800068a:	af00      	add	r7, sp, #0

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM. */
#endif /* USER_VECT_TAB_ADDRESS */
}
 800068c:	bf00      	nop
 800068e:	46bd      	mov	sp, r7
 8000690:	bc80      	pop	{r7}
 8000692:	4770      	bx	lr

08000694 <Reset_Handler>:
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:

/* Copy the data segment initializers from flash to SRAM */
  movs r1, #0
 8000694:	2100      	movs	r1, #0
  b LoopCopyDataInit
 8000696:	e003      	b.n	80006a0 <LoopCopyDataInit>

08000698 <CopyDataInit>:

CopyDataInit:
  ldr r3, =_sidata
 8000698:	4b0b      	ldr	r3, [pc, #44]	; (80006c8 <LoopFillZerobss+0x14>)
  ldr r3, [r3, r1]
 800069a:	585b      	ldr	r3, [r3, r1]
  str r3, [r0, r1]
 800069c:	5043      	str	r3, [r0, r1]
  adds r1, r1, #4
 800069e:	3104      	adds	r1, #4

080006a0 <LoopCopyDataInit>:

LoopCopyDataInit:
  ldr r0, =_sdata
 80006a0:	480a      	ldr	r0, [pc, #40]	; (80006cc <LoopFillZerobss+0x18>)
  ldr r3, =_edata
 80006a2:	4b0b      	ldr	r3, [pc, #44]	; (80006d0 <LoopFillZerobss+0x1c>)
  adds r2, r0, r1
 80006a4:	1842      	adds	r2, r0, r1
  cmp r2, r3
 80006a6:	429a      	cmp	r2, r3
  bcc CopyDataInit
 80006a8:	d3f6      	bcc.n	8000698 <CopyDataInit>
  ldr r2, =_sbss
 80006aa:	4a0a      	ldr	r2, [pc, #40]	; (80006d4 <LoopFillZerobss+0x20>)
  b LoopFillZerobss
 80006ac:	e002      	b.n	80006b4 <LoopFillZerobss>

080006ae <FillZerobss>:
/* Zero fill the bss segment. */
FillZerobss:
  movs r3, #0
 80006ae:	2300      	movs	r3, #0
  str r3, [r2], #4
 80006b0:	f842 3b04 	str.w	r3, [r2], #4

080006b4 <LoopFillZerobss>:

LoopFillZerobss:
  ldr r3, = _ebss
 80006b4:	4b08      	ldr	r3, [pc, #32]	; (80006d8 <LoopFillZerobss+0x24>)
  cmp r2, r3
 80006b6:	429a      	cmp	r2, r3
  bcc FillZerobss
 80006b8:	d3f9      	bcc.n	80006ae <FillZerobss>

/* Call the clock system intitialization function.*/
    bl  SystemInit
 80006ba:	f7ff ffe5 	bl	8000688 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 80006be:	f007 fd5b 	bl	8008178 <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 80006c2:	f7ff fd61 	bl	8000188 <main>
  bx lr
 80006c6:	4770      	bx	lr
  ldr r3, =_sidata
 80006c8:	0800825c 	.word	0x0800825c
  ldr r0, =_sdata
 80006cc:	20000000 	.word	0x20000000
  ldr r3, =_edata
 80006d0:	2000017c 	.word	0x2000017c
  ldr r2, =_sbss
 80006d4:	2000017c 	.word	0x2000017c
  ldr r3, = _ebss
 80006d8:	20003b10 	.word	0x20003b10

080006dc <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 80006dc:	e7fe      	b.n	80006dc <ADC1_2_IRQHandler>
	...

080006e0 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 80006e0:	b580      	push	{r7, lr}
 80006e2:	af00      	add	r7, sp, #0
    defined(STM32F102x6) || defined(STM32F102xB) || \
    defined(STM32F103x6) || defined(STM32F103xB) || defined(STM32F103xE) || defined(STM32F103xG) || \
    defined(STM32F105xC) || defined(STM32F107xC)

  /* Prefetch buffer is not available on value line devices */
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 80006e4:	4b08      	ldr	r3, [pc, #32]	; (8000708 <HAL_Init+0x28>)
 80006e6:	681b      	ldr	r3, [r3, #0]
 80006e8:	4a07      	ldr	r2, [pc, #28]	; (8000708 <HAL_Init+0x28>)
 80006ea:	f043 0310 	orr.w	r3, r3, #16
 80006ee:	6013      	str	r3, [r2, #0]
#endif
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 80006f0:	2003      	movs	r0, #3
 80006f2:	f000 fcdf 	bl	80010b4 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 80006f6:	2000      	movs	r0, #0
 80006f8:	f000 f808 	bl	800070c <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 80006fc:	f7ff fec0 	bl	8000480 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8000700:	2300      	movs	r3, #0
}
 8000702:	4618      	mov	r0, r3
 8000704:	bd80      	pop	{r7, pc}
 8000706:	bf00      	nop
 8000708:	40022000 	.word	0x40022000

0800070c <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 800070c:	b580      	push	{r7, lr}
 800070e:	b082      	sub	sp, #8
 8000710:	af00      	add	r7, sp, #0
 8000712:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8000714:	4b12      	ldr	r3, [pc, #72]	; (8000760 <HAL_InitTick+0x54>)
 8000716:	681a      	ldr	r2, [r3, #0]
 8000718:	4b12      	ldr	r3, [pc, #72]	; (8000764 <HAL_InitTick+0x58>)
 800071a:	781b      	ldrb	r3, [r3, #0]
 800071c:	4619      	mov	r1, r3
 800071e:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8000722:	fbb3 f3f1 	udiv	r3, r3, r1
 8000726:	fbb2 f3f3 	udiv	r3, r2, r3
 800072a:	4618      	mov	r0, r3
 800072c:	f000 fcf7 	bl	800111e <HAL_SYSTICK_Config>
 8000730:	4603      	mov	r3, r0
 8000732:	2b00      	cmp	r3, #0
 8000734:	d001      	beq.n	800073a <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8000736:	2301      	movs	r3, #1
 8000738:	e00e      	b.n	8000758 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 800073a:	687b      	ldr	r3, [r7, #4]
 800073c:	2b0f      	cmp	r3, #15
 800073e:	d80a      	bhi.n	8000756 <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8000740:	2200      	movs	r2, #0
 8000742:	6879      	ldr	r1, [r7, #4]
 8000744:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8000748:	f000 fcbf 	bl	80010ca <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 800074c:	4a06      	ldr	r2, [pc, #24]	; (8000768 <HAL_InitTick+0x5c>)
 800074e:	687b      	ldr	r3, [r7, #4]
 8000750:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8000752:	2300      	movs	r3, #0
 8000754:	e000      	b.n	8000758 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8000756:	2301      	movs	r3, #1
}
 8000758:	4618      	mov	r0, r3
 800075a:	3708      	adds	r7, #8
 800075c:	46bd      	mov	sp, r7
 800075e:	bd80      	pop	{r7, pc}
 8000760:	20000000 	.word	0x20000000
 8000764:	20000008 	.word	0x20000008
 8000768:	20000004 	.word	0x20000004

0800076c <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 800076c:	b480      	push	{r7}
 800076e:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8000770:	4b05      	ldr	r3, [pc, #20]	; (8000788 <HAL_IncTick+0x1c>)
 8000772:	781b      	ldrb	r3, [r3, #0]
 8000774:	461a      	mov	r2, r3
 8000776:	4b05      	ldr	r3, [pc, #20]	; (800078c <HAL_IncTick+0x20>)
 8000778:	681b      	ldr	r3, [r3, #0]
 800077a:	4413      	add	r3, r2
 800077c:	4a03      	ldr	r2, [pc, #12]	; (800078c <HAL_IncTick+0x20>)
 800077e:	6013      	str	r3, [r2, #0]
}
 8000780:	bf00      	nop
 8000782:	46bd      	mov	sp, r7
 8000784:	bc80      	pop	{r7}
 8000786:	4770      	bx	lr
 8000788:	20000008 	.word	0x20000008
 800078c:	20002b8c 	.word	0x20002b8c

08000790 <HAL_GetTick>:
  * @note  This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8000790:	b480      	push	{r7}
 8000792:	af00      	add	r7, sp, #0
  return uwTick;
 8000794:	4b02      	ldr	r3, [pc, #8]	; (80007a0 <HAL_GetTick+0x10>)
 8000796:	681b      	ldr	r3, [r3, #0]
}
 8000798:	4618      	mov	r0, r3
 800079a:	46bd      	mov	sp, r7
 800079c:	bc80      	pop	{r7}
 800079e:	4770      	bx	lr
 80007a0:	20002b8c 	.word	0x20002b8c

080007a4 <HAL_ADC_Init>:
  *         of structure "ADC_InitTypeDef".
  * @param  hadc: ADC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef* hadc)
{
 80007a4:	b580      	push	{r7, lr}
 80007a6:	b086      	sub	sp, #24
 80007a8:	af00      	add	r7, sp, #0
 80007aa:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 80007ac:	2300      	movs	r3, #0
 80007ae:	75fb      	strb	r3, [r7, #23]
  uint32_t tmp_cr1 = 0U;
 80007b0:	2300      	movs	r3, #0
 80007b2:	613b      	str	r3, [r7, #16]
  uint32_t tmp_cr2 = 0U;
 80007b4:	2300      	movs	r3, #0
 80007b6:	60bb      	str	r3, [r7, #8]
  uint32_t tmp_sqr1 = 0U;
 80007b8:	2300      	movs	r3, #0
 80007ba:	60fb      	str	r3, [r7, #12]
  
  /* Check ADC handle */
  if(hadc == NULL)
 80007bc:	687b      	ldr	r3, [r7, #4]
 80007be:	2b00      	cmp	r3, #0
 80007c0:	d101      	bne.n	80007c6 <HAL_ADC_Init+0x22>
  {
    return HAL_ERROR;
 80007c2:	2301      	movs	r3, #1
 80007c4:	e0be      	b.n	8000944 <HAL_ADC_Init+0x1a0>
  assert_param(IS_ADC_DATA_ALIGN(hadc->Init.DataAlign));
  assert_param(IS_ADC_SCAN_MODE(hadc->Init.ScanConvMode));
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.ContinuousConvMode));
  assert_param(IS_ADC_EXTTRIG(hadc->Init.ExternalTrigConv));
  
  if(hadc->Init.ScanConvMode != ADC_SCAN_DISABLE)
 80007c6:	687b      	ldr	r3, [r7, #4]
 80007c8:	689b      	ldr	r3, [r3, #8]
 80007ca:	2b00      	cmp	r3, #0
  /* Refer to header of this file for more details on clock enabling          */
  /* procedure.                                                               */

  /* Actions performed only if ADC is coming from state reset:                */
  /* - Initialization of ADC MSP                                              */
  if (hadc->State == HAL_ADC_STATE_RESET)
 80007cc:	687b      	ldr	r3, [r7, #4]
 80007ce:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80007d0:	2b00      	cmp	r3, #0
 80007d2:	d109      	bne.n	80007e8 <HAL_ADC_Init+0x44>
  {
    /* Initialize ADC error code */
    ADC_CLEAR_ERRORCODE(hadc);
 80007d4:	687b      	ldr	r3, [r7, #4]
 80007d6:	2200      	movs	r2, #0
 80007d8:	62da      	str	r2, [r3, #44]	; 0x2c
    
    /* Allocate lock resource and initialize it */
    hadc->Lock = HAL_UNLOCKED;
 80007da:	687b      	ldr	r3, [r7, #4]
 80007dc:	2200      	movs	r2, #0
 80007de:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
    
    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 80007e2:	6878      	ldr	r0, [r7, #4]
 80007e4:	f7ff fe7e 	bl	80004e4 <HAL_ADC_MspInit>
  /* Stop potential conversion on going, on regular and injected groups */
  /* Disable ADC peripheral */
  /* Note: In case of ADC already enabled, precaution to not launch an        */
  /*       unwanted conversion while modifying register CR2 by writing 1 to   */
  /*       bit ADON.                                                          */
  tmp_hal_status = ADC_ConversionStop_Disable(hadc);
 80007e8:	6878      	ldr	r0, [r7, #4]
 80007ea:	f000 faf7 	bl	8000ddc <ADC_ConversionStop_Disable>
 80007ee:	4603      	mov	r3, r0
 80007f0:	75fb      	strb	r3, [r7, #23]
  
  
  /* Configuration of ADC parameters if previous preliminary actions are      */ 
  /* correctly completed.                                                     */
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL) &&
 80007f2:	687b      	ldr	r3, [r7, #4]
 80007f4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80007f6:	f003 0310 	and.w	r3, r3, #16
 80007fa:	2b00      	cmp	r3, #0
 80007fc:	f040 8099 	bne.w	8000932 <HAL_ADC_Init+0x18e>
 8000800:	7dfb      	ldrb	r3, [r7, #23]
 8000802:	2b00      	cmp	r3, #0
 8000804:	f040 8095 	bne.w	8000932 <HAL_ADC_Init+0x18e>
      (tmp_hal_status == HAL_OK)                                  )
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8000808:	687b      	ldr	r3, [r7, #4]
 800080a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800080c:	f423 5388 	bic.w	r3, r3, #4352	; 0x1100
 8000810:	f023 0302 	bic.w	r3, r3, #2
 8000814:	f043 0202 	orr.w	r2, r3, #2
 8000818:	687b      	ldr	r3, [r7, #4]
 800081a:	629a      	str	r2, [r3, #40]	; 0x28
    /*  - continuous conversion mode                                          */
    /* Note: External trigger polarity (ADC_CR2_EXTTRIG) is set into          */
    /*       HAL_ADC_Start_xxx functions because if set in this function,     */
    /*       a conversion on injected group would start a conversion also on  */
    /*       regular group after ADC enabling.                                */
    tmp_cr2 |= (hadc->Init.DataAlign                                          |
 800081c:	687b      	ldr	r3, [r7, #4]
 800081e:	685a      	ldr	r2, [r3, #4]
                ADC_CFGR_EXTSEL(hadc, hadc->Init.ExternalTrigConv)            |
 8000820:	687b      	ldr	r3, [r7, #4]
 8000822:	69db      	ldr	r3, [r3, #28]
    tmp_cr2 |= (hadc->Init.DataAlign                                          |
 8000824:	431a      	orrs	r2, r3
                ADC_CR2_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)   );
 8000826:	687b      	ldr	r3, [r7, #4]
 8000828:	7b1b      	ldrb	r3, [r3, #12]
 800082a:	005b      	lsls	r3, r3, #1
                ADC_CFGR_EXTSEL(hadc, hadc->Init.ExternalTrigConv)            |
 800082c:	4313      	orrs	r3, r2
    tmp_cr2 |= (hadc->Init.DataAlign                                          |
 800082e:	68ba      	ldr	r2, [r7, #8]
 8000830:	4313      	orrs	r3, r2
 8000832:	60bb      	str	r3, [r7, #8]

    /* Configuration of ADC:                                                  */
    /*  - scan mode                                                           */
    /*  - discontinuous mode disable/enable                                   */
    /*  - discontinuous mode number of conversions                            */
    tmp_cr1 |= (ADC_CR1_SCAN_SET(hadc->Init.ScanConvMode));
 8000834:	687b      	ldr	r3, [r7, #4]
 8000836:	689b      	ldr	r3, [r3, #8]
 8000838:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800083c:	d003      	beq.n	8000846 <HAL_ADC_Init+0xa2>
 800083e:	687b      	ldr	r3, [r7, #4]
 8000840:	689b      	ldr	r3, [r3, #8]
 8000842:	2b01      	cmp	r3, #1
 8000844:	d102      	bne.n	800084c <HAL_ADC_Init+0xa8>
 8000846:	f44f 7380 	mov.w	r3, #256	; 0x100
 800084a:	e000      	b.n	800084e <HAL_ADC_Init+0xaa>
 800084c:	2300      	movs	r3, #0
 800084e:	693a      	ldr	r2, [r7, #16]
 8000850:	4313      	orrs	r3, r2
 8000852:	613b      	str	r3, [r7, #16]
    
    /* Enable discontinuous mode only if continuous mode is disabled */
    /* Note: If parameter "Init.ScanConvMode" is set to disable, parameter    */
    /*       discontinuous is set anyway, but will have no effect on ADC HW.  */
    if (hadc->Init.DiscontinuousConvMode == ENABLE)
 8000854:	687b      	ldr	r3, [r7, #4]
 8000856:	7d1b      	ldrb	r3, [r3, #20]
 8000858:	2b01      	cmp	r3, #1
 800085a:	d119      	bne.n	8000890 <HAL_ADC_Init+0xec>
    {
      if (hadc->Init.ContinuousConvMode == DISABLE)
 800085c:	687b      	ldr	r3, [r7, #4]
 800085e:	7b1b      	ldrb	r3, [r3, #12]
 8000860:	2b00      	cmp	r3, #0
 8000862:	d109      	bne.n	8000878 <HAL_ADC_Init+0xd4>
      {
        /* Enable the selected ADC regular discontinuous mode */
        /* Set the number of channels to be converted in discontinuous mode */
        SET_BIT(tmp_cr1, ADC_CR1_DISCEN                                            |
 8000864:	687b      	ldr	r3, [r7, #4]
 8000866:	699b      	ldr	r3, [r3, #24]
 8000868:	3b01      	subs	r3, #1
 800086a:	035a      	lsls	r2, r3, #13
 800086c:	693b      	ldr	r3, [r7, #16]
 800086e:	4313      	orrs	r3, r2
 8000870:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 8000874:	613b      	str	r3, [r7, #16]
 8000876:	e00b      	b.n	8000890 <HAL_ADC_Init+0xec>
      {
        /* ADC regular group settings continuous and sequencer discontinuous*/
        /* cannot be enabled simultaneously.                                */
        
        /* Update ADC state machine to error */
        SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8000878:	687b      	ldr	r3, [r7, #4]
 800087a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800087c:	f043 0220 	orr.w	r2, r3, #32
 8000880:	687b      	ldr	r3, [r7, #4]
 8000882:	629a      	str	r2, [r3, #40]	; 0x28
        
        /* Set ADC error code to ADC IP internal error */
        SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8000884:	687b      	ldr	r3, [r7, #4]
 8000886:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8000888:	f043 0201 	orr.w	r2, r3, #1
 800088c:	687b      	ldr	r3, [r7, #4]
 800088e:	62da      	str	r2, [r3, #44]	; 0x2c
      }
    }
    
    /* Update ADC configuration register CR1 with previous settings */
      MODIFY_REG(hadc->Instance->CR1,
 8000890:	687b      	ldr	r3, [r7, #4]
 8000892:	681b      	ldr	r3, [r3, #0]
 8000894:	685b      	ldr	r3, [r3, #4]
 8000896:	f423 4169 	bic.w	r1, r3, #59648	; 0xe900
 800089a:	687b      	ldr	r3, [r7, #4]
 800089c:	681b      	ldr	r3, [r3, #0]
 800089e:	693a      	ldr	r2, [r7, #16]
 80008a0:	430a      	orrs	r2, r1
 80008a2:	605a      	str	r2, [r3, #4]
                 ADC_CR1_DISCEN  |
                 ADC_CR1_DISCNUM    ,
                 tmp_cr1             );
    
    /* Update ADC configuration register CR2 with previous settings */
      MODIFY_REG(hadc->Instance->CR2,
 80008a4:	687b      	ldr	r3, [r7, #4]
 80008a6:	681b      	ldr	r3, [r3, #0]
 80008a8:	689a      	ldr	r2, [r3, #8]
 80008aa:	4b28      	ldr	r3, [pc, #160]	; (800094c <HAL_ADC_Init+0x1a8>)
 80008ac:	4013      	ands	r3, r2
 80008ae:	687a      	ldr	r2, [r7, #4]
 80008b0:	6812      	ldr	r2, [r2, #0]
 80008b2:	68b9      	ldr	r1, [r7, #8]
 80008b4:	430b      	orrs	r3, r1
 80008b6:	6093      	str	r3, [r2, #8]
    /*   Note: Scan mode is present by hardware on this device and, if        */
    /*   disabled, discards automatically nb of conversions. Anyway, nb of    */
    /*   conversions is forced to 0x00 for alignment over all STM32 devices.  */
    /* - if scan mode is enabled, regular channels sequence length is set to  */
    /*   parameter "NbrOfConversion"                                          */
    if (ADC_CR1_SCAN_SET(hadc->Init.ScanConvMode) == ADC_SCAN_ENABLE)
 80008b8:	687b      	ldr	r3, [r7, #4]
 80008ba:	689b      	ldr	r3, [r3, #8]
 80008bc:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80008c0:	d003      	beq.n	80008ca <HAL_ADC_Init+0x126>
 80008c2:	687b      	ldr	r3, [r7, #4]
 80008c4:	689b      	ldr	r3, [r3, #8]
 80008c6:	2b01      	cmp	r3, #1
 80008c8:	d104      	bne.n	80008d4 <HAL_ADC_Init+0x130>
    {
      tmp_sqr1 = ADC_SQR1_L_SHIFT(hadc->Init.NbrOfConversion);
 80008ca:	687b      	ldr	r3, [r7, #4]
 80008cc:	691b      	ldr	r3, [r3, #16]
 80008ce:	3b01      	subs	r3, #1
 80008d0:	051b      	lsls	r3, r3, #20
 80008d2:	60fb      	str	r3, [r7, #12]
    }
      
    MODIFY_REG(hadc->Instance->SQR1,
 80008d4:	687b      	ldr	r3, [r7, #4]
 80008d6:	681b      	ldr	r3, [r3, #0]
 80008d8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80008da:	f423 0170 	bic.w	r1, r3, #15728640	; 0xf00000
 80008de:	687b      	ldr	r3, [r7, #4]
 80008e0:	681b      	ldr	r3, [r3, #0]
 80008e2:	68fa      	ldr	r2, [r7, #12]
 80008e4:	430a      	orrs	r2, r1
 80008e6:	62da      	str	r2, [r3, #44]	; 0x2c
    /* ensure of no potential problem of ADC core IP clocking.                */
    /* Check through register CR2 (excluding bits set in other functions:     */
    /* execution control bits (ADON, JSWSTART, SWSTART), regular group bits   */
    /* (DMA), injected group bits (JEXTTRIG and JEXTSEL), channel internal    */
    /* measurement path bit (TSVREFE).                                        */
    if (READ_BIT(hadc->Instance->CR2, ~(ADC_CR2_ADON | ADC_CR2_DMA |
 80008e8:	687b      	ldr	r3, [r7, #4]
 80008ea:	681b      	ldr	r3, [r3, #0]
 80008ec:	689a      	ldr	r2, [r3, #8]
 80008ee:	4b18      	ldr	r3, [pc, #96]	; (8000950 <HAL_ADC_Init+0x1ac>)
 80008f0:	4013      	ands	r3, r2
 80008f2:	68ba      	ldr	r2, [r7, #8]
 80008f4:	429a      	cmp	r2, r3
 80008f6:	d10b      	bne.n	8000910 <HAL_ADC_Init+0x16c>
                                        ADC_CR2_JEXTTRIG | ADC_CR2_JEXTSEL |
                                        ADC_CR2_TSVREFE                     ))
         == tmp_cr2)
    {
      /* Set ADC error code to none */
      ADC_CLEAR_ERRORCODE(hadc);
 80008f8:	687b      	ldr	r3, [r7, #4]
 80008fa:	2200      	movs	r2, #0
 80008fc:	62da      	str	r2, [r3, #44]	; 0x2c
      
      /* Set the ADC state */
      ADC_STATE_CLR_SET(hadc->State,
 80008fe:	687b      	ldr	r3, [r7, #4]
 8000900:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8000902:	f023 0303 	bic.w	r3, r3, #3
 8000906:	f043 0201 	orr.w	r2, r3, #1
 800090a:	687b      	ldr	r3, [r7, #4]
 800090c:	629a      	str	r2, [r3, #40]	; 0x28
    if (READ_BIT(hadc->Instance->CR2, ~(ADC_CR2_ADON | ADC_CR2_DMA |
 800090e:	e018      	b.n	8000942 <HAL_ADC_Init+0x19e>
                        HAL_ADC_STATE_READY);
    }
    else
    {
      /* Update ADC state machine to error */
      ADC_STATE_CLR_SET(hadc->State,
 8000910:	687b      	ldr	r3, [r7, #4]
 8000912:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8000914:	f023 0312 	bic.w	r3, r3, #18
 8000918:	f043 0210 	orr.w	r2, r3, #16
 800091c:	687b      	ldr	r3, [r7, #4]
 800091e:	629a      	str	r2, [r3, #40]	; 0x28
                        HAL_ADC_STATE_BUSY_INTERNAL,
                        HAL_ADC_STATE_ERROR_INTERNAL);
      
      /* Set ADC error code to ADC IP internal error */
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8000920:	687b      	ldr	r3, [r7, #4]
 8000922:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8000924:	f043 0201 	orr.w	r2, r3, #1
 8000928:	687b      	ldr	r3, [r7, #4]
 800092a:	62da      	str	r2, [r3, #44]	; 0x2c
      
      tmp_hal_status = HAL_ERROR;
 800092c:	2301      	movs	r3, #1
 800092e:	75fb      	strb	r3, [r7, #23]
    if (READ_BIT(hadc->Instance->CR2, ~(ADC_CR2_ADON | ADC_CR2_DMA |
 8000930:	e007      	b.n	8000942 <HAL_ADC_Init+0x19e>
  
  }
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8000932:	687b      	ldr	r3, [r7, #4]
 8000934:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8000936:	f043 0210 	orr.w	r2, r3, #16
 800093a:	687b      	ldr	r3, [r7, #4]
 800093c:	629a      	str	r2, [r3, #40]	; 0x28
        
    tmp_hal_status = HAL_ERROR;
 800093e:	2301      	movs	r3, #1
 8000940:	75fb      	strb	r3, [r7, #23]
  }
  
  /* Return function status */
  return tmp_hal_status;
 8000942:	7dfb      	ldrb	r3, [r7, #23]
}
 8000944:	4618      	mov	r0, r3
 8000946:	3718      	adds	r7, #24
 8000948:	46bd      	mov	sp, r7
 800094a:	bd80      	pop	{r7, pc}
 800094c:	ffe1f7fd 	.word	0xffe1f7fd
 8000950:	ff1f0efe 	.word	0xff1f0efe

08000954 <HAL_ADC_Start_DMA>:
  * @param  pData: The destination Buffer address.
  * @param  Length: The length of data to be transferred from ADC peripheral to memory.
  * @retval None
  */
HAL_StatusTypeDef HAL_ADC_Start_DMA(ADC_HandleTypeDef* hadc, uint32_t* pData, uint32_t Length)
{
 8000954:	b580      	push	{r7, lr}
 8000956:	b086      	sub	sp, #24
 8000958:	af00      	add	r7, sp, #0
 800095a:	60f8      	str	r0, [r7, #12]
 800095c:	60b9      	str	r1, [r7, #8]
 800095e:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8000960:	2300      	movs	r3, #0
 8000962:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_ADC_DMA_CAPABILITY_INSTANCE(hadc->Instance));
    
  /* Verification if multimode is disabled (for devices with several ADC)     */
  /* If multimode is enabled, dedicated function multimode conversion         */
  /* start DMA must be used.                                                  */
  if(ADC_MULTIMODE_IS_ENABLE(hadc) == RESET)
 8000964:	68fb      	ldr	r3, [r7, #12]
 8000966:	681b      	ldr	r3, [r3, #0]
 8000968:	4a64      	ldr	r2, [pc, #400]	; (8000afc <HAL_ADC_Start_DMA+0x1a8>)
 800096a:	4293      	cmp	r3, r2
 800096c:	d004      	beq.n	8000978 <HAL_ADC_Start_DMA+0x24>
 800096e:	68fb      	ldr	r3, [r7, #12]
 8000970:	681b      	ldr	r3, [r3, #0]
 8000972:	4a63      	ldr	r2, [pc, #396]	; (8000b00 <HAL_ADC_Start_DMA+0x1ac>)
 8000974:	4293      	cmp	r3, r2
 8000976:	d106      	bne.n	8000986 <HAL_ADC_Start_DMA+0x32>
 8000978:	4b60      	ldr	r3, [pc, #384]	; (8000afc <HAL_ADC_Start_DMA+0x1a8>)
 800097a:	685b      	ldr	r3, [r3, #4]
 800097c:	f403 2370 	and.w	r3, r3, #983040	; 0xf0000
 8000980:	2b00      	cmp	r3, #0
 8000982:	f040 80b3 	bne.w	8000aec <HAL_ADC_Start_DMA+0x198>
  {
    /* Process locked */
    __HAL_LOCK(hadc);
 8000986:	68fb      	ldr	r3, [r7, #12]
 8000988:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 800098c:	2b01      	cmp	r3, #1
 800098e:	d101      	bne.n	8000994 <HAL_ADC_Start_DMA+0x40>
 8000990:	2302      	movs	r3, #2
 8000992:	e0ae      	b.n	8000af2 <HAL_ADC_Start_DMA+0x19e>
 8000994:	68fb      	ldr	r3, [r7, #12]
 8000996:	2201      	movs	r2, #1
 8000998:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
    
    /* Enable the ADC peripheral */
    tmp_hal_status = ADC_Enable(hadc);
 800099c:	68f8      	ldr	r0, [r7, #12]
 800099e:	f000 f9cb 	bl	8000d38 <ADC_Enable>
 80009a2:	4603      	mov	r3, r0
 80009a4:	75fb      	strb	r3, [r7, #23]
    
    /* Start conversion if ADC is effectively enabled */
    if (tmp_hal_status == HAL_OK)
 80009a6:	7dfb      	ldrb	r3, [r7, #23]
 80009a8:	2b00      	cmp	r3, #0
 80009aa:	f040 809a 	bne.w	8000ae2 <HAL_ADC_Start_DMA+0x18e>
    {
      /* Set ADC state                                                        */
      /* - Clear state bitfield related to regular group conversion results   */
      /* - Set state bitfield related to regular operation                    */
      ADC_STATE_CLR_SET(hadc->State,
 80009ae:	68fb      	ldr	r3, [r7, #12]
 80009b0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80009b2:	f423 6370 	bic.w	r3, r3, #3840	; 0xf00
 80009b6:	f023 0301 	bic.w	r3, r3, #1
 80009ba:	f443 7280 	orr.w	r2, r3, #256	; 0x100
 80009be:	68fb      	ldr	r3, [r7, #12]
 80009c0:	629a      	str	r2, [r3, #40]	; 0x28
                        HAL_ADC_STATE_REG_BUSY);
    
    /* Set group injected state (from auto-injection) and multimode state     */
    /* for all cases of multimode: independent mode, multimode ADC master     */
    /* or multimode ADC slave (for devices with several ADCs):                */
    if (ADC_NONMULTIMODE_OR_MULTIMODEMASTER(hadc))
 80009c2:	68fb      	ldr	r3, [r7, #12]
 80009c4:	681b      	ldr	r3, [r3, #0]
 80009c6:	4a4e      	ldr	r2, [pc, #312]	; (8000b00 <HAL_ADC_Start_DMA+0x1ac>)
 80009c8:	4293      	cmp	r3, r2
 80009ca:	d105      	bne.n	80009d8 <HAL_ADC_Start_DMA+0x84>
 80009cc:	4b4b      	ldr	r3, [pc, #300]	; (8000afc <HAL_ADC_Start_DMA+0x1a8>)
 80009ce:	685b      	ldr	r3, [r3, #4]
 80009d0:	f403 2370 	and.w	r3, r3, #983040	; 0xf0000
 80009d4:	2b00      	cmp	r3, #0
 80009d6:	d115      	bne.n	8000a04 <HAL_ADC_Start_DMA+0xb0>
    {
      /* Set ADC state (ADC independent or master) */
      CLEAR_BIT(hadc->State, HAL_ADC_STATE_MULTIMODE_SLAVE);
 80009d8:	68fb      	ldr	r3, [r7, #12]
 80009da:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80009dc:	f423 1280 	bic.w	r2, r3, #1048576	; 0x100000
 80009e0:	68fb      	ldr	r3, [r7, #12]
 80009e2:	629a      	str	r2, [r3, #40]	; 0x28
      
      /* If conversions on group regular are also triggering group injected,  */
      /* update ADC state.                                                    */
      if (READ_BIT(hadc->Instance->CR1, ADC_CR1_JAUTO) != RESET)
 80009e4:	68fb      	ldr	r3, [r7, #12]
 80009e6:	681b      	ldr	r3, [r3, #0]
 80009e8:	685b      	ldr	r3, [r3, #4]
 80009ea:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80009ee:	2b00      	cmp	r3, #0
 80009f0:	d026      	beq.n	8000a40 <HAL_ADC_Start_DMA+0xec>
      {
        ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_INJ_EOC, HAL_ADC_STATE_INJ_BUSY);  
 80009f2:	68fb      	ldr	r3, [r7, #12]
 80009f4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80009f6:	f423 5340 	bic.w	r3, r3, #12288	; 0x3000
 80009fa:	f443 5280 	orr.w	r2, r3, #4096	; 0x1000
 80009fe:	68fb      	ldr	r3, [r7, #12]
 8000a00:	629a      	str	r2, [r3, #40]	; 0x28
      if (READ_BIT(hadc->Instance->CR1, ADC_CR1_JAUTO) != RESET)
 8000a02:	e01d      	b.n	8000a40 <HAL_ADC_Start_DMA+0xec>
      }
    }
    else
    {
      /* Set ADC state (ADC slave) */
      SET_BIT(hadc->State, HAL_ADC_STATE_MULTIMODE_SLAVE);
 8000a04:	68fb      	ldr	r3, [r7, #12]
 8000a06:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8000a08:	f443 1280 	orr.w	r2, r3, #1048576	; 0x100000
 8000a0c:	68fb      	ldr	r3, [r7, #12]
 8000a0e:	629a      	str	r2, [r3, #40]	; 0x28
      
      /* If conversions on group regular are also triggering group injected,  */
      /* update ADC state.                                                    */
      if (ADC_MULTIMODE_AUTO_INJECTED(hadc))
 8000a10:	68fb      	ldr	r3, [r7, #12]
 8000a12:	681b      	ldr	r3, [r3, #0]
 8000a14:	4a39      	ldr	r2, [pc, #228]	; (8000afc <HAL_ADC_Start_DMA+0x1a8>)
 8000a16:	4293      	cmp	r3, r2
 8000a18:	d004      	beq.n	8000a24 <HAL_ADC_Start_DMA+0xd0>
 8000a1a:	68fb      	ldr	r3, [r7, #12]
 8000a1c:	681b      	ldr	r3, [r3, #0]
 8000a1e:	4a38      	ldr	r2, [pc, #224]	; (8000b00 <HAL_ADC_Start_DMA+0x1ac>)
 8000a20:	4293      	cmp	r3, r2
 8000a22:	d10d      	bne.n	8000a40 <HAL_ADC_Start_DMA+0xec>
 8000a24:	4b35      	ldr	r3, [pc, #212]	; (8000afc <HAL_ADC_Start_DMA+0x1a8>)
 8000a26:	685b      	ldr	r3, [r3, #4]
 8000a28:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8000a2c:	2b00      	cmp	r3, #0
 8000a2e:	d007      	beq.n	8000a40 <HAL_ADC_Start_DMA+0xec>
      {
        ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_INJ_EOC, HAL_ADC_STATE_INJ_BUSY);
 8000a30:	68fb      	ldr	r3, [r7, #12]
 8000a32:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8000a34:	f423 5340 	bic.w	r3, r3, #12288	; 0x3000
 8000a38:	f443 5280 	orr.w	r2, r3, #4096	; 0x1000
 8000a3c:	68fb      	ldr	r3, [r7, #12]
 8000a3e:	629a      	str	r2, [r3, #40]	; 0x28
      }
    }
      
      /* State machine update: Check if an injected conversion is ongoing */
      if (HAL_IS_BIT_SET(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 8000a40:	68fb      	ldr	r3, [r7, #12]
 8000a42:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8000a44:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8000a48:	2b00      	cmp	r3, #0
 8000a4a:	d006      	beq.n	8000a5a <HAL_ADC_Start_DMA+0x106>
      {
        /* Reset ADC error code fields related to conversions on group regular */
        CLEAR_BIT(hadc->ErrorCode, (HAL_ADC_ERROR_OVR | HAL_ADC_ERROR_DMA));         
 8000a4c:	68fb      	ldr	r3, [r7, #12]
 8000a4e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8000a50:	f023 0206 	bic.w	r2, r3, #6
 8000a54:	68fb      	ldr	r3, [r7, #12]
 8000a56:	62da      	str	r2, [r3, #44]	; 0x2c
 8000a58:	e002      	b.n	8000a60 <HAL_ADC_Start_DMA+0x10c>
      }
      else
      {
        /* Reset ADC all error code fields */
        ADC_CLEAR_ERRORCODE(hadc);
 8000a5a:	68fb      	ldr	r3, [r7, #12]
 8000a5c:	2200      	movs	r2, #0
 8000a5e:	62da      	str	r2, [r3, #44]	; 0x2c
      }
      
      /* Process unlocked */
      /* Unlock before starting ADC conversions: in case of potential         */
      /* interruption, to let the process to ADC IRQ Handler.                 */
      __HAL_UNLOCK(hadc);
 8000a60:	68fb      	ldr	r3, [r7, #12]
 8000a62:	2200      	movs	r2, #0
 8000a64:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
      
      /* Set the DMA transfer complete callback */
      hadc->DMA_Handle->XferCpltCallback = ADC_DMAConvCplt;
 8000a68:	68fb      	ldr	r3, [r7, #12]
 8000a6a:	6a1b      	ldr	r3, [r3, #32]
 8000a6c:	4a25      	ldr	r2, [pc, #148]	; (8000b04 <HAL_ADC_Start_DMA+0x1b0>)
 8000a6e:	629a      	str	r2, [r3, #40]	; 0x28

      /* Set the DMA half transfer complete callback */
      hadc->DMA_Handle->XferHalfCpltCallback = ADC_DMAHalfConvCplt;
 8000a70:	68fb      	ldr	r3, [r7, #12]
 8000a72:	6a1b      	ldr	r3, [r3, #32]
 8000a74:	4a24      	ldr	r2, [pc, #144]	; (8000b08 <HAL_ADC_Start_DMA+0x1b4>)
 8000a76:	62da      	str	r2, [r3, #44]	; 0x2c
      
      /* Set the DMA error callback */
      hadc->DMA_Handle->XferErrorCallback = ADC_DMAError;
 8000a78:	68fb      	ldr	r3, [r7, #12]
 8000a7a:	6a1b      	ldr	r3, [r3, #32]
 8000a7c:	4a23      	ldr	r2, [pc, #140]	; (8000b0c <HAL_ADC_Start_DMA+0x1b8>)
 8000a7e:	631a      	str	r2, [r3, #48]	; 0x30
      /* start (in case of SW start):                                         */
      
      /* Clear regular group conversion flag and overrun flag */
      /* (To ensure of no unknown state from potential previous ADC           */
      /* operations)                                                          */
      __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_EOC);
 8000a80:	68fb      	ldr	r3, [r7, #12]
 8000a82:	681b      	ldr	r3, [r3, #0]
 8000a84:	f06f 0202 	mvn.w	r2, #2
 8000a88:	601a      	str	r2, [r3, #0]
      
      /* Enable ADC DMA mode */
      SET_BIT(hadc->Instance->CR2, ADC_CR2_DMA);
 8000a8a:	68fb      	ldr	r3, [r7, #12]
 8000a8c:	681b      	ldr	r3, [r3, #0]
 8000a8e:	689a      	ldr	r2, [r3, #8]
 8000a90:	68fb      	ldr	r3, [r7, #12]
 8000a92:	681b      	ldr	r3, [r3, #0]
 8000a94:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8000a98:	609a      	str	r2, [r3, #8]
      
      /* Start the DMA channel */
      HAL_DMA_Start_IT(hadc->DMA_Handle, (uint32_t)&hadc->Instance->DR, (uint32_t)pData, Length);
 8000a9a:	68fb      	ldr	r3, [r7, #12]
 8000a9c:	6a18      	ldr	r0, [r3, #32]
 8000a9e:	68fb      	ldr	r3, [r7, #12]
 8000aa0:	681b      	ldr	r3, [r3, #0]
 8000aa2:	334c      	adds	r3, #76	; 0x4c
 8000aa4:	4619      	mov	r1, r3
 8000aa6:	68ba      	ldr	r2, [r7, #8]
 8000aa8:	687b      	ldr	r3, [r7, #4]
 8000aaa:	f000 fb9f 	bl	80011ec <HAL_DMA_Start_IT>
      
      /* Enable conversion of regular group.                                  */
      /* If software start has been selected, conversion starts immediately.  */
      /* If external trigger has been selected, conversion will start at next */
      /* trigger event.                                                       */
      if (ADC_IS_SOFTWARE_START_REGULAR(hadc))
 8000aae:	68fb      	ldr	r3, [r7, #12]
 8000ab0:	681b      	ldr	r3, [r3, #0]
 8000ab2:	689b      	ldr	r3, [r3, #8]
 8000ab4:	f403 2360 	and.w	r3, r3, #917504	; 0xe0000
 8000ab8:	f5b3 2f60 	cmp.w	r3, #917504	; 0xe0000
 8000abc:	d108      	bne.n	8000ad0 <HAL_ADC_Start_DMA+0x17c>
      {
        /* Start ADC conversion on regular group with SW start */
        SET_BIT(hadc->Instance->CR2, (ADC_CR2_SWSTART | ADC_CR2_EXTTRIG));
 8000abe:	68fb      	ldr	r3, [r7, #12]
 8000ac0:	681b      	ldr	r3, [r3, #0]
 8000ac2:	689a      	ldr	r2, [r3, #8]
 8000ac4:	68fb      	ldr	r3, [r7, #12]
 8000ac6:	681b      	ldr	r3, [r3, #0]
 8000ac8:	f442 02a0 	orr.w	r2, r2, #5242880	; 0x500000
 8000acc:	609a      	str	r2, [r3, #8]
    if (tmp_hal_status == HAL_OK)
 8000ace:	e00f      	b.n	8000af0 <HAL_ADC_Start_DMA+0x19c>
      }
      else
      {
        /* Start ADC conversion on regular group with external trigger */
        SET_BIT(hadc->Instance->CR2, ADC_CR2_EXTTRIG);
 8000ad0:	68fb      	ldr	r3, [r7, #12]
 8000ad2:	681b      	ldr	r3, [r3, #0]
 8000ad4:	689a      	ldr	r2, [r3, #8]
 8000ad6:	68fb      	ldr	r3, [r7, #12]
 8000ad8:	681b      	ldr	r3, [r3, #0]
 8000ada:	f442 1280 	orr.w	r2, r2, #1048576	; 0x100000
 8000ade:	609a      	str	r2, [r3, #8]
    if (tmp_hal_status == HAL_OK)
 8000ae0:	e006      	b.n	8000af0 <HAL_ADC_Start_DMA+0x19c>
      }
    }
    else
    {
      /* Process unlocked */
      __HAL_UNLOCK(hadc);
 8000ae2:	68fb      	ldr	r3, [r7, #12]
 8000ae4:	2200      	movs	r2, #0
 8000ae6:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
    if (tmp_hal_status == HAL_OK)
 8000aea:	e001      	b.n	8000af0 <HAL_ADC_Start_DMA+0x19c>
    }
  }
  else
  {
    tmp_hal_status = HAL_ERROR;
 8000aec:	2301      	movs	r3, #1
 8000aee:	75fb      	strb	r3, [r7, #23]
  }
  
  /* Return function status */
  return tmp_hal_status;
 8000af0:	7dfb      	ldrb	r3, [r7, #23]
}
 8000af2:	4618      	mov	r0, r3
 8000af4:	3718      	adds	r7, #24
 8000af6:	46bd      	mov	sp, r7
 8000af8:	bd80      	pop	{r7, pc}
 8000afa:	bf00      	nop
 8000afc:	40012400 	.word	0x40012400
 8000b00:	40012800 	.word	0x40012800
 8000b04:	08000e51 	.word	0x08000e51
 8000b08:	08000ecd 	.word	0x08000ecd
 8000b0c:	08000ee9 	.word	0x08000ee9

08000b10 <HAL_ADC_ConvCpltCallback>:
  * @brief  Conversion complete callback in non blocking mode 
  * @param  hadc: ADC handle
  * @retval None
  */
__weak void HAL_ADC_ConvCpltCallback(ADC_HandleTypeDef* hadc)
{
 8000b10:	b480      	push	{r7}
 8000b12:	b083      	sub	sp, #12
 8000b14:	af00      	add	r7, sp, #0
 8000b16:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(hadc);
  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADC_ConvCpltCallback must be implemented in the user file.
   */
}
 8000b18:	bf00      	nop
 8000b1a:	370c      	adds	r7, #12
 8000b1c:	46bd      	mov	sp, r7
 8000b1e:	bc80      	pop	{r7}
 8000b20:	4770      	bx	lr

08000b22 <HAL_ADC_ConvHalfCpltCallback>:
  * @brief  Conversion DMA half-transfer callback in non blocking mode 
  * @param  hadc: ADC handle
  * @retval None
  */
__weak void HAL_ADC_ConvHalfCpltCallback(ADC_HandleTypeDef* hadc)
{
 8000b22:	b480      	push	{r7}
 8000b24:	b083      	sub	sp, #12
 8000b26:	af00      	add	r7, sp, #0
 8000b28:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(hadc);
  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADC_ConvHalfCpltCallback must be implemented in the user file.
  */
}
 8000b2a:	bf00      	nop
 8000b2c:	370c      	adds	r7, #12
 8000b2e:	46bd      	mov	sp, r7
 8000b30:	bc80      	pop	{r7}
 8000b32:	4770      	bx	lr

08000b34 <HAL_ADC_ErrorCallback>:
  *        (ADC conversion with interruption or transfer by DMA)
  * @param  hadc: ADC handle
  * @retval None
  */
__weak void HAL_ADC_ErrorCallback(ADC_HandleTypeDef *hadc)
{
 8000b34:	b480      	push	{r7}
 8000b36:	b083      	sub	sp, #12
 8000b38:	af00      	add	r7, sp, #0
 8000b3a:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(hadc);
  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADC_ErrorCallback must be implemented in the user file.
  */
}
 8000b3c:	bf00      	nop
 8000b3e:	370c      	adds	r7, #12
 8000b40:	46bd      	mov	sp, r7
 8000b42:	bc80      	pop	{r7}
 8000b44:	4770      	bx	lr
	...

08000b48 <HAL_ADC_ConfigChannel>:
  * @param  hadc: ADC handle
  * @param  sConfig: Structure of ADC channel for regular group.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef* hadc, ADC_ChannelConfTypeDef* sConfig)
{ 
 8000b48:	b480      	push	{r7}
 8000b4a:	b085      	sub	sp, #20
 8000b4c:	af00      	add	r7, sp, #0
 8000b4e:	6078      	str	r0, [r7, #4]
 8000b50:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8000b52:	2300      	movs	r3, #0
 8000b54:	73fb      	strb	r3, [r7, #15]
  __IO uint32_t wait_loop_index = 0U;
 8000b56:	2300      	movs	r3, #0
 8000b58:	60bb      	str	r3, [r7, #8]
  assert_param(IS_ADC_CHANNEL(sConfig->Channel));
  assert_param(IS_ADC_REGULAR_RANK(sConfig->Rank));
  assert_param(IS_ADC_SAMPLE_TIME(sConfig->SamplingTime));
  
  /* Process locked */
  __HAL_LOCK(hadc);
 8000b5a:	687b      	ldr	r3, [r7, #4]
 8000b5c:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 8000b60:	2b01      	cmp	r3, #1
 8000b62:	d101      	bne.n	8000b68 <HAL_ADC_ConfigChannel+0x20>
 8000b64:	2302      	movs	r3, #2
 8000b66:	e0dc      	b.n	8000d22 <HAL_ADC_ConfigChannel+0x1da>
 8000b68:	687b      	ldr	r3, [r7, #4]
 8000b6a:	2201      	movs	r2, #1
 8000b6c:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
  
  
  /* Regular sequence configuration */
  /* For Rank 1 to 6 */
  if (sConfig->Rank < 7U)
 8000b70:	683b      	ldr	r3, [r7, #0]
 8000b72:	685b      	ldr	r3, [r3, #4]
 8000b74:	2b06      	cmp	r3, #6
 8000b76:	d81c      	bhi.n	8000bb2 <HAL_ADC_ConfigChannel+0x6a>
  {
    MODIFY_REG(hadc->Instance->SQR3                        ,
 8000b78:	687b      	ldr	r3, [r7, #4]
 8000b7a:	681b      	ldr	r3, [r3, #0]
 8000b7c:	6b59      	ldr	r1, [r3, #52]	; 0x34
 8000b7e:	683b      	ldr	r3, [r7, #0]
 8000b80:	685a      	ldr	r2, [r3, #4]
 8000b82:	4613      	mov	r3, r2
 8000b84:	009b      	lsls	r3, r3, #2
 8000b86:	4413      	add	r3, r2
 8000b88:	3b05      	subs	r3, #5
 8000b8a:	221f      	movs	r2, #31
 8000b8c:	fa02 f303 	lsl.w	r3, r2, r3
 8000b90:	43db      	mvns	r3, r3
 8000b92:	4019      	ands	r1, r3
 8000b94:	683b      	ldr	r3, [r7, #0]
 8000b96:	6818      	ldr	r0, [r3, #0]
 8000b98:	683b      	ldr	r3, [r7, #0]
 8000b9a:	685a      	ldr	r2, [r3, #4]
 8000b9c:	4613      	mov	r3, r2
 8000b9e:	009b      	lsls	r3, r3, #2
 8000ba0:	4413      	add	r3, r2
 8000ba2:	3b05      	subs	r3, #5
 8000ba4:	fa00 f203 	lsl.w	r2, r0, r3
 8000ba8:	687b      	ldr	r3, [r7, #4]
 8000baa:	681b      	ldr	r3, [r3, #0]
 8000bac:	430a      	orrs	r2, r1
 8000bae:	635a      	str	r2, [r3, #52]	; 0x34
 8000bb0:	e03c      	b.n	8000c2c <HAL_ADC_ConfigChannel+0xe4>
               ADC_SQR3_RK(ADC_SQR3_SQ1, sConfig->Rank)    ,
               ADC_SQR3_RK(sConfig->Channel, sConfig->Rank) );
  }
  /* For Rank 7 to 12 */
  else if (sConfig->Rank < 13U)
 8000bb2:	683b      	ldr	r3, [r7, #0]
 8000bb4:	685b      	ldr	r3, [r3, #4]
 8000bb6:	2b0c      	cmp	r3, #12
 8000bb8:	d81c      	bhi.n	8000bf4 <HAL_ADC_ConfigChannel+0xac>
  {
    MODIFY_REG(hadc->Instance->SQR2                        ,
 8000bba:	687b      	ldr	r3, [r7, #4]
 8000bbc:	681b      	ldr	r3, [r3, #0]
 8000bbe:	6b19      	ldr	r1, [r3, #48]	; 0x30
 8000bc0:	683b      	ldr	r3, [r7, #0]
 8000bc2:	685a      	ldr	r2, [r3, #4]
 8000bc4:	4613      	mov	r3, r2
 8000bc6:	009b      	lsls	r3, r3, #2
 8000bc8:	4413      	add	r3, r2
 8000bca:	3b23      	subs	r3, #35	; 0x23
 8000bcc:	221f      	movs	r2, #31
 8000bce:	fa02 f303 	lsl.w	r3, r2, r3
 8000bd2:	43db      	mvns	r3, r3
 8000bd4:	4019      	ands	r1, r3
 8000bd6:	683b      	ldr	r3, [r7, #0]
 8000bd8:	6818      	ldr	r0, [r3, #0]
 8000bda:	683b      	ldr	r3, [r7, #0]
 8000bdc:	685a      	ldr	r2, [r3, #4]
 8000bde:	4613      	mov	r3, r2
 8000be0:	009b      	lsls	r3, r3, #2
 8000be2:	4413      	add	r3, r2
 8000be4:	3b23      	subs	r3, #35	; 0x23
 8000be6:	fa00 f203 	lsl.w	r2, r0, r3
 8000bea:	687b      	ldr	r3, [r7, #4]
 8000bec:	681b      	ldr	r3, [r3, #0]
 8000bee:	430a      	orrs	r2, r1
 8000bf0:	631a      	str	r2, [r3, #48]	; 0x30
 8000bf2:	e01b      	b.n	8000c2c <HAL_ADC_ConfigChannel+0xe4>
               ADC_SQR2_RK(sConfig->Channel, sConfig->Rank) );
  }
  /* For Rank 13 to 16 */
  else
  {
    MODIFY_REG(hadc->Instance->SQR1                        ,
 8000bf4:	687b      	ldr	r3, [r7, #4]
 8000bf6:	681b      	ldr	r3, [r3, #0]
 8000bf8:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 8000bfa:	683b      	ldr	r3, [r7, #0]
 8000bfc:	685a      	ldr	r2, [r3, #4]
 8000bfe:	4613      	mov	r3, r2
 8000c00:	009b      	lsls	r3, r3, #2
 8000c02:	4413      	add	r3, r2
 8000c04:	3b41      	subs	r3, #65	; 0x41
 8000c06:	221f      	movs	r2, #31
 8000c08:	fa02 f303 	lsl.w	r3, r2, r3
 8000c0c:	43db      	mvns	r3, r3
 8000c0e:	4019      	ands	r1, r3
 8000c10:	683b      	ldr	r3, [r7, #0]
 8000c12:	6818      	ldr	r0, [r3, #0]
 8000c14:	683b      	ldr	r3, [r7, #0]
 8000c16:	685a      	ldr	r2, [r3, #4]
 8000c18:	4613      	mov	r3, r2
 8000c1a:	009b      	lsls	r3, r3, #2
 8000c1c:	4413      	add	r3, r2
 8000c1e:	3b41      	subs	r3, #65	; 0x41
 8000c20:	fa00 f203 	lsl.w	r2, r0, r3
 8000c24:	687b      	ldr	r3, [r7, #4]
 8000c26:	681b      	ldr	r3, [r3, #0]
 8000c28:	430a      	orrs	r2, r1
 8000c2a:	62da      	str	r2, [r3, #44]	; 0x2c
  }
  
  
  /* Channel sampling time configuration */
  /* For channels 10 to 17 */
  if (sConfig->Channel >= ADC_CHANNEL_10)
 8000c2c:	683b      	ldr	r3, [r7, #0]
 8000c2e:	681b      	ldr	r3, [r3, #0]
 8000c30:	2b09      	cmp	r3, #9
 8000c32:	d91c      	bls.n	8000c6e <HAL_ADC_ConfigChannel+0x126>
  {
    MODIFY_REG(hadc->Instance->SMPR1                             ,
 8000c34:	687b      	ldr	r3, [r7, #4]
 8000c36:	681b      	ldr	r3, [r3, #0]
 8000c38:	68d9      	ldr	r1, [r3, #12]
 8000c3a:	683b      	ldr	r3, [r7, #0]
 8000c3c:	681a      	ldr	r2, [r3, #0]
 8000c3e:	4613      	mov	r3, r2
 8000c40:	005b      	lsls	r3, r3, #1
 8000c42:	4413      	add	r3, r2
 8000c44:	3b1e      	subs	r3, #30
 8000c46:	2207      	movs	r2, #7
 8000c48:	fa02 f303 	lsl.w	r3, r2, r3
 8000c4c:	43db      	mvns	r3, r3
 8000c4e:	4019      	ands	r1, r3
 8000c50:	683b      	ldr	r3, [r7, #0]
 8000c52:	6898      	ldr	r0, [r3, #8]
 8000c54:	683b      	ldr	r3, [r7, #0]
 8000c56:	681a      	ldr	r2, [r3, #0]
 8000c58:	4613      	mov	r3, r2
 8000c5a:	005b      	lsls	r3, r3, #1
 8000c5c:	4413      	add	r3, r2
 8000c5e:	3b1e      	subs	r3, #30
 8000c60:	fa00 f203 	lsl.w	r2, r0, r3
 8000c64:	687b      	ldr	r3, [r7, #4]
 8000c66:	681b      	ldr	r3, [r3, #0]
 8000c68:	430a      	orrs	r2, r1
 8000c6a:	60da      	str	r2, [r3, #12]
 8000c6c:	e019      	b.n	8000ca2 <HAL_ADC_ConfigChannel+0x15a>
               ADC_SMPR1(ADC_SMPR1_SMP10, sConfig->Channel)      ,
               ADC_SMPR1(sConfig->SamplingTime, sConfig->Channel) );
  }
  else /* For channels 0 to 9 */
  {
    MODIFY_REG(hadc->Instance->SMPR2                             ,
 8000c6e:	687b      	ldr	r3, [r7, #4]
 8000c70:	681b      	ldr	r3, [r3, #0]
 8000c72:	6919      	ldr	r1, [r3, #16]
 8000c74:	683b      	ldr	r3, [r7, #0]
 8000c76:	681a      	ldr	r2, [r3, #0]
 8000c78:	4613      	mov	r3, r2
 8000c7a:	005b      	lsls	r3, r3, #1
 8000c7c:	4413      	add	r3, r2
 8000c7e:	2207      	movs	r2, #7
 8000c80:	fa02 f303 	lsl.w	r3, r2, r3
 8000c84:	43db      	mvns	r3, r3
 8000c86:	4019      	ands	r1, r3
 8000c88:	683b      	ldr	r3, [r7, #0]
 8000c8a:	6898      	ldr	r0, [r3, #8]
 8000c8c:	683b      	ldr	r3, [r7, #0]
 8000c8e:	681a      	ldr	r2, [r3, #0]
 8000c90:	4613      	mov	r3, r2
 8000c92:	005b      	lsls	r3, r3, #1
 8000c94:	4413      	add	r3, r2
 8000c96:	fa00 f203 	lsl.w	r2, r0, r3
 8000c9a:	687b      	ldr	r3, [r7, #4]
 8000c9c:	681b      	ldr	r3, [r3, #0]
 8000c9e:	430a      	orrs	r2, r1
 8000ca0:	611a      	str	r2, [r3, #16]
               ADC_SMPR2(sConfig->SamplingTime, sConfig->Channel) );
  }
  
  /* If ADC1 Channel_16 or Channel_17 is selected, enable Temperature sensor  */
  /* and VREFINT measurement path.                                            */
  if ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) ||
 8000ca2:	683b      	ldr	r3, [r7, #0]
 8000ca4:	681b      	ldr	r3, [r3, #0]
 8000ca6:	2b10      	cmp	r3, #16
 8000ca8:	d003      	beq.n	8000cb2 <HAL_ADC_ConfigChannel+0x16a>
      (sConfig->Channel == ADC_CHANNEL_VREFINT)      )
 8000caa:	683b      	ldr	r3, [r7, #0]
 8000cac:	681b      	ldr	r3, [r3, #0]
  if ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) ||
 8000cae:	2b11      	cmp	r3, #17
 8000cb0:	d132      	bne.n	8000d18 <HAL_ADC_ConfigChannel+0x1d0>
  {
    /* For STM32F1 devices with several ADC: Only ADC1 can access internal    */
    /* measurement channels (VrefInt/TempSensor). If these channels are       */
    /* intended to be set on other ADC instances, an error is reported.       */
    if (hadc->Instance == ADC1)
 8000cb2:	687b      	ldr	r3, [r7, #4]
 8000cb4:	681b      	ldr	r3, [r3, #0]
 8000cb6:	4a1d      	ldr	r2, [pc, #116]	; (8000d2c <HAL_ADC_ConfigChannel+0x1e4>)
 8000cb8:	4293      	cmp	r3, r2
 8000cba:	d125      	bne.n	8000d08 <HAL_ADC_ConfigChannel+0x1c0>
    {
      if (READ_BIT(hadc->Instance->CR2, ADC_CR2_TSVREFE) == RESET)
 8000cbc:	687b      	ldr	r3, [r7, #4]
 8000cbe:	681b      	ldr	r3, [r3, #0]
 8000cc0:	689b      	ldr	r3, [r3, #8]
 8000cc2:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8000cc6:	2b00      	cmp	r3, #0
 8000cc8:	d126      	bne.n	8000d18 <HAL_ADC_ConfigChannel+0x1d0>
      {
        SET_BIT(hadc->Instance->CR2, ADC_CR2_TSVREFE);
 8000cca:	687b      	ldr	r3, [r7, #4]
 8000ccc:	681b      	ldr	r3, [r3, #0]
 8000cce:	689a      	ldr	r2, [r3, #8]
 8000cd0:	687b      	ldr	r3, [r7, #4]
 8000cd2:	681b      	ldr	r3, [r3, #0]
 8000cd4:	f442 0200 	orr.w	r2, r2, #8388608	; 0x800000
 8000cd8:	609a      	str	r2, [r3, #8]
        
        if ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR))
 8000cda:	683b      	ldr	r3, [r7, #0]
 8000cdc:	681b      	ldr	r3, [r3, #0]
 8000cde:	2b10      	cmp	r3, #16
 8000ce0:	d11a      	bne.n	8000d18 <HAL_ADC_ConfigChannel+0x1d0>
        {
          /* Delay for temperature sensor stabilization time */
          /* Compute number of CPU cycles to wait for */
          wait_loop_index = (ADC_TEMPSENSOR_DELAY_US * (SystemCoreClock / 1000000U));
 8000ce2:	4b13      	ldr	r3, [pc, #76]	; (8000d30 <HAL_ADC_ConfigChannel+0x1e8>)
 8000ce4:	681b      	ldr	r3, [r3, #0]
 8000ce6:	4a13      	ldr	r2, [pc, #76]	; (8000d34 <HAL_ADC_ConfigChannel+0x1ec>)
 8000ce8:	fba2 2303 	umull	r2, r3, r2, r3
 8000cec:	0c9a      	lsrs	r2, r3, #18
 8000cee:	4613      	mov	r3, r2
 8000cf0:	009b      	lsls	r3, r3, #2
 8000cf2:	4413      	add	r3, r2
 8000cf4:	005b      	lsls	r3, r3, #1
 8000cf6:	60bb      	str	r3, [r7, #8]
          while(wait_loop_index != 0U)
 8000cf8:	e002      	b.n	8000d00 <HAL_ADC_ConfigChannel+0x1b8>
          {
            wait_loop_index--;
 8000cfa:	68bb      	ldr	r3, [r7, #8]
 8000cfc:	3b01      	subs	r3, #1
 8000cfe:	60bb      	str	r3, [r7, #8]
          while(wait_loop_index != 0U)
 8000d00:	68bb      	ldr	r3, [r7, #8]
 8000d02:	2b00      	cmp	r3, #0
 8000d04:	d1f9      	bne.n	8000cfa <HAL_ADC_ConfigChannel+0x1b2>
 8000d06:	e007      	b.n	8000d18 <HAL_ADC_ConfigChannel+0x1d0>
      }
    }
    else
    {
      /* Update ADC state machine to error */
      SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8000d08:	687b      	ldr	r3, [r7, #4]
 8000d0a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8000d0c:	f043 0220 	orr.w	r2, r3, #32
 8000d10:	687b      	ldr	r3, [r7, #4]
 8000d12:	629a      	str	r2, [r3, #40]	; 0x28
      
      tmp_hal_status = HAL_ERROR;
 8000d14:	2301      	movs	r3, #1
 8000d16:	73fb      	strb	r3, [r7, #15]
    }
  }
  
  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 8000d18:	687b      	ldr	r3, [r7, #4]
 8000d1a:	2200      	movs	r2, #0
 8000d1c:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
  
  /* Return function status */
  return tmp_hal_status;
 8000d20:	7bfb      	ldrb	r3, [r7, #15]
}
 8000d22:	4618      	mov	r0, r3
 8000d24:	3714      	adds	r7, #20
 8000d26:	46bd      	mov	sp, r7
 8000d28:	bc80      	pop	{r7}
 8000d2a:	4770      	bx	lr
 8000d2c:	40012400 	.word	0x40012400
 8000d30:	20000000 	.word	0x20000000
 8000d34:	431bde83 	.word	0x431bde83

08000d38 <ADC_Enable>:
  *         and voltage regulator must be enabled (done into HAL_ADC_Init()).
  * @param  hadc: ADC handle
  * @retval HAL status.
  */
HAL_StatusTypeDef ADC_Enable(ADC_HandleTypeDef* hadc)
{
 8000d38:	b580      	push	{r7, lr}
 8000d3a:	b084      	sub	sp, #16
 8000d3c:	af00      	add	r7, sp, #0
 8000d3e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 8000d40:	2300      	movs	r3, #0
 8000d42:	60fb      	str	r3, [r7, #12]
  __IO uint32_t wait_loop_index = 0U;
 8000d44:	2300      	movs	r3, #0
 8000d46:	60bb      	str	r3, [r7, #8]
  
  /* ADC enable and wait for ADC ready (in case of ADC is disabled or         */
  /* enabling phase not yet completed: flag ADC ready not yet set).           */
  /* Timeout implemented to not be stuck if ADC cannot be enabled (possible   */
  /* causes: ADC clock not running, ...).                                     */
  if (ADC_IS_ENABLE(hadc) == RESET)
 8000d48:	687b      	ldr	r3, [r7, #4]
 8000d4a:	681b      	ldr	r3, [r3, #0]
 8000d4c:	689b      	ldr	r3, [r3, #8]
 8000d4e:	f003 0301 	and.w	r3, r3, #1
 8000d52:	2b01      	cmp	r3, #1
 8000d54:	d039      	beq.n	8000dca <ADC_Enable+0x92>
  {
    /* Enable the Peripheral */
    __HAL_ADC_ENABLE(hadc);
 8000d56:	687b      	ldr	r3, [r7, #4]
 8000d58:	681b      	ldr	r3, [r3, #0]
 8000d5a:	689a      	ldr	r2, [r3, #8]
 8000d5c:	687b      	ldr	r3, [r7, #4]
 8000d5e:	681b      	ldr	r3, [r3, #0]
 8000d60:	f042 0201 	orr.w	r2, r2, #1
 8000d64:	609a      	str	r2, [r3, #8]
    
    /* Delay for ADC stabilization time */
    /* Compute number of CPU cycles to wait for */
    wait_loop_index = (ADC_STAB_DELAY_US * (SystemCoreClock / 1000000U));
 8000d66:	4b1b      	ldr	r3, [pc, #108]	; (8000dd4 <ADC_Enable+0x9c>)
 8000d68:	681b      	ldr	r3, [r3, #0]
 8000d6a:	4a1b      	ldr	r2, [pc, #108]	; (8000dd8 <ADC_Enable+0xa0>)
 8000d6c:	fba2 2303 	umull	r2, r3, r2, r3
 8000d70:	0c9b      	lsrs	r3, r3, #18
 8000d72:	60bb      	str	r3, [r7, #8]
    while(wait_loop_index != 0U)
 8000d74:	e002      	b.n	8000d7c <ADC_Enable+0x44>
    {
      wait_loop_index--;
 8000d76:	68bb      	ldr	r3, [r7, #8]
 8000d78:	3b01      	subs	r3, #1
 8000d7a:	60bb      	str	r3, [r7, #8]
    while(wait_loop_index != 0U)
 8000d7c:	68bb      	ldr	r3, [r7, #8]
 8000d7e:	2b00      	cmp	r3, #0
 8000d80:	d1f9      	bne.n	8000d76 <ADC_Enable+0x3e>
    }
    
    /* Get tick count */
    tickstart = HAL_GetTick();
 8000d82:	f7ff fd05 	bl	8000790 <HAL_GetTick>
 8000d86:	60f8      	str	r0, [r7, #12]

    /* Wait for ADC effectively enabled */
    while(ADC_IS_ENABLE(hadc) == RESET)
 8000d88:	e018      	b.n	8000dbc <ADC_Enable+0x84>
    {
      if((HAL_GetTick() - tickstart) > ADC_ENABLE_TIMEOUT)
 8000d8a:	f7ff fd01 	bl	8000790 <HAL_GetTick>
 8000d8e:	4602      	mov	r2, r0
 8000d90:	68fb      	ldr	r3, [r7, #12]
 8000d92:	1ad3      	subs	r3, r2, r3
 8000d94:	2b02      	cmp	r3, #2
 8000d96:	d911      	bls.n	8000dbc <ADC_Enable+0x84>
      {
        /* Update ADC state machine to error */
        SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8000d98:	687b      	ldr	r3, [r7, #4]
 8000d9a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8000d9c:	f043 0210 	orr.w	r2, r3, #16
 8000da0:	687b      	ldr	r3, [r7, #4]
 8000da2:	629a      	str	r2, [r3, #40]	; 0x28
      
        /* Set ADC error code to ADC IP internal error */
        SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8000da4:	687b      	ldr	r3, [r7, #4]
 8000da6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8000da8:	f043 0201 	orr.w	r2, r3, #1
 8000dac:	687b      	ldr	r3, [r7, #4]
 8000dae:	62da      	str	r2, [r3, #44]	; 0x2c
        
        /* Process unlocked */
        __HAL_UNLOCK(hadc);
 8000db0:	687b      	ldr	r3, [r7, #4]
 8000db2:	2200      	movs	r2, #0
 8000db4:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
      
        return HAL_ERROR;
 8000db8:	2301      	movs	r3, #1
 8000dba:	e007      	b.n	8000dcc <ADC_Enable+0x94>
    while(ADC_IS_ENABLE(hadc) == RESET)
 8000dbc:	687b      	ldr	r3, [r7, #4]
 8000dbe:	681b      	ldr	r3, [r3, #0]
 8000dc0:	689b      	ldr	r3, [r3, #8]
 8000dc2:	f003 0301 	and.w	r3, r3, #1
 8000dc6:	2b01      	cmp	r3, #1
 8000dc8:	d1df      	bne.n	8000d8a <ADC_Enable+0x52>
      }
    }
  }
   
  /* Return HAL status */
  return HAL_OK;
 8000dca:	2300      	movs	r3, #0
}
 8000dcc:	4618      	mov	r0, r3
 8000dce:	3710      	adds	r7, #16
 8000dd0:	46bd      	mov	sp, r7
 8000dd2:	bd80      	pop	{r7, pc}
 8000dd4:	20000000 	.word	0x20000000
 8000dd8:	431bde83 	.word	0x431bde83

08000ddc <ADC_ConversionStop_Disable>:
  *         stopped to disable the ADC.
  * @param  hadc: ADC handle
  * @retval HAL status.
  */
HAL_StatusTypeDef ADC_ConversionStop_Disable(ADC_HandleTypeDef* hadc)
{
 8000ddc:	b580      	push	{r7, lr}
 8000dde:	b084      	sub	sp, #16
 8000de0:	af00      	add	r7, sp, #0
 8000de2:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 8000de4:	2300      	movs	r3, #0
 8000de6:	60fb      	str	r3, [r7, #12]
  
  /* Verification if ADC is not already disabled */
  if (ADC_IS_ENABLE(hadc) != RESET)
 8000de8:	687b      	ldr	r3, [r7, #4]
 8000dea:	681b      	ldr	r3, [r3, #0]
 8000dec:	689b      	ldr	r3, [r3, #8]
 8000dee:	f003 0301 	and.w	r3, r3, #1
 8000df2:	2b01      	cmp	r3, #1
 8000df4:	d127      	bne.n	8000e46 <ADC_ConversionStop_Disable+0x6a>
  {
    /* Disable the ADC peripheral */
    __HAL_ADC_DISABLE(hadc);
 8000df6:	687b      	ldr	r3, [r7, #4]
 8000df8:	681b      	ldr	r3, [r3, #0]
 8000dfa:	689a      	ldr	r2, [r3, #8]
 8000dfc:	687b      	ldr	r3, [r7, #4]
 8000dfe:	681b      	ldr	r3, [r3, #0]
 8000e00:	f022 0201 	bic.w	r2, r2, #1
 8000e04:	609a      	str	r2, [r3, #8]
     
    /* Get tick count */
    tickstart = HAL_GetTick();
 8000e06:	f7ff fcc3 	bl	8000790 <HAL_GetTick>
 8000e0a:	60f8      	str	r0, [r7, #12]
    
    /* Wait for ADC effectively disabled */
    while(ADC_IS_ENABLE(hadc) != RESET)
 8000e0c:	e014      	b.n	8000e38 <ADC_ConversionStop_Disable+0x5c>
    {
      if((HAL_GetTick() - tickstart) > ADC_DISABLE_TIMEOUT)
 8000e0e:	f7ff fcbf 	bl	8000790 <HAL_GetTick>
 8000e12:	4602      	mov	r2, r0
 8000e14:	68fb      	ldr	r3, [r7, #12]
 8000e16:	1ad3      	subs	r3, r2, r3
 8000e18:	2b02      	cmp	r3, #2
 8000e1a:	d90d      	bls.n	8000e38 <ADC_ConversionStop_Disable+0x5c>
      {
        /* Update ADC state machine to error */
        SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8000e1c:	687b      	ldr	r3, [r7, #4]
 8000e1e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8000e20:	f043 0210 	orr.w	r2, r3, #16
 8000e24:	687b      	ldr	r3, [r7, #4]
 8000e26:	629a      	str	r2, [r3, #40]	; 0x28
        
        /* Set ADC error code to ADC IP internal error */
        SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8000e28:	687b      	ldr	r3, [r7, #4]
 8000e2a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8000e2c:	f043 0201 	orr.w	r2, r3, #1
 8000e30:	687b      	ldr	r3, [r7, #4]
 8000e32:	62da      	str	r2, [r3, #44]	; 0x2c
        
        return HAL_ERROR;
 8000e34:	2301      	movs	r3, #1
 8000e36:	e007      	b.n	8000e48 <ADC_ConversionStop_Disable+0x6c>
    while(ADC_IS_ENABLE(hadc) != RESET)
 8000e38:	687b      	ldr	r3, [r7, #4]
 8000e3a:	681b      	ldr	r3, [r3, #0]
 8000e3c:	689b      	ldr	r3, [r3, #8]
 8000e3e:	f003 0301 	and.w	r3, r3, #1
 8000e42:	2b01      	cmp	r3, #1
 8000e44:	d0e3      	beq.n	8000e0e <ADC_ConversionStop_Disable+0x32>
      }
    }
  }
  
  /* Return HAL status */
  return HAL_OK;
 8000e46:	2300      	movs	r3, #0
}
 8000e48:	4618      	mov	r0, r3
 8000e4a:	3710      	adds	r7, #16
 8000e4c:	46bd      	mov	sp, r7
 8000e4e:	bd80      	pop	{r7, pc}

08000e50 <ADC_DMAConvCplt>:
  * @brief  DMA transfer complete callback. 
  * @param  hdma: pointer to DMA handle.
  * @retval None
  */
void ADC_DMAConvCplt(DMA_HandleTypeDef *hdma)
{
 8000e50:	b580      	push	{r7, lr}
 8000e52:	b084      	sub	sp, #16
 8000e54:	af00      	add	r7, sp, #0
 8000e56:	6078      	str	r0, [r7, #4]
  /* Retrieve ADC handle corresponding to current DMA handle */
  ADC_HandleTypeDef* hadc = ( ADC_HandleTypeDef* )((DMA_HandleTypeDef* )hdma)->Parent;
 8000e58:	687b      	ldr	r3, [r7, #4]
 8000e5a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8000e5c:	60fb      	str	r3, [r7, #12]
 
  /* Update state machine on conversion status if not in error state */
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL | HAL_ADC_STATE_ERROR_DMA))
 8000e5e:	68fb      	ldr	r3, [r7, #12]
 8000e60:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8000e62:	f003 0350 	and.w	r3, r3, #80	; 0x50
 8000e66:	2b00      	cmp	r3, #0
 8000e68:	d127      	bne.n	8000eba <ADC_DMAConvCplt+0x6a>
  {
    /* Update ADC state machine */
    SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC);
 8000e6a:	68fb      	ldr	r3, [r7, #12]
 8000e6c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8000e6e:	f443 7200 	orr.w	r2, r3, #512	; 0x200
 8000e72:	68fb      	ldr	r3, [r7, #12]
 8000e74:	629a      	str	r2, [r3, #40]	; 0x28
    /* Determine whether any further conversion upcoming on group regular     */
    /* by external trigger, continuous mode or scan sequence on going.        */
    /* Note: On STM32F1 devices, in case of sequencer enabled                 */
    /*       (several ranks selected), end of conversion flag is raised       */
    /*       at the end of the sequence.                                      */
    if(ADC_IS_SOFTWARE_START_REGULAR(hadc)        && 
 8000e76:	68fb      	ldr	r3, [r7, #12]
 8000e78:	681b      	ldr	r3, [r3, #0]
 8000e7a:	689b      	ldr	r3, [r3, #8]
 8000e7c:	f403 2360 	and.w	r3, r3, #917504	; 0xe0000
 8000e80:	f5b3 2f60 	cmp.w	r3, #917504	; 0xe0000
 8000e84:	d115      	bne.n	8000eb2 <ADC_DMAConvCplt+0x62>
       (hadc->Init.ContinuousConvMode == DISABLE)   )
 8000e86:	68fb      	ldr	r3, [r7, #12]
 8000e88:	7b1b      	ldrb	r3, [r3, #12]
    if(ADC_IS_SOFTWARE_START_REGULAR(hadc)        && 
 8000e8a:	2b00      	cmp	r3, #0
 8000e8c:	d111      	bne.n	8000eb2 <ADC_DMAConvCplt+0x62>
    {
      /* Set ADC state */
      CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);   
 8000e8e:	68fb      	ldr	r3, [r7, #12]
 8000e90:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8000e92:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 8000e96:	68fb      	ldr	r3, [r7, #12]
 8000e98:	629a      	str	r2, [r3, #40]	; 0x28
      
      if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 8000e9a:	68fb      	ldr	r3, [r7, #12]
 8000e9c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8000e9e:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8000ea2:	2b00      	cmp	r3, #0
 8000ea4:	d105      	bne.n	8000eb2 <ADC_DMAConvCplt+0x62>
      {
        SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 8000ea6:	68fb      	ldr	r3, [r7, #12]
 8000ea8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8000eaa:	f043 0201 	orr.w	r2, r3, #1
 8000eae:	68fb      	ldr	r3, [r7, #12]
 8000eb0:	629a      	str	r2, [r3, #40]	; 0x28
    
    /* Conversion complete callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->ConvCpltCallback(hadc);
#else
    HAL_ADC_ConvCpltCallback(hadc);
 8000eb2:	68f8      	ldr	r0, [r7, #12]
 8000eb4:	f7ff fe2c 	bl	8000b10 <HAL_ADC_ConvCpltCallback>
  else
  {
    /* Call DMA error callback */
    hadc->DMA_Handle->XferErrorCallback(hdma);
  }
}
 8000eb8:	e004      	b.n	8000ec4 <ADC_DMAConvCplt+0x74>
    hadc->DMA_Handle->XferErrorCallback(hdma);
 8000eba:	68fb      	ldr	r3, [r7, #12]
 8000ebc:	6a1b      	ldr	r3, [r3, #32]
 8000ebe:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000ec0:	6878      	ldr	r0, [r7, #4]
 8000ec2:	4798      	blx	r3
}
 8000ec4:	bf00      	nop
 8000ec6:	3710      	adds	r7, #16
 8000ec8:	46bd      	mov	sp, r7
 8000eca:	bd80      	pop	{r7, pc}

08000ecc <ADC_DMAHalfConvCplt>:
  * @brief  DMA half transfer complete callback. 
  * @param  hdma: pointer to DMA handle.
  * @retval None
  */
void ADC_DMAHalfConvCplt(DMA_HandleTypeDef *hdma)   
{
 8000ecc:	b580      	push	{r7, lr}
 8000ece:	b084      	sub	sp, #16
 8000ed0:	af00      	add	r7, sp, #0
 8000ed2:	6078      	str	r0, [r7, #4]
  /* Retrieve ADC handle corresponding to current DMA handle */
  ADC_HandleTypeDef* hadc = ( ADC_HandleTypeDef* )((DMA_HandleTypeDef* )hdma)->Parent;
 8000ed4:	687b      	ldr	r3, [r7, #4]
 8000ed6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8000ed8:	60fb      	str	r3, [r7, #12]
  
  /* Half conversion callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->ConvHalfCpltCallback(hadc);
#else
  HAL_ADC_ConvHalfCpltCallback(hadc);
 8000eda:	68f8      	ldr	r0, [r7, #12]
 8000edc:	f7ff fe21 	bl	8000b22 <HAL_ADC_ConvHalfCpltCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
}
 8000ee0:	bf00      	nop
 8000ee2:	3710      	adds	r7, #16
 8000ee4:	46bd      	mov	sp, r7
 8000ee6:	bd80      	pop	{r7, pc}

08000ee8 <ADC_DMAError>:
  * @brief  DMA error callback 
  * @param  hdma: pointer to DMA handle.
  * @retval None
  */
void ADC_DMAError(DMA_HandleTypeDef *hdma)   
{
 8000ee8:	b580      	push	{r7, lr}
 8000eea:	b084      	sub	sp, #16
 8000eec:	af00      	add	r7, sp, #0
 8000eee:	6078      	str	r0, [r7, #4]
  /* Retrieve ADC handle corresponding to current DMA handle */
  ADC_HandleTypeDef* hadc = ( ADC_HandleTypeDef* )((DMA_HandleTypeDef* )hdma)->Parent;
 8000ef0:	687b      	ldr	r3, [r7, #4]
 8000ef2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8000ef4:	60fb      	str	r3, [r7, #12]
  
  /* Set ADC state */
  SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_DMA);
 8000ef6:	68fb      	ldr	r3, [r7, #12]
 8000ef8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8000efa:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 8000efe:	68fb      	ldr	r3, [r7, #12]
 8000f00:	629a      	str	r2, [r3, #40]	; 0x28
  
  /* Set ADC error code to DMA error */
  SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_DMA);
 8000f02:	68fb      	ldr	r3, [r7, #12]
 8000f04:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8000f06:	f043 0204 	orr.w	r2, r3, #4
 8000f0a:	68fb      	ldr	r3, [r7, #12]
 8000f0c:	62da      	str	r2, [r3, #44]	; 0x2c
  
  /* Error callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
  hadc->ErrorCallback(hadc);
#else
  HAL_ADC_ErrorCallback(hadc);
 8000f0e:	68f8      	ldr	r0, [r7, #12]
 8000f10:	f7ff fe10 	bl	8000b34 <HAL_ADC_ErrorCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
}
 8000f14:	bf00      	nop
 8000f16:	3710      	adds	r7, #16
 8000f18:	46bd      	mov	sp, r7
 8000f1a:	bd80      	pop	{r7, pc}

08000f1c <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000f1c:	b480      	push	{r7}
 8000f1e:	b085      	sub	sp, #20
 8000f20:	af00      	add	r7, sp, #0
 8000f22:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8000f24:	687b      	ldr	r3, [r7, #4]
 8000f26:	f003 0307 	and.w	r3, r3, #7
 8000f2a:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8000f2c:	4b0c      	ldr	r3, [pc, #48]	; (8000f60 <__NVIC_SetPriorityGrouping+0x44>)
 8000f2e:	68db      	ldr	r3, [r3, #12]
 8000f30:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8000f32:	68ba      	ldr	r2, [r7, #8]
 8000f34:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8000f38:	4013      	ands	r3, r2
 8000f3a:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos) );               /* Insert write key and priority group */
 8000f3c:	68fb      	ldr	r3, [r7, #12]
 8000f3e:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8000f40:	68bb      	ldr	r3, [r7, #8]
 8000f42:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8000f44:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8000f48:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8000f4c:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8000f4e:	4a04      	ldr	r2, [pc, #16]	; (8000f60 <__NVIC_SetPriorityGrouping+0x44>)
 8000f50:	68bb      	ldr	r3, [r7, #8]
 8000f52:	60d3      	str	r3, [r2, #12]
}
 8000f54:	bf00      	nop
 8000f56:	3714      	adds	r7, #20
 8000f58:	46bd      	mov	sp, r7
 8000f5a:	bc80      	pop	{r7}
 8000f5c:	4770      	bx	lr
 8000f5e:	bf00      	nop
 8000f60:	e000ed00 	.word	0xe000ed00

08000f64 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8000f64:	b480      	push	{r7}
 8000f66:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8000f68:	4b04      	ldr	r3, [pc, #16]	; (8000f7c <__NVIC_GetPriorityGrouping+0x18>)
 8000f6a:	68db      	ldr	r3, [r3, #12]
 8000f6c:	0a1b      	lsrs	r3, r3, #8
 8000f6e:	f003 0307 	and.w	r3, r3, #7
}
 8000f72:	4618      	mov	r0, r3
 8000f74:	46bd      	mov	sp, r7
 8000f76:	bc80      	pop	{r7}
 8000f78:	4770      	bx	lr
 8000f7a:	bf00      	nop
 8000f7c:	e000ed00 	.word	0xe000ed00

08000f80 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8000f80:	b480      	push	{r7}
 8000f82:	b083      	sub	sp, #12
 8000f84:	af00      	add	r7, sp, #0
 8000f86:	4603      	mov	r3, r0
 8000f88:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000f8a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000f8e:	2b00      	cmp	r3, #0
 8000f90:	db0b      	blt.n	8000faa <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8000f92:	79fb      	ldrb	r3, [r7, #7]
 8000f94:	f003 021f 	and.w	r2, r3, #31
 8000f98:	4906      	ldr	r1, [pc, #24]	; (8000fb4 <__NVIC_EnableIRQ+0x34>)
 8000f9a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000f9e:	095b      	lsrs	r3, r3, #5
 8000fa0:	2001      	movs	r0, #1
 8000fa2:	fa00 f202 	lsl.w	r2, r0, r2
 8000fa6:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 8000faa:	bf00      	nop
 8000fac:	370c      	adds	r7, #12
 8000fae:	46bd      	mov	sp, r7
 8000fb0:	bc80      	pop	{r7}
 8000fb2:	4770      	bx	lr
 8000fb4:	e000e100 	.word	0xe000e100

08000fb8 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8000fb8:	b480      	push	{r7}
 8000fba:	b083      	sub	sp, #12
 8000fbc:	af00      	add	r7, sp, #0
 8000fbe:	4603      	mov	r3, r0
 8000fc0:	6039      	str	r1, [r7, #0]
 8000fc2:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000fc4:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000fc8:	2b00      	cmp	r3, #0
 8000fca:	db0a      	blt.n	8000fe2 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000fcc:	683b      	ldr	r3, [r7, #0]
 8000fce:	b2da      	uxtb	r2, r3
 8000fd0:	490c      	ldr	r1, [pc, #48]	; (8001004 <__NVIC_SetPriority+0x4c>)
 8000fd2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000fd6:	0112      	lsls	r2, r2, #4
 8000fd8:	b2d2      	uxtb	r2, r2
 8000fda:	440b      	add	r3, r1
 8000fdc:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8000fe0:	e00a      	b.n	8000ff8 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000fe2:	683b      	ldr	r3, [r7, #0]
 8000fe4:	b2da      	uxtb	r2, r3
 8000fe6:	4908      	ldr	r1, [pc, #32]	; (8001008 <__NVIC_SetPriority+0x50>)
 8000fe8:	79fb      	ldrb	r3, [r7, #7]
 8000fea:	f003 030f 	and.w	r3, r3, #15
 8000fee:	3b04      	subs	r3, #4
 8000ff0:	0112      	lsls	r2, r2, #4
 8000ff2:	b2d2      	uxtb	r2, r2
 8000ff4:	440b      	add	r3, r1
 8000ff6:	761a      	strb	r2, [r3, #24]
}
 8000ff8:	bf00      	nop
 8000ffa:	370c      	adds	r7, #12
 8000ffc:	46bd      	mov	sp, r7
 8000ffe:	bc80      	pop	{r7}
 8001000:	4770      	bx	lr
 8001002:	bf00      	nop
 8001004:	e000e100 	.word	0xe000e100
 8001008:	e000ed00 	.word	0xe000ed00

0800100c <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 800100c:	b480      	push	{r7}
 800100e:	b089      	sub	sp, #36	; 0x24
 8001010:	af00      	add	r7, sp, #0
 8001012:	60f8      	str	r0, [r7, #12]
 8001014:	60b9      	str	r1, [r7, #8]
 8001016:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8001018:	68fb      	ldr	r3, [r7, #12]
 800101a:	f003 0307 	and.w	r3, r3, #7
 800101e:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8001020:	69fb      	ldr	r3, [r7, #28]
 8001022:	f1c3 0307 	rsb	r3, r3, #7
 8001026:	2b04      	cmp	r3, #4
 8001028:	bf28      	it	cs
 800102a:	2304      	movcs	r3, #4
 800102c:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 800102e:	69fb      	ldr	r3, [r7, #28]
 8001030:	3304      	adds	r3, #4
 8001032:	2b06      	cmp	r3, #6
 8001034:	d902      	bls.n	800103c <NVIC_EncodePriority+0x30>
 8001036:	69fb      	ldr	r3, [r7, #28]
 8001038:	3b03      	subs	r3, #3
 800103a:	e000      	b.n	800103e <NVIC_EncodePriority+0x32>
 800103c:	2300      	movs	r3, #0
 800103e:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001040:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8001044:	69bb      	ldr	r3, [r7, #24]
 8001046:	fa02 f303 	lsl.w	r3, r2, r3
 800104a:	43da      	mvns	r2, r3
 800104c:	68bb      	ldr	r3, [r7, #8]
 800104e:	401a      	ands	r2, r3
 8001050:	697b      	ldr	r3, [r7, #20]
 8001052:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8001054:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
 8001058:	697b      	ldr	r3, [r7, #20]
 800105a:	fa01 f303 	lsl.w	r3, r1, r3
 800105e:	43d9      	mvns	r1, r3
 8001060:	687b      	ldr	r3, [r7, #4]
 8001062:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001064:	4313      	orrs	r3, r2
         );
}
 8001066:	4618      	mov	r0, r3
 8001068:	3724      	adds	r7, #36	; 0x24
 800106a:	46bd      	mov	sp, r7
 800106c:	bc80      	pop	{r7}
 800106e:	4770      	bx	lr

08001070 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8001070:	b580      	push	{r7, lr}
 8001072:	b082      	sub	sp, #8
 8001074:	af00      	add	r7, sp, #0
 8001076:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8001078:	687b      	ldr	r3, [r7, #4]
 800107a:	3b01      	subs	r3, #1
 800107c:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8001080:	d301      	bcc.n	8001086 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8001082:	2301      	movs	r3, #1
 8001084:	e00f      	b.n	80010a6 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8001086:	4a0a      	ldr	r2, [pc, #40]	; (80010b0 <SysTick_Config+0x40>)
 8001088:	687b      	ldr	r3, [r7, #4]
 800108a:	3b01      	subs	r3, #1
 800108c:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 800108e:	210f      	movs	r1, #15
 8001090:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8001094:	f7ff ff90 	bl	8000fb8 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8001098:	4b05      	ldr	r3, [pc, #20]	; (80010b0 <SysTick_Config+0x40>)
 800109a:	2200      	movs	r2, #0
 800109c:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 800109e:	4b04      	ldr	r3, [pc, #16]	; (80010b0 <SysTick_Config+0x40>)
 80010a0:	2207      	movs	r2, #7
 80010a2:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 80010a4:	2300      	movs	r3, #0
}
 80010a6:	4618      	mov	r0, r3
 80010a8:	3708      	adds	r7, #8
 80010aa:	46bd      	mov	sp, r7
 80010ac:	bd80      	pop	{r7, pc}
 80010ae:	bf00      	nop
 80010b0:	e000e010 	.word	0xe000e010

080010b4 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80010b4:	b580      	push	{r7, lr}
 80010b6:	b082      	sub	sp, #8
 80010b8:	af00      	add	r7, sp, #0
 80010ba:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 80010bc:	6878      	ldr	r0, [r7, #4]
 80010be:	f7ff ff2d 	bl	8000f1c <__NVIC_SetPriorityGrouping>
}
 80010c2:	bf00      	nop
 80010c4:	3708      	adds	r7, #8
 80010c6:	46bd      	mov	sp, r7
 80010c8:	bd80      	pop	{r7, pc}

080010ca <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 80010ca:	b580      	push	{r7, lr}
 80010cc:	b086      	sub	sp, #24
 80010ce:	af00      	add	r7, sp, #0
 80010d0:	4603      	mov	r3, r0
 80010d2:	60b9      	str	r1, [r7, #8]
 80010d4:	607a      	str	r2, [r7, #4]
 80010d6:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 80010d8:	2300      	movs	r3, #0
 80010da:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 80010dc:	f7ff ff42 	bl	8000f64 <__NVIC_GetPriorityGrouping>
 80010e0:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 80010e2:	687a      	ldr	r2, [r7, #4]
 80010e4:	68b9      	ldr	r1, [r7, #8]
 80010e6:	6978      	ldr	r0, [r7, #20]
 80010e8:	f7ff ff90 	bl	800100c <NVIC_EncodePriority>
 80010ec:	4602      	mov	r2, r0
 80010ee:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80010f2:	4611      	mov	r1, r2
 80010f4:	4618      	mov	r0, r3
 80010f6:	f7ff ff5f 	bl	8000fb8 <__NVIC_SetPriority>
}
 80010fa:	bf00      	nop
 80010fc:	3718      	adds	r7, #24
 80010fe:	46bd      	mov	sp, r7
 8001100:	bd80      	pop	{r7, pc}

08001102 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f10xxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001102:	b580      	push	{r7, lr}
 8001104:	b082      	sub	sp, #8
 8001106:	af00      	add	r7, sp, #0
 8001108:	4603      	mov	r3, r0
 800110a:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 800110c:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001110:	4618      	mov	r0, r3
 8001112:	f7ff ff35 	bl	8000f80 <__NVIC_EnableIRQ>
}
 8001116:	bf00      	nop
 8001118:	3708      	adds	r7, #8
 800111a:	46bd      	mov	sp, r7
 800111c:	bd80      	pop	{r7, pc}

0800111e <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 800111e:	b580      	push	{r7, lr}
 8001120:	b082      	sub	sp, #8
 8001122:	af00      	add	r7, sp, #0
 8001124:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8001126:	6878      	ldr	r0, [r7, #4]
 8001128:	f7ff ffa2 	bl	8001070 <SysTick_Config>
 800112c:	4603      	mov	r3, r0
}
 800112e:	4618      	mov	r0, r3
 8001130:	3708      	adds	r7, #8
 8001132:	46bd      	mov	sp, r7
 8001134:	bd80      	pop	{r7, pc}
	...

08001138 <HAL_DMA_Init>:
  * @param  hdma: Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 8001138:	b480      	push	{r7}
 800113a:	b085      	sub	sp, #20
 800113c:	af00      	add	r7, sp, #0
 800113e:	6078      	str	r0, [r7, #4]
  uint32_t tmp = 0U;
 8001140:	2300      	movs	r3, #0
 8001142:	60fb      	str	r3, [r7, #12]

  /* Check the DMA handle allocation */
  if(hdma == NULL)
 8001144:	687b      	ldr	r3, [r7, #4]
 8001146:	2b00      	cmp	r3, #0
 8001148:	d101      	bne.n	800114e <HAL_DMA_Init+0x16>
  {
    return HAL_ERROR;
 800114a:	2301      	movs	r3, #1
 800114c:	e043      	b.n	80011d6 <HAL_DMA_Init+0x9e>
    hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA2_Channel1) / ((uint32_t)DMA2_Channel2 - (uint32_t)DMA2_Channel1)) << 2;
    hdma->DmaBaseAddress = DMA2;
  }
#else
  /* DMA1 */
  hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA1_Channel1) / ((uint32_t)DMA1_Channel2 - (uint32_t)DMA1_Channel1)) << 2;
 800114e:	687b      	ldr	r3, [r7, #4]
 8001150:	681b      	ldr	r3, [r3, #0]
 8001152:	461a      	mov	r2, r3
 8001154:	4b22      	ldr	r3, [pc, #136]	; (80011e0 <HAL_DMA_Init+0xa8>)
 8001156:	4413      	add	r3, r2
 8001158:	4a22      	ldr	r2, [pc, #136]	; (80011e4 <HAL_DMA_Init+0xac>)
 800115a:	fba2 2303 	umull	r2, r3, r2, r3
 800115e:	091b      	lsrs	r3, r3, #4
 8001160:	009a      	lsls	r2, r3, #2
 8001162:	687b      	ldr	r3, [r7, #4]
 8001164:	641a      	str	r2, [r3, #64]	; 0x40
  hdma->DmaBaseAddress = DMA1;
 8001166:	687b      	ldr	r3, [r7, #4]
 8001168:	4a1f      	ldr	r2, [pc, #124]	; (80011e8 <HAL_DMA_Init+0xb0>)
 800116a:	63da      	str	r2, [r3, #60]	; 0x3c
#endif /* DMA2 */

  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 800116c:	687b      	ldr	r3, [r7, #4]
 800116e:	2202      	movs	r2, #2
 8001170:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21

  /* Get the CR register value */
  tmp = hdma->Instance->CCR;
 8001174:	687b      	ldr	r3, [r7, #4]
 8001176:	681b      	ldr	r3, [r3, #0]
 8001178:	681b      	ldr	r3, [r3, #0]
 800117a:	60fb      	str	r3, [r7, #12]

  /* Clear PL, MSIZE, PSIZE, MINC, PINC, CIRC and DIR bits */
  tmp &= ((uint32_t)~(DMA_CCR_PL    | DMA_CCR_MSIZE  | DMA_CCR_PSIZE  | \
 800117c:	68fb      	ldr	r3, [r7, #12]
 800117e:	f423 537f 	bic.w	r3, r3, #16320	; 0x3fc0
 8001182:	f023 0330 	bic.w	r3, r3, #48	; 0x30
 8001186:	60fb      	str	r3, [r7, #12]
                      DMA_CCR_MINC  | DMA_CCR_PINC   | DMA_CCR_CIRC   | \
                      DMA_CCR_DIR));

  /* Prepare the DMA Channel configuration */
  tmp |=  hdma->Init.Direction        |
 8001188:	687b      	ldr	r3, [r7, #4]
 800118a:	685a      	ldr	r2, [r3, #4]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 800118c:	687b      	ldr	r3, [r7, #4]
 800118e:	689b      	ldr	r3, [r3, #8]
  tmp |=  hdma->Init.Direction        |
 8001190:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8001192:	687b      	ldr	r3, [r7, #4]
 8001194:	68db      	ldr	r3, [r3, #12]
 8001196:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8001198:	687b      	ldr	r3, [r7, #4]
 800119a:	691b      	ldr	r3, [r3, #16]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 800119c:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 800119e:	687b      	ldr	r3, [r7, #4]
 80011a0:	695b      	ldr	r3, [r3, #20]
 80011a2:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 80011a4:	687b      	ldr	r3, [r7, #4]
 80011a6:	699b      	ldr	r3, [r3, #24]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 80011a8:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 80011aa:	687b      	ldr	r3, [r7, #4]
 80011ac:	69db      	ldr	r3, [r3, #28]
 80011ae:	4313      	orrs	r3, r2
  tmp |=  hdma->Init.Direction        |
 80011b0:	68fa      	ldr	r2, [r7, #12]
 80011b2:	4313      	orrs	r3, r2
 80011b4:	60fb      	str	r3, [r7, #12]

  /* Write to DMA Channel CR register */
  hdma->Instance->CCR = tmp;
 80011b6:	687b      	ldr	r3, [r7, #4]
 80011b8:	681b      	ldr	r3, [r3, #0]
 80011ba:	68fa      	ldr	r2, [r7, #12]
 80011bc:	601a      	str	r2, [r3, #0]

  /* Initialise the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 80011be:	687b      	ldr	r3, [r7, #4]
 80011c0:	2200      	movs	r2, #0
 80011c2:	639a      	str	r2, [r3, #56]	; 0x38

  /* Initialize the DMA state*/
  hdma->State = HAL_DMA_STATE_READY;
 80011c4:	687b      	ldr	r3, [r7, #4]
 80011c6:	2201      	movs	r2, #1
 80011c8:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21
  /* Allocate lock resource and initialize it */
  hdma->Lock = HAL_UNLOCKED;
 80011cc:	687b      	ldr	r3, [r7, #4]
 80011ce:	2200      	movs	r2, #0
 80011d0:	f883 2020 	strb.w	r2, [r3, #32]

  return HAL_OK;
 80011d4:	2300      	movs	r3, #0
}
 80011d6:	4618      	mov	r0, r3
 80011d8:	3714      	adds	r7, #20
 80011da:	46bd      	mov	sp, r7
 80011dc:	bc80      	pop	{r7}
 80011de:	4770      	bx	lr
 80011e0:	bffdfff8 	.word	0xbffdfff8
 80011e4:	cccccccd 	.word	0xcccccccd
 80011e8:	40020000 	.word	0x40020000

080011ec <HAL_DMA_Start_IT>:
  * @param  DstAddress: The destination memory Buffer address
  * @param  DataLength: The length of data to be transferred from source to destination
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Start_IT(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 80011ec:	b580      	push	{r7, lr}
 80011ee:	b086      	sub	sp, #24
 80011f0:	af00      	add	r7, sp, #0
 80011f2:	60f8      	str	r0, [r7, #12]
 80011f4:	60b9      	str	r1, [r7, #8]
 80011f6:	607a      	str	r2, [r7, #4]
 80011f8:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 80011fa:	2300      	movs	r3, #0
 80011fc:	75fb      	strb	r3, [r7, #23]

  /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));

  /* Process locked */
  __HAL_LOCK(hdma);
 80011fe:	68fb      	ldr	r3, [r7, #12]
 8001200:	f893 3020 	ldrb.w	r3, [r3, #32]
 8001204:	2b01      	cmp	r3, #1
 8001206:	d101      	bne.n	800120c <HAL_DMA_Start_IT+0x20>
 8001208:	2302      	movs	r3, #2
 800120a:	e04a      	b.n	80012a2 <HAL_DMA_Start_IT+0xb6>
 800120c:	68fb      	ldr	r3, [r7, #12]
 800120e:	2201      	movs	r2, #1
 8001210:	f883 2020 	strb.w	r2, [r3, #32]
  
  if(HAL_DMA_STATE_READY == hdma->State)
 8001214:	68fb      	ldr	r3, [r7, #12]
 8001216:	f893 3021 	ldrb.w	r3, [r3, #33]	; 0x21
 800121a:	2b01      	cmp	r3, #1
 800121c:	d13a      	bne.n	8001294 <HAL_DMA_Start_IT+0xa8>
  {
    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 800121e:	68fb      	ldr	r3, [r7, #12]
 8001220:	2202      	movs	r2, #2
 8001222:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8001226:	68fb      	ldr	r3, [r7, #12]
 8001228:	2200      	movs	r2, #0
 800122a:	639a      	str	r2, [r3, #56]	; 0x38
    
    /* Disable the peripheral */
    __HAL_DMA_DISABLE(hdma);
 800122c:	68fb      	ldr	r3, [r7, #12]
 800122e:	681b      	ldr	r3, [r3, #0]
 8001230:	681a      	ldr	r2, [r3, #0]
 8001232:	68fb      	ldr	r3, [r7, #12]
 8001234:	681b      	ldr	r3, [r3, #0]
 8001236:	f022 0201 	bic.w	r2, r2, #1
 800123a:	601a      	str	r2, [r3, #0]
    
    /* Configure the source, destination address and the data length & clear flags*/
    DMA_SetConfig(hdma, SrcAddress, DstAddress, DataLength);
 800123c:	683b      	ldr	r3, [r7, #0]
 800123e:	687a      	ldr	r2, [r7, #4]
 8001240:	68b9      	ldr	r1, [r7, #8]
 8001242:	68f8      	ldr	r0, [r7, #12]
 8001244:	f000 f938 	bl	80014b8 <DMA_SetConfig>
    
    /* Enable the transfer complete interrupt */
    /* Enable the transfer Error interrupt */
    if(NULL != hdma->XferHalfCpltCallback)
 8001248:	68fb      	ldr	r3, [r7, #12]
 800124a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800124c:	2b00      	cmp	r3, #0
 800124e:	d008      	beq.n	8001262 <HAL_DMA_Start_IT+0x76>
    {
      /* Enable the Half transfer complete interrupt as well */
      __HAL_DMA_ENABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8001250:	68fb      	ldr	r3, [r7, #12]
 8001252:	681b      	ldr	r3, [r3, #0]
 8001254:	681a      	ldr	r2, [r3, #0]
 8001256:	68fb      	ldr	r3, [r7, #12]
 8001258:	681b      	ldr	r3, [r3, #0]
 800125a:	f042 020e 	orr.w	r2, r2, #14
 800125e:	601a      	str	r2, [r3, #0]
 8001260:	e00f      	b.n	8001282 <HAL_DMA_Start_IT+0x96>
    }
    else
    {
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 8001262:	68fb      	ldr	r3, [r7, #12]
 8001264:	681b      	ldr	r3, [r3, #0]
 8001266:	681a      	ldr	r2, [r3, #0]
 8001268:	68fb      	ldr	r3, [r7, #12]
 800126a:	681b      	ldr	r3, [r3, #0]
 800126c:	f022 0204 	bic.w	r2, r2, #4
 8001270:	601a      	str	r2, [r3, #0]
      __HAL_DMA_ENABLE_IT(hdma, (DMA_IT_TC | DMA_IT_TE));
 8001272:	68fb      	ldr	r3, [r7, #12]
 8001274:	681b      	ldr	r3, [r3, #0]
 8001276:	681a      	ldr	r2, [r3, #0]
 8001278:	68fb      	ldr	r3, [r7, #12]
 800127a:	681b      	ldr	r3, [r3, #0]
 800127c:	f042 020a 	orr.w	r2, r2, #10
 8001280:	601a      	str	r2, [r3, #0]
    }
    /* Enable the Peripheral */
    __HAL_DMA_ENABLE(hdma);
 8001282:	68fb      	ldr	r3, [r7, #12]
 8001284:	681b      	ldr	r3, [r3, #0]
 8001286:	681a      	ldr	r2, [r3, #0]
 8001288:	68fb      	ldr	r3, [r7, #12]
 800128a:	681b      	ldr	r3, [r3, #0]
 800128c:	f042 0201 	orr.w	r2, r2, #1
 8001290:	601a      	str	r2, [r3, #0]
 8001292:	e005      	b.n	80012a0 <HAL_DMA_Start_IT+0xb4>
  }
  else
  {      
    /* Process Unlocked */
    __HAL_UNLOCK(hdma); 
 8001294:	68fb      	ldr	r3, [r7, #12]
 8001296:	2200      	movs	r2, #0
 8001298:	f883 2020 	strb.w	r2, [r3, #32]

    /* Remain BUSY */
    status = HAL_BUSY;
 800129c:	2302      	movs	r3, #2
 800129e:	75fb      	strb	r3, [r7, #23]
  }    
  return status;
 80012a0:	7dfb      	ldrb	r3, [r7, #23]
}
 80012a2:	4618      	mov	r0, r3
 80012a4:	3718      	adds	r7, #24
 80012a6:	46bd      	mov	sp, r7
 80012a8:	bd80      	pop	{r7, pc}
	...

080012ac <HAL_DMA_IRQHandler>:
  * @param  hdma: pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.  
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 80012ac:	b580      	push	{r7, lr}
 80012ae:	b084      	sub	sp, #16
 80012b0:	af00      	add	r7, sp, #0
 80012b2:	6078      	str	r0, [r7, #4]
  uint32_t flag_it = hdma->DmaBaseAddress->ISR;
 80012b4:	687b      	ldr	r3, [r7, #4]
 80012b6:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80012b8:	681b      	ldr	r3, [r3, #0]
 80012ba:	60fb      	str	r3, [r7, #12]
  uint32_t source_it = hdma->Instance->CCR;
 80012bc:	687b      	ldr	r3, [r7, #4]
 80012be:	681b      	ldr	r3, [r3, #0]
 80012c0:	681b      	ldr	r3, [r3, #0]
 80012c2:	60bb      	str	r3, [r7, #8]
  
  /* Half Transfer Complete Interrupt management ******************************/
  if (((flag_it & (DMA_FLAG_HT1 << hdma->ChannelIndex)) != RESET) && ((source_it & DMA_IT_HT) != RESET))
 80012c4:	687b      	ldr	r3, [r7, #4]
 80012c6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80012c8:	2204      	movs	r2, #4
 80012ca:	409a      	lsls	r2, r3
 80012cc:	68fb      	ldr	r3, [r7, #12]
 80012ce:	4013      	ands	r3, r2
 80012d0:	2b00      	cmp	r3, #0
 80012d2:	d04f      	beq.n	8001374 <HAL_DMA_IRQHandler+0xc8>
 80012d4:	68bb      	ldr	r3, [r7, #8]
 80012d6:	f003 0304 	and.w	r3, r3, #4
 80012da:	2b00      	cmp	r3, #0
 80012dc:	d04a      	beq.n	8001374 <HAL_DMA_IRQHandler+0xc8>
  {
    /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
    if((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 80012de:	687b      	ldr	r3, [r7, #4]
 80012e0:	681b      	ldr	r3, [r3, #0]
 80012e2:	681b      	ldr	r3, [r3, #0]
 80012e4:	f003 0320 	and.w	r3, r3, #32
 80012e8:	2b00      	cmp	r3, #0
 80012ea:	d107      	bne.n	80012fc <HAL_DMA_IRQHandler+0x50>
    {
      /* Disable the half transfer interrupt */
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 80012ec:	687b      	ldr	r3, [r7, #4]
 80012ee:	681b      	ldr	r3, [r3, #0]
 80012f0:	681a      	ldr	r2, [r3, #0]
 80012f2:	687b      	ldr	r3, [r7, #4]
 80012f4:	681b      	ldr	r3, [r3, #0]
 80012f6:	f022 0204 	bic.w	r2, r2, #4
 80012fa:	601a      	str	r2, [r3, #0]
    }
    /* Clear the half transfer complete flag */
    __HAL_DMA_CLEAR_FLAG(hdma, __HAL_DMA_GET_HT_FLAG_INDEX(hdma));
 80012fc:	687b      	ldr	r3, [r7, #4]
 80012fe:	681b      	ldr	r3, [r3, #0]
 8001300:	4a66      	ldr	r2, [pc, #408]	; (800149c <HAL_DMA_IRQHandler+0x1f0>)
 8001302:	4293      	cmp	r3, r2
 8001304:	d029      	beq.n	800135a <HAL_DMA_IRQHandler+0xae>
 8001306:	687b      	ldr	r3, [r7, #4]
 8001308:	681b      	ldr	r3, [r3, #0]
 800130a:	4a65      	ldr	r2, [pc, #404]	; (80014a0 <HAL_DMA_IRQHandler+0x1f4>)
 800130c:	4293      	cmp	r3, r2
 800130e:	d022      	beq.n	8001356 <HAL_DMA_IRQHandler+0xaa>
 8001310:	687b      	ldr	r3, [r7, #4]
 8001312:	681b      	ldr	r3, [r3, #0]
 8001314:	4a63      	ldr	r2, [pc, #396]	; (80014a4 <HAL_DMA_IRQHandler+0x1f8>)
 8001316:	4293      	cmp	r3, r2
 8001318:	d01a      	beq.n	8001350 <HAL_DMA_IRQHandler+0xa4>
 800131a:	687b      	ldr	r3, [r7, #4]
 800131c:	681b      	ldr	r3, [r3, #0]
 800131e:	4a62      	ldr	r2, [pc, #392]	; (80014a8 <HAL_DMA_IRQHandler+0x1fc>)
 8001320:	4293      	cmp	r3, r2
 8001322:	d012      	beq.n	800134a <HAL_DMA_IRQHandler+0x9e>
 8001324:	687b      	ldr	r3, [r7, #4]
 8001326:	681b      	ldr	r3, [r3, #0]
 8001328:	4a60      	ldr	r2, [pc, #384]	; (80014ac <HAL_DMA_IRQHandler+0x200>)
 800132a:	4293      	cmp	r3, r2
 800132c:	d00a      	beq.n	8001344 <HAL_DMA_IRQHandler+0x98>
 800132e:	687b      	ldr	r3, [r7, #4]
 8001330:	681b      	ldr	r3, [r3, #0]
 8001332:	4a5f      	ldr	r2, [pc, #380]	; (80014b0 <HAL_DMA_IRQHandler+0x204>)
 8001334:	4293      	cmp	r3, r2
 8001336:	d102      	bne.n	800133e <HAL_DMA_IRQHandler+0x92>
 8001338:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 800133c:	e00e      	b.n	800135c <HAL_DMA_IRQHandler+0xb0>
 800133e:	f04f 6380 	mov.w	r3, #67108864	; 0x4000000
 8001342:	e00b      	b.n	800135c <HAL_DMA_IRQHandler+0xb0>
 8001344:	f44f 2380 	mov.w	r3, #262144	; 0x40000
 8001348:	e008      	b.n	800135c <HAL_DMA_IRQHandler+0xb0>
 800134a:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 800134e:	e005      	b.n	800135c <HAL_DMA_IRQHandler+0xb0>
 8001350:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8001354:	e002      	b.n	800135c <HAL_DMA_IRQHandler+0xb0>
 8001356:	2340      	movs	r3, #64	; 0x40
 8001358:	e000      	b.n	800135c <HAL_DMA_IRQHandler+0xb0>
 800135a:	2304      	movs	r3, #4
 800135c:	4a55      	ldr	r2, [pc, #340]	; (80014b4 <HAL_DMA_IRQHandler+0x208>)
 800135e:	6053      	str	r3, [r2, #4]

    /* DMA peripheral state is not updated in Half Transfer */
    /* but in Transfer Complete case */

    if(hdma->XferHalfCpltCallback != NULL)
 8001360:	687b      	ldr	r3, [r7, #4]
 8001362:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001364:	2b00      	cmp	r3, #0
 8001366:	f000 8094 	beq.w	8001492 <HAL_DMA_IRQHandler+0x1e6>
    {
      /* Half transfer callback */
      hdma->XferHalfCpltCallback(hdma);
 800136a:	687b      	ldr	r3, [r7, #4]
 800136c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800136e:	6878      	ldr	r0, [r7, #4]
 8001370:	4798      	blx	r3
    if(hdma->XferHalfCpltCallback != NULL)
 8001372:	e08e      	b.n	8001492 <HAL_DMA_IRQHandler+0x1e6>
    }
  }

  /* Transfer Complete Interrupt management ***********************************/
  else if (((flag_it & (DMA_FLAG_TC1 << hdma->ChannelIndex)) != RESET) && ((source_it & DMA_IT_TC) != RESET))
 8001374:	687b      	ldr	r3, [r7, #4]
 8001376:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001378:	2202      	movs	r2, #2
 800137a:	409a      	lsls	r2, r3
 800137c:	68fb      	ldr	r3, [r7, #12]
 800137e:	4013      	ands	r3, r2
 8001380:	2b00      	cmp	r3, #0
 8001382:	d056      	beq.n	8001432 <HAL_DMA_IRQHandler+0x186>
 8001384:	68bb      	ldr	r3, [r7, #8]
 8001386:	f003 0302 	and.w	r3, r3, #2
 800138a:	2b00      	cmp	r3, #0
 800138c:	d051      	beq.n	8001432 <HAL_DMA_IRQHandler+0x186>
  {
    if((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 800138e:	687b      	ldr	r3, [r7, #4]
 8001390:	681b      	ldr	r3, [r3, #0]
 8001392:	681b      	ldr	r3, [r3, #0]
 8001394:	f003 0320 	and.w	r3, r3, #32
 8001398:	2b00      	cmp	r3, #0
 800139a:	d10b      	bne.n	80013b4 <HAL_DMA_IRQHandler+0x108>
    {
      /* Disable the transfer complete and error interrupt */
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_TE | DMA_IT_TC);  
 800139c:	687b      	ldr	r3, [r7, #4]
 800139e:	681b      	ldr	r3, [r3, #0]
 80013a0:	681a      	ldr	r2, [r3, #0]
 80013a2:	687b      	ldr	r3, [r7, #4]
 80013a4:	681b      	ldr	r3, [r3, #0]
 80013a6:	f022 020a 	bic.w	r2, r2, #10
 80013aa:	601a      	str	r2, [r3, #0]

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 80013ac:	687b      	ldr	r3, [r7, #4]
 80013ae:	2201      	movs	r2, #1
 80013b0:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21
    }
    /* Clear the transfer complete flag */
      __HAL_DMA_CLEAR_FLAG(hdma, __HAL_DMA_GET_TC_FLAG_INDEX(hdma));
 80013b4:	687b      	ldr	r3, [r7, #4]
 80013b6:	681b      	ldr	r3, [r3, #0]
 80013b8:	4a38      	ldr	r2, [pc, #224]	; (800149c <HAL_DMA_IRQHandler+0x1f0>)
 80013ba:	4293      	cmp	r3, r2
 80013bc:	d029      	beq.n	8001412 <HAL_DMA_IRQHandler+0x166>
 80013be:	687b      	ldr	r3, [r7, #4]
 80013c0:	681b      	ldr	r3, [r3, #0]
 80013c2:	4a37      	ldr	r2, [pc, #220]	; (80014a0 <HAL_DMA_IRQHandler+0x1f4>)
 80013c4:	4293      	cmp	r3, r2
 80013c6:	d022      	beq.n	800140e <HAL_DMA_IRQHandler+0x162>
 80013c8:	687b      	ldr	r3, [r7, #4]
 80013ca:	681b      	ldr	r3, [r3, #0]
 80013cc:	4a35      	ldr	r2, [pc, #212]	; (80014a4 <HAL_DMA_IRQHandler+0x1f8>)
 80013ce:	4293      	cmp	r3, r2
 80013d0:	d01a      	beq.n	8001408 <HAL_DMA_IRQHandler+0x15c>
 80013d2:	687b      	ldr	r3, [r7, #4]
 80013d4:	681b      	ldr	r3, [r3, #0]
 80013d6:	4a34      	ldr	r2, [pc, #208]	; (80014a8 <HAL_DMA_IRQHandler+0x1fc>)
 80013d8:	4293      	cmp	r3, r2
 80013da:	d012      	beq.n	8001402 <HAL_DMA_IRQHandler+0x156>
 80013dc:	687b      	ldr	r3, [r7, #4]
 80013de:	681b      	ldr	r3, [r3, #0]
 80013e0:	4a32      	ldr	r2, [pc, #200]	; (80014ac <HAL_DMA_IRQHandler+0x200>)
 80013e2:	4293      	cmp	r3, r2
 80013e4:	d00a      	beq.n	80013fc <HAL_DMA_IRQHandler+0x150>
 80013e6:	687b      	ldr	r3, [r7, #4]
 80013e8:	681b      	ldr	r3, [r3, #0]
 80013ea:	4a31      	ldr	r2, [pc, #196]	; (80014b0 <HAL_DMA_IRQHandler+0x204>)
 80013ec:	4293      	cmp	r3, r2
 80013ee:	d102      	bne.n	80013f6 <HAL_DMA_IRQHandler+0x14a>
 80013f0:	f44f 1300 	mov.w	r3, #2097152	; 0x200000
 80013f4:	e00e      	b.n	8001414 <HAL_DMA_IRQHandler+0x168>
 80013f6:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 80013fa:	e00b      	b.n	8001414 <HAL_DMA_IRQHandler+0x168>
 80013fc:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8001400:	e008      	b.n	8001414 <HAL_DMA_IRQHandler+0x168>
 8001402:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8001406:	e005      	b.n	8001414 <HAL_DMA_IRQHandler+0x168>
 8001408:	f44f 7300 	mov.w	r3, #512	; 0x200
 800140c:	e002      	b.n	8001414 <HAL_DMA_IRQHandler+0x168>
 800140e:	2320      	movs	r3, #32
 8001410:	e000      	b.n	8001414 <HAL_DMA_IRQHandler+0x168>
 8001412:	2302      	movs	r3, #2
 8001414:	4a27      	ldr	r2, [pc, #156]	; (80014b4 <HAL_DMA_IRQHandler+0x208>)
 8001416:	6053      	str	r3, [r2, #4]

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8001418:	687b      	ldr	r3, [r7, #4]
 800141a:	2200      	movs	r2, #0
 800141c:	f883 2020 	strb.w	r2, [r3, #32]

    if(hdma->XferCpltCallback != NULL)
 8001420:	687b      	ldr	r3, [r7, #4]
 8001422:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001424:	2b00      	cmp	r3, #0
 8001426:	d034      	beq.n	8001492 <HAL_DMA_IRQHandler+0x1e6>
    {
      /* Transfer complete callback */
      hdma->XferCpltCallback(hdma);
 8001428:	687b      	ldr	r3, [r7, #4]
 800142a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800142c:	6878      	ldr	r0, [r7, #4]
 800142e:	4798      	blx	r3
    if(hdma->XferCpltCallback != NULL)
 8001430:	e02f      	b.n	8001492 <HAL_DMA_IRQHandler+0x1e6>
    }
  }

  /* Transfer Error Interrupt management **************************************/
  else if (( RESET != (flag_it & (DMA_FLAG_TE1 << hdma->ChannelIndex))) && (RESET != (source_it & DMA_IT_TE)))
 8001432:	687b      	ldr	r3, [r7, #4]
 8001434:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001436:	2208      	movs	r2, #8
 8001438:	409a      	lsls	r2, r3
 800143a:	68fb      	ldr	r3, [r7, #12]
 800143c:	4013      	ands	r3, r2
 800143e:	2b00      	cmp	r3, #0
 8001440:	d028      	beq.n	8001494 <HAL_DMA_IRQHandler+0x1e8>
 8001442:	68bb      	ldr	r3, [r7, #8]
 8001444:	f003 0308 	and.w	r3, r3, #8
 8001448:	2b00      	cmp	r3, #0
 800144a:	d023      	beq.n	8001494 <HAL_DMA_IRQHandler+0x1e8>
  {
    /* When a DMA transfer error occurs */
    /* A hardware clear of its EN bits is performed */
    /* Disable ALL DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 800144c:	687b      	ldr	r3, [r7, #4]
 800144e:	681b      	ldr	r3, [r3, #0]
 8001450:	681a      	ldr	r2, [r3, #0]
 8001452:	687b      	ldr	r3, [r7, #4]
 8001454:	681b      	ldr	r3, [r3, #0]
 8001456:	f022 020e 	bic.w	r2, r2, #14
 800145a:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << hdma->ChannelIndex);
 800145c:	687b      	ldr	r3, [r7, #4]
 800145e:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8001460:	687b      	ldr	r3, [r7, #4]
 8001462:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8001464:	2101      	movs	r1, #1
 8001466:	fa01 f202 	lsl.w	r2, r1, r2
 800146a:	605a      	str	r2, [r3, #4]

    /* Update error code */
    hdma->ErrorCode = HAL_DMA_ERROR_TE;
 800146c:	687b      	ldr	r3, [r7, #4]
 800146e:	2201      	movs	r2, #1
 8001470:	639a      	str	r2, [r3, #56]	; 0x38

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 8001472:	687b      	ldr	r3, [r7, #4]
 8001474:	2201      	movs	r2, #1
 8001476:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 800147a:	687b      	ldr	r3, [r7, #4]
 800147c:	2200      	movs	r2, #0
 800147e:	f883 2020 	strb.w	r2, [r3, #32]

    if (hdma->XferErrorCallback != NULL)
 8001482:	687b      	ldr	r3, [r7, #4]
 8001484:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001486:	2b00      	cmp	r3, #0
 8001488:	d004      	beq.n	8001494 <HAL_DMA_IRQHandler+0x1e8>
    {
      /* Transfer error callback */
      hdma->XferErrorCallback(hdma);
 800148a:	687b      	ldr	r3, [r7, #4]
 800148c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800148e:	6878      	ldr	r0, [r7, #4]
 8001490:	4798      	blx	r3
    }
  }
  return;
 8001492:	bf00      	nop
 8001494:	bf00      	nop
}
 8001496:	3710      	adds	r7, #16
 8001498:	46bd      	mov	sp, r7
 800149a:	bd80      	pop	{r7, pc}
 800149c:	40020008 	.word	0x40020008
 80014a0:	4002001c 	.word	0x4002001c
 80014a4:	40020030 	.word	0x40020030
 80014a8:	40020044 	.word	0x40020044
 80014ac:	40020058 	.word	0x40020058
 80014b0:	4002006c 	.word	0x4002006c
 80014b4:	40020000 	.word	0x40020000

080014b8 <DMA_SetConfig>:
  * @param  DstAddress: The destination memory Buffer address
  * @param  DataLength: The length of data to be transferred from source to destination
  * @retval HAL status
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 80014b8:	b480      	push	{r7}
 80014ba:	b085      	sub	sp, #20
 80014bc:	af00      	add	r7, sp, #0
 80014be:	60f8      	str	r0, [r7, #12]
 80014c0:	60b9      	str	r1, [r7, #8]
 80014c2:	607a      	str	r2, [r7, #4]
 80014c4:	603b      	str	r3, [r7, #0]
  /* Clear all flags */
  hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << hdma->ChannelIndex);
 80014c6:	68fb      	ldr	r3, [r7, #12]
 80014c8:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 80014ca:	68fb      	ldr	r3, [r7, #12]
 80014cc:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80014ce:	2101      	movs	r1, #1
 80014d0:	fa01 f202 	lsl.w	r2, r1, r2
 80014d4:	605a      	str	r2, [r3, #4]

  /* Configure DMA Channel data length */
  hdma->Instance->CNDTR = DataLength;
 80014d6:	68fb      	ldr	r3, [r7, #12]
 80014d8:	681b      	ldr	r3, [r3, #0]
 80014da:	683a      	ldr	r2, [r7, #0]
 80014dc:	605a      	str	r2, [r3, #4]

  /* Memory to Peripheral */
  if((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 80014de:	68fb      	ldr	r3, [r7, #12]
 80014e0:	685b      	ldr	r3, [r3, #4]
 80014e2:	2b10      	cmp	r3, #16
 80014e4:	d108      	bne.n	80014f8 <DMA_SetConfig+0x40>
  {
    /* Configure DMA Channel destination address */
    hdma->Instance->CPAR = DstAddress;
 80014e6:	68fb      	ldr	r3, [r7, #12]
 80014e8:	681b      	ldr	r3, [r3, #0]
 80014ea:	687a      	ldr	r2, [r7, #4]
 80014ec:	609a      	str	r2, [r3, #8]

    /* Configure DMA Channel source address */
    hdma->Instance->CMAR = SrcAddress;
 80014ee:	68fb      	ldr	r3, [r7, #12]
 80014f0:	681b      	ldr	r3, [r3, #0]
 80014f2:	68ba      	ldr	r2, [r7, #8]
 80014f4:	60da      	str	r2, [r3, #12]
    hdma->Instance->CPAR = SrcAddress;

    /* Configure DMA Channel destination address */
    hdma->Instance->CMAR = DstAddress;
  }
}
 80014f6:	e007      	b.n	8001508 <DMA_SetConfig+0x50>
    hdma->Instance->CPAR = SrcAddress;
 80014f8:	68fb      	ldr	r3, [r7, #12]
 80014fa:	681b      	ldr	r3, [r3, #0]
 80014fc:	68ba      	ldr	r2, [r7, #8]
 80014fe:	609a      	str	r2, [r3, #8]
    hdma->Instance->CMAR = DstAddress;
 8001500:	68fb      	ldr	r3, [r7, #12]
 8001502:	681b      	ldr	r3, [r3, #0]
 8001504:	687a      	ldr	r2, [r7, #4]
 8001506:	60da      	str	r2, [r3, #12]
}
 8001508:	bf00      	nop
 800150a:	3714      	adds	r7, #20
 800150c:	46bd      	mov	sp, r7
 800150e:	bc80      	pop	{r7}
 8001510:	4770      	bx	lr
	...

08001514 <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8001514:	b480      	push	{r7}
 8001516:	b08b      	sub	sp, #44	; 0x2c
 8001518:	af00      	add	r7, sp, #0
 800151a:	6078      	str	r0, [r7, #4]
 800151c:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 800151e:	2300      	movs	r3, #0
 8001520:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t ioposition;
  uint32_t iocurrent;
  uint32_t temp;
  uint32_t config = 0x00u;
 8001522:	2300      	movs	r3, #0
 8001524:	623b      	str	r3, [r7, #32]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8001526:	e127      	b.n	8001778 <HAL_GPIO_Init+0x264>
  {
    /* Get the IO position */
    ioposition = (0x01uL << position);
 8001528:	2201      	movs	r2, #1
 800152a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800152c:	fa02 f303 	lsl.w	r3, r2, r3
 8001530:	61fb      	str	r3, [r7, #28]

    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8001532:	683b      	ldr	r3, [r7, #0]
 8001534:	681b      	ldr	r3, [r3, #0]
 8001536:	69fa      	ldr	r2, [r7, #28]
 8001538:	4013      	ands	r3, r2
 800153a:	61bb      	str	r3, [r7, #24]

    if (iocurrent == ioposition)
 800153c:	69ba      	ldr	r2, [r7, #24]
 800153e:	69fb      	ldr	r3, [r7, #28]
 8001540:	429a      	cmp	r2, r3
 8001542:	f040 8116 	bne.w	8001772 <HAL_GPIO_Init+0x25e>
    {
      /* Check the Alternate function parameters */
      assert_param(IS_GPIO_AF_INSTANCE(GPIOx));

      /* Based on the required mode, filling config variable with MODEy[1:0] and CNFy[3:2] corresponding bits */
      switch (GPIO_Init->Mode)
 8001546:	683b      	ldr	r3, [r7, #0]
 8001548:	685b      	ldr	r3, [r3, #4]
 800154a:	2b12      	cmp	r3, #18
 800154c:	d034      	beq.n	80015b8 <HAL_GPIO_Init+0xa4>
 800154e:	2b12      	cmp	r3, #18
 8001550:	d80d      	bhi.n	800156e <HAL_GPIO_Init+0x5a>
 8001552:	2b02      	cmp	r3, #2
 8001554:	d02b      	beq.n	80015ae <HAL_GPIO_Init+0x9a>
 8001556:	2b02      	cmp	r3, #2
 8001558:	d804      	bhi.n	8001564 <HAL_GPIO_Init+0x50>
 800155a:	2b00      	cmp	r3, #0
 800155c:	d031      	beq.n	80015c2 <HAL_GPIO_Init+0xae>
 800155e:	2b01      	cmp	r3, #1
 8001560:	d01c      	beq.n	800159c <HAL_GPIO_Init+0x88>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
          break;

        /* Parameters are checked with assert_param */
        default:
          break;
 8001562:	e048      	b.n	80015f6 <HAL_GPIO_Init+0xe2>
      switch (GPIO_Init->Mode)
 8001564:	2b03      	cmp	r3, #3
 8001566:	d043      	beq.n	80015f0 <HAL_GPIO_Init+0xdc>
 8001568:	2b11      	cmp	r3, #17
 800156a:	d01b      	beq.n	80015a4 <HAL_GPIO_Init+0x90>
          break;
 800156c:	e043      	b.n	80015f6 <HAL_GPIO_Init+0xe2>
      switch (GPIO_Init->Mode)
 800156e:	4a89      	ldr	r2, [pc, #548]	; (8001794 <HAL_GPIO_Init+0x280>)
 8001570:	4293      	cmp	r3, r2
 8001572:	d026      	beq.n	80015c2 <HAL_GPIO_Init+0xae>
 8001574:	4a87      	ldr	r2, [pc, #540]	; (8001794 <HAL_GPIO_Init+0x280>)
 8001576:	4293      	cmp	r3, r2
 8001578:	d806      	bhi.n	8001588 <HAL_GPIO_Init+0x74>
 800157a:	4a87      	ldr	r2, [pc, #540]	; (8001798 <HAL_GPIO_Init+0x284>)
 800157c:	4293      	cmp	r3, r2
 800157e:	d020      	beq.n	80015c2 <HAL_GPIO_Init+0xae>
 8001580:	4a86      	ldr	r2, [pc, #536]	; (800179c <HAL_GPIO_Init+0x288>)
 8001582:	4293      	cmp	r3, r2
 8001584:	d01d      	beq.n	80015c2 <HAL_GPIO_Init+0xae>
          break;
 8001586:	e036      	b.n	80015f6 <HAL_GPIO_Init+0xe2>
      switch (GPIO_Init->Mode)
 8001588:	4a85      	ldr	r2, [pc, #532]	; (80017a0 <HAL_GPIO_Init+0x28c>)
 800158a:	4293      	cmp	r3, r2
 800158c:	d019      	beq.n	80015c2 <HAL_GPIO_Init+0xae>
 800158e:	4a85      	ldr	r2, [pc, #532]	; (80017a4 <HAL_GPIO_Init+0x290>)
 8001590:	4293      	cmp	r3, r2
 8001592:	d016      	beq.n	80015c2 <HAL_GPIO_Init+0xae>
 8001594:	4a84      	ldr	r2, [pc, #528]	; (80017a8 <HAL_GPIO_Init+0x294>)
 8001596:	4293      	cmp	r3, r2
 8001598:	d013      	beq.n	80015c2 <HAL_GPIO_Init+0xae>
          break;
 800159a:	e02c      	b.n	80015f6 <HAL_GPIO_Init+0xe2>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_PP;
 800159c:	683b      	ldr	r3, [r7, #0]
 800159e:	68db      	ldr	r3, [r3, #12]
 80015a0:	623b      	str	r3, [r7, #32]
          break;
 80015a2:	e028      	b.n	80015f6 <HAL_GPIO_Init+0xe2>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_OD;
 80015a4:	683b      	ldr	r3, [r7, #0]
 80015a6:	68db      	ldr	r3, [r3, #12]
 80015a8:	3304      	adds	r3, #4
 80015aa:	623b      	str	r3, [r7, #32]
          break;
 80015ac:	e023      	b.n	80015f6 <HAL_GPIO_Init+0xe2>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_PP;
 80015ae:	683b      	ldr	r3, [r7, #0]
 80015b0:	68db      	ldr	r3, [r3, #12]
 80015b2:	3308      	adds	r3, #8
 80015b4:	623b      	str	r3, [r7, #32]
          break;
 80015b6:	e01e      	b.n	80015f6 <HAL_GPIO_Init+0xe2>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_OD;
 80015b8:	683b      	ldr	r3, [r7, #0]
 80015ba:	68db      	ldr	r3, [r3, #12]
 80015bc:	330c      	adds	r3, #12
 80015be:	623b      	str	r3, [r7, #32]
          break;
 80015c0:	e019      	b.n	80015f6 <HAL_GPIO_Init+0xe2>
          if (GPIO_Init->Pull == GPIO_NOPULL)
 80015c2:	683b      	ldr	r3, [r7, #0]
 80015c4:	689b      	ldr	r3, [r3, #8]
 80015c6:	2b00      	cmp	r3, #0
 80015c8:	d102      	bne.n	80015d0 <HAL_GPIO_Init+0xbc>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_FLOATING;
 80015ca:	2304      	movs	r3, #4
 80015cc:	623b      	str	r3, [r7, #32]
          break;
 80015ce:	e012      	b.n	80015f6 <HAL_GPIO_Init+0xe2>
          else if (GPIO_Init->Pull == GPIO_PULLUP)
 80015d0:	683b      	ldr	r3, [r7, #0]
 80015d2:	689b      	ldr	r3, [r3, #8]
 80015d4:	2b01      	cmp	r3, #1
 80015d6:	d105      	bne.n	80015e4 <HAL_GPIO_Init+0xd0>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 80015d8:	2308      	movs	r3, #8
 80015da:	623b      	str	r3, [r7, #32]
            GPIOx->BSRR = ioposition;
 80015dc:	687b      	ldr	r3, [r7, #4]
 80015de:	69fa      	ldr	r2, [r7, #28]
 80015e0:	611a      	str	r2, [r3, #16]
          break;
 80015e2:	e008      	b.n	80015f6 <HAL_GPIO_Init+0xe2>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 80015e4:	2308      	movs	r3, #8
 80015e6:	623b      	str	r3, [r7, #32]
            GPIOx->BRR = ioposition;
 80015e8:	687b      	ldr	r3, [r7, #4]
 80015ea:	69fa      	ldr	r2, [r7, #28]
 80015ec:	615a      	str	r2, [r3, #20]
          break;
 80015ee:	e002      	b.n	80015f6 <HAL_GPIO_Init+0xe2>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
 80015f0:	2300      	movs	r3, #0
 80015f2:	623b      	str	r3, [r7, #32]
          break;
 80015f4:	bf00      	nop
      }

      /* Check if the current bit belongs to first half or last half of the pin count number
       in order to address CRH or CRL register*/
      configregister = (iocurrent < GPIO_PIN_8) ? &GPIOx->CRL     : &GPIOx->CRH;
 80015f6:	69bb      	ldr	r3, [r7, #24]
 80015f8:	2bff      	cmp	r3, #255	; 0xff
 80015fa:	d801      	bhi.n	8001600 <HAL_GPIO_Init+0xec>
 80015fc:	687b      	ldr	r3, [r7, #4]
 80015fe:	e001      	b.n	8001604 <HAL_GPIO_Init+0xf0>
 8001600:	687b      	ldr	r3, [r7, #4]
 8001602:	3304      	adds	r3, #4
 8001604:	617b      	str	r3, [r7, #20]
      registeroffset = (iocurrent < GPIO_PIN_8) ? (position << 2u) : ((position - 8u) << 2u);
 8001606:	69bb      	ldr	r3, [r7, #24]
 8001608:	2bff      	cmp	r3, #255	; 0xff
 800160a:	d802      	bhi.n	8001612 <HAL_GPIO_Init+0xfe>
 800160c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800160e:	009b      	lsls	r3, r3, #2
 8001610:	e002      	b.n	8001618 <HAL_GPIO_Init+0x104>
 8001612:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001614:	3b08      	subs	r3, #8
 8001616:	009b      	lsls	r3, r3, #2
 8001618:	613b      	str	r3, [r7, #16]

      /* Apply the new configuration of the pin to the register */
      MODIFY_REG((*configregister), ((GPIO_CRL_MODE0 | GPIO_CRL_CNF0) << registeroffset), (config << registeroffset));
 800161a:	697b      	ldr	r3, [r7, #20]
 800161c:	681a      	ldr	r2, [r3, #0]
 800161e:	210f      	movs	r1, #15
 8001620:	693b      	ldr	r3, [r7, #16]
 8001622:	fa01 f303 	lsl.w	r3, r1, r3
 8001626:	43db      	mvns	r3, r3
 8001628:	401a      	ands	r2, r3
 800162a:	6a39      	ldr	r1, [r7, #32]
 800162c:	693b      	ldr	r3, [r7, #16]
 800162e:	fa01 f303 	lsl.w	r3, r1, r3
 8001632:	431a      	orrs	r2, r3
 8001634:	697b      	ldr	r3, [r7, #20]
 8001636:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 8001638:	683b      	ldr	r3, [r7, #0]
 800163a:	685b      	ldr	r3, [r3, #4]
 800163c:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001640:	2b00      	cmp	r3, #0
 8001642:	f000 8096 	beq.w	8001772 <HAL_GPIO_Init+0x25e>
      {
        /* Enable AFIO Clock */
        __HAL_RCC_AFIO_CLK_ENABLE();
 8001646:	4b59      	ldr	r3, [pc, #356]	; (80017ac <HAL_GPIO_Init+0x298>)
 8001648:	699b      	ldr	r3, [r3, #24]
 800164a:	4a58      	ldr	r2, [pc, #352]	; (80017ac <HAL_GPIO_Init+0x298>)
 800164c:	f043 0301 	orr.w	r3, r3, #1
 8001650:	6193      	str	r3, [r2, #24]
 8001652:	4b56      	ldr	r3, [pc, #344]	; (80017ac <HAL_GPIO_Init+0x298>)
 8001654:	699b      	ldr	r3, [r3, #24]
 8001656:	f003 0301 	and.w	r3, r3, #1
 800165a:	60bb      	str	r3, [r7, #8]
 800165c:	68bb      	ldr	r3, [r7, #8]
        temp = AFIO->EXTICR[position >> 2u];
 800165e:	4a54      	ldr	r2, [pc, #336]	; (80017b0 <HAL_GPIO_Init+0x29c>)
 8001660:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001662:	089b      	lsrs	r3, r3, #2
 8001664:	3302      	adds	r3, #2
 8001666:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800166a:	60fb      	str	r3, [r7, #12]
        CLEAR_BIT(temp, (0x0Fu) << (4u * (position & 0x03u)));
 800166c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800166e:	f003 0303 	and.w	r3, r3, #3
 8001672:	009b      	lsls	r3, r3, #2
 8001674:	220f      	movs	r2, #15
 8001676:	fa02 f303 	lsl.w	r3, r2, r3
 800167a:	43db      	mvns	r3, r3
 800167c:	68fa      	ldr	r2, [r7, #12]
 800167e:	4013      	ands	r3, r2
 8001680:	60fb      	str	r3, [r7, #12]
        SET_BIT(temp, (GPIO_GET_INDEX(GPIOx)) << (4u * (position & 0x03u)));
 8001682:	687b      	ldr	r3, [r7, #4]
 8001684:	4a4b      	ldr	r2, [pc, #300]	; (80017b4 <HAL_GPIO_Init+0x2a0>)
 8001686:	4293      	cmp	r3, r2
 8001688:	d013      	beq.n	80016b2 <HAL_GPIO_Init+0x19e>
 800168a:	687b      	ldr	r3, [r7, #4]
 800168c:	4a4a      	ldr	r2, [pc, #296]	; (80017b8 <HAL_GPIO_Init+0x2a4>)
 800168e:	4293      	cmp	r3, r2
 8001690:	d00d      	beq.n	80016ae <HAL_GPIO_Init+0x19a>
 8001692:	687b      	ldr	r3, [r7, #4]
 8001694:	4a49      	ldr	r2, [pc, #292]	; (80017bc <HAL_GPIO_Init+0x2a8>)
 8001696:	4293      	cmp	r3, r2
 8001698:	d007      	beq.n	80016aa <HAL_GPIO_Init+0x196>
 800169a:	687b      	ldr	r3, [r7, #4]
 800169c:	4a48      	ldr	r2, [pc, #288]	; (80017c0 <HAL_GPIO_Init+0x2ac>)
 800169e:	4293      	cmp	r3, r2
 80016a0:	d101      	bne.n	80016a6 <HAL_GPIO_Init+0x192>
 80016a2:	2303      	movs	r3, #3
 80016a4:	e006      	b.n	80016b4 <HAL_GPIO_Init+0x1a0>
 80016a6:	2304      	movs	r3, #4
 80016a8:	e004      	b.n	80016b4 <HAL_GPIO_Init+0x1a0>
 80016aa:	2302      	movs	r3, #2
 80016ac:	e002      	b.n	80016b4 <HAL_GPIO_Init+0x1a0>
 80016ae:	2301      	movs	r3, #1
 80016b0:	e000      	b.n	80016b4 <HAL_GPIO_Init+0x1a0>
 80016b2:	2300      	movs	r3, #0
 80016b4:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80016b6:	f002 0203 	and.w	r2, r2, #3
 80016ba:	0092      	lsls	r2, r2, #2
 80016bc:	4093      	lsls	r3, r2
 80016be:	68fa      	ldr	r2, [r7, #12]
 80016c0:	4313      	orrs	r3, r2
 80016c2:	60fb      	str	r3, [r7, #12]
        AFIO->EXTICR[position >> 2u] = temp;
 80016c4:	493a      	ldr	r1, [pc, #232]	; (80017b0 <HAL_GPIO_Init+0x29c>)
 80016c6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80016c8:	089b      	lsrs	r3, r3, #2
 80016ca:	3302      	adds	r3, #2
 80016cc:	68fa      	ldr	r2, [r7, #12]
 80016ce:	f841 2023 	str.w	r2, [r1, r3, lsl #2]


        /* Configure the interrupt mask */
        if ((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 80016d2:	683b      	ldr	r3, [r7, #0]
 80016d4:	685b      	ldr	r3, [r3, #4]
 80016d6:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80016da:	2b00      	cmp	r3, #0
 80016dc:	d006      	beq.n	80016ec <HAL_GPIO_Init+0x1d8>
        {
          SET_BIT(EXTI->IMR, iocurrent);
 80016de:	4b39      	ldr	r3, [pc, #228]	; (80017c4 <HAL_GPIO_Init+0x2b0>)
 80016e0:	681a      	ldr	r2, [r3, #0]
 80016e2:	4938      	ldr	r1, [pc, #224]	; (80017c4 <HAL_GPIO_Init+0x2b0>)
 80016e4:	69bb      	ldr	r3, [r7, #24]
 80016e6:	4313      	orrs	r3, r2
 80016e8:	600b      	str	r3, [r1, #0]
 80016ea:	e006      	b.n	80016fa <HAL_GPIO_Init+0x1e6>
        }
        else
        {
          CLEAR_BIT(EXTI->IMR, iocurrent);
 80016ec:	4b35      	ldr	r3, [pc, #212]	; (80017c4 <HAL_GPIO_Init+0x2b0>)
 80016ee:	681a      	ldr	r2, [r3, #0]
 80016f0:	69bb      	ldr	r3, [r7, #24]
 80016f2:	43db      	mvns	r3, r3
 80016f4:	4933      	ldr	r1, [pc, #204]	; (80017c4 <HAL_GPIO_Init+0x2b0>)
 80016f6:	4013      	ands	r3, r2
 80016f8:	600b      	str	r3, [r1, #0]
        }

        /* Configure the event mask */
        if ((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 80016fa:	683b      	ldr	r3, [r7, #0]
 80016fc:	685b      	ldr	r3, [r3, #4]
 80016fe:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001702:	2b00      	cmp	r3, #0
 8001704:	d006      	beq.n	8001714 <HAL_GPIO_Init+0x200>
        {
          SET_BIT(EXTI->EMR, iocurrent);
 8001706:	4b2f      	ldr	r3, [pc, #188]	; (80017c4 <HAL_GPIO_Init+0x2b0>)
 8001708:	685a      	ldr	r2, [r3, #4]
 800170a:	492e      	ldr	r1, [pc, #184]	; (80017c4 <HAL_GPIO_Init+0x2b0>)
 800170c:	69bb      	ldr	r3, [r7, #24]
 800170e:	4313      	orrs	r3, r2
 8001710:	604b      	str	r3, [r1, #4]
 8001712:	e006      	b.n	8001722 <HAL_GPIO_Init+0x20e>
        }
        else
        {
          CLEAR_BIT(EXTI->EMR, iocurrent);
 8001714:	4b2b      	ldr	r3, [pc, #172]	; (80017c4 <HAL_GPIO_Init+0x2b0>)
 8001716:	685a      	ldr	r2, [r3, #4]
 8001718:	69bb      	ldr	r3, [r7, #24]
 800171a:	43db      	mvns	r3, r3
 800171c:	4929      	ldr	r1, [pc, #164]	; (80017c4 <HAL_GPIO_Init+0x2b0>)
 800171e:	4013      	ands	r3, r2
 8001720:	604b      	str	r3, [r1, #4]
        }

        /* Enable or disable the rising trigger */
        if ((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 8001722:	683b      	ldr	r3, [r7, #0]
 8001724:	685b      	ldr	r3, [r3, #4]
 8001726:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 800172a:	2b00      	cmp	r3, #0
 800172c:	d006      	beq.n	800173c <HAL_GPIO_Init+0x228>
        {
          SET_BIT(EXTI->RTSR, iocurrent);
 800172e:	4b25      	ldr	r3, [pc, #148]	; (80017c4 <HAL_GPIO_Init+0x2b0>)
 8001730:	689a      	ldr	r2, [r3, #8]
 8001732:	4924      	ldr	r1, [pc, #144]	; (80017c4 <HAL_GPIO_Init+0x2b0>)
 8001734:	69bb      	ldr	r3, [r7, #24]
 8001736:	4313      	orrs	r3, r2
 8001738:	608b      	str	r3, [r1, #8]
 800173a:	e006      	b.n	800174a <HAL_GPIO_Init+0x236>
        }
        else
        {
          CLEAR_BIT(EXTI->RTSR, iocurrent);
 800173c:	4b21      	ldr	r3, [pc, #132]	; (80017c4 <HAL_GPIO_Init+0x2b0>)
 800173e:	689a      	ldr	r2, [r3, #8]
 8001740:	69bb      	ldr	r3, [r7, #24]
 8001742:	43db      	mvns	r3, r3
 8001744:	491f      	ldr	r1, [pc, #124]	; (80017c4 <HAL_GPIO_Init+0x2b0>)
 8001746:	4013      	ands	r3, r2
 8001748:	608b      	str	r3, [r1, #8]
        }

        /* Enable or disable the falling trigger */
        if ((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 800174a:	683b      	ldr	r3, [r7, #0]
 800174c:	685b      	ldr	r3, [r3, #4]
 800174e:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8001752:	2b00      	cmp	r3, #0
 8001754:	d006      	beq.n	8001764 <HAL_GPIO_Init+0x250>
        {
          SET_BIT(EXTI->FTSR, iocurrent);
 8001756:	4b1b      	ldr	r3, [pc, #108]	; (80017c4 <HAL_GPIO_Init+0x2b0>)
 8001758:	68da      	ldr	r2, [r3, #12]
 800175a:	491a      	ldr	r1, [pc, #104]	; (80017c4 <HAL_GPIO_Init+0x2b0>)
 800175c:	69bb      	ldr	r3, [r7, #24]
 800175e:	4313      	orrs	r3, r2
 8001760:	60cb      	str	r3, [r1, #12]
 8001762:	e006      	b.n	8001772 <HAL_GPIO_Init+0x25e>
        }
        else
        {
          CLEAR_BIT(EXTI->FTSR, iocurrent);
 8001764:	4b17      	ldr	r3, [pc, #92]	; (80017c4 <HAL_GPIO_Init+0x2b0>)
 8001766:	68da      	ldr	r2, [r3, #12]
 8001768:	69bb      	ldr	r3, [r7, #24]
 800176a:	43db      	mvns	r3, r3
 800176c:	4915      	ldr	r1, [pc, #84]	; (80017c4 <HAL_GPIO_Init+0x2b0>)
 800176e:	4013      	ands	r3, r2
 8001770:	60cb      	str	r3, [r1, #12]
        }
      }
    }

	position++;
 8001772:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001774:	3301      	adds	r3, #1
 8001776:	627b      	str	r3, [r7, #36]	; 0x24
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8001778:	683b      	ldr	r3, [r7, #0]
 800177a:	681a      	ldr	r2, [r3, #0]
 800177c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800177e:	fa22 f303 	lsr.w	r3, r2, r3
 8001782:	2b00      	cmp	r3, #0
 8001784:	f47f aed0 	bne.w	8001528 <HAL_GPIO_Init+0x14>
  }
}
 8001788:	bf00      	nop
 800178a:	372c      	adds	r7, #44	; 0x2c
 800178c:	46bd      	mov	sp, r7
 800178e:	bc80      	pop	{r7}
 8001790:	4770      	bx	lr
 8001792:	bf00      	nop
 8001794:	10210000 	.word	0x10210000
 8001798:	10110000 	.word	0x10110000
 800179c:	10120000 	.word	0x10120000
 80017a0:	10310000 	.word	0x10310000
 80017a4:	10320000 	.word	0x10320000
 80017a8:	10220000 	.word	0x10220000
 80017ac:	40021000 	.word	0x40021000
 80017b0:	40010000 	.word	0x40010000
 80017b4:	40010800 	.word	0x40010800
 80017b8:	40010c00 	.word	0x40010c00
 80017bc:	40011000 	.word	0x40011000
 80017c0:	40011400 	.word	0x40011400
 80017c4:	40010400 	.word	0x40010400

080017c8 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 80017c8:	b480      	push	{r7}
 80017ca:	b083      	sub	sp, #12
 80017cc:	af00      	add	r7, sp, #0
 80017ce:	6078      	str	r0, [r7, #4]
 80017d0:	460b      	mov	r3, r1
 80017d2:	807b      	strh	r3, [r7, #2]
 80017d4:	4613      	mov	r3, r2
 80017d6:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 80017d8:	787b      	ldrb	r3, [r7, #1]
 80017da:	2b00      	cmp	r3, #0
 80017dc:	d003      	beq.n	80017e6 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 80017de:	887a      	ldrh	r2, [r7, #2]
 80017e0:	687b      	ldr	r3, [r7, #4]
 80017e2:	611a      	str	r2, [r3, #16]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
  }
}
 80017e4:	e003      	b.n	80017ee <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
 80017e6:	887b      	ldrh	r3, [r7, #2]
 80017e8:	041a      	lsls	r2, r3, #16
 80017ea:	687b      	ldr	r3, [r7, #4]
 80017ec:	611a      	str	r2, [r3, #16]
}
 80017ee:	bf00      	nop
 80017f0:	370c      	adds	r7, #12
 80017f2:	46bd      	mov	sp, r7
 80017f4:	bc80      	pop	{r7}
 80017f6:	4770      	bx	lr

080017f8 <HAL_PCD_Init>:
  *         parameters in the PCD_InitTypeDef and initialize the associated handle.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Init(PCD_HandleTypeDef *hpcd)
{
 80017f8:	b5f0      	push	{r4, r5, r6, r7, lr}
 80017fa:	b08b      	sub	sp, #44	; 0x2c
 80017fc:	af06      	add	r7, sp, #24
 80017fe:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx;
#endif /* defined (USB_OTG_FS) */
  uint8_t i;

  /* Check the PCD handle allocation */
  if (hpcd == NULL)
 8001800:	687b      	ldr	r3, [r7, #4]
 8001802:	2b00      	cmp	r3, #0
 8001804:	d101      	bne.n	800180a <HAL_PCD_Init+0x12>
  {
    return HAL_ERROR;
 8001806:	2301      	movs	r3, #1
 8001808:	e0fd      	b.n	8001a06 <HAL_PCD_Init+0x20e>

#if defined (USB_OTG_FS)
  USBx = hpcd->Instance;
#endif /* defined (USB_OTG_FS) */

  if (hpcd->State == HAL_PCD_STATE_RESET)
 800180a:	687b      	ldr	r3, [r7, #4]
 800180c:	f893 32a9 	ldrb.w	r3, [r3, #681]	; 0x2a9
 8001810:	b2db      	uxtb	r3, r3
 8001812:	2b00      	cmp	r3, #0
 8001814:	d106      	bne.n	8001824 <HAL_PCD_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hpcd->Lock = HAL_UNLOCKED;
 8001816:	687b      	ldr	r3, [r7, #4]
 8001818:	2200      	movs	r2, #0
 800181a:	f883 22a8 	strb.w	r2, [r3, #680]	; 0x2a8

    /* Init the low level hardware */
    hpcd->MspInitCallback(hpcd);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_PCD_MspInit(hpcd);
 800181e:	6878      	ldr	r0, [r7, #4]
 8001820:	f006 fa00 	bl	8007c24 <HAL_PCD_MspInit>
#endif /* (USE_HAL_PCD_REGISTER_CALLBACKS) */
  }

  hpcd->State = HAL_PCD_STATE_BUSY;
 8001824:	687b      	ldr	r3, [r7, #4]
 8001826:	2203      	movs	r2, #3
 8001828:	f883 22a9 	strb.w	r2, [r3, #681]	; 0x2a9
    hpcd->Init.dma_enable = 0U;
  }
#endif /* defined (USB_OTG_FS) */

  /* Disable the Interrupts */
  __HAL_PCD_DISABLE(hpcd);
 800182c:	687b      	ldr	r3, [r7, #4]
 800182e:	681b      	ldr	r3, [r3, #0]
 8001830:	4618      	mov	r0, r3
 8001832:	f002 fc19 	bl	8004068 <USB_DisableGlobalInt>

  /*Init the Core (common init.) */
  if (USB_CoreInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 8001836:	687b      	ldr	r3, [r7, #4]
 8001838:	681b      	ldr	r3, [r3, #0]
 800183a:	603b      	str	r3, [r7, #0]
 800183c:	687e      	ldr	r6, [r7, #4]
 800183e:	466d      	mov	r5, sp
 8001840:	f106 0410 	add.w	r4, r6, #16
 8001844:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8001846:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8001848:	6823      	ldr	r3, [r4, #0]
 800184a:	602b      	str	r3, [r5, #0]
 800184c:	1d33      	adds	r3, r6, #4
 800184e:	cb0e      	ldmia	r3, {r1, r2, r3}
 8001850:	6838      	ldr	r0, [r7, #0]
 8001852:	f002 fbe3 	bl	800401c <USB_CoreInit>
 8001856:	4603      	mov	r3, r0
 8001858:	2b00      	cmp	r3, #0
 800185a:	d005      	beq.n	8001868 <HAL_PCD_Init+0x70>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 800185c:	687b      	ldr	r3, [r7, #4]
 800185e:	2202      	movs	r2, #2
 8001860:	f883 22a9 	strb.w	r2, [r3, #681]	; 0x2a9
    return HAL_ERROR;
 8001864:	2301      	movs	r3, #1
 8001866:	e0ce      	b.n	8001a06 <HAL_PCD_Init+0x20e>
  }

  /* Force Device Mode*/
  (void)USB_SetCurrentMode(hpcd->Instance, USB_DEVICE_MODE);
 8001868:	687b      	ldr	r3, [r7, #4]
 800186a:	681b      	ldr	r3, [r3, #0]
 800186c:	2100      	movs	r1, #0
 800186e:	4618      	mov	r0, r3
 8001870:	f002 fc14 	bl	800409c <USB_SetCurrentMode>

  /* Init endpoints structures */
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8001874:	2300      	movs	r3, #0
 8001876:	73fb      	strb	r3, [r7, #15]
 8001878:	e04c      	b.n	8001914 <HAL_PCD_Init+0x11c>
  {
    /* Init ep structure */
    hpcd->IN_ep[i].is_in = 1U;
 800187a:	7bfb      	ldrb	r3, [r7, #15]
 800187c:	6879      	ldr	r1, [r7, #4]
 800187e:	1c5a      	adds	r2, r3, #1
 8001880:	4613      	mov	r3, r2
 8001882:	009b      	lsls	r3, r3, #2
 8001884:	4413      	add	r3, r2
 8001886:	00db      	lsls	r3, r3, #3
 8001888:	440b      	add	r3, r1
 800188a:	3301      	adds	r3, #1
 800188c:	2201      	movs	r2, #1
 800188e:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].num = i;
 8001890:	7bfb      	ldrb	r3, [r7, #15]
 8001892:	6879      	ldr	r1, [r7, #4]
 8001894:	1c5a      	adds	r2, r3, #1
 8001896:	4613      	mov	r3, r2
 8001898:	009b      	lsls	r3, r3, #2
 800189a:	4413      	add	r3, r2
 800189c:	00db      	lsls	r3, r3, #3
 800189e:	440b      	add	r3, r1
 80018a0:	7bfa      	ldrb	r2, [r7, #15]
 80018a2:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].tx_fifo_num = i;
 80018a4:	7bfa      	ldrb	r2, [r7, #15]
 80018a6:	7bfb      	ldrb	r3, [r7, #15]
 80018a8:	b298      	uxth	r0, r3
 80018aa:	6879      	ldr	r1, [r7, #4]
 80018ac:	4613      	mov	r3, r2
 80018ae:	009b      	lsls	r3, r3, #2
 80018b0:	4413      	add	r3, r2
 80018b2:	00db      	lsls	r3, r3, #3
 80018b4:	440b      	add	r3, r1
 80018b6:	3336      	adds	r3, #54	; 0x36
 80018b8:	4602      	mov	r2, r0
 80018ba:	801a      	strh	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->IN_ep[i].type = EP_TYPE_CTRL;
 80018bc:	7bfb      	ldrb	r3, [r7, #15]
 80018be:	6879      	ldr	r1, [r7, #4]
 80018c0:	1c5a      	adds	r2, r3, #1
 80018c2:	4613      	mov	r3, r2
 80018c4:	009b      	lsls	r3, r3, #2
 80018c6:	4413      	add	r3, r2
 80018c8:	00db      	lsls	r3, r3, #3
 80018ca:	440b      	add	r3, r1
 80018cc:	3303      	adds	r3, #3
 80018ce:	2200      	movs	r2, #0
 80018d0:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].maxpacket = 0U;
 80018d2:	7bfa      	ldrb	r2, [r7, #15]
 80018d4:	6879      	ldr	r1, [r7, #4]
 80018d6:	4613      	mov	r3, r2
 80018d8:	009b      	lsls	r3, r3, #2
 80018da:	4413      	add	r3, r2
 80018dc:	00db      	lsls	r3, r3, #3
 80018de:	440b      	add	r3, r1
 80018e0:	3338      	adds	r3, #56	; 0x38
 80018e2:	2200      	movs	r2, #0
 80018e4:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_buff = 0U;
 80018e6:	7bfa      	ldrb	r2, [r7, #15]
 80018e8:	6879      	ldr	r1, [r7, #4]
 80018ea:	4613      	mov	r3, r2
 80018ec:	009b      	lsls	r3, r3, #2
 80018ee:	4413      	add	r3, r2
 80018f0:	00db      	lsls	r3, r3, #3
 80018f2:	440b      	add	r3, r1
 80018f4:	333c      	adds	r3, #60	; 0x3c
 80018f6:	2200      	movs	r2, #0
 80018f8:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_len = 0U;
 80018fa:	7bfa      	ldrb	r2, [r7, #15]
 80018fc:	6879      	ldr	r1, [r7, #4]
 80018fe:	4613      	mov	r3, r2
 8001900:	009b      	lsls	r3, r3, #2
 8001902:	4413      	add	r3, r2
 8001904:	00db      	lsls	r3, r3, #3
 8001906:	440b      	add	r3, r1
 8001908:	3340      	adds	r3, #64	; 0x40
 800190a:	2200      	movs	r2, #0
 800190c:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 800190e:	7bfb      	ldrb	r3, [r7, #15]
 8001910:	3301      	adds	r3, #1
 8001912:	73fb      	strb	r3, [r7, #15]
 8001914:	7bfa      	ldrb	r2, [r7, #15]
 8001916:	687b      	ldr	r3, [r7, #4]
 8001918:	685b      	ldr	r3, [r3, #4]
 800191a:	429a      	cmp	r2, r3
 800191c:	d3ad      	bcc.n	800187a <HAL_PCD_Init+0x82>
  }

  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 800191e:	2300      	movs	r3, #0
 8001920:	73fb      	strb	r3, [r7, #15]
 8001922:	e044      	b.n	80019ae <HAL_PCD_Init+0x1b6>
  {
    hpcd->OUT_ep[i].is_in = 0U;
 8001924:	7bfa      	ldrb	r2, [r7, #15]
 8001926:	6879      	ldr	r1, [r7, #4]
 8001928:	4613      	mov	r3, r2
 800192a:	009b      	lsls	r3, r3, #2
 800192c:	4413      	add	r3, r2
 800192e:	00db      	lsls	r3, r3, #3
 8001930:	440b      	add	r3, r1
 8001932:	f203 1369 	addw	r3, r3, #361	; 0x169
 8001936:	2200      	movs	r2, #0
 8001938:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].num = i;
 800193a:	7bfa      	ldrb	r2, [r7, #15]
 800193c:	6879      	ldr	r1, [r7, #4]
 800193e:	4613      	mov	r3, r2
 8001940:	009b      	lsls	r3, r3, #2
 8001942:	4413      	add	r3, r2
 8001944:	00db      	lsls	r3, r3, #3
 8001946:	440b      	add	r3, r1
 8001948:	f503 73b4 	add.w	r3, r3, #360	; 0x168
 800194c:	7bfa      	ldrb	r2, [r7, #15]
 800194e:	701a      	strb	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->OUT_ep[i].type = EP_TYPE_CTRL;
 8001950:	7bfa      	ldrb	r2, [r7, #15]
 8001952:	6879      	ldr	r1, [r7, #4]
 8001954:	4613      	mov	r3, r2
 8001956:	009b      	lsls	r3, r3, #2
 8001958:	4413      	add	r3, r2
 800195a:	00db      	lsls	r3, r3, #3
 800195c:	440b      	add	r3, r1
 800195e:	f203 136b 	addw	r3, r3, #363	; 0x16b
 8001962:	2200      	movs	r2, #0
 8001964:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].maxpacket = 0U;
 8001966:	7bfa      	ldrb	r2, [r7, #15]
 8001968:	6879      	ldr	r1, [r7, #4]
 800196a:	4613      	mov	r3, r2
 800196c:	009b      	lsls	r3, r3, #2
 800196e:	4413      	add	r3, r2
 8001970:	00db      	lsls	r3, r3, #3
 8001972:	440b      	add	r3, r1
 8001974:	f503 73bc 	add.w	r3, r3, #376	; 0x178
 8001978:	2200      	movs	r2, #0
 800197a:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_buff = 0U;
 800197c:	7bfa      	ldrb	r2, [r7, #15]
 800197e:	6879      	ldr	r1, [r7, #4]
 8001980:	4613      	mov	r3, r2
 8001982:	009b      	lsls	r3, r3, #2
 8001984:	4413      	add	r3, r2
 8001986:	00db      	lsls	r3, r3, #3
 8001988:	440b      	add	r3, r1
 800198a:	f503 73be 	add.w	r3, r3, #380	; 0x17c
 800198e:	2200      	movs	r2, #0
 8001990:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_len = 0U;
 8001992:	7bfa      	ldrb	r2, [r7, #15]
 8001994:	6879      	ldr	r1, [r7, #4]
 8001996:	4613      	mov	r3, r2
 8001998:	009b      	lsls	r3, r3, #2
 800199a:	4413      	add	r3, r2
 800199c:	00db      	lsls	r3, r3, #3
 800199e:	440b      	add	r3, r1
 80019a0:	f503 73c0 	add.w	r3, r3, #384	; 0x180
 80019a4:	2200      	movs	r2, #0
 80019a6:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 80019a8:	7bfb      	ldrb	r3, [r7, #15]
 80019aa:	3301      	adds	r3, #1
 80019ac:	73fb      	strb	r3, [r7, #15]
 80019ae:	7bfa      	ldrb	r2, [r7, #15]
 80019b0:	687b      	ldr	r3, [r7, #4]
 80019b2:	685b      	ldr	r3, [r3, #4]
 80019b4:	429a      	cmp	r2, r3
 80019b6:	d3b5      	bcc.n	8001924 <HAL_PCD_Init+0x12c>
  }

  /* Init Device */
  if (USB_DevInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 80019b8:	687b      	ldr	r3, [r7, #4]
 80019ba:	681b      	ldr	r3, [r3, #0]
 80019bc:	603b      	str	r3, [r7, #0]
 80019be:	687e      	ldr	r6, [r7, #4]
 80019c0:	466d      	mov	r5, sp
 80019c2:	f106 0410 	add.w	r4, r6, #16
 80019c6:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 80019c8:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 80019ca:	6823      	ldr	r3, [r4, #0]
 80019cc:	602b      	str	r3, [r5, #0]
 80019ce:	1d33      	adds	r3, r6, #4
 80019d0:	cb0e      	ldmia	r3, {r1, r2, r3}
 80019d2:	6838      	ldr	r0, [r7, #0]
 80019d4:	f002 fb6e 	bl	80040b4 <USB_DevInit>
 80019d8:	4603      	mov	r3, r0
 80019da:	2b00      	cmp	r3, #0
 80019dc:	d005      	beq.n	80019ea <HAL_PCD_Init+0x1f2>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 80019de:	687b      	ldr	r3, [r7, #4]
 80019e0:	2202      	movs	r2, #2
 80019e2:	f883 22a9 	strb.w	r2, [r3, #681]	; 0x2a9
    return HAL_ERROR;
 80019e6:	2301      	movs	r3, #1
 80019e8:	e00d      	b.n	8001a06 <HAL_PCD_Init+0x20e>
  }

  hpcd->USB_Address = 0U;
 80019ea:	687b      	ldr	r3, [r7, #4]
 80019ec:	2200      	movs	r2, #0
 80019ee:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
  hpcd->State = HAL_PCD_STATE_READY;
 80019f2:	687b      	ldr	r3, [r7, #4]
 80019f4:	2201      	movs	r2, #1
 80019f6:	f883 22a9 	strb.w	r2, [r3, #681]	; 0x2a9
  (void)USB_DevDisconnect(hpcd->Instance);
 80019fa:	687b      	ldr	r3, [r7, #4]
 80019fc:	681b      	ldr	r3, [r3, #0]
 80019fe:	4618      	mov	r0, r3
 8001a00:	f004 fb08 	bl	8006014 <USB_DevDisconnect>

  return HAL_OK;
 8001a04:	2300      	movs	r3, #0
}
 8001a06:	4618      	mov	r0, r3
 8001a08:	3714      	adds	r7, #20
 8001a0a:	46bd      	mov	sp, r7
 8001a0c:	bdf0      	pop	{r4, r5, r6, r7, pc}

08001a0e <HAL_PCD_Start>:
  * @brief  Start the USB device
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Start(PCD_HandleTypeDef *hpcd)
{
 8001a0e:	b580      	push	{r7, lr}
 8001a10:	b082      	sub	sp, #8
 8001a12:	af00      	add	r7, sp, #0
 8001a14:	6078      	str	r0, [r7, #4]
  __HAL_LOCK(hpcd);
 8001a16:	687b      	ldr	r3, [r7, #4]
 8001a18:	f893 32a8 	ldrb.w	r3, [r3, #680]	; 0x2a8
 8001a1c:	2b01      	cmp	r3, #1
 8001a1e:	d101      	bne.n	8001a24 <HAL_PCD_Start+0x16>
 8001a20:	2302      	movs	r3, #2
 8001a22:	e016      	b.n	8001a52 <HAL_PCD_Start+0x44>
 8001a24:	687b      	ldr	r3, [r7, #4]
 8001a26:	2201      	movs	r2, #1
 8001a28:	f883 22a8 	strb.w	r2, [r3, #680]	; 0x2a8
  __HAL_PCD_ENABLE(hpcd);
 8001a2c:	687b      	ldr	r3, [r7, #4]
 8001a2e:	681b      	ldr	r3, [r3, #0]
 8001a30:	4618      	mov	r0, r3
 8001a32:	f002 fb03 	bl	800403c <USB_EnableGlobalInt>

#if defined (USB)
  HAL_PCDEx_SetConnectionState(hpcd, 1U);
 8001a36:	2101      	movs	r1, #1
 8001a38:	6878      	ldr	r0, [r7, #4]
 8001a3a:	f006 fb66 	bl	800810a <HAL_PCDEx_SetConnectionState>
#endif /* defined (USB) */

  (void)USB_DevConnect(hpcd->Instance);
 8001a3e:	687b      	ldr	r3, [r7, #4]
 8001a40:	681b      	ldr	r3, [r3, #0]
 8001a42:	4618      	mov	r0, r3
 8001a44:	f004 fadc 	bl	8006000 <USB_DevConnect>
  __HAL_UNLOCK(hpcd);
 8001a48:	687b      	ldr	r3, [r7, #4]
 8001a4a:	2200      	movs	r2, #0
 8001a4c:	f883 22a8 	strb.w	r2, [r3, #680]	; 0x2a8

  return HAL_OK;
 8001a50:	2300      	movs	r3, #0
}
 8001a52:	4618      	mov	r0, r3
 8001a54:	3708      	adds	r7, #8
 8001a56:	46bd      	mov	sp, r7
 8001a58:	bd80      	pop	{r7, pc}

08001a5a <HAL_PCD_IRQHandler>:
  * @brief  This function handles PCD interrupt request.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
void HAL_PCD_IRQHandler(PCD_HandleTypeDef *hpcd)
{
 8001a5a:	b580      	push	{r7, lr}
 8001a5c:	b088      	sub	sp, #32
 8001a5e:	af00      	add	r7, sp, #0
 8001a60:	6078      	str	r0, [r7, #4]
  uint16_t store_ep[8];
  uint8_t i;

  if (__HAL_PCD_GET_FLAG(hpcd, USB_ISTR_CTR))
 8001a62:	687b      	ldr	r3, [r7, #4]
 8001a64:	681b      	ldr	r3, [r3, #0]
 8001a66:	4618      	mov	r0, r3
 8001a68:	f004 fade 	bl	8006028 <USB_ReadInterrupts>
 8001a6c:	4603      	mov	r3, r0
 8001a6e:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8001a72:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8001a76:	d102      	bne.n	8001a7e <HAL_PCD_IRQHandler+0x24>
  {
    /* servicing of the endpoint correct transfer interrupt */
    /* clear of the CTR flag into the sub */
    (void)PCD_EP_ISR_Handler(hpcd);
 8001a78:	6878      	ldr	r0, [r7, #4]
 8001a7a:	f000 fb61 	bl	8002140 <PCD_EP_ISR_Handler>
  }

  if (__HAL_PCD_GET_FLAG(hpcd, USB_ISTR_RESET))
 8001a7e:	687b      	ldr	r3, [r7, #4]
 8001a80:	681b      	ldr	r3, [r3, #0]
 8001a82:	4618      	mov	r0, r3
 8001a84:	f004 fad0 	bl	8006028 <USB_ReadInterrupts>
 8001a88:	4603      	mov	r3, r0
 8001a8a:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8001a8e:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8001a92:	d112      	bne.n	8001aba <HAL_PCD_IRQHandler+0x60>
  {
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_RESET);
 8001a94:	687b      	ldr	r3, [r7, #4]
 8001a96:	681b      	ldr	r3, [r3, #0]
 8001a98:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 8001a9c:	b29a      	uxth	r2, r3
 8001a9e:	687b      	ldr	r3, [r7, #4]
 8001aa0:	681b      	ldr	r3, [r3, #0]
 8001aa2:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8001aa6:	b292      	uxth	r2, r2
 8001aa8:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
    hpcd->ResetCallback(hpcd);
#else
    HAL_PCD_ResetCallback(hpcd);
 8001aac:	6878      	ldr	r0, [r7, #4]
 8001aae:	f006 f934 	bl	8007d1a <HAL_PCD_ResetCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

    (void)HAL_PCD_SetAddress(hpcd, 0U);
 8001ab2:	2100      	movs	r1, #0
 8001ab4:	6878      	ldr	r0, [r7, #4]
 8001ab6:	f000 f925 	bl	8001d04 <HAL_PCD_SetAddress>
  }

  if (__HAL_PCD_GET_FLAG(hpcd, USB_ISTR_PMAOVR))
 8001aba:	687b      	ldr	r3, [r7, #4]
 8001abc:	681b      	ldr	r3, [r3, #0]
 8001abe:	4618      	mov	r0, r3
 8001ac0:	f004 fab2 	bl	8006028 <USB_ReadInterrupts>
 8001ac4:	4603      	mov	r3, r0
 8001ac6:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8001aca:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8001ace:	d10b      	bne.n	8001ae8 <HAL_PCD_IRQHandler+0x8e>
  {
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_PMAOVR);
 8001ad0:	687b      	ldr	r3, [r7, #4]
 8001ad2:	681b      	ldr	r3, [r3, #0]
 8001ad4:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 8001ad8:	b29a      	uxth	r2, r3
 8001ada:	687b      	ldr	r3, [r7, #4]
 8001adc:	681b      	ldr	r3, [r3, #0]
 8001ade:	f422 4280 	bic.w	r2, r2, #16384	; 0x4000
 8001ae2:	b292      	uxth	r2, r2
 8001ae4:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44
  }

  if (__HAL_PCD_GET_FLAG(hpcd, USB_ISTR_ERR))
 8001ae8:	687b      	ldr	r3, [r7, #4]
 8001aea:	681b      	ldr	r3, [r3, #0]
 8001aec:	4618      	mov	r0, r3
 8001aee:	f004 fa9b 	bl	8006028 <USB_ReadInterrupts>
 8001af2:	4603      	mov	r3, r0
 8001af4:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8001af8:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8001afc:	d10b      	bne.n	8001b16 <HAL_PCD_IRQHandler+0xbc>
  {
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_ERR);
 8001afe:	687b      	ldr	r3, [r7, #4]
 8001b00:	681b      	ldr	r3, [r3, #0]
 8001b02:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 8001b06:	b29a      	uxth	r2, r3
 8001b08:	687b      	ldr	r3, [r7, #4]
 8001b0a:	681b      	ldr	r3, [r3, #0]
 8001b0c:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8001b10:	b292      	uxth	r2, r2
 8001b12:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44
  }

  if (__HAL_PCD_GET_FLAG(hpcd, USB_ISTR_WKUP))
 8001b16:	687b      	ldr	r3, [r7, #4]
 8001b18:	681b      	ldr	r3, [r3, #0]
 8001b1a:	4618      	mov	r0, r3
 8001b1c:	f004 fa84 	bl	8006028 <USB_ReadInterrupts>
 8001b20:	4603      	mov	r3, r0
 8001b22:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8001b26:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8001b2a:	d126      	bne.n	8001b7a <HAL_PCD_IRQHandler+0x120>
  {
    hpcd->Instance->CNTR &= (uint16_t) ~(USB_CNTR_LP_MODE);
 8001b2c:	687b      	ldr	r3, [r7, #4]
 8001b2e:	681b      	ldr	r3, [r3, #0]
 8001b30:	f8b3 3040 	ldrh.w	r3, [r3, #64]	; 0x40
 8001b34:	b29a      	uxth	r2, r3
 8001b36:	687b      	ldr	r3, [r7, #4]
 8001b38:	681b      	ldr	r3, [r3, #0]
 8001b3a:	f022 0204 	bic.w	r2, r2, #4
 8001b3e:	b292      	uxth	r2, r2
 8001b40:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40
    hpcd->Instance->CNTR &= (uint16_t) ~(USB_CNTR_FSUSP);
 8001b44:	687b      	ldr	r3, [r7, #4]
 8001b46:	681b      	ldr	r3, [r3, #0]
 8001b48:	f8b3 3040 	ldrh.w	r3, [r3, #64]	; 0x40
 8001b4c:	b29a      	uxth	r2, r3
 8001b4e:	687b      	ldr	r3, [r7, #4]
 8001b50:	681b      	ldr	r3, [r3, #0]
 8001b52:	f022 0208 	bic.w	r2, r2, #8
 8001b56:	b292      	uxth	r2, r2
 8001b58:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
    hpcd->ResumeCallback(hpcd);
#else
    HAL_PCD_ResumeCallback(hpcd);
 8001b5c:	6878      	ldr	r0, [r7, #4]
 8001b5e:	f006 f915 	bl	8007d8c <HAL_PCD_ResumeCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_WKUP);
 8001b62:	687b      	ldr	r3, [r7, #4]
 8001b64:	681b      	ldr	r3, [r3, #0]
 8001b66:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 8001b6a:	b29a      	uxth	r2, r3
 8001b6c:	687b      	ldr	r3, [r7, #4]
 8001b6e:	681b      	ldr	r3, [r3, #0]
 8001b70:	f422 5280 	bic.w	r2, r2, #4096	; 0x1000
 8001b74:	b292      	uxth	r2, r2
 8001b76:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44
  }

  if (__HAL_PCD_GET_FLAG(hpcd, USB_ISTR_SUSP))
 8001b7a:	687b      	ldr	r3, [r7, #4]
 8001b7c:	681b      	ldr	r3, [r3, #0]
 8001b7e:	4618      	mov	r0, r3
 8001b80:	f004 fa52 	bl	8006028 <USB_ReadInterrupts>
 8001b84:	4603      	mov	r3, r0
 8001b86:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8001b8a:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8001b8e:	f040 8084 	bne.w	8001c9a <HAL_PCD_IRQHandler+0x240>
  {
    /* WA: To Clear Wakeup flag if raised with suspend signal */

    /* Store Endpoint register */
    for (i = 0U; i < 8U; i++)
 8001b92:	2300      	movs	r3, #0
 8001b94:	77fb      	strb	r3, [r7, #31]
 8001b96:	e011      	b.n	8001bbc <HAL_PCD_IRQHandler+0x162>
    {
      store_ep[i] = PCD_GET_ENDPOINT(hpcd->Instance, i);
 8001b98:	687b      	ldr	r3, [r7, #4]
 8001b9a:	681b      	ldr	r3, [r3, #0]
 8001b9c:	461a      	mov	r2, r3
 8001b9e:	7ffb      	ldrb	r3, [r7, #31]
 8001ba0:	009b      	lsls	r3, r3, #2
 8001ba2:	441a      	add	r2, r3
 8001ba4:	7ffb      	ldrb	r3, [r7, #31]
 8001ba6:	8812      	ldrh	r2, [r2, #0]
 8001ba8:	b292      	uxth	r2, r2
 8001baa:	005b      	lsls	r3, r3, #1
 8001bac:	f107 0120 	add.w	r1, r7, #32
 8001bb0:	440b      	add	r3, r1
 8001bb2:	f823 2c14 	strh.w	r2, [r3, #-20]
    for (i = 0U; i < 8U; i++)
 8001bb6:	7ffb      	ldrb	r3, [r7, #31]
 8001bb8:	3301      	adds	r3, #1
 8001bba:	77fb      	strb	r3, [r7, #31]
 8001bbc:	7ffb      	ldrb	r3, [r7, #31]
 8001bbe:	2b07      	cmp	r3, #7
 8001bc0:	d9ea      	bls.n	8001b98 <HAL_PCD_IRQHandler+0x13e>
    }

    /* FORCE RESET */
    hpcd->Instance->CNTR |= (uint16_t)(USB_CNTR_FRES);
 8001bc2:	687b      	ldr	r3, [r7, #4]
 8001bc4:	681b      	ldr	r3, [r3, #0]
 8001bc6:	f8b3 3040 	ldrh.w	r3, [r3, #64]	; 0x40
 8001bca:	b29a      	uxth	r2, r3
 8001bcc:	687b      	ldr	r3, [r7, #4]
 8001bce:	681b      	ldr	r3, [r3, #0]
 8001bd0:	f042 0201 	orr.w	r2, r2, #1
 8001bd4:	b292      	uxth	r2, r2
 8001bd6:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40

    /* CLEAR RESET */
    hpcd->Instance->CNTR &= (uint16_t)(~USB_CNTR_FRES);
 8001bda:	687b      	ldr	r3, [r7, #4]
 8001bdc:	681b      	ldr	r3, [r3, #0]
 8001bde:	f8b3 3040 	ldrh.w	r3, [r3, #64]	; 0x40
 8001be2:	b29a      	uxth	r2, r3
 8001be4:	687b      	ldr	r3, [r7, #4]
 8001be6:	681b      	ldr	r3, [r3, #0]
 8001be8:	f022 0201 	bic.w	r2, r2, #1
 8001bec:	b292      	uxth	r2, r2
 8001bee:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40

    /* wait for reset flag in ISTR */
    while ((hpcd->Instance->ISTR & USB_ISTR_RESET) == 0U)
 8001bf2:	bf00      	nop
 8001bf4:	687b      	ldr	r3, [r7, #4]
 8001bf6:	681b      	ldr	r3, [r3, #0]
 8001bf8:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 8001bfc:	b29b      	uxth	r3, r3
 8001bfe:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8001c02:	2b00      	cmp	r3, #0
 8001c04:	d0f6      	beq.n	8001bf4 <HAL_PCD_IRQHandler+0x19a>
    {
    }

    /* Clear Reset Flag */
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_RESET);
 8001c06:	687b      	ldr	r3, [r7, #4]
 8001c08:	681b      	ldr	r3, [r3, #0]
 8001c0a:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 8001c0e:	b29a      	uxth	r2, r3
 8001c10:	687b      	ldr	r3, [r7, #4]
 8001c12:	681b      	ldr	r3, [r3, #0]
 8001c14:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8001c18:	b292      	uxth	r2, r2
 8001c1a:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44

    /* Restore Registre */
    for (i = 0U; i < 8U; i++)
 8001c1e:	2300      	movs	r3, #0
 8001c20:	77fb      	strb	r3, [r7, #31]
 8001c22:	e010      	b.n	8001c46 <HAL_PCD_IRQHandler+0x1ec>
    {
      PCD_SET_ENDPOINT(hpcd->Instance, i, store_ep[i]);
 8001c24:	7ffb      	ldrb	r3, [r7, #31]
 8001c26:	687a      	ldr	r2, [r7, #4]
 8001c28:	6812      	ldr	r2, [r2, #0]
 8001c2a:	4611      	mov	r1, r2
 8001c2c:	7ffa      	ldrb	r2, [r7, #31]
 8001c2e:	0092      	lsls	r2, r2, #2
 8001c30:	440a      	add	r2, r1
 8001c32:	005b      	lsls	r3, r3, #1
 8001c34:	f107 0120 	add.w	r1, r7, #32
 8001c38:	440b      	add	r3, r1
 8001c3a:	f833 3c14 	ldrh.w	r3, [r3, #-20]
 8001c3e:	8013      	strh	r3, [r2, #0]
    for (i = 0U; i < 8U; i++)
 8001c40:	7ffb      	ldrb	r3, [r7, #31]
 8001c42:	3301      	adds	r3, #1
 8001c44:	77fb      	strb	r3, [r7, #31]
 8001c46:	7ffb      	ldrb	r3, [r7, #31]
 8001c48:	2b07      	cmp	r3, #7
 8001c4a:	d9eb      	bls.n	8001c24 <HAL_PCD_IRQHandler+0x1ca>
    }

    /* Force low-power mode in the macrocell */
    hpcd->Instance->CNTR |= (uint16_t)USB_CNTR_FSUSP;
 8001c4c:	687b      	ldr	r3, [r7, #4]
 8001c4e:	681b      	ldr	r3, [r3, #0]
 8001c50:	f8b3 3040 	ldrh.w	r3, [r3, #64]	; 0x40
 8001c54:	b29a      	uxth	r2, r3
 8001c56:	687b      	ldr	r3, [r7, #4]
 8001c58:	681b      	ldr	r3, [r3, #0]
 8001c5a:	f042 0208 	orr.w	r2, r2, #8
 8001c5e:	b292      	uxth	r2, r2
 8001c60:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40

    /* clear of the ISTR bit must be done after setting of CNTR_FSUSP */
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_SUSP);
 8001c64:	687b      	ldr	r3, [r7, #4]
 8001c66:	681b      	ldr	r3, [r3, #0]
 8001c68:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 8001c6c:	b29a      	uxth	r2, r3
 8001c6e:	687b      	ldr	r3, [r7, #4]
 8001c70:	681b      	ldr	r3, [r3, #0]
 8001c72:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8001c76:	b292      	uxth	r2, r2
 8001c78:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44

    hpcd->Instance->CNTR |= (uint16_t)USB_CNTR_LP_MODE;
 8001c7c:	687b      	ldr	r3, [r7, #4]
 8001c7e:	681b      	ldr	r3, [r3, #0]
 8001c80:	f8b3 3040 	ldrh.w	r3, [r3, #64]	; 0x40
 8001c84:	b29a      	uxth	r2, r3
 8001c86:	687b      	ldr	r3, [r7, #4]
 8001c88:	681b      	ldr	r3, [r3, #0]
 8001c8a:	f042 0204 	orr.w	r2, r2, #4
 8001c8e:	b292      	uxth	r2, r2
 8001c90:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
    hpcd->SuspendCallback(hpcd);
#else
    HAL_PCD_SuspendCallback(hpcd);
 8001c94:	6878      	ldr	r0, [r7, #4]
 8001c96:	f006 f85f 	bl	8007d58 <HAL_PCD_SuspendCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
  }

  if (__HAL_PCD_GET_FLAG(hpcd, USB_ISTR_SOF))
 8001c9a:	687b      	ldr	r3, [r7, #4]
 8001c9c:	681b      	ldr	r3, [r3, #0]
 8001c9e:	4618      	mov	r0, r3
 8001ca0:	f004 f9c2 	bl	8006028 <USB_ReadInterrupts>
 8001ca4:	4603      	mov	r3, r0
 8001ca6:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8001caa:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8001cae:	d10e      	bne.n	8001cce <HAL_PCD_IRQHandler+0x274>
  {
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_SOF);
 8001cb0:	687b      	ldr	r3, [r7, #4]
 8001cb2:	681b      	ldr	r3, [r3, #0]
 8001cb4:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 8001cb8:	b29a      	uxth	r2, r3
 8001cba:	687b      	ldr	r3, [r7, #4]
 8001cbc:	681b      	ldr	r3, [r3, #0]
 8001cbe:	f422 7200 	bic.w	r2, r2, #512	; 0x200
 8001cc2:	b292      	uxth	r2, r2
 8001cc4:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
    hpcd->SOFCallback(hpcd);
#else
    HAL_PCD_SOFCallback(hpcd);
 8001cc8:	6878      	ldr	r0, [r7, #4]
 8001cca:	f006 f818 	bl	8007cfe <HAL_PCD_SOFCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
  }

  if (__HAL_PCD_GET_FLAG(hpcd, USB_ISTR_ESOF))
 8001cce:	687b      	ldr	r3, [r7, #4]
 8001cd0:	681b      	ldr	r3, [r3, #0]
 8001cd2:	4618      	mov	r0, r3
 8001cd4:	f004 f9a8 	bl	8006028 <USB_ReadInterrupts>
 8001cd8:	4603      	mov	r3, r0
 8001cda:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001cde:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8001ce2:	d10b      	bne.n	8001cfc <HAL_PCD_IRQHandler+0x2a2>
  {
    /* clear ESOF flag in ISTR */
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_ESOF);
 8001ce4:	687b      	ldr	r3, [r7, #4]
 8001ce6:	681b      	ldr	r3, [r3, #0]
 8001ce8:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 8001cec:	b29a      	uxth	r2, r3
 8001cee:	687b      	ldr	r3, [r7, #4]
 8001cf0:	681b      	ldr	r3, [r3, #0]
 8001cf2:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8001cf6:	b292      	uxth	r2, r2
 8001cf8:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44
  }
}
 8001cfc:	bf00      	nop
 8001cfe:	3720      	adds	r7, #32
 8001d00:	46bd      	mov	sp, r7
 8001d02:	bd80      	pop	{r7, pc}

08001d04 <HAL_PCD_SetAddress>:
  * @param  hpcd PCD handle
  * @param  address new device address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_SetAddress(PCD_HandleTypeDef *hpcd, uint8_t address)
{
 8001d04:	b580      	push	{r7, lr}
 8001d06:	b082      	sub	sp, #8
 8001d08:	af00      	add	r7, sp, #0
 8001d0a:	6078      	str	r0, [r7, #4]
 8001d0c:	460b      	mov	r3, r1
 8001d0e:	70fb      	strb	r3, [r7, #3]
  __HAL_LOCK(hpcd);
 8001d10:	687b      	ldr	r3, [r7, #4]
 8001d12:	f893 32a8 	ldrb.w	r3, [r3, #680]	; 0x2a8
 8001d16:	2b01      	cmp	r3, #1
 8001d18:	d101      	bne.n	8001d1e <HAL_PCD_SetAddress+0x1a>
 8001d1a:	2302      	movs	r3, #2
 8001d1c:	e013      	b.n	8001d46 <HAL_PCD_SetAddress+0x42>
 8001d1e:	687b      	ldr	r3, [r7, #4]
 8001d20:	2201      	movs	r2, #1
 8001d22:	f883 22a8 	strb.w	r2, [r3, #680]	; 0x2a8
  hpcd->USB_Address = address;
 8001d26:	687b      	ldr	r3, [r7, #4]
 8001d28:	78fa      	ldrb	r2, [r7, #3]
 8001d2a:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
  (void)USB_SetDevAddress(hpcd->Instance, address);
 8001d2e:	687b      	ldr	r3, [r7, #4]
 8001d30:	681b      	ldr	r3, [r3, #0]
 8001d32:	78fa      	ldrb	r2, [r7, #3]
 8001d34:	4611      	mov	r1, r2
 8001d36:	4618      	mov	r0, r3
 8001d38:	f004 f94f 	bl	8005fda <USB_SetDevAddress>
  __HAL_UNLOCK(hpcd);
 8001d3c:	687b      	ldr	r3, [r7, #4]
 8001d3e:	2200      	movs	r2, #0
 8001d40:	f883 22a8 	strb.w	r2, [r3, #680]	; 0x2a8

  return HAL_OK;
 8001d44:	2300      	movs	r3, #0
}
 8001d46:	4618      	mov	r0, r3
 8001d48:	3708      	adds	r7, #8
 8001d4a:	46bd      	mov	sp, r7
 8001d4c:	bd80      	pop	{r7, pc}

08001d4e <HAL_PCD_EP_Open>:
  * @param  ep_type endpoint type
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Open(PCD_HandleTypeDef *hpcd, uint8_t ep_addr,
                                  uint16_t ep_mps, uint8_t ep_type)
{
 8001d4e:	b580      	push	{r7, lr}
 8001d50:	b084      	sub	sp, #16
 8001d52:	af00      	add	r7, sp, #0
 8001d54:	6078      	str	r0, [r7, #4]
 8001d56:	4608      	mov	r0, r1
 8001d58:	4611      	mov	r1, r2
 8001d5a:	461a      	mov	r2, r3
 8001d5c:	4603      	mov	r3, r0
 8001d5e:	70fb      	strb	r3, [r7, #3]
 8001d60:	460b      	mov	r3, r1
 8001d62:	803b      	strh	r3, [r7, #0]
 8001d64:	4613      	mov	r3, r2
 8001d66:	70bb      	strb	r3, [r7, #2]
  HAL_StatusTypeDef  ret = HAL_OK;
 8001d68:	2300      	movs	r3, #0
 8001d6a:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  if ((ep_addr & 0x80U) == 0x80U)
 8001d6c:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8001d70:	2b00      	cmp	r3, #0
 8001d72:	da0e      	bge.n	8001d92 <HAL_PCD_EP_Open+0x44>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8001d74:	78fb      	ldrb	r3, [r7, #3]
 8001d76:	f003 0307 	and.w	r3, r3, #7
 8001d7a:	1c5a      	adds	r2, r3, #1
 8001d7c:	4613      	mov	r3, r2
 8001d7e:	009b      	lsls	r3, r3, #2
 8001d80:	4413      	add	r3, r2
 8001d82:	00db      	lsls	r3, r3, #3
 8001d84:	687a      	ldr	r2, [r7, #4]
 8001d86:	4413      	add	r3, r2
 8001d88:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 8001d8a:	68fb      	ldr	r3, [r7, #12]
 8001d8c:	2201      	movs	r2, #1
 8001d8e:	705a      	strb	r2, [r3, #1]
 8001d90:	e00e      	b.n	8001db0 <HAL_PCD_EP_Open+0x62>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8001d92:	78fb      	ldrb	r3, [r7, #3]
 8001d94:	f003 0207 	and.w	r2, r3, #7
 8001d98:	4613      	mov	r3, r2
 8001d9a:	009b      	lsls	r3, r3, #2
 8001d9c:	4413      	add	r3, r2
 8001d9e:	00db      	lsls	r3, r3, #3
 8001da0:	f503 73b4 	add.w	r3, r3, #360	; 0x168
 8001da4:	687a      	ldr	r2, [r7, #4]
 8001da6:	4413      	add	r3, r2
 8001da8:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 8001daa:	68fb      	ldr	r3, [r7, #12]
 8001dac:	2200      	movs	r2, #0
 8001dae:	705a      	strb	r2, [r3, #1]
  }

  ep->num = ep_addr & EP_ADDR_MSK;
 8001db0:	78fb      	ldrb	r3, [r7, #3]
 8001db2:	f003 0307 	and.w	r3, r3, #7
 8001db6:	b2da      	uxtb	r2, r3
 8001db8:	68fb      	ldr	r3, [r7, #12]
 8001dba:	701a      	strb	r2, [r3, #0]
  ep->maxpacket = ep_mps;
 8001dbc:	883a      	ldrh	r2, [r7, #0]
 8001dbe:	68fb      	ldr	r3, [r7, #12]
 8001dc0:	611a      	str	r2, [r3, #16]
  ep->type = ep_type;
 8001dc2:	68fb      	ldr	r3, [r7, #12]
 8001dc4:	78ba      	ldrb	r2, [r7, #2]
 8001dc6:	70da      	strb	r2, [r3, #3]

  if (ep->is_in != 0U)
 8001dc8:	68fb      	ldr	r3, [r7, #12]
 8001dca:	785b      	ldrb	r3, [r3, #1]
 8001dcc:	2b00      	cmp	r3, #0
 8001dce:	d004      	beq.n	8001dda <HAL_PCD_EP_Open+0x8c>
  {
    /* Assign a Tx FIFO */
    ep->tx_fifo_num = ep->num;
 8001dd0:	68fb      	ldr	r3, [r7, #12]
 8001dd2:	781b      	ldrb	r3, [r3, #0]
 8001dd4:	b29a      	uxth	r2, r3
 8001dd6:	68fb      	ldr	r3, [r7, #12]
 8001dd8:	81da      	strh	r2, [r3, #14]
  }
  /* Set initial data PID. */
  if (ep_type == EP_TYPE_BULK)
 8001dda:	78bb      	ldrb	r3, [r7, #2]
 8001ddc:	2b02      	cmp	r3, #2
 8001dde:	d102      	bne.n	8001de6 <HAL_PCD_EP_Open+0x98>
  {
    ep->data_pid_start = 0U;
 8001de0:	68fb      	ldr	r3, [r7, #12]
 8001de2:	2200      	movs	r2, #0
 8001de4:	711a      	strb	r2, [r3, #4]
  }

  __HAL_LOCK(hpcd);
 8001de6:	687b      	ldr	r3, [r7, #4]
 8001de8:	f893 32a8 	ldrb.w	r3, [r3, #680]	; 0x2a8
 8001dec:	2b01      	cmp	r3, #1
 8001dee:	d101      	bne.n	8001df4 <HAL_PCD_EP_Open+0xa6>
 8001df0:	2302      	movs	r3, #2
 8001df2:	e00e      	b.n	8001e12 <HAL_PCD_EP_Open+0xc4>
 8001df4:	687b      	ldr	r3, [r7, #4]
 8001df6:	2201      	movs	r2, #1
 8001df8:	f883 22a8 	strb.w	r2, [r3, #680]	; 0x2a8
  (void)USB_ActivateEndpoint(hpcd->Instance, ep);
 8001dfc:	687b      	ldr	r3, [r7, #4]
 8001dfe:	681b      	ldr	r3, [r3, #0]
 8001e00:	68f9      	ldr	r1, [r7, #12]
 8001e02:	4618      	mov	r0, r3
 8001e04:	f002 f976 	bl	80040f4 <USB_ActivateEndpoint>
  __HAL_UNLOCK(hpcd);
 8001e08:	687b      	ldr	r3, [r7, #4]
 8001e0a:	2200      	movs	r2, #0
 8001e0c:	f883 22a8 	strb.w	r2, [r3, #680]	; 0x2a8

  return ret;
 8001e10:	7afb      	ldrb	r3, [r7, #11]
}
 8001e12:	4618      	mov	r0, r3
 8001e14:	3710      	adds	r7, #16
 8001e16:	46bd      	mov	sp, r7
 8001e18:	bd80      	pop	{r7, pc}

08001e1a <HAL_PCD_EP_Close>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Close(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 8001e1a:	b580      	push	{r7, lr}
 8001e1c:	b084      	sub	sp, #16
 8001e1e:	af00      	add	r7, sp, #0
 8001e20:	6078      	str	r0, [r7, #4]
 8001e22:	460b      	mov	r3, r1
 8001e24:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if ((ep_addr & 0x80U) == 0x80U)
 8001e26:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8001e2a:	2b00      	cmp	r3, #0
 8001e2c:	da0e      	bge.n	8001e4c <HAL_PCD_EP_Close+0x32>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8001e2e:	78fb      	ldrb	r3, [r7, #3]
 8001e30:	f003 0307 	and.w	r3, r3, #7
 8001e34:	1c5a      	adds	r2, r3, #1
 8001e36:	4613      	mov	r3, r2
 8001e38:	009b      	lsls	r3, r3, #2
 8001e3a:	4413      	add	r3, r2
 8001e3c:	00db      	lsls	r3, r3, #3
 8001e3e:	687a      	ldr	r2, [r7, #4]
 8001e40:	4413      	add	r3, r2
 8001e42:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 8001e44:	68fb      	ldr	r3, [r7, #12]
 8001e46:	2201      	movs	r2, #1
 8001e48:	705a      	strb	r2, [r3, #1]
 8001e4a:	e00e      	b.n	8001e6a <HAL_PCD_EP_Close+0x50>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8001e4c:	78fb      	ldrb	r3, [r7, #3]
 8001e4e:	f003 0207 	and.w	r2, r3, #7
 8001e52:	4613      	mov	r3, r2
 8001e54:	009b      	lsls	r3, r3, #2
 8001e56:	4413      	add	r3, r2
 8001e58:	00db      	lsls	r3, r3, #3
 8001e5a:	f503 73b4 	add.w	r3, r3, #360	; 0x168
 8001e5e:	687a      	ldr	r2, [r7, #4]
 8001e60:	4413      	add	r3, r2
 8001e62:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 8001e64:	68fb      	ldr	r3, [r7, #12]
 8001e66:	2200      	movs	r2, #0
 8001e68:	705a      	strb	r2, [r3, #1]
  }
  ep->num   = ep_addr & EP_ADDR_MSK;
 8001e6a:	78fb      	ldrb	r3, [r7, #3]
 8001e6c:	f003 0307 	and.w	r3, r3, #7
 8001e70:	b2da      	uxtb	r2, r3
 8001e72:	68fb      	ldr	r3, [r7, #12]
 8001e74:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 8001e76:	687b      	ldr	r3, [r7, #4]
 8001e78:	f893 32a8 	ldrb.w	r3, [r3, #680]	; 0x2a8
 8001e7c:	2b01      	cmp	r3, #1
 8001e7e:	d101      	bne.n	8001e84 <HAL_PCD_EP_Close+0x6a>
 8001e80:	2302      	movs	r3, #2
 8001e82:	e00e      	b.n	8001ea2 <HAL_PCD_EP_Close+0x88>
 8001e84:	687b      	ldr	r3, [r7, #4]
 8001e86:	2201      	movs	r2, #1
 8001e88:	f883 22a8 	strb.w	r2, [r3, #680]	; 0x2a8
  (void)USB_DeactivateEndpoint(hpcd->Instance, ep);
 8001e8c:	687b      	ldr	r3, [r7, #4]
 8001e8e:	681b      	ldr	r3, [r3, #0]
 8001e90:	68f9      	ldr	r1, [r7, #12]
 8001e92:	4618      	mov	r0, r3
 8001e94:	f002 fc98 	bl	80047c8 <USB_DeactivateEndpoint>
  __HAL_UNLOCK(hpcd);
 8001e98:	687b      	ldr	r3, [r7, #4]
 8001e9a:	2200      	movs	r2, #0
 8001e9c:	f883 22a8 	strb.w	r2, [r3, #680]	; 0x2a8
  return HAL_OK;
 8001ea0:	2300      	movs	r3, #0
}
 8001ea2:	4618      	mov	r0, r3
 8001ea4:	3710      	adds	r7, #16
 8001ea6:	46bd      	mov	sp, r7
 8001ea8:	bd80      	pop	{r7, pc}

08001eaa <HAL_PCD_EP_Receive>:
  * @param  pBuf pointer to the reception buffer
  * @param  len amount of data to be received
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Receive(PCD_HandleTypeDef *hpcd, uint8_t ep_addr, uint8_t *pBuf, uint32_t len)
{
 8001eaa:	b580      	push	{r7, lr}
 8001eac:	b086      	sub	sp, #24
 8001eae:	af00      	add	r7, sp, #0
 8001eb0:	60f8      	str	r0, [r7, #12]
 8001eb2:	607a      	str	r2, [r7, #4]
 8001eb4:	603b      	str	r3, [r7, #0]
 8001eb6:	460b      	mov	r3, r1
 8001eb8:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8001eba:	7afb      	ldrb	r3, [r7, #11]
 8001ebc:	f003 0207 	and.w	r2, r3, #7
 8001ec0:	4613      	mov	r3, r2
 8001ec2:	009b      	lsls	r3, r3, #2
 8001ec4:	4413      	add	r3, r2
 8001ec6:	00db      	lsls	r3, r3, #3
 8001ec8:	f503 73b4 	add.w	r3, r3, #360	; 0x168
 8001ecc:	68fa      	ldr	r2, [r7, #12]
 8001ece:	4413      	add	r3, r2
 8001ed0:	617b      	str	r3, [r7, #20]

  /*setup and start the Xfer */
  ep->xfer_buff = pBuf;
 8001ed2:	697b      	ldr	r3, [r7, #20]
 8001ed4:	687a      	ldr	r2, [r7, #4]
 8001ed6:	615a      	str	r2, [r3, #20]
  ep->xfer_len = len;
 8001ed8:	697b      	ldr	r3, [r7, #20]
 8001eda:	683a      	ldr	r2, [r7, #0]
 8001edc:	619a      	str	r2, [r3, #24]
  ep->xfer_count = 0U;
 8001ede:	697b      	ldr	r3, [r7, #20]
 8001ee0:	2200      	movs	r2, #0
 8001ee2:	61da      	str	r2, [r3, #28]
  ep->is_in = 0U;
 8001ee4:	697b      	ldr	r3, [r7, #20]
 8001ee6:	2200      	movs	r2, #0
 8001ee8:	705a      	strb	r2, [r3, #1]
  ep->num = ep_addr & EP_ADDR_MSK;
 8001eea:	7afb      	ldrb	r3, [r7, #11]
 8001eec:	f003 0307 	and.w	r3, r3, #7
 8001ef0:	b2da      	uxtb	r2, r3
 8001ef2:	697b      	ldr	r3, [r7, #20]
 8001ef4:	701a      	strb	r2, [r3, #0]

  if ((ep_addr & EP_ADDR_MSK) == 0U)
 8001ef6:	7afb      	ldrb	r3, [r7, #11]
 8001ef8:	f003 0307 	and.w	r3, r3, #7
 8001efc:	2b00      	cmp	r3, #0
 8001efe:	d106      	bne.n	8001f0e <HAL_PCD_EP_Receive+0x64>
  {
    (void)USB_EP0StartXfer(hpcd->Instance, ep);
 8001f00:	68fb      	ldr	r3, [r7, #12]
 8001f02:	681b      	ldr	r3, [r3, #0]
 8001f04:	6979      	ldr	r1, [r7, #20]
 8001f06:	4618      	mov	r0, r3
 8001f08:	f002 fe4a 	bl	8004ba0 <USB_EPStartXfer>
 8001f0c:	e005      	b.n	8001f1a <HAL_PCD_EP_Receive+0x70>
  }
  else
  {
    (void)USB_EPStartXfer(hpcd->Instance, ep);
 8001f0e:	68fb      	ldr	r3, [r7, #12]
 8001f10:	681b      	ldr	r3, [r3, #0]
 8001f12:	6979      	ldr	r1, [r7, #20]
 8001f14:	4618      	mov	r0, r3
 8001f16:	f002 fe43 	bl	8004ba0 <USB_EPStartXfer>
  }

  return HAL_OK;
 8001f1a:	2300      	movs	r3, #0
}
 8001f1c:	4618      	mov	r0, r3
 8001f1e:	3718      	adds	r7, #24
 8001f20:	46bd      	mov	sp, r7
 8001f22:	bd80      	pop	{r7, pc}

08001f24 <HAL_PCD_EP_GetRxCount>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval Data Size
  */
uint32_t HAL_PCD_EP_GetRxCount(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 8001f24:	b480      	push	{r7}
 8001f26:	b083      	sub	sp, #12
 8001f28:	af00      	add	r7, sp, #0
 8001f2a:	6078      	str	r0, [r7, #4]
 8001f2c:	460b      	mov	r3, r1
 8001f2e:	70fb      	strb	r3, [r7, #3]
  return hpcd->OUT_ep[ep_addr & EP_ADDR_MSK].xfer_count;
 8001f30:	78fb      	ldrb	r3, [r7, #3]
 8001f32:	f003 0207 	and.w	r2, r3, #7
 8001f36:	6879      	ldr	r1, [r7, #4]
 8001f38:	4613      	mov	r3, r2
 8001f3a:	009b      	lsls	r3, r3, #2
 8001f3c:	4413      	add	r3, r2
 8001f3e:	00db      	lsls	r3, r3, #3
 8001f40:	440b      	add	r3, r1
 8001f42:	f503 73c2 	add.w	r3, r3, #388	; 0x184
 8001f46:	681b      	ldr	r3, [r3, #0]
}
 8001f48:	4618      	mov	r0, r3
 8001f4a:	370c      	adds	r7, #12
 8001f4c:	46bd      	mov	sp, r7
 8001f4e:	bc80      	pop	{r7}
 8001f50:	4770      	bx	lr

08001f52 <HAL_PCD_EP_Transmit>:
  * @param  pBuf pointer to the transmission buffer
  * @param  len amount of data to be sent
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Transmit(PCD_HandleTypeDef *hpcd, uint8_t ep_addr, uint8_t *pBuf, uint32_t len)
{
 8001f52:	b580      	push	{r7, lr}
 8001f54:	b086      	sub	sp, #24
 8001f56:	af00      	add	r7, sp, #0
 8001f58:	60f8      	str	r0, [r7, #12]
 8001f5a:	607a      	str	r2, [r7, #4]
 8001f5c:	603b      	str	r3, [r7, #0]
 8001f5e:	460b      	mov	r3, r1
 8001f60:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8001f62:	7afb      	ldrb	r3, [r7, #11]
 8001f64:	f003 0307 	and.w	r3, r3, #7
 8001f68:	1c5a      	adds	r2, r3, #1
 8001f6a:	4613      	mov	r3, r2
 8001f6c:	009b      	lsls	r3, r3, #2
 8001f6e:	4413      	add	r3, r2
 8001f70:	00db      	lsls	r3, r3, #3
 8001f72:	68fa      	ldr	r2, [r7, #12]
 8001f74:	4413      	add	r3, r2
 8001f76:	617b      	str	r3, [r7, #20]

  /*setup and start the Xfer */
  ep->xfer_buff = pBuf;
 8001f78:	697b      	ldr	r3, [r7, #20]
 8001f7a:	687a      	ldr	r2, [r7, #4]
 8001f7c:	615a      	str	r2, [r3, #20]
  ep->xfer_len = len;
 8001f7e:	697b      	ldr	r3, [r7, #20]
 8001f80:	683a      	ldr	r2, [r7, #0]
 8001f82:	619a      	str	r2, [r3, #24]
#if defined (USB)
  ep->xfer_fill_db = 1U;
 8001f84:	697b      	ldr	r3, [r7, #20]
 8001f86:	2201      	movs	r2, #1
 8001f88:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
  ep->xfer_len_db = len;
 8001f8c:	697b      	ldr	r3, [r7, #20]
 8001f8e:	683a      	ldr	r2, [r7, #0]
 8001f90:	621a      	str	r2, [r3, #32]
#endif /* defined (USB) */
  ep->xfer_count = 0U;
 8001f92:	697b      	ldr	r3, [r7, #20]
 8001f94:	2200      	movs	r2, #0
 8001f96:	61da      	str	r2, [r3, #28]
  ep->is_in = 1U;
 8001f98:	697b      	ldr	r3, [r7, #20]
 8001f9a:	2201      	movs	r2, #1
 8001f9c:	705a      	strb	r2, [r3, #1]
  ep->num = ep_addr & EP_ADDR_MSK;
 8001f9e:	7afb      	ldrb	r3, [r7, #11]
 8001fa0:	f003 0307 	and.w	r3, r3, #7
 8001fa4:	b2da      	uxtb	r2, r3
 8001fa6:	697b      	ldr	r3, [r7, #20]
 8001fa8:	701a      	strb	r2, [r3, #0]

  if ((ep_addr & EP_ADDR_MSK) == 0U)
 8001faa:	7afb      	ldrb	r3, [r7, #11]
 8001fac:	f003 0307 	and.w	r3, r3, #7
 8001fb0:	2b00      	cmp	r3, #0
 8001fb2:	d106      	bne.n	8001fc2 <HAL_PCD_EP_Transmit+0x70>
  {
    (void)USB_EP0StartXfer(hpcd->Instance, ep);
 8001fb4:	68fb      	ldr	r3, [r7, #12]
 8001fb6:	681b      	ldr	r3, [r3, #0]
 8001fb8:	6979      	ldr	r1, [r7, #20]
 8001fba:	4618      	mov	r0, r3
 8001fbc:	f002 fdf0 	bl	8004ba0 <USB_EPStartXfer>
 8001fc0:	e005      	b.n	8001fce <HAL_PCD_EP_Transmit+0x7c>
  }
  else
  {
    (void)USB_EPStartXfer(hpcd->Instance, ep);
 8001fc2:	68fb      	ldr	r3, [r7, #12]
 8001fc4:	681b      	ldr	r3, [r3, #0]
 8001fc6:	6979      	ldr	r1, [r7, #20]
 8001fc8:	4618      	mov	r0, r3
 8001fca:	f002 fde9 	bl	8004ba0 <USB_EPStartXfer>
  }

  return HAL_OK;
 8001fce:	2300      	movs	r3, #0
}
 8001fd0:	4618      	mov	r0, r3
 8001fd2:	3718      	adds	r7, #24
 8001fd4:	46bd      	mov	sp, r7
 8001fd6:	bd80      	pop	{r7, pc}

08001fd8 <HAL_PCD_EP_SetStall>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_SetStall(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 8001fd8:	b580      	push	{r7, lr}
 8001fda:	b084      	sub	sp, #16
 8001fdc:	af00      	add	r7, sp, #0
 8001fde:	6078      	str	r0, [r7, #4]
 8001fe0:	460b      	mov	r3, r1
 8001fe2:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if (((uint32_t)ep_addr & EP_ADDR_MSK) > hpcd->Init.dev_endpoints)
 8001fe4:	78fb      	ldrb	r3, [r7, #3]
 8001fe6:	f003 0207 	and.w	r2, r3, #7
 8001fea:	687b      	ldr	r3, [r7, #4]
 8001fec:	685b      	ldr	r3, [r3, #4]
 8001fee:	429a      	cmp	r2, r3
 8001ff0:	d901      	bls.n	8001ff6 <HAL_PCD_EP_SetStall+0x1e>
  {
    return HAL_ERROR;
 8001ff2:	2301      	movs	r3, #1
 8001ff4:	e04c      	b.n	8002090 <HAL_PCD_EP_SetStall+0xb8>
  }

  if ((0x80U & ep_addr) == 0x80U)
 8001ff6:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8001ffa:	2b00      	cmp	r3, #0
 8001ffc:	da0e      	bge.n	800201c <HAL_PCD_EP_SetStall+0x44>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8001ffe:	78fb      	ldrb	r3, [r7, #3]
 8002000:	f003 0307 	and.w	r3, r3, #7
 8002004:	1c5a      	adds	r2, r3, #1
 8002006:	4613      	mov	r3, r2
 8002008:	009b      	lsls	r3, r3, #2
 800200a:	4413      	add	r3, r2
 800200c:	00db      	lsls	r3, r3, #3
 800200e:	687a      	ldr	r2, [r7, #4]
 8002010:	4413      	add	r3, r2
 8002012:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 8002014:	68fb      	ldr	r3, [r7, #12]
 8002016:	2201      	movs	r2, #1
 8002018:	705a      	strb	r2, [r3, #1]
 800201a:	e00c      	b.n	8002036 <HAL_PCD_EP_SetStall+0x5e>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr];
 800201c:	78fa      	ldrb	r2, [r7, #3]
 800201e:	4613      	mov	r3, r2
 8002020:	009b      	lsls	r3, r3, #2
 8002022:	4413      	add	r3, r2
 8002024:	00db      	lsls	r3, r3, #3
 8002026:	f503 73b4 	add.w	r3, r3, #360	; 0x168
 800202a:	687a      	ldr	r2, [r7, #4]
 800202c:	4413      	add	r3, r2
 800202e:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 8002030:	68fb      	ldr	r3, [r7, #12]
 8002032:	2200      	movs	r2, #0
 8002034:	705a      	strb	r2, [r3, #1]
  }

  ep->is_stall = 1U;
 8002036:	68fb      	ldr	r3, [r7, #12]
 8002038:	2201      	movs	r2, #1
 800203a:	709a      	strb	r2, [r3, #2]
  ep->num = ep_addr & EP_ADDR_MSK;
 800203c:	78fb      	ldrb	r3, [r7, #3]
 800203e:	f003 0307 	and.w	r3, r3, #7
 8002042:	b2da      	uxtb	r2, r3
 8002044:	68fb      	ldr	r3, [r7, #12]
 8002046:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 8002048:	687b      	ldr	r3, [r7, #4]
 800204a:	f893 32a8 	ldrb.w	r3, [r3, #680]	; 0x2a8
 800204e:	2b01      	cmp	r3, #1
 8002050:	d101      	bne.n	8002056 <HAL_PCD_EP_SetStall+0x7e>
 8002052:	2302      	movs	r3, #2
 8002054:	e01c      	b.n	8002090 <HAL_PCD_EP_SetStall+0xb8>
 8002056:	687b      	ldr	r3, [r7, #4]
 8002058:	2201      	movs	r2, #1
 800205a:	f883 22a8 	strb.w	r2, [r3, #680]	; 0x2a8

  (void)USB_EPSetStall(hpcd->Instance, ep);
 800205e:	687b      	ldr	r3, [r7, #4]
 8002060:	681b      	ldr	r3, [r3, #0]
 8002062:	68f9      	ldr	r1, [r7, #12]
 8002064:	4618      	mov	r0, r3
 8002066:	f003 febb 	bl	8005de0 <USB_EPSetStall>

  if ((ep_addr & EP_ADDR_MSK) == 0U)
 800206a:	78fb      	ldrb	r3, [r7, #3]
 800206c:	f003 0307 	and.w	r3, r3, #7
 8002070:	2b00      	cmp	r3, #0
 8002072:	d108      	bne.n	8002086 <HAL_PCD_EP_SetStall+0xae>
  {
    (void)USB_EP0_OutStart(hpcd->Instance, (uint8_t *)hpcd->Setup);
 8002074:	687b      	ldr	r3, [r7, #4]
 8002076:	681a      	ldr	r2, [r3, #0]
 8002078:	687b      	ldr	r3, [r7, #4]
 800207a:	f503 732c 	add.w	r3, r3, #688	; 0x2b0
 800207e:	4619      	mov	r1, r3
 8002080:	4610      	mov	r0, r2
 8002082:	f003 ffe0 	bl	8006046 <USB_EP0_OutStart>
  }

  __HAL_UNLOCK(hpcd);
 8002086:	687b      	ldr	r3, [r7, #4]
 8002088:	2200      	movs	r2, #0
 800208a:	f883 22a8 	strb.w	r2, [r3, #680]	; 0x2a8

  return HAL_OK;
 800208e:	2300      	movs	r3, #0
}
 8002090:	4618      	mov	r0, r3
 8002092:	3710      	adds	r7, #16
 8002094:	46bd      	mov	sp, r7
 8002096:	bd80      	pop	{r7, pc}

08002098 <HAL_PCD_EP_ClrStall>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_ClrStall(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 8002098:	b580      	push	{r7, lr}
 800209a:	b084      	sub	sp, #16
 800209c:	af00      	add	r7, sp, #0
 800209e:	6078      	str	r0, [r7, #4]
 80020a0:	460b      	mov	r3, r1
 80020a2:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if (((uint32_t)ep_addr & 0x0FU) > hpcd->Init.dev_endpoints)
 80020a4:	78fb      	ldrb	r3, [r7, #3]
 80020a6:	f003 020f 	and.w	r2, r3, #15
 80020aa:	687b      	ldr	r3, [r7, #4]
 80020ac:	685b      	ldr	r3, [r3, #4]
 80020ae:	429a      	cmp	r2, r3
 80020b0:	d901      	bls.n	80020b6 <HAL_PCD_EP_ClrStall+0x1e>
  {
    return HAL_ERROR;
 80020b2:	2301      	movs	r3, #1
 80020b4:	e040      	b.n	8002138 <HAL_PCD_EP_ClrStall+0xa0>
  }

  if ((0x80U & ep_addr) == 0x80U)
 80020b6:	f997 3003 	ldrsb.w	r3, [r7, #3]
 80020ba:	2b00      	cmp	r3, #0
 80020bc:	da0e      	bge.n	80020dc <HAL_PCD_EP_ClrStall+0x44>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 80020be:	78fb      	ldrb	r3, [r7, #3]
 80020c0:	f003 0307 	and.w	r3, r3, #7
 80020c4:	1c5a      	adds	r2, r3, #1
 80020c6:	4613      	mov	r3, r2
 80020c8:	009b      	lsls	r3, r3, #2
 80020ca:	4413      	add	r3, r2
 80020cc:	00db      	lsls	r3, r3, #3
 80020ce:	687a      	ldr	r2, [r7, #4]
 80020d0:	4413      	add	r3, r2
 80020d2:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 80020d4:	68fb      	ldr	r3, [r7, #12]
 80020d6:	2201      	movs	r2, #1
 80020d8:	705a      	strb	r2, [r3, #1]
 80020da:	e00e      	b.n	80020fa <HAL_PCD_EP_ClrStall+0x62>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 80020dc:	78fb      	ldrb	r3, [r7, #3]
 80020de:	f003 0207 	and.w	r2, r3, #7
 80020e2:	4613      	mov	r3, r2
 80020e4:	009b      	lsls	r3, r3, #2
 80020e6:	4413      	add	r3, r2
 80020e8:	00db      	lsls	r3, r3, #3
 80020ea:	f503 73b4 	add.w	r3, r3, #360	; 0x168
 80020ee:	687a      	ldr	r2, [r7, #4]
 80020f0:	4413      	add	r3, r2
 80020f2:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 80020f4:	68fb      	ldr	r3, [r7, #12]
 80020f6:	2200      	movs	r2, #0
 80020f8:	705a      	strb	r2, [r3, #1]
  }

  ep->is_stall = 0U;
 80020fa:	68fb      	ldr	r3, [r7, #12]
 80020fc:	2200      	movs	r2, #0
 80020fe:	709a      	strb	r2, [r3, #2]
  ep->num = ep_addr & EP_ADDR_MSK;
 8002100:	78fb      	ldrb	r3, [r7, #3]
 8002102:	f003 0307 	and.w	r3, r3, #7
 8002106:	b2da      	uxtb	r2, r3
 8002108:	68fb      	ldr	r3, [r7, #12]
 800210a:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 800210c:	687b      	ldr	r3, [r7, #4]
 800210e:	f893 32a8 	ldrb.w	r3, [r3, #680]	; 0x2a8
 8002112:	2b01      	cmp	r3, #1
 8002114:	d101      	bne.n	800211a <HAL_PCD_EP_ClrStall+0x82>
 8002116:	2302      	movs	r3, #2
 8002118:	e00e      	b.n	8002138 <HAL_PCD_EP_ClrStall+0xa0>
 800211a:	687b      	ldr	r3, [r7, #4]
 800211c:	2201      	movs	r2, #1
 800211e:	f883 22a8 	strb.w	r2, [r3, #680]	; 0x2a8
  (void)USB_EPClearStall(hpcd->Instance, ep);
 8002122:	687b      	ldr	r3, [r7, #4]
 8002124:	681b      	ldr	r3, [r3, #0]
 8002126:	68f9      	ldr	r1, [r7, #12]
 8002128:	4618      	mov	r0, r3
 800212a:	f003 fea9 	bl	8005e80 <USB_EPClearStall>
  __HAL_UNLOCK(hpcd);
 800212e:	687b      	ldr	r3, [r7, #4]
 8002130:	2200      	movs	r2, #0
 8002132:	f883 22a8 	strb.w	r2, [r3, #680]	; 0x2a8

  return HAL_OK;
 8002136:	2300      	movs	r3, #0
}
 8002138:	4618      	mov	r0, r3
 800213a:	3710      	adds	r7, #16
 800213c:	46bd      	mov	sp, r7
 800213e:	bd80      	pop	{r7, pc}

08002140 <PCD_EP_ISR_Handler>:
  * @brief  This function handles PCD Endpoint interrupt request.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
static HAL_StatusTypeDef PCD_EP_ISR_Handler(PCD_HandleTypeDef *hpcd)
{
 8002140:	b580      	push	{r7, lr}
 8002142:	b08e      	sub	sp, #56	; 0x38
 8002144:	af00      	add	r7, sp, #0
 8002146:	6078      	str	r0, [r7, #4]
  PCD_EPTypeDef *ep;
  uint16_t count, wIstr, wEPVal, TxByteNbre;
  uint8_t epindex;

  /* stay in loop while pending interrupts */
  while ((hpcd->Instance->ISTR & USB_ISTR_CTR) != 0U)
 8002148:	e2df      	b.n	800270a <PCD_EP_ISR_Handler+0x5ca>
  {
    wIstr = hpcd->Instance->ISTR;
 800214a:	687b      	ldr	r3, [r7, #4]
 800214c:	681b      	ldr	r3, [r3, #0]
 800214e:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 8002152:	85fb      	strh	r3, [r7, #46]	; 0x2e

    /* extract highest priority endpoint number */
    epindex = (uint8_t)(wIstr & USB_ISTR_EP_ID);
 8002154:	8dfb      	ldrh	r3, [r7, #46]	; 0x2e
 8002156:	b2db      	uxtb	r3, r3
 8002158:	f003 030f 	and.w	r3, r3, #15
 800215c:	f887 302d 	strb.w	r3, [r7, #45]	; 0x2d

    if (epindex == 0U)
 8002160:	f897 302d 	ldrb.w	r3, [r7, #45]	; 0x2d
 8002164:	2b00      	cmp	r3, #0
 8002166:	f040 8158 	bne.w	800241a <PCD_EP_ISR_Handler+0x2da>
    {
      /* Decode and service control endpoint interrupt */

      /* DIR bit = origin of the interrupt */
      if ((wIstr & USB_ISTR_DIR) == 0U)
 800216a:	8dfb      	ldrh	r3, [r7, #46]	; 0x2e
 800216c:	f003 0310 	and.w	r3, r3, #16
 8002170:	2b00      	cmp	r3, #0
 8002172:	d152      	bne.n	800221a <PCD_EP_ISR_Handler+0xda>
      {
        /* DIR = 0 */

        /* DIR = 0 => IN  int */
        /* DIR = 0 implies that (EP_CTR_TX = 1) always */
        PCD_CLEAR_TX_EP_CTR(hpcd->Instance, PCD_ENDP0);
 8002174:	687b      	ldr	r3, [r7, #4]
 8002176:	681b      	ldr	r3, [r3, #0]
 8002178:	881b      	ldrh	r3, [r3, #0]
 800217a:	b29b      	uxth	r3, r3
 800217c:	f423 43e1 	bic.w	r3, r3, #28800	; 0x7080
 8002180:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8002184:	81fb      	strh	r3, [r7, #14]
 8002186:	687b      	ldr	r3, [r7, #4]
 8002188:	681a      	ldr	r2, [r3, #0]
 800218a:	89fb      	ldrh	r3, [r7, #14]
 800218c:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8002190:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8002194:	b29b      	uxth	r3, r3
 8002196:	8013      	strh	r3, [r2, #0]
        ep = &hpcd->IN_ep[0];
 8002198:	687b      	ldr	r3, [r7, #4]
 800219a:	3328      	adds	r3, #40	; 0x28
 800219c:	627b      	str	r3, [r7, #36]	; 0x24

        ep->xfer_count = PCD_GET_EP_TX_CNT(hpcd->Instance, ep->num);
 800219e:	687b      	ldr	r3, [r7, #4]
 80021a0:	681b      	ldr	r3, [r3, #0]
 80021a2:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 80021a6:	b29b      	uxth	r3, r3
 80021a8:	461a      	mov	r2, r3
 80021aa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80021ac:	781b      	ldrb	r3, [r3, #0]
 80021ae:	00db      	lsls	r3, r3, #3
 80021b0:	4413      	add	r3, r2
 80021b2:	3302      	adds	r3, #2
 80021b4:	005b      	lsls	r3, r3, #1
 80021b6:	687a      	ldr	r2, [r7, #4]
 80021b8:	6812      	ldr	r2, [r2, #0]
 80021ba:	4413      	add	r3, r2
 80021bc:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 80021c0:	881b      	ldrh	r3, [r3, #0]
 80021c2:	f3c3 0209 	ubfx	r2, r3, #0, #10
 80021c6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80021c8:	61da      	str	r2, [r3, #28]
        ep->xfer_buff += ep->xfer_count;
 80021ca:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80021cc:	695a      	ldr	r2, [r3, #20]
 80021ce:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80021d0:	69db      	ldr	r3, [r3, #28]
 80021d2:	441a      	add	r2, r3
 80021d4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80021d6:	615a      	str	r2, [r3, #20]

        /* TX COMPLETE */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->DataInStageCallback(hpcd, 0U);
#else
        HAL_PCD_DataInStageCallback(hpcd, 0U);
 80021d8:	2100      	movs	r1, #0
 80021da:	6878      	ldr	r0, [r7, #4]
 80021dc:	f005 fd75 	bl	8007cca <HAL_PCD_DataInStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

        if ((hpcd->USB_Address > 0U) && (ep->xfer_len == 0U))
 80021e0:	687b      	ldr	r3, [r7, #4]
 80021e2:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 80021e6:	b2db      	uxtb	r3, r3
 80021e8:	2b00      	cmp	r3, #0
 80021ea:	f000 828e 	beq.w	800270a <PCD_EP_ISR_Handler+0x5ca>
 80021ee:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80021f0:	699b      	ldr	r3, [r3, #24]
 80021f2:	2b00      	cmp	r3, #0
 80021f4:	f040 8289 	bne.w	800270a <PCD_EP_ISR_Handler+0x5ca>
        {
          hpcd->Instance->DADDR = ((uint16_t)hpcd->USB_Address | USB_DADDR_EF);
 80021f8:	687b      	ldr	r3, [r7, #4]
 80021fa:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 80021fe:	b2db      	uxtb	r3, r3
 8002200:	f063 037f 	orn	r3, r3, #127	; 0x7f
 8002204:	b2da      	uxtb	r2, r3
 8002206:	687b      	ldr	r3, [r7, #4]
 8002208:	681b      	ldr	r3, [r3, #0]
 800220a:	b292      	uxth	r2, r2
 800220c:	f8a3 204c 	strh.w	r2, [r3, #76]	; 0x4c
          hpcd->USB_Address = 0U;
 8002210:	687b      	ldr	r3, [r7, #4]
 8002212:	2200      	movs	r2, #0
 8002214:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
 8002218:	e277      	b.n	800270a <PCD_EP_ISR_Handler+0x5ca>
      {
        /* DIR = 1 */

        /* DIR = 1 & CTR_RX => SETUP or OUT int */
        /* DIR = 1 & (CTR_TX | CTR_RX) => 2 int pending */
        ep = &hpcd->OUT_ep[0];
 800221a:	687b      	ldr	r3, [r7, #4]
 800221c:	f503 73b4 	add.w	r3, r3, #360	; 0x168
 8002220:	627b      	str	r3, [r7, #36]	; 0x24
        wEPVal = PCD_GET_ENDPOINT(hpcd->Instance, PCD_ENDP0);
 8002222:	687b      	ldr	r3, [r7, #4]
 8002224:	681b      	ldr	r3, [r3, #0]
 8002226:	881b      	ldrh	r3, [r3, #0]
 8002228:	857b      	strh	r3, [r7, #42]	; 0x2a

        if ((wEPVal & USB_EP_SETUP) != 0U)
 800222a:	8d7b      	ldrh	r3, [r7, #42]	; 0x2a
 800222c:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8002230:	2b00      	cmp	r3, #0
 8002232:	d034      	beq.n	800229e <PCD_EP_ISR_Handler+0x15e>
        {
          /* Get SETUP Packet */
          ep->xfer_count = PCD_GET_EP_RX_CNT(hpcd->Instance, ep->num);
 8002234:	687b      	ldr	r3, [r7, #4]
 8002236:	681b      	ldr	r3, [r3, #0]
 8002238:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 800223c:	b29b      	uxth	r3, r3
 800223e:	461a      	mov	r2, r3
 8002240:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002242:	781b      	ldrb	r3, [r3, #0]
 8002244:	00db      	lsls	r3, r3, #3
 8002246:	4413      	add	r3, r2
 8002248:	3306      	adds	r3, #6
 800224a:	005b      	lsls	r3, r3, #1
 800224c:	687a      	ldr	r2, [r7, #4]
 800224e:	6812      	ldr	r2, [r2, #0]
 8002250:	4413      	add	r3, r2
 8002252:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8002256:	881b      	ldrh	r3, [r3, #0]
 8002258:	f3c3 0209 	ubfx	r2, r3, #0, #10
 800225c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800225e:	61da      	str	r2, [r3, #28]

          USB_ReadPMA(hpcd->Instance, (uint8_t *)hpcd->Setup,
 8002260:	687b      	ldr	r3, [r7, #4]
 8002262:	6818      	ldr	r0, [r3, #0]
 8002264:	687b      	ldr	r3, [r7, #4]
 8002266:	f503 712c 	add.w	r1, r3, #688	; 0x2b0
 800226a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800226c:	88da      	ldrh	r2, [r3, #6]
                      ep->pmaadress, (uint16_t)ep->xfer_count);
 800226e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002270:	69db      	ldr	r3, [r3, #28]
          USB_ReadPMA(hpcd->Instance, (uint8_t *)hpcd->Setup,
 8002272:	b29b      	uxth	r3, r3
 8002274:	f003 ff36 	bl	80060e4 <USB_ReadPMA>

          /* SETUP bit kept frozen while CTR_RX = 1 */
          PCD_CLEAR_RX_EP_CTR(hpcd->Instance, PCD_ENDP0);
 8002278:	687b      	ldr	r3, [r7, #4]
 800227a:	681b      	ldr	r3, [r3, #0]
 800227c:	881b      	ldrh	r3, [r3, #0]
 800227e:	b29a      	uxth	r2, r3
 8002280:	f640 738f 	movw	r3, #3983	; 0xf8f
 8002284:	4013      	ands	r3, r2
 8002286:	823b      	strh	r3, [r7, #16]
 8002288:	687b      	ldr	r3, [r7, #4]
 800228a:	681b      	ldr	r3, [r3, #0]
 800228c:	8a3a      	ldrh	r2, [r7, #16]
 800228e:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 8002292:	b292      	uxth	r2, r2
 8002294:	801a      	strh	r2, [r3, #0]

          /* Process SETUP Packet*/
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
          hpcd->SetupStageCallback(hpcd);
#else
          HAL_PCD_SetupStageCallback(hpcd);
 8002296:	6878      	ldr	r0, [r7, #4]
 8002298:	f005 fcea 	bl	8007c70 <HAL_PCD_SetupStageCallback>
 800229c:	e235      	b.n	800270a <PCD_EP_ISR_Handler+0x5ca>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
        }
        else if ((wEPVal & USB_EP_CTR_RX) != 0U)
 800229e:	f9b7 302a 	ldrsh.w	r3, [r7, #42]	; 0x2a
 80022a2:	2b00      	cmp	r3, #0
 80022a4:	f280 8231 	bge.w	800270a <PCD_EP_ISR_Handler+0x5ca>
        {
          PCD_CLEAR_RX_EP_CTR(hpcd->Instance, PCD_ENDP0);
 80022a8:	687b      	ldr	r3, [r7, #4]
 80022aa:	681b      	ldr	r3, [r3, #0]
 80022ac:	881b      	ldrh	r3, [r3, #0]
 80022ae:	b29a      	uxth	r2, r3
 80022b0:	f640 738f 	movw	r3, #3983	; 0xf8f
 80022b4:	4013      	ands	r3, r2
 80022b6:	83bb      	strh	r3, [r7, #28]
 80022b8:	687b      	ldr	r3, [r7, #4]
 80022ba:	681b      	ldr	r3, [r3, #0]
 80022bc:	8bba      	ldrh	r2, [r7, #28]
 80022be:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 80022c2:	b292      	uxth	r2, r2
 80022c4:	801a      	strh	r2, [r3, #0]

          /* Get Control Data OUT Packet */
          ep->xfer_count = PCD_GET_EP_RX_CNT(hpcd->Instance, ep->num);
 80022c6:	687b      	ldr	r3, [r7, #4]
 80022c8:	681b      	ldr	r3, [r3, #0]
 80022ca:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 80022ce:	b29b      	uxth	r3, r3
 80022d0:	461a      	mov	r2, r3
 80022d2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80022d4:	781b      	ldrb	r3, [r3, #0]
 80022d6:	00db      	lsls	r3, r3, #3
 80022d8:	4413      	add	r3, r2
 80022da:	3306      	adds	r3, #6
 80022dc:	005b      	lsls	r3, r3, #1
 80022de:	687a      	ldr	r2, [r7, #4]
 80022e0:	6812      	ldr	r2, [r2, #0]
 80022e2:	4413      	add	r3, r2
 80022e4:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 80022e8:	881b      	ldrh	r3, [r3, #0]
 80022ea:	f3c3 0209 	ubfx	r2, r3, #0, #10
 80022ee:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80022f0:	61da      	str	r2, [r3, #28]

          if ((ep->xfer_count != 0U) && (ep->xfer_buff != 0U))
 80022f2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80022f4:	69db      	ldr	r3, [r3, #28]
 80022f6:	2b00      	cmp	r3, #0
 80022f8:	d019      	beq.n	800232e <PCD_EP_ISR_Handler+0x1ee>
 80022fa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80022fc:	695b      	ldr	r3, [r3, #20]
 80022fe:	2b00      	cmp	r3, #0
 8002300:	d015      	beq.n	800232e <PCD_EP_ISR_Handler+0x1ee>
          {
            USB_ReadPMA(hpcd->Instance, ep->xfer_buff,
 8002302:	687b      	ldr	r3, [r7, #4]
 8002304:	6818      	ldr	r0, [r3, #0]
 8002306:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002308:	6959      	ldr	r1, [r3, #20]
 800230a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800230c:	88da      	ldrh	r2, [r3, #6]
                        ep->pmaadress, (uint16_t)ep->xfer_count);
 800230e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002310:	69db      	ldr	r3, [r3, #28]
            USB_ReadPMA(hpcd->Instance, ep->xfer_buff,
 8002312:	b29b      	uxth	r3, r3
 8002314:	f003 fee6 	bl	80060e4 <USB_ReadPMA>

            ep->xfer_buff += ep->xfer_count;
 8002318:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800231a:	695a      	ldr	r2, [r3, #20]
 800231c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800231e:	69db      	ldr	r3, [r3, #28]
 8002320:	441a      	add	r2, r3
 8002322:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002324:	615a      	str	r2, [r3, #20]

            /* Process Control Data OUT Packet */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
            hpcd->DataOutStageCallback(hpcd, 0U);
#else
            HAL_PCD_DataOutStageCallback(hpcd, 0U);
 8002326:	2100      	movs	r1, #0
 8002328:	6878      	ldr	r0, [r7, #4]
 800232a:	f005 fcb3 	bl	8007c94 <HAL_PCD_DataOutStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
          }

          PCD_SET_EP_RX_CNT(hpcd->Instance, PCD_ENDP0, ep->maxpacket);
 800232e:	687b      	ldr	r3, [r7, #4]
 8002330:	681b      	ldr	r3, [r3, #0]
 8002332:	61bb      	str	r3, [r7, #24]
 8002334:	687b      	ldr	r3, [r7, #4]
 8002336:	681b      	ldr	r3, [r3, #0]
 8002338:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 800233c:	b29b      	uxth	r3, r3
 800233e:	461a      	mov	r2, r3
 8002340:	69bb      	ldr	r3, [r7, #24]
 8002342:	4413      	add	r3, r2
 8002344:	61bb      	str	r3, [r7, #24]
 8002346:	69bb      	ldr	r3, [r7, #24]
 8002348:	f203 430c 	addw	r3, r3, #1036	; 0x40c
 800234c:	617b      	str	r3, [r7, #20]
 800234e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002350:	691b      	ldr	r3, [r3, #16]
 8002352:	2b00      	cmp	r3, #0
 8002354:	d112      	bne.n	800237c <PCD_EP_ISR_Handler+0x23c>
 8002356:	697b      	ldr	r3, [r7, #20]
 8002358:	881b      	ldrh	r3, [r3, #0]
 800235a:	b29b      	uxth	r3, r3
 800235c:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 8002360:	b29a      	uxth	r2, r3
 8002362:	697b      	ldr	r3, [r7, #20]
 8002364:	801a      	strh	r2, [r3, #0]
 8002366:	697b      	ldr	r3, [r7, #20]
 8002368:	881b      	ldrh	r3, [r3, #0]
 800236a:	b29b      	uxth	r3, r3
 800236c:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8002370:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8002374:	b29a      	uxth	r2, r3
 8002376:	697b      	ldr	r3, [r7, #20]
 8002378:	801a      	strh	r2, [r3, #0]
 800237a:	e02f      	b.n	80023dc <PCD_EP_ISR_Handler+0x29c>
 800237c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800237e:	691b      	ldr	r3, [r3, #16]
 8002380:	2b3e      	cmp	r3, #62	; 0x3e
 8002382:	d813      	bhi.n	80023ac <PCD_EP_ISR_Handler+0x26c>
 8002384:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002386:	691b      	ldr	r3, [r3, #16]
 8002388:	085b      	lsrs	r3, r3, #1
 800238a:	633b      	str	r3, [r7, #48]	; 0x30
 800238c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800238e:	691b      	ldr	r3, [r3, #16]
 8002390:	f003 0301 	and.w	r3, r3, #1
 8002394:	2b00      	cmp	r3, #0
 8002396:	d002      	beq.n	800239e <PCD_EP_ISR_Handler+0x25e>
 8002398:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800239a:	3301      	adds	r3, #1
 800239c:	633b      	str	r3, [r7, #48]	; 0x30
 800239e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80023a0:	b29b      	uxth	r3, r3
 80023a2:	029b      	lsls	r3, r3, #10
 80023a4:	b29a      	uxth	r2, r3
 80023a6:	697b      	ldr	r3, [r7, #20]
 80023a8:	801a      	strh	r2, [r3, #0]
 80023aa:	e017      	b.n	80023dc <PCD_EP_ISR_Handler+0x29c>
 80023ac:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80023ae:	691b      	ldr	r3, [r3, #16]
 80023b0:	095b      	lsrs	r3, r3, #5
 80023b2:	633b      	str	r3, [r7, #48]	; 0x30
 80023b4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80023b6:	691b      	ldr	r3, [r3, #16]
 80023b8:	f003 031f 	and.w	r3, r3, #31
 80023bc:	2b00      	cmp	r3, #0
 80023be:	d102      	bne.n	80023c6 <PCD_EP_ISR_Handler+0x286>
 80023c0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80023c2:	3b01      	subs	r3, #1
 80023c4:	633b      	str	r3, [r7, #48]	; 0x30
 80023c6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80023c8:	b29b      	uxth	r3, r3
 80023ca:	029b      	lsls	r3, r3, #10
 80023cc:	b29b      	uxth	r3, r3
 80023ce:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 80023d2:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 80023d6:	b29a      	uxth	r2, r3
 80023d8:	697b      	ldr	r3, [r7, #20]
 80023da:	801a      	strh	r2, [r3, #0]
          PCD_SET_EP_RX_STATUS(hpcd->Instance, PCD_ENDP0, USB_EP_RX_VALID);
 80023dc:	687b      	ldr	r3, [r7, #4]
 80023de:	681b      	ldr	r3, [r3, #0]
 80023e0:	881b      	ldrh	r3, [r3, #0]
 80023e2:	b29b      	uxth	r3, r3
 80023e4:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 80023e8:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80023ec:	827b      	strh	r3, [r7, #18]
 80023ee:	8a7b      	ldrh	r3, [r7, #18]
 80023f0:	f483 5380 	eor.w	r3, r3, #4096	; 0x1000
 80023f4:	827b      	strh	r3, [r7, #18]
 80023f6:	8a7b      	ldrh	r3, [r7, #18]
 80023f8:	f483 5300 	eor.w	r3, r3, #8192	; 0x2000
 80023fc:	827b      	strh	r3, [r7, #18]
 80023fe:	687b      	ldr	r3, [r7, #4]
 8002400:	681a      	ldr	r2, [r3, #0]
 8002402:	8a7b      	ldrh	r3, [r7, #18]
 8002404:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8002408:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 800240c:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8002410:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8002414:	b29b      	uxth	r3, r3
 8002416:	8013      	strh	r3, [r2, #0]
 8002418:	e177      	b.n	800270a <PCD_EP_ISR_Handler+0x5ca>
    }
    else
    {
      /* Decode and service non control endpoints interrupt */
      /* process related endpoint register */
      wEPVal = PCD_GET_ENDPOINT(hpcd->Instance, epindex);
 800241a:	687b      	ldr	r3, [r7, #4]
 800241c:	681b      	ldr	r3, [r3, #0]
 800241e:	461a      	mov	r2, r3
 8002420:	f897 302d 	ldrb.w	r3, [r7, #45]	; 0x2d
 8002424:	009b      	lsls	r3, r3, #2
 8002426:	4413      	add	r3, r2
 8002428:	881b      	ldrh	r3, [r3, #0]
 800242a:	857b      	strh	r3, [r7, #42]	; 0x2a

      if ((wEPVal & USB_EP_CTR_RX) != 0U)
 800242c:	f9b7 302a 	ldrsh.w	r3, [r7, #42]	; 0x2a
 8002430:	2b00      	cmp	r3, #0
 8002432:	f280 80ea 	bge.w	800260a <PCD_EP_ISR_Handler+0x4ca>
      {
        /* clear int flag */
        PCD_CLEAR_RX_EP_CTR(hpcd->Instance, epindex);
 8002436:	687b      	ldr	r3, [r7, #4]
 8002438:	681b      	ldr	r3, [r3, #0]
 800243a:	461a      	mov	r2, r3
 800243c:	f897 302d 	ldrb.w	r3, [r7, #45]	; 0x2d
 8002440:	009b      	lsls	r3, r3, #2
 8002442:	4413      	add	r3, r2
 8002444:	881b      	ldrh	r3, [r3, #0]
 8002446:	b29a      	uxth	r2, r3
 8002448:	f640 738f 	movw	r3, #3983	; 0xf8f
 800244c:	4013      	ands	r3, r2
 800244e:	853b      	strh	r3, [r7, #40]	; 0x28
 8002450:	687b      	ldr	r3, [r7, #4]
 8002452:	681b      	ldr	r3, [r3, #0]
 8002454:	461a      	mov	r2, r3
 8002456:	f897 302d 	ldrb.w	r3, [r7, #45]	; 0x2d
 800245a:	009b      	lsls	r3, r3, #2
 800245c:	4413      	add	r3, r2
 800245e:	8d3a      	ldrh	r2, [r7, #40]	; 0x28
 8002460:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 8002464:	b292      	uxth	r2, r2
 8002466:	801a      	strh	r2, [r3, #0]
        ep = &hpcd->OUT_ep[epindex];
 8002468:	f897 202d 	ldrb.w	r2, [r7, #45]	; 0x2d
 800246c:	4613      	mov	r3, r2
 800246e:	009b      	lsls	r3, r3, #2
 8002470:	4413      	add	r3, r2
 8002472:	00db      	lsls	r3, r3, #3
 8002474:	f503 73b4 	add.w	r3, r3, #360	; 0x168
 8002478:	687a      	ldr	r2, [r7, #4]
 800247a:	4413      	add	r3, r2
 800247c:	627b      	str	r3, [r7, #36]	; 0x24

        /* OUT Single Buffering */
        if (ep->doublebuffer == 0U)
 800247e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002480:	7b1b      	ldrb	r3, [r3, #12]
 8002482:	2b00      	cmp	r3, #0
 8002484:	d122      	bne.n	80024cc <PCD_EP_ISR_Handler+0x38c>
        {
          count = (uint16_t)PCD_GET_EP_RX_CNT(hpcd->Instance, ep->num);
 8002486:	687b      	ldr	r3, [r7, #4]
 8002488:	681b      	ldr	r3, [r3, #0]
 800248a:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 800248e:	b29b      	uxth	r3, r3
 8002490:	461a      	mov	r2, r3
 8002492:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002494:	781b      	ldrb	r3, [r3, #0]
 8002496:	00db      	lsls	r3, r3, #3
 8002498:	4413      	add	r3, r2
 800249a:	3306      	adds	r3, #6
 800249c:	005b      	lsls	r3, r3, #1
 800249e:	687a      	ldr	r2, [r7, #4]
 80024a0:	6812      	ldr	r2, [r2, #0]
 80024a2:	4413      	add	r3, r2
 80024a4:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 80024a8:	881b      	ldrh	r3, [r3, #0]
 80024aa:	f3c3 0309 	ubfx	r3, r3, #0, #10
 80024ae:	86fb      	strh	r3, [r7, #54]	; 0x36

          if (count != 0U)
 80024b0:	8efb      	ldrh	r3, [r7, #54]	; 0x36
 80024b2:	2b00      	cmp	r3, #0
 80024b4:	f000 8087 	beq.w	80025c6 <PCD_EP_ISR_Handler+0x486>
          {
            USB_ReadPMA(hpcd->Instance, ep->xfer_buff, ep->pmaadress, count);
 80024b8:	687b      	ldr	r3, [r7, #4]
 80024ba:	6818      	ldr	r0, [r3, #0]
 80024bc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80024be:	6959      	ldr	r1, [r3, #20]
 80024c0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80024c2:	88da      	ldrh	r2, [r3, #6]
 80024c4:	8efb      	ldrh	r3, [r7, #54]	; 0x36
 80024c6:	f003 fe0d 	bl	80060e4 <USB_ReadPMA>
 80024ca:	e07c      	b.n	80025c6 <PCD_EP_ISR_Handler+0x486>
          }
        }
        else
        {
          /* manage double buffer bulk out */
          if (ep->type == EP_TYPE_BULK)
 80024cc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80024ce:	78db      	ldrb	r3, [r3, #3]
 80024d0:	2b02      	cmp	r3, #2
 80024d2:	d108      	bne.n	80024e6 <PCD_EP_ISR_Handler+0x3a6>
          {
            count = HAL_PCD_EP_DB_Receive(hpcd, ep, wEPVal);
 80024d4:	8d7b      	ldrh	r3, [r7, #42]	; 0x2a
 80024d6:	461a      	mov	r2, r3
 80024d8:	6a79      	ldr	r1, [r7, #36]	; 0x24
 80024da:	6878      	ldr	r0, [r7, #4]
 80024dc:	f000 f923 	bl	8002726 <HAL_PCD_EP_DB_Receive>
 80024e0:	4603      	mov	r3, r0
 80024e2:	86fb      	strh	r3, [r7, #54]	; 0x36
 80024e4:	e06f      	b.n	80025c6 <PCD_EP_ISR_Handler+0x486>
          }
          else /* manage double buffer iso out */
          {
            /* free EP OUT Buffer */
            PCD_FreeUserBuffer(hpcd->Instance, ep->num, 0U);
 80024e6:	687b      	ldr	r3, [r7, #4]
 80024e8:	681b      	ldr	r3, [r3, #0]
 80024ea:	461a      	mov	r2, r3
 80024ec:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80024ee:	781b      	ldrb	r3, [r3, #0]
 80024f0:	009b      	lsls	r3, r3, #2
 80024f2:	4413      	add	r3, r2
 80024f4:	881b      	ldrh	r3, [r3, #0]
 80024f6:	b29b      	uxth	r3, r3
 80024f8:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80024fc:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8002500:	847b      	strh	r3, [r7, #34]	; 0x22
 8002502:	687b      	ldr	r3, [r7, #4]
 8002504:	681b      	ldr	r3, [r3, #0]
 8002506:	461a      	mov	r2, r3
 8002508:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800250a:	781b      	ldrb	r3, [r3, #0]
 800250c:	009b      	lsls	r3, r3, #2
 800250e:	441a      	add	r2, r3
 8002510:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 8002512:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8002516:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 800251a:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800251e:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 8002522:	b29b      	uxth	r3, r3
 8002524:	8013      	strh	r3, [r2, #0]

            if ((PCD_GET_ENDPOINT(hpcd->Instance, ep->num) & USB_EP_DTOG_RX) != 0U)
 8002526:	687b      	ldr	r3, [r7, #4]
 8002528:	681b      	ldr	r3, [r3, #0]
 800252a:	461a      	mov	r2, r3
 800252c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800252e:	781b      	ldrb	r3, [r3, #0]
 8002530:	009b      	lsls	r3, r3, #2
 8002532:	4413      	add	r3, r2
 8002534:	881b      	ldrh	r3, [r3, #0]
 8002536:	b29b      	uxth	r3, r3
 8002538:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800253c:	2b00      	cmp	r3, #0
 800253e:	d021      	beq.n	8002584 <PCD_EP_ISR_Handler+0x444>
            {
              /* read from endpoint BUF0Addr buffer */
              count = (uint16_t)PCD_GET_EP_DBUF0_CNT(hpcd->Instance, ep->num);
 8002540:	687b      	ldr	r3, [r7, #4]
 8002542:	681b      	ldr	r3, [r3, #0]
 8002544:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8002548:	b29b      	uxth	r3, r3
 800254a:	461a      	mov	r2, r3
 800254c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800254e:	781b      	ldrb	r3, [r3, #0]
 8002550:	00db      	lsls	r3, r3, #3
 8002552:	4413      	add	r3, r2
 8002554:	3302      	adds	r3, #2
 8002556:	005b      	lsls	r3, r3, #1
 8002558:	687a      	ldr	r2, [r7, #4]
 800255a:	6812      	ldr	r2, [r2, #0]
 800255c:	4413      	add	r3, r2
 800255e:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8002562:	881b      	ldrh	r3, [r3, #0]
 8002564:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8002568:	86fb      	strh	r3, [r7, #54]	; 0x36

              if (count != 0U)
 800256a:	8efb      	ldrh	r3, [r7, #54]	; 0x36
 800256c:	2b00      	cmp	r3, #0
 800256e:	d02a      	beq.n	80025c6 <PCD_EP_ISR_Handler+0x486>
              {
                USB_ReadPMA(hpcd->Instance, ep->xfer_buff, ep->pmaaddr0, count);
 8002570:	687b      	ldr	r3, [r7, #4]
 8002572:	6818      	ldr	r0, [r3, #0]
 8002574:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002576:	6959      	ldr	r1, [r3, #20]
 8002578:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800257a:	891a      	ldrh	r2, [r3, #8]
 800257c:	8efb      	ldrh	r3, [r7, #54]	; 0x36
 800257e:	f003 fdb1 	bl	80060e4 <USB_ReadPMA>
 8002582:	e020      	b.n	80025c6 <PCD_EP_ISR_Handler+0x486>
              }
            }
            else
            {
              /* read from endpoint BUF1Addr buffer */
              count = (uint16_t)PCD_GET_EP_DBUF1_CNT(hpcd->Instance, ep->num);
 8002584:	687b      	ldr	r3, [r7, #4]
 8002586:	681b      	ldr	r3, [r3, #0]
 8002588:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 800258c:	b29b      	uxth	r3, r3
 800258e:	461a      	mov	r2, r3
 8002590:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002592:	781b      	ldrb	r3, [r3, #0]
 8002594:	00db      	lsls	r3, r3, #3
 8002596:	4413      	add	r3, r2
 8002598:	3306      	adds	r3, #6
 800259a:	005b      	lsls	r3, r3, #1
 800259c:	687a      	ldr	r2, [r7, #4]
 800259e:	6812      	ldr	r2, [r2, #0]
 80025a0:	4413      	add	r3, r2
 80025a2:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 80025a6:	881b      	ldrh	r3, [r3, #0]
 80025a8:	f3c3 0309 	ubfx	r3, r3, #0, #10
 80025ac:	86fb      	strh	r3, [r7, #54]	; 0x36

              if (count != 0U)
 80025ae:	8efb      	ldrh	r3, [r7, #54]	; 0x36
 80025b0:	2b00      	cmp	r3, #0
 80025b2:	d008      	beq.n	80025c6 <PCD_EP_ISR_Handler+0x486>
              {
                USB_ReadPMA(hpcd->Instance, ep->xfer_buff, ep->pmaaddr1, count);
 80025b4:	687b      	ldr	r3, [r7, #4]
 80025b6:	6818      	ldr	r0, [r3, #0]
 80025b8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80025ba:	6959      	ldr	r1, [r3, #20]
 80025bc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80025be:	895a      	ldrh	r2, [r3, #10]
 80025c0:	8efb      	ldrh	r3, [r7, #54]	; 0x36
 80025c2:	f003 fd8f 	bl	80060e4 <USB_ReadPMA>
              }
            }
          }
        }
        /* multi-packet on the NON control OUT endpoint */
        ep->xfer_count += count;
 80025c6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80025c8:	69da      	ldr	r2, [r3, #28]
 80025ca:	8efb      	ldrh	r3, [r7, #54]	; 0x36
 80025cc:	441a      	add	r2, r3
 80025ce:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80025d0:	61da      	str	r2, [r3, #28]
        ep->xfer_buff += count;
 80025d2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80025d4:	695a      	ldr	r2, [r3, #20]
 80025d6:	8efb      	ldrh	r3, [r7, #54]	; 0x36
 80025d8:	441a      	add	r2, r3
 80025da:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80025dc:	615a      	str	r2, [r3, #20]

        if ((ep->xfer_len == 0U) || (count < ep->maxpacket))
 80025de:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80025e0:	699b      	ldr	r3, [r3, #24]
 80025e2:	2b00      	cmp	r3, #0
 80025e4:	d004      	beq.n	80025f0 <PCD_EP_ISR_Handler+0x4b0>
 80025e6:	8efa      	ldrh	r2, [r7, #54]	; 0x36
 80025e8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80025ea:	691b      	ldr	r3, [r3, #16]
 80025ec:	429a      	cmp	r2, r3
 80025ee:	d206      	bcs.n	80025fe <PCD_EP_ISR_Handler+0x4be>
        {
          /* RX COMPLETE */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
          hpcd->DataOutStageCallback(hpcd, ep->num);
#else
          HAL_PCD_DataOutStageCallback(hpcd, ep->num);
 80025f0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80025f2:	781b      	ldrb	r3, [r3, #0]
 80025f4:	4619      	mov	r1, r3
 80025f6:	6878      	ldr	r0, [r7, #4]
 80025f8:	f005 fb4c 	bl	8007c94 <HAL_PCD_DataOutStageCallback>
 80025fc:	e005      	b.n	800260a <PCD_EP_ISR_Handler+0x4ca>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
        }
        else
        {
          (void) USB_EPStartXfer(hpcd->Instance, ep);
 80025fe:	687b      	ldr	r3, [r7, #4]
 8002600:	681b      	ldr	r3, [r3, #0]
 8002602:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8002604:	4618      	mov	r0, r3
 8002606:	f002 facb 	bl	8004ba0 <USB_EPStartXfer>
        }

      }

      if ((wEPVal & USB_EP_CTR_TX) != 0U)
 800260a:	8d7b      	ldrh	r3, [r7, #42]	; 0x2a
 800260c:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002610:	2b00      	cmp	r3, #0
 8002612:	d07a      	beq.n	800270a <PCD_EP_ISR_Handler+0x5ca>
      {
        ep = &hpcd->IN_ep[epindex];
 8002614:	f897 302d 	ldrb.w	r3, [r7, #45]	; 0x2d
 8002618:	1c5a      	adds	r2, r3, #1
 800261a:	4613      	mov	r3, r2
 800261c:	009b      	lsls	r3, r3, #2
 800261e:	4413      	add	r3, r2
 8002620:	00db      	lsls	r3, r3, #3
 8002622:	687a      	ldr	r2, [r7, #4]
 8002624:	4413      	add	r3, r2
 8002626:	627b      	str	r3, [r7, #36]	; 0x24

        /* clear int flag */
        PCD_CLEAR_TX_EP_CTR(hpcd->Instance, epindex);
 8002628:	687b      	ldr	r3, [r7, #4]
 800262a:	681b      	ldr	r3, [r3, #0]
 800262c:	461a      	mov	r2, r3
 800262e:	f897 302d 	ldrb.w	r3, [r7, #45]	; 0x2d
 8002632:	009b      	lsls	r3, r3, #2
 8002634:	4413      	add	r3, r2
 8002636:	881b      	ldrh	r3, [r3, #0]
 8002638:	b29b      	uxth	r3, r3
 800263a:	f423 43e1 	bic.w	r3, r3, #28800	; 0x7080
 800263e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8002642:	843b      	strh	r3, [r7, #32]
 8002644:	687b      	ldr	r3, [r7, #4]
 8002646:	681b      	ldr	r3, [r3, #0]
 8002648:	461a      	mov	r2, r3
 800264a:	f897 302d 	ldrb.w	r3, [r7, #45]	; 0x2d
 800264e:	009b      	lsls	r3, r3, #2
 8002650:	441a      	add	r2, r3
 8002652:	8c3b      	ldrh	r3, [r7, #32]
 8002654:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8002658:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800265c:	b29b      	uxth	r3, r3
 800265e:	8013      	strh	r3, [r2, #0]

        /* Manage all non bulk transaction or Bulk Single Buffer Transaction */
        if ((ep->type != EP_TYPE_BULK) ||
 8002660:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002662:	78db      	ldrb	r3, [r3, #3]
 8002664:	2b02      	cmp	r3, #2
 8002666:	d108      	bne.n	800267a <PCD_EP_ISR_Handler+0x53a>
            ((ep->type == EP_TYPE_BULK) && ((wEPVal & USB_EP_KIND) == 0U)))
 8002668:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800266a:	78db      	ldrb	r3, [r3, #3]
        if ((ep->type != EP_TYPE_BULK) ||
 800266c:	2b02      	cmp	r3, #2
 800266e:	d146      	bne.n	80026fe <PCD_EP_ISR_Handler+0x5be>
            ((ep->type == EP_TYPE_BULK) && ((wEPVal & USB_EP_KIND) == 0U)))
 8002670:	8d7b      	ldrh	r3, [r7, #42]	; 0x2a
 8002672:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002676:	2b00      	cmp	r3, #0
 8002678:	d141      	bne.n	80026fe <PCD_EP_ISR_Handler+0x5be>
        {
          /* multi-packet on the NON control IN endpoint */
          TxByteNbre = (uint16_t)PCD_GET_EP_TX_CNT(hpcd->Instance, ep->num);
 800267a:	687b      	ldr	r3, [r7, #4]
 800267c:	681b      	ldr	r3, [r3, #0]
 800267e:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8002682:	b29b      	uxth	r3, r3
 8002684:	461a      	mov	r2, r3
 8002686:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002688:	781b      	ldrb	r3, [r3, #0]
 800268a:	00db      	lsls	r3, r3, #3
 800268c:	4413      	add	r3, r2
 800268e:	3302      	adds	r3, #2
 8002690:	005b      	lsls	r3, r3, #1
 8002692:	687a      	ldr	r2, [r7, #4]
 8002694:	6812      	ldr	r2, [r2, #0]
 8002696:	4413      	add	r3, r2
 8002698:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 800269c:	881b      	ldrh	r3, [r3, #0]
 800269e:	f3c3 0309 	ubfx	r3, r3, #0, #10
 80026a2:	83fb      	strh	r3, [r7, #30]

          if (ep->xfer_len > TxByteNbre)
 80026a4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80026a6:	699a      	ldr	r2, [r3, #24]
 80026a8:	8bfb      	ldrh	r3, [r7, #30]
 80026aa:	429a      	cmp	r2, r3
 80026ac:	d906      	bls.n	80026bc <PCD_EP_ISR_Handler+0x57c>
          {
            ep->xfer_len -= TxByteNbre;
 80026ae:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80026b0:	699a      	ldr	r2, [r3, #24]
 80026b2:	8bfb      	ldrh	r3, [r7, #30]
 80026b4:	1ad2      	subs	r2, r2, r3
 80026b6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80026b8:	619a      	str	r2, [r3, #24]
 80026ba:	e002      	b.n	80026c2 <PCD_EP_ISR_Handler+0x582>
          }
          else
          {
            ep->xfer_len = 0U;
 80026bc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80026be:	2200      	movs	r2, #0
 80026c0:	619a      	str	r2, [r3, #24]
          }

          /* Zero Length Packet? */
          if (ep->xfer_len == 0U)
 80026c2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80026c4:	699b      	ldr	r3, [r3, #24]
 80026c6:	2b00      	cmp	r3, #0
 80026c8:	d106      	bne.n	80026d8 <PCD_EP_ISR_Handler+0x598>
          {
            /* TX COMPLETE */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
            hpcd->DataInStageCallback(hpcd, ep->num);
#else
            HAL_PCD_DataInStageCallback(hpcd, ep->num);
 80026ca:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80026cc:	781b      	ldrb	r3, [r3, #0]
 80026ce:	4619      	mov	r1, r3
 80026d0:	6878      	ldr	r0, [r7, #4]
 80026d2:	f005 fafa 	bl	8007cca <HAL_PCD_DataInStageCallback>
 80026d6:	e018      	b.n	800270a <PCD_EP_ISR_Handler+0x5ca>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
          }
          else
          {
            /* Transfer is not yet Done */
            ep->xfer_buff += TxByteNbre;
 80026d8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80026da:	695a      	ldr	r2, [r3, #20]
 80026dc:	8bfb      	ldrh	r3, [r7, #30]
 80026de:	441a      	add	r2, r3
 80026e0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80026e2:	615a      	str	r2, [r3, #20]
            ep->xfer_count += TxByteNbre;
 80026e4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80026e6:	69da      	ldr	r2, [r3, #28]
 80026e8:	8bfb      	ldrh	r3, [r7, #30]
 80026ea:	441a      	add	r2, r3
 80026ec:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80026ee:	61da      	str	r2, [r3, #28]
            (void)USB_EPStartXfer(hpcd->Instance, ep);
 80026f0:	687b      	ldr	r3, [r7, #4]
 80026f2:	681b      	ldr	r3, [r3, #0]
 80026f4:	6a79      	ldr	r1, [r7, #36]	; 0x24
 80026f6:	4618      	mov	r0, r3
 80026f8:	f002 fa52 	bl	8004ba0 <USB_EPStartXfer>
          if (ep->xfer_len == 0U)
 80026fc:	e005      	b.n	800270a <PCD_EP_ISR_Handler+0x5ca>
          }
        }
        /* bulk in double buffer enable in case of transferLen> Ep_Mps */
        else
        {
          (void)HAL_PCD_EP_DB_Transmit(hpcd, ep, wEPVal);
 80026fe:	8d7b      	ldrh	r3, [r7, #42]	; 0x2a
 8002700:	461a      	mov	r2, r3
 8002702:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8002704:	6878      	ldr	r0, [r7, #4]
 8002706:	f000 f91b 	bl	8002940 <HAL_PCD_EP_DB_Transmit>
  while ((hpcd->Instance->ISTR & USB_ISTR_CTR) != 0U)
 800270a:	687b      	ldr	r3, [r7, #4]
 800270c:	681b      	ldr	r3, [r3, #0]
 800270e:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 8002712:	b29b      	uxth	r3, r3
 8002714:	b21b      	sxth	r3, r3
 8002716:	2b00      	cmp	r3, #0
 8002718:	f6ff ad17 	blt.w	800214a <PCD_EP_ISR_Handler+0xa>
        }
      }
    }
  }

  return HAL_OK;
 800271c:	2300      	movs	r3, #0
}
 800271e:	4618      	mov	r0, r3
 8002720:	3738      	adds	r7, #56	; 0x38
 8002722:	46bd      	mov	sp, r7
 8002724:	bd80      	pop	{r7, pc}

08002726 <HAL_PCD_EP_DB_Receive>:
  * @param  wEPVal Last snapshot of EPRx register value taken in ISR
  * @retval HAL status
  */
static uint16_t HAL_PCD_EP_DB_Receive(PCD_HandleTypeDef *hpcd,
                                      PCD_EPTypeDef *ep, uint16_t wEPVal)
{
 8002726:	b580      	push	{r7, lr}
 8002728:	b088      	sub	sp, #32
 800272a:	af00      	add	r7, sp, #0
 800272c:	60f8      	str	r0, [r7, #12]
 800272e:	60b9      	str	r1, [r7, #8]
 8002730:	4613      	mov	r3, r2
 8002732:	80fb      	strh	r3, [r7, #6]
  uint16_t count;

  /* Manage Buffer0 OUT */
  if ((wEPVal & USB_EP_DTOG_RX) != 0U)
 8002734:	88fb      	ldrh	r3, [r7, #6]
 8002736:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800273a:	2b00      	cmp	r3, #0
 800273c:	d07e      	beq.n	800283c <HAL_PCD_EP_DB_Receive+0x116>
  {
    /* Get count of received Data on buffer0 */
    count = (uint16_t)PCD_GET_EP_DBUF0_CNT(hpcd->Instance, ep->num);
 800273e:	68fb      	ldr	r3, [r7, #12]
 8002740:	681b      	ldr	r3, [r3, #0]
 8002742:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8002746:	b29b      	uxth	r3, r3
 8002748:	461a      	mov	r2, r3
 800274a:	68bb      	ldr	r3, [r7, #8]
 800274c:	781b      	ldrb	r3, [r3, #0]
 800274e:	00db      	lsls	r3, r3, #3
 8002750:	4413      	add	r3, r2
 8002752:	3302      	adds	r3, #2
 8002754:	005b      	lsls	r3, r3, #1
 8002756:	68fa      	ldr	r2, [r7, #12]
 8002758:	6812      	ldr	r2, [r2, #0]
 800275a:	4413      	add	r3, r2
 800275c:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8002760:	881b      	ldrh	r3, [r3, #0]
 8002762:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8002766:	837b      	strh	r3, [r7, #26]

    if (ep->xfer_len >= count)
 8002768:	68bb      	ldr	r3, [r7, #8]
 800276a:	699a      	ldr	r2, [r3, #24]
 800276c:	8b7b      	ldrh	r3, [r7, #26]
 800276e:	429a      	cmp	r2, r3
 8002770:	d306      	bcc.n	8002780 <HAL_PCD_EP_DB_Receive+0x5a>
    {
      ep->xfer_len -= count;
 8002772:	68bb      	ldr	r3, [r7, #8]
 8002774:	699a      	ldr	r2, [r3, #24]
 8002776:	8b7b      	ldrh	r3, [r7, #26]
 8002778:	1ad2      	subs	r2, r2, r3
 800277a:	68bb      	ldr	r3, [r7, #8]
 800277c:	619a      	str	r2, [r3, #24]
 800277e:	e002      	b.n	8002786 <HAL_PCD_EP_DB_Receive+0x60>
    }
    else
    {
      ep->xfer_len = 0U;
 8002780:	68bb      	ldr	r3, [r7, #8]
 8002782:	2200      	movs	r2, #0
 8002784:	619a      	str	r2, [r3, #24]
    }

    if (ep->xfer_len == 0U)
 8002786:	68bb      	ldr	r3, [r7, #8]
 8002788:	699b      	ldr	r3, [r3, #24]
 800278a:	2b00      	cmp	r3, #0
 800278c:	d123      	bne.n	80027d6 <HAL_PCD_EP_DB_Receive+0xb0>
    {
      /* set NAK to OUT endpoint since double buffer is enabled */
      PCD_SET_EP_RX_STATUS(hpcd->Instance, ep->num, USB_EP_RX_NAK);
 800278e:	68fb      	ldr	r3, [r7, #12]
 8002790:	681b      	ldr	r3, [r3, #0]
 8002792:	461a      	mov	r2, r3
 8002794:	68bb      	ldr	r3, [r7, #8]
 8002796:	781b      	ldrb	r3, [r3, #0]
 8002798:	009b      	lsls	r3, r3, #2
 800279a:	4413      	add	r3, r2
 800279c:	881b      	ldrh	r3, [r3, #0]
 800279e:	b29b      	uxth	r3, r3
 80027a0:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 80027a4:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80027a8:	833b      	strh	r3, [r7, #24]
 80027aa:	8b3b      	ldrh	r3, [r7, #24]
 80027ac:	f483 5300 	eor.w	r3, r3, #8192	; 0x2000
 80027b0:	833b      	strh	r3, [r7, #24]
 80027b2:	68fb      	ldr	r3, [r7, #12]
 80027b4:	681b      	ldr	r3, [r3, #0]
 80027b6:	461a      	mov	r2, r3
 80027b8:	68bb      	ldr	r3, [r7, #8]
 80027ba:	781b      	ldrb	r3, [r3, #0]
 80027bc:	009b      	lsls	r3, r3, #2
 80027be:	441a      	add	r2, r3
 80027c0:	8b3b      	ldrh	r3, [r7, #24]
 80027c2:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 80027c6:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 80027ca:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80027ce:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80027d2:	b29b      	uxth	r3, r3
 80027d4:	8013      	strh	r3, [r2, #0]
    }

    /* Check if Buffer1 is in blocked sate which requires to toggle */
    if ((wEPVal & USB_EP_DTOG_TX) != 0U)
 80027d6:	88fb      	ldrh	r3, [r7, #6]
 80027d8:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80027dc:	2b00      	cmp	r3, #0
 80027de:	d01f      	beq.n	8002820 <HAL_PCD_EP_DB_Receive+0xfa>
    {
      PCD_FreeUserBuffer(hpcd->Instance, ep->num, 0U);
 80027e0:	68fb      	ldr	r3, [r7, #12]
 80027e2:	681b      	ldr	r3, [r3, #0]
 80027e4:	461a      	mov	r2, r3
 80027e6:	68bb      	ldr	r3, [r7, #8]
 80027e8:	781b      	ldrb	r3, [r3, #0]
 80027ea:	009b      	lsls	r3, r3, #2
 80027ec:	4413      	add	r3, r2
 80027ee:	881b      	ldrh	r3, [r3, #0]
 80027f0:	b29b      	uxth	r3, r3
 80027f2:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80027f6:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80027fa:	82fb      	strh	r3, [r7, #22]
 80027fc:	68fb      	ldr	r3, [r7, #12]
 80027fe:	681b      	ldr	r3, [r3, #0]
 8002800:	461a      	mov	r2, r3
 8002802:	68bb      	ldr	r3, [r7, #8]
 8002804:	781b      	ldrb	r3, [r3, #0]
 8002806:	009b      	lsls	r3, r3, #2
 8002808:	441a      	add	r2, r3
 800280a:	8afb      	ldrh	r3, [r7, #22]
 800280c:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8002810:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8002814:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8002818:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 800281c:	b29b      	uxth	r3, r3
 800281e:	8013      	strh	r3, [r2, #0]
    }

    if (count != 0U)
 8002820:	8b7b      	ldrh	r3, [r7, #26]
 8002822:	2b00      	cmp	r3, #0
 8002824:	f000 8087 	beq.w	8002936 <HAL_PCD_EP_DB_Receive+0x210>
    {
      USB_ReadPMA(hpcd->Instance, ep->xfer_buff, ep->pmaaddr0, count);
 8002828:	68fb      	ldr	r3, [r7, #12]
 800282a:	6818      	ldr	r0, [r3, #0]
 800282c:	68bb      	ldr	r3, [r7, #8]
 800282e:	6959      	ldr	r1, [r3, #20]
 8002830:	68bb      	ldr	r3, [r7, #8]
 8002832:	891a      	ldrh	r2, [r3, #8]
 8002834:	8b7b      	ldrh	r3, [r7, #26]
 8002836:	f003 fc55 	bl	80060e4 <USB_ReadPMA>
 800283a:	e07c      	b.n	8002936 <HAL_PCD_EP_DB_Receive+0x210>
  }
  /* Manage Buffer 1 DTOG_RX=0 */
  else
  {
    /* Get count of received data */
    count = (uint16_t)PCD_GET_EP_DBUF1_CNT(hpcd->Instance, ep->num);
 800283c:	68fb      	ldr	r3, [r7, #12]
 800283e:	681b      	ldr	r3, [r3, #0]
 8002840:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8002844:	b29b      	uxth	r3, r3
 8002846:	461a      	mov	r2, r3
 8002848:	68bb      	ldr	r3, [r7, #8]
 800284a:	781b      	ldrb	r3, [r3, #0]
 800284c:	00db      	lsls	r3, r3, #3
 800284e:	4413      	add	r3, r2
 8002850:	3306      	adds	r3, #6
 8002852:	005b      	lsls	r3, r3, #1
 8002854:	68fa      	ldr	r2, [r7, #12]
 8002856:	6812      	ldr	r2, [r2, #0]
 8002858:	4413      	add	r3, r2
 800285a:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 800285e:	881b      	ldrh	r3, [r3, #0]
 8002860:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8002864:	837b      	strh	r3, [r7, #26]

    if (ep->xfer_len >= count)
 8002866:	68bb      	ldr	r3, [r7, #8]
 8002868:	699a      	ldr	r2, [r3, #24]
 800286a:	8b7b      	ldrh	r3, [r7, #26]
 800286c:	429a      	cmp	r2, r3
 800286e:	d306      	bcc.n	800287e <HAL_PCD_EP_DB_Receive+0x158>
    {
      ep->xfer_len -= count;
 8002870:	68bb      	ldr	r3, [r7, #8]
 8002872:	699a      	ldr	r2, [r3, #24]
 8002874:	8b7b      	ldrh	r3, [r7, #26]
 8002876:	1ad2      	subs	r2, r2, r3
 8002878:	68bb      	ldr	r3, [r7, #8]
 800287a:	619a      	str	r2, [r3, #24]
 800287c:	e002      	b.n	8002884 <HAL_PCD_EP_DB_Receive+0x15e>
    }
    else
    {
      ep->xfer_len = 0U;
 800287e:	68bb      	ldr	r3, [r7, #8]
 8002880:	2200      	movs	r2, #0
 8002882:	619a      	str	r2, [r3, #24]
    }

    if (ep->xfer_len == 0U)
 8002884:	68bb      	ldr	r3, [r7, #8]
 8002886:	699b      	ldr	r3, [r3, #24]
 8002888:	2b00      	cmp	r3, #0
 800288a:	d123      	bne.n	80028d4 <HAL_PCD_EP_DB_Receive+0x1ae>
    {
      /* set NAK on the current endpoint */
      PCD_SET_EP_RX_STATUS(hpcd->Instance, ep->num, USB_EP_RX_NAK);
 800288c:	68fb      	ldr	r3, [r7, #12]
 800288e:	681b      	ldr	r3, [r3, #0]
 8002890:	461a      	mov	r2, r3
 8002892:	68bb      	ldr	r3, [r7, #8]
 8002894:	781b      	ldrb	r3, [r3, #0]
 8002896:	009b      	lsls	r3, r3, #2
 8002898:	4413      	add	r3, r2
 800289a:	881b      	ldrh	r3, [r3, #0]
 800289c:	b29b      	uxth	r3, r3
 800289e:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 80028a2:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80028a6:	83fb      	strh	r3, [r7, #30]
 80028a8:	8bfb      	ldrh	r3, [r7, #30]
 80028aa:	f483 5300 	eor.w	r3, r3, #8192	; 0x2000
 80028ae:	83fb      	strh	r3, [r7, #30]
 80028b0:	68fb      	ldr	r3, [r7, #12]
 80028b2:	681b      	ldr	r3, [r3, #0]
 80028b4:	461a      	mov	r2, r3
 80028b6:	68bb      	ldr	r3, [r7, #8]
 80028b8:	781b      	ldrb	r3, [r3, #0]
 80028ba:	009b      	lsls	r3, r3, #2
 80028bc:	441a      	add	r2, r3
 80028be:	8bfb      	ldrh	r3, [r7, #30]
 80028c0:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 80028c4:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 80028c8:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80028cc:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80028d0:	b29b      	uxth	r3, r3
 80028d2:	8013      	strh	r3, [r2, #0]
    }

    /*Need to FreeUser Buffer*/
    if ((wEPVal & USB_EP_DTOG_TX) == 0U)
 80028d4:	88fb      	ldrh	r3, [r7, #6]
 80028d6:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80028da:	2b00      	cmp	r3, #0
 80028dc:	d11f      	bne.n	800291e <HAL_PCD_EP_DB_Receive+0x1f8>
    {
      PCD_FreeUserBuffer(hpcd->Instance, ep->num, 0U);
 80028de:	68fb      	ldr	r3, [r7, #12]
 80028e0:	681b      	ldr	r3, [r3, #0]
 80028e2:	461a      	mov	r2, r3
 80028e4:	68bb      	ldr	r3, [r7, #8]
 80028e6:	781b      	ldrb	r3, [r3, #0]
 80028e8:	009b      	lsls	r3, r3, #2
 80028ea:	4413      	add	r3, r2
 80028ec:	881b      	ldrh	r3, [r3, #0]
 80028ee:	b29b      	uxth	r3, r3
 80028f0:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80028f4:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80028f8:	83bb      	strh	r3, [r7, #28]
 80028fa:	68fb      	ldr	r3, [r7, #12]
 80028fc:	681b      	ldr	r3, [r3, #0]
 80028fe:	461a      	mov	r2, r3
 8002900:	68bb      	ldr	r3, [r7, #8]
 8002902:	781b      	ldrb	r3, [r3, #0]
 8002904:	009b      	lsls	r3, r3, #2
 8002906:	441a      	add	r2, r3
 8002908:	8bbb      	ldrh	r3, [r7, #28]
 800290a:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 800290e:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8002912:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8002916:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 800291a:	b29b      	uxth	r3, r3
 800291c:	8013      	strh	r3, [r2, #0]
    }

    if (count != 0U)
 800291e:	8b7b      	ldrh	r3, [r7, #26]
 8002920:	2b00      	cmp	r3, #0
 8002922:	d008      	beq.n	8002936 <HAL_PCD_EP_DB_Receive+0x210>
    {
      USB_ReadPMA(hpcd->Instance, ep->xfer_buff, ep->pmaaddr1, count);
 8002924:	68fb      	ldr	r3, [r7, #12]
 8002926:	6818      	ldr	r0, [r3, #0]
 8002928:	68bb      	ldr	r3, [r7, #8]
 800292a:	6959      	ldr	r1, [r3, #20]
 800292c:	68bb      	ldr	r3, [r7, #8]
 800292e:	895a      	ldrh	r2, [r3, #10]
 8002930:	8b7b      	ldrh	r3, [r7, #26]
 8002932:	f003 fbd7 	bl	80060e4 <USB_ReadPMA>
    }
  }

  return count;
 8002936:	8b7b      	ldrh	r3, [r7, #26]
}
 8002938:	4618      	mov	r0, r3
 800293a:	3720      	adds	r7, #32
 800293c:	46bd      	mov	sp, r7
 800293e:	bd80      	pop	{r7, pc}

08002940 <HAL_PCD_EP_DB_Transmit>:
  * @param  wEPVal Last snapshot of EPRx register value taken in ISR
  * @retval HAL status
  */
static HAL_StatusTypeDef HAL_PCD_EP_DB_Transmit(PCD_HandleTypeDef *hpcd,
                                                PCD_EPTypeDef *ep, uint16_t wEPVal)
{
 8002940:	b580      	push	{r7, lr}
 8002942:	b092      	sub	sp, #72	; 0x48
 8002944:	af00      	add	r7, sp, #0
 8002946:	60f8      	str	r0, [r7, #12]
 8002948:	60b9      	str	r1, [r7, #8]
 800294a:	4613      	mov	r3, r2
 800294c:	80fb      	strh	r3, [r7, #6]
  uint32_t len;
  uint16_t TxByteNbre;

  /* Data Buffer0 ACK received */
  if ((wEPVal & USB_EP_DTOG_TX) != 0U)
 800294e:	88fb      	ldrh	r3, [r7, #6]
 8002950:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002954:	2b00      	cmp	r3, #0
 8002956:	f000 8132 	beq.w	8002bbe <HAL_PCD_EP_DB_Transmit+0x27e>
  {
    /* multi-packet on the NON control IN endpoint */
    TxByteNbre = (uint16_t)PCD_GET_EP_DBUF0_CNT(hpcd->Instance, ep->num);
 800295a:	68fb      	ldr	r3, [r7, #12]
 800295c:	681b      	ldr	r3, [r3, #0]
 800295e:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8002962:	b29b      	uxth	r3, r3
 8002964:	461a      	mov	r2, r3
 8002966:	68bb      	ldr	r3, [r7, #8]
 8002968:	781b      	ldrb	r3, [r3, #0]
 800296a:	00db      	lsls	r3, r3, #3
 800296c:	4413      	add	r3, r2
 800296e:	3302      	adds	r3, #2
 8002970:	005b      	lsls	r3, r3, #1
 8002972:	68fa      	ldr	r2, [r7, #12]
 8002974:	6812      	ldr	r2, [r2, #0]
 8002976:	4413      	add	r3, r2
 8002978:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 800297c:	881b      	ldrh	r3, [r3, #0]
 800297e:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8002982:	85fb      	strh	r3, [r7, #46]	; 0x2e

    if (ep->xfer_len > TxByteNbre)
 8002984:	68bb      	ldr	r3, [r7, #8]
 8002986:	699a      	ldr	r2, [r3, #24]
 8002988:	8dfb      	ldrh	r3, [r7, #46]	; 0x2e
 800298a:	429a      	cmp	r2, r3
 800298c:	d906      	bls.n	800299c <HAL_PCD_EP_DB_Transmit+0x5c>
    {
      ep->xfer_len -= TxByteNbre;
 800298e:	68bb      	ldr	r3, [r7, #8]
 8002990:	699a      	ldr	r2, [r3, #24]
 8002992:	8dfb      	ldrh	r3, [r7, #46]	; 0x2e
 8002994:	1ad2      	subs	r2, r2, r3
 8002996:	68bb      	ldr	r3, [r7, #8]
 8002998:	619a      	str	r2, [r3, #24]
 800299a:	e002      	b.n	80029a2 <HAL_PCD_EP_DB_Transmit+0x62>
    }
    else
    {
      ep->xfer_len = 0U;
 800299c:	68bb      	ldr	r3, [r7, #8]
 800299e:	2200      	movs	r2, #0
 80029a0:	619a      	str	r2, [r3, #24]
    }
    /* Transfer is completed */
    if (ep->xfer_len == 0U)
 80029a2:	68bb      	ldr	r3, [r7, #8]
 80029a4:	699b      	ldr	r3, [r3, #24]
 80029a6:	2b00      	cmp	r3, #0
 80029a8:	d12c      	bne.n	8002a04 <HAL_PCD_EP_DB_Transmit+0xc4>
    {
      /* TX COMPLETE */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->DataInStageCallback(hpcd, ep->num);
#else
      HAL_PCD_DataInStageCallback(hpcd, ep->num);
 80029aa:	68bb      	ldr	r3, [r7, #8]
 80029ac:	781b      	ldrb	r3, [r3, #0]
 80029ae:	4619      	mov	r1, r3
 80029b0:	68f8      	ldr	r0, [r7, #12]
 80029b2:	f005 f98a 	bl	8007cca <HAL_PCD_DataInStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      if ((wEPVal & USB_EP_DTOG_RX) != 0U)
 80029b6:	88fb      	ldrh	r3, [r7, #6]
 80029b8:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80029bc:	2b00      	cmp	r3, #0
 80029be:	f000 822f 	beq.w	8002e20 <HAL_PCD_EP_DB_Transmit+0x4e0>
      {
        PCD_FreeUserBuffer(hpcd->Instance, ep->num, 1U);
 80029c2:	68fb      	ldr	r3, [r7, #12]
 80029c4:	681b      	ldr	r3, [r3, #0]
 80029c6:	461a      	mov	r2, r3
 80029c8:	68bb      	ldr	r3, [r7, #8]
 80029ca:	781b      	ldrb	r3, [r3, #0]
 80029cc:	009b      	lsls	r3, r3, #2
 80029ce:	4413      	add	r3, r2
 80029d0:	881b      	ldrh	r3, [r3, #0]
 80029d2:	b29b      	uxth	r3, r3
 80029d4:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80029d8:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80029dc:	827b      	strh	r3, [r7, #18]
 80029de:	68fb      	ldr	r3, [r7, #12]
 80029e0:	681b      	ldr	r3, [r3, #0]
 80029e2:	461a      	mov	r2, r3
 80029e4:	68bb      	ldr	r3, [r7, #8]
 80029e6:	781b      	ldrb	r3, [r3, #0]
 80029e8:	009b      	lsls	r3, r3, #2
 80029ea:	441a      	add	r2, r3
 80029ec:	8a7b      	ldrh	r3, [r7, #18]
 80029ee:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 80029f2:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 80029f6:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 80029fa:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80029fe:	b29b      	uxth	r3, r3
 8002a00:	8013      	strh	r3, [r2, #0]
 8002a02:	e20d      	b.n	8002e20 <HAL_PCD_EP_DB_Transmit+0x4e0>
      }
    }
    else /* Transfer is not yet Done */
    {
      /* need to Free USB Buff */
      if ((wEPVal & USB_EP_DTOG_RX) != 0U)
 8002a04:	88fb      	ldrh	r3, [r7, #6]
 8002a06:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8002a0a:	2b00      	cmp	r3, #0
 8002a0c:	d01f      	beq.n	8002a4e <HAL_PCD_EP_DB_Transmit+0x10e>
      {
        PCD_FreeUserBuffer(hpcd->Instance, ep->num, 1U);
 8002a0e:	68fb      	ldr	r3, [r7, #12]
 8002a10:	681b      	ldr	r3, [r3, #0]
 8002a12:	461a      	mov	r2, r3
 8002a14:	68bb      	ldr	r3, [r7, #8]
 8002a16:	781b      	ldrb	r3, [r3, #0]
 8002a18:	009b      	lsls	r3, r3, #2
 8002a1a:	4413      	add	r3, r2
 8002a1c:	881b      	ldrh	r3, [r3, #0]
 8002a1e:	b29b      	uxth	r3, r3
 8002a20:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8002a24:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8002a28:	84bb      	strh	r3, [r7, #36]	; 0x24
 8002a2a:	68fb      	ldr	r3, [r7, #12]
 8002a2c:	681b      	ldr	r3, [r3, #0]
 8002a2e:	461a      	mov	r2, r3
 8002a30:	68bb      	ldr	r3, [r7, #8]
 8002a32:	781b      	ldrb	r3, [r3, #0]
 8002a34:	009b      	lsls	r3, r3, #2
 8002a36:	441a      	add	r2, r3
 8002a38:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8002a3a:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8002a3e:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8002a42:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8002a46:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8002a4a:	b29b      	uxth	r3, r3
 8002a4c:	8013      	strh	r3, [r2, #0]
      }

      /* Still there is data to Fill in the next Buffer */
      if (ep->xfer_fill_db == 1U)
 8002a4e:	68bb      	ldr	r3, [r7, #8]
 8002a50:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 8002a54:	2b01      	cmp	r3, #1
 8002a56:	f040 81e3 	bne.w	8002e20 <HAL_PCD_EP_DB_Transmit+0x4e0>
      {
        ep->xfer_buff += TxByteNbre;
 8002a5a:	68bb      	ldr	r3, [r7, #8]
 8002a5c:	695a      	ldr	r2, [r3, #20]
 8002a5e:	8dfb      	ldrh	r3, [r7, #46]	; 0x2e
 8002a60:	441a      	add	r2, r3
 8002a62:	68bb      	ldr	r3, [r7, #8]
 8002a64:	615a      	str	r2, [r3, #20]
        ep->xfer_count += TxByteNbre;
 8002a66:	68bb      	ldr	r3, [r7, #8]
 8002a68:	69da      	ldr	r2, [r3, #28]
 8002a6a:	8dfb      	ldrh	r3, [r7, #46]	; 0x2e
 8002a6c:	441a      	add	r2, r3
 8002a6e:	68bb      	ldr	r3, [r7, #8]
 8002a70:	61da      	str	r2, [r3, #28]

        /* Calculate the len of the new buffer to fill */
        if (ep->xfer_len_db >= ep->maxpacket)
 8002a72:	68bb      	ldr	r3, [r7, #8]
 8002a74:	6a1a      	ldr	r2, [r3, #32]
 8002a76:	68bb      	ldr	r3, [r7, #8]
 8002a78:	691b      	ldr	r3, [r3, #16]
 8002a7a:	429a      	cmp	r2, r3
 8002a7c:	d309      	bcc.n	8002a92 <HAL_PCD_EP_DB_Transmit+0x152>
        {
          len = ep->maxpacket;
 8002a7e:	68bb      	ldr	r3, [r7, #8]
 8002a80:	691b      	ldr	r3, [r3, #16]
 8002a82:	63bb      	str	r3, [r7, #56]	; 0x38
          ep->xfer_len_db -= len;
 8002a84:	68bb      	ldr	r3, [r7, #8]
 8002a86:	6a1a      	ldr	r2, [r3, #32]
 8002a88:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8002a8a:	1ad2      	subs	r2, r2, r3
 8002a8c:	68bb      	ldr	r3, [r7, #8]
 8002a8e:	621a      	str	r2, [r3, #32]
 8002a90:	e014      	b.n	8002abc <HAL_PCD_EP_DB_Transmit+0x17c>
        }
        else if (ep->xfer_len_db == 0U)
 8002a92:	68bb      	ldr	r3, [r7, #8]
 8002a94:	6a1b      	ldr	r3, [r3, #32]
 8002a96:	2b00      	cmp	r3, #0
 8002a98:	d106      	bne.n	8002aa8 <HAL_PCD_EP_DB_Transmit+0x168>
        {
          len = TxByteNbre;
 8002a9a:	8dfb      	ldrh	r3, [r7, #46]	; 0x2e
 8002a9c:	63bb      	str	r3, [r7, #56]	; 0x38
          ep->xfer_fill_db = 0U;
 8002a9e:	68bb      	ldr	r3, [r7, #8]
 8002aa0:	2200      	movs	r2, #0
 8002aa2:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
 8002aa6:	e009      	b.n	8002abc <HAL_PCD_EP_DB_Transmit+0x17c>
        }
        else
        {
          ep->xfer_fill_db = 0U;
 8002aa8:	68bb      	ldr	r3, [r7, #8]
 8002aaa:	2200      	movs	r2, #0
 8002aac:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
          len = ep->xfer_len_db;
 8002ab0:	68bb      	ldr	r3, [r7, #8]
 8002ab2:	6a1b      	ldr	r3, [r3, #32]
 8002ab4:	63bb      	str	r3, [r7, #56]	; 0x38
          ep->xfer_len_db = 0U;
 8002ab6:	68bb      	ldr	r3, [r7, #8]
 8002ab8:	2200      	movs	r2, #0
 8002aba:	621a      	str	r2, [r3, #32]
        }

        /* Write remaining Data to Buffer */
        /* Set the Double buffer counter for pma buffer1 */
        PCD_SET_EP_DBUF0_CNT(hpcd->Instance, ep->num, ep->is_in, len);
 8002abc:	68bb      	ldr	r3, [r7, #8]
 8002abe:	785b      	ldrb	r3, [r3, #1]
 8002ac0:	2b00      	cmp	r3, #0
 8002ac2:	d155      	bne.n	8002b70 <HAL_PCD_EP_DB_Transmit+0x230>
 8002ac4:	68fb      	ldr	r3, [r7, #12]
 8002ac6:	681b      	ldr	r3, [r3, #0]
 8002ac8:	61bb      	str	r3, [r7, #24]
 8002aca:	68fb      	ldr	r3, [r7, #12]
 8002acc:	681b      	ldr	r3, [r3, #0]
 8002ace:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8002ad2:	b29b      	uxth	r3, r3
 8002ad4:	461a      	mov	r2, r3
 8002ad6:	69bb      	ldr	r3, [r7, #24]
 8002ad8:	4413      	add	r3, r2
 8002ada:	61bb      	str	r3, [r7, #24]
 8002adc:	68bb      	ldr	r3, [r7, #8]
 8002ade:	781b      	ldrb	r3, [r3, #0]
 8002ae0:	011a      	lsls	r2, r3, #4
 8002ae2:	69bb      	ldr	r3, [r7, #24]
 8002ae4:	4413      	add	r3, r2
 8002ae6:	f203 4304 	addw	r3, r3, #1028	; 0x404
 8002aea:	617b      	str	r3, [r7, #20]
 8002aec:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8002aee:	2b00      	cmp	r3, #0
 8002af0:	d112      	bne.n	8002b18 <HAL_PCD_EP_DB_Transmit+0x1d8>
 8002af2:	697b      	ldr	r3, [r7, #20]
 8002af4:	881b      	ldrh	r3, [r3, #0]
 8002af6:	b29b      	uxth	r3, r3
 8002af8:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 8002afc:	b29a      	uxth	r2, r3
 8002afe:	697b      	ldr	r3, [r7, #20]
 8002b00:	801a      	strh	r2, [r3, #0]
 8002b02:	697b      	ldr	r3, [r7, #20]
 8002b04:	881b      	ldrh	r3, [r3, #0]
 8002b06:	b29b      	uxth	r3, r3
 8002b08:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8002b0c:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8002b10:	b29a      	uxth	r2, r3
 8002b12:	697b      	ldr	r3, [r7, #20]
 8002b14:	801a      	strh	r2, [r3, #0]
 8002b16:	e047      	b.n	8002ba8 <HAL_PCD_EP_DB_Transmit+0x268>
 8002b18:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8002b1a:	2b3e      	cmp	r3, #62	; 0x3e
 8002b1c:	d811      	bhi.n	8002b42 <HAL_PCD_EP_DB_Transmit+0x202>
 8002b1e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8002b20:	085b      	lsrs	r3, r3, #1
 8002b22:	62bb      	str	r3, [r7, #40]	; 0x28
 8002b24:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8002b26:	f003 0301 	and.w	r3, r3, #1
 8002b2a:	2b00      	cmp	r3, #0
 8002b2c:	d002      	beq.n	8002b34 <HAL_PCD_EP_DB_Transmit+0x1f4>
 8002b2e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002b30:	3301      	adds	r3, #1
 8002b32:	62bb      	str	r3, [r7, #40]	; 0x28
 8002b34:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002b36:	b29b      	uxth	r3, r3
 8002b38:	029b      	lsls	r3, r3, #10
 8002b3a:	b29a      	uxth	r2, r3
 8002b3c:	697b      	ldr	r3, [r7, #20]
 8002b3e:	801a      	strh	r2, [r3, #0]
 8002b40:	e032      	b.n	8002ba8 <HAL_PCD_EP_DB_Transmit+0x268>
 8002b42:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8002b44:	095b      	lsrs	r3, r3, #5
 8002b46:	62bb      	str	r3, [r7, #40]	; 0x28
 8002b48:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8002b4a:	f003 031f 	and.w	r3, r3, #31
 8002b4e:	2b00      	cmp	r3, #0
 8002b50:	d102      	bne.n	8002b58 <HAL_PCD_EP_DB_Transmit+0x218>
 8002b52:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002b54:	3b01      	subs	r3, #1
 8002b56:	62bb      	str	r3, [r7, #40]	; 0x28
 8002b58:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002b5a:	b29b      	uxth	r3, r3
 8002b5c:	029b      	lsls	r3, r3, #10
 8002b5e:	b29b      	uxth	r3, r3
 8002b60:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8002b64:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8002b68:	b29a      	uxth	r2, r3
 8002b6a:	697b      	ldr	r3, [r7, #20]
 8002b6c:	801a      	strh	r2, [r3, #0]
 8002b6e:	e01b      	b.n	8002ba8 <HAL_PCD_EP_DB_Transmit+0x268>
 8002b70:	68bb      	ldr	r3, [r7, #8]
 8002b72:	785b      	ldrb	r3, [r3, #1]
 8002b74:	2b01      	cmp	r3, #1
 8002b76:	d117      	bne.n	8002ba8 <HAL_PCD_EP_DB_Transmit+0x268>
 8002b78:	68fb      	ldr	r3, [r7, #12]
 8002b7a:	681b      	ldr	r3, [r3, #0]
 8002b7c:	623b      	str	r3, [r7, #32]
 8002b7e:	68fb      	ldr	r3, [r7, #12]
 8002b80:	681b      	ldr	r3, [r3, #0]
 8002b82:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8002b86:	b29b      	uxth	r3, r3
 8002b88:	461a      	mov	r2, r3
 8002b8a:	6a3b      	ldr	r3, [r7, #32]
 8002b8c:	4413      	add	r3, r2
 8002b8e:	623b      	str	r3, [r7, #32]
 8002b90:	68bb      	ldr	r3, [r7, #8]
 8002b92:	781b      	ldrb	r3, [r3, #0]
 8002b94:	011a      	lsls	r2, r3, #4
 8002b96:	6a3b      	ldr	r3, [r7, #32]
 8002b98:	4413      	add	r3, r2
 8002b9a:	f203 4304 	addw	r3, r3, #1028	; 0x404
 8002b9e:	61fb      	str	r3, [r7, #28]
 8002ba0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8002ba2:	b29a      	uxth	r2, r3
 8002ba4:	69fb      	ldr	r3, [r7, #28]
 8002ba6:	801a      	strh	r2, [r3, #0]

        /* Copy user buffer to USB PMA */
        USB_WritePMA(hpcd->Instance, ep->xfer_buff,  ep->pmaaddr0, (uint16_t)len);
 8002ba8:	68fb      	ldr	r3, [r7, #12]
 8002baa:	6818      	ldr	r0, [r3, #0]
 8002bac:	68bb      	ldr	r3, [r7, #8]
 8002bae:	6959      	ldr	r1, [r3, #20]
 8002bb0:	68bb      	ldr	r3, [r7, #8]
 8002bb2:	891a      	ldrh	r2, [r3, #8]
 8002bb4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8002bb6:	b29b      	uxth	r3, r3
 8002bb8:	f003 fa50 	bl	800605c <USB_WritePMA>
 8002bbc:	e130      	b.n	8002e20 <HAL_PCD_EP_DB_Transmit+0x4e0>
    }
  }
  else /* Data Buffer1 ACK received */
  {
    /* multi-packet on the NON control IN endpoint */
    TxByteNbre = (uint16_t)PCD_GET_EP_DBUF1_CNT(hpcd->Instance, ep->num);
 8002bbe:	68fb      	ldr	r3, [r7, #12]
 8002bc0:	681b      	ldr	r3, [r3, #0]
 8002bc2:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8002bc6:	b29b      	uxth	r3, r3
 8002bc8:	461a      	mov	r2, r3
 8002bca:	68bb      	ldr	r3, [r7, #8]
 8002bcc:	781b      	ldrb	r3, [r3, #0]
 8002bce:	00db      	lsls	r3, r3, #3
 8002bd0:	4413      	add	r3, r2
 8002bd2:	3306      	adds	r3, #6
 8002bd4:	005b      	lsls	r3, r3, #1
 8002bd6:	68fa      	ldr	r2, [r7, #12]
 8002bd8:	6812      	ldr	r2, [r2, #0]
 8002bda:	4413      	add	r3, r2
 8002bdc:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8002be0:	881b      	ldrh	r3, [r3, #0]
 8002be2:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8002be6:	85fb      	strh	r3, [r7, #46]	; 0x2e

    if (ep->xfer_len >= TxByteNbre)
 8002be8:	68bb      	ldr	r3, [r7, #8]
 8002bea:	699a      	ldr	r2, [r3, #24]
 8002bec:	8dfb      	ldrh	r3, [r7, #46]	; 0x2e
 8002bee:	429a      	cmp	r2, r3
 8002bf0:	d306      	bcc.n	8002c00 <HAL_PCD_EP_DB_Transmit+0x2c0>
    {
      ep->xfer_len -= TxByteNbre;
 8002bf2:	68bb      	ldr	r3, [r7, #8]
 8002bf4:	699a      	ldr	r2, [r3, #24]
 8002bf6:	8dfb      	ldrh	r3, [r7, #46]	; 0x2e
 8002bf8:	1ad2      	subs	r2, r2, r3
 8002bfa:	68bb      	ldr	r3, [r7, #8]
 8002bfc:	619a      	str	r2, [r3, #24]
 8002bfe:	e002      	b.n	8002c06 <HAL_PCD_EP_DB_Transmit+0x2c6>
    }
    else
    {
      ep->xfer_len = 0U;
 8002c00:	68bb      	ldr	r3, [r7, #8]
 8002c02:	2200      	movs	r2, #0
 8002c04:	619a      	str	r2, [r3, #24]
    }

    /* Transfer is completed */
    if (ep->xfer_len == 0U)
 8002c06:	68bb      	ldr	r3, [r7, #8]
 8002c08:	699b      	ldr	r3, [r3, #24]
 8002c0a:	2b00      	cmp	r3, #0
 8002c0c:	d12c      	bne.n	8002c68 <HAL_PCD_EP_DB_Transmit+0x328>
    {
      /* TX COMPLETE */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->DataInStageCallback(hpcd, ep->num);
#else
      HAL_PCD_DataInStageCallback(hpcd, ep->num);
 8002c0e:	68bb      	ldr	r3, [r7, #8]
 8002c10:	781b      	ldrb	r3, [r3, #0]
 8002c12:	4619      	mov	r1, r3
 8002c14:	68f8      	ldr	r0, [r7, #12]
 8002c16:	f005 f858 	bl	8007cca <HAL_PCD_DataInStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      /*need to Free USB Buff*/
      if ((wEPVal & USB_EP_DTOG_RX) == 0U)
 8002c1a:	88fb      	ldrh	r3, [r7, #6]
 8002c1c:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8002c20:	2b00      	cmp	r3, #0
 8002c22:	f040 80fd 	bne.w	8002e20 <HAL_PCD_EP_DB_Transmit+0x4e0>
      {
        PCD_FreeUserBuffer(hpcd->Instance, ep->num, 1U);
 8002c26:	68fb      	ldr	r3, [r7, #12]
 8002c28:	681b      	ldr	r3, [r3, #0]
 8002c2a:	461a      	mov	r2, r3
 8002c2c:	68bb      	ldr	r3, [r7, #8]
 8002c2e:	781b      	ldrb	r3, [r3, #0]
 8002c30:	009b      	lsls	r3, r3, #2
 8002c32:	4413      	add	r3, r2
 8002c34:	881b      	ldrh	r3, [r3, #0]
 8002c36:	b29b      	uxth	r3, r3
 8002c38:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8002c3c:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8002c40:	84fb      	strh	r3, [r7, #38]	; 0x26
 8002c42:	68fb      	ldr	r3, [r7, #12]
 8002c44:	681b      	ldr	r3, [r3, #0]
 8002c46:	461a      	mov	r2, r3
 8002c48:	68bb      	ldr	r3, [r7, #8]
 8002c4a:	781b      	ldrb	r3, [r3, #0]
 8002c4c:	009b      	lsls	r3, r3, #2
 8002c4e:	441a      	add	r2, r3
 8002c50:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 8002c52:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8002c56:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8002c5a:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8002c5e:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8002c62:	b29b      	uxth	r3, r3
 8002c64:	8013      	strh	r3, [r2, #0]
 8002c66:	e0db      	b.n	8002e20 <HAL_PCD_EP_DB_Transmit+0x4e0>
      }
    }
    else /* Transfer is not yet Done */
    {
      /* need to Free USB Buff */
      if ((wEPVal & USB_EP_DTOG_RX) == 0U)
 8002c68:	88fb      	ldrh	r3, [r7, #6]
 8002c6a:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8002c6e:	2b00      	cmp	r3, #0
 8002c70:	d11f      	bne.n	8002cb2 <HAL_PCD_EP_DB_Transmit+0x372>
      {
        PCD_FreeUserBuffer(hpcd->Instance, ep->num, 1U);
 8002c72:	68fb      	ldr	r3, [r7, #12]
 8002c74:	681b      	ldr	r3, [r3, #0]
 8002c76:	461a      	mov	r2, r3
 8002c78:	68bb      	ldr	r3, [r7, #8]
 8002c7a:	781b      	ldrb	r3, [r3, #0]
 8002c7c:	009b      	lsls	r3, r3, #2
 8002c7e:	4413      	add	r3, r2
 8002c80:	881b      	ldrh	r3, [r3, #0]
 8002c82:	b29b      	uxth	r3, r3
 8002c84:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8002c88:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8002c8c:	85bb      	strh	r3, [r7, #44]	; 0x2c
 8002c8e:	68fb      	ldr	r3, [r7, #12]
 8002c90:	681b      	ldr	r3, [r3, #0]
 8002c92:	461a      	mov	r2, r3
 8002c94:	68bb      	ldr	r3, [r7, #8]
 8002c96:	781b      	ldrb	r3, [r3, #0]
 8002c98:	009b      	lsls	r3, r3, #2
 8002c9a:	441a      	add	r2, r3
 8002c9c:	8dbb      	ldrh	r3, [r7, #44]	; 0x2c
 8002c9e:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8002ca2:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8002ca6:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8002caa:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8002cae:	b29b      	uxth	r3, r3
 8002cb0:	8013      	strh	r3, [r2, #0]
      }

      /* Still there is data to Fill in the next Buffer */
      if (ep->xfer_fill_db == 1U)
 8002cb2:	68bb      	ldr	r3, [r7, #8]
 8002cb4:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 8002cb8:	2b01      	cmp	r3, #1
 8002cba:	f040 80b1 	bne.w	8002e20 <HAL_PCD_EP_DB_Transmit+0x4e0>
      {
        ep->xfer_buff += TxByteNbre;
 8002cbe:	68bb      	ldr	r3, [r7, #8]
 8002cc0:	695a      	ldr	r2, [r3, #20]
 8002cc2:	8dfb      	ldrh	r3, [r7, #46]	; 0x2e
 8002cc4:	441a      	add	r2, r3
 8002cc6:	68bb      	ldr	r3, [r7, #8]
 8002cc8:	615a      	str	r2, [r3, #20]
        ep->xfer_count += TxByteNbre;
 8002cca:	68bb      	ldr	r3, [r7, #8]
 8002ccc:	69da      	ldr	r2, [r3, #28]
 8002cce:	8dfb      	ldrh	r3, [r7, #46]	; 0x2e
 8002cd0:	441a      	add	r2, r3
 8002cd2:	68bb      	ldr	r3, [r7, #8]
 8002cd4:	61da      	str	r2, [r3, #28]

        /* Calculate the len of the new buffer to fill */
        if (ep->xfer_len_db >= ep->maxpacket)
 8002cd6:	68bb      	ldr	r3, [r7, #8]
 8002cd8:	6a1a      	ldr	r2, [r3, #32]
 8002cda:	68bb      	ldr	r3, [r7, #8]
 8002cdc:	691b      	ldr	r3, [r3, #16]
 8002cde:	429a      	cmp	r2, r3
 8002ce0:	d309      	bcc.n	8002cf6 <HAL_PCD_EP_DB_Transmit+0x3b6>
        {
          len = ep->maxpacket;
 8002ce2:	68bb      	ldr	r3, [r7, #8]
 8002ce4:	691b      	ldr	r3, [r3, #16]
 8002ce6:	63bb      	str	r3, [r7, #56]	; 0x38
          ep->xfer_len_db -= len;
 8002ce8:	68bb      	ldr	r3, [r7, #8]
 8002cea:	6a1a      	ldr	r2, [r3, #32]
 8002cec:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8002cee:	1ad2      	subs	r2, r2, r3
 8002cf0:	68bb      	ldr	r3, [r7, #8]
 8002cf2:	621a      	str	r2, [r3, #32]
 8002cf4:	e014      	b.n	8002d20 <HAL_PCD_EP_DB_Transmit+0x3e0>
        }
        else if (ep->xfer_len_db == 0U)
 8002cf6:	68bb      	ldr	r3, [r7, #8]
 8002cf8:	6a1b      	ldr	r3, [r3, #32]
 8002cfa:	2b00      	cmp	r3, #0
 8002cfc:	d106      	bne.n	8002d0c <HAL_PCD_EP_DB_Transmit+0x3cc>
        {
          len = TxByteNbre;
 8002cfe:	8dfb      	ldrh	r3, [r7, #46]	; 0x2e
 8002d00:	63bb      	str	r3, [r7, #56]	; 0x38
          ep->xfer_fill_db = 0U;
 8002d02:	68bb      	ldr	r3, [r7, #8]
 8002d04:	2200      	movs	r2, #0
 8002d06:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
 8002d0a:	e009      	b.n	8002d20 <HAL_PCD_EP_DB_Transmit+0x3e0>
        }
        else
        {
          len = ep->xfer_len_db;
 8002d0c:	68bb      	ldr	r3, [r7, #8]
 8002d0e:	6a1b      	ldr	r3, [r3, #32]
 8002d10:	63bb      	str	r3, [r7, #56]	; 0x38
          ep->xfer_len_db = 0U;
 8002d12:	68bb      	ldr	r3, [r7, #8]
 8002d14:	2200      	movs	r2, #0
 8002d16:	621a      	str	r2, [r3, #32]
          ep->xfer_fill_db = 0;
 8002d18:	68bb      	ldr	r3, [r7, #8]
 8002d1a:	2200      	movs	r2, #0
 8002d1c:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
        }

        /* Set the Double buffer counter for pmabuffer1 */
        PCD_SET_EP_DBUF1_CNT(hpcd->Instance, ep->num, ep->is_in, len);
 8002d20:	68fb      	ldr	r3, [r7, #12]
 8002d22:	681b      	ldr	r3, [r3, #0]
 8002d24:	637b      	str	r3, [r7, #52]	; 0x34
 8002d26:	68bb      	ldr	r3, [r7, #8]
 8002d28:	785b      	ldrb	r3, [r3, #1]
 8002d2a:	2b00      	cmp	r3, #0
 8002d2c:	d155      	bne.n	8002dda <HAL_PCD_EP_DB_Transmit+0x49a>
 8002d2e:	68fb      	ldr	r3, [r7, #12]
 8002d30:	681b      	ldr	r3, [r3, #0]
 8002d32:	647b      	str	r3, [r7, #68]	; 0x44
 8002d34:	68fb      	ldr	r3, [r7, #12]
 8002d36:	681b      	ldr	r3, [r3, #0]
 8002d38:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8002d3c:	b29b      	uxth	r3, r3
 8002d3e:	461a      	mov	r2, r3
 8002d40:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8002d42:	4413      	add	r3, r2
 8002d44:	647b      	str	r3, [r7, #68]	; 0x44
 8002d46:	68bb      	ldr	r3, [r7, #8]
 8002d48:	781b      	ldrb	r3, [r3, #0]
 8002d4a:	011a      	lsls	r2, r3, #4
 8002d4c:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8002d4e:	4413      	add	r3, r2
 8002d50:	f203 430c 	addw	r3, r3, #1036	; 0x40c
 8002d54:	643b      	str	r3, [r7, #64]	; 0x40
 8002d56:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8002d58:	2b00      	cmp	r3, #0
 8002d5a:	d112      	bne.n	8002d82 <HAL_PCD_EP_DB_Transmit+0x442>
 8002d5c:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8002d5e:	881b      	ldrh	r3, [r3, #0]
 8002d60:	b29b      	uxth	r3, r3
 8002d62:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 8002d66:	b29a      	uxth	r2, r3
 8002d68:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8002d6a:	801a      	strh	r2, [r3, #0]
 8002d6c:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8002d6e:	881b      	ldrh	r3, [r3, #0]
 8002d70:	b29b      	uxth	r3, r3
 8002d72:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8002d76:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8002d7a:	b29a      	uxth	r2, r3
 8002d7c:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8002d7e:	801a      	strh	r2, [r3, #0]
 8002d80:	e044      	b.n	8002e0c <HAL_PCD_EP_DB_Transmit+0x4cc>
 8002d82:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8002d84:	2b3e      	cmp	r3, #62	; 0x3e
 8002d86:	d811      	bhi.n	8002dac <HAL_PCD_EP_DB_Transmit+0x46c>
 8002d88:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8002d8a:	085b      	lsrs	r3, r3, #1
 8002d8c:	63fb      	str	r3, [r7, #60]	; 0x3c
 8002d8e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8002d90:	f003 0301 	and.w	r3, r3, #1
 8002d94:	2b00      	cmp	r3, #0
 8002d96:	d002      	beq.n	8002d9e <HAL_PCD_EP_DB_Transmit+0x45e>
 8002d98:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8002d9a:	3301      	adds	r3, #1
 8002d9c:	63fb      	str	r3, [r7, #60]	; 0x3c
 8002d9e:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8002da0:	b29b      	uxth	r3, r3
 8002da2:	029b      	lsls	r3, r3, #10
 8002da4:	b29a      	uxth	r2, r3
 8002da6:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8002da8:	801a      	strh	r2, [r3, #0]
 8002daa:	e02f      	b.n	8002e0c <HAL_PCD_EP_DB_Transmit+0x4cc>
 8002dac:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8002dae:	095b      	lsrs	r3, r3, #5
 8002db0:	63fb      	str	r3, [r7, #60]	; 0x3c
 8002db2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8002db4:	f003 031f 	and.w	r3, r3, #31
 8002db8:	2b00      	cmp	r3, #0
 8002dba:	d102      	bne.n	8002dc2 <HAL_PCD_EP_DB_Transmit+0x482>
 8002dbc:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8002dbe:	3b01      	subs	r3, #1
 8002dc0:	63fb      	str	r3, [r7, #60]	; 0x3c
 8002dc2:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8002dc4:	b29b      	uxth	r3, r3
 8002dc6:	029b      	lsls	r3, r3, #10
 8002dc8:	b29b      	uxth	r3, r3
 8002dca:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8002dce:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8002dd2:	b29a      	uxth	r2, r3
 8002dd4:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8002dd6:	801a      	strh	r2, [r3, #0]
 8002dd8:	e018      	b.n	8002e0c <HAL_PCD_EP_DB_Transmit+0x4cc>
 8002dda:	68bb      	ldr	r3, [r7, #8]
 8002ddc:	785b      	ldrb	r3, [r3, #1]
 8002dde:	2b01      	cmp	r3, #1
 8002de0:	d114      	bne.n	8002e0c <HAL_PCD_EP_DB_Transmit+0x4cc>
 8002de2:	68fb      	ldr	r3, [r7, #12]
 8002de4:	681b      	ldr	r3, [r3, #0]
 8002de6:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8002dea:	b29b      	uxth	r3, r3
 8002dec:	461a      	mov	r2, r3
 8002dee:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8002df0:	4413      	add	r3, r2
 8002df2:	637b      	str	r3, [r7, #52]	; 0x34
 8002df4:	68bb      	ldr	r3, [r7, #8]
 8002df6:	781b      	ldrb	r3, [r3, #0]
 8002df8:	011a      	lsls	r2, r3, #4
 8002dfa:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8002dfc:	4413      	add	r3, r2
 8002dfe:	f203 430c 	addw	r3, r3, #1036	; 0x40c
 8002e02:	633b      	str	r3, [r7, #48]	; 0x30
 8002e04:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8002e06:	b29a      	uxth	r2, r3
 8002e08:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002e0a:	801a      	strh	r2, [r3, #0]

        /* Copy the user buffer to USB PMA */
        USB_WritePMA(hpcd->Instance, ep->xfer_buff,  ep->pmaaddr1, (uint16_t)len);
 8002e0c:	68fb      	ldr	r3, [r7, #12]
 8002e0e:	6818      	ldr	r0, [r3, #0]
 8002e10:	68bb      	ldr	r3, [r7, #8]
 8002e12:	6959      	ldr	r1, [r3, #20]
 8002e14:	68bb      	ldr	r3, [r7, #8]
 8002e16:	895a      	ldrh	r2, [r3, #10]
 8002e18:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8002e1a:	b29b      	uxth	r3, r3
 8002e1c:	f003 f91e 	bl	800605c <USB_WritePMA>
      }
    }
  }

  /*enable endpoint IN*/
  PCD_SET_EP_TX_STATUS(hpcd->Instance, ep->num, USB_EP_TX_VALID);
 8002e20:	68fb      	ldr	r3, [r7, #12]
 8002e22:	681b      	ldr	r3, [r3, #0]
 8002e24:	461a      	mov	r2, r3
 8002e26:	68bb      	ldr	r3, [r7, #8]
 8002e28:	781b      	ldrb	r3, [r3, #0]
 8002e2a:	009b      	lsls	r3, r3, #2
 8002e2c:	4413      	add	r3, r2
 8002e2e:	881b      	ldrh	r3, [r3, #0]
 8002e30:	b29b      	uxth	r3, r3
 8002e32:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8002e36:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8002e3a:	823b      	strh	r3, [r7, #16]
 8002e3c:	8a3b      	ldrh	r3, [r7, #16]
 8002e3e:	f083 0310 	eor.w	r3, r3, #16
 8002e42:	823b      	strh	r3, [r7, #16]
 8002e44:	8a3b      	ldrh	r3, [r7, #16]
 8002e46:	f083 0320 	eor.w	r3, r3, #32
 8002e4a:	823b      	strh	r3, [r7, #16]
 8002e4c:	68fb      	ldr	r3, [r7, #12]
 8002e4e:	681b      	ldr	r3, [r3, #0]
 8002e50:	461a      	mov	r2, r3
 8002e52:	68bb      	ldr	r3, [r7, #8]
 8002e54:	781b      	ldrb	r3, [r3, #0]
 8002e56:	009b      	lsls	r3, r3, #2
 8002e58:	441a      	add	r2, r3
 8002e5a:	8a3b      	ldrh	r3, [r7, #16]
 8002e5c:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8002e60:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8002e64:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8002e68:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8002e6c:	b29b      	uxth	r3, r3
 8002e6e:	8013      	strh	r3, [r2, #0]

  return HAL_OK;
 8002e70:	2300      	movs	r3, #0
}
 8002e72:	4618      	mov	r0, r3
 8002e74:	3748      	adds	r7, #72	; 0x48
 8002e76:	46bd      	mov	sp, r7
 8002e78:	bd80      	pop	{r7, pc}

08002e7a <HAL_PCDEx_PMAConfig>:
  * @retval HAL status
  */

HAL_StatusTypeDef  HAL_PCDEx_PMAConfig(PCD_HandleTypeDef *hpcd, uint16_t ep_addr,
                                       uint16_t ep_kind, uint32_t pmaadress)
{
 8002e7a:	b480      	push	{r7}
 8002e7c:	b087      	sub	sp, #28
 8002e7e:	af00      	add	r7, sp, #0
 8002e80:	60f8      	str	r0, [r7, #12]
 8002e82:	607b      	str	r3, [r7, #4]
 8002e84:	460b      	mov	r3, r1
 8002e86:	817b      	strh	r3, [r7, #10]
 8002e88:	4613      	mov	r3, r2
 8002e8a:	813b      	strh	r3, [r7, #8]
  PCD_EPTypeDef *ep;

  /* initialize ep structure*/
  if ((0x80U & ep_addr) == 0x80U)
 8002e8c:	897b      	ldrh	r3, [r7, #10]
 8002e8e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002e92:	b29b      	uxth	r3, r3
 8002e94:	2b00      	cmp	r3, #0
 8002e96:	d00b      	beq.n	8002eb0 <HAL_PCDEx_PMAConfig+0x36>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8002e98:	897b      	ldrh	r3, [r7, #10]
 8002e9a:	f003 0307 	and.w	r3, r3, #7
 8002e9e:	1c5a      	adds	r2, r3, #1
 8002ea0:	4613      	mov	r3, r2
 8002ea2:	009b      	lsls	r3, r3, #2
 8002ea4:	4413      	add	r3, r2
 8002ea6:	00db      	lsls	r3, r3, #3
 8002ea8:	68fa      	ldr	r2, [r7, #12]
 8002eaa:	4413      	add	r3, r2
 8002eac:	617b      	str	r3, [r7, #20]
 8002eae:	e009      	b.n	8002ec4 <HAL_PCDEx_PMAConfig+0x4a>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr];
 8002eb0:	897a      	ldrh	r2, [r7, #10]
 8002eb2:	4613      	mov	r3, r2
 8002eb4:	009b      	lsls	r3, r3, #2
 8002eb6:	4413      	add	r3, r2
 8002eb8:	00db      	lsls	r3, r3, #3
 8002eba:	f503 73b4 	add.w	r3, r3, #360	; 0x168
 8002ebe:	68fa      	ldr	r2, [r7, #12]
 8002ec0:	4413      	add	r3, r2
 8002ec2:	617b      	str	r3, [r7, #20]
  }

  /* Here we check if the endpoint is single or double Buffer*/
  if (ep_kind == PCD_SNG_BUF)
 8002ec4:	893b      	ldrh	r3, [r7, #8]
 8002ec6:	2b00      	cmp	r3, #0
 8002ec8:	d107      	bne.n	8002eda <HAL_PCDEx_PMAConfig+0x60>
  {
    /* Single Buffer */
    ep->doublebuffer = 0U;
 8002eca:	697b      	ldr	r3, [r7, #20]
 8002ecc:	2200      	movs	r2, #0
 8002ece:	731a      	strb	r2, [r3, #12]
    /* Configure the PMA */
    ep->pmaadress = (uint16_t)pmaadress;
 8002ed0:	687b      	ldr	r3, [r7, #4]
 8002ed2:	b29a      	uxth	r2, r3
 8002ed4:	697b      	ldr	r3, [r7, #20]
 8002ed6:	80da      	strh	r2, [r3, #6]
 8002ed8:	e00b      	b.n	8002ef2 <HAL_PCDEx_PMAConfig+0x78>
  }
  else /* USB_DBL_BUF */
  {
    /* Double Buffer Endpoint */
    ep->doublebuffer = 1U;
 8002eda:	697b      	ldr	r3, [r7, #20]
 8002edc:	2201      	movs	r2, #1
 8002ede:	731a      	strb	r2, [r3, #12]
    /* Configure the PMA */
    ep->pmaaddr0 = (uint16_t)(pmaadress & 0xFFFFU);
 8002ee0:	687b      	ldr	r3, [r7, #4]
 8002ee2:	b29a      	uxth	r2, r3
 8002ee4:	697b      	ldr	r3, [r7, #20]
 8002ee6:	811a      	strh	r2, [r3, #8]
    ep->pmaaddr1 = (uint16_t)((pmaadress & 0xFFFF0000U) >> 16);
 8002ee8:	687b      	ldr	r3, [r7, #4]
 8002eea:	0c1b      	lsrs	r3, r3, #16
 8002eec:	b29a      	uxth	r2, r3
 8002eee:	697b      	ldr	r3, [r7, #20]
 8002ef0:	815a      	strh	r2, [r3, #10]
  }

  return HAL_OK;
 8002ef2:	2300      	movs	r3, #0
}
 8002ef4:	4618      	mov	r0, r3
 8002ef6:	371c      	adds	r7, #28
 8002ef8:	46bd      	mov	sp, r7
 8002efa:	bc80      	pop	{r7}
 8002efc:	4770      	bx	lr
	...

08002f00 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8002f00:	b580      	push	{r7, lr}
 8002f02:	b086      	sub	sp, #24
 8002f04:	af00      	add	r7, sp, #0
 8002f06:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8002f08:	687b      	ldr	r3, [r7, #4]
 8002f0a:	2b00      	cmp	r3, #0
 8002f0c:	d101      	bne.n	8002f12 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8002f0e:	2301      	movs	r3, #1
 8002f10:	e26c      	b.n	80033ec <HAL_RCC_OscConfig+0x4ec>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8002f12:	687b      	ldr	r3, [r7, #4]
 8002f14:	681b      	ldr	r3, [r3, #0]
 8002f16:	f003 0301 	and.w	r3, r3, #1
 8002f1a:	2b00      	cmp	r3, #0
 8002f1c:	f000 8087 	beq.w	800302e <HAL_RCC_OscConfig+0x12e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 8002f20:	4b92      	ldr	r3, [pc, #584]	; (800316c <HAL_RCC_OscConfig+0x26c>)
 8002f22:	685b      	ldr	r3, [r3, #4]
 8002f24:	f003 030c 	and.w	r3, r3, #12
 8002f28:	2b04      	cmp	r3, #4
 8002f2a:	d00c      	beq.n	8002f46 <HAL_RCC_OscConfig+0x46>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 8002f2c:	4b8f      	ldr	r3, [pc, #572]	; (800316c <HAL_RCC_OscConfig+0x26c>)
 8002f2e:	685b      	ldr	r3, [r3, #4]
 8002f30:	f003 030c 	and.w	r3, r3, #12
 8002f34:	2b08      	cmp	r3, #8
 8002f36:	d112      	bne.n	8002f5e <HAL_RCC_OscConfig+0x5e>
 8002f38:	4b8c      	ldr	r3, [pc, #560]	; (800316c <HAL_RCC_OscConfig+0x26c>)
 8002f3a:	685b      	ldr	r3, [r3, #4]
 8002f3c:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8002f40:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8002f44:	d10b      	bne.n	8002f5e <HAL_RCC_OscConfig+0x5e>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8002f46:	4b89      	ldr	r3, [pc, #548]	; (800316c <HAL_RCC_OscConfig+0x26c>)
 8002f48:	681b      	ldr	r3, [r3, #0]
 8002f4a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002f4e:	2b00      	cmp	r3, #0
 8002f50:	d06c      	beq.n	800302c <HAL_RCC_OscConfig+0x12c>
 8002f52:	687b      	ldr	r3, [r7, #4]
 8002f54:	685b      	ldr	r3, [r3, #4]
 8002f56:	2b00      	cmp	r3, #0
 8002f58:	d168      	bne.n	800302c <HAL_RCC_OscConfig+0x12c>
      {
        return HAL_ERROR;
 8002f5a:	2301      	movs	r3, #1
 8002f5c:	e246      	b.n	80033ec <HAL_RCC_OscConfig+0x4ec>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8002f5e:	687b      	ldr	r3, [r7, #4]
 8002f60:	685b      	ldr	r3, [r3, #4]
 8002f62:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8002f66:	d106      	bne.n	8002f76 <HAL_RCC_OscConfig+0x76>
 8002f68:	4b80      	ldr	r3, [pc, #512]	; (800316c <HAL_RCC_OscConfig+0x26c>)
 8002f6a:	681b      	ldr	r3, [r3, #0]
 8002f6c:	4a7f      	ldr	r2, [pc, #508]	; (800316c <HAL_RCC_OscConfig+0x26c>)
 8002f6e:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8002f72:	6013      	str	r3, [r2, #0]
 8002f74:	e02e      	b.n	8002fd4 <HAL_RCC_OscConfig+0xd4>
 8002f76:	687b      	ldr	r3, [r7, #4]
 8002f78:	685b      	ldr	r3, [r3, #4]
 8002f7a:	2b00      	cmp	r3, #0
 8002f7c:	d10c      	bne.n	8002f98 <HAL_RCC_OscConfig+0x98>
 8002f7e:	4b7b      	ldr	r3, [pc, #492]	; (800316c <HAL_RCC_OscConfig+0x26c>)
 8002f80:	681b      	ldr	r3, [r3, #0]
 8002f82:	4a7a      	ldr	r2, [pc, #488]	; (800316c <HAL_RCC_OscConfig+0x26c>)
 8002f84:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8002f88:	6013      	str	r3, [r2, #0]
 8002f8a:	4b78      	ldr	r3, [pc, #480]	; (800316c <HAL_RCC_OscConfig+0x26c>)
 8002f8c:	681b      	ldr	r3, [r3, #0]
 8002f8e:	4a77      	ldr	r2, [pc, #476]	; (800316c <HAL_RCC_OscConfig+0x26c>)
 8002f90:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8002f94:	6013      	str	r3, [r2, #0]
 8002f96:	e01d      	b.n	8002fd4 <HAL_RCC_OscConfig+0xd4>
 8002f98:	687b      	ldr	r3, [r7, #4]
 8002f9a:	685b      	ldr	r3, [r3, #4]
 8002f9c:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8002fa0:	d10c      	bne.n	8002fbc <HAL_RCC_OscConfig+0xbc>
 8002fa2:	4b72      	ldr	r3, [pc, #456]	; (800316c <HAL_RCC_OscConfig+0x26c>)
 8002fa4:	681b      	ldr	r3, [r3, #0]
 8002fa6:	4a71      	ldr	r2, [pc, #452]	; (800316c <HAL_RCC_OscConfig+0x26c>)
 8002fa8:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8002fac:	6013      	str	r3, [r2, #0]
 8002fae:	4b6f      	ldr	r3, [pc, #444]	; (800316c <HAL_RCC_OscConfig+0x26c>)
 8002fb0:	681b      	ldr	r3, [r3, #0]
 8002fb2:	4a6e      	ldr	r2, [pc, #440]	; (800316c <HAL_RCC_OscConfig+0x26c>)
 8002fb4:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8002fb8:	6013      	str	r3, [r2, #0]
 8002fba:	e00b      	b.n	8002fd4 <HAL_RCC_OscConfig+0xd4>
 8002fbc:	4b6b      	ldr	r3, [pc, #428]	; (800316c <HAL_RCC_OscConfig+0x26c>)
 8002fbe:	681b      	ldr	r3, [r3, #0]
 8002fc0:	4a6a      	ldr	r2, [pc, #424]	; (800316c <HAL_RCC_OscConfig+0x26c>)
 8002fc2:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8002fc6:	6013      	str	r3, [r2, #0]
 8002fc8:	4b68      	ldr	r3, [pc, #416]	; (800316c <HAL_RCC_OscConfig+0x26c>)
 8002fca:	681b      	ldr	r3, [r3, #0]
 8002fcc:	4a67      	ldr	r2, [pc, #412]	; (800316c <HAL_RCC_OscConfig+0x26c>)
 8002fce:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8002fd2:	6013      	str	r3, [r2, #0]


      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8002fd4:	687b      	ldr	r3, [r7, #4]
 8002fd6:	685b      	ldr	r3, [r3, #4]
 8002fd8:	2b00      	cmp	r3, #0
 8002fda:	d013      	beq.n	8003004 <HAL_RCC_OscConfig+0x104>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002fdc:	f7fd fbd8 	bl	8000790 <HAL_GetTick>
 8002fe0:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8002fe2:	e008      	b.n	8002ff6 <HAL_RCC_OscConfig+0xf6>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8002fe4:	f7fd fbd4 	bl	8000790 <HAL_GetTick>
 8002fe8:	4602      	mov	r2, r0
 8002fea:	693b      	ldr	r3, [r7, #16]
 8002fec:	1ad3      	subs	r3, r2, r3
 8002fee:	2b64      	cmp	r3, #100	; 0x64
 8002ff0:	d901      	bls.n	8002ff6 <HAL_RCC_OscConfig+0xf6>
          {
            return HAL_TIMEOUT;
 8002ff2:	2303      	movs	r3, #3
 8002ff4:	e1fa      	b.n	80033ec <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8002ff6:	4b5d      	ldr	r3, [pc, #372]	; (800316c <HAL_RCC_OscConfig+0x26c>)
 8002ff8:	681b      	ldr	r3, [r3, #0]
 8002ffa:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002ffe:	2b00      	cmp	r3, #0
 8003000:	d0f0      	beq.n	8002fe4 <HAL_RCC_OscConfig+0xe4>
 8003002:	e014      	b.n	800302e <HAL_RCC_OscConfig+0x12e>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003004:	f7fd fbc4 	bl	8000790 <HAL_GetTick>
 8003008:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800300a:	e008      	b.n	800301e <HAL_RCC_OscConfig+0x11e>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 800300c:	f7fd fbc0 	bl	8000790 <HAL_GetTick>
 8003010:	4602      	mov	r2, r0
 8003012:	693b      	ldr	r3, [r7, #16]
 8003014:	1ad3      	subs	r3, r2, r3
 8003016:	2b64      	cmp	r3, #100	; 0x64
 8003018:	d901      	bls.n	800301e <HAL_RCC_OscConfig+0x11e>
          {
            return HAL_TIMEOUT;
 800301a:	2303      	movs	r3, #3
 800301c:	e1e6      	b.n	80033ec <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800301e:	4b53      	ldr	r3, [pc, #332]	; (800316c <HAL_RCC_OscConfig+0x26c>)
 8003020:	681b      	ldr	r3, [r3, #0]
 8003022:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003026:	2b00      	cmp	r3, #0
 8003028:	d1f0      	bne.n	800300c <HAL_RCC_OscConfig+0x10c>
 800302a:	e000      	b.n	800302e <HAL_RCC_OscConfig+0x12e>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800302c:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 800302e:	687b      	ldr	r3, [r7, #4]
 8003030:	681b      	ldr	r3, [r3, #0]
 8003032:	f003 0302 	and.w	r3, r3, #2
 8003036:	2b00      	cmp	r3, #0
 8003038:	d063      	beq.n	8003102 <HAL_RCC_OscConfig+0x202>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 800303a:	4b4c      	ldr	r3, [pc, #304]	; (800316c <HAL_RCC_OscConfig+0x26c>)
 800303c:	685b      	ldr	r3, [r3, #4]
 800303e:	f003 030c 	and.w	r3, r3, #12
 8003042:	2b00      	cmp	r3, #0
 8003044:	d00b      	beq.n	800305e <HAL_RCC_OscConfig+0x15e>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI_DIV2)))
 8003046:	4b49      	ldr	r3, [pc, #292]	; (800316c <HAL_RCC_OscConfig+0x26c>)
 8003048:	685b      	ldr	r3, [r3, #4]
 800304a:	f003 030c 	and.w	r3, r3, #12
 800304e:	2b08      	cmp	r3, #8
 8003050:	d11c      	bne.n	800308c <HAL_RCC_OscConfig+0x18c>
 8003052:	4b46      	ldr	r3, [pc, #280]	; (800316c <HAL_RCC_OscConfig+0x26c>)
 8003054:	685b      	ldr	r3, [r3, #4]
 8003056:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800305a:	2b00      	cmp	r3, #0
 800305c:	d116      	bne.n	800308c <HAL_RCC_OscConfig+0x18c>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800305e:	4b43      	ldr	r3, [pc, #268]	; (800316c <HAL_RCC_OscConfig+0x26c>)
 8003060:	681b      	ldr	r3, [r3, #0]
 8003062:	f003 0302 	and.w	r3, r3, #2
 8003066:	2b00      	cmp	r3, #0
 8003068:	d005      	beq.n	8003076 <HAL_RCC_OscConfig+0x176>
 800306a:	687b      	ldr	r3, [r7, #4]
 800306c:	691b      	ldr	r3, [r3, #16]
 800306e:	2b01      	cmp	r3, #1
 8003070:	d001      	beq.n	8003076 <HAL_RCC_OscConfig+0x176>
      {
        return HAL_ERROR;
 8003072:	2301      	movs	r3, #1
 8003074:	e1ba      	b.n	80033ec <HAL_RCC_OscConfig+0x4ec>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8003076:	4b3d      	ldr	r3, [pc, #244]	; (800316c <HAL_RCC_OscConfig+0x26c>)
 8003078:	681b      	ldr	r3, [r3, #0]
 800307a:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 800307e:	687b      	ldr	r3, [r7, #4]
 8003080:	695b      	ldr	r3, [r3, #20]
 8003082:	00db      	lsls	r3, r3, #3
 8003084:	4939      	ldr	r1, [pc, #228]	; (800316c <HAL_RCC_OscConfig+0x26c>)
 8003086:	4313      	orrs	r3, r2
 8003088:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800308a:	e03a      	b.n	8003102 <HAL_RCC_OscConfig+0x202>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 800308c:	687b      	ldr	r3, [r7, #4]
 800308e:	691b      	ldr	r3, [r3, #16]
 8003090:	2b00      	cmp	r3, #0
 8003092:	d020      	beq.n	80030d6 <HAL_RCC_OscConfig+0x1d6>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8003094:	4b36      	ldr	r3, [pc, #216]	; (8003170 <HAL_RCC_OscConfig+0x270>)
 8003096:	2201      	movs	r2, #1
 8003098:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800309a:	f7fd fb79 	bl	8000790 <HAL_GetTick>
 800309e:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80030a0:	e008      	b.n	80030b4 <HAL_RCC_OscConfig+0x1b4>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80030a2:	f7fd fb75 	bl	8000790 <HAL_GetTick>
 80030a6:	4602      	mov	r2, r0
 80030a8:	693b      	ldr	r3, [r7, #16]
 80030aa:	1ad3      	subs	r3, r2, r3
 80030ac:	2b02      	cmp	r3, #2
 80030ae:	d901      	bls.n	80030b4 <HAL_RCC_OscConfig+0x1b4>
          {
            return HAL_TIMEOUT;
 80030b0:	2303      	movs	r3, #3
 80030b2:	e19b      	b.n	80033ec <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80030b4:	4b2d      	ldr	r3, [pc, #180]	; (800316c <HAL_RCC_OscConfig+0x26c>)
 80030b6:	681b      	ldr	r3, [r3, #0]
 80030b8:	f003 0302 	and.w	r3, r3, #2
 80030bc:	2b00      	cmp	r3, #0
 80030be:	d0f0      	beq.n	80030a2 <HAL_RCC_OscConfig+0x1a2>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80030c0:	4b2a      	ldr	r3, [pc, #168]	; (800316c <HAL_RCC_OscConfig+0x26c>)
 80030c2:	681b      	ldr	r3, [r3, #0]
 80030c4:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 80030c8:	687b      	ldr	r3, [r7, #4]
 80030ca:	695b      	ldr	r3, [r3, #20]
 80030cc:	00db      	lsls	r3, r3, #3
 80030ce:	4927      	ldr	r1, [pc, #156]	; (800316c <HAL_RCC_OscConfig+0x26c>)
 80030d0:	4313      	orrs	r3, r2
 80030d2:	600b      	str	r3, [r1, #0]
 80030d4:	e015      	b.n	8003102 <HAL_RCC_OscConfig+0x202>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 80030d6:	4b26      	ldr	r3, [pc, #152]	; (8003170 <HAL_RCC_OscConfig+0x270>)
 80030d8:	2200      	movs	r2, #0
 80030da:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80030dc:	f7fd fb58 	bl	8000790 <HAL_GetTick>
 80030e0:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80030e2:	e008      	b.n	80030f6 <HAL_RCC_OscConfig+0x1f6>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80030e4:	f7fd fb54 	bl	8000790 <HAL_GetTick>
 80030e8:	4602      	mov	r2, r0
 80030ea:	693b      	ldr	r3, [r7, #16]
 80030ec:	1ad3      	subs	r3, r2, r3
 80030ee:	2b02      	cmp	r3, #2
 80030f0:	d901      	bls.n	80030f6 <HAL_RCC_OscConfig+0x1f6>
          {
            return HAL_TIMEOUT;
 80030f2:	2303      	movs	r3, #3
 80030f4:	e17a      	b.n	80033ec <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80030f6:	4b1d      	ldr	r3, [pc, #116]	; (800316c <HAL_RCC_OscConfig+0x26c>)
 80030f8:	681b      	ldr	r3, [r3, #0]
 80030fa:	f003 0302 	and.w	r3, r3, #2
 80030fe:	2b00      	cmp	r3, #0
 8003100:	d1f0      	bne.n	80030e4 <HAL_RCC_OscConfig+0x1e4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8003102:	687b      	ldr	r3, [r7, #4]
 8003104:	681b      	ldr	r3, [r3, #0]
 8003106:	f003 0308 	and.w	r3, r3, #8
 800310a:	2b00      	cmp	r3, #0
 800310c:	d03a      	beq.n	8003184 <HAL_RCC_OscConfig+0x284>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if (RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 800310e:	687b      	ldr	r3, [r7, #4]
 8003110:	699b      	ldr	r3, [r3, #24]
 8003112:	2b00      	cmp	r3, #0
 8003114:	d019      	beq.n	800314a <HAL_RCC_OscConfig+0x24a>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8003116:	4b17      	ldr	r3, [pc, #92]	; (8003174 <HAL_RCC_OscConfig+0x274>)
 8003118:	2201      	movs	r2, #1
 800311a:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800311c:	f7fd fb38 	bl	8000790 <HAL_GetTick>
 8003120:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8003122:	e008      	b.n	8003136 <HAL_RCC_OscConfig+0x236>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8003124:	f7fd fb34 	bl	8000790 <HAL_GetTick>
 8003128:	4602      	mov	r2, r0
 800312a:	693b      	ldr	r3, [r7, #16]
 800312c:	1ad3      	subs	r3, r2, r3
 800312e:	2b02      	cmp	r3, #2
 8003130:	d901      	bls.n	8003136 <HAL_RCC_OscConfig+0x236>
        {
          return HAL_TIMEOUT;
 8003132:	2303      	movs	r3, #3
 8003134:	e15a      	b.n	80033ec <HAL_RCC_OscConfig+0x4ec>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8003136:	4b0d      	ldr	r3, [pc, #52]	; (800316c <HAL_RCC_OscConfig+0x26c>)
 8003138:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800313a:	f003 0302 	and.w	r3, r3, #2
 800313e:	2b00      	cmp	r3, #0
 8003140:	d0f0      	beq.n	8003124 <HAL_RCC_OscConfig+0x224>
        }
      }
      /*  To have a fully stabilized clock in the specified range, a software delay of 1ms
          should be added.*/
      RCC_Delay(1);
 8003142:	2001      	movs	r0, #1
 8003144:	f000 faa8 	bl	8003698 <RCC_Delay>
 8003148:	e01c      	b.n	8003184 <HAL_RCC_OscConfig+0x284>
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 800314a:	4b0a      	ldr	r3, [pc, #40]	; (8003174 <HAL_RCC_OscConfig+0x274>)
 800314c:	2200      	movs	r2, #0
 800314e:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8003150:	f7fd fb1e 	bl	8000790 <HAL_GetTick>
 8003154:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8003156:	e00f      	b.n	8003178 <HAL_RCC_OscConfig+0x278>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8003158:	f7fd fb1a 	bl	8000790 <HAL_GetTick>
 800315c:	4602      	mov	r2, r0
 800315e:	693b      	ldr	r3, [r7, #16]
 8003160:	1ad3      	subs	r3, r2, r3
 8003162:	2b02      	cmp	r3, #2
 8003164:	d908      	bls.n	8003178 <HAL_RCC_OscConfig+0x278>
        {
          return HAL_TIMEOUT;
 8003166:	2303      	movs	r3, #3
 8003168:	e140      	b.n	80033ec <HAL_RCC_OscConfig+0x4ec>
 800316a:	bf00      	nop
 800316c:	40021000 	.word	0x40021000
 8003170:	42420000 	.word	0x42420000
 8003174:	42420480 	.word	0x42420480
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8003178:	4b9e      	ldr	r3, [pc, #632]	; (80033f4 <HAL_RCC_OscConfig+0x4f4>)
 800317a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800317c:	f003 0302 	and.w	r3, r3, #2
 8003180:	2b00      	cmp	r3, #0
 8003182:	d1e9      	bne.n	8003158 <HAL_RCC_OscConfig+0x258>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8003184:	687b      	ldr	r3, [r7, #4]
 8003186:	681b      	ldr	r3, [r3, #0]
 8003188:	f003 0304 	and.w	r3, r3, #4
 800318c:	2b00      	cmp	r3, #0
 800318e:	f000 80a6 	beq.w	80032de <HAL_RCC_OscConfig+0x3de>
  {
    FlagStatus       pwrclkchanged = RESET;
 8003192:	2300      	movs	r3, #0
 8003194:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 8003196:	4b97      	ldr	r3, [pc, #604]	; (80033f4 <HAL_RCC_OscConfig+0x4f4>)
 8003198:	69db      	ldr	r3, [r3, #28]
 800319a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800319e:	2b00      	cmp	r3, #0
 80031a0:	d10d      	bne.n	80031be <HAL_RCC_OscConfig+0x2be>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 80031a2:	4b94      	ldr	r3, [pc, #592]	; (80033f4 <HAL_RCC_OscConfig+0x4f4>)
 80031a4:	69db      	ldr	r3, [r3, #28]
 80031a6:	4a93      	ldr	r2, [pc, #588]	; (80033f4 <HAL_RCC_OscConfig+0x4f4>)
 80031a8:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80031ac:	61d3      	str	r3, [r2, #28]
 80031ae:	4b91      	ldr	r3, [pc, #580]	; (80033f4 <HAL_RCC_OscConfig+0x4f4>)
 80031b0:	69db      	ldr	r3, [r3, #28]
 80031b2:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80031b6:	60bb      	str	r3, [r7, #8]
 80031b8:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 80031ba:	2301      	movs	r3, #1
 80031bc:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80031be:	4b8e      	ldr	r3, [pc, #568]	; (80033f8 <HAL_RCC_OscConfig+0x4f8>)
 80031c0:	681b      	ldr	r3, [r3, #0]
 80031c2:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80031c6:	2b00      	cmp	r3, #0
 80031c8:	d118      	bne.n	80031fc <HAL_RCC_OscConfig+0x2fc>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 80031ca:	4b8b      	ldr	r3, [pc, #556]	; (80033f8 <HAL_RCC_OscConfig+0x4f8>)
 80031cc:	681b      	ldr	r3, [r3, #0]
 80031ce:	4a8a      	ldr	r2, [pc, #552]	; (80033f8 <HAL_RCC_OscConfig+0x4f8>)
 80031d0:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80031d4:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 80031d6:	f7fd fadb 	bl	8000790 <HAL_GetTick>
 80031da:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80031dc:	e008      	b.n	80031f0 <HAL_RCC_OscConfig+0x2f0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80031de:	f7fd fad7 	bl	8000790 <HAL_GetTick>
 80031e2:	4602      	mov	r2, r0
 80031e4:	693b      	ldr	r3, [r7, #16]
 80031e6:	1ad3      	subs	r3, r2, r3
 80031e8:	2b64      	cmp	r3, #100	; 0x64
 80031ea:	d901      	bls.n	80031f0 <HAL_RCC_OscConfig+0x2f0>
        {
          return HAL_TIMEOUT;
 80031ec:	2303      	movs	r3, #3
 80031ee:	e0fd      	b.n	80033ec <HAL_RCC_OscConfig+0x4ec>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80031f0:	4b81      	ldr	r3, [pc, #516]	; (80033f8 <HAL_RCC_OscConfig+0x4f8>)
 80031f2:	681b      	ldr	r3, [r3, #0]
 80031f4:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80031f8:	2b00      	cmp	r3, #0
 80031fa:	d0f0      	beq.n	80031de <HAL_RCC_OscConfig+0x2de>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 80031fc:	687b      	ldr	r3, [r7, #4]
 80031fe:	68db      	ldr	r3, [r3, #12]
 8003200:	2b01      	cmp	r3, #1
 8003202:	d106      	bne.n	8003212 <HAL_RCC_OscConfig+0x312>
 8003204:	4b7b      	ldr	r3, [pc, #492]	; (80033f4 <HAL_RCC_OscConfig+0x4f4>)
 8003206:	6a1b      	ldr	r3, [r3, #32]
 8003208:	4a7a      	ldr	r2, [pc, #488]	; (80033f4 <HAL_RCC_OscConfig+0x4f4>)
 800320a:	f043 0301 	orr.w	r3, r3, #1
 800320e:	6213      	str	r3, [r2, #32]
 8003210:	e02d      	b.n	800326e <HAL_RCC_OscConfig+0x36e>
 8003212:	687b      	ldr	r3, [r7, #4]
 8003214:	68db      	ldr	r3, [r3, #12]
 8003216:	2b00      	cmp	r3, #0
 8003218:	d10c      	bne.n	8003234 <HAL_RCC_OscConfig+0x334>
 800321a:	4b76      	ldr	r3, [pc, #472]	; (80033f4 <HAL_RCC_OscConfig+0x4f4>)
 800321c:	6a1b      	ldr	r3, [r3, #32]
 800321e:	4a75      	ldr	r2, [pc, #468]	; (80033f4 <HAL_RCC_OscConfig+0x4f4>)
 8003220:	f023 0301 	bic.w	r3, r3, #1
 8003224:	6213      	str	r3, [r2, #32]
 8003226:	4b73      	ldr	r3, [pc, #460]	; (80033f4 <HAL_RCC_OscConfig+0x4f4>)
 8003228:	6a1b      	ldr	r3, [r3, #32]
 800322a:	4a72      	ldr	r2, [pc, #456]	; (80033f4 <HAL_RCC_OscConfig+0x4f4>)
 800322c:	f023 0304 	bic.w	r3, r3, #4
 8003230:	6213      	str	r3, [r2, #32]
 8003232:	e01c      	b.n	800326e <HAL_RCC_OscConfig+0x36e>
 8003234:	687b      	ldr	r3, [r7, #4]
 8003236:	68db      	ldr	r3, [r3, #12]
 8003238:	2b05      	cmp	r3, #5
 800323a:	d10c      	bne.n	8003256 <HAL_RCC_OscConfig+0x356>
 800323c:	4b6d      	ldr	r3, [pc, #436]	; (80033f4 <HAL_RCC_OscConfig+0x4f4>)
 800323e:	6a1b      	ldr	r3, [r3, #32]
 8003240:	4a6c      	ldr	r2, [pc, #432]	; (80033f4 <HAL_RCC_OscConfig+0x4f4>)
 8003242:	f043 0304 	orr.w	r3, r3, #4
 8003246:	6213      	str	r3, [r2, #32]
 8003248:	4b6a      	ldr	r3, [pc, #424]	; (80033f4 <HAL_RCC_OscConfig+0x4f4>)
 800324a:	6a1b      	ldr	r3, [r3, #32]
 800324c:	4a69      	ldr	r2, [pc, #420]	; (80033f4 <HAL_RCC_OscConfig+0x4f4>)
 800324e:	f043 0301 	orr.w	r3, r3, #1
 8003252:	6213      	str	r3, [r2, #32]
 8003254:	e00b      	b.n	800326e <HAL_RCC_OscConfig+0x36e>
 8003256:	4b67      	ldr	r3, [pc, #412]	; (80033f4 <HAL_RCC_OscConfig+0x4f4>)
 8003258:	6a1b      	ldr	r3, [r3, #32]
 800325a:	4a66      	ldr	r2, [pc, #408]	; (80033f4 <HAL_RCC_OscConfig+0x4f4>)
 800325c:	f023 0301 	bic.w	r3, r3, #1
 8003260:	6213      	str	r3, [r2, #32]
 8003262:	4b64      	ldr	r3, [pc, #400]	; (80033f4 <HAL_RCC_OscConfig+0x4f4>)
 8003264:	6a1b      	ldr	r3, [r3, #32]
 8003266:	4a63      	ldr	r2, [pc, #396]	; (80033f4 <HAL_RCC_OscConfig+0x4f4>)
 8003268:	f023 0304 	bic.w	r3, r3, #4
 800326c:	6213      	str	r3, [r2, #32]
    /* Check the LSE State */
    if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 800326e:	687b      	ldr	r3, [r7, #4]
 8003270:	68db      	ldr	r3, [r3, #12]
 8003272:	2b00      	cmp	r3, #0
 8003274:	d015      	beq.n	80032a2 <HAL_RCC_OscConfig+0x3a2>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8003276:	f7fd fa8b 	bl	8000790 <HAL_GetTick>
 800327a:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800327c:	e00a      	b.n	8003294 <HAL_RCC_OscConfig+0x394>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800327e:	f7fd fa87 	bl	8000790 <HAL_GetTick>
 8003282:	4602      	mov	r2, r0
 8003284:	693b      	ldr	r3, [r7, #16]
 8003286:	1ad3      	subs	r3, r2, r3
 8003288:	f241 3288 	movw	r2, #5000	; 0x1388
 800328c:	4293      	cmp	r3, r2
 800328e:	d901      	bls.n	8003294 <HAL_RCC_OscConfig+0x394>
        {
          return HAL_TIMEOUT;
 8003290:	2303      	movs	r3, #3
 8003292:	e0ab      	b.n	80033ec <HAL_RCC_OscConfig+0x4ec>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8003294:	4b57      	ldr	r3, [pc, #348]	; (80033f4 <HAL_RCC_OscConfig+0x4f4>)
 8003296:	6a1b      	ldr	r3, [r3, #32]
 8003298:	f003 0302 	and.w	r3, r3, #2
 800329c:	2b00      	cmp	r3, #0
 800329e:	d0ee      	beq.n	800327e <HAL_RCC_OscConfig+0x37e>
 80032a0:	e014      	b.n	80032cc <HAL_RCC_OscConfig+0x3cc>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80032a2:	f7fd fa75 	bl	8000790 <HAL_GetTick>
 80032a6:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80032a8:	e00a      	b.n	80032c0 <HAL_RCC_OscConfig+0x3c0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80032aa:	f7fd fa71 	bl	8000790 <HAL_GetTick>
 80032ae:	4602      	mov	r2, r0
 80032b0:	693b      	ldr	r3, [r7, #16]
 80032b2:	1ad3      	subs	r3, r2, r3
 80032b4:	f241 3288 	movw	r2, #5000	; 0x1388
 80032b8:	4293      	cmp	r3, r2
 80032ba:	d901      	bls.n	80032c0 <HAL_RCC_OscConfig+0x3c0>
        {
          return HAL_TIMEOUT;
 80032bc:	2303      	movs	r3, #3
 80032be:	e095      	b.n	80033ec <HAL_RCC_OscConfig+0x4ec>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80032c0:	4b4c      	ldr	r3, [pc, #304]	; (80033f4 <HAL_RCC_OscConfig+0x4f4>)
 80032c2:	6a1b      	ldr	r3, [r3, #32]
 80032c4:	f003 0302 	and.w	r3, r3, #2
 80032c8:	2b00      	cmp	r3, #0
 80032ca:	d1ee      	bne.n	80032aa <HAL_RCC_OscConfig+0x3aa>
        }
      }
    }

    /* Require to disable power clock if necessary */
    if (pwrclkchanged == SET)
 80032cc:	7dfb      	ldrb	r3, [r7, #23]
 80032ce:	2b01      	cmp	r3, #1
 80032d0:	d105      	bne.n	80032de <HAL_RCC_OscConfig+0x3de>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80032d2:	4b48      	ldr	r3, [pc, #288]	; (80033f4 <HAL_RCC_OscConfig+0x4f4>)
 80032d4:	69db      	ldr	r3, [r3, #28]
 80032d6:	4a47      	ldr	r2, [pc, #284]	; (80033f4 <HAL_RCC_OscConfig+0x4f4>)
 80032d8:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 80032dc:	61d3      	str	r3, [r2, #28]

#endif /* RCC_CR_PLL2ON */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 80032de:	687b      	ldr	r3, [r7, #4]
 80032e0:	69db      	ldr	r3, [r3, #28]
 80032e2:	2b00      	cmp	r3, #0
 80032e4:	f000 8081 	beq.w	80033ea <HAL_RCC_OscConfig+0x4ea>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 80032e8:	4b42      	ldr	r3, [pc, #264]	; (80033f4 <HAL_RCC_OscConfig+0x4f4>)
 80032ea:	685b      	ldr	r3, [r3, #4]
 80032ec:	f003 030c 	and.w	r3, r3, #12
 80032f0:	2b08      	cmp	r3, #8
 80032f2:	d061      	beq.n	80033b8 <HAL_RCC_OscConfig+0x4b8>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 80032f4:	687b      	ldr	r3, [r7, #4]
 80032f6:	69db      	ldr	r3, [r3, #28]
 80032f8:	2b02      	cmp	r3, #2
 80032fa:	d146      	bne.n	800338a <HAL_RCC_OscConfig+0x48a>
        /* Check the parameters */
        assert_param(IS_RCC_PLLSOURCE(RCC_OscInitStruct->PLL.PLLSource));
        assert_param(IS_RCC_PLL_MUL(RCC_OscInitStruct->PLL.PLLMUL));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80032fc:	4b3f      	ldr	r3, [pc, #252]	; (80033fc <HAL_RCC_OscConfig+0x4fc>)
 80032fe:	2200      	movs	r2, #0
 8003300:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003302:	f7fd fa45 	bl	8000790 <HAL_GetTick>
 8003306:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8003308:	e008      	b.n	800331c <HAL_RCC_OscConfig+0x41c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800330a:	f7fd fa41 	bl	8000790 <HAL_GetTick>
 800330e:	4602      	mov	r2, r0
 8003310:	693b      	ldr	r3, [r7, #16]
 8003312:	1ad3      	subs	r3, r2, r3
 8003314:	2b02      	cmp	r3, #2
 8003316:	d901      	bls.n	800331c <HAL_RCC_OscConfig+0x41c>
          {
            return HAL_TIMEOUT;
 8003318:	2303      	movs	r3, #3
 800331a:	e067      	b.n	80033ec <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 800331c:	4b35      	ldr	r3, [pc, #212]	; (80033f4 <HAL_RCC_OscConfig+0x4f4>)
 800331e:	681b      	ldr	r3, [r3, #0]
 8003320:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003324:	2b00      	cmp	r3, #0
 8003326:	d1f0      	bne.n	800330a <HAL_RCC_OscConfig+0x40a>
          }
        }

        /* Configure the HSE prediv factor --------------------------------*/
        /* It can be written only when the PLL is disabled. Not used in PLL source is different than HSE */
        if (RCC_OscInitStruct->PLL.PLLSource == RCC_PLLSOURCE_HSE)
 8003328:	687b      	ldr	r3, [r7, #4]
 800332a:	6a1b      	ldr	r3, [r3, #32]
 800332c:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8003330:	d108      	bne.n	8003344 <HAL_RCC_OscConfig+0x444>
          /* Set PREDIV1 source */
          SET_BIT(RCC->CFGR2, RCC_OscInitStruct->Prediv1Source);
#endif /* RCC_CFGR2_PREDIV1SRC */

          /* Set PREDIV1 Value */
          __HAL_RCC_HSE_PREDIV_CONFIG(RCC_OscInitStruct->HSEPredivValue);
 8003332:	4b30      	ldr	r3, [pc, #192]	; (80033f4 <HAL_RCC_OscConfig+0x4f4>)
 8003334:	685b      	ldr	r3, [r3, #4]
 8003336:	f423 3200 	bic.w	r2, r3, #131072	; 0x20000
 800333a:	687b      	ldr	r3, [r7, #4]
 800333c:	689b      	ldr	r3, [r3, #8]
 800333e:	492d      	ldr	r1, [pc, #180]	; (80033f4 <HAL_RCC_OscConfig+0x4f4>)
 8003340:	4313      	orrs	r3, r2
 8003342:	604b      	str	r3, [r1, #4]
        }

        /* Configure the main PLL clock source and multiplication factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8003344:	4b2b      	ldr	r3, [pc, #172]	; (80033f4 <HAL_RCC_OscConfig+0x4f4>)
 8003346:	685b      	ldr	r3, [r3, #4]
 8003348:	f423 1274 	bic.w	r2, r3, #3997696	; 0x3d0000
 800334c:	687b      	ldr	r3, [r7, #4]
 800334e:	6a19      	ldr	r1, [r3, #32]
 8003350:	687b      	ldr	r3, [r7, #4]
 8003352:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003354:	430b      	orrs	r3, r1
 8003356:	4927      	ldr	r1, [pc, #156]	; (80033f4 <HAL_RCC_OscConfig+0x4f4>)
 8003358:	4313      	orrs	r3, r2
 800335a:	604b      	str	r3, [r1, #4]
                             RCC_OscInitStruct->PLL.PLLMUL);
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 800335c:	4b27      	ldr	r3, [pc, #156]	; (80033fc <HAL_RCC_OscConfig+0x4fc>)
 800335e:	2201      	movs	r2, #1
 8003360:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003362:	f7fd fa15 	bl	8000790 <HAL_GetTick>
 8003366:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8003368:	e008      	b.n	800337c <HAL_RCC_OscConfig+0x47c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800336a:	f7fd fa11 	bl	8000790 <HAL_GetTick>
 800336e:	4602      	mov	r2, r0
 8003370:	693b      	ldr	r3, [r7, #16]
 8003372:	1ad3      	subs	r3, r2, r3
 8003374:	2b02      	cmp	r3, #2
 8003376:	d901      	bls.n	800337c <HAL_RCC_OscConfig+0x47c>
          {
            return HAL_TIMEOUT;
 8003378:	2303      	movs	r3, #3
 800337a:	e037      	b.n	80033ec <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 800337c:	4b1d      	ldr	r3, [pc, #116]	; (80033f4 <HAL_RCC_OscConfig+0x4f4>)
 800337e:	681b      	ldr	r3, [r3, #0]
 8003380:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003384:	2b00      	cmp	r3, #0
 8003386:	d0f0      	beq.n	800336a <HAL_RCC_OscConfig+0x46a>
 8003388:	e02f      	b.n	80033ea <HAL_RCC_OscConfig+0x4ea>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800338a:	4b1c      	ldr	r3, [pc, #112]	; (80033fc <HAL_RCC_OscConfig+0x4fc>)
 800338c:	2200      	movs	r2, #0
 800338e:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003390:	f7fd f9fe 	bl	8000790 <HAL_GetTick>
 8003394:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8003396:	e008      	b.n	80033aa <HAL_RCC_OscConfig+0x4aa>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8003398:	f7fd f9fa 	bl	8000790 <HAL_GetTick>
 800339c:	4602      	mov	r2, r0
 800339e:	693b      	ldr	r3, [r7, #16]
 80033a0:	1ad3      	subs	r3, r2, r3
 80033a2:	2b02      	cmp	r3, #2
 80033a4:	d901      	bls.n	80033aa <HAL_RCC_OscConfig+0x4aa>
          {
            return HAL_TIMEOUT;
 80033a6:	2303      	movs	r3, #3
 80033a8:	e020      	b.n	80033ec <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 80033aa:	4b12      	ldr	r3, [pc, #72]	; (80033f4 <HAL_RCC_OscConfig+0x4f4>)
 80033ac:	681b      	ldr	r3, [r3, #0]
 80033ae:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80033b2:	2b00      	cmp	r3, #0
 80033b4:	d1f0      	bne.n	8003398 <HAL_RCC_OscConfig+0x498>
 80033b6:	e018      	b.n	80033ea <HAL_RCC_OscConfig+0x4ea>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 80033b8:	687b      	ldr	r3, [r7, #4]
 80033ba:	69db      	ldr	r3, [r3, #28]
 80033bc:	2b01      	cmp	r3, #1
 80033be:	d101      	bne.n	80033c4 <HAL_RCC_OscConfig+0x4c4>
      {
        return HAL_ERROR;
 80033c0:	2301      	movs	r3, #1
 80033c2:	e013      	b.n	80033ec <HAL_RCC_OscConfig+0x4ec>
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->CFGR;
 80033c4:	4b0b      	ldr	r3, [pc, #44]	; (80033f4 <HAL_RCC_OscConfig+0x4f4>)
 80033c6:	685b      	ldr	r3, [r3, #4]
 80033c8:	60fb      	str	r3, [r7, #12]
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80033ca:	68fb      	ldr	r3, [r7, #12]
 80033cc:	f403 3280 	and.w	r2, r3, #65536	; 0x10000
 80033d0:	687b      	ldr	r3, [r7, #4]
 80033d2:	6a1b      	ldr	r3, [r3, #32]
 80033d4:	429a      	cmp	r2, r3
 80033d6:	d106      	bne.n	80033e6 <HAL_RCC_OscConfig+0x4e6>
            (READ_BIT(pll_config, RCC_CFGR_PLLMULL) != RCC_OscInitStruct->PLL.PLLMUL))
 80033d8:	68fb      	ldr	r3, [r7, #12]
 80033da:	f403 1270 	and.w	r2, r3, #3932160	; 0x3c0000
 80033de:	687b      	ldr	r3, [r7, #4]
 80033e0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80033e2:	429a      	cmp	r2, r3
 80033e4:	d001      	beq.n	80033ea <HAL_RCC_OscConfig+0x4ea>
        {
          return HAL_ERROR;
 80033e6:	2301      	movs	r3, #1
 80033e8:	e000      	b.n	80033ec <HAL_RCC_OscConfig+0x4ec>
        }
      }
    }
  }

  return HAL_OK;
 80033ea:	2300      	movs	r3, #0
}
 80033ec:	4618      	mov	r0, r3
 80033ee:	3718      	adds	r7, #24
 80033f0:	46bd      	mov	sp, r7
 80033f2:	bd80      	pop	{r7, pc}
 80033f4:	40021000 	.word	0x40021000
 80033f8:	40007000 	.word	0x40007000
 80033fc:	42420060 	.word	0x42420060

08003400 <HAL_RCC_ClockConfig>:
  *         You can use @ref HAL_RCC_GetClockConfig() function to know which clock is
  *         currently used as system clock source.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8003400:	b580      	push	{r7, lr}
 8003402:	b084      	sub	sp, #16
 8003404:	af00      	add	r7, sp, #0
 8003406:	6078      	str	r0, [r7, #4]
 8003408:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 800340a:	687b      	ldr	r3, [r7, #4]
 800340c:	2b00      	cmp	r3, #0
 800340e:	d101      	bne.n	8003414 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8003410:	2301      	movs	r3, #1
 8003412:	e0d0      	b.n	80035b6 <HAL_RCC_ClockConfig+0x1b6>
  must be correctly programmed according to the frequency of the CPU clock
    (HCLK) of the device. */

#if defined(FLASH_ACR_LATENCY)
  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8003414:	4b6a      	ldr	r3, [pc, #424]	; (80035c0 <HAL_RCC_ClockConfig+0x1c0>)
 8003416:	681b      	ldr	r3, [r3, #0]
 8003418:	f003 0307 	and.w	r3, r3, #7
 800341c:	683a      	ldr	r2, [r7, #0]
 800341e:	429a      	cmp	r2, r3
 8003420:	d910      	bls.n	8003444 <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8003422:	4b67      	ldr	r3, [pc, #412]	; (80035c0 <HAL_RCC_ClockConfig+0x1c0>)
 8003424:	681b      	ldr	r3, [r3, #0]
 8003426:	f023 0207 	bic.w	r2, r3, #7
 800342a:	4965      	ldr	r1, [pc, #404]	; (80035c0 <HAL_RCC_ClockConfig+0x1c0>)
 800342c:	683b      	ldr	r3, [r7, #0]
 800342e:	4313      	orrs	r3, r2
 8003430:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8003432:	4b63      	ldr	r3, [pc, #396]	; (80035c0 <HAL_RCC_ClockConfig+0x1c0>)
 8003434:	681b      	ldr	r3, [r3, #0]
 8003436:	f003 0307 	and.w	r3, r3, #7
 800343a:	683a      	ldr	r2, [r7, #0]
 800343c:	429a      	cmp	r2, r3
 800343e:	d001      	beq.n	8003444 <HAL_RCC_ClockConfig+0x44>
  {
    return HAL_ERROR;
 8003440:	2301      	movs	r3, #1
 8003442:	e0b8      	b.n	80035b6 <HAL_RCC_ClockConfig+0x1b6>
  }
}

#endif /* FLASH_ACR_LATENCY */
/*-------------------------- HCLK Configuration --------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8003444:	687b      	ldr	r3, [r7, #4]
 8003446:	681b      	ldr	r3, [r3, #0]
 8003448:	f003 0302 	and.w	r3, r3, #2
 800344c:	2b00      	cmp	r3, #0
 800344e:	d020      	beq.n	8003492 <HAL_RCC_ClockConfig+0x92>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
    a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8003450:	687b      	ldr	r3, [r7, #4]
 8003452:	681b      	ldr	r3, [r3, #0]
 8003454:	f003 0304 	and.w	r3, r3, #4
 8003458:	2b00      	cmp	r3, #0
 800345a:	d005      	beq.n	8003468 <HAL_RCC_ClockConfig+0x68>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 800345c:	4b59      	ldr	r3, [pc, #356]	; (80035c4 <HAL_RCC_ClockConfig+0x1c4>)
 800345e:	685b      	ldr	r3, [r3, #4]
 8003460:	4a58      	ldr	r2, [pc, #352]	; (80035c4 <HAL_RCC_ClockConfig+0x1c4>)
 8003462:	f443 63e0 	orr.w	r3, r3, #1792	; 0x700
 8003466:	6053      	str	r3, [r2, #4]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8003468:	687b      	ldr	r3, [r7, #4]
 800346a:	681b      	ldr	r3, [r3, #0]
 800346c:	f003 0308 	and.w	r3, r3, #8
 8003470:	2b00      	cmp	r3, #0
 8003472:	d005      	beq.n	8003480 <HAL_RCC_ClockConfig+0x80>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8003474:	4b53      	ldr	r3, [pc, #332]	; (80035c4 <HAL_RCC_ClockConfig+0x1c4>)
 8003476:	685b      	ldr	r3, [r3, #4]
 8003478:	4a52      	ldr	r2, [pc, #328]	; (80035c4 <HAL_RCC_ClockConfig+0x1c4>)
 800347a:	f443 5360 	orr.w	r3, r3, #14336	; 0x3800
 800347e:	6053      	str	r3, [r2, #4]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8003480:	4b50      	ldr	r3, [pc, #320]	; (80035c4 <HAL_RCC_ClockConfig+0x1c4>)
 8003482:	685b      	ldr	r3, [r3, #4]
 8003484:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8003488:	687b      	ldr	r3, [r7, #4]
 800348a:	689b      	ldr	r3, [r3, #8]
 800348c:	494d      	ldr	r1, [pc, #308]	; (80035c4 <HAL_RCC_ClockConfig+0x1c4>)
 800348e:	4313      	orrs	r3, r2
 8003490:	604b      	str	r3, [r1, #4]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8003492:	687b      	ldr	r3, [r7, #4]
 8003494:	681b      	ldr	r3, [r3, #0]
 8003496:	f003 0301 	and.w	r3, r3, #1
 800349a:	2b00      	cmp	r3, #0
 800349c:	d040      	beq.n	8003520 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 800349e:	687b      	ldr	r3, [r7, #4]
 80034a0:	685b      	ldr	r3, [r3, #4]
 80034a2:	2b01      	cmp	r3, #1
 80034a4:	d107      	bne.n	80034b6 <HAL_RCC_ClockConfig+0xb6>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80034a6:	4b47      	ldr	r3, [pc, #284]	; (80035c4 <HAL_RCC_ClockConfig+0x1c4>)
 80034a8:	681b      	ldr	r3, [r3, #0]
 80034aa:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80034ae:	2b00      	cmp	r3, #0
 80034b0:	d115      	bne.n	80034de <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80034b2:	2301      	movs	r3, #1
 80034b4:	e07f      	b.n	80035b6 <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 80034b6:	687b      	ldr	r3, [r7, #4]
 80034b8:	685b      	ldr	r3, [r3, #4]
 80034ba:	2b02      	cmp	r3, #2
 80034bc:	d107      	bne.n	80034ce <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80034be:	4b41      	ldr	r3, [pc, #260]	; (80035c4 <HAL_RCC_ClockConfig+0x1c4>)
 80034c0:	681b      	ldr	r3, [r3, #0]
 80034c2:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80034c6:	2b00      	cmp	r3, #0
 80034c8:	d109      	bne.n	80034de <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80034ca:	2301      	movs	r3, #1
 80034cc:	e073      	b.n	80035b6 <HAL_RCC_ClockConfig+0x1b6>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80034ce:	4b3d      	ldr	r3, [pc, #244]	; (80035c4 <HAL_RCC_ClockConfig+0x1c4>)
 80034d0:	681b      	ldr	r3, [r3, #0]
 80034d2:	f003 0302 	and.w	r3, r3, #2
 80034d6:	2b00      	cmp	r3, #0
 80034d8:	d101      	bne.n	80034de <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80034da:	2301      	movs	r3, #1
 80034dc:	e06b      	b.n	80035b6 <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 80034de:	4b39      	ldr	r3, [pc, #228]	; (80035c4 <HAL_RCC_ClockConfig+0x1c4>)
 80034e0:	685b      	ldr	r3, [r3, #4]
 80034e2:	f023 0203 	bic.w	r2, r3, #3
 80034e6:	687b      	ldr	r3, [r7, #4]
 80034e8:	685b      	ldr	r3, [r3, #4]
 80034ea:	4936      	ldr	r1, [pc, #216]	; (80035c4 <HAL_RCC_ClockConfig+0x1c4>)
 80034ec:	4313      	orrs	r3, r2
 80034ee:	604b      	str	r3, [r1, #4]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 80034f0:	f7fd f94e 	bl	8000790 <HAL_GetTick>
 80034f4:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80034f6:	e00a      	b.n	800350e <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 80034f8:	f7fd f94a 	bl	8000790 <HAL_GetTick>
 80034fc:	4602      	mov	r2, r0
 80034fe:	68fb      	ldr	r3, [r7, #12]
 8003500:	1ad3      	subs	r3, r2, r3
 8003502:	f241 3288 	movw	r2, #5000	; 0x1388
 8003506:	4293      	cmp	r3, r2
 8003508:	d901      	bls.n	800350e <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 800350a:	2303      	movs	r3, #3
 800350c:	e053      	b.n	80035b6 <HAL_RCC_ClockConfig+0x1b6>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800350e:	4b2d      	ldr	r3, [pc, #180]	; (80035c4 <HAL_RCC_ClockConfig+0x1c4>)
 8003510:	685b      	ldr	r3, [r3, #4]
 8003512:	f003 020c 	and.w	r2, r3, #12
 8003516:	687b      	ldr	r3, [r7, #4]
 8003518:	685b      	ldr	r3, [r3, #4]
 800351a:	009b      	lsls	r3, r3, #2
 800351c:	429a      	cmp	r2, r3
 800351e:	d1eb      	bne.n	80034f8 <HAL_RCC_ClockConfig+0xf8>
    }
  }

#if defined(FLASH_ACR_LATENCY)
  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8003520:	4b27      	ldr	r3, [pc, #156]	; (80035c0 <HAL_RCC_ClockConfig+0x1c0>)
 8003522:	681b      	ldr	r3, [r3, #0]
 8003524:	f003 0307 	and.w	r3, r3, #7
 8003528:	683a      	ldr	r2, [r7, #0]
 800352a:	429a      	cmp	r2, r3
 800352c:	d210      	bcs.n	8003550 <HAL_RCC_ClockConfig+0x150>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800352e:	4b24      	ldr	r3, [pc, #144]	; (80035c0 <HAL_RCC_ClockConfig+0x1c0>)
 8003530:	681b      	ldr	r3, [r3, #0]
 8003532:	f023 0207 	bic.w	r2, r3, #7
 8003536:	4922      	ldr	r1, [pc, #136]	; (80035c0 <HAL_RCC_ClockConfig+0x1c0>)
 8003538:	683b      	ldr	r3, [r7, #0]
 800353a:	4313      	orrs	r3, r2
 800353c:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 800353e:	4b20      	ldr	r3, [pc, #128]	; (80035c0 <HAL_RCC_ClockConfig+0x1c0>)
 8003540:	681b      	ldr	r3, [r3, #0]
 8003542:	f003 0307 	and.w	r3, r3, #7
 8003546:	683a      	ldr	r2, [r7, #0]
 8003548:	429a      	cmp	r2, r3
 800354a:	d001      	beq.n	8003550 <HAL_RCC_ClockConfig+0x150>
  {
    return HAL_ERROR;
 800354c:	2301      	movs	r3, #1
 800354e:	e032      	b.n	80035b6 <HAL_RCC_ClockConfig+0x1b6>
  }
}
#endif /* FLASH_ACR_LATENCY */

/*-------------------------- PCLK1 Configuration ---------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8003550:	687b      	ldr	r3, [r7, #4]
 8003552:	681b      	ldr	r3, [r3, #0]
 8003554:	f003 0304 	and.w	r3, r3, #4
 8003558:	2b00      	cmp	r3, #0
 800355a:	d008      	beq.n	800356e <HAL_RCC_ClockConfig+0x16e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 800355c:	4b19      	ldr	r3, [pc, #100]	; (80035c4 <HAL_RCC_ClockConfig+0x1c4>)
 800355e:	685b      	ldr	r3, [r3, #4]
 8003560:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 8003564:	687b      	ldr	r3, [r7, #4]
 8003566:	68db      	ldr	r3, [r3, #12]
 8003568:	4916      	ldr	r1, [pc, #88]	; (80035c4 <HAL_RCC_ClockConfig+0x1c4>)
 800356a:	4313      	orrs	r3, r2
 800356c:	604b      	str	r3, [r1, #4]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800356e:	687b      	ldr	r3, [r7, #4]
 8003570:	681b      	ldr	r3, [r3, #0]
 8003572:	f003 0308 	and.w	r3, r3, #8
 8003576:	2b00      	cmp	r3, #0
 8003578:	d009      	beq.n	800358e <HAL_RCC_ClockConfig+0x18e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 800357a:	4b12      	ldr	r3, [pc, #72]	; (80035c4 <HAL_RCC_ClockConfig+0x1c4>)
 800357c:	685b      	ldr	r3, [r3, #4]
 800357e:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 8003582:	687b      	ldr	r3, [r7, #4]
 8003584:	691b      	ldr	r3, [r3, #16]
 8003586:	00db      	lsls	r3, r3, #3
 8003588:	490e      	ldr	r1, [pc, #56]	; (80035c4 <HAL_RCC_ClockConfig+0x1c4>)
 800358a:	4313      	orrs	r3, r2
 800358c:	604b      	str	r3, [r1, #4]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 800358e:	f000 f821 	bl	80035d4 <HAL_RCC_GetSysClockFreq>
 8003592:	4601      	mov	r1, r0
 8003594:	4b0b      	ldr	r3, [pc, #44]	; (80035c4 <HAL_RCC_ClockConfig+0x1c4>)
 8003596:	685b      	ldr	r3, [r3, #4]
 8003598:	091b      	lsrs	r3, r3, #4
 800359a:	f003 030f 	and.w	r3, r3, #15
 800359e:	4a0a      	ldr	r2, [pc, #40]	; (80035c8 <HAL_RCC_ClockConfig+0x1c8>)
 80035a0:	5cd3      	ldrb	r3, [r2, r3]
 80035a2:	fa21 f303 	lsr.w	r3, r1, r3
 80035a6:	4a09      	ldr	r2, [pc, #36]	; (80035cc <HAL_RCC_ClockConfig+0x1cc>)
 80035a8:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick(uwTickPrio);
 80035aa:	4b09      	ldr	r3, [pc, #36]	; (80035d0 <HAL_RCC_ClockConfig+0x1d0>)
 80035ac:	681b      	ldr	r3, [r3, #0]
 80035ae:	4618      	mov	r0, r3
 80035b0:	f7fd f8ac 	bl	800070c <HAL_InitTick>

  return HAL_OK;
 80035b4:	2300      	movs	r3, #0
}
 80035b6:	4618      	mov	r0, r3
 80035b8:	3710      	adds	r7, #16
 80035ba:	46bd      	mov	sp, r7
 80035bc:	bd80      	pop	{r7, pc}
 80035be:	bf00      	nop
 80035c0:	40022000 	.word	0x40022000
 80035c4:	40021000 	.word	0x40021000
 80035c8:	08008244 	.word	0x08008244
 80035cc:	20000000 	.word	0x20000000
 80035d0:	20000004 	.word	0x20000004

080035d4 <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 80035d4:	b490      	push	{r4, r7}
 80035d6:	b08a      	sub	sp, #40	; 0x28
 80035d8:	af00      	add	r7, sp, #0
#if defined(RCC_CFGR2_PREDIV1SRC)
  const uint8_t aPLLMULFactorTable[14] = {0, 0, 4, 5, 6, 7, 8, 9, 0, 0, 0, 0, 0, 13};
  const uint8_t aPredivFactorTable[16] = {1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16};
#else
  const uint8_t aPLLMULFactorTable[16] = {2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 16};
 80035da:	4b2a      	ldr	r3, [pc, #168]	; (8003684 <HAL_RCC_GetSysClockFreq+0xb0>)
 80035dc:	1d3c      	adds	r4, r7, #4
 80035de:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 80035e0:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
#if defined(RCC_CFGR2_PREDIV1)
  const uint8_t aPredivFactorTable[16] = {1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16};
#else
  const uint8_t aPredivFactorTable[2] = {1, 2};
 80035e4:	4b28      	ldr	r3, [pc, #160]	; (8003688 <HAL_RCC_GetSysClockFreq+0xb4>)
 80035e6:	881b      	ldrh	r3, [r3, #0]
 80035e8:	803b      	strh	r3, [r7, #0]
#endif /*RCC_CFGR2_PREDIV1*/

#endif
  uint32_t tmpreg = 0U, prediv = 0U, pllclk = 0U, pllmul = 0U;
 80035ea:	2300      	movs	r3, #0
 80035ec:	61fb      	str	r3, [r7, #28]
 80035ee:	2300      	movs	r3, #0
 80035f0:	61bb      	str	r3, [r7, #24]
 80035f2:	2300      	movs	r3, #0
 80035f4:	627b      	str	r3, [r7, #36]	; 0x24
 80035f6:	2300      	movs	r3, #0
 80035f8:	617b      	str	r3, [r7, #20]
  uint32_t sysclockfreq = 0U;
 80035fa:	2300      	movs	r3, #0
 80035fc:	623b      	str	r3, [r7, #32]
#if defined(RCC_CFGR2_PREDIV1SRC)
  uint32_t prediv2 = 0U, pll2mul = 0U;
#endif /*RCC_CFGR2_PREDIV1SRC*/

  tmpreg = RCC->CFGR;
 80035fe:	4b23      	ldr	r3, [pc, #140]	; (800368c <HAL_RCC_GetSysClockFreq+0xb8>)
 8003600:	685b      	ldr	r3, [r3, #4]
 8003602:	61fb      	str	r3, [r7, #28]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 8003604:	69fb      	ldr	r3, [r7, #28]
 8003606:	f003 030c 	and.w	r3, r3, #12
 800360a:	2b04      	cmp	r3, #4
 800360c:	d002      	beq.n	8003614 <HAL_RCC_GetSysClockFreq+0x40>
 800360e:	2b08      	cmp	r3, #8
 8003610:	d003      	beq.n	800361a <HAL_RCC_GetSysClockFreq+0x46>
 8003612:	e02d      	b.n	8003670 <HAL_RCC_GetSysClockFreq+0x9c>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 8003614:	4b1e      	ldr	r3, [pc, #120]	; (8003690 <HAL_RCC_GetSysClockFreq+0xbc>)
 8003616:	623b      	str	r3, [r7, #32]
      break;
 8003618:	e02d      	b.n	8003676 <HAL_RCC_GetSysClockFreq+0xa2>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMULL) >> RCC_CFGR_PLLMULL_Pos];
 800361a:	69fb      	ldr	r3, [r7, #28]
 800361c:	0c9b      	lsrs	r3, r3, #18
 800361e:	f003 030f 	and.w	r3, r3, #15
 8003622:	f107 0228 	add.w	r2, r7, #40	; 0x28
 8003626:	4413      	add	r3, r2
 8003628:	f813 3c24 	ldrb.w	r3, [r3, #-36]
 800362c:	617b      	str	r3, [r7, #20]
      if ((tmpreg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI_DIV2)
 800362e:	69fb      	ldr	r3, [r7, #28]
 8003630:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8003634:	2b00      	cmp	r3, #0
 8003636:	d013      	beq.n	8003660 <HAL_RCC_GetSysClockFreq+0x8c>
      {
#if defined(RCC_CFGR2_PREDIV1)
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR2 & RCC_CFGR2_PREDIV1) >> RCC_CFGR2_PREDIV1_Pos];
#else
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR & RCC_CFGR_PLLXTPRE) >> RCC_CFGR_PLLXTPRE_Pos];
 8003638:	4b14      	ldr	r3, [pc, #80]	; (800368c <HAL_RCC_GetSysClockFreq+0xb8>)
 800363a:	685b      	ldr	r3, [r3, #4]
 800363c:	0c5b      	lsrs	r3, r3, #17
 800363e:	f003 0301 	and.w	r3, r3, #1
 8003642:	f107 0228 	add.w	r2, r7, #40	; 0x28
 8003646:	4413      	add	r3, r2
 8003648:	f813 3c28 	ldrb.w	r3, [r3, #-40]
 800364c:	61bb      	str	r3, [r7, #24]
        {
          pllclk = pllclk / 2;
        }
#else
        /* HSE used as PLL clock source : PLLCLK = HSE/PREDIV1 * PLLMUL */
        pllclk = (uint32_t)((HSE_VALUE  * pllmul) / prediv);
 800364e:	697b      	ldr	r3, [r7, #20]
 8003650:	4a0f      	ldr	r2, [pc, #60]	; (8003690 <HAL_RCC_GetSysClockFreq+0xbc>)
 8003652:	fb02 f203 	mul.w	r2, r2, r3
 8003656:	69bb      	ldr	r3, [r7, #24]
 8003658:	fbb2 f3f3 	udiv	r3, r2, r3
 800365c:	627b      	str	r3, [r7, #36]	; 0x24
 800365e:	e004      	b.n	800366a <HAL_RCC_GetSysClockFreq+0x96>
#endif /*RCC_CFGR2_PREDIV1SRC*/
      }
      else
      {
        /* HSI used as PLL clock source : PLLCLK = HSI/2 * PLLMUL */
        pllclk = (uint32_t)((HSI_VALUE >> 1) * pllmul);
 8003660:	697b      	ldr	r3, [r7, #20]
 8003662:	4a0c      	ldr	r2, [pc, #48]	; (8003694 <HAL_RCC_GetSysClockFreq+0xc0>)
 8003664:	fb02 f303 	mul.w	r3, r2, r3
 8003668:	627b      	str	r3, [r7, #36]	; 0x24
      }
      sysclockfreq = pllclk;
 800366a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800366c:	623b      	str	r3, [r7, #32]
      break;
 800366e:	e002      	b.n	8003676 <HAL_RCC_GetSysClockFreq+0xa2>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    default: /* HSI used as system clock */
    {
      sysclockfreq = HSI_VALUE;
 8003670:	4b07      	ldr	r3, [pc, #28]	; (8003690 <HAL_RCC_GetSysClockFreq+0xbc>)
 8003672:	623b      	str	r3, [r7, #32]
      break;
 8003674:	bf00      	nop
    }
  }
  return sysclockfreq;
 8003676:	6a3b      	ldr	r3, [r7, #32]
}
 8003678:	4618      	mov	r0, r3
 800367a:	3728      	adds	r7, #40	; 0x28
 800367c:	46bd      	mov	sp, r7
 800367e:	bc90      	pop	{r4, r7}
 8003680:	4770      	bx	lr
 8003682:	bf00      	nop
 8003684:	080081e8 	.word	0x080081e8
 8003688:	080081f8 	.word	0x080081f8
 800368c:	40021000 	.word	0x40021000
 8003690:	007a1200 	.word	0x007a1200
 8003694:	003d0900 	.word	0x003d0900

08003698 <RCC_Delay>:
  * @brief  This function provides delay (in milliseconds) based on CPU cycles method.
  * @param  mdelay: specifies the delay time length, in milliseconds.
  * @retval None
  */
static void RCC_Delay(uint32_t mdelay)
{
 8003698:	b480      	push	{r7}
 800369a:	b085      	sub	sp, #20
 800369c:	af00      	add	r7, sp, #0
 800369e:	6078      	str	r0, [r7, #4]
  __IO uint32_t Delay = mdelay * (SystemCoreClock / 8U / 1000U);
 80036a0:	4b0a      	ldr	r3, [pc, #40]	; (80036cc <RCC_Delay+0x34>)
 80036a2:	681b      	ldr	r3, [r3, #0]
 80036a4:	4a0a      	ldr	r2, [pc, #40]	; (80036d0 <RCC_Delay+0x38>)
 80036a6:	fba2 2303 	umull	r2, r3, r2, r3
 80036aa:	0a5b      	lsrs	r3, r3, #9
 80036ac:	687a      	ldr	r2, [r7, #4]
 80036ae:	fb02 f303 	mul.w	r3, r2, r3
 80036b2:	60fb      	str	r3, [r7, #12]
  do
  {
    __NOP();
 80036b4:	bf00      	nop
  }
  while (Delay --);
 80036b6:	68fb      	ldr	r3, [r7, #12]
 80036b8:	1e5a      	subs	r2, r3, #1
 80036ba:	60fa      	str	r2, [r7, #12]
 80036bc:	2b00      	cmp	r3, #0
 80036be:	d1f9      	bne.n	80036b4 <RCC_Delay+0x1c>
}
 80036c0:	bf00      	nop
 80036c2:	3714      	adds	r7, #20
 80036c4:	46bd      	mov	sp, r7
 80036c6:	bc80      	pop	{r7}
 80036c8:	4770      	bx	lr
 80036ca:	bf00      	nop
 80036cc:	20000000 	.word	0x20000000
 80036d0:	10624dd3 	.word	0x10624dd3

080036d4 <HAL_RCCEx_PeriphCLKConfig>:
  *         manually disable it.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 80036d4:	b580      	push	{r7, lr}
 80036d6:	b086      	sub	sp, #24
 80036d8:	af00      	add	r7, sp, #0
 80036da:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U, temp_reg = 0U;
 80036dc:	2300      	movs	r3, #0
 80036de:	613b      	str	r3, [r7, #16]
 80036e0:	2300      	movs	r3, #0
 80036e2:	60fb      	str	r3, [r7, #12]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*------------------------------- RTC/LCD Configuration ------------------------*/
  if ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC))
 80036e4:	687b      	ldr	r3, [r7, #4]
 80036e6:	681b      	ldr	r3, [r3, #0]
 80036e8:	f003 0301 	and.w	r3, r3, #1
 80036ec:	2b00      	cmp	r3, #0
 80036ee:	d07d      	beq.n	80037ec <HAL_RCCEx_PeriphCLKConfig+0x118>
  {
    /* check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    FlagStatus       pwrclkchanged = RESET;
 80036f0:	2300      	movs	r3, #0
 80036f2:	75fb      	strb	r3, [r7, #23]

    /* As soon as function is called to change RTC clock source, activation of the
       power domain is done. */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 80036f4:	4b4f      	ldr	r3, [pc, #316]	; (8003834 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 80036f6:	69db      	ldr	r3, [r3, #28]
 80036f8:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80036fc:	2b00      	cmp	r3, #0
 80036fe:	d10d      	bne.n	800371c <HAL_RCCEx_PeriphCLKConfig+0x48>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8003700:	4b4c      	ldr	r3, [pc, #304]	; (8003834 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8003702:	69db      	ldr	r3, [r3, #28]
 8003704:	4a4b      	ldr	r2, [pc, #300]	; (8003834 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8003706:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800370a:	61d3      	str	r3, [r2, #28]
 800370c:	4b49      	ldr	r3, [pc, #292]	; (8003834 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 800370e:	69db      	ldr	r3, [r3, #28]
 8003710:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003714:	60bb      	str	r3, [r7, #8]
 8003716:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8003718:	2301      	movs	r3, #1
 800371a:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800371c:	4b46      	ldr	r3, [pc, #280]	; (8003838 <HAL_RCCEx_PeriphCLKConfig+0x164>)
 800371e:	681b      	ldr	r3, [r3, #0]
 8003720:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003724:	2b00      	cmp	r3, #0
 8003726:	d118      	bne.n	800375a <HAL_RCCEx_PeriphCLKConfig+0x86>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8003728:	4b43      	ldr	r3, [pc, #268]	; (8003838 <HAL_RCCEx_PeriphCLKConfig+0x164>)
 800372a:	681b      	ldr	r3, [r3, #0]
 800372c:	4a42      	ldr	r2, [pc, #264]	; (8003838 <HAL_RCCEx_PeriphCLKConfig+0x164>)
 800372e:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8003732:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8003734:	f7fd f82c 	bl	8000790 <HAL_GetTick>
 8003738:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800373a:	e008      	b.n	800374e <HAL_RCCEx_PeriphCLKConfig+0x7a>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800373c:	f7fd f828 	bl	8000790 <HAL_GetTick>
 8003740:	4602      	mov	r2, r0
 8003742:	693b      	ldr	r3, [r7, #16]
 8003744:	1ad3      	subs	r3, r2, r3
 8003746:	2b64      	cmp	r3, #100	; 0x64
 8003748:	d901      	bls.n	800374e <HAL_RCCEx_PeriphCLKConfig+0x7a>
        {
          return HAL_TIMEOUT;
 800374a:	2303      	movs	r3, #3
 800374c:	e06d      	b.n	800382a <HAL_RCCEx_PeriphCLKConfig+0x156>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800374e:	4b3a      	ldr	r3, [pc, #232]	; (8003838 <HAL_RCCEx_PeriphCLKConfig+0x164>)
 8003750:	681b      	ldr	r3, [r3, #0]
 8003752:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003756:	2b00      	cmp	r3, #0
 8003758:	d0f0      	beq.n	800373c <HAL_RCCEx_PeriphCLKConfig+0x68>
        }
      }
    }

    /* Reset the Backup domain only if the RTC Clock source selection is modified from reset value */
    temp_reg = (RCC->BDCR & RCC_BDCR_RTCSEL);
 800375a:	4b36      	ldr	r3, [pc, #216]	; (8003834 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 800375c:	6a1b      	ldr	r3, [r3, #32]
 800375e:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8003762:	60fb      	str	r3, [r7, #12]
    if ((temp_reg != 0x00000000U) && (temp_reg != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 8003764:	68fb      	ldr	r3, [r7, #12]
 8003766:	2b00      	cmp	r3, #0
 8003768:	d02e      	beq.n	80037c8 <HAL_RCCEx_PeriphCLKConfig+0xf4>
 800376a:	687b      	ldr	r3, [r7, #4]
 800376c:	685b      	ldr	r3, [r3, #4]
 800376e:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8003772:	68fa      	ldr	r2, [r7, #12]
 8003774:	429a      	cmp	r2, r3
 8003776:	d027      	beq.n	80037c8 <HAL_RCCEx_PeriphCLKConfig+0xf4>
    {
      /* Store the content of BDCR register before the reset of Backup Domain */
      temp_reg = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 8003778:	4b2e      	ldr	r3, [pc, #184]	; (8003834 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 800377a:	6a1b      	ldr	r3, [r3, #32]
 800377c:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8003780:	60fb      	str	r3, [r7, #12]
      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 8003782:	4b2e      	ldr	r3, [pc, #184]	; (800383c <HAL_RCCEx_PeriphCLKConfig+0x168>)
 8003784:	2201      	movs	r2, #1
 8003786:	601a      	str	r2, [r3, #0]
      __HAL_RCC_BACKUPRESET_RELEASE();
 8003788:	4b2c      	ldr	r3, [pc, #176]	; (800383c <HAL_RCCEx_PeriphCLKConfig+0x168>)
 800378a:	2200      	movs	r2, #0
 800378c:	601a      	str	r2, [r3, #0]
      /* Restore the Content of BDCR register */
      RCC->BDCR = temp_reg;
 800378e:	4a29      	ldr	r2, [pc, #164]	; (8003834 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8003790:	68fb      	ldr	r3, [r7, #12]
 8003792:	6213      	str	r3, [r2, #32]

      /* Wait for LSERDY if LSE was enabled */
      if (HAL_IS_BIT_SET(temp_reg, RCC_BDCR_LSEON))
 8003794:	68fb      	ldr	r3, [r7, #12]
 8003796:	f003 0301 	and.w	r3, r3, #1
 800379a:	2b00      	cmp	r3, #0
 800379c:	d014      	beq.n	80037c8 <HAL_RCCEx_PeriphCLKConfig+0xf4>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800379e:	f7fc fff7 	bl	8000790 <HAL_GetTick>
 80037a2:	6138      	str	r0, [r7, #16]

        /* Wait till LSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80037a4:	e00a      	b.n	80037bc <HAL_RCCEx_PeriphCLKConfig+0xe8>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80037a6:	f7fc fff3 	bl	8000790 <HAL_GetTick>
 80037aa:	4602      	mov	r2, r0
 80037ac:	693b      	ldr	r3, [r7, #16]
 80037ae:	1ad3      	subs	r3, r2, r3
 80037b0:	f241 3288 	movw	r2, #5000	; 0x1388
 80037b4:	4293      	cmp	r3, r2
 80037b6:	d901      	bls.n	80037bc <HAL_RCCEx_PeriphCLKConfig+0xe8>
          {
            return HAL_TIMEOUT;
 80037b8:	2303      	movs	r3, #3
 80037ba:	e036      	b.n	800382a <HAL_RCCEx_PeriphCLKConfig+0x156>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80037bc:	4b1d      	ldr	r3, [pc, #116]	; (8003834 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 80037be:	6a1b      	ldr	r3, [r3, #32]
 80037c0:	f003 0302 	and.w	r3, r3, #2
 80037c4:	2b00      	cmp	r3, #0
 80037c6:	d0ee      	beq.n	80037a6 <HAL_RCCEx_PeriphCLKConfig+0xd2>
          }
        }
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 80037c8:	4b1a      	ldr	r3, [pc, #104]	; (8003834 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 80037ca:	6a1b      	ldr	r3, [r3, #32]
 80037cc:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 80037d0:	687b      	ldr	r3, [r7, #4]
 80037d2:	685b      	ldr	r3, [r3, #4]
 80037d4:	4917      	ldr	r1, [pc, #92]	; (8003834 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 80037d6:	4313      	orrs	r3, r2
 80037d8:	620b      	str	r3, [r1, #32]

    /* Require to disable power clock if necessary */
    if (pwrclkchanged == SET)
 80037da:	7dfb      	ldrb	r3, [r7, #23]
 80037dc:	2b01      	cmp	r3, #1
 80037de:	d105      	bne.n	80037ec <HAL_RCCEx_PeriphCLKConfig+0x118>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80037e0:	4b14      	ldr	r3, [pc, #80]	; (8003834 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 80037e2:	69db      	ldr	r3, [r3, #28]
 80037e4:	4a13      	ldr	r2, [pc, #76]	; (8003834 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 80037e6:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 80037ea:	61d3      	str	r3, [r2, #28]
    }
  }

  /*------------------------------ ADC clock Configuration ------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 80037ec:	687b      	ldr	r3, [r7, #4]
 80037ee:	681b      	ldr	r3, [r3, #0]
 80037f0:	f003 0302 	and.w	r3, r3, #2
 80037f4:	2b00      	cmp	r3, #0
 80037f6:	d008      	beq.n	800380a <HAL_RCCEx_PeriphCLKConfig+0x136>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADCPLLCLK_DIV(PeriphClkInit->AdcClockSelection));

    /* Configure the ADC clock source */
    __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 80037f8:	4b0e      	ldr	r3, [pc, #56]	; (8003834 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 80037fa:	685b      	ldr	r3, [r3, #4]
 80037fc:	f423 4240 	bic.w	r2, r3, #49152	; 0xc000
 8003800:	687b      	ldr	r3, [r7, #4]
 8003802:	689b      	ldr	r3, [r3, #8]
 8003804:	490b      	ldr	r1, [pc, #44]	; (8003834 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8003806:	4313      	orrs	r3, r2
 8003808:	604b      	str	r3, [r1, #4]

#if defined(STM32F102x6) || defined(STM32F102xB) || defined(STM32F103x6)\
 || defined(STM32F103xB) || defined(STM32F103xE) || defined(STM32F103xG)\
 || defined(STM32F105xC) || defined(STM32F107xC)
  /*------------------------------ USB clock Configuration ------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == RCC_PERIPHCLK_USB)
 800380a:	687b      	ldr	r3, [r7, #4]
 800380c:	681b      	ldr	r3, [r3, #0]
 800380e:	f003 0310 	and.w	r3, r3, #16
 8003812:	2b00      	cmp	r3, #0
 8003814:	d008      	beq.n	8003828 <HAL_RCCEx_PeriphCLKConfig+0x154>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USBPLLCLK_DIV(PeriphClkInit->UsbClockSelection));

    /* Configure the USB clock source */
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 8003816:	4b07      	ldr	r3, [pc, #28]	; (8003834 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8003818:	685b      	ldr	r3, [r3, #4]
 800381a:	f423 0280 	bic.w	r2, r3, #4194304	; 0x400000
 800381e:	687b      	ldr	r3, [r7, #4]
 8003820:	68db      	ldr	r3, [r3, #12]
 8003822:	4904      	ldr	r1, [pc, #16]	; (8003834 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8003824:	4313      	orrs	r3, r2
 8003826:	604b      	str	r3, [r1, #4]
  }
#endif /* STM32F102x6 || STM32F102xB || STM32F103x6 || STM32F103xB || STM32F103xE || STM32F103xG || STM32F105xC || STM32F107xC */

  return HAL_OK;
 8003828:	2300      	movs	r3, #0
}
 800382a:	4618      	mov	r0, r3
 800382c:	3718      	adds	r7, #24
 800382e:	46bd      	mov	sp, r7
 8003830:	bd80      	pop	{r7, pc}
 8003832:	bf00      	nop
 8003834:	40021000 	.word	0x40021000
 8003838:	40007000 	.word	0x40007000
 800383c:	42420440 	.word	0x42420440

08003840 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8003840:	b580      	push	{r7, lr}
 8003842:	b082      	sub	sp, #8
 8003844:	af00      	add	r7, sp, #0
 8003846:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8003848:	687b      	ldr	r3, [r7, #4]
 800384a:	2b00      	cmp	r3, #0
 800384c:	d101      	bne.n	8003852 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 800384e:	2301      	movs	r3, #1
 8003850:	e041      	b.n	80038d6 <HAL_TIM_Base_Init+0x96>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8003852:	687b      	ldr	r3, [r7, #4]
 8003854:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8003858:	b2db      	uxtb	r3, r3
 800385a:	2b00      	cmp	r3, #0
 800385c:	d106      	bne.n	800386c <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 800385e:	687b      	ldr	r3, [r7, #4]
 8003860:	2200      	movs	r2, #0
 8003862:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8003866:	6878      	ldr	r0, [r7, #4]
 8003868:	f7fc fea4 	bl	80005b4 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800386c:	687b      	ldr	r3, [r7, #4]
 800386e:	2202      	movs	r2, #2
 8003870:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8003874:	687b      	ldr	r3, [r7, #4]
 8003876:	681a      	ldr	r2, [r3, #0]
 8003878:	687b      	ldr	r3, [r7, #4]
 800387a:	3304      	adds	r3, #4
 800387c:	4619      	mov	r1, r3
 800387e:	4610      	mov	r0, r2
 8003880:	f000 fa64 	bl	8003d4c <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8003884:	687b      	ldr	r3, [r7, #4]
 8003886:	2201      	movs	r2, #1
 8003888:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800388c:	687b      	ldr	r3, [r7, #4]
 800388e:	2201      	movs	r2, #1
 8003890:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8003894:	687b      	ldr	r3, [r7, #4]
 8003896:	2201      	movs	r2, #1
 8003898:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 800389c:	687b      	ldr	r3, [r7, #4]
 800389e:	2201      	movs	r2, #1
 80038a0:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 80038a4:	687b      	ldr	r3, [r7, #4]
 80038a6:	2201      	movs	r2, #1
 80038a8:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80038ac:	687b      	ldr	r3, [r7, #4]
 80038ae:	2201      	movs	r2, #1
 80038b0:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 80038b4:	687b      	ldr	r3, [r7, #4]
 80038b6:	2201      	movs	r2, #1
 80038b8:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 80038bc:	687b      	ldr	r3, [r7, #4]
 80038be:	2201      	movs	r2, #1
 80038c0:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 80038c4:	687b      	ldr	r3, [r7, #4]
 80038c6:	2201      	movs	r2, #1
 80038c8:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 80038cc:	687b      	ldr	r3, [r7, #4]
 80038ce:	2201      	movs	r2, #1
 80038d0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 80038d4:	2300      	movs	r3, #0
}
 80038d6:	4618      	mov	r0, r3
 80038d8:	3708      	adds	r7, #8
 80038da:	46bd      	mov	sp, r7
 80038dc:	bd80      	pop	{r7, pc}
	...

080038e0 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 80038e0:	b480      	push	{r7}
 80038e2:	b085      	sub	sp, #20
 80038e4:	af00      	add	r7, sp, #0
 80038e6:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 80038e8:	687b      	ldr	r3, [r7, #4]
 80038ea:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80038ee:	b2db      	uxtb	r3, r3
 80038f0:	2b01      	cmp	r3, #1
 80038f2:	d001      	beq.n	80038f8 <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 80038f4:	2301      	movs	r3, #1
 80038f6:	e03a      	b.n	800396e <HAL_TIM_Base_Start_IT+0x8e>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80038f8:	687b      	ldr	r3, [r7, #4]
 80038fa:	2202      	movs	r2, #2
 80038fc:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8003900:	687b      	ldr	r3, [r7, #4]
 8003902:	681b      	ldr	r3, [r3, #0]
 8003904:	68da      	ldr	r2, [r3, #12]
 8003906:	687b      	ldr	r3, [r7, #4]
 8003908:	681b      	ldr	r3, [r3, #0]
 800390a:	f042 0201 	orr.w	r2, r2, #1
 800390e:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8003910:	687b      	ldr	r3, [r7, #4]
 8003912:	681b      	ldr	r3, [r3, #0]
 8003914:	4a18      	ldr	r2, [pc, #96]	; (8003978 <HAL_TIM_Base_Start_IT+0x98>)
 8003916:	4293      	cmp	r3, r2
 8003918:	d00e      	beq.n	8003938 <HAL_TIM_Base_Start_IT+0x58>
 800391a:	687b      	ldr	r3, [r7, #4]
 800391c:	681b      	ldr	r3, [r3, #0]
 800391e:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8003922:	d009      	beq.n	8003938 <HAL_TIM_Base_Start_IT+0x58>
 8003924:	687b      	ldr	r3, [r7, #4]
 8003926:	681b      	ldr	r3, [r3, #0]
 8003928:	4a14      	ldr	r2, [pc, #80]	; (800397c <HAL_TIM_Base_Start_IT+0x9c>)
 800392a:	4293      	cmp	r3, r2
 800392c:	d004      	beq.n	8003938 <HAL_TIM_Base_Start_IT+0x58>
 800392e:	687b      	ldr	r3, [r7, #4]
 8003930:	681b      	ldr	r3, [r3, #0]
 8003932:	4a13      	ldr	r2, [pc, #76]	; (8003980 <HAL_TIM_Base_Start_IT+0xa0>)
 8003934:	4293      	cmp	r3, r2
 8003936:	d111      	bne.n	800395c <HAL_TIM_Base_Start_IT+0x7c>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8003938:	687b      	ldr	r3, [r7, #4]
 800393a:	681b      	ldr	r3, [r3, #0]
 800393c:	689b      	ldr	r3, [r3, #8]
 800393e:	f003 0307 	and.w	r3, r3, #7
 8003942:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8003944:	68fb      	ldr	r3, [r7, #12]
 8003946:	2b06      	cmp	r3, #6
 8003948:	d010      	beq.n	800396c <HAL_TIM_Base_Start_IT+0x8c>
    {
      __HAL_TIM_ENABLE(htim);
 800394a:	687b      	ldr	r3, [r7, #4]
 800394c:	681b      	ldr	r3, [r3, #0]
 800394e:	681a      	ldr	r2, [r3, #0]
 8003950:	687b      	ldr	r3, [r7, #4]
 8003952:	681b      	ldr	r3, [r3, #0]
 8003954:	f042 0201 	orr.w	r2, r2, #1
 8003958:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800395a:	e007      	b.n	800396c <HAL_TIM_Base_Start_IT+0x8c>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 800395c:	687b      	ldr	r3, [r7, #4]
 800395e:	681b      	ldr	r3, [r3, #0]
 8003960:	681a      	ldr	r2, [r3, #0]
 8003962:	687b      	ldr	r3, [r7, #4]
 8003964:	681b      	ldr	r3, [r3, #0]
 8003966:	f042 0201 	orr.w	r2, r2, #1
 800396a:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 800396c:	2300      	movs	r3, #0
}
 800396e:	4618      	mov	r0, r3
 8003970:	3714      	adds	r7, #20
 8003972:	46bd      	mov	sp, r7
 8003974:	bc80      	pop	{r7}
 8003976:	4770      	bx	lr
 8003978:	40012c00 	.word	0x40012c00
 800397c:	40000400 	.word	0x40000400
 8003980:	40000800 	.word	0x40000800

08003984 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8003984:	b580      	push	{r7, lr}
 8003986:	b082      	sub	sp, #8
 8003988:	af00      	add	r7, sp, #0
 800398a:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 800398c:	687b      	ldr	r3, [r7, #4]
 800398e:	681b      	ldr	r3, [r3, #0]
 8003990:	691b      	ldr	r3, [r3, #16]
 8003992:	f003 0302 	and.w	r3, r3, #2
 8003996:	2b02      	cmp	r3, #2
 8003998:	d122      	bne.n	80039e0 <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 800399a:	687b      	ldr	r3, [r7, #4]
 800399c:	681b      	ldr	r3, [r3, #0]
 800399e:	68db      	ldr	r3, [r3, #12]
 80039a0:	f003 0302 	and.w	r3, r3, #2
 80039a4:	2b02      	cmp	r3, #2
 80039a6:	d11b      	bne.n	80039e0 <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 80039a8:	687b      	ldr	r3, [r7, #4]
 80039aa:	681b      	ldr	r3, [r3, #0]
 80039ac:	f06f 0202 	mvn.w	r2, #2
 80039b0:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 80039b2:	687b      	ldr	r3, [r7, #4]
 80039b4:	2201      	movs	r2, #1
 80039b6:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 80039b8:	687b      	ldr	r3, [r7, #4]
 80039ba:	681b      	ldr	r3, [r3, #0]
 80039bc:	699b      	ldr	r3, [r3, #24]
 80039be:	f003 0303 	and.w	r3, r3, #3
 80039c2:	2b00      	cmp	r3, #0
 80039c4:	d003      	beq.n	80039ce <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 80039c6:	6878      	ldr	r0, [r7, #4]
 80039c8:	f000 f9a4 	bl	8003d14 <HAL_TIM_IC_CaptureCallback>
 80039cc:	e005      	b.n	80039da <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 80039ce:	6878      	ldr	r0, [r7, #4]
 80039d0:	f000 f997 	bl	8003d02 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 80039d4:	6878      	ldr	r0, [r7, #4]
 80039d6:	f000 f9a6 	bl	8003d26 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80039da:	687b      	ldr	r3, [r7, #4]
 80039dc:	2200      	movs	r2, #0
 80039de:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 80039e0:	687b      	ldr	r3, [r7, #4]
 80039e2:	681b      	ldr	r3, [r3, #0]
 80039e4:	691b      	ldr	r3, [r3, #16]
 80039e6:	f003 0304 	and.w	r3, r3, #4
 80039ea:	2b04      	cmp	r3, #4
 80039ec:	d122      	bne.n	8003a34 <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 80039ee:	687b      	ldr	r3, [r7, #4]
 80039f0:	681b      	ldr	r3, [r3, #0]
 80039f2:	68db      	ldr	r3, [r3, #12]
 80039f4:	f003 0304 	and.w	r3, r3, #4
 80039f8:	2b04      	cmp	r3, #4
 80039fa:	d11b      	bne.n	8003a34 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 80039fc:	687b      	ldr	r3, [r7, #4]
 80039fe:	681b      	ldr	r3, [r3, #0]
 8003a00:	f06f 0204 	mvn.w	r2, #4
 8003a04:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8003a06:	687b      	ldr	r3, [r7, #4]
 8003a08:	2202      	movs	r2, #2
 8003a0a:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8003a0c:	687b      	ldr	r3, [r7, #4]
 8003a0e:	681b      	ldr	r3, [r3, #0]
 8003a10:	699b      	ldr	r3, [r3, #24]
 8003a12:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8003a16:	2b00      	cmp	r3, #0
 8003a18:	d003      	beq.n	8003a22 <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8003a1a:	6878      	ldr	r0, [r7, #4]
 8003a1c:	f000 f97a 	bl	8003d14 <HAL_TIM_IC_CaptureCallback>
 8003a20:	e005      	b.n	8003a2e <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8003a22:	6878      	ldr	r0, [r7, #4]
 8003a24:	f000 f96d 	bl	8003d02 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8003a28:	6878      	ldr	r0, [r7, #4]
 8003a2a:	f000 f97c 	bl	8003d26 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8003a2e:	687b      	ldr	r3, [r7, #4]
 8003a30:	2200      	movs	r2, #0
 8003a32:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 8003a34:	687b      	ldr	r3, [r7, #4]
 8003a36:	681b      	ldr	r3, [r3, #0]
 8003a38:	691b      	ldr	r3, [r3, #16]
 8003a3a:	f003 0308 	and.w	r3, r3, #8
 8003a3e:	2b08      	cmp	r3, #8
 8003a40:	d122      	bne.n	8003a88 <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 8003a42:	687b      	ldr	r3, [r7, #4]
 8003a44:	681b      	ldr	r3, [r3, #0]
 8003a46:	68db      	ldr	r3, [r3, #12]
 8003a48:	f003 0308 	and.w	r3, r3, #8
 8003a4c:	2b08      	cmp	r3, #8
 8003a4e:	d11b      	bne.n	8003a88 <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 8003a50:	687b      	ldr	r3, [r7, #4]
 8003a52:	681b      	ldr	r3, [r3, #0]
 8003a54:	f06f 0208 	mvn.w	r2, #8
 8003a58:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8003a5a:	687b      	ldr	r3, [r7, #4]
 8003a5c:	2204      	movs	r2, #4
 8003a5e:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8003a60:	687b      	ldr	r3, [r7, #4]
 8003a62:	681b      	ldr	r3, [r3, #0]
 8003a64:	69db      	ldr	r3, [r3, #28]
 8003a66:	f003 0303 	and.w	r3, r3, #3
 8003a6a:	2b00      	cmp	r3, #0
 8003a6c:	d003      	beq.n	8003a76 <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8003a6e:	6878      	ldr	r0, [r7, #4]
 8003a70:	f000 f950 	bl	8003d14 <HAL_TIM_IC_CaptureCallback>
 8003a74:	e005      	b.n	8003a82 <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8003a76:	6878      	ldr	r0, [r7, #4]
 8003a78:	f000 f943 	bl	8003d02 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8003a7c:	6878      	ldr	r0, [r7, #4]
 8003a7e:	f000 f952 	bl	8003d26 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8003a82:	687b      	ldr	r3, [r7, #4]
 8003a84:	2200      	movs	r2, #0
 8003a86:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 8003a88:	687b      	ldr	r3, [r7, #4]
 8003a8a:	681b      	ldr	r3, [r3, #0]
 8003a8c:	691b      	ldr	r3, [r3, #16]
 8003a8e:	f003 0310 	and.w	r3, r3, #16
 8003a92:	2b10      	cmp	r3, #16
 8003a94:	d122      	bne.n	8003adc <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 8003a96:	687b      	ldr	r3, [r7, #4]
 8003a98:	681b      	ldr	r3, [r3, #0]
 8003a9a:	68db      	ldr	r3, [r3, #12]
 8003a9c:	f003 0310 	and.w	r3, r3, #16
 8003aa0:	2b10      	cmp	r3, #16
 8003aa2:	d11b      	bne.n	8003adc <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 8003aa4:	687b      	ldr	r3, [r7, #4]
 8003aa6:	681b      	ldr	r3, [r3, #0]
 8003aa8:	f06f 0210 	mvn.w	r2, #16
 8003aac:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8003aae:	687b      	ldr	r3, [r7, #4]
 8003ab0:	2208      	movs	r2, #8
 8003ab2:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8003ab4:	687b      	ldr	r3, [r7, #4]
 8003ab6:	681b      	ldr	r3, [r3, #0]
 8003ab8:	69db      	ldr	r3, [r3, #28]
 8003aba:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8003abe:	2b00      	cmp	r3, #0
 8003ac0:	d003      	beq.n	8003aca <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8003ac2:	6878      	ldr	r0, [r7, #4]
 8003ac4:	f000 f926 	bl	8003d14 <HAL_TIM_IC_CaptureCallback>
 8003ac8:	e005      	b.n	8003ad6 <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8003aca:	6878      	ldr	r0, [r7, #4]
 8003acc:	f000 f919 	bl	8003d02 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8003ad0:	6878      	ldr	r0, [r7, #4]
 8003ad2:	f000 f928 	bl	8003d26 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8003ad6:	687b      	ldr	r3, [r7, #4]
 8003ad8:	2200      	movs	r2, #0
 8003ada:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 8003adc:	687b      	ldr	r3, [r7, #4]
 8003ade:	681b      	ldr	r3, [r3, #0]
 8003ae0:	691b      	ldr	r3, [r3, #16]
 8003ae2:	f003 0301 	and.w	r3, r3, #1
 8003ae6:	2b01      	cmp	r3, #1
 8003ae8:	d10e      	bne.n	8003b08 <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 8003aea:	687b      	ldr	r3, [r7, #4]
 8003aec:	681b      	ldr	r3, [r3, #0]
 8003aee:	68db      	ldr	r3, [r3, #12]
 8003af0:	f003 0301 	and.w	r3, r3, #1
 8003af4:	2b01      	cmp	r3, #1
 8003af6:	d107      	bne.n	8003b08 <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 8003af8:	687b      	ldr	r3, [r7, #4]
 8003afa:	681b      	ldr	r3, [r3, #0]
 8003afc:	f06f 0201 	mvn.w	r2, #1
 8003b00:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 8003b02:	6878      	ldr	r0, [r7, #4]
 8003b04:	f7fc fb22 	bl	800014c <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 8003b08:	687b      	ldr	r3, [r7, #4]
 8003b0a:	681b      	ldr	r3, [r3, #0]
 8003b0c:	691b      	ldr	r3, [r3, #16]
 8003b0e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003b12:	2b80      	cmp	r3, #128	; 0x80
 8003b14:	d10e      	bne.n	8003b34 <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 8003b16:	687b      	ldr	r3, [r7, #4]
 8003b18:	681b      	ldr	r3, [r3, #0]
 8003b1a:	68db      	ldr	r3, [r3, #12]
 8003b1c:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003b20:	2b80      	cmp	r3, #128	; 0x80
 8003b22:	d107      	bne.n	8003b34 <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 8003b24:	687b      	ldr	r3, [r7, #4]
 8003b26:	681b      	ldr	r3, [r3, #0]
 8003b28:	f06f 0280 	mvn.w	r2, #128	; 0x80
 8003b2c:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 8003b2e:	6878      	ldr	r0, [r7, #4]
 8003b30:	f000 fa6b 	bl	800400a <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 8003b34:	687b      	ldr	r3, [r7, #4]
 8003b36:	681b      	ldr	r3, [r3, #0]
 8003b38:	691b      	ldr	r3, [r3, #16]
 8003b3a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003b3e:	2b40      	cmp	r3, #64	; 0x40
 8003b40:	d10e      	bne.n	8003b60 <HAL_TIM_IRQHandler+0x1dc>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 8003b42:	687b      	ldr	r3, [r7, #4]
 8003b44:	681b      	ldr	r3, [r3, #0]
 8003b46:	68db      	ldr	r3, [r3, #12]
 8003b48:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003b4c:	2b40      	cmp	r3, #64	; 0x40
 8003b4e:	d107      	bne.n	8003b60 <HAL_TIM_IRQHandler+0x1dc>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 8003b50:	687b      	ldr	r3, [r7, #4]
 8003b52:	681b      	ldr	r3, [r3, #0]
 8003b54:	f06f 0240 	mvn.w	r2, #64	; 0x40
 8003b58:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 8003b5a:	6878      	ldr	r0, [r7, #4]
 8003b5c:	f000 f8ec 	bl	8003d38 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 8003b60:	687b      	ldr	r3, [r7, #4]
 8003b62:	681b      	ldr	r3, [r3, #0]
 8003b64:	691b      	ldr	r3, [r3, #16]
 8003b66:	f003 0320 	and.w	r3, r3, #32
 8003b6a:	2b20      	cmp	r3, #32
 8003b6c:	d10e      	bne.n	8003b8c <HAL_TIM_IRQHandler+0x208>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 8003b6e:	687b      	ldr	r3, [r7, #4]
 8003b70:	681b      	ldr	r3, [r3, #0]
 8003b72:	68db      	ldr	r3, [r3, #12]
 8003b74:	f003 0320 	and.w	r3, r3, #32
 8003b78:	2b20      	cmp	r3, #32
 8003b7a:	d107      	bne.n	8003b8c <HAL_TIM_IRQHandler+0x208>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 8003b7c:	687b      	ldr	r3, [r7, #4]
 8003b7e:	681b      	ldr	r3, [r3, #0]
 8003b80:	f06f 0220 	mvn.w	r2, #32
 8003b84:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 8003b86:	6878      	ldr	r0, [r7, #4]
 8003b88:	f000 fa36 	bl	8003ff8 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8003b8c:	bf00      	nop
 8003b8e:	3708      	adds	r7, #8
 8003b90:	46bd      	mov	sp, r7
 8003b92:	bd80      	pop	{r7, pc}

08003b94 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 8003b94:	b580      	push	{r7, lr}
 8003b96:	b084      	sub	sp, #16
 8003b98:	af00      	add	r7, sp, #0
 8003b9a:	6078      	str	r0, [r7, #4]
 8003b9c:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 8003b9e:	687b      	ldr	r3, [r7, #4]
 8003ba0:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8003ba4:	2b01      	cmp	r3, #1
 8003ba6:	d101      	bne.n	8003bac <HAL_TIM_ConfigClockSource+0x18>
 8003ba8:	2302      	movs	r3, #2
 8003baa:	e0a6      	b.n	8003cfa <HAL_TIM_ConfigClockSource+0x166>
 8003bac:	687b      	ldr	r3, [r7, #4]
 8003bae:	2201      	movs	r2, #1
 8003bb0:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 8003bb4:	687b      	ldr	r3, [r7, #4]
 8003bb6:	2202      	movs	r2, #2
 8003bb8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 8003bbc:	687b      	ldr	r3, [r7, #4]
 8003bbe:	681b      	ldr	r3, [r3, #0]
 8003bc0:	689b      	ldr	r3, [r3, #8]
 8003bc2:	60fb      	str	r3, [r7, #12]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 8003bc4:	68fb      	ldr	r3, [r7, #12]
 8003bc6:	f023 0377 	bic.w	r3, r3, #119	; 0x77
 8003bca:	60fb      	str	r3, [r7, #12]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8003bcc:	68fb      	ldr	r3, [r7, #12]
 8003bce:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8003bd2:	60fb      	str	r3, [r7, #12]
  htim->Instance->SMCR = tmpsmcr;
 8003bd4:	687b      	ldr	r3, [r7, #4]
 8003bd6:	681b      	ldr	r3, [r3, #0]
 8003bd8:	68fa      	ldr	r2, [r7, #12]
 8003bda:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 8003bdc:	683b      	ldr	r3, [r7, #0]
 8003bde:	681b      	ldr	r3, [r3, #0]
 8003be0:	2b40      	cmp	r3, #64	; 0x40
 8003be2:	d067      	beq.n	8003cb4 <HAL_TIM_ConfigClockSource+0x120>
 8003be4:	2b40      	cmp	r3, #64	; 0x40
 8003be6:	d80b      	bhi.n	8003c00 <HAL_TIM_ConfigClockSource+0x6c>
 8003be8:	2b10      	cmp	r3, #16
 8003bea:	d073      	beq.n	8003cd4 <HAL_TIM_ConfigClockSource+0x140>
 8003bec:	2b10      	cmp	r3, #16
 8003bee:	d802      	bhi.n	8003bf6 <HAL_TIM_ConfigClockSource+0x62>
 8003bf0:	2b00      	cmp	r3, #0
 8003bf2:	d06f      	beq.n	8003cd4 <HAL_TIM_ConfigClockSource+0x140>
        TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
        break;
      }

    default:
      break;
 8003bf4:	e078      	b.n	8003ce8 <HAL_TIM_ConfigClockSource+0x154>
  switch (sClockSourceConfig->ClockSource)
 8003bf6:	2b20      	cmp	r3, #32
 8003bf8:	d06c      	beq.n	8003cd4 <HAL_TIM_ConfigClockSource+0x140>
 8003bfa:	2b30      	cmp	r3, #48	; 0x30
 8003bfc:	d06a      	beq.n	8003cd4 <HAL_TIM_ConfigClockSource+0x140>
      break;
 8003bfe:	e073      	b.n	8003ce8 <HAL_TIM_ConfigClockSource+0x154>
  switch (sClockSourceConfig->ClockSource)
 8003c00:	2b70      	cmp	r3, #112	; 0x70
 8003c02:	d00d      	beq.n	8003c20 <HAL_TIM_ConfigClockSource+0x8c>
 8003c04:	2b70      	cmp	r3, #112	; 0x70
 8003c06:	d804      	bhi.n	8003c12 <HAL_TIM_ConfigClockSource+0x7e>
 8003c08:	2b50      	cmp	r3, #80	; 0x50
 8003c0a:	d033      	beq.n	8003c74 <HAL_TIM_ConfigClockSource+0xe0>
 8003c0c:	2b60      	cmp	r3, #96	; 0x60
 8003c0e:	d041      	beq.n	8003c94 <HAL_TIM_ConfigClockSource+0x100>
      break;
 8003c10:	e06a      	b.n	8003ce8 <HAL_TIM_ConfigClockSource+0x154>
  switch (sClockSourceConfig->ClockSource)
 8003c12:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8003c16:	d066      	beq.n	8003ce6 <HAL_TIM_ConfigClockSource+0x152>
 8003c18:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8003c1c:	d017      	beq.n	8003c4e <HAL_TIM_ConfigClockSource+0xba>
      break;
 8003c1e:	e063      	b.n	8003ce8 <HAL_TIM_ConfigClockSource+0x154>
      TIM_ETR_SetConfig(htim->Instance,
 8003c20:	687b      	ldr	r3, [r7, #4]
 8003c22:	6818      	ldr	r0, [r3, #0]
 8003c24:	683b      	ldr	r3, [r7, #0]
 8003c26:	6899      	ldr	r1, [r3, #8]
 8003c28:	683b      	ldr	r3, [r7, #0]
 8003c2a:	685a      	ldr	r2, [r3, #4]
 8003c2c:	683b      	ldr	r3, [r7, #0]
 8003c2e:	68db      	ldr	r3, [r3, #12]
 8003c30:	f000 f965 	bl	8003efe <TIM_ETR_SetConfig>
      tmpsmcr = htim->Instance->SMCR;
 8003c34:	687b      	ldr	r3, [r7, #4]
 8003c36:	681b      	ldr	r3, [r3, #0]
 8003c38:	689b      	ldr	r3, [r3, #8]
 8003c3a:	60fb      	str	r3, [r7, #12]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 8003c3c:	68fb      	ldr	r3, [r7, #12]
 8003c3e:	f043 0377 	orr.w	r3, r3, #119	; 0x77
 8003c42:	60fb      	str	r3, [r7, #12]
      htim->Instance->SMCR = tmpsmcr;
 8003c44:	687b      	ldr	r3, [r7, #4]
 8003c46:	681b      	ldr	r3, [r3, #0]
 8003c48:	68fa      	ldr	r2, [r7, #12]
 8003c4a:	609a      	str	r2, [r3, #8]
      break;
 8003c4c:	e04c      	b.n	8003ce8 <HAL_TIM_ConfigClockSource+0x154>
      TIM_ETR_SetConfig(htim->Instance,
 8003c4e:	687b      	ldr	r3, [r7, #4]
 8003c50:	6818      	ldr	r0, [r3, #0]
 8003c52:	683b      	ldr	r3, [r7, #0]
 8003c54:	6899      	ldr	r1, [r3, #8]
 8003c56:	683b      	ldr	r3, [r7, #0]
 8003c58:	685a      	ldr	r2, [r3, #4]
 8003c5a:	683b      	ldr	r3, [r7, #0]
 8003c5c:	68db      	ldr	r3, [r3, #12]
 8003c5e:	f000 f94e 	bl	8003efe <TIM_ETR_SetConfig>
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 8003c62:	687b      	ldr	r3, [r7, #4]
 8003c64:	681b      	ldr	r3, [r3, #0]
 8003c66:	689a      	ldr	r2, [r3, #8]
 8003c68:	687b      	ldr	r3, [r7, #4]
 8003c6a:	681b      	ldr	r3, [r3, #0]
 8003c6c:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8003c70:	609a      	str	r2, [r3, #8]
      break;
 8003c72:	e039      	b.n	8003ce8 <HAL_TIM_ConfigClockSource+0x154>
      TIM_TI1_ConfigInputStage(htim->Instance,
 8003c74:	687b      	ldr	r3, [r7, #4]
 8003c76:	6818      	ldr	r0, [r3, #0]
 8003c78:	683b      	ldr	r3, [r7, #0]
 8003c7a:	6859      	ldr	r1, [r3, #4]
 8003c7c:	683b      	ldr	r3, [r7, #0]
 8003c7e:	68db      	ldr	r3, [r3, #12]
 8003c80:	461a      	mov	r2, r3
 8003c82:	f000 f8c5 	bl	8003e10 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 8003c86:	687b      	ldr	r3, [r7, #4]
 8003c88:	681b      	ldr	r3, [r3, #0]
 8003c8a:	2150      	movs	r1, #80	; 0x50
 8003c8c:	4618      	mov	r0, r3
 8003c8e:	f000 f91c 	bl	8003eca <TIM_ITRx_SetConfig>
      break;
 8003c92:	e029      	b.n	8003ce8 <HAL_TIM_ConfigClockSource+0x154>
      TIM_TI2_ConfigInputStage(htim->Instance,
 8003c94:	687b      	ldr	r3, [r7, #4]
 8003c96:	6818      	ldr	r0, [r3, #0]
 8003c98:	683b      	ldr	r3, [r7, #0]
 8003c9a:	6859      	ldr	r1, [r3, #4]
 8003c9c:	683b      	ldr	r3, [r7, #0]
 8003c9e:	68db      	ldr	r3, [r3, #12]
 8003ca0:	461a      	mov	r2, r3
 8003ca2:	f000 f8e3 	bl	8003e6c <TIM_TI2_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 8003ca6:	687b      	ldr	r3, [r7, #4]
 8003ca8:	681b      	ldr	r3, [r3, #0]
 8003caa:	2160      	movs	r1, #96	; 0x60
 8003cac:	4618      	mov	r0, r3
 8003cae:	f000 f90c 	bl	8003eca <TIM_ITRx_SetConfig>
      break;
 8003cb2:	e019      	b.n	8003ce8 <HAL_TIM_ConfigClockSource+0x154>
      TIM_TI1_ConfigInputStage(htim->Instance,
 8003cb4:	687b      	ldr	r3, [r7, #4]
 8003cb6:	6818      	ldr	r0, [r3, #0]
 8003cb8:	683b      	ldr	r3, [r7, #0]
 8003cba:	6859      	ldr	r1, [r3, #4]
 8003cbc:	683b      	ldr	r3, [r7, #0]
 8003cbe:	68db      	ldr	r3, [r3, #12]
 8003cc0:	461a      	mov	r2, r3
 8003cc2:	f000 f8a5 	bl	8003e10 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 8003cc6:	687b      	ldr	r3, [r7, #4]
 8003cc8:	681b      	ldr	r3, [r3, #0]
 8003cca:	2140      	movs	r1, #64	; 0x40
 8003ccc:	4618      	mov	r0, r3
 8003cce:	f000 f8fc 	bl	8003eca <TIM_ITRx_SetConfig>
      break;
 8003cd2:	e009      	b.n	8003ce8 <HAL_TIM_ConfigClockSource+0x154>
        TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 8003cd4:	687b      	ldr	r3, [r7, #4]
 8003cd6:	681a      	ldr	r2, [r3, #0]
 8003cd8:	683b      	ldr	r3, [r7, #0]
 8003cda:	681b      	ldr	r3, [r3, #0]
 8003cdc:	4619      	mov	r1, r3
 8003cde:	4610      	mov	r0, r2
 8003ce0:	f000 f8f3 	bl	8003eca <TIM_ITRx_SetConfig>
        break;
 8003ce4:	e000      	b.n	8003ce8 <HAL_TIM_ConfigClockSource+0x154>
      break;
 8003ce6:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 8003ce8:	687b      	ldr	r3, [r7, #4]
 8003cea:	2201      	movs	r2, #1
 8003cec:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8003cf0:	687b      	ldr	r3, [r7, #4]
 8003cf2:	2200      	movs	r2, #0
 8003cf4:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8003cf8:	2300      	movs	r3, #0
}
 8003cfa:	4618      	mov	r0, r3
 8003cfc:	3710      	adds	r7, #16
 8003cfe:	46bd      	mov	sp, r7
 8003d00:	bd80      	pop	{r7, pc}

08003d02 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 8003d02:	b480      	push	{r7}
 8003d04:	b083      	sub	sp, #12
 8003d06:	af00      	add	r7, sp, #0
 8003d08:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 8003d0a:	bf00      	nop
 8003d0c:	370c      	adds	r7, #12
 8003d0e:	46bd      	mov	sp, r7
 8003d10:	bc80      	pop	{r7}
 8003d12:	4770      	bx	lr

08003d14 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 8003d14:	b480      	push	{r7}
 8003d16:	b083      	sub	sp, #12
 8003d18:	af00      	add	r7, sp, #0
 8003d1a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 8003d1c:	bf00      	nop
 8003d1e:	370c      	adds	r7, #12
 8003d20:	46bd      	mov	sp, r7
 8003d22:	bc80      	pop	{r7}
 8003d24:	4770      	bx	lr

08003d26 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 8003d26:	b480      	push	{r7}
 8003d28:	b083      	sub	sp, #12
 8003d2a:	af00      	add	r7, sp, #0
 8003d2c:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 8003d2e:	bf00      	nop
 8003d30:	370c      	adds	r7, #12
 8003d32:	46bd      	mov	sp, r7
 8003d34:	bc80      	pop	{r7}
 8003d36:	4770      	bx	lr

08003d38 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 8003d38:	b480      	push	{r7}
 8003d3a:	b083      	sub	sp, #12
 8003d3c:	af00      	add	r7, sp, #0
 8003d3e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 8003d40:	bf00      	nop
 8003d42:	370c      	adds	r7, #12
 8003d44:	46bd      	mov	sp, r7
 8003d46:	bc80      	pop	{r7}
 8003d48:	4770      	bx	lr
	...

08003d4c <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 8003d4c:	b480      	push	{r7}
 8003d4e:	b085      	sub	sp, #20
 8003d50:	af00      	add	r7, sp, #0
 8003d52:	6078      	str	r0, [r7, #4]
 8003d54:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8003d56:	687b      	ldr	r3, [r7, #4]
 8003d58:	681b      	ldr	r3, [r3, #0]
 8003d5a:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8003d5c:	687b      	ldr	r3, [r7, #4]
 8003d5e:	4a29      	ldr	r2, [pc, #164]	; (8003e04 <TIM_Base_SetConfig+0xb8>)
 8003d60:	4293      	cmp	r3, r2
 8003d62:	d00b      	beq.n	8003d7c <TIM_Base_SetConfig+0x30>
 8003d64:	687b      	ldr	r3, [r7, #4]
 8003d66:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8003d6a:	d007      	beq.n	8003d7c <TIM_Base_SetConfig+0x30>
 8003d6c:	687b      	ldr	r3, [r7, #4]
 8003d6e:	4a26      	ldr	r2, [pc, #152]	; (8003e08 <TIM_Base_SetConfig+0xbc>)
 8003d70:	4293      	cmp	r3, r2
 8003d72:	d003      	beq.n	8003d7c <TIM_Base_SetConfig+0x30>
 8003d74:	687b      	ldr	r3, [r7, #4]
 8003d76:	4a25      	ldr	r2, [pc, #148]	; (8003e0c <TIM_Base_SetConfig+0xc0>)
 8003d78:	4293      	cmp	r3, r2
 8003d7a:	d108      	bne.n	8003d8e <TIM_Base_SetConfig+0x42>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8003d7c:	68fb      	ldr	r3, [r7, #12]
 8003d7e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8003d82:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8003d84:	683b      	ldr	r3, [r7, #0]
 8003d86:	685b      	ldr	r3, [r3, #4]
 8003d88:	68fa      	ldr	r2, [r7, #12]
 8003d8a:	4313      	orrs	r3, r2
 8003d8c:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8003d8e:	687b      	ldr	r3, [r7, #4]
 8003d90:	4a1c      	ldr	r2, [pc, #112]	; (8003e04 <TIM_Base_SetConfig+0xb8>)
 8003d92:	4293      	cmp	r3, r2
 8003d94:	d00b      	beq.n	8003dae <TIM_Base_SetConfig+0x62>
 8003d96:	687b      	ldr	r3, [r7, #4]
 8003d98:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8003d9c:	d007      	beq.n	8003dae <TIM_Base_SetConfig+0x62>
 8003d9e:	687b      	ldr	r3, [r7, #4]
 8003da0:	4a19      	ldr	r2, [pc, #100]	; (8003e08 <TIM_Base_SetConfig+0xbc>)
 8003da2:	4293      	cmp	r3, r2
 8003da4:	d003      	beq.n	8003dae <TIM_Base_SetConfig+0x62>
 8003da6:	687b      	ldr	r3, [r7, #4]
 8003da8:	4a18      	ldr	r2, [pc, #96]	; (8003e0c <TIM_Base_SetConfig+0xc0>)
 8003daa:	4293      	cmp	r3, r2
 8003dac:	d108      	bne.n	8003dc0 <TIM_Base_SetConfig+0x74>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8003dae:	68fb      	ldr	r3, [r7, #12]
 8003db0:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8003db4:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8003db6:	683b      	ldr	r3, [r7, #0]
 8003db8:	68db      	ldr	r3, [r3, #12]
 8003dba:	68fa      	ldr	r2, [r7, #12]
 8003dbc:	4313      	orrs	r3, r2
 8003dbe:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8003dc0:	68fb      	ldr	r3, [r7, #12]
 8003dc2:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 8003dc6:	683b      	ldr	r3, [r7, #0]
 8003dc8:	695b      	ldr	r3, [r3, #20]
 8003dca:	4313      	orrs	r3, r2
 8003dcc:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8003dce:	687b      	ldr	r3, [r7, #4]
 8003dd0:	68fa      	ldr	r2, [r7, #12]
 8003dd2:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8003dd4:	683b      	ldr	r3, [r7, #0]
 8003dd6:	689a      	ldr	r2, [r3, #8]
 8003dd8:	687b      	ldr	r3, [r7, #4]
 8003dda:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8003ddc:	683b      	ldr	r3, [r7, #0]
 8003dde:	681a      	ldr	r2, [r3, #0]
 8003de0:	687b      	ldr	r3, [r7, #4]
 8003de2:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8003de4:	687b      	ldr	r3, [r7, #4]
 8003de6:	4a07      	ldr	r2, [pc, #28]	; (8003e04 <TIM_Base_SetConfig+0xb8>)
 8003de8:	4293      	cmp	r3, r2
 8003dea:	d103      	bne.n	8003df4 <TIM_Base_SetConfig+0xa8>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8003dec:	683b      	ldr	r3, [r7, #0]
 8003dee:	691a      	ldr	r2, [r3, #16]
 8003df0:	687b      	ldr	r3, [r7, #4]
 8003df2:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8003df4:	687b      	ldr	r3, [r7, #4]
 8003df6:	2201      	movs	r2, #1
 8003df8:	615a      	str	r2, [r3, #20]
}
 8003dfa:	bf00      	nop
 8003dfc:	3714      	adds	r7, #20
 8003dfe:	46bd      	mov	sp, r7
 8003e00:	bc80      	pop	{r7}
 8003e02:	4770      	bx	lr
 8003e04:	40012c00 	.word	0x40012c00
 8003e08:	40000400 	.word	0x40000400
 8003e0c:	40000800 	.word	0x40000800

08003e10 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8003e10:	b480      	push	{r7}
 8003e12:	b087      	sub	sp, #28
 8003e14:	af00      	add	r7, sp, #0
 8003e16:	60f8      	str	r0, [r7, #12]
 8003e18:	60b9      	str	r1, [r7, #8]
 8003e1a:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 8003e1c:	68fb      	ldr	r3, [r7, #12]
 8003e1e:	6a1b      	ldr	r3, [r3, #32]
 8003e20:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8003e22:	68fb      	ldr	r3, [r7, #12]
 8003e24:	6a1b      	ldr	r3, [r3, #32]
 8003e26:	f023 0201 	bic.w	r2, r3, #1
 8003e2a:	68fb      	ldr	r3, [r7, #12]
 8003e2c:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8003e2e:	68fb      	ldr	r3, [r7, #12]
 8003e30:	699b      	ldr	r3, [r3, #24]
 8003e32:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8003e34:	693b      	ldr	r3, [r7, #16]
 8003e36:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8003e3a:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 8003e3c:	687b      	ldr	r3, [r7, #4]
 8003e3e:	011b      	lsls	r3, r3, #4
 8003e40:	693a      	ldr	r2, [r7, #16]
 8003e42:	4313      	orrs	r3, r2
 8003e44:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 8003e46:	697b      	ldr	r3, [r7, #20]
 8003e48:	f023 030a 	bic.w	r3, r3, #10
 8003e4c:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 8003e4e:	697a      	ldr	r2, [r7, #20]
 8003e50:	68bb      	ldr	r3, [r7, #8]
 8003e52:	4313      	orrs	r3, r2
 8003e54:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 8003e56:	68fb      	ldr	r3, [r7, #12]
 8003e58:	693a      	ldr	r2, [r7, #16]
 8003e5a:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8003e5c:	68fb      	ldr	r3, [r7, #12]
 8003e5e:	697a      	ldr	r2, [r7, #20]
 8003e60:	621a      	str	r2, [r3, #32]
}
 8003e62:	bf00      	nop
 8003e64:	371c      	adds	r7, #28
 8003e66:	46bd      	mov	sp, r7
 8003e68:	bc80      	pop	{r7}
 8003e6a:	4770      	bx	lr

08003e6c <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8003e6c:	b480      	push	{r7}
 8003e6e:	b087      	sub	sp, #28
 8003e70:	af00      	add	r7, sp, #0
 8003e72:	60f8      	str	r0, [r7, #12]
 8003e74:	60b9      	str	r1, [r7, #8]
 8003e76:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8003e78:	68fb      	ldr	r3, [r7, #12]
 8003e7a:	6a1b      	ldr	r3, [r3, #32]
 8003e7c:	f023 0210 	bic.w	r2, r3, #16
 8003e80:	68fb      	ldr	r3, [r7, #12]
 8003e82:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8003e84:	68fb      	ldr	r3, [r7, #12]
 8003e86:	699b      	ldr	r3, [r3, #24]
 8003e88:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 8003e8a:	68fb      	ldr	r3, [r7, #12]
 8003e8c:	6a1b      	ldr	r3, [r3, #32]
 8003e8e:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 8003e90:	697b      	ldr	r3, [r7, #20]
 8003e92:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 8003e96:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 8003e98:	687b      	ldr	r3, [r7, #4]
 8003e9a:	031b      	lsls	r3, r3, #12
 8003e9c:	697a      	ldr	r2, [r7, #20]
 8003e9e:	4313      	orrs	r3, r2
 8003ea0:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8003ea2:	693b      	ldr	r3, [r7, #16]
 8003ea4:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 8003ea8:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity << 4U);
 8003eaa:	68bb      	ldr	r3, [r7, #8]
 8003eac:	011b      	lsls	r3, r3, #4
 8003eae:	693a      	ldr	r2, [r7, #16]
 8003eb0:	4313      	orrs	r3, r2
 8003eb2:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 8003eb4:	68fb      	ldr	r3, [r7, #12]
 8003eb6:	697a      	ldr	r2, [r7, #20]
 8003eb8:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8003eba:	68fb      	ldr	r3, [r7, #12]
 8003ebc:	693a      	ldr	r2, [r7, #16]
 8003ebe:	621a      	str	r2, [r3, #32]
}
 8003ec0:	bf00      	nop
 8003ec2:	371c      	adds	r7, #28
 8003ec4:	46bd      	mov	sp, r7
 8003ec6:	bc80      	pop	{r7}
 8003ec8:	4770      	bx	lr

08003eca <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 8003eca:	b480      	push	{r7}
 8003ecc:	b085      	sub	sp, #20
 8003ece:	af00      	add	r7, sp, #0
 8003ed0:	6078      	str	r0, [r7, #4]
 8003ed2:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 8003ed4:	687b      	ldr	r3, [r7, #4]
 8003ed6:	689b      	ldr	r3, [r3, #8]
 8003ed8:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 8003eda:	68fb      	ldr	r3, [r7, #12]
 8003edc:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8003ee0:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 8003ee2:	683a      	ldr	r2, [r7, #0]
 8003ee4:	68fb      	ldr	r3, [r7, #12]
 8003ee6:	4313      	orrs	r3, r2
 8003ee8:	f043 0307 	orr.w	r3, r3, #7
 8003eec:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8003eee:	687b      	ldr	r3, [r7, #4]
 8003ef0:	68fa      	ldr	r2, [r7, #12]
 8003ef2:	609a      	str	r2, [r3, #8]
}
 8003ef4:	bf00      	nop
 8003ef6:	3714      	adds	r7, #20
 8003ef8:	46bd      	mov	sp, r7
 8003efa:	bc80      	pop	{r7}
 8003efc:	4770      	bx	lr

08003efe <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 8003efe:	b480      	push	{r7}
 8003f00:	b087      	sub	sp, #28
 8003f02:	af00      	add	r7, sp, #0
 8003f04:	60f8      	str	r0, [r7, #12]
 8003f06:	60b9      	str	r1, [r7, #8]
 8003f08:	607a      	str	r2, [r7, #4]
 8003f0a:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 8003f0c:	68fb      	ldr	r3, [r7, #12]
 8003f0e:	689b      	ldr	r3, [r3, #8]
 8003f10:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8003f12:	697b      	ldr	r3, [r7, #20]
 8003f14:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8003f18:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 8003f1a:	683b      	ldr	r3, [r7, #0]
 8003f1c:	021a      	lsls	r2, r3, #8
 8003f1e:	687b      	ldr	r3, [r7, #4]
 8003f20:	431a      	orrs	r2, r3
 8003f22:	68bb      	ldr	r3, [r7, #8]
 8003f24:	4313      	orrs	r3, r2
 8003f26:	697a      	ldr	r2, [r7, #20]
 8003f28:	4313      	orrs	r3, r2
 8003f2a:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8003f2c:	68fb      	ldr	r3, [r7, #12]
 8003f2e:	697a      	ldr	r2, [r7, #20]
 8003f30:	609a      	str	r2, [r3, #8]
}
 8003f32:	bf00      	nop
 8003f34:	371c      	adds	r7, #28
 8003f36:	46bd      	mov	sp, r7
 8003f38:	bc80      	pop	{r7}
 8003f3a:	4770      	bx	lr

08003f3c <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        TIM_MasterConfigTypeDef *sMasterConfig)
{
 8003f3c:	b480      	push	{r7}
 8003f3e:	b085      	sub	sp, #20
 8003f40:	af00      	add	r7, sp, #0
 8003f42:	6078      	str	r0, [r7, #4]
 8003f44:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8003f46:	687b      	ldr	r3, [r7, #4]
 8003f48:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8003f4c:	2b01      	cmp	r3, #1
 8003f4e:	d101      	bne.n	8003f54 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8003f50:	2302      	movs	r3, #2
 8003f52:	e046      	b.n	8003fe2 <HAL_TIMEx_MasterConfigSynchronization+0xa6>
 8003f54:	687b      	ldr	r3, [r7, #4]
 8003f56:	2201      	movs	r2, #1
 8003f58:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8003f5c:	687b      	ldr	r3, [r7, #4]
 8003f5e:	2202      	movs	r2, #2
 8003f60:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8003f64:	687b      	ldr	r3, [r7, #4]
 8003f66:	681b      	ldr	r3, [r3, #0]
 8003f68:	685b      	ldr	r3, [r3, #4]
 8003f6a:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8003f6c:	687b      	ldr	r3, [r7, #4]
 8003f6e:	681b      	ldr	r3, [r3, #0]
 8003f70:	689b      	ldr	r3, [r3, #8]
 8003f72:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8003f74:	68fb      	ldr	r3, [r7, #12]
 8003f76:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8003f7a:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8003f7c:	683b      	ldr	r3, [r7, #0]
 8003f7e:	681b      	ldr	r3, [r3, #0]
 8003f80:	68fa      	ldr	r2, [r7, #12]
 8003f82:	4313      	orrs	r3, r2
 8003f84:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8003f86:	687b      	ldr	r3, [r7, #4]
 8003f88:	681b      	ldr	r3, [r3, #0]
 8003f8a:	68fa      	ldr	r2, [r7, #12]
 8003f8c:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8003f8e:	687b      	ldr	r3, [r7, #4]
 8003f90:	681b      	ldr	r3, [r3, #0]
 8003f92:	4a16      	ldr	r2, [pc, #88]	; (8003fec <HAL_TIMEx_MasterConfigSynchronization+0xb0>)
 8003f94:	4293      	cmp	r3, r2
 8003f96:	d00e      	beq.n	8003fb6 <HAL_TIMEx_MasterConfigSynchronization+0x7a>
 8003f98:	687b      	ldr	r3, [r7, #4]
 8003f9a:	681b      	ldr	r3, [r3, #0]
 8003f9c:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8003fa0:	d009      	beq.n	8003fb6 <HAL_TIMEx_MasterConfigSynchronization+0x7a>
 8003fa2:	687b      	ldr	r3, [r7, #4]
 8003fa4:	681b      	ldr	r3, [r3, #0]
 8003fa6:	4a12      	ldr	r2, [pc, #72]	; (8003ff0 <HAL_TIMEx_MasterConfigSynchronization+0xb4>)
 8003fa8:	4293      	cmp	r3, r2
 8003faa:	d004      	beq.n	8003fb6 <HAL_TIMEx_MasterConfigSynchronization+0x7a>
 8003fac:	687b      	ldr	r3, [r7, #4]
 8003fae:	681b      	ldr	r3, [r3, #0]
 8003fb0:	4a10      	ldr	r2, [pc, #64]	; (8003ff4 <HAL_TIMEx_MasterConfigSynchronization+0xb8>)
 8003fb2:	4293      	cmp	r3, r2
 8003fb4:	d10c      	bne.n	8003fd0 <HAL_TIMEx_MasterConfigSynchronization+0x94>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 8003fb6:	68bb      	ldr	r3, [r7, #8]
 8003fb8:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8003fbc:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8003fbe:	683b      	ldr	r3, [r7, #0]
 8003fc0:	685b      	ldr	r3, [r3, #4]
 8003fc2:	68ba      	ldr	r2, [r7, #8]
 8003fc4:	4313      	orrs	r3, r2
 8003fc6:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8003fc8:	687b      	ldr	r3, [r7, #4]
 8003fca:	681b      	ldr	r3, [r3, #0]
 8003fcc:	68ba      	ldr	r2, [r7, #8]
 8003fce:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8003fd0:	687b      	ldr	r3, [r7, #4]
 8003fd2:	2201      	movs	r2, #1
 8003fd4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8003fd8:	687b      	ldr	r3, [r7, #4]
 8003fda:	2200      	movs	r2, #0
 8003fdc:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8003fe0:	2300      	movs	r3, #0
}
 8003fe2:	4618      	mov	r0, r3
 8003fe4:	3714      	adds	r7, #20
 8003fe6:	46bd      	mov	sp, r7
 8003fe8:	bc80      	pop	{r7}
 8003fea:	4770      	bx	lr
 8003fec:	40012c00 	.word	0x40012c00
 8003ff0:	40000400 	.word	0x40000400
 8003ff4:	40000800 	.word	0x40000800

08003ff8 <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8003ff8:	b480      	push	{r7}
 8003ffa:	b083      	sub	sp, #12
 8003ffc:	af00      	add	r7, sp, #0
 8003ffe:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8004000:	bf00      	nop
 8004002:	370c      	adds	r7, #12
 8004004:	46bd      	mov	sp, r7
 8004006:	bc80      	pop	{r7}
 8004008:	4770      	bx	lr

0800400a <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 800400a:	b480      	push	{r7}
 800400c:	b083      	sub	sp, #12
 800400e:	af00      	add	r7, sp, #0
 8004010:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8004012:	bf00      	nop
 8004014:	370c      	adds	r7, #12
 8004016:	46bd      	mov	sp, r7
 8004018:	bc80      	pop	{r7}
 800401a:	4770      	bx	lr

0800401c <USB_CoreInit>:
  * @param  cfg pointer to a USB_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_CoreInit(USB_TypeDef *USBx, USB_CfgTypeDef cfg)
{
 800401c:	b084      	sub	sp, #16
 800401e:	b480      	push	{r7}
 8004020:	b083      	sub	sp, #12
 8004022:	af00      	add	r7, sp, #0
 8004024:	6078      	str	r0, [r7, #4]
 8004026:	f107 0014 	add.w	r0, r7, #20
 800402a:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  /* NOTE : - This function is not required by USB Device FS peripheral, it is used
              only by USB OTG FS peripheral.
            - This function is added to ensure compatibility across platforms.
   */

  return HAL_OK;
 800402e:	2300      	movs	r3, #0
}
 8004030:	4618      	mov	r0, r3
 8004032:	370c      	adds	r7, #12
 8004034:	46bd      	mov	sp, r7
 8004036:	bc80      	pop	{r7}
 8004038:	b004      	add	sp, #16
 800403a:	4770      	bx	lr

0800403c <USB_EnableGlobalInt>:
  *         Enables the controller's Global Int in the AHB Config reg
  * @param  USBx Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EnableGlobalInt(USB_TypeDef *USBx)
{
 800403c:	b480      	push	{r7}
 800403e:	b085      	sub	sp, #20
 8004040:	af00      	add	r7, sp, #0
 8004042:	6078      	str	r0, [r7, #4]
  uint32_t winterruptmask;

  /* Clear pending interrupts */
  USBx->ISTR = 0U;
 8004044:	687b      	ldr	r3, [r7, #4]
 8004046:	2200      	movs	r2, #0
 8004048:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44

  /* Set winterruptmask variable */
  winterruptmask = USB_CNTR_CTRM  | USB_CNTR_WKUPM |
 800404c:	f44f 433f 	mov.w	r3, #48896	; 0xbf00
 8004050:	60fb      	str	r3, [r7, #12]
                   USB_CNTR_SUSPM | USB_CNTR_ERRM |
                   USB_CNTR_SOFM | USB_CNTR_ESOFM |
                   USB_CNTR_RESETM;

  /* Set interrupt mask */
  USBx->CNTR = (uint16_t)winterruptmask;
 8004052:	68fb      	ldr	r3, [r7, #12]
 8004054:	b29a      	uxth	r2, r3
 8004056:	687b      	ldr	r3, [r7, #4]
 8004058:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40

  return HAL_OK;
 800405c:	2300      	movs	r3, #0
}
 800405e:	4618      	mov	r0, r3
 8004060:	3714      	adds	r7, #20
 8004062:	46bd      	mov	sp, r7
 8004064:	bc80      	pop	{r7}
 8004066:	4770      	bx	lr

08004068 <USB_DisableGlobalInt>:
  *         Disable the controller's Global Int in the AHB Config reg
  * @param  USBx Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DisableGlobalInt(USB_TypeDef *USBx)
{
 8004068:	b480      	push	{r7}
 800406a:	b085      	sub	sp, #20
 800406c:	af00      	add	r7, sp, #0
 800406e:	6078      	str	r0, [r7, #4]
  uint32_t winterruptmask;

  /* Set winterruptmask variable */
  winterruptmask = USB_CNTR_CTRM  | USB_CNTR_WKUPM |
 8004070:	f44f 433f 	mov.w	r3, #48896	; 0xbf00
 8004074:	60fb      	str	r3, [r7, #12]
                   USB_CNTR_SUSPM | USB_CNTR_ERRM |
                   USB_CNTR_SOFM | USB_CNTR_ESOFM |
                   USB_CNTR_RESETM;

  /* Clear interrupt mask */
  USBx->CNTR &= (uint16_t)(~winterruptmask);
 8004076:	687b      	ldr	r3, [r7, #4]
 8004078:	f8b3 3040 	ldrh.w	r3, [r3, #64]	; 0x40
 800407c:	b29a      	uxth	r2, r3
 800407e:	68fb      	ldr	r3, [r7, #12]
 8004080:	b29b      	uxth	r3, r3
 8004082:	43db      	mvns	r3, r3
 8004084:	b29b      	uxth	r3, r3
 8004086:	4013      	ands	r3, r2
 8004088:	b29a      	uxth	r2, r3
 800408a:	687b      	ldr	r3, [r7, #4]
 800408c:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40

  return HAL_OK;
 8004090:	2300      	movs	r3, #0
}
 8004092:	4618      	mov	r0, r3
 8004094:	3714      	adds	r7, #20
 8004096:	46bd      	mov	sp, r7
 8004098:	bc80      	pop	{r7}
 800409a:	4770      	bx	lr

0800409c <USB_SetCurrentMode>:
  *          This parameter can be one of the these values:
  *            @arg USB_DEVICE_MODE Peripheral mode
  * @retval HAL status
  */
HAL_StatusTypeDef USB_SetCurrentMode(USB_TypeDef *USBx, USB_ModeTypeDef mode)
{
 800409c:	b480      	push	{r7}
 800409e:	b083      	sub	sp, #12
 80040a0:	af00      	add	r7, sp, #0
 80040a2:	6078      	str	r0, [r7, #4]
 80040a4:	460b      	mov	r3, r1
 80040a6:	70fb      	strb	r3, [r7, #3]

  /* NOTE : - This function is not required by USB Device FS peripheral, it is used
              only by USB OTG FS peripheral.
            - This function is added to ensure compatibility across platforms.
   */
  return HAL_OK;
 80040a8:	2300      	movs	r3, #0
}
 80040aa:	4618      	mov	r0, r3
 80040ac:	370c      	adds	r7, #12
 80040ae:	46bd      	mov	sp, r7
 80040b0:	bc80      	pop	{r7}
 80040b2:	4770      	bx	lr

080040b4 <USB_DevInit>:
  * @param  cfg  pointer to a USB_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DevInit(USB_TypeDef *USBx, USB_CfgTypeDef cfg)
{
 80040b4:	b084      	sub	sp, #16
 80040b6:	b480      	push	{r7}
 80040b8:	b083      	sub	sp, #12
 80040ba:	af00      	add	r7, sp, #0
 80040bc:	6078      	str	r0, [r7, #4]
 80040be:	f107 0014 	add.w	r0, r7, #20
 80040c2:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  /* Prevent unused argument(s) compilation warning */
  UNUSED(cfg);

  /* Init Device */
  /* CNTR_FRES = 1 */
  USBx->CNTR = (uint16_t)USB_CNTR_FRES;
 80040c6:	687b      	ldr	r3, [r7, #4]
 80040c8:	2201      	movs	r2, #1
 80040ca:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40

  /* CNTR_FRES = 0 */
  USBx->CNTR = 0U;
 80040ce:	687b      	ldr	r3, [r7, #4]
 80040d0:	2200      	movs	r2, #0
 80040d2:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40

  /* Clear pending interrupts */
  USBx->ISTR = 0U;
 80040d6:	687b      	ldr	r3, [r7, #4]
 80040d8:	2200      	movs	r2, #0
 80040da:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44

  /*Set Btable Address*/
  USBx->BTABLE = BTABLE_ADDRESS;
 80040de:	687b      	ldr	r3, [r7, #4]
 80040e0:	2200      	movs	r2, #0
 80040e2:	f8a3 2050 	strh.w	r2, [r3, #80]	; 0x50

  return HAL_OK;
 80040e6:	2300      	movs	r3, #0
}
 80040e8:	4618      	mov	r0, r3
 80040ea:	370c      	adds	r7, #12
 80040ec:	46bd      	mov	sp, r7
 80040ee:	bc80      	pop	{r7}
 80040f0:	b004      	add	sp, #16
 80040f2:	4770      	bx	lr

080040f4 <USB_ActivateEndpoint>:
  * @param  USBx Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_ActivateEndpoint(USB_TypeDef *USBx, USB_EPTypeDef *ep)
{
 80040f4:	b480      	push	{r7}
 80040f6:	b09b      	sub	sp, #108	; 0x6c
 80040f8:	af00      	add	r7, sp, #0
 80040fa:	6078      	str	r0, [r7, #4]
 80040fc:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef ret = HAL_OK;
 80040fe:	2300      	movs	r3, #0
 8004100:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
  uint16_t wEpRegVal;

  wEpRegVal = PCD_GET_ENDPOINT(USBx, ep->num) & USB_EP_T_MASK;
 8004104:	687a      	ldr	r2, [r7, #4]
 8004106:	683b      	ldr	r3, [r7, #0]
 8004108:	781b      	ldrb	r3, [r3, #0]
 800410a:	009b      	lsls	r3, r3, #2
 800410c:	4413      	add	r3, r2
 800410e:	881b      	ldrh	r3, [r3, #0]
 8004110:	b29b      	uxth	r3, r3
 8004112:	f423 43ec 	bic.w	r3, r3, #30208	; 0x7600
 8004116:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800411a:	f8a7 3064 	strh.w	r3, [r7, #100]	; 0x64

  /* initialize Endpoint */
  switch (ep->type)
 800411e:	683b      	ldr	r3, [r7, #0]
 8004120:	78db      	ldrb	r3, [r3, #3]
 8004122:	2b03      	cmp	r3, #3
 8004124:	d81f      	bhi.n	8004166 <USB_ActivateEndpoint+0x72>
 8004126:	a201      	add	r2, pc, #4	; (adr r2, 800412c <USB_ActivateEndpoint+0x38>)
 8004128:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800412c:	0800413d 	.word	0x0800413d
 8004130:	08004159 	.word	0x08004159
 8004134:	0800416f 	.word	0x0800416f
 8004138:	0800414b 	.word	0x0800414b
  {
    case EP_TYPE_CTRL:
      wEpRegVal |= USB_EP_CONTROL;
 800413c:	f8b7 3064 	ldrh.w	r3, [r7, #100]	; 0x64
 8004140:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8004144:	f8a7 3064 	strh.w	r3, [r7, #100]	; 0x64
      break;
 8004148:	e012      	b.n	8004170 <USB_ActivateEndpoint+0x7c>
    case EP_TYPE_BULK:
      wEpRegVal |= USB_EP_BULK;
      break;

    case EP_TYPE_INTR:
      wEpRegVal |= USB_EP_INTERRUPT;
 800414a:	f8b7 3064 	ldrh.w	r3, [r7, #100]	; 0x64
 800414e:	f443 63c0 	orr.w	r3, r3, #1536	; 0x600
 8004152:	f8a7 3064 	strh.w	r3, [r7, #100]	; 0x64
      break;
 8004156:	e00b      	b.n	8004170 <USB_ActivateEndpoint+0x7c>

    case EP_TYPE_ISOC:
      wEpRegVal |= USB_EP_ISOCHRONOUS;
 8004158:	f8b7 3064 	ldrh.w	r3, [r7, #100]	; 0x64
 800415c:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8004160:	f8a7 3064 	strh.w	r3, [r7, #100]	; 0x64
      break;
 8004164:	e004      	b.n	8004170 <USB_ActivateEndpoint+0x7c>

    default:
      ret = HAL_ERROR;
 8004166:	2301      	movs	r3, #1
 8004168:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
      break;
 800416c:	e000      	b.n	8004170 <USB_ActivateEndpoint+0x7c>
      break;
 800416e:	bf00      	nop
  }

  PCD_SET_ENDPOINT(USBx, ep->num, (wEpRegVal | USB_EP_CTR_RX | USB_EP_CTR_TX));
 8004170:	687a      	ldr	r2, [r7, #4]
 8004172:	683b      	ldr	r3, [r7, #0]
 8004174:	781b      	ldrb	r3, [r3, #0]
 8004176:	009b      	lsls	r3, r3, #2
 8004178:	441a      	add	r2, r3
 800417a:	f8b7 3064 	ldrh.w	r3, [r7, #100]	; 0x64
 800417e:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8004182:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8004186:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800418a:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800418e:	b29b      	uxth	r3, r3
 8004190:	8013      	strh	r3, [r2, #0]

  PCD_SET_EP_ADDRESS(USBx, ep->num, ep->num);
 8004192:	687a      	ldr	r2, [r7, #4]
 8004194:	683b      	ldr	r3, [r7, #0]
 8004196:	781b      	ldrb	r3, [r3, #0]
 8004198:	009b      	lsls	r3, r3, #2
 800419a:	4413      	add	r3, r2
 800419c:	881b      	ldrh	r3, [r3, #0]
 800419e:	b29b      	uxth	r3, r3
 80041a0:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80041a4:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80041a8:	b29a      	uxth	r2, r3
 80041aa:	683b      	ldr	r3, [r7, #0]
 80041ac:	781b      	ldrb	r3, [r3, #0]
 80041ae:	b29b      	uxth	r3, r3
 80041b0:	4313      	orrs	r3, r2
 80041b2:	f8a7 305e 	strh.w	r3, [r7, #94]	; 0x5e
 80041b6:	687a      	ldr	r2, [r7, #4]
 80041b8:	683b      	ldr	r3, [r7, #0]
 80041ba:	781b      	ldrb	r3, [r3, #0]
 80041bc:	009b      	lsls	r3, r3, #2
 80041be:	441a      	add	r2, r3
 80041c0:	f8b7 305e 	ldrh.w	r3, [r7, #94]	; 0x5e
 80041c4:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 80041c8:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 80041cc:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80041d0:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80041d4:	b29b      	uxth	r3, r3
 80041d6:	8013      	strh	r3, [r2, #0]

  if (ep->doublebuffer == 0U)
 80041d8:	683b      	ldr	r3, [r7, #0]
 80041da:	7b1b      	ldrb	r3, [r3, #12]
 80041dc:	2b00      	cmp	r3, #0
 80041de:	f040 8149 	bne.w	8004474 <USB_ActivateEndpoint+0x380>
  {
    if (ep->is_in != 0U)
 80041e2:	683b      	ldr	r3, [r7, #0]
 80041e4:	785b      	ldrb	r3, [r3, #1]
 80041e6:	2b00      	cmp	r3, #0
 80041e8:	f000 8084 	beq.w	80042f4 <USB_ActivateEndpoint+0x200>
    {
      /*Set the endpoint Transmit buffer address */
      PCD_SET_EP_TX_ADDRESS(USBx, ep->num, ep->pmaadress);
 80041ec:	687b      	ldr	r3, [r7, #4]
 80041ee:	617b      	str	r3, [r7, #20]
 80041f0:	687b      	ldr	r3, [r7, #4]
 80041f2:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 80041f6:	b29b      	uxth	r3, r3
 80041f8:	461a      	mov	r2, r3
 80041fa:	697b      	ldr	r3, [r7, #20]
 80041fc:	4413      	add	r3, r2
 80041fe:	617b      	str	r3, [r7, #20]
 8004200:	683b      	ldr	r3, [r7, #0]
 8004202:	781b      	ldrb	r3, [r3, #0]
 8004204:	011a      	lsls	r2, r3, #4
 8004206:	697b      	ldr	r3, [r7, #20]
 8004208:	4413      	add	r3, r2
 800420a:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 800420e:	613b      	str	r3, [r7, #16]
 8004210:	683b      	ldr	r3, [r7, #0]
 8004212:	88db      	ldrh	r3, [r3, #6]
 8004214:	085b      	lsrs	r3, r3, #1
 8004216:	b29b      	uxth	r3, r3
 8004218:	005b      	lsls	r3, r3, #1
 800421a:	b29a      	uxth	r2, r3
 800421c:	693b      	ldr	r3, [r7, #16]
 800421e:	801a      	strh	r2, [r3, #0]
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 8004220:	687a      	ldr	r2, [r7, #4]
 8004222:	683b      	ldr	r3, [r7, #0]
 8004224:	781b      	ldrb	r3, [r3, #0]
 8004226:	009b      	lsls	r3, r3, #2
 8004228:	4413      	add	r3, r2
 800422a:	881b      	ldrh	r3, [r3, #0]
 800422c:	81fb      	strh	r3, [r7, #14]
 800422e:	89fb      	ldrh	r3, [r7, #14]
 8004230:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004234:	2b00      	cmp	r3, #0
 8004236:	d01b      	beq.n	8004270 <USB_ActivateEndpoint+0x17c>
 8004238:	687a      	ldr	r2, [r7, #4]
 800423a:	683b      	ldr	r3, [r7, #0]
 800423c:	781b      	ldrb	r3, [r3, #0]
 800423e:	009b      	lsls	r3, r3, #2
 8004240:	4413      	add	r3, r2
 8004242:	881b      	ldrh	r3, [r3, #0]
 8004244:	b29b      	uxth	r3, r3
 8004246:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800424a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800424e:	81bb      	strh	r3, [r7, #12]
 8004250:	687a      	ldr	r2, [r7, #4]
 8004252:	683b      	ldr	r3, [r7, #0]
 8004254:	781b      	ldrb	r3, [r3, #0]
 8004256:	009b      	lsls	r3, r3, #2
 8004258:	441a      	add	r2, r3
 800425a:	89bb      	ldrh	r3, [r7, #12]
 800425c:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8004260:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8004264:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8004268:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 800426c:	b29b      	uxth	r3, r3
 800426e:	8013      	strh	r3, [r2, #0]

      if (ep->type != EP_TYPE_ISOC)
 8004270:	683b      	ldr	r3, [r7, #0]
 8004272:	78db      	ldrb	r3, [r3, #3]
 8004274:	2b01      	cmp	r3, #1
 8004276:	d020      	beq.n	80042ba <USB_ActivateEndpoint+0x1c6>
      {
        /* Configure NAK status for the Endpoint */
        PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_NAK);
 8004278:	687a      	ldr	r2, [r7, #4]
 800427a:	683b      	ldr	r3, [r7, #0]
 800427c:	781b      	ldrb	r3, [r3, #0]
 800427e:	009b      	lsls	r3, r3, #2
 8004280:	4413      	add	r3, r2
 8004282:	881b      	ldrh	r3, [r3, #0]
 8004284:	b29b      	uxth	r3, r3
 8004286:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800428a:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800428e:	813b      	strh	r3, [r7, #8]
 8004290:	893b      	ldrh	r3, [r7, #8]
 8004292:	f083 0320 	eor.w	r3, r3, #32
 8004296:	813b      	strh	r3, [r7, #8]
 8004298:	687a      	ldr	r2, [r7, #4]
 800429a:	683b      	ldr	r3, [r7, #0]
 800429c:	781b      	ldrb	r3, [r3, #0]
 800429e:	009b      	lsls	r3, r3, #2
 80042a0:	441a      	add	r2, r3
 80042a2:	893b      	ldrh	r3, [r7, #8]
 80042a4:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 80042a8:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 80042ac:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80042b0:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80042b4:	b29b      	uxth	r3, r3
 80042b6:	8013      	strh	r3, [r2, #0]
 80042b8:	e27f      	b.n	80047ba <USB_ActivateEndpoint+0x6c6>
      }
      else
      {
        /* Configure TX Endpoint to disabled state */
        PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_DIS);
 80042ba:	687a      	ldr	r2, [r7, #4]
 80042bc:	683b      	ldr	r3, [r7, #0]
 80042be:	781b      	ldrb	r3, [r3, #0]
 80042c0:	009b      	lsls	r3, r3, #2
 80042c2:	4413      	add	r3, r2
 80042c4:	881b      	ldrh	r3, [r3, #0]
 80042c6:	b29b      	uxth	r3, r3
 80042c8:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80042cc:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 80042d0:	817b      	strh	r3, [r7, #10]
 80042d2:	687a      	ldr	r2, [r7, #4]
 80042d4:	683b      	ldr	r3, [r7, #0]
 80042d6:	781b      	ldrb	r3, [r3, #0]
 80042d8:	009b      	lsls	r3, r3, #2
 80042da:	441a      	add	r2, r3
 80042dc:	897b      	ldrh	r3, [r7, #10]
 80042de:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 80042e2:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 80042e6:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80042ea:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80042ee:	b29b      	uxth	r3, r3
 80042f0:	8013      	strh	r3, [r2, #0]
 80042f2:	e262      	b.n	80047ba <USB_ActivateEndpoint+0x6c6>
      }
    }
    else
    {
      /*Set the endpoint Receive buffer address */
      PCD_SET_EP_RX_ADDRESS(USBx, ep->num, ep->pmaadress);
 80042f4:	687b      	ldr	r3, [r7, #4]
 80042f6:	62fb      	str	r3, [r7, #44]	; 0x2c
 80042f8:	687b      	ldr	r3, [r7, #4]
 80042fa:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 80042fe:	b29b      	uxth	r3, r3
 8004300:	461a      	mov	r2, r3
 8004302:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004304:	4413      	add	r3, r2
 8004306:	62fb      	str	r3, [r7, #44]	; 0x2c
 8004308:	683b      	ldr	r3, [r7, #0]
 800430a:	781b      	ldrb	r3, [r3, #0]
 800430c:	011a      	lsls	r2, r3, #4
 800430e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004310:	4413      	add	r3, r2
 8004312:	f503 6381 	add.w	r3, r3, #1032	; 0x408
 8004316:	62bb      	str	r3, [r7, #40]	; 0x28
 8004318:	683b      	ldr	r3, [r7, #0]
 800431a:	88db      	ldrh	r3, [r3, #6]
 800431c:	085b      	lsrs	r3, r3, #1
 800431e:	b29b      	uxth	r3, r3
 8004320:	005b      	lsls	r3, r3, #1
 8004322:	b29a      	uxth	r2, r3
 8004324:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004326:	801a      	strh	r2, [r3, #0]

      /*Set the endpoint Receive buffer counter*/
      PCD_SET_EP_RX_CNT(USBx, ep->num, ep->maxpacket);
 8004328:	687b      	ldr	r3, [r7, #4]
 800432a:	627b      	str	r3, [r7, #36]	; 0x24
 800432c:	687b      	ldr	r3, [r7, #4]
 800432e:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8004332:	b29b      	uxth	r3, r3
 8004334:	461a      	mov	r2, r3
 8004336:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004338:	4413      	add	r3, r2
 800433a:	627b      	str	r3, [r7, #36]	; 0x24
 800433c:	683b      	ldr	r3, [r7, #0]
 800433e:	781b      	ldrb	r3, [r3, #0]
 8004340:	011a      	lsls	r2, r3, #4
 8004342:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004344:	4413      	add	r3, r2
 8004346:	f203 430c 	addw	r3, r3, #1036	; 0x40c
 800434a:	623b      	str	r3, [r7, #32]
 800434c:	683b      	ldr	r3, [r7, #0]
 800434e:	691b      	ldr	r3, [r3, #16]
 8004350:	2b00      	cmp	r3, #0
 8004352:	d112      	bne.n	800437a <USB_ActivateEndpoint+0x286>
 8004354:	6a3b      	ldr	r3, [r7, #32]
 8004356:	881b      	ldrh	r3, [r3, #0]
 8004358:	b29b      	uxth	r3, r3
 800435a:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 800435e:	b29a      	uxth	r2, r3
 8004360:	6a3b      	ldr	r3, [r7, #32]
 8004362:	801a      	strh	r2, [r3, #0]
 8004364:	6a3b      	ldr	r3, [r7, #32]
 8004366:	881b      	ldrh	r3, [r3, #0]
 8004368:	b29b      	uxth	r3, r3
 800436a:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800436e:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8004372:	b29a      	uxth	r2, r3
 8004374:	6a3b      	ldr	r3, [r7, #32]
 8004376:	801a      	strh	r2, [r3, #0]
 8004378:	e02f      	b.n	80043da <USB_ActivateEndpoint+0x2e6>
 800437a:	683b      	ldr	r3, [r7, #0]
 800437c:	691b      	ldr	r3, [r3, #16]
 800437e:	2b3e      	cmp	r3, #62	; 0x3e
 8004380:	d813      	bhi.n	80043aa <USB_ActivateEndpoint+0x2b6>
 8004382:	683b      	ldr	r3, [r7, #0]
 8004384:	691b      	ldr	r3, [r3, #16]
 8004386:	085b      	lsrs	r3, r3, #1
 8004388:	663b      	str	r3, [r7, #96]	; 0x60
 800438a:	683b      	ldr	r3, [r7, #0]
 800438c:	691b      	ldr	r3, [r3, #16]
 800438e:	f003 0301 	and.w	r3, r3, #1
 8004392:	2b00      	cmp	r3, #0
 8004394:	d002      	beq.n	800439c <USB_ActivateEndpoint+0x2a8>
 8004396:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8004398:	3301      	adds	r3, #1
 800439a:	663b      	str	r3, [r7, #96]	; 0x60
 800439c:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 800439e:	b29b      	uxth	r3, r3
 80043a0:	029b      	lsls	r3, r3, #10
 80043a2:	b29a      	uxth	r2, r3
 80043a4:	6a3b      	ldr	r3, [r7, #32]
 80043a6:	801a      	strh	r2, [r3, #0]
 80043a8:	e017      	b.n	80043da <USB_ActivateEndpoint+0x2e6>
 80043aa:	683b      	ldr	r3, [r7, #0]
 80043ac:	691b      	ldr	r3, [r3, #16]
 80043ae:	095b      	lsrs	r3, r3, #5
 80043b0:	663b      	str	r3, [r7, #96]	; 0x60
 80043b2:	683b      	ldr	r3, [r7, #0]
 80043b4:	691b      	ldr	r3, [r3, #16]
 80043b6:	f003 031f 	and.w	r3, r3, #31
 80043ba:	2b00      	cmp	r3, #0
 80043bc:	d102      	bne.n	80043c4 <USB_ActivateEndpoint+0x2d0>
 80043be:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 80043c0:	3b01      	subs	r3, #1
 80043c2:	663b      	str	r3, [r7, #96]	; 0x60
 80043c4:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 80043c6:	b29b      	uxth	r3, r3
 80043c8:	029b      	lsls	r3, r3, #10
 80043ca:	b29b      	uxth	r3, r3
 80043cc:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 80043d0:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 80043d4:	b29a      	uxth	r2, r3
 80043d6:	6a3b      	ldr	r3, [r7, #32]
 80043d8:	801a      	strh	r2, [r3, #0]
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 80043da:	687a      	ldr	r2, [r7, #4]
 80043dc:	683b      	ldr	r3, [r7, #0]
 80043de:	781b      	ldrb	r3, [r3, #0]
 80043e0:	009b      	lsls	r3, r3, #2
 80043e2:	4413      	add	r3, r2
 80043e4:	881b      	ldrh	r3, [r3, #0]
 80043e6:	83fb      	strh	r3, [r7, #30]
 80043e8:	8bfb      	ldrh	r3, [r7, #30]
 80043ea:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80043ee:	2b00      	cmp	r3, #0
 80043f0:	d01b      	beq.n	800442a <USB_ActivateEndpoint+0x336>
 80043f2:	687a      	ldr	r2, [r7, #4]
 80043f4:	683b      	ldr	r3, [r7, #0]
 80043f6:	781b      	ldrb	r3, [r3, #0]
 80043f8:	009b      	lsls	r3, r3, #2
 80043fa:	4413      	add	r3, r2
 80043fc:	881b      	ldrh	r3, [r3, #0]
 80043fe:	b29b      	uxth	r3, r3
 8004400:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8004404:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8004408:	83bb      	strh	r3, [r7, #28]
 800440a:	687a      	ldr	r2, [r7, #4]
 800440c:	683b      	ldr	r3, [r7, #0]
 800440e:	781b      	ldrb	r3, [r3, #0]
 8004410:	009b      	lsls	r3, r3, #2
 8004412:	441a      	add	r2, r3
 8004414:	8bbb      	ldrh	r3, [r7, #28]
 8004416:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 800441a:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 800441e:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8004422:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8004426:	b29b      	uxth	r3, r3
 8004428:	8013      	strh	r3, [r2, #0]

      /* Configure VALID status for the Endpoint*/
      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_VALID);
 800442a:	687a      	ldr	r2, [r7, #4]
 800442c:	683b      	ldr	r3, [r7, #0]
 800442e:	781b      	ldrb	r3, [r3, #0]
 8004430:	009b      	lsls	r3, r3, #2
 8004432:	4413      	add	r3, r2
 8004434:	881b      	ldrh	r3, [r3, #0]
 8004436:	b29b      	uxth	r3, r3
 8004438:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 800443c:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8004440:	837b      	strh	r3, [r7, #26]
 8004442:	8b7b      	ldrh	r3, [r7, #26]
 8004444:	f483 5380 	eor.w	r3, r3, #4096	; 0x1000
 8004448:	837b      	strh	r3, [r7, #26]
 800444a:	8b7b      	ldrh	r3, [r7, #26]
 800444c:	f483 5300 	eor.w	r3, r3, #8192	; 0x2000
 8004450:	837b      	strh	r3, [r7, #26]
 8004452:	687a      	ldr	r2, [r7, #4]
 8004454:	683b      	ldr	r3, [r7, #0]
 8004456:	781b      	ldrb	r3, [r3, #0]
 8004458:	009b      	lsls	r3, r3, #2
 800445a:	441a      	add	r2, r3
 800445c:	8b7b      	ldrh	r3, [r7, #26]
 800445e:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8004462:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8004466:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800446a:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800446e:	b29b      	uxth	r3, r3
 8004470:	8013      	strh	r3, [r2, #0]
 8004472:	e1a2      	b.n	80047ba <USB_ActivateEndpoint+0x6c6>
  }
  /*Double Buffer*/
  else
  {
    /* Set the endpoint as double buffered */
    PCD_SET_EP_DBUF(USBx, ep->num);
 8004474:	687a      	ldr	r2, [r7, #4]
 8004476:	683b      	ldr	r3, [r7, #0]
 8004478:	781b      	ldrb	r3, [r3, #0]
 800447a:	009b      	lsls	r3, r3, #2
 800447c:	4413      	add	r3, r2
 800447e:	881b      	ldrh	r3, [r3, #0]
 8004480:	b29b      	uxth	r3, r3
 8004482:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8004486:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800448a:	f8a7 305c 	strh.w	r3, [r7, #92]	; 0x5c
 800448e:	687a      	ldr	r2, [r7, #4]
 8004490:	683b      	ldr	r3, [r7, #0]
 8004492:	781b      	ldrb	r3, [r3, #0]
 8004494:	009b      	lsls	r3, r3, #2
 8004496:	441a      	add	r2, r3
 8004498:	f8b7 305c 	ldrh.w	r3, [r7, #92]	; 0x5c
 800449c:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 80044a0:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 80044a4:	f443 4301 	orr.w	r3, r3, #33024	; 0x8100
 80044a8:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80044ac:	b29b      	uxth	r3, r3
 80044ae:	8013      	strh	r3, [r2, #0]

    /* Set buffer address for double buffered mode */
    PCD_SET_EP_DBUF_ADDR(USBx, ep->num, ep->pmaaddr0, ep->pmaaddr1);
 80044b0:	687b      	ldr	r3, [r7, #4]
 80044b2:	65bb      	str	r3, [r7, #88]	; 0x58
 80044b4:	687b      	ldr	r3, [r7, #4]
 80044b6:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 80044ba:	b29b      	uxth	r3, r3
 80044bc:	461a      	mov	r2, r3
 80044be:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 80044c0:	4413      	add	r3, r2
 80044c2:	65bb      	str	r3, [r7, #88]	; 0x58
 80044c4:	683b      	ldr	r3, [r7, #0]
 80044c6:	781b      	ldrb	r3, [r3, #0]
 80044c8:	011a      	lsls	r2, r3, #4
 80044ca:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 80044cc:	4413      	add	r3, r2
 80044ce:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 80044d2:	657b      	str	r3, [r7, #84]	; 0x54
 80044d4:	683b      	ldr	r3, [r7, #0]
 80044d6:	891b      	ldrh	r3, [r3, #8]
 80044d8:	085b      	lsrs	r3, r3, #1
 80044da:	b29b      	uxth	r3, r3
 80044dc:	005b      	lsls	r3, r3, #1
 80044de:	b29a      	uxth	r2, r3
 80044e0:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80044e2:	801a      	strh	r2, [r3, #0]
 80044e4:	687b      	ldr	r3, [r7, #4]
 80044e6:	653b      	str	r3, [r7, #80]	; 0x50
 80044e8:	687b      	ldr	r3, [r7, #4]
 80044ea:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 80044ee:	b29b      	uxth	r3, r3
 80044f0:	461a      	mov	r2, r3
 80044f2:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80044f4:	4413      	add	r3, r2
 80044f6:	653b      	str	r3, [r7, #80]	; 0x50
 80044f8:	683b      	ldr	r3, [r7, #0]
 80044fa:	781b      	ldrb	r3, [r3, #0]
 80044fc:	011a      	lsls	r2, r3, #4
 80044fe:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8004500:	4413      	add	r3, r2
 8004502:	f503 6381 	add.w	r3, r3, #1032	; 0x408
 8004506:	64fb      	str	r3, [r7, #76]	; 0x4c
 8004508:	683b      	ldr	r3, [r7, #0]
 800450a:	895b      	ldrh	r3, [r3, #10]
 800450c:	085b      	lsrs	r3, r3, #1
 800450e:	b29b      	uxth	r3, r3
 8004510:	005b      	lsls	r3, r3, #1
 8004512:	b29a      	uxth	r2, r3
 8004514:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8004516:	801a      	strh	r2, [r3, #0]

    if (ep->is_in == 0U)
 8004518:	683b      	ldr	r3, [r7, #0]
 800451a:	785b      	ldrb	r3, [r3, #1]
 800451c:	2b00      	cmp	r3, #0
 800451e:	f040 8091 	bne.w	8004644 <USB_ActivateEndpoint+0x550>
    {
      /* Clear the data toggle bits for the endpoint IN/OUT */
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 8004522:	687a      	ldr	r2, [r7, #4]
 8004524:	683b      	ldr	r3, [r7, #0]
 8004526:	781b      	ldrb	r3, [r3, #0]
 8004528:	009b      	lsls	r3, r3, #2
 800452a:	4413      	add	r3, r2
 800452c:	881b      	ldrh	r3, [r3, #0]
 800452e:	87bb      	strh	r3, [r7, #60]	; 0x3c
 8004530:	8fbb      	ldrh	r3, [r7, #60]	; 0x3c
 8004532:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8004536:	2b00      	cmp	r3, #0
 8004538:	d01b      	beq.n	8004572 <USB_ActivateEndpoint+0x47e>
 800453a:	687a      	ldr	r2, [r7, #4]
 800453c:	683b      	ldr	r3, [r7, #0]
 800453e:	781b      	ldrb	r3, [r3, #0]
 8004540:	009b      	lsls	r3, r3, #2
 8004542:	4413      	add	r3, r2
 8004544:	881b      	ldrh	r3, [r3, #0]
 8004546:	b29b      	uxth	r3, r3
 8004548:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800454c:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8004550:	877b      	strh	r3, [r7, #58]	; 0x3a
 8004552:	687a      	ldr	r2, [r7, #4]
 8004554:	683b      	ldr	r3, [r7, #0]
 8004556:	781b      	ldrb	r3, [r3, #0]
 8004558:	009b      	lsls	r3, r3, #2
 800455a:	441a      	add	r2, r3
 800455c:	8f7b      	ldrh	r3, [r7, #58]	; 0x3a
 800455e:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8004562:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8004566:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 800456a:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800456e:	b29b      	uxth	r3, r3
 8004570:	8013      	strh	r3, [r2, #0]
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 8004572:	687a      	ldr	r2, [r7, #4]
 8004574:	683b      	ldr	r3, [r7, #0]
 8004576:	781b      	ldrb	r3, [r3, #0]
 8004578:	009b      	lsls	r3, r3, #2
 800457a:	4413      	add	r3, r2
 800457c:	881b      	ldrh	r3, [r3, #0]
 800457e:	873b      	strh	r3, [r7, #56]	; 0x38
 8004580:	8f3b      	ldrh	r3, [r7, #56]	; 0x38
 8004582:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004586:	2b00      	cmp	r3, #0
 8004588:	d01b      	beq.n	80045c2 <USB_ActivateEndpoint+0x4ce>
 800458a:	687a      	ldr	r2, [r7, #4]
 800458c:	683b      	ldr	r3, [r7, #0]
 800458e:	781b      	ldrb	r3, [r3, #0]
 8004590:	009b      	lsls	r3, r3, #2
 8004592:	4413      	add	r3, r2
 8004594:	881b      	ldrh	r3, [r3, #0]
 8004596:	b29b      	uxth	r3, r3
 8004598:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800459c:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80045a0:	86fb      	strh	r3, [r7, #54]	; 0x36
 80045a2:	687a      	ldr	r2, [r7, #4]
 80045a4:	683b      	ldr	r3, [r7, #0]
 80045a6:	781b      	ldrb	r3, [r3, #0]
 80045a8:	009b      	lsls	r3, r3, #2
 80045aa:	441a      	add	r2, r3
 80045ac:	8efb      	ldrh	r3, [r7, #54]	; 0x36
 80045ae:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 80045b2:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 80045b6:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80045ba:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 80045be:	b29b      	uxth	r3, r3
 80045c0:	8013      	strh	r3, [r2, #0]

      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_VALID);
 80045c2:	687a      	ldr	r2, [r7, #4]
 80045c4:	683b      	ldr	r3, [r7, #0]
 80045c6:	781b      	ldrb	r3, [r3, #0]
 80045c8:	009b      	lsls	r3, r3, #2
 80045ca:	4413      	add	r3, r2
 80045cc:	881b      	ldrh	r3, [r3, #0]
 80045ce:	b29b      	uxth	r3, r3
 80045d0:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 80045d4:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80045d8:	86bb      	strh	r3, [r7, #52]	; 0x34
 80045da:	8ebb      	ldrh	r3, [r7, #52]	; 0x34
 80045dc:	f483 5380 	eor.w	r3, r3, #4096	; 0x1000
 80045e0:	86bb      	strh	r3, [r7, #52]	; 0x34
 80045e2:	8ebb      	ldrh	r3, [r7, #52]	; 0x34
 80045e4:	f483 5300 	eor.w	r3, r3, #8192	; 0x2000
 80045e8:	86bb      	strh	r3, [r7, #52]	; 0x34
 80045ea:	687a      	ldr	r2, [r7, #4]
 80045ec:	683b      	ldr	r3, [r7, #0]
 80045ee:	781b      	ldrb	r3, [r3, #0]
 80045f0:	009b      	lsls	r3, r3, #2
 80045f2:	441a      	add	r2, r3
 80045f4:	8ebb      	ldrh	r3, [r7, #52]	; 0x34
 80045f6:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 80045fa:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 80045fe:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8004602:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8004606:	b29b      	uxth	r3, r3
 8004608:	8013      	strh	r3, [r2, #0]
      PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_DIS);
 800460a:	687a      	ldr	r2, [r7, #4]
 800460c:	683b      	ldr	r3, [r7, #0]
 800460e:	781b      	ldrb	r3, [r3, #0]
 8004610:	009b      	lsls	r3, r3, #2
 8004612:	4413      	add	r3, r2
 8004614:	881b      	ldrh	r3, [r3, #0]
 8004616:	b29b      	uxth	r3, r3
 8004618:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800461c:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8004620:	867b      	strh	r3, [r7, #50]	; 0x32
 8004622:	687a      	ldr	r2, [r7, #4]
 8004624:	683b      	ldr	r3, [r7, #0]
 8004626:	781b      	ldrb	r3, [r3, #0]
 8004628:	009b      	lsls	r3, r3, #2
 800462a:	441a      	add	r2, r3
 800462c:	8e7b      	ldrh	r3, [r7, #50]	; 0x32
 800462e:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8004632:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8004636:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800463a:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800463e:	b29b      	uxth	r3, r3
 8004640:	8013      	strh	r3, [r2, #0]
 8004642:	e0ba      	b.n	80047ba <USB_ActivateEndpoint+0x6c6>
    }
    else
    {
      /* Clear the data toggle bits for the endpoint IN/OUT */
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 8004644:	687a      	ldr	r2, [r7, #4]
 8004646:	683b      	ldr	r3, [r7, #0]
 8004648:	781b      	ldrb	r3, [r3, #0]
 800464a:	009b      	lsls	r3, r3, #2
 800464c:	4413      	add	r3, r2
 800464e:	881b      	ldrh	r3, [r3, #0]
 8004650:	f8a7 304a 	strh.w	r3, [r7, #74]	; 0x4a
 8004654:	f8b7 304a 	ldrh.w	r3, [r7, #74]	; 0x4a
 8004658:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800465c:	2b00      	cmp	r3, #0
 800465e:	d01d      	beq.n	800469c <USB_ActivateEndpoint+0x5a8>
 8004660:	687a      	ldr	r2, [r7, #4]
 8004662:	683b      	ldr	r3, [r7, #0]
 8004664:	781b      	ldrb	r3, [r3, #0]
 8004666:	009b      	lsls	r3, r3, #2
 8004668:	4413      	add	r3, r2
 800466a:	881b      	ldrh	r3, [r3, #0]
 800466c:	b29b      	uxth	r3, r3
 800466e:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8004672:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8004676:	f8a7 3048 	strh.w	r3, [r7, #72]	; 0x48
 800467a:	687a      	ldr	r2, [r7, #4]
 800467c:	683b      	ldr	r3, [r7, #0]
 800467e:	781b      	ldrb	r3, [r3, #0]
 8004680:	009b      	lsls	r3, r3, #2
 8004682:	441a      	add	r2, r3
 8004684:	f8b7 3048 	ldrh.w	r3, [r7, #72]	; 0x48
 8004688:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 800468c:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8004690:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8004694:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8004698:	b29b      	uxth	r3, r3
 800469a:	8013      	strh	r3, [r2, #0]
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 800469c:	687a      	ldr	r2, [r7, #4]
 800469e:	683b      	ldr	r3, [r7, #0]
 80046a0:	781b      	ldrb	r3, [r3, #0]
 80046a2:	009b      	lsls	r3, r3, #2
 80046a4:	4413      	add	r3, r2
 80046a6:	881b      	ldrh	r3, [r3, #0]
 80046a8:	f8a7 3046 	strh.w	r3, [r7, #70]	; 0x46
 80046ac:	f8b7 3046 	ldrh.w	r3, [r7, #70]	; 0x46
 80046b0:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80046b4:	2b00      	cmp	r3, #0
 80046b6:	d01d      	beq.n	80046f4 <USB_ActivateEndpoint+0x600>
 80046b8:	687a      	ldr	r2, [r7, #4]
 80046ba:	683b      	ldr	r3, [r7, #0]
 80046bc:	781b      	ldrb	r3, [r3, #0]
 80046be:	009b      	lsls	r3, r3, #2
 80046c0:	4413      	add	r3, r2
 80046c2:	881b      	ldrh	r3, [r3, #0]
 80046c4:	b29b      	uxth	r3, r3
 80046c6:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80046ca:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80046ce:	f8a7 3044 	strh.w	r3, [r7, #68]	; 0x44
 80046d2:	687a      	ldr	r2, [r7, #4]
 80046d4:	683b      	ldr	r3, [r7, #0]
 80046d6:	781b      	ldrb	r3, [r3, #0]
 80046d8:	009b      	lsls	r3, r3, #2
 80046da:	441a      	add	r2, r3
 80046dc:	f8b7 3044 	ldrh.w	r3, [r7, #68]	; 0x44
 80046e0:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 80046e4:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 80046e8:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80046ec:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 80046f0:	b29b      	uxth	r3, r3
 80046f2:	8013      	strh	r3, [r2, #0]

      if (ep->type != EP_TYPE_ISOC)
 80046f4:	683b      	ldr	r3, [r7, #0]
 80046f6:	78db      	ldrb	r3, [r3, #3]
 80046f8:	2b01      	cmp	r3, #1
 80046fa:	d024      	beq.n	8004746 <USB_ActivateEndpoint+0x652>
      {
        /* Configure NAK status for the Endpoint */
        PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_NAK);
 80046fc:	687a      	ldr	r2, [r7, #4]
 80046fe:	683b      	ldr	r3, [r7, #0]
 8004700:	781b      	ldrb	r3, [r3, #0]
 8004702:	009b      	lsls	r3, r3, #2
 8004704:	4413      	add	r3, r2
 8004706:	881b      	ldrh	r3, [r3, #0]
 8004708:	b29b      	uxth	r3, r3
 800470a:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800470e:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8004712:	f8a7 3040 	strh.w	r3, [r7, #64]	; 0x40
 8004716:	f8b7 3040 	ldrh.w	r3, [r7, #64]	; 0x40
 800471a:	f083 0320 	eor.w	r3, r3, #32
 800471e:	f8a7 3040 	strh.w	r3, [r7, #64]	; 0x40
 8004722:	687a      	ldr	r2, [r7, #4]
 8004724:	683b      	ldr	r3, [r7, #0]
 8004726:	781b      	ldrb	r3, [r3, #0]
 8004728:	009b      	lsls	r3, r3, #2
 800472a:	441a      	add	r2, r3
 800472c:	f8b7 3040 	ldrh.w	r3, [r7, #64]	; 0x40
 8004730:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8004734:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8004738:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800473c:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8004740:	b29b      	uxth	r3, r3
 8004742:	8013      	strh	r3, [r2, #0]
 8004744:	e01d      	b.n	8004782 <USB_ActivateEndpoint+0x68e>
      }
      else
      {
        /* Configure TX Endpoint to disabled state */
        PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_DIS);
 8004746:	687a      	ldr	r2, [r7, #4]
 8004748:	683b      	ldr	r3, [r7, #0]
 800474a:	781b      	ldrb	r3, [r3, #0]
 800474c:	009b      	lsls	r3, r3, #2
 800474e:	4413      	add	r3, r2
 8004750:	881b      	ldrh	r3, [r3, #0]
 8004752:	b29b      	uxth	r3, r3
 8004754:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8004758:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800475c:	f8a7 3042 	strh.w	r3, [r7, #66]	; 0x42
 8004760:	687a      	ldr	r2, [r7, #4]
 8004762:	683b      	ldr	r3, [r7, #0]
 8004764:	781b      	ldrb	r3, [r3, #0]
 8004766:	009b      	lsls	r3, r3, #2
 8004768:	441a      	add	r2, r3
 800476a:	f8b7 3042 	ldrh.w	r3, [r7, #66]	; 0x42
 800476e:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8004772:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8004776:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800477a:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800477e:	b29b      	uxth	r3, r3
 8004780:	8013      	strh	r3, [r2, #0]
      }

      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_DIS);
 8004782:	687a      	ldr	r2, [r7, #4]
 8004784:	683b      	ldr	r3, [r7, #0]
 8004786:	781b      	ldrb	r3, [r3, #0]
 8004788:	009b      	lsls	r3, r3, #2
 800478a:	4413      	add	r3, r2
 800478c:	881b      	ldrh	r3, [r3, #0]
 800478e:	b29b      	uxth	r3, r3
 8004790:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8004794:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8004798:	87fb      	strh	r3, [r7, #62]	; 0x3e
 800479a:	687a      	ldr	r2, [r7, #4]
 800479c:	683b      	ldr	r3, [r7, #0]
 800479e:	781b      	ldrb	r3, [r3, #0]
 80047a0:	009b      	lsls	r3, r3, #2
 80047a2:	441a      	add	r2, r3
 80047a4:	8ffb      	ldrh	r3, [r7, #62]	; 0x3e
 80047a6:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 80047aa:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 80047ae:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80047b2:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80047b6:	b29b      	uxth	r3, r3
 80047b8:	8013      	strh	r3, [r2, #0]
    }
  }

  return ret;
 80047ba:	f897 3067 	ldrb.w	r3, [r7, #103]	; 0x67
}
 80047be:	4618      	mov	r0, r3
 80047c0:	376c      	adds	r7, #108	; 0x6c
 80047c2:	46bd      	mov	sp, r7
 80047c4:	bc80      	pop	{r7}
 80047c6:	4770      	bx	lr

080047c8 <USB_DeactivateEndpoint>:
  * @param  USBx Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DeactivateEndpoint(USB_TypeDef *USBx, USB_EPTypeDef *ep)
{
 80047c8:	b480      	push	{r7}
 80047ca:	b08d      	sub	sp, #52	; 0x34
 80047cc:	af00      	add	r7, sp, #0
 80047ce:	6078      	str	r0, [r7, #4]
 80047d0:	6039      	str	r1, [r7, #0]
  if (ep->doublebuffer == 0U)
 80047d2:	683b      	ldr	r3, [r7, #0]
 80047d4:	7b1b      	ldrb	r3, [r3, #12]
 80047d6:	2b00      	cmp	r3, #0
 80047d8:	f040 808e 	bne.w	80048f8 <USB_DeactivateEndpoint+0x130>
  {
    if (ep->is_in != 0U)
 80047dc:	683b      	ldr	r3, [r7, #0]
 80047de:	785b      	ldrb	r3, [r3, #1]
 80047e0:	2b00      	cmp	r3, #0
 80047e2:	d044      	beq.n	800486e <USB_DeactivateEndpoint+0xa6>
    {
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 80047e4:	687a      	ldr	r2, [r7, #4]
 80047e6:	683b      	ldr	r3, [r7, #0]
 80047e8:	781b      	ldrb	r3, [r3, #0]
 80047ea:	009b      	lsls	r3, r3, #2
 80047ec:	4413      	add	r3, r2
 80047ee:	881b      	ldrh	r3, [r3, #0]
 80047f0:	81bb      	strh	r3, [r7, #12]
 80047f2:	89bb      	ldrh	r3, [r7, #12]
 80047f4:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80047f8:	2b00      	cmp	r3, #0
 80047fa:	d01b      	beq.n	8004834 <USB_DeactivateEndpoint+0x6c>
 80047fc:	687a      	ldr	r2, [r7, #4]
 80047fe:	683b      	ldr	r3, [r7, #0]
 8004800:	781b      	ldrb	r3, [r3, #0]
 8004802:	009b      	lsls	r3, r3, #2
 8004804:	4413      	add	r3, r2
 8004806:	881b      	ldrh	r3, [r3, #0]
 8004808:	b29b      	uxth	r3, r3
 800480a:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800480e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8004812:	817b      	strh	r3, [r7, #10]
 8004814:	687a      	ldr	r2, [r7, #4]
 8004816:	683b      	ldr	r3, [r7, #0]
 8004818:	781b      	ldrb	r3, [r3, #0]
 800481a:	009b      	lsls	r3, r3, #2
 800481c:	441a      	add	r2, r3
 800481e:	897b      	ldrh	r3, [r7, #10]
 8004820:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8004824:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8004828:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800482c:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 8004830:	b29b      	uxth	r3, r3
 8004832:	8013      	strh	r3, [r2, #0]

      /* Configure DISABLE status for the Endpoint*/
      PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_DIS);
 8004834:	687a      	ldr	r2, [r7, #4]
 8004836:	683b      	ldr	r3, [r7, #0]
 8004838:	781b      	ldrb	r3, [r3, #0]
 800483a:	009b      	lsls	r3, r3, #2
 800483c:	4413      	add	r3, r2
 800483e:	881b      	ldrh	r3, [r3, #0]
 8004840:	b29b      	uxth	r3, r3
 8004842:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8004846:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800484a:	813b      	strh	r3, [r7, #8]
 800484c:	687a      	ldr	r2, [r7, #4]
 800484e:	683b      	ldr	r3, [r7, #0]
 8004850:	781b      	ldrb	r3, [r3, #0]
 8004852:	009b      	lsls	r3, r3, #2
 8004854:	441a      	add	r2, r3
 8004856:	893b      	ldrh	r3, [r7, #8]
 8004858:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 800485c:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8004860:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8004864:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8004868:	b29b      	uxth	r3, r3
 800486a:	8013      	strh	r3, [r2, #0]
 800486c:	e192      	b.n	8004b94 <USB_DeactivateEndpoint+0x3cc>
    }
    else
    {
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 800486e:	687a      	ldr	r2, [r7, #4]
 8004870:	683b      	ldr	r3, [r7, #0]
 8004872:	781b      	ldrb	r3, [r3, #0]
 8004874:	009b      	lsls	r3, r3, #2
 8004876:	4413      	add	r3, r2
 8004878:	881b      	ldrh	r3, [r3, #0]
 800487a:	827b      	strh	r3, [r7, #18]
 800487c:	8a7b      	ldrh	r3, [r7, #18]
 800487e:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8004882:	2b00      	cmp	r3, #0
 8004884:	d01b      	beq.n	80048be <USB_DeactivateEndpoint+0xf6>
 8004886:	687a      	ldr	r2, [r7, #4]
 8004888:	683b      	ldr	r3, [r7, #0]
 800488a:	781b      	ldrb	r3, [r3, #0]
 800488c:	009b      	lsls	r3, r3, #2
 800488e:	4413      	add	r3, r2
 8004890:	881b      	ldrh	r3, [r3, #0]
 8004892:	b29b      	uxth	r3, r3
 8004894:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8004898:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800489c:	823b      	strh	r3, [r7, #16]
 800489e:	687a      	ldr	r2, [r7, #4]
 80048a0:	683b      	ldr	r3, [r7, #0]
 80048a2:	781b      	ldrb	r3, [r3, #0]
 80048a4:	009b      	lsls	r3, r3, #2
 80048a6:	441a      	add	r2, r3
 80048a8:	8a3b      	ldrh	r3, [r7, #16]
 80048aa:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 80048ae:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 80048b2:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 80048b6:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80048ba:	b29b      	uxth	r3, r3
 80048bc:	8013      	strh	r3, [r2, #0]

      /* Configure DISABLE status for the Endpoint*/
      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_DIS);
 80048be:	687a      	ldr	r2, [r7, #4]
 80048c0:	683b      	ldr	r3, [r7, #0]
 80048c2:	781b      	ldrb	r3, [r3, #0]
 80048c4:	009b      	lsls	r3, r3, #2
 80048c6:	4413      	add	r3, r2
 80048c8:	881b      	ldrh	r3, [r3, #0]
 80048ca:	b29b      	uxth	r3, r3
 80048cc:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 80048d0:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80048d4:	81fb      	strh	r3, [r7, #14]
 80048d6:	687a      	ldr	r2, [r7, #4]
 80048d8:	683b      	ldr	r3, [r7, #0]
 80048da:	781b      	ldrb	r3, [r3, #0]
 80048dc:	009b      	lsls	r3, r3, #2
 80048de:	441a      	add	r2, r3
 80048e0:	89fb      	ldrh	r3, [r7, #14]
 80048e2:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 80048e6:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 80048ea:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80048ee:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80048f2:	b29b      	uxth	r3, r3
 80048f4:	8013      	strh	r3, [r2, #0]
 80048f6:	e14d      	b.n	8004b94 <USB_DeactivateEndpoint+0x3cc>
    }
  }
  /*Double Buffer*/
  else
  {
    if (ep->is_in == 0U)
 80048f8:	683b      	ldr	r3, [r7, #0]
 80048fa:	785b      	ldrb	r3, [r3, #1]
 80048fc:	2b00      	cmp	r3, #0
 80048fe:	f040 80a5 	bne.w	8004a4c <USB_DeactivateEndpoint+0x284>
    {
      /* Clear the data toggle bits for the endpoint IN/OUT*/
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 8004902:	687a      	ldr	r2, [r7, #4]
 8004904:	683b      	ldr	r3, [r7, #0]
 8004906:	781b      	ldrb	r3, [r3, #0]
 8004908:	009b      	lsls	r3, r3, #2
 800490a:	4413      	add	r3, r2
 800490c:	881b      	ldrh	r3, [r3, #0]
 800490e:	843b      	strh	r3, [r7, #32]
 8004910:	8c3b      	ldrh	r3, [r7, #32]
 8004912:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8004916:	2b00      	cmp	r3, #0
 8004918:	d01b      	beq.n	8004952 <USB_DeactivateEndpoint+0x18a>
 800491a:	687a      	ldr	r2, [r7, #4]
 800491c:	683b      	ldr	r3, [r7, #0]
 800491e:	781b      	ldrb	r3, [r3, #0]
 8004920:	009b      	lsls	r3, r3, #2
 8004922:	4413      	add	r3, r2
 8004924:	881b      	ldrh	r3, [r3, #0]
 8004926:	b29b      	uxth	r3, r3
 8004928:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800492c:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8004930:	83fb      	strh	r3, [r7, #30]
 8004932:	687a      	ldr	r2, [r7, #4]
 8004934:	683b      	ldr	r3, [r7, #0]
 8004936:	781b      	ldrb	r3, [r3, #0]
 8004938:	009b      	lsls	r3, r3, #2
 800493a:	441a      	add	r2, r3
 800493c:	8bfb      	ldrh	r3, [r7, #30]
 800493e:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8004942:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8004946:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 800494a:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800494e:	b29b      	uxth	r3, r3
 8004950:	8013      	strh	r3, [r2, #0]
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 8004952:	687a      	ldr	r2, [r7, #4]
 8004954:	683b      	ldr	r3, [r7, #0]
 8004956:	781b      	ldrb	r3, [r3, #0]
 8004958:	009b      	lsls	r3, r3, #2
 800495a:	4413      	add	r3, r2
 800495c:	881b      	ldrh	r3, [r3, #0]
 800495e:	83bb      	strh	r3, [r7, #28]
 8004960:	8bbb      	ldrh	r3, [r7, #28]
 8004962:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004966:	2b00      	cmp	r3, #0
 8004968:	d01b      	beq.n	80049a2 <USB_DeactivateEndpoint+0x1da>
 800496a:	687a      	ldr	r2, [r7, #4]
 800496c:	683b      	ldr	r3, [r7, #0]
 800496e:	781b      	ldrb	r3, [r3, #0]
 8004970:	009b      	lsls	r3, r3, #2
 8004972:	4413      	add	r3, r2
 8004974:	881b      	ldrh	r3, [r3, #0]
 8004976:	b29b      	uxth	r3, r3
 8004978:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800497c:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8004980:	837b      	strh	r3, [r7, #26]
 8004982:	687a      	ldr	r2, [r7, #4]
 8004984:	683b      	ldr	r3, [r7, #0]
 8004986:	781b      	ldrb	r3, [r3, #0]
 8004988:	009b      	lsls	r3, r3, #2
 800498a:	441a      	add	r2, r3
 800498c:	8b7b      	ldrh	r3, [r7, #26]
 800498e:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8004992:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8004996:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800499a:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 800499e:	b29b      	uxth	r3, r3
 80049a0:	8013      	strh	r3, [r2, #0]

      /* Reset value of the data toggle bits for the endpoint out*/
      PCD_TX_DTOG(USBx, ep->num);
 80049a2:	687a      	ldr	r2, [r7, #4]
 80049a4:	683b      	ldr	r3, [r7, #0]
 80049a6:	781b      	ldrb	r3, [r3, #0]
 80049a8:	009b      	lsls	r3, r3, #2
 80049aa:	4413      	add	r3, r2
 80049ac:	881b      	ldrh	r3, [r3, #0]
 80049ae:	b29b      	uxth	r3, r3
 80049b0:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80049b4:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80049b8:	833b      	strh	r3, [r7, #24]
 80049ba:	687a      	ldr	r2, [r7, #4]
 80049bc:	683b      	ldr	r3, [r7, #0]
 80049be:	781b      	ldrb	r3, [r3, #0]
 80049c0:	009b      	lsls	r3, r3, #2
 80049c2:	441a      	add	r2, r3
 80049c4:	8b3b      	ldrh	r3, [r7, #24]
 80049c6:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 80049ca:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 80049ce:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80049d2:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 80049d6:	b29b      	uxth	r3, r3
 80049d8:	8013      	strh	r3, [r2, #0]

      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_DIS);
 80049da:	687a      	ldr	r2, [r7, #4]
 80049dc:	683b      	ldr	r3, [r7, #0]
 80049de:	781b      	ldrb	r3, [r3, #0]
 80049e0:	009b      	lsls	r3, r3, #2
 80049e2:	4413      	add	r3, r2
 80049e4:	881b      	ldrh	r3, [r3, #0]
 80049e6:	b29b      	uxth	r3, r3
 80049e8:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 80049ec:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80049f0:	82fb      	strh	r3, [r7, #22]
 80049f2:	687a      	ldr	r2, [r7, #4]
 80049f4:	683b      	ldr	r3, [r7, #0]
 80049f6:	781b      	ldrb	r3, [r3, #0]
 80049f8:	009b      	lsls	r3, r3, #2
 80049fa:	441a      	add	r2, r3
 80049fc:	8afb      	ldrh	r3, [r7, #22]
 80049fe:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8004a02:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8004a06:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8004a0a:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8004a0e:	b29b      	uxth	r3, r3
 8004a10:	8013      	strh	r3, [r2, #0]
      PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_DIS);
 8004a12:	687a      	ldr	r2, [r7, #4]
 8004a14:	683b      	ldr	r3, [r7, #0]
 8004a16:	781b      	ldrb	r3, [r3, #0]
 8004a18:	009b      	lsls	r3, r3, #2
 8004a1a:	4413      	add	r3, r2
 8004a1c:	881b      	ldrh	r3, [r3, #0]
 8004a1e:	b29b      	uxth	r3, r3
 8004a20:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8004a24:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8004a28:	82bb      	strh	r3, [r7, #20]
 8004a2a:	687a      	ldr	r2, [r7, #4]
 8004a2c:	683b      	ldr	r3, [r7, #0]
 8004a2e:	781b      	ldrb	r3, [r3, #0]
 8004a30:	009b      	lsls	r3, r3, #2
 8004a32:	441a      	add	r2, r3
 8004a34:	8abb      	ldrh	r3, [r7, #20]
 8004a36:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8004a3a:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8004a3e:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8004a42:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8004a46:	b29b      	uxth	r3, r3
 8004a48:	8013      	strh	r3, [r2, #0]
 8004a4a:	e0a3      	b.n	8004b94 <USB_DeactivateEndpoint+0x3cc>
    }
    else
    {
      /* Clear the data toggle bits for the endpoint IN/OUT*/
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 8004a4c:	687a      	ldr	r2, [r7, #4]
 8004a4e:	683b      	ldr	r3, [r7, #0]
 8004a50:	781b      	ldrb	r3, [r3, #0]
 8004a52:	009b      	lsls	r3, r3, #2
 8004a54:	4413      	add	r3, r2
 8004a56:	881b      	ldrh	r3, [r3, #0]
 8004a58:	85fb      	strh	r3, [r7, #46]	; 0x2e
 8004a5a:	8dfb      	ldrh	r3, [r7, #46]	; 0x2e
 8004a5c:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8004a60:	2b00      	cmp	r3, #0
 8004a62:	d01b      	beq.n	8004a9c <USB_DeactivateEndpoint+0x2d4>
 8004a64:	687a      	ldr	r2, [r7, #4]
 8004a66:	683b      	ldr	r3, [r7, #0]
 8004a68:	781b      	ldrb	r3, [r3, #0]
 8004a6a:	009b      	lsls	r3, r3, #2
 8004a6c:	4413      	add	r3, r2
 8004a6e:	881b      	ldrh	r3, [r3, #0]
 8004a70:	b29b      	uxth	r3, r3
 8004a72:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8004a76:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8004a7a:	85bb      	strh	r3, [r7, #44]	; 0x2c
 8004a7c:	687a      	ldr	r2, [r7, #4]
 8004a7e:	683b      	ldr	r3, [r7, #0]
 8004a80:	781b      	ldrb	r3, [r3, #0]
 8004a82:	009b      	lsls	r3, r3, #2
 8004a84:	441a      	add	r2, r3
 8004a86:	8dbb      	ldrh	r3, [r7, #44]	; 0x2c
 8004a88:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8004a8c:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8004a90:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8004a94:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8004a98:	b29b      	uxth	r3, r3
 8004a9a:	8013      	strh	r3, [r2, #0]
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 8004a9c:	687a      	ldr	r2, [r7, #4]
 8004a9e:	683b      	ldr	r3, [r7, #0]
 8004aa0:	781b      	ldrb	r3, [r3, #0]
 8004aa2:	009b      	lsls	r3, r3, #2
 8004aa4:	4413      	add	r3, r2
 8004aa6:	881b      	ldrh	r3, [r3, #0]
 8004aa8:	857b      	strh	r3, [r7, #42]	; 0x2a
 8004aaa:	8d7b      	ldrh	r3, [r7, #42]	; 0x2a
 8004aac:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004ab0:	2b00      	cmp	r3, #0
 8004ab2:	d01b      	beq.n	8004aec <USB_DeactivateEndpoint+0x324>
 8004ab4:	687a      	ldr	r2, [r7, #4]
 8004ab6:	683b      	ldr	r3, [r7, #0]
 8004ab8:	781b      	ldrb	r3, [r3, #0]
 8004aba:	009b      	lsls	r3, r3, #2
 8004abc:	4413      	add	r3, r2
 8004abe:	881b      	ldrh	r3, [r3, #0]
 8004ac0:	b29b      	uxth	r3, r3
 8004ac2:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8004ac6:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8004aca:	853b      	strh	r3, [r7, #40]	; 0x28
 8004acc:	687a      	ldr	r2, [r7, #4]
 8004ace:	683b      	ldr	r3, [r7, #0]
 8004ad0:	781b      	ldrb	r3, [r3, #0]
 8004ad2:	009b      	lsls	r3, r3, #2
 8004ad4:	441a      	add	r2, r3
 8004ad6:	8d3b      	ldrh	r3, [r7, #40]	; 0x28
 8004ad8:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8004adc:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8004ae0:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8004ae4:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 8004ae8:	b29b      	uxth	r3, r3
 8004aea:	8013      	strh	r3, [r2, #0]
      PCD_RX_DTOG(USBx, ep->num);
 8004aec:	687a      	ldr	r2, [r7, #4]
 8004aee:	683b      	ldr	r3, [r7, #0]
 8004af0:	781b      	ldrb	r3, [r3, #0]
 8004af2:	009b      	lsls	r3, r3, #2
 8004af4:	4413      	add	r3, r2
 8004af6:	881b      	ldrh	r3, [r3, #0]
 8004af8:	b29b      	uxth	r3, r3
 8004afa:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8004afe:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8004b02:	84fb      	strh	r3, [r7, #38]	; 0x26
 8004b04:	687a      	ldr	r2, [r7, #4]
 8004b06:	683b      	ldr	r3, [r7, #0]
 8004b08:	781b      	ldrb	r3, [r3, #0]
 8004b0a:	009b      	lsls	r3, r3, #2
 8004b0c:	441a      	add	r2, r3
 8004b0e:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 8004b10:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8004b14:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8004b18:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8004b1c:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8004b20:	b29b      	uxth	r3, r3
 8004b22:	8013      	strh	r3, [r2, #0]

      /* Configure DISABLE status for the Endpoint*/
      PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_DIS);
 8004b24:	687a      	ldr	r2, [r7, #4]
 8004b26:	683b      	ldr	r3, [r7, #0]
 8004b28:	781b      	ldrb	r3, [r3, #0]
 8004b2a:	009b      	lsls	r3, r3, #2
 8004b2c:	4413      	add	r3, r2
 8004b2e:	881b      	ldrh	r3, [r3, #0]
 8004b30:	b29b      	uxth	r3, r3
 8004b32:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8004b36:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8004b3a:	84bb      	strh	r3, [r7, #36]	; 0x24
 8004b3c:	687a      	ldr	r2, [r7, #4]
 8004b3e:	683b      	ldr	r3, [r7, #0]
 8004b40:	781b      	ldrb	r3, [r3, #0]
 8004b42:	009b      	lsls	r3, r3, #2
 8004b44:	441a      	add	r2, r3
 8004b46:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8004b48:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8004b4c:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8004b50:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8004b54:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8004b58:	b29b      	uxth	r3, r3
 8004b5a:	8013      	strh	r3, [r2, #0]
      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_DIS);
 8004b5c:	687a      	ldr	r2, [r7, #4]
 8004b5e:	683b      	ldr	r3, [r7, #0]
 8004b60:	781b      	ldrb	r3, [r3, #0]
 8004b62:	009b      	lsls	r3, r3, #2
 8004b64:	4413      	add	r3, r2
 8004b66:	881b      	ldrh	r3, [r3, #0]
 8004b68:	b29b      	uxth	r3, r3
 8004b6a:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8004b6e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8004b72:	847b      	strh	r3, [r7, #34]	; 0x22
 8004b74:	687a      	ldr	r2, [r7, #4]
 8004b76:	683b      	ldr	r3, [r7, #0]
 8004b78:	781b      	ldrb	r3, [r3, #0]
 8004b7a:	009b      	lsls	r3, r3, #2
 8004b7c:	441a      	add	r2, r3
 8004b7e:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 8004b80:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8004b84:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8004b88:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8004b8c:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8004b90:	b29b      	uxth	r3, r3
 8004b92:	8013      	strh	r3, [r2, #0]
    }
  }

  return HAL_OK;
 8004b94:	2300      	movs	r3, #0
}
 8004b96:	4618      	mov	r0, r3
 8004b98:	3734      	adds	r7, #52	; 0x34
 8004b9a:	46bd      	mov	sp, r7
 8004b9c:	bc80      	pop	{r7}
 8004b9e:	4770      	bx	lr

08004ba0 <USB_EPStartXfer>:
  * @param  USBx Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPStartXfer(USB_TypeDef *USBx, USB_EPTypeDef *ep)
{
 8004ba0:	b580      	push	{r7, lr}
 8004ba2:	b0c4      	sub	sp, #272	; 0x110
 8004ba4:	af00      	add	r7, sp, #0
 8004ba6:	1d3b      	adds	r3, r7, #4
 8004ba8:	6018      	str	r0, [r3, #0]
 8004baa:	463b      	mov	r3, r7
 8004bac:	6019      	str	r1, [r3, #0]
  uint32_t len;
  uint16_t pmabuffer;
  uint16_t wEPVal;

  /* IN endpoint */
  if (ep->is_in == 1U)
 8004bae:	463b      	mov	r3, r7
 8004bb0:	681b      	ldr	r3, [r3, #0]
 8004bb2:	785b      	ldrb	r3, [r3, #1]
 8004bb4:	2b01      	cmp	r3, #1
 8004bb6:	f040 8557 	bne.w	8005668 <USB_EPStartXfer+0xac8>
  {
    /*Multi packet transfer*/
    if (ep->xfer_len > ep->maxpacket)
 8004bba:	463b      	mov	r3, r7
 8004bbc:	681b      	ldr	r3, [r3, #0]
 8004bbe:	699a      	ldr	r2, [r3, #24]
 8004bc0:	463b      	mov	r3, r7
 8004bc2:	681b      	ldr	r3, [r3, #0]
 8004bc4:	691b      	ldr	r3, [r3, #16]
 8004bc6:	429a      	cmp	r2, r3
 8004bc8:	d905      	bls.n	8004bd6 <USB_EPStartXfer+0x36>
    {
      len = ep->maxpacket;
 8004bca:	463b      	mov	r3, r7
 8004bcc:	681b      	ldr	r3, [r3, #0]
 8004bce:	691b      	ldr	r3, [r3, #16]
 8004bd0:	f8c7 310c 	str.w	r3, [r7, #268]	; 0x10c
 8004bd4:	e004      	b.n	8004be0 <USB_EPStartXfer+0x40>
    }
    else
    {
      len = ep->xfer_len;
 8004bd6:	463b      	mov	r3, r7
 8004bd8:	681b      	ldr	r3, [r3, #0]
 8004bda:	699b      	ldr	r3, [r3, #24]
 8004bdc:	f8c7 310c 	str.w	r3, [r7, #268]	; 0x10c
    }

    /* configure and validate Tx endpoint */
    if (ep->doublebuffer == 0U)
 8004be0:	463b      	mov	r3, r7
 8004be2:	681b      	ldr	r3, [r3, #0]
 8004be4:	7b1b      	ldrb	r3, [r3, #12]
 8004be6:	2b00      	cmp	r3, #0
 8004be8:	d12c      	bne.n	8004c44 <USB_EPStartXfer+0xa4>
    {
      USB_WritePMA(USBx, ep->xfer_buff, ep->pmaadress, (uint16_t)len);
 8004bea:	463b      	mov	r3, r7
 8004bec:	681b      	ldr	r3, [r3, #0]
 8004bee:	6959      	ldr	r1, [r3, #20]
 8004bf0:	463b      	mov	r3, r7
 8004bf2:	681b      	ldr	r3, [r3, #0]
 8004bf4:	88da      	ldrh	r2, [r3, #6]
 8004bf6:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8004bfa:	b29b      	uxth	r3, r3
 8004bfc:	1d38      	adds	r0, r7, #4
 8004bfe:	6800      	ldr	r0, [r0, #0]
 8004c00:	f001 fa2c 	bl	800605c <USB_WritePMA>
      PCD_SET_EP_TX_CNT(USBx, ep->num, len);
 8004c04:	1d3b      	adds	r3, r7, #4
 8004c06:	681b      	ldr	r3, [r3, #0]
 8004c08:	617b      	str	r3, [r7, #20]
 8004c0a:	1d3b      	adds	r3, r7, #4
 8004c0c:	681b      	ldr	r3, [r3, #0]
 8004c0e:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8004c12:	b29b      	uxth	r3, r3
 8004c14:	461a      	mov	r2, r3
 8004c16:	697b      	ldr	r3, [r7, #20]
 8004c18:	4413      	add	r3, r2
 8004c1a:	617b      	str	r3, [r7, #20]
 8004c1c:	463b      	mov	r3, r7
 8004c1e:	681b      	ldr	r3, [r3, #0]
 8004c20:	781b      	ldrb	r3, [r3, #0]
 8004c22:	011a      	lsls	r2, r3, #4
 8004c24:	697b      	ldr	r3, [r7, #20]
 8004c26:	4413      	add	r3, r2
 8004c28:	f203 4204 	addw	r2, r3, #1028	; 0x404
 8004c2c:	f107 0310 	add.w	r3, r7, #16
 8004c30:	601a      	str	r2, [r3, #0]
 8004c32:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8004c36:	b29a      	uxth	r2, r3
 8004c38:	f107 0310 	add.w	r3, r7, #16
 8004c3c:	681b      	ldr	r3, [r3, #0]
 8004c3e:	801a      	strh	r2, [r3, #0]
 8004c40:	f000 bcdd 	b.w	80055fe <USB_EPStartXfer+0xa5e>
    }
    else
    {
      /* double buffer bulk management */
      if (ep->type == EP_TYPE_BULK)
 8004c44:	463b      	mov	r3, r7
 8004c46:	681b      	ldr	r3, [r3, #0]
 8004c48:	78db      	ldrb	r3, [r3, #3]
 8004c4a:	2b02      	cmp	r3, #2
 8004c4c:	f040 8347 	bne.w	80052de <USB_EPStartXfer+0x73e>
      {
        if (ep->xfer_len_db > ep->maxpacket)
 8004c50:	463b      	mov	r3, r7
 8004c52:	681b      	ldr	r3, [r3, #0]
 8004c54:	6a1a      	ldr	r2, [r3, #32]
 8004c56:	463b      	mov	r3, r7
 8004c58:	681b      	ldr	r3, [r3, #0]
 8004c5a:	691b      	ldr	r3, [r3, #16]
 8004c5c:	429a      	cmp	r2, r3
 8004c5e:	f240 82eb 	bls.w	8005238 <USB_EPStartXfer+0x698>
        {
          /* enable double buffer */
          PCD_SET_EP_DBUF(USBx, ep->num);
 8004c62:	1d3b      	adds	r3, r7, #4
 8004c64:	681a      	ldr	r2, [r3, #0]
 8004c66:	463b      	mov	r3, r7
 8004c68:	681b      	ldr	r3, [r3, #0]
 8004c6a:	781b      	ldrb	r3, [r3, #0]
 8004c6c:	009b      	lsls	r3, r3, #2
 8004c6e:	4413      	add	r3, r2
 8004c70:	881b      	ldrh	r3, [r3, #0]
 8004c72:	b29b      	uxth	r3, r3
 8004c74:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8004c78:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8004c7c:	f8a7 305a 	strh.w	r3, [r7, #90]	; 0x5a
 8004c80:	1d3b      	adds	r3, r7, #4
 8004c82:	681a      	ldr	r2, [r3, #0]
 8004c84:	463b      	mov	r3, r7
 8004c86:	681b      	ldr	r3, [r3, #0]
 8004c88:	781b      	ldrb	r3, [r3, #0]
 8004c8a:	009b      	lsls	r3, r3, #2
 8004c8c:	441a      	add	r2, r3
 8004c8e:	f8b7 305a 	ldrh.w	r3, [r7, #90]	; 0x5a
 8004c92:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8004c96:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8004c9a:	f443 4301 	orr.w	r3, r3, #33024	; 0x8100
 8004c9e:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8004ca2:	b29b      	uxth	r3, r3
 8004ca4:	8013      	strh	r3, [r2, #0]

          /* each Time to write in PMA xfer_len_db will */
          ep->xfer_len_db -= len;
 8004ca6:	463b      	mov	r3, r7
 8004ca8:	681b      	ldr	r3, [r3, #0]
 8004caa:	6a1a      	ldr	r2, [r3, #32]
 8004cac:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8004cb0:	1ad2      	subs	r2, r2, r3
 8004cb2:	463b      	mov	r3, r7
 8004cb4:	681b      	ldr	r3, [r3, #0]
 8004cb6:	621a      	str	r2, [r3, #32]

          /* Fill the two first buffer in the Buffer0 & Buffer1 */
          if ((PCD_GET_ENDPOINT(USBx, ep->num) & USB_EP_DTOG_TX) != 0U)
 8004cb8:	1d3b      	adds	r3, r7, #4
 8004cba:	681a      	ldr	r2, [r3, #0]
 8004cbc:	463b      	mov	r3, r7
 8004cbe:	681b      	ldr	r3, [r3, #0]
 8004cc0:	781b      	ldrb	r3, [r3, #0]
 8004cc2:	009b      	lsls	r3, r3, #2
 8004cc4:	4413      	add	r3, r2
 8004cc6:	881b      	ldrh	r3, [r3, #0]
 8004cc8:	b29b      	uxth	r3, r3
 8004cca:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004cce:	2b00      	cmp	r3, #0
 8004cd0:	f000 8159 	beq.w	8004f86 <USB_EPStartXfer+0x3e6>
          {
            /* Set the Double buffer counter for pmabuffer1 */
            PCD_SET_EP_DBUF1_CNT(USBx, ep->num, ep->is_in, len);
 8004cd4:	1d3b      	adds	r3, r7, #4
 8004cd6:	681b      	ldr	r3, [r3, #0]
 8004cd8:	637b      	str	r3, [r7, #52]	; 0x34
 8004cda:	463b      	mov	r3, r7
 8004cdc:	681b      	ldr	r3, [r3, #0]
 8004cde:	785b      	ldrb	r3, [r3, #1]
 8004ce0:	2b00      	cmp	r3, #0
 8004ce2:	d164      	bne.n	8004dae <USB_EPStartXfer+0x20e>
 8004ce4:	1d3b      	adds	r3, r7, #4
 8004ce6:	681b      	ldr	r3, [r3, #0]
 8004ce8:	62fb      	str	r3, [r7, #44]	; 0x2c
 8004cea:	1d3b      	adds	r3, r7, #4
 8004cec:	681b      	ldr	r3, [r3, #0]
 8004cee:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8004cf2:	b29b      	uxth	r3, r3
 8004cf4:	461a      	mov	r2, r3
 8004cf6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004cf8:	4413      	add	r3, r2
 8004cfa:	62fb      	str	r3, [r7, #44]	; 0x2c
 8004cfc:	463b      	mov	r3, r7
 8004cfe:	681b      	ldr	r3, [r3, #0]
 8004d00:	781b      	ldrb	r3, [r3, #0]
 8004d02:	011a      	lsls	r2, r3, #4
 8004d04:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004d06:	4413      	add	r3, r2
 8004d08:	f203 430c 	addw	r3, r3, #1036	; 0x40c
 8004d0c:	62bb      	str	r3, [r7, #40]	; 0x28
 8004d0e:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8004d12:	2b00      	cmp	r3, #0
 8004d14:	d112      	bne.n	8004d3c <USB_EPStartXfer+0x19c>
 8004d16:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004d18:	881b      	ldrh	r3, [r3, #0]
 8004d1a:	b29b      	uxth	r3, r3
 8004d1c:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 8004d20:	b29a      	uxth	r2, r3
 8004d22:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004d24:	801a      	strh	r2, [r3, #0]
 8004d26:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004d28:	881b      	ldrh	r3, [r3, #0]
 8004d2a:	b29b      	uxth	r3, r3
 8004d2c:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8004d30:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8004d34:	b29a      	uxth	r2, r3
 8004d36:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004d38:	801a      	strh	r2, [r3, #0]
 8004d3a:	e054      	b.n	8004de6 <USB_EPStartXfer+0x246>
 8004d3c:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8004d40:	2b3e      	cmp	r3, #62	; 0x3e
 8004d42:	d817      	bhi.n	8004d74 <USB_EPStartXfer+0x1d4>
 8004d44:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8004d48:	085b      	lsrs	r3, r3, #1
 8004d4a:	f8c7 3104 	str.w	r3, [r7, #260]	; 0x104
 8004d4e:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8004d52:	f003 0301 	and.w	r3, r3, #1
 8004d56:	2b00      	cmp	r3, #0
 8004d58:	d004      	beq.n	8004d64 <USB_EPStartXfer+0x1c4>
 8004d5a:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8004d5e:	3301      	adds	r3, #1
 8004d60:	f8c7 3104 	str.w	r3, [r7, #260]	; 0x104
 8004d64:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8004d68:	b29b      	uxth	r3, r3
 8004d6a:	029b      	lsls	r3, r3, #10
 8004d6c:	b29a      	uxth	r2, r3
 8004d6e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004d70:	801a      	strh	r2, [r3, #0]
 8004d72:	e038      	b.n	8004de6 <USB_EPStartXfer+0x246>
 8004d74:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8004d78:	095b      	lsrs	r3, r3, #5
 8004d7a:	f8c7 3104 	str.w	r3, [r7, #260]	; 0x104
 8004d7e:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8004d82:	f003 031f 	and.w	r3, r3, #31
 8004d86:	2b00      	cmp	r3, #0
 8004d88:	d104      	bne.n	8004d94 <USB_EPStartXfer+0x1f4>
 8004d8a:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8004d8e:	3b01      	subs	r3, #1
 8004d90:	f8c7 3104 	str.w	r3, [r7, #260]	; 0x104
 8004d94:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8004d98:	b29b      	uxth	r3, r3
 8004d9a:	029b      	lsls	r3, r3, #10
 8004d9c:	b29b      	uxth	r3, r3
 8004d9e:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8004da2:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8004da6:	b29a      	uxth	r2, r3
 8004da8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004daa:	801a      	strh	r2, [r3, #0]
 8004dac:	e01b      	b.n	8004de6 <USB_EPStartXfer+0x246>
 8004dae:	463b      	mov	r3, r7
 8004db0:	681b      	ldr	r3, [r3, #0]
 8004db2:	785b      	ldrb	r3, [r3, #1]
 8004db4:	2b01      	cmp	r3, #1
 8004db6:	d116      	bne.n	8004de6 <USB_EPStartXfer+0x246>
 8004db8:	1d3b      	adds	r3, r7, #4
 8004dba:	681b      	ldr	r3, [r3, #0]
 8004dbc:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8004dc0:	b29b      	uxth	r3, r3
 8004dc2:	461a      	mov	r2, r3
 8004dc4:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8004dc6:	4413      	add	r3, r2
 8004dc8:	637b      	str	r3, [r7, #52]	; 0x34
 8004dca:	463b      	mov	r3, r7
 8004dcc:	681b      	ldr	r3, [r3, #0]
 8004dce:	781b      	ldrb	r3, [r3, #0]
 8004dd0:	011a      	lsls	r2, r3, #4
 8004dd2:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8004dd4:	4413      	add	r3, r2
 8004dd6:	f203 430c 	addw	r3, r3, #1036	; 0x40c
 8004dda:	633b      	str	r3, [r7, #48]	; 0x30
 8004ddc:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8004de0:	b29a      	uxth	r2, r3
 8004de2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004de4:	801a      	strh	r2, [r3, #0]
            pmabuffer = ep->pmaaddr1;
 8004de6:	463b      	mov	r3, r7
 8004de8:	681b      	ldr	r3, [r3, #0]
 8004dea:	895b      	ldrh	r3, [r3, #10]
 8004dec:	f8a7 310a 	strh.w	r3, [r7, #266]	; 0x10a

            /* Write the user buffer to USB PMA */
            USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 8004df0:	463b      	mov	r3, r7
 8004df2:	681b      	ldr	r3, [r3, #0]
 8004df4:	6959      	ldr	r1, [r3, #20]
 8004df6:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8004dfa:	b29b      	uxth	r3, r3
 8004dfc:	f8b7 210a 	ldrh.w	r2, [r7, #266]	; 0x10a
 8004e00:	1d38      	adds	r0, r7, #4
 8004e02:	6800      	ldr	r0, [r0, #0]
 8004e04:	f001 f92a 	bl	800605c <USB_WritePMA>
            ep->xfer_buff += len;
 8004e08:	463b      	mov	r3, r7
 8004e0a:	681b      	ldr	r3, [r3, #0]
 8004e0c:	695a      	ldr	r2, [r3, #20]
 8004e0e:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8004e12:	441a      	add	r2, r3
 8004e14:	463b      	mov	r3, r7
 8004e16:	681b      	ldr	r3, [r3, #0]
 8004e18:	615a      	str	r2, [r3, #20]

            if (ep->xfer_len_db > ep->maxpacket)
 8004e1a:	463b      	mov	r3, r7
 8004e1c:	681b      	ldr	r3, [r3, #0]
 8004e1e:	6a1a      	ldr	r2, [r3, #32]
 8004e20:	463b      	mov	r3, r7
 8004e22:	681b      	ldr	r3, [r3, #0]
 8004e24:	691b      	ldr	r3, [r3, #16]
 8004e26:	429a      	cmp	r2, r3
 8004e28:	d909      	bls.n	8004e3e <USB_EPStartXfer+0x29e>
            {
              ep->xfer_len_db -= len;
 8004e2a:	463b      	mov	r3, r7
 8004e2c:	681b      	ldr	r3, [r3, #0]
 8004e2e:	6a1a      	ldr	r2, [r3, #32]
 8004e30:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8004e34:	1ad2      	subs	r2, r2, r3
 8004e36:	463b      	mov	r3, r7
 8004e38:	681b      	ldr	r3, [r3, #0]
 8004e3a:	621a      	str	r2, [r3, #32]
 8004e3c:	e008      	b.n	8004e50 <USB_EPStartXfer+0x2b0>
            }
            else
            {
              len = ep->xfer_len_db;
 8004e3e:	463b      	mov	r3, r7
 8004e40:	681b      	ldr	r3, [r3, #0]
 8004e42:	6a1b      	ldr	r3, [r3, #32]
 8004e44:	f8c7 310c 	str.w	r3, [r7, #268]	; 0x10c
              ep->xfer_len_db = 0U;
 8004e48:	463b      	mov	r3, r7
 8004e4a:	681b      	ldr	r3, [r3, #0]
 8004e4c:	2200      	movs	r2, #0
 8004e4e:	621a      	str	r2, [r3, #32]
            }

            /* Set the Double buffer counter for pmabuffer0 */
            PCD_SET_EP_DBUF0_CNT(USBx, ep->num, ep->is_in, len);
 8004e50:	463b      	mov	r3, r7
 8004e52:	681b      	ldr	r3, [r3, #0]
 8004e54:	785b      	ldrb	r3, [r3, #1]
 8004e56:	2b00      	cmp	r3, #0
 8004e58:	d164      	bne.n	8004f24 <USB_EPStartXfer+0x384>
 8004e5a:	1d3b      	adds	r3, r7, #4
 8004e5c:	681b      	ldr	r3, [r3, #0]
 8004e5e:	61fb      	str	r3, [r7, #28]
 8004e60:	1d3b      	adds	r3, r7, #4
 8004e62:	681b      	ldr	r3, [r3, #0]
 8004e64:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8004e68:	b29b      	uxth	r3, r3
 8004e6a:	461a      	mov	r2, r3
 8004e6c:	69fb      	ldr	r3, [r7, #28]
 8004e6e:	4413      	add	r3, r2
 8004e70:	61fb      	str	r3, [r7, #28]
 8004e72:	463b      	mov	r3, r7
 8004e74:	681b      	ldr	r3, [r3, #0]
 8004e76:	781b      	ldrb	r3, [r3, #0]
 8004e78:	011a      	lsls	r2, r3, #4
 8004e7a:	69fb      	ldr	r3, [r7, #28]
 8004e7c:	4413      	add	r3, r2
 8004e7e:	f203 4304 	addw	r3, r3, #1028	; 0x404
 8004e82:	61bb      	str	r3, [r7, #24]
 8004e84:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8004e88:	2b00      	cmp	r3, #0
 8004e8a:	d112      	bne.n	8004eb2 <USB_EPStartXfer+0x312>
 8004e8c:	69bb      	ldr	r3, [r7, #24]
 8004e8e:	881b      	ldrh	r3, [r3, #0]
 8004e90:	b29b      	uxth	r3, r3
 8004e92:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 8004e96:	b29a      	uxth	r2, r3
 8004e98:	69bb      	ldr	r3, [r7, #24]
 8004e9a:	801a      	strh	r2, [r3, #0]
 8004e9c:	69bb      	ldr	r3, [r7, #24]
 8004e9e:	881b      	ldrh	r3, [r3, #0]
 8004ea0:	b29b      	uxth	r3, r3
 8004ea2:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8004ea6:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8004eaa:	b29a      	uxth	r2, r3
 8004eac:	69bb      	ldr	r3, [r7, #24]
 8004eae:	801a      	strh	r2, [r3, #0]
 8004eb0:	e057      	b.n	8004f62 <USB_EPStartXfer+0x3c2>
 8004eb2:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8004eb6:	2b3e      	cmp	r3, #62	; 0x3e
 8004eb8:	d817      	bhi.n	8004eea <USB_EPStartXfer+0x34a>
 8004eba:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8004ebe:	085b      	lsrs	r3, r3, #1
 8004ec0:	f8c7 3100 	str.w	r3, [r7, #256]	; 0x100
 8004ec4:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8004ec8:	f003 0301 	and.w	r3, r3, #1
 8004ecc:	2b00      	cmp	r3, #0
 8004ece:	d004      	beq.n	8004eda <USB_EPStartXfer+0x33a>
 8004ed0:	f8d7 3100 	ldr.w	r3, [r7, #256]	; 0x100
 8004ed4:	3301      	adds	r3, #1
 8004ed6:	f8c7 3100 	str.w	r3, [r7, #256]	; 0x100
 8004eda:	f8d7 3100 	ldr.w	r3, [r7, #256]	; 0x100
 8004ede:	b29b      	uxth	r3, r3
 8004ee0:	029b      	lsls	r3, r3, #10
 8004ee2:	b29a      	uxth	r2, r3
 8004ee4:	69bb      	ldr	r3, [r7, #24]
 8004ee6:	801a      	strh	r2, [r3, #0]
 8004ee8:	e03b      	b.n	8004f62 <USB_EPStartXfer+0x3c2>
 8004eea:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8004eee:	095b      	lsrs	r3, r3, #5
 8004ef0:	f8c7 3100 	str.w	r3, [r7, #256]	; 0x100
 8004ef4:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8004ef8:	f003 031f 	and.w	r3, r3, #31
 8004efc:	2b00      	cmp	r3, #0
 8004efe:	d104      	bne.n	8004f0a <USB_EPStartXfer+0x36a>
 8004f00:	f8d7 3100 	ldr.w	r3, [r7, #256]	; 0x100
 8004f04:	3b01      	subs	r3, #1
 8004f06:	f8c7 3100 	str.w	r3, [r7, #256]	; 0x100
 8004f0a:	f8d7 3100 	ldr.w	r3, [r7, #256]	; 0x100
 8004f0e:	b29b      	uxth	r3, r3
 8004f10:	029b      	lsls	r3, r3, #10
 8004f12:	b29b      	uxth	r3, r3
 8004f14:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8004f18:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8004f1c:	b29a      	uxth	r2, r3
 8004f1e:	69bb      	ldr	r3, [r7, #24]
 8004f20:	801a      	strh	r2, [r3, #0]
 8004f22:	e01e      	b.n	8004f62 <USB_EPStartXfer+0x3c2>
 8004f24:	463b      	mov	r3, r7
 8004f26:	681b      	ldr	r3, [r3, #0]
 8004f28:	785b      	ldrb	r3, [r3, #1]
 8004f2a:	2b01      	cmp	r3, #1
 8004f2c:	d119      	bne.n	8004f62 <USB_EPStartXfer+0x3c2>
 8004f2e:	1d3b      	adds	r3, r7, #4
 8004f30:	681b      	ldr	r3, [r3, #0]
 8004f32:	627b      	str	r3, [r7, #36]	; 0x24
 8004f34:	1d3b      	adds	r3, r7, #4
 8004f36:	681b      	ldr	r3, [r3, #0]
 8004f38:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8004f3c:	b29b      	uxth	r3, r3
 8004f3e:	461a      	mov	r2, r3
 8004f40:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004f42:	4413      	add	r3, r2
 8004f44:	627b      	str	r3, [r7, #36]	; 0x24
 8004f46:	463b      	mov	r3, r7
 8004f48:	681b      	ldr	r3, [r3, #0]
 8004f4a:	781b      	ldrb	r3, [r3, #0]
 8004f4c:	011a      	lsls	r2, r3, #4
 8004f4e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004f50:	4413      	add	r3, r2
 8004f52:	f203 4304 	addw	r3, r3, #1028	; 0x404
 8004f56:	623b      	str	r3, [r7, #32]
 8004f58:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8004f5c:	b29a      	uxth	r2, r3
 8004f5e:	6a3b      	ldr	r3, [r7, #32]
 8004f60:	801a      	strh	r2, [r3, #0]
            pmabuffer = ep->pmaaddr0;
 8004f62:	463b      	mov	r3, r7
 8004f64:	681b      	ldr	r3, [r3, #0]
 8004f66:	891b      	ldrh	r3, [r3, #8]
 8004f68:	f8a7 310a 	strh.w	r3, [r7, #266]	; 0x10a

            /* Write the user buffer to USB PMA */
            USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 8004f6c:	463b      	mov	r3, r7
 8004f6e:	681b      	ldr	r3, [r3, #0]
 8004f70:	6959      	ldr	r1, [r3, #20]
 8004f72:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8004f76:	b29b      	uxth	r3, r3
 8004f78:	f8b7 210a 	ldrh.w	r2, [r7, #266]	; 0x10a
 8004f7c:	1d38      	adds	r0, r7, #4
 8004f7e:	6800      	ldr	r0, [r0, #0]
 8004f80:	f001 f86c 	bl	800605c <USB_WritePMA>
 8004f84:	e33b      	b.n	80055fe <USB_EPStartXfer+0xa5e>
          }
          else
          {
            /* Set the Double buffer counter for pmabuffer0 */
            PCD_SET_EP_DBUF0_CNT(USBx, ep->num, ep->is_in, len);
 8004f86:	463b      	mov	r3, r7
 8004f88:	681b      	ldr	r3, [r3, #0]
 8004f8a:	785b      	ldrb	r3, [r3, #1]
 8004f8c:	2b00      	cmp	r3, #0
 8004f8e:	d164      	bne.n	800505a <USB_EPStartXfer+0x4ba>
 8004f90:	1d3b      	adds	r3, r7, #4
 8004f92:	681b      	ldr	r3, [r3, #0]
 8004f94:	64fb      	str	r3, [r7, #76]	; 0x4c
 8004f96:	1d3b      	adds	r3, r7, #4
 8004f98:	681b      	ldr	r3, [r3, #0]
 8004f9a:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8004f9e:	b29b      	uxth	r3, r3
 8004fa0:	461a      	mov	r2, r3
 8004fa2:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8004fa4:	4413      	add	r3, r2
 8004fa6:	64fb      	str	r3, [r7, #76]	; 0x4c
 8004fa8:	463b      	mov	r3, r7
 8004faa:	681b      	ldr	r3, [r3, #0]
 8004fac:	781b      	ldrb	r3, [r3, #0]
 8004fae:	011a      	lsls	r2, r3, #4
 8004fb0:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8004fb2:	4413      	add	r3, r2
 8004fb4:	f203 4304 	addw	r3, r3, #1028	; 0x404
 8004fb8:	64bb      	str	r3, [r7, #72]	; 0x48
 8004fba:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8004fbe:	2b00      	cmp	r3, #0
 8004fc0:	d112      	bne.n	8004fe8 <USB_EPStartXfer+0x448>
 8004fc2:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8004fc4:	881b      	ldrh	r3, [r3, #0]
 8004fc6:	b29b      	uxth	r3, r3
 8004fc8:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 8004fcc:	b29a      	uxth	r2, r3
 8004fce:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8004fd0:	801a      	strh	r2, [r3, #0]
 8004fd2:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8004fd4:	881b      	ldrh	r3, [r3, #0]
 8004fd6:	b29b      	uxth	r3, r3
 8004fd8:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8004fdc:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8004fe0:	b29a      	uxth	r2, r3
 8004fe2:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8004fe4:	801a      	strh	r2, [r3, #0]
 8004fe6:	e057      	b.n	8005098 <USB_EPStartXfer+0x4f8>
 8004fe8:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8004fec:	2b3e      	cmp	r3, #62	; 0x3e
 8004fee:	d817      	bhi.n	8005020 <USB_EPStartXfer+0x480>
 8004ff0:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8004ff4:	085b      	lsrs	r3, r3, #1
 8004ff6:	f8c7 30fc 	str.w	r3, [r7, #252]	; 0xfc
 8004ffa:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8004ffe:	f003 0301 	and.w	r3, r3, #1
 8005002:	2b00      	cmp	r3, #0
 8005004:	d004      	beq.n	8005010 <USB_EPStartXfer+0x470>
 8005006:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 800500a:	3301      	adds	r3, #1
 800500c:	f8c7 30fc 	str.w	r3, [r7, #252]	; 0xfc
 8005010:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8005014:	b29b      	uxth	r3, r3
 8005016:	029b      	lsls	r3, r3, #10
 8005018:	b29a      	uxth	r2, r3
 800501a:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800501c:	801a      	strh	r2, [r3, #0]
 800501e:	e03b      	b.n	8005098 <USB_EPStartXfer+0x4f8>
 8005020:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8005024:	095b      	lsrs	r3, r3, #5
 8005026:	f8c7 30fc 	str.w	r3, [r7, #252]	; 0xfc
 800502a:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 800502e:	f003 031f 	and.w	r3, r3, #31
 8005032:	2b00      	cmp	r3, #0
 8005034:	d104      	bne.n	8005040 <USB_EPStartXfer+0x4a0>
 8005036:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 800503a:	3b01      	subs	r3, #1
 800503c:	f8c7 30fc 	str.w	r3, [r7, #252]	; 0xfc
 8005040:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8005044:	b29b      	uxth	r3, r3
 8005046:	029b      	lsls	r3, r3, #10
 8005048:	b29b      	uxth	r3, r3
 800504a:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800504e:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8005052:	b29a      	uxth	r2, r3
 8005054:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8005056:	801a      	strh	r2, [r3, #0]
 8005058:	e01e      	b.n	8005098 <USB_EPStartXfer+0x4f8>
 800505a:	463b      	mov	r3, r7
 800505c:	681b      	ldr	r3, [r3, #0]
 800505e:	785b      	ldrb	r3, [r3, #1]
 8005060:	2b01      	cmp	r3, #1
 8005062:	d119      	bne.n	8005098 <USB_EPStartXfer+0x4f8>
 8005064:	1d3b      	adds	r3, r7, #4
 8005066:	681b      	ldr	r3, [r3, #0]
 8005068:	657b      	str	r3, [r7, #84]	; 0x54
 800506a:	1d3b      	adds	r3, r7, #4
 800506c:	681b      	ldr	r3, [r3, #0]
 800506e:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8005072:	b29b      	uxth	r3, r3
 8005074:	461a      	mov	r2, r3
 8005076:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8005078:	4413      	add	r3, r2
 800507a:	657b      	str	r3, [r7, #84]	; 0x54
 800507c:	463b      	mov	r3, r7
 800507e:	681b      	ldr	r3, [r3, #0]
 8005080:	781b      	ldrb	r3, [r3, #0]
 8005082:	011a      	lsls	r2, r3, #4
 8005084:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8005086:	4413      	add	r3, r2
 8005088:	f203 4304 	addw	r3, r3, #1028	; 0x404
 800508c:	653b      	str	r3, [r7, #80]	; 0x50
 800508e:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8005092:	b29a      	uxth	r2, r3
 8005094:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8005096:	801a      	strh	r2, [r3, #0]
            pmabuffer = ep->pmaaddr0;
 8005098:	463b      	mov	r3, r7
 800509a:	681b      	ldr	r3, [r3, #0]
 800509c:	891b      	ldrh	r3, [r3, #8]
 800509e:	f8a7 310a 	strh.w	r3, [r7, #266]	; 0x10a

            /* Write the user buffer to USB PMA */
            USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 80050a2:	463b      	mov	r3, r7
 80050a4:	681b      	ldr	r3, [r3, #0]
 80050a6:	6959      	ldr	r1, [r3, #20]
 80050a8:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 80050ac:	b29b      	uxth	r3, r3
 80050ae:	f8b7 210a 	ldrh.w	r2, [r7, #266]	; 0x10a
 80050b2:	1d38      	adds	r0, r7, #4
 80050b4:	6800      	ldr	r0, [r0, #0]
 80050b6:	f000 ffd1 	bl	800605c <USB_WritePMA>
            ep->xfer_buff += len;
 80050ba:	463b      	mov	r3, r7
 80050bc:	681b      	ldr	r3, [r3, #0]
 80050be:	695a      	ldr	r2, [r3, #20]
 80050c0:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 80050c4:	441a      	add	r2, r3
 80050c6:	463b      	mov	r3, r7
 80050c8:	681b      	ldr	r3, [r3, #0]
 80050ca:	615a      	str	r2, [r3, #20]

            if (ep->xfer_len_db > ep->maxpacket)
 80050cc:	463b      	mov	r3, r7
 80050ce:	681b      	ldr	r3, [r3, #0]
 80050d0:	6a1a      	ldr	r2, [r3, #32]
 80050d2:	463b      	mov	r3, r7
 80050d4:	681b      	ldr	r3, [r3, #0]
 80050d6:	691b      	ldr	r3, [r3, #16]
 80050d8:	429a      	cmp	r2, r3
 80050da:	d909      	bls.n	80050f0 <USB_EPStartXfer+0x550>
            {
              ep->xfer_len_db -= len;
 80050dc:	463b      	mov	r3, r7
 80050de:	681b      	ldr	r3, [r3, #0]
 80050e0:	6a1a      	ldr	r2, [r3, #32]
 80050e2:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 80050e6:	1ad2      	subs	r2, r2, r3
 80050e8:	463b      	mov	r3, r7
 80050ea:	681b      	ldr	r3, [r3, #0]
 80050ec:	621a      	str	r2, [r3, #32]
 80050ee:	e008      	b.n	8005102 <USB_EPStartXfer+0x562>
            }
            else
            {
              len = ep->xfer_len_db;
 80050f0:	463b      	mov	r3, r7
 80050f2:	681b      	ldr	r3, [r3, #0]
 80050f4:	6a1b      	ldr	r3, [r3, #32]
 80050f6:	f8c7 310c 	str.w	r3, [r7, #268]	; 0x10c
              ep->xfer_len_db = 0U;
 80050fa:	463b      	mov	r3, r7
 80050fc:	681b      	ldr	r3, [r3, #0]
 80050fe:	2200      	movs	r2, #0
 8005100:	621a      	str	r2, [r3, #32]
            }

            /* Set the Double buffer counter for pmabuffer1 */
            PCD_SET_EP_DBUF1_CNT(USBx, ep->num, ep->is_in, len);
 8005102:	1d3b      	adds	r3, r7, #4
 8005104:	681b      	ldr	r3, [r3, #0]
 8005106:	647b      	str	r3, [r7, #68]	; 0x44
 8005108:	463b      	mov	r3, r7
 800510a:	681b      	ldr	r3, [r3, #0]
 800510c:	785b      	ldrb	r3, [r3, #1]
 800510e:	2b00      	cmp	r3, #0
 8005110:	d164      	bne.n	80051dc <USB_EPStartXfer+0x63c>
 8005112:	1d3b      	adds	r3, r7, #4
 8005114:	681b      	ldr	r3, [r3, #0]
 8005116:	63fb      	str	r3, [r7, #60]	; 0x3c
 8005118:	1d3b      	adds	r3, r7, #4
 800511a:	681b      	ldr	r3, [r3, #0]
 800511c:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8005120:	b29b      	uxth	r3, r3
 8005122:	461a      	mov	r2, r3
 8005124:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8005126:	4413      	add	r3, r2
 8005128:	63fb      	str	r3, [r7, #60]	; 0x3c
 800512a:	463b      	mov	r3, r7
 800512c:	681b      	ldr	r3, [r3, #0]
 800512e:	781b      	ldrb	r3, [r3, #0]
 8005130:	011a      	lsls	r2, r3, #4
 8005132:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8005134:	4413      	add	r3, r2
 8005136:	f203 430c 	addw	r3, r3, #1036	; 0x40c
 800513a:	63bb      	str	r3, [r7, #56]	; 0x38
 800513c:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8005140:	2b00      	cmp	r3, #0
 8005142:	d112      	bne.n	800516a <USB_EPStartXfer+0x5ca>
 8005144:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005146:	881b      	ldrh	r3, [r3, #0]
 8005148:	b29b      	uxth	r3, r3
 800514a:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 800514e:	b29a      	uxth	r2, r3
 8005150:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005152:	801a      	strh	r2, [r3, #0]
 8005154:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005156:	881b      	ldrh	r3, [r3, #0]
 8005158:	b29b      	uxth	r3, r3
 800515a:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800515e:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8005162:	b29a      	uxth	r2, r3
 8005164:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005166:	801a      	strh	r2, [r3, #0]
 8005168:	e054      	b.n	8005214 <USB_EPStartXfer+0x674>
 800516a:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 800516e:	2b3e      	cmp	r3, #62	; 0x3e
 8005170:	d817      	bhi.n	80051a2 <USB_EPStartXfer+0x602>
 8005172:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8005176:	085b      	lsrs	r3, r3, #1
 8005178:	f8c7 30f8 	str.w	r3, [r7, #248]	; 0xf8
 800517c:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8005180:	f003 0301 	and.w	r3, r3, #1
 8005184:	2b00      	cmp	r3, #0
 8005186:	d004      	beq.n	8005192 <USB_EPStartXfer+0x5f2>
 8005188:	f8d7 30f8 	ldr.w	r3, [r7, #248]	; 0xf8
 800518c:	3301      	adds	r3, #1
 800518e:	f8c7 30f8 	str.w	r3, [r7, #248]	; 0xf8
 8005192:	f8d7 30f8 	ldr.w	r3, [r7, #248]	; 0xf8
 8005196:	b29b      	uxth	r3, r3
 8005198:	029b      	lsls	r3, r3, #10
 800519a:	b29a      	uxth	r2, r3
 800519c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800519e:	801a      	strh	r2, [r3, #0]
 80051a0:	e038      	b.n	8005214 <USB_EPStartXfer+0x674>
 80051a2:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 80051a6:	095b      	lsrs	r3, r3, #5
 80051a8:	f8c7 30f8 	str.w	r3, [r7, #248]	; 0xf8
 80051ac:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 80051b0:	f003 031f 	and.w	r3, r3, #31
 80051b4:	2b00      	cmp	r3, #0
 80051b6:	d104      	bne.n	80051c2 <USB_EPStartXfer+0x622>
 80051b8:	f8d7 30f8 	ldr.w	r3, [r7, #248]	; 0xf8
 80051bc:	3b01      	subs	r3, #1
 80051be:	f8c7 30f8 	str.w	r3, [r7, #248]	; 0xf8
 80051c2:	f8d7 30f8 	ldr.w	r3, [r7, #248]	; 0xf8
 80051c6:	b29b      	uxth	r3, r3
 80051c8:	029b      	lsls	r3, r3, #10
 80051ca:	b29b      	uxth	r3, r3
 80051cc:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 80051d0:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 80051d4:	b29a      	uxth	r2, r3
 80051d6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80051d8:	801a      	strh	r2, [r3, #0]
 80051da:	e01b      	b.n	8005214 <USB_EPStartXfer+0x674>
 80051dc:	463b      	mov	r3, r7
 80051de:	681b      	ldr	r3, [r3, #0]
 80051e0:	785b      	ldrb	r3, [r3, #1]
 80051e2:	2b01      	cmp	r3, #1
 80051e4:	d116      	bne.n	8005214 <USB_EPStartXfer+0x674>
 80051e6:	1d3b      	adds	r3, r7, #4
 80051e8:	681b      	ldr	r3, [r3, #0]
 80051ea:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 80051ee:	b29b      	uxth	r3, r3
 80051f0:	461a      	mov	r2, r3
 80051f2:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80051f4:	4413      	add	r3, r2
 80051f6:	647b      	str	r3, [r7, #68]	; 0x44
 80051f8:	463b      	mov	r3, r7
 80051fa:	681b      	ldr	r3, [r3, #0]
 80051fc:	781b      	ldrb	r3, [r3, #0]
 80051fe:	011a      	lsls	r2, r3, #4
 8005200:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8005202:	4413      	add	r3, r2
 8005204:	f203 430c 	addw	r3, r3, #1036	; 0x40c
 8005208:	643b      	str	r3, [r7, #64]	; 0x40
 800520a:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 800520e:	b29a      	uxth	r2, r3
 8005210:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8005212:	801a      	strh	r2, [r3, #0]
            pmabuffer = ep->pmaaddr1;
 8005214:	463b      	mov	r3, r7
 8005216:	681b      	ldr	r3, [r3, #0]
 8005218:	895b      	ldrh	r3, [r3, #10]
 800521a:	f8a7 310a 	strh.w	r3, [r7, #266]	; 0x10a

            /* Write the user buffer to USB PMA */
            USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 800521e:	463b      	mov	r3, r7
 8005220:	681b      	ldr	r3, [r3, #0]
 8005222:	6959      	ldr	r1, [r3, #20]
 8005224:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8005228:	b29b      	uxth	r3, r3
 800522a:	f8b7 210a 	ldrh.w	r2, [r7, #266]	; 0x10a
 800522e:	1d38      	adds	r0, r7, #4
 8005230:	6800      	ldr	r0, [r0, #0]
 8005232:	f000 ff13 	bl	800605c <USB_WritePMA>
 8005236:	e1e2      	b.n	80055fe <USB_EPStartXfer+0xa5e>
          }
        }
        /* auto Switch to single buffer mode when transfer <Mps no need to manage in double buffer */
        else
        {
          len = ep->xfer_len_db;
 8005238:	463b      	mov	r3, r7
 800523a:	681b      	ldr	r3, [r3, #0]
 800523c:	6a1b      	ldr	r3, [r3, #32]
 800523e:	f8c7 310c 	str.w	r3, [r7, #268]	; 0x10c

          /* disable double buffer mode */
          PCD_CLEAR_EP_DBUF(USBx, ep->num);
 8005242:	1d3b      	adds	r3, r7, #4
 8005244:	681a      	ldr	r2, [r3, #0]
 8005246:	463b      	mov	r3, r7
 8005248:	681b      	ldr	r3, [r3, #0]
 800524a:	781b      	ldrb	r3, [r3, #0]
 800524c:	009b      	lsls	r3, r3, #2
 800524e:	4413      	add	r3, r2
 8005250:	881b      	ldrh	r3, [r3, #0]
 8005252:	b29b      	uxth	r3, r3
 8005254:	f423 43e2 	bic.w	r3, r3, #28928	; 0x7100
 8005258:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800525c:	f8a7 3066 	strh.w	r3, [r7, #102]	; 0x66
 8005260:	1d3b      	adds	r3, r7, #4
 8005262:	681a      	ldr	r2, [r3, #0]
 8005264:	463b      	mov	r3, r7
 8005266:	681b      	ldr	r3, [r3, #0]
 8005268:	781b      	ldrb	r3, [r3, #0]
 800526a:	009b      	lsls	r3, r3, #2
 800526c:	441a      	add	r2, r3
 800526e:	f8b7 3066 	ldrh.w	r3, [r7, #102]	; 0x66
 8005272:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8005276:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 800527a:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800527e:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8005282:	b29b      	uxth	r3, r3
 8005284:	8013      	strh	r3, [r2, #0]

          /* Set Tx count with nbre of byte to be transmitted */
          PCD_SET_EP_TX_CNT(USBx, ep->num, len);
 8005286:	1d3b      	adds	r3, r7, #4
 8005288:	681b      	ldr	r3, [r3, #0]
 800528a:	663b      	str	r3, [r7, #96]	; 0x60
 800528c:	1d3b      	adds	r3, r7, #4
 800528e:	681b      	ldr	r3, [r3, #0]
 8005290:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8005294:	b29b      	uxth	r3, r3
 8005296:	461a      	mov	r2, r3
 8005298:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 800529a:	4413      	add	r3, r2
 800529c:	663b      	str	r3, [r7, #96]	; 0x60
 800529e:	463b      	mov	r3, r7
 80052a0:	681b      	ldr	r3, [r3, #0]
 80052a2:	781b      	ldrb	r3, [r3, #0]
 80052a4:	011a      	lsls	r2, r3, #4
 80052a6:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 80052a8:	4413      	add	r3, r2
 80052aa:	f203 4304 	addw	r3, r3, #1028	; 0x404
 80052ae:	65fb      	str	r3, [r7, #92]	; 0x5c
 80052b0:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 80052b4:	b29a      	uxth	r2, r3
 80052b6:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 80052b8:	801a      	strh	r2, [r3, #0]
          pmabuffer = ep->pmaaddr0;
 80052ba:	463b      	mov	r3, r7
 80052bc:	681b      	ldr	r3, [r3, #0]
 80052be:	891b      	ldrh	r3, [r3, #8]
 80052c0:	f8a7 310a 	strh.w	r3, [r7, #266]	; 0x10a

          /* Write the user buffer to USB PMA */
          USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 80052c4:	463b      	mov	r3, r7
 80052c6:	681b      	ldr	r3, [r3, #0]
 80052c8:	6959      	ldr	r1, [r3, #20]
 80052ca:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 80052ce:	b29b      	uxth	r3, r3
 80052d0:	f8b7 210a 	ldrh.w	r2, [r7, #266]	; 0x10a
 80052d4:	1d38      	adds	r0, r7, #4
 80052d6:	6800      	ldr	r0, [r0, #0]
 80052d8:	f000 fec0 	bl	800605c <USB_WritePMA>
 80052dc:	e18f      	b.n	80055fe <USB_EPStartXfer+0xa5e>

      /* manage isochronous double buffer IN mode */
      else
      {
        /* Write the data to the USB endpoint */
        if ((PCD_GET_ENDPOINT(USBx, ep->num) & USB_EP_DTOG_TX) != 0U)
 80052de:	1d3b      	adds	r3, r7, #4
 80052e0:	681a      	ldr	r2, [r3, #0]
 80052e2:	463b      	mov	r3, r7
 80052e4:	681b      	ldr	r3, [r3, #0]
 80052e6:	781b      	ldrb	r3, [r3, #0]
 80052e8:	009b      	lsls	r3, r3, #2
 80052ea:	4413      	add	r3, r2
 80052ec:	881b      	ldrh	r3, [r3, #0]
 80052ee:	b29b      	uxth	r3, r3
 80052f0:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80052f4:	2b00      	cmp	r3, #0
 80052f6:	f000 808f 	beq.w	8005418 <USB_EPStartXfer+0x878>
        {
          /* Set the Double buffer counter for pmabuffer1 */
          PCD_SET_EP_DBUF1_CNT(USBx, ep->num, ep->is_in, len);
 80052fa:	1d3b      	adds	r3, r7, #4
 80052fc:	681b      	ldr	r3, [r3, #0]
 80052fe:	67bb      	str	r3, [r7, #120]	; 0x78
 8005300:	463b      	mov	r3, r7
 8005302:	681b      	ldr	r3, [r3, #0]
 8005304:	785b      	ldrb	r3, [r3, #1]
 8005306:	2b00      	cmp	r3, #0
 8005308:	d164      	bne.n	80053d4 <USB_EPStartXfer+0x834>
 800530a:	1d3b      	adds	r3, r7, #4
 800530c:	681b      	ldr	r3, [r3, #0]
 800530e:	673b      	str	r3, [r7, #112]	; 0x70
 8005310:	1d3b      	adds	r3, r7, #4
 8005312:	681b      	ldr	r3, [r3, #0]
 8005314:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8005318:	b29b      	uxth	r3, r3
 800531a:	461a      	mov	r2, r3
 800531c:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 800531e:	4413      	add	r3, r2
 8005320:	673b      	str	r3, [r7, #112]	; 0x70
 8005322:	463b      	mov	r3, r7
 8005324:	681b      	ldr	r3, [r3, #0]
 8005326:	781b      	ldrb	r3, [r3, #0]
 8005328:	011a      	lsls	r2, r3, #4
 800532a:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 800532c:	4413      	add	r3, r2
 800532e:	f203 430c 	addw	r3, r3, #1036	; 0x40c
 8005332:	66fb      	str	r3, [r7, #108]	; 0x6c
 8005334:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8005338:	2b00      	cmp	r3, #0
 800533a:	d112      	bne.n	8005362 <USB_EPStartXfer+0x7c2>
 800533c:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800533e:	881b      	ldrh	r3, [r3, #0]
 8005340:	b29b      	uxth	r3, r3
 8005342:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 8005346:	b29a      	uxth	r2, r3
 8005348:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800534a:	801a      	strh	r2, [r3, #0]
 800534c:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800534e:	881b      	ldrh	r3, [r3, #0]
 8005350:	b29b      	uxth	r3, r3
 8005352:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8005356:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800535a:	b29a      	uxth	r2, r3
 800535c:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800535e:	801a      	strh	r2, [r3, #0]
 8005360:	e054      	b.n	800540c <USB_EPStartXfer+0x86c>
 8005362:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8005366:	2b3e      	cmp	r3, #62	; 0x3e
 8005368:	d817      	bhi.n	800539a <USB_EPStartXfer+0x7fa>
 800536a:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 800536e:	085b      	lsrs	r3, r3, #1
 8005370:	f8c7 30f4 	str.w	r3, [r7, #244]	; 0xf4
 8005374:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8005378:	f003 0301 	and.w	r3, r3, #1
 800537c:	2b00      	cmp	r3, #0
 800537e:	d004      	beq.n	800538a <USB_EPStartXfer+0x7ea>
 8005380:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8005384:	3301      	adds	r3, #1
 8005386:	f8c7 30f4 	str.w	r3, [r7, #244]	; 0xf4
 800538a:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800538e:	b29b      	uxth	r3, r3
 8005390:	029b      	lsls	r3, r3, #10
 8005392:	b29a      	uxth	r2, r3
 8005394:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8005396:	801a      	strh	r2, [r3, #0]
 8005398:	e038      	b.n	800540c <USB_EPStartXfer+0x86c>
 800539a:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 800539e:	095b      	lsrs	r3, r3, #5
 80053a0:	f8c7 30f4 	str.w	r3, [r7, #244]	; 0xf4
 80053a4:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 80053a8:	f003 031f 	and.w	r3, r3, #31
 80053ac:	2b00      	cmp	r3, #0
 80053ae:	d104      	bne.n	80053ba <USB_EPStartXfer+0x81a>
 80053b0:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80053b4:	3b01      	subs	r3, #1
 80053b6:	f8c7 30f4 	str.w	r3, [r7, #244]	; 0xf4
 80053ba:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80053be:	b29b      	uxth	r3, r3
 80053c0:	029b      	lsls	r3, r3, #10
 80053c2:	b29b      	uxth	r3, r3
 80053c4:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 80053c8:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 80053cc:	b29a      	uxth	r2, r3
 80053ce:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80053d0:	801a      	strh	r2, [r3, #0]
 80053d2:	e01b      	b.n	800540c <USB_EPStartXfer+0x86c>
 80053d4:	463b      	mov	r3, r7
 80053d6:	681b      	ldr	r3, [r3, #0]
 80053d8:	785b      	ldrb	r3, [r3, #1]
 80053da:	2b01      	cmp	r3, #1
 80053dc:	d116      	bne.n	800540c <USB_EPStartXfer+0x86c>
 80053de:	1d3b      	adds	r3, r7, #4
 80053e0:	681b      	ldr	r3, [r3, #0]
 80053e2:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 80053e6:	b29b      	uxth	r3, r3
 80053e8:	461a      	mov	r2, r3
 80053ea:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 80053ec:	4413      	add	r3, r2
 80053ee:	67bb      	str	r3, [r7, #120]	; 0x78
 80053f0:	463b      	mov	r3, r7
 80053f2:	681b      	ldr	r3, [r3, #0]
 80053f4:	781b      	ldrb	r3, [r3, #0]
 80053f6:	011a      	lsls	r2, r3, #4
 80053f8:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 80053fa:	4413      	add	r3, r2
 80053fc:	f203 430c 	addw	r3, r3, #1036	; 0x40c
 8005400:	677b      	str	r3, [r7, #116]	; 0x74
 8005402:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8005406:	b29a      	uxth	r2, r3
 8005408:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 800540a:	801a      	strh	r2, [r3, #0]
          pmabuffer = ep->pmaaddr1;
 800540c:	463b      	mov	r3, r7
 800540e:	681b      	ldr	r3, [r3, #0]
 8005410:	895b      	ldrh	r3, [r3, #10]
 8005412:	f8a7 310a 	strh.w	r3, [r7, #266]	; 0x10a
 8005416:	e097      	b.n	8005548 <USB_EPStartXfer+0x9a8>
        }
        else
        {
          /* Set the Double buffer counter for pmabuffer0 */
          PCD_SET_EP_DBUF0_CNT(USBx, ep->num, ep->is_in, len);
 8005418:	463b      	mov	r3, r7
 800541a:	681b      	ldr	r3, [r3, #0]
 800541c:	785b      	ldrb	r3, [r3, #1]
 800541e:	2b00      	cmp	r3, #0
 8005420:	d168      	bne.n	80054f4 <USB_EPStartXfer+0x954>
 8005422:	1d3b      	adds	r3, r7, #4
 8005424:	681b      	ldr	r3, [r3, #0]
 8005426:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 800542a:	1d3b      	adds	r3, r7, #4
 800542c:	681b      	ldr	r3, [r3, #0]
 800542e:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8005432:	b29b      	uxth	r3, r3
 8005434:	461a      	mov	r2, r3
 8005436:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 800543a:	4413      	add	r3, r2
 800543c:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 8005440:	463b      	mov	r3, r7
 8005442:	681b      	ldr	r3, [r3, #0]
 8005444:	781b      	ldrb	r3, [r3, #0]
 8005446:	011a      	lsls	r2, r3, #4
 8005448:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 800544c:	4413      	add	r3, r2
 800544e:	f203 4304 	addw	r3, r3, #1028	; 0x404
 8005452:	67fb      	str	r3, [r7, #124]	; 0x7c
 8005454:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8005458:	2b00      	cmp	r3, #0
 800545a:	d112      	bne.n	8005482 <USB_EPStartXfer+0x8e2>
 800545c:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 800545e:	881b      	ldrh	r3, [r3, #0]
 8005460:	b29b      	uxth	r3, r3
 8005462:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 8005466:	b29a      	uxth	r2, r3
 8005468:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 800546a:	801a      	strh	r2, [r3, #0]
 800546c:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 800546e:	881b      	ldrh	r3, [r3, #0]
 8005470:	b29b      	uxth	r3, r3
 8005472:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8005476:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800547a:	b29a      	uxth	r2, r3
 800547c:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 800547e:	801a      	strh	r2, [r3, #0]
 8005480:	e05d      	b.n	800553e <USB_EPStartXfer+0x99e>
 8005482:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8005486:	2b3e      	cmp	r3, #62	; 0x3e
 8005488:	d817      	bhi.n	80054ba <USB_EPStartXfer+0x91a>
 800548a:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 800548e:	085b      	lsrs	r3, r3, #1
 8005490:	f8c7 30f0 	str.w	r3, [r7, #240]	; 0xf0
 8005494:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8005498:	f003 0301 	and.w	r3, r3, #1
 800549c:	2b00      	cmp	r3, #0
 800549e:	d004      	beq.n	80054aa <USB_EPStartXfer+0x90a>
 80054a0:	f8d7 30f0 	ldr.w	r3, [r7, #240]	; 0xf0
 80054a4:	3301      	adds	r3, #1
 80054a6:	f8c7 30f0 	str.w	r3, [r7, #240]	; 0xf0
 80054aa:	f8d7 30f0 	ldr.w	r3, [r7, #240]	; 0xf0
 80054ae:	b29b      	uxth	r3, r3
 80054b0:	029b      	lsls	r3, r3, #10
 80054b2:	b29a      	uxth	r2, r3
 80054b4:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 80054b6:	801a      	strh	r2, [r3, #0]
 80054b8:	e041      	b.n	800553e <USB_EPStartXfer+0x99e>
 80054ba:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 80054be:	095b      	lsrs	r3, r3, #5
 80054c0:	f8c7 30f0 	str.w	r3, [r7, #240]	; 0xf0
 80054c4:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 80054c8:	f003 031f 	and.w	r3, r3, #31
 80054cc:	2b00      	cmp	r3, #0
 80054ce:	d104      	bne.n	80054da <USB_EPStartXfer+0x93a>
 80054d0:	f8d7 30f0 	ldr.w	r3, [r7, #240]	; 0xf0
 80054d4:	3b01      	subs	r3, #1
 80054d6:	f8c7 30f0 	str.w	r3, [r7, #240]	; 0xf0
 80054da:	f8d7 30f0 	ldr.w	r3, [r7, #240]	; 0xf0
 80054de:	b29b      	uxth	r3, r3
 80054e0:	029b      	lsls	r3, r3, #10
 80054e2:	b29b      	uxth	r3, r3
 80054e4:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 80054e8:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 80054ec:	b29a      	uxth	r2, r3
 80054ee:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 80054f0:	801a      	strh	r2, [r3, #0]
 80054f2:	e024      	b.n	800553e <USB_EPStartXfer+0x99e>
 80054f4:	463b      	mov	r3, r7
 80054f6:	681b      	ldr	r3, [r3, #0]
 80054f8:	785b      	ldrb	r3, [r3, #1]
 80054fa:	2b01      	cmp	r3, #1
 80054fc:	d11f      	bne.n	800553e <USB_EPStartXfer+0x99e>
 80054fe:	1d3b      	adds	r3, r7, #4
 8005500:	681b      	ldr	r3, [r3, #0]
 8005502:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
 8005506:	1d3b      	adds	r3, r7, #4
 8005508:	681b      	ldr	r3, [r3, #0]
 800550a:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 800550e:	b29b      	uxth	r3, r3
 8005510:	461a      	mov	r2, r3
 8005512:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 8005516:	4413      	add	r3, r2
 8005518:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
 800551c:	463b      	mov	r3, r7
 800551e:	681b      	ldr	r3, [r3, #0]
 8005520:	781b      	ldrb	r3, [r3, #0]
 8005522:	011a      	lsls	r2, r3, #4
 8005524:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 8005528:	4413      	add	r3, r2
 800552a:	f203 4304 	addw	r3, r3, #1028	; 0x404
 800552e:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
 8005532:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8005536:	b29a      	uxth	r2, r3
 8005538:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 800553c:	801a      	strh	r2, [r3, #0]
          pmabuffer = ep->pmaaddr0;
 800553e:	463b      	mov	r3, r7
 8005540:	681b      	ldr	r3, [r3, #0]
 8005542:	891b      	ldrh	r3, [r3, #8]
 8005544:	f8a7 310a 	strh.w	r3, [r7, #266]	; 0x10a
        }

        USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 8005548:	463b      	mov	r3, r7
 800554a:	681b      	ldr	r3, [r3, #0]
 800554c:	6959      	ldr	r1, [r3, #20]
 800554e:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8005552:	b29b      	uxth	r3, r3
 8005554:	f8b7 210a 	ldrh.w	r2, [r7, #266]	; 0x10a
 8005558:	1d38      	adds	r0, r7, #4
 800555a:	6800      	ldr	r0, [r0, #0]
 800555c:	f000 fd7e 	bl	800605c <USB_WritePMA>
        PCD_FreeUserBuffer(USBx, ep->num, ep->is_in);
 8005560:	463b      	mov	r3, r7
 8005562:	681b      	ldr	r3, [r3, #0]
 8005564:	785b      	ldrb	r3, [r3, #1]
 8005566:	2b00      	cmp	r3, #0
 8005568:	d122      	bne.n	80055b0 <USB_EPStartXfer+0xa10>
 800556a:	1d3b      	adds	r3, r7, #4
 800556c:	681a      	ldr	r2, [r3, #0]
 800556e:	463b      	mov	r3, r7
 8005570:	681b      	ldr	r3, [r3, #0]
 8005572:	781b      	ldrb	r3, [r3, #0]
 8005574:	009b      	lsls	r3, r3, #2
 8005576:	4413      	add	r3, r2
 8005578:	881b      	ldrh	r3, [r3, #0]
 800557a:	b29b      	uxth	r3, r3
 800557c:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8005580:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8005584:	f8a7 3068 	strh.w	r3, [r7, #104]	; 0x68
 8005588:	1d3b      	adds	r3, r7, #4
 800558a:	681a      	ldr	r2, [r3, #0]
 800558c:	463b      	mov	r3, r7
 800558e:	681b      	ldr	r3, [r3, #0]
 8005590:	781b      	ldrb	r3, [r3, #0]
 8005592:	009b      	lsls	r3, r3, #2
 8005594:	441a      	add	r2, r3
 8005596:	f8b7 3068 	ldrh.w	r3, [r7, #104]	; 0x68
 800559a:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 800559e:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 80055a2:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80055a6:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 80055aa:	b29b      	uxth	r3, r3
 80055ac:	8013      	strh	r3, [r2, #0]
 80055ae:	e026      	b.n	80055fe <USB_EPStartXfer+0xa5e>
 80055b0:	463b      	mov	r3, r7
 80055b2:	681b      	ldr	r3, [r3, #0]
 80055b4:	785b      	ldrb	r3, [r3, #1]
 80055b6:	2b01      	cmp	r3, #1
 80055b8:	d121      	bne.n	80055fe <USB_EPStartXfer+0xa5e>
 80055ba:	1d3b      	adds	r3, r7, #4
 80055bc:	681a      	ldr	r2, [r3, #0]
 80055be:	463b      	mov	r3, r7
 80055c0:	681b      	ldr	r3, [r3, #0]
 80055c2:	781b      	ldrb	r3, [r3, #0]
 80055c4:	009b      	lsls	r3, r3, #2
 80055c6:	4413      	add	r3, r2
 80055c8:	881b      	ldrh	r3, [r3, #0]
 80055ca:	b29b      	uxth	r3, r3
 80055cc:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80055d0:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80055d4:	f8a7 306a 	strh.w	r3, [r7, #106]	; 0x6a
 80055d8:	1d3b      	adds	r3, r7, #4
 80055da:	681a      	ldr	r2, [r3, #0]
 80055dc:	463b      	mov	r3, r7
 80055de:	681b      	ldr	r3, [r3, #0]
 80055e0:	781b      	ldrb	r3, [r3, #0]
 80055e2:	009b      	lsls	r3, r3, #2
 80055e4:	441a      	add	r2, r3
 80055e6:	f8b7 306a 	ldrh.w	r3, [r7, #106]	; 0x6a
 80055ea:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 80055ee:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 80055f2:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 80055f6:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80055fa:	b29b      	uxth	r3, r3
 80055fc:	8013      	strh	r3, [r2, #0]
      }
    }

    PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_VALID);
 80055fe:	1d3b      	adds	r3, r7, #4
 8005600:	681a      	ldr	r2, [r3, #0]
 8005602:	463b      	mov	r3, r7
 8005604:	681b      	ldr	r3, [r3, #0]
 8005606:	781b      	ldrb	r3, [r3, #0]
 8005608:	009b      	lsls	r3, r3, #2
 800560a:	4413      	add	r3, r2
 800560c:	881b      	ldrh	r3, [r3, #0]
 800560e:	b29b      	uxth	r3, r3
 8005610:	f107 020e 	add.w	r2, r7, #14
 8005614:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8005618:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800561c:	8013      	strh	r3, [r2, #0]
 800561e:	f107 030e 	add.w	r3, r7, #14
 8005622:	f107 020e 	add.w	r2, r7, #14
 8005626:	8812      	ldrh	r2, [r2, #0]
 8005628:	f082 0210 	eor.w	r2, r2, #16
 800562c:	801a      	strh	r2, [r3, #0]
 800562e:	f107 030e 	add.w	r3, r7, #14
 8005632:	f107 020e 	add.w	r2, r7, #14
 8005636:	8812      	ldrh	r2, [r2, #0]
 8005638:	f082 0220 	eor.w	r2, r2, #32
 800563c:	801a      	strh	r2, [r3, #0]
 800563e:	1d3b      	adds	r3, r7, #4
 8005640:	681a      	ldr	r2, [r3, #0]
 8005642:	463b      	mov	r3, r7
 8005644:	681b      	ldr	r3, [r3, #0]
 8005646:	781b      	ldrb	r3, [r3, #0]
 8005648:	009b      	lsls	r3, r3, #2
 800564a:	441a      	add	r2, r3
 800564c:	f107 030e 	add.w	r3, r7, #14
 8005650:	881b      	ldrh	r3, [r3, #0]
 8005652:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8005656:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 800565a:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800565e:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8005662:	b29b      	uxth	r3, r3
 8005664:	8013      	strh	r3, [r2, #0]
 8005666:	e3b5      	b.n	8005dd4 <USB_EPStartXfer+0x1234>
  }
  else /* OUT endpoint */
  {
    if (ep->doublebuffer == 0U)
 8005668:	463b      	mov	r3, r7
 800566a:	681b      	ldr	r3, [r3, #0]
 800566c:	7b1b      	ldrb	r3, [r3, #12]
 800566e:	2b00      	cmp	r3, #0
 8005670:	f040 8090 	bne.w	8005794 <USB_EPStartXfer+0xbf4>
    {
      /* Multi packet transfer */
      if (ep->xfer_len > ep->maxpacket)
 8005674:	463b      	mov	r3, r7
 8005676:	681b      	ldr	r3, [r3, #0]
 8005678:	699a      	ldr	r2, [r3, #24]
 800567a:	463b      	mov	r3, r7
 800567c:	681b      	ldr	r3, [r3, #0]
 800567e:	691b      	ldr	r3, [r3, #16]
 8005680:	429a      	cmp	r2, r3
 8005682:	d90e      	bls.n	80056a2 <USB_EPStartXfer+0xb02>
      {
        len = ep->maxpacket;
 8005684:	463b      	mov	r3, r7
 8005686:	681b      	ldr	r3, [r3, #0]
 8005688:	691b      	ldr	r3, [r3, #16]
 800568a:	f8c7 310c 	str.w	r3, [r7, #268]	; 0x10c
        ep->xfer_len -= len;
 800568e:	463b      	mov	r3, r7
 8005690:	681b      	ldr	r3, [r3, #0]
 8005692:	699a      	ldr	r2, [r3, #24]
 8005694:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8005698:	1ad2      	subs	r2, r2, r3
 800569a:	463b      	mov	r3, r7
 800569c:	681b      	ldr	r3, [r3, #0]
 800569e:	619a      	str	r2, [r3, #24]
 80056a0:	e008      	b.n	80056b4 <USB_EPStartXfer+0xb14>
      }
      else
      {
        len = ep->xfer_len;
 80056a2:	463b      	mov	r3, r7
 80056a4:	681b      	ldr	r3, [r3, #0]
 80056a6:	699b      	ldr	r3, [r3, #24]
 80056a8:	f8c7 310c 	str.w	r3, [r7, #268]	; 0x10c
        ep->xfer_len = 0U;
 80056ac:	463b      	mov	r3, r7
 80056ae:	681b      	ldr	r3, [r3, #0]
 80056b0:	2200      	movs	r2, #0
 80056b2:	619a      	str	r2, [r3, #24]
      }
      /* configure and validate Rx endpoint */
      PCD_SET_EP_RX_CNT(USBx, ep->num, len);
 80056b4:	1d3b      	adds	r3, r7, #4
 80056b6:	681b      	ldr	r3, [r3, #0]
 80056b8:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
 80056bc:	1d3b      	adds	r3, r7, #4
 80056be:	681b      	ldr	r3, [r3, #0]
 80056c0:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 80056c4:	b29b      	uxth	r3, r3
 80056c6:	461a      	mov	r2, r3
 80056c8:	f8d7 3094 	ldr.w	r3, [r7, #148]	; 0x94
 80056cc:	4413      	add	r3, r2
 80056ce:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
 80056d2:	463b      	mov	r3, r7
 80056d4:	681b      	ldr	r3, [r3, #0]
 80056d6:	781b      	ldrb	r3, [r3, #0]
 80056d8:	011a      	lsls	r2, r3, #4
 80056da:	f8d7 3094 	ldr.w	r3, [r7, #148]	; 0x94
 80056de:	4413      	add	r3, r2
 80056e0:	f203 430c 	addw	r3, r3, #1036	; 0x40c
 80056e4:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
 80056e8:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 80056ec:	2b00      	cmp	r3, #0
 80056ee:	d116      	bne.n	800571e <USB_EPStartXfer+0xb7e>
 80056f0:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 80056f4:	881b      	ldrh	r3, [r3, #0]
 80056f6:	b29b      	uxth	r3, r3
 80056f8:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 80056fc:	b29a      	uxth	r2, r3
 80056fe:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 8005702:	801a      	strh	r2, [r3, #0]
 8005704:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 8005708:	881b      	ldrh	r3, [r3, #0]
 800570a:	b29b      	uxth	r3, r3
 800570c:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8005710:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8005714:	b29a      	uxth	r2, r3
 8005716:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 800571a:	801a      	strh	r2, [r3, #0]
 800571c:	e32c      	b.n	8005d78 <USB_EPStartXfer+0x11d8>
 800571e:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8005722:	2b3e      	cmp	r3, #62	; 0x3e
 8005724:	d818      	bhi.n	8005758 <USB_EPStartXfer+0xbb8>
 8005726:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 800572a:	085b      	lsrs	r3, r3, #1
 800572c:	f8c7 30ec 	str.w	r3, [r7, #236]	; 0xec
 8005730:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8005734:	f003 0301 	and.w	r3, r3, #1
 8005738:	2b00      	cmp	r3, #0
 800573a:	d004      	beq.n	8005746 <USB_EPStartXfer+0xba6>
 800573c:	f8d7 30ec 	ldr.w	r3, [r7, #236]	; 0xec
 8005740:	3301      	adds	r3, #1
 8005742:	f8c7 30ec 	str.w	r3, [r7, #236]	; 0xec
 8005746:	f8d7 30ec 	ldr.w	r3, [r7, #236]	; 0xec
 800574a:	b29b      	uxth	r3, r3
 800574c:	029b      	lsls	r3, r3, #10
 800574e:	b29a      	uxth	r2, r3
 8005750:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 8005754:	801a      	strh	r2, [r3, #0]
 8005756:	e30f      	b.n	8005d78 <USB_EPStartXfer+0x11d8>
 8005758:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 800575c:	095b      	lsrs	r3, r3, #5
 800575e:	f8c7 30ec 	str.w	r3, [r7, #236]	; 0xec
 8005762:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8005766:	f003 031f 	and.w	r3, r3, #31
 800576a:	2b00      	cmp	r3, #0
 800576c:	d104      	bne.n	8005778 <USB_EPStartXfer+0xbd8>
 800576e:	f8d7 30ec 	ldr.w	r3, [r7, #236]	; 0xec
 8005772:	3b01      	subs	r3, #1
 8005774:	f8c7 30ec 	str.w	r3, [r7, #236]	; 0xec
 8005778:	f8d7 30ec 	ldr.w	r3, [r7, #236]	; 0xec
 800577c:	b29b      	uxth	r3, r3
 800577e:	029b      	lsls	r3, r3, #10
 8005780:	b29b      	uxth	r3, r3
 8005782:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8005786:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800578a:	b29a      	uxth	r2, r3
 800578c:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 8005790:	801a      	strh	r2, [r3, #0]
 8005792:	e2f1      	b.n	8005d78 <USB_EPStartXfer+0x11d8>
    }
    else
    {
      /* First Transfer Coming From HAL_PCD_EP_Receive & From ISR */
      /* Set the Double buffer counter */
      if (ep->type == EP_TYPE_BULK)
 8005794:	463b      	mov	r3, r7
 8005796:	681b      	ldr	r3, [r3, #0]
 8005798:	78db      	ldrb	r3, [r3, #3]
 800579a:	2b02      	cmp	r3, #2
 800579c:	f040 818f 	bne.w	8005abe <USB_EPStartXfer+0xf1e>
      {
        PCD_SET_EP_DBUF_CNT(USBx, ep->num, ep->is_in, ep->maxpacket);
 80057a0:	463b      	mov	r3, r7
 80057a2:	681b      	ldr	r3, [r3, #0]
 80057a4:	785b      	ldrb	r3, [r3, #1]
 80057a6:	2b00      	cmp	r3, #0
 80057a8:	d175      	bne.n	8005896 <USB_EPStartXfer+0xcf6>
 80057aa:	1d3b      	adds	r3, r7, #4
 80057ac:	681b      	ldr	r3, [r3, #0]
 80057ae:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 80057b2:	1d3b      	adds	r3, r7, #4
 80057b4:	681b      	ldr	r3, [r3, #0]
 80057b6:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 80057ba:	b29b      	uxth	r3, r3
 80057bc:	461a      	mov	r2, r3
 80057be:	f8d7 30b0 	ldr.w	r3, [r7, #176]	; 0xb0
 80057c2:	4413      	add	r3, r2
 80057c4:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 80057c8:	463b      	mov	r3, r7
 80057ca:	681b      	ldr	r3, [r3, #0]
 80057cc:	781b      	ldrb	r3, [r3, #0]
 80057ce:	011a      	lsls	r2, r3, #4
 80057d0:	f8d7 30b0 	ldr.w	r3, [r7, #176]	; 0xb0
 80057d4:	4413      	add	r3, r2
 80057d6:	f203 4304 	addw	r3, r3, #1028	; 0x404
 80057da:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
 80057de:	463b      	mov	r3, r7
 80057e0:	681b      	ldr	r3, [r3, #0]
 80057e2:	691b      	ldr	r3, [r3, #16]
 80057e4:	2b00      	cmp	r3, #0
 80057e6:	d116      	bne.n	8005816 <USB_EPStartXfer+0xc76>
 80057e8:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 80057ec:	881b      	ldrh	r3, [r3, #0]
 80057ee:	b29b      	uxth	r3, r3
 80057f0:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 80057f4:	b29a      	uxth	r2, r3
 80057f6:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 80057fa:	801a      	strh	r2, [r3, #0]
 80057fc:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 8005800:	881b      	ldrh	r3, [r3, #0]
 8005802:	b29b      	uxth	r3, r3
 8005804:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8005808:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800580c:	b29a      	uxth	r2, r3
 800580e:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 8005812:	801a      	strh	r2, [r3, #0]
 8005814:	e065      	b.n	80058e2 <USB_EPStartXfer+0xd42>
 8005816:	463b      	mov	r3, r7
 8005818:	681b      	ldr	r3, [r3, #0]
 800581a:	691b      	ldr	r3, [r3, #16]
 800581c:	2b3e      	cmp	r3, #62	; 0x3e
 800581e:	d81a      	bhi.n	8005856 <USB_EPStartXfer+0xcb6>
 8005820:	463b      	mov	r3, r7
 8005822:	681b      	ldr	r3, [r3, #0]
 8005824:	691b      	ldr	r3, [r3, #16]
 8005826:	085b      	lsrs	r3, r3, #1
 8005828:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
 800582c:	463b      	mov	r3, r7
 800582e:	681b      	ldr	r3, [r3, #0]
 8005830:	691b      	ldr	r3, [r3, #16]
 8005832:	f003 0301 	and.w	r3, r3, #1
 8005836:	2b00      	cmp	r3, #0
 8005838:	d004      	beq.n	8005844 <USB_EPStartXfer+0xca4>
 800583a:	f8d7 30e8 	ldr.w	r3, [r7, #232]	; 0xe8
 800583e:	3301      	adds	r3, #1
 8005840:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
 8005844:	f8d7 30e8 	ldr.w	r3, [r7, #232]	; 0xe8
 8005848:	b29b      	uxth	r3, r3
 800584a:	029b      	lsls	r3, r3, #10
 800584c:	b29a      	uxth	r2, r3
 800584e:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 8005852:	801a      	strh	r2, [r3, #0]
 8005854:	e045      	b.n	80058e2 <USB_EPStartXfer+0xd42>
 8005856:	463b      	mov	r3, r7
 8005858:	681b      	ldr	r3, [r3, #0]
 800585a:	691b      	ldr	r3, [r3, #16]
 800585c:	095b      	lsrs	r3, r3, #5
 800585e:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
 8005862:	463b      	mov	r3, r7
 8005864:	681b      	ldr	r3, [r3, #0]
 8005866:	691b      	ldr	r3, [r3, #16]
 8005868:	f003 031f 	and.w	r3, r3, #31
 800586c:	2b00      	cmp	r3, #0
 800586e:	d104      	bne.n	800587a <USB_EPStartXfer+0xcda>
 8005870:	f8d7 30e8 	ldr.w	r3, [r7, #232]	; 0xe8
 8005874:	3b01      	subs	r3, #1
 8005876:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
 800587a:	f8d7 30e8 	ldr.w	r3, [r7, #232]	; 0xe8
 800587e:	b29b      	uxth	r3, r3
 8005880:	029b      	lsls	r3, r3, #10
 8005882:	b29b      	uxth	r3, r3
 8005884:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8005888:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800588c:	b29a      	uxth	r2, r3
 800588e:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 8005892:	801a      	strh	r2, [r3, #0]
 8005894:	e025      	b.n	80058e2 <USB_EPStartXfer+0xd42>
 8005896:	463b      	mov	r3, r7
 8005898:	681b      	ldr	r3, [r3, #0]
 800589a:	785b      	ldrb	r3, [r3, #1]
 800589c:	2b01      	cmp	r3, #1
 800589e:	d120      	bne.n	80058e2 <USB_EPStartXfer+0xd42>
 80058a0:	1d3b      	adds	r3, r7, #4
 80058a2:	681b      	ldr	r3, [r3, #0]
 80058a4:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 80058a8:	1d3b      	adds	r3, r7, #4
 80058aa:	681b      	ldr	r3, [r3, #0]
 80058ac:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 80058b0:	b29b      	uxth	r3, r3
 80058b2:	461a      	mov	r2, r3
 80058b4:	f8d7 30b8 	ldr.w	r3, [r7, #184]	; 0xb8
 80058b8:	4413      	add	r3, r2
 80058ba:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 80058be:	463b      	mov	r3, r7
 80058c0:	681b      	ldr	r3, [r3, #0]
 80058c2:	781b      	ldrb	r3, [r3, #0]
 80058c4:	011a      	lsls	r2, r3, #4
 80058c6:	f8d7 30b8 	ldr.w	r3, [r7, #184]	; 0xb8
 80058ca:	4413      	add	r3, r2
 80058cc:	f203 4304 	addw	r3, r3, #1028	; 0x404
 80058d0:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 80058d4:	463b      	mov	r3, r7
 80058d6:	681b      	ldr	r3, [r3, #0]
 80058d8:	691b      	ldr	r3, [r3, #16]
 80058da:	b29a      	uxth	r2, r3
 80058dc:	f8d7 30b4 	ldr.w	r3, [r7, #180]	; 0xb4
 80058e0:	801a      	strh	r2, [r3, #0]
 80058e2:	1d3b      	adds	r3, r7, #4
 80058e4:	681b      	ldr	r3, [r3, #0]
 80058e6:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
 80058ea:	463b      	mov	r3, r7
 80058ec:	681b      	ldr	r3, [r3, #0]
 80058ee:	785b      	ldrb	r3, [r3, #1]
 80058f0:	2b00      	cmp	r3, #0
 80058f2:	d175      	bne.n	80059e0 <USB_EPStartXfer+0xe40>
 80058f4:	1d3b      	adds	r3, r7, #4
 80058f6:	681b      	ldr	r3, [r3, #0]
 80058f8:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
 80058fc:	1d3b      	adds	r3, r7, #4
 80058fe:	681b      	ldr	r3, [r3, #0]
 8005900:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8005904:	b29b      	uxth	r3, r3
 8005906:	461a      	mov	r2, r3
 8005908:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 800590c:	4413      	add	r3, r2
 800590e:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
 8005912:	463b      	mov	r3, r7
 8005914:	681b      	ldr	r3, [r3, #0]
 8005916:	781b      	ldrb	r3, [r3, #0]
 8005918:	011a      	lsls	r2, r3, #4
 800591a:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 800591e:	4413      	add	r3, r2
 8005920:	f203 430c 	addw	r3, r3, #1036	; 0x40c
 8005924:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
 8005928:	463b      	mov	r3, r7
 800592a:	681b      	ldr	r3, [r3, #0]
 800592c:	691b      	ldr	r3, [r3, #16]
 800592e:	2b00      	cmp	r3, #0
 8005930:	d116      	bne.n	8005960 <USB_EPStartXfer+0xdc0>
 8005932:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 8005936:	881b      	ldrh	r3, [r3, #0]
 8005938:	b29b      	uxth	r3, r3
 800593a:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 800593e:	b29a      	uxth	r2, r3
 8005940:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 8005944:	801a      	strh	r2, [r3, #0]
 8005946:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 800594a:	881b      	ldrh	r3, [r3, #0]
 800594c:	b29b      	uxth	r3, r3
 800594e:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8005952:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8005956:	b29a      	uxth	r2, r3
 8005958:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 800595c:	801a      	strh	r2, [r3, #0]
 800595e:	e061      	b.n	8005a24 <USB_EPStartXfer+0xe84>
 8005960:	463b      	mov	r3, r7
 8005962:	681b      	ldr	r3, [r3, #0]
 8005964:	691b      	ldr	r3, [r3, #16]
 8005966:	2b3e      	cmp	r3, #62	; 0x3e
 8005968:	d81a      	bhi.n	80059a0 <USB_EPStartXfer+0xe00>
 800596a:	463b      	mov	r3, r7
 800596c:	681b      	ldr	r3, [r3, #0]
 800596e:	691b      	ldr	r3, [r3, #16]
 8005970:	085b      	lsrs	r3, r3, #1
 8005972:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
 8005976:	463b      	mov	r3, r7
 8005978:	681b      	ldr	r3, [r3, #0]
 800597a:	691b      	ldr	r3, [r3, #16]
 800597c:	f003 0301 	and.w	r3, r3, #1
 8005980:	2b00      	cmp	r3, #0
 8005982:	d004      	beq.n	800598e <USB_EPStartXfer+0xdee>
 8005984:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8005988:	3301      	adds	r3, #1
 800598a:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
 800598e:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8005992:	b29b      	uxth	r3, r3
 8005994:	029b      	lsls	r3, r3, #10
 8005996:	b29a      	uxth	r2, r3
 8005998:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 800599c:	801a      	strh	r2, [r3, #0]
 800599e:	e041      	b.n	8005a24 <USB_EPStartXfer+0xe84>
 80059a0:	463b      	mov	r3, r7
 80059a2:	681b      	ldr	r3, [r3, #0]
 80059a4:	691b      	ldr	r3, [r3, #16]
 80059a6:	095b      	lsrs	r3, r3, #5
 80059a8:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
 80059ac:	463b      	mov	r3, r7
 80059ae:	681b      	ldr	r3, [r3, #0]
 80059b0:	691b      	ldr	r3, [r3, #16]
 80059b2:	f003 031f 	and.w	r3, r3, #31
 80059b6:	2b00      	cmp	r3, #0
 80059b8:	d104      	bne.n	80059c4 <USB_EPStartXfer+0xe24>
 80059ba:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80059be:	3b01      	subs	r3, #1
 80059c0:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
 80059c4:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80059c8:	b29b      	uxth	r3, r3
 80059ca:	029b      	lsls	r3, r3, #10
 80059cc:	b29b      	uxth	r3, r3
 80059ce:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 80059d2:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 80059d6:	b29a      	uxth	r2, r3
 80059d8:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 80059dc:	801a      	strh	r2, [r3, #0]
 80059de:	e021      	b.n	8005a24 <USB_EPStartXfer+0xe84>
 80059e0:	463b      	mov	r3, r7
 80059e2:	681b      	ldr	r3, [r3, #0]
 80059e4:	785b      	ldrb	r3, [r3, #1]
 80059e6:	2b01      	cmp	r3, #1
 80059e8:	d11c      	bne.n	8005a24 <USB_EPStartXfer+0xe84>
 80059ea:	1d3b      	adds	r3, r7, #4
 80059ec:	681b      	ldr	r3, [r3, #0]
 80059ee:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 80059f2:	b29b      	uxth	r3, r3
 80059f4:	461a      	mov	r2, r3
 80059f6:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 80059fa:	4413      	add	r3, r2
 80059fc:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
 8005a00:	463b      	mov	r3, r7
 8005a02:	681b      	ldr	r3, [r3, #0]
 8005a04:	781b      	ldrb	r3, [r3, #0]
 8005a06:	011a      	lsls	r2, r3, #4
 8005a08:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 8005a0c:	4413      	add	r3, r2
 8005a0e:	f203 430c 	addw	r3, r3, #1036	; 0x40c
 8005a12:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
 8005a16:	463b      	mov	r3, r7
 8005a18:	681b      	ldr	r3, [r3, #0]
 8005a1a:	691b      	ldr	r3, [r3, #16]
 8005a1c:	b29a      	uxth	r2, r3
 8005a1e:	f8d7 30a4 	ldr.w	r3, [r7, #164]	; 0xa4
 8005a22:	801a      	strh	r2, [r3, #0]

        /* Coming from ISR */
        if (ep->xfer_count != 0U)
 8005a24:	463b      	mov	r3, r7
 8005a26:	681b      	ldr	r3, [r3, #0]
 8005a28:	69db      	ldr	r3, [r3, #28]
 8005a2a:	2b00      	cmp	r3, #0
 8005a2c:	f000 81a4 	beq.w	8005d78 <USB_EPStartXfer+0x11d8>
        {
          /* update last value to check if there is blocking state */
          wEPVal = PCD_GET_ENDPOINT(USBx, ep->num);
 8005a30:	1d3b      	adds	r3, r7, #4
 8005a32:	681a      	ldr	r2, [r3, #0]
 8005a34:	463b      	mov	r3, r7
 8005a36:	681b      	ldr	r3, [r3, #0]
 8005a38:	781b      	ldrb	r3, [r3, #0]
 8005a3a:	009b      	lsls	r3, r3, #2
 8005a3c:	4413      	add	r3, r2
 8005a3e:	881b      	ldrh	r3, [r3, #0]
 8005a40:	f8a7 309a 	strh.w	r3, [r7, #154]	; 0x9a

          /*Blocking State */
          if ((((wEPVal & USB_EP_DTOG_RX) != 0U) && ((wEPVal & USB_EP_DTOG_TX) != 0U)) ||
 8005a44:	f8b7 309a 	ldrh.w	r3, [r7, #154]	; 0x9a
 8005a48:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8005a4c:	2b00      	cmp	r3, #0
 8005a4e:	d005      	beq.n	8005a5c <USB_EPStartXfer+0xebc>
 8005a50:	f8b7 309a 	ldrh.w	r3, [r7, #154]	; 0x9a
 8005a54:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005a58:	2b00      	cmp	r3, #0
 8005a5a:	d10d      	bne.n	8005a78 <USB_EPStartXfer+0xed8>
              (((wEPVal & USB_EP_DTOG_RX) == 0U) && ((wEPVal & USB_EP_DTOG_TX) == 0U)))
 8005a5c:	f8b7 309a 	ldrh.w	r3, [r7, #154]	; 0x9a
 8005a60:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
          if ((((wEPVal & USB_EP_DTOG_RX) != 0U) && ((wEPVal & USB_EP_DTOG_TX) != 0U)) ||
 8005a64:	2b00      	cmp	r3, #0
 8005a66:	f040 8187 	bne.w	8005d78 <USB_EPStartXfer+0x11d8>
              (((wEPVal & USB_EP_DTOG_RX) == 0U) && ((wEPVal & USB_EP_DTOG_TX) == 0U)))
 8005a6a:	f8b7 309a 	ldrh.w	r3, [r7, #154]	; 0x9a
 8005a6e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005a72:	2b00      	cmp	r3, #0
 8005a74:	f040 8180 	bne.w	8005d78 <USB_EPStartXfer+0x11d8>
          {
            PCD_FreeUserBuffer(USBx, ep->num, 0U);
 8005a78:	1d3b      	adds	r3, r7, #4
 8005a7a:	681a      	ldr	r2, [r3, #0]
 8005a7c:	463b      	mov	r3, r7
 8005a7e:	681b      	ldr	r3, [r3, #0]
 8005a80:	781b      	ldrb	r3, [r3, #0]
 8005a82:	009b      	lsls	r3, r3, #2
 8005a84:	4413      	add	r3, r2
 8005a86:	881b      	ldrh	r3, [r3, #0]
 8005a88:	b29b      	uxth	r3, r3
 8005a8a:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8005a8e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8005a92:	f8a7 3098 	strh.w	r3, [r7, #152]	; 0x98
 8005a96:	1d3b      	adds	r3, r7, #4
 8005a98:	681a      	ldr	r2, [r3, #0]
 8005a9a:	463b      	mov	r3, r7
 8005a9c:	681b      	ldr	r3, [r3, #0]
 8005a9e:	781b      	ldrb	r3, [r3, #0]
 8005aa0:	009b      	lsls	r3, r3, #2
 8005aa2:	441a      	add	r2, r3
 8005aa4:	f8b7 3098 	ldrh.w	r3, [r7, #152]	; 0x98
 8005aa8:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8005aac:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8005ab0:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8005ab4:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 8005ab8:	b29b      	uxth	r3, r3
 8005aba:	8013      	strh	r3, [r2, #0]
 8005abc:	e15c      	b.n	8005d78 <USB_EPStartXfer+0x11d8>
          }
        }
      }
      /* iso out double */
      else if (ep->type == EP_TYPE_ISOC)
 8005abe:	463b      	mov	r3, r7
 8005ac0:	681b      	ldr	r3, [r3, #0]
 8005ac2:	78db      	ldrb	r3, [r3, #3]
 8005ac4:	2b01      	cmp	r3, #1
 8005ac6:	f040 8155 	bne.w	8005d74 <USB_EPStartXfer+0x11d4>
      {
        /* Multi packet transfer */
        if (ep->xfer_len > ep->maxpacket)
 8005aca:	463b      	mov	r3, r7
 8005acc:	681b      	ldr	r3, [r3, #0]
 8005ace:	699a      	ldr	r2, [r3, #24]
 8005ad0:	463b      	mov	r3, r7
 8005ad2:	681b      	ldr	r3, [r3, #0]
 8005ad4:	691b      	ldr	r3, [r3, #16]
 8005ad6:	429a      	cmp	r2, r3
 8005ad8:	d90e      	bls.n	8005af8 <USB_EPStartXfer+0xf58>
        {
          len = ep->maxpacket;
 8005ada:	463b      	mov	r3, r7
 8005adc:	681b      	ldr	r3, [r3, #0]
 8005ade:	691b      	ldr	r3, [r3, #16]
 8005ae0:	f8c7 310c 	str.w	r3, [r7, #268]	; 0x10c
          ep->xfer_len -= len;
 8005ae4:	463b      	mov	r3, r7
 8005ae6:	681b      	ldr	r3, [r3, #0]
 8005ae8:	699a      	ldr	r2, [r3, #24]
 8005aea:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8005aee:	1ad2      	subs	r2, r2, r3
 8005af0:	463b      	mov	r3, r7
 8005af2:	681b      	ldr	r3, [r3, #0]
 8005af4:	619a      	str	r2, [r3, #24]
 8005af6:	e008      	b.n	8005b0a <USB_EPStartXfer+0xf6a>
        }
        else
        {
          len = ep->xfer_len;
 8005af8:	463b      	mov	r3, r7
 8005afa:	681b      	ldr	r3, [r3, #0]
 8005afc:	699b      	ldr	r3, [r3, #24]
 8005afe:	f8c7 310c 	str.w	r3, [r7, #268]	; 0x10c
          ep->xfer_len = 0U;
 8005b02:	463b      	mov	r3, r7
 8005b04:	681b      	ldr	r3, [r3, #0]
 8005b06:	2200      	movs	r2, #0
 8005b08:	619a      	str	r2, [r3, #24]
        }
        PCD_SET_EP_DBUF_CNT(USBx, ep->num, ep->is_in, len);
 8005b0a:	463b      	mov	r3, r7
 8005b0c:	681b      	ldr	r3, [r3, #0]
 8005b0e:	785b      	ldrb	r3, [r3, #1]
 8005b10:	2b00      	cmp	r3, #0
 8005b12:	d16f      	bne.n	8005bf4 <USB_EPStartXfer+0x1054>
 8005b14:	1d3b      	adds	r3, r7, #4
 8005b16:	681b      	ldr	r3, [r3, #0]
 8005b18:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 8005b1c:	1d3b      	adds	r3, r7, #4
 8005b1e:	681b      	ldr	r3, [r3, #0]
 8005b20:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8005b24:	b29b      	uxth	r3, r3
 8005b26:	461a      	mov	r2, r3
 8005b28:	f8d7 30d0 	ldr.w	r3, [r7, #208]	; 0xd0
 8005b2c:	4413      	add	r3, r2
 8005b2e:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 8005b32:	463b      	mov	r3, r7
 8005b34:	681b      	ldr	r3, [r3, #0]
 8005b36:	781b      	ldrb	r3, [r3, #0]
 8005b38:	011a      	lsls	r2, r3, #4
 8005b3a:	f8d7 30d0 	ldr.w	r3, [r7, #208]	; 0xd0
 8005b3e:	4413      	add	r3, r2
 8005b40:	f203 4304 	addw	r3, r3, #1028	; 0x404
 8005b44:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
 8005b48:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8005b4c:	2b00      	cmp	r3, #0
 8005b4e:	d116      	bne.n	8005b7e <USB_EPStartXfer+0xfde>
 8005b50:	f8d7 30cc 	ldr.w	r3, [r7, #204]	; 0xcc
 8005b54:	881b      	ldrh	r3, [r3, #0]
 8005b56:	b29b      	uxth	r3, r3
 8005b58:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 8005b5c:	b29a      	uxth	r2, r3
 8005b5e:	f8d7 30cc 	ldr.w	r3, [r7, #204]	; 0xcc
 8005b62:	801a      	strh	r2, [r3, #0]
 8005b64:	f8d7 30cc 	ldr.w	r3, [r7, #204]	; 0xcc
 8005b68:	881b      	ldrh	r3, [r3, #0]
 8005b6a:	b29b      	uxth	r3, r3
 8005b6c:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8005b70:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8005b74:	b29a      	uxth	r2, r3
 8005b76:	f8d7 30cc 	ldr.w	r3, [r7, #204]	; 0xcc
 8005b7a:	801a      	strh	r2, [r3, #0]
 8005b7c:	e05f      	b.n	8005c3e <USB_EPStartXfer+0x109e>
 8005b7e:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8005b82:	2b3e      	cmp	r3, #62	; 0x3e
 8005b84:	d818      	bhi.n	8005bb8 <USB_EPStartXfer+0x1018>
 8005b86:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8005b8a:	085b      	lsrs	r3, r3, #1
 8005b8c:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
 8005b90:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8005b94:	f003 0301 	and.w	r3, r3, #1
 8005b98:	2b00      	cmp	r3, #0
 8005b9a:	d004      	beq.n	8005ba6 <USB_EPStartXfer+0x1006>
 8005b9c:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8005ba0:	3301      	adds	r3, #1
 8005ba2:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
 8005ba6:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8005baa:	b29b      	uxth	r3, r3
 8005bac:	029b      	lsls	r3, r3, #10
 8005bae:	b29a      	uxth	r2, r3
 8005bb0:	f8d7 30cc 	ldr.w	r3, [r7, #204]	; 0xcc
 8005bb4:	801a      	strh	r2, [r3, #0]
 8005bb6:	e042      	b.n	8005c3e <USB_EPStartXfer+0x109e>
 8005bb8:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8005bbc:	095b      	lsrs	r3, r3, #5
 8005bbe:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
 8005bc2:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8005bc6:	f003 031f 	and.w	r3, r3, #31
 8005bca:	2b00      	cmp	r3, #0
 8005bcc:	d104      	bne.n	8005bd8 <USB_EPStartXfer+0x1038>
 8005bce:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8005bd2:	3b01      	subs	r3, #1
 8005bd4:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
 8005bd8:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8005bdc:	b29b      	uxth	r3, r3
 8005bde:	029b      	lsls	r3, r3, #10
 8005be0:	b29b      	uxth	r3, r3
 8005be2:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8005be6:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8005bea:	b29a      	uxth	r2, r3
 8005bec:	f8d7 30cc 	ldr.w	r3, [r7, #204]	; 0xcc
 8005bf0:	801a      	strh	r2, [r3, #0]
 8005bf2:	e024      	b.n	8005c3e <USB_EPStartXfer+0x109e>
 8005bf4:	463b      	mov	r3, r7
 8005bf6:	681b      	ldr	r3, [r3, #0]
 8005bf8:	785b      	ldrb	r3, [r3, #1]
 8005bfa:	2b01      	cmp	r3, #1
 8005bfc:	d11f      	bne.n	8005c3e <USB_EPStartXfer+0x109e>
 8005bfe:	1d3b      	adds	r3, r7, #4
 8005c00:	681b      	ldr	r3, [r3, #0]
 8005c02:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
 8005c06:	1d3b      	adds	r3, r7, #4
 8005c08:	681b      	ldr	r3, [r3, #0]
 8005c0a:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8005c0e:	b29b      	uxth	r3, r3
 8005c10:	461a      	mov	r2, r3
 8005c12:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 8005c16:	4413      	add	r3, r2
 8005c18:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
 8005c1c:	463b      	mov	r3, r7
 8005c1e:	681b      	ldr	r3, [r3, #0]
 8005c20:	781b      	ldrb	r3, [r3, #0]
 8005c22:	011a      	lsls	r2, r3, #4
 8005c24:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 8005c28:	4413      	add	r3, r2
 8005c2a:	f203 4304 	addw	r3, r3, #1028	; 0x404
 8005c2e:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
 8005c32:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8005c36:	b29a      	uxth	r2, r3
 8005c38:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 8005c3c:	801a      	strh	r2, [r3, #0]
 8005c3e:	1d3b      	adds	r3, r7, #4
 8005c40:	681b      	ldr	r3, [r3, #0]
 8005c42:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 8005c46:	463b      	mov	r3, r7
 8005c48:	681b      	ldr	r3, [r3, #0]
 8005c4a:	785b      	ldrb	r3, [r3, #1]
 8005c4c:	2b00      	cmp	r3, #0
 8005c4e:	d16f      	bne.n	8005d30 <USB_EPStartXfer+0x1190>
 8005c50:	1d3b      	adds	r3, r7, #4
 8005c52:	681b      	ldr	r3, [r3, #0]
 8005c54:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 8005c58:	1d3b      	adds	r3, r7, #4
 8005c5a:	681b      	ldr	r3, [r3, #0]
 8005c5c:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8005c60:	b29b      	uxth	r3, r3
 8005c62:	461a      	mov	r2, r3
 8005c64:	f8d7 30c0 	ldr.w	r3, [r7, #192]	; 0xc0
 8005c68:	4413      	add	r3, r2
 8005c6a:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 8005c6e:	463b      	mov	r3, r7
 8005c70:	681b      	ldr	r3, [r3, #0]
 8005c72:	781b      	ldrb	r3, [r3, #0]
 8005c74:	011a      	lsls	r2, r3, #4
 8005c76:	f8d7 30c0 	ldr.w	r3, [r7, #192]	; 0xc0
 8005c7a:	4413      	add	r3, r2
 8005c7c:	f203 430c 	addw	r3, r3, #1036	; 0x40c
 8005c80:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
 8005c84:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8005c88:	2b00      	cmp	r3, #0
 8005c8a:	d116      	bne.n	8005cba <USB_EPStartXfer+0x111a>
 8005c8c:	f8d7 30bc 	ldr.w	r3, [r7, #188]	; 0xbc
 8005c90:	881b      	ldrh	r3, [r3, #0]
 8005c92:	b29b      	uxth	r3, r3
 8005c94:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 8005c98:	b29a      	uxth	r2, r3
 8005c9a:	f8d7 30bc 	ldr.w	r3, [r7, #188]	; 0xbc
 8005c9e:	801a      	strh	r2, [r3, #0]
 8005ca0:	f8d7 30bc 	ldr.w	r3, [r7, #188]	; 0xbc
 8005ca4:	881b      	ldrh	r3, [r3, #0]
 8005ca6:	b29b      	uxth	r3, r3
 8005ca8:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8005cac:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8005cb0:	b29a      	uxth	r2, r3
 8005cb2:	f8d7 30bc 	ldr.w	r3, [r7, #188]	; 0xbc
 8005cb6:	801a      	strh	r2, [r3, #0]
 8005cb8:	e05e      	b.n	8005d78 <USB_EPStartXfer+0x11d8>
 8005cba:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8005cbe:	2b3e      	cmp	r3, #62	; 0x3e
 8005cc0:	d818      	bhi.n	8005cf4 <USB_EPStartXfer+0x1154>
 8005cc2:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8005cc6:	085b      	lsrs	r3, r3, #1
 8005cc8:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
 8005ccc:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8005cd0:	f003 0301 	and.w	r3, r3, #1
 8005cd4:	2b00      	cmp	r3, #0
 8005cd6:	d004      	beq.n	8005ce2 <USB_EPStartXfer+0x1142>
 8005cd8:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8005cdc:	3301      	adds	r3, #1
 8005cde:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
 8005ce2:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8005ce6:	b29b      	uxth	r3, r3
 8005ce8:	029b      	lsls	r3, r3, #10
 8005cea:	b29a      	uxth	r2, r3
 8005cec:	f8d7 30bc 	ldr.w	r3, [r7, #188]	; 0xbc
 8005cf0:	801a      	strh	r2, [r3, #0]
 8005cf2:	e041      	b.n	8005d78 <USB_EPStartXfer+0x11d8>
 8005cf4:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8005cf8:	095b      	lsrs	r3, r3, #5
 8005cfa:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
 8005cfe:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8005d02:	f003 031f 	and.w	r3, r3, #31
 8005d06:	2b00      	cmp	r3, #0
 8005d08:	d104      	bne.n	8005d14 <USB_EPStartXfer+0x1174>
 8005d0a:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8005d0e:	3b01      	subs	r3, #1
 8005d10:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
 8005d14:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8005d18:	b29b      	uxth	r3, r3
 8005d1a:	029b      	lsls	r3, r3, #10
 8005d1c:	b29b      	uxth	r3, r3
 8005d1e:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8005d22:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8005d26:	b29a      	uxth	r2, r3
 8005d28:	f8d7 30bc 	ldr.w	r3, [r7, #188]	; 0xbc
 8005d2c:	801a      	strh	r2, [r3, #0]
 8005d2e:	e023      	b.n	8005d78 <USB_EPStartXfer+0x11d8>
 8005d30:	463b      	mov	r3, r7
 8005d32:	681b      	ldr	r3, [r3, #0]
 8005d34:	785b      	ldrb	r3, [r3, #1]
 8005d36:	2b01      	cmp	r3, #1
 8005d38:	d11e      	bne.n	8005d78 <USB_EPStartXfer+0x11d8>
 8005d3a:	1d3b      	adds	r3, r7, #4
 8005d3c:	681b      	ldr	r3, [r3, #0]
 8005d3e:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8005d42:	b29b      	uxth	r3, r3
 8005d44:	461a      	mov	r2, r3
 8005d46:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 8005d4a:	4413      	add	r3, r2
 8005d4c:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 8005d50:	463b      	mov	r3, r7
 8005d52:	681b      	ldr	r3, [r3, #0]
 8005d54:	781b      	ldrb	r3, [r3, #0]
 8005d56:	011a      	lsls	r2, r3, #4
 8005d58:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 8005d5c:	4413      	add	r3, r2
 8005d5e:	f203 430c 	addw	r3, r3, #1036	; 0x40c
 8005d62:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
 8005d66:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8005d6a:	b29a      	uxth	r2, r3
 8005d6c:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 8005d70:	801a      	strh	r2, [r3, #0]
 8005d72:	e001      	b.n	8005d78 <USB_EPStartXfer+0x11d8>
      }
      else
      {
        return HAL_ERROR;
 8005d74:	2301      	movs	r3, #1
 8005d76:	e02e      	b.n	8005dd6 <USB_EPStartXfer+0x1236>
      }
    }

    PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_VALID);
 8005d78:	1d3b      	adds	r3, r7, #4
 8005d7a:	681a      	ldr	r2, [r3, #0]
 8005d7c:	463b      	mov	r3, r7
 8005d7e:	681b      	ldr	r3, [r3, #0]
 8005d80:	781b      	ldrb	r3, [r3, #0]
 8005d82:	009b      	lsls	r3, r3, #2
 8005d84:	4413      	add	r3, r2
 8005d86:	881b      	ldrh	r3, [r3, #0]
 8005d88:	b29b      	uxth	r3, r3
 8005d8a:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8005d8e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8005d92:	f8a7 308e 	strh.w	r3, [r7, #142]	; 0x8e
 8005d96:	f8b7 308e 	ldrh.w	r3, [r7, #142]	; 0x8e
 8005d9a:	f483 5380 	eor.w	r3, r3, #4096	; 0x1000
 8005d9e:	f8a7 308e 	strh.w	r3, [r7, #142]	; 0x8e
 8005da2:	f8b7 308e 	ldrh.w	r3, [r7, #142]	; 0x8e
 8005da6:	f483 5300 	eor.w	r3, r3, #8192	; 0x2000
 8005daa:	f8a7 308e 	strh.w	r3, [r7, #142]	; 0x8e
 8005dae:	1d3b      	adds	r3, r7, #4
 8005db0:	681a      	ldr	r2, [r3, #0]
 8005db2:	463b      	mov	r3, r7
 8005db4:	681b      	ldr	r3, [r3, #0]
 8005db6:	781b      	ldrb	r3, [r3, #0]
 8005db8:	009b      	lsls	r3, r3, #2
 8005dba:	441a      	add	r2, r3
 8005dbc:	f8b7 308e 	ldrh.w	r3, [r7, #142]	; 0x8e
 8005dc0:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8005dc4:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8005dc8:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8005dcc:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8005dd0:	b29b      	uxth	r3, r3
 8005dd2:	8013      	strh	r3, [r2, #0]
  }

  return HAL_OK;
 8005dd4:	2300      	movs	r3, #0
}
 8005dd6:	4618      	mov	r0, r3
 8005dd8:	f507 7788 	add.w	r7, r7, #272	; 0x110
 8005ddc:	46bd      	mov	sp, r7
 8005dde:	bd80      	pop	{r7, pc}

08005de0 <USB_EPSetStall>:
  * @param  USBx Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPSetStall(USB_TypeDef *USBx, USB_EPTypeDef *ep)
{
 8005de0:	b480      	push	{r7}
 8005de2:	b085      	sub	sp, #20
 8005de4:	af00      	add	r7, sp, #0
 8005de6:	6078      	str	r0, [r7, #4]
 8005de8:	6039      	str	r1, [r7, #0]
  if (ep->is_in != 0U)
 8005dea:	683b      	ldr	r3, [r7, #0]
 8005dec:	785b      	ldrb	r3, [r3, #1]
 8005dee:	2b00      	cmp	r3, #0
 8005df0:	d020      	beq.n	8005e34 <USB_EPSetStall+0x54>
  {
    PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_STALL);
 8005df2:	687a      	ldr	r2, [r7, #4]
 8005df4:	683b      	ldr	r3, [r7, #0]
 8005df6:	781b      	ldrb	r3, [r3, #0]
 8005df8:	009b      	lsls	r3, r3, #2
 8005dfa:	4413      	add	r3, r2
 8005dfc:	881b      	ldrh	r3, [r3, #0]
 8005dfe:	b29b      	uxth	r3, r3
 8005e00:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8005e04:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8005e08:	81bb      	strh	r3, [r7, #12]
 8005e0a:	89bb      	ldrh	r3, [r7, #12]
 8005e0c:	f083 0310 	eor.w	r3, r3, #16
 8005e10:	81bb      	strh	r3, [r7, #12]
 8005e12:	687a      	ldr	r2, [r7, #4]
 8005e14:	683b      	ldr	r3, [r7, #0]
 8005e16:	781b      	ldrb	r3, [r3, #0]
 8005e18:	009b      	lsls	r3, r3, #2
 8005e1a:	441a      	add	r2, r3
 8005e1c:	89bb      	ldrh	r3, [r7, #12]
 8005e1e:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8005e22:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8005e26:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8005e2a:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8005e2e:	b29b      	uxth	r3, r3
 8005e30:	8013      	strh	r3, [r2, #0]
 8005e32:	e01f      	b.n	8005e74 <USB_EPSetStall+0x94>
  }
  else
  {
    PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_STALL);
 8005e34:	687a      	ldr	r2, [r7, #4]
 8005e36:	683b      	ldr	r3, [r7, #0]
 8005e38:	781b      	ldrb	r3, [r3, #0]
 8005e3a:	009b      	lsls	r3, r3, #2
 8005e3c:	4413      	add	r3, r2
 8005e3e:	881b      	ldrh	r3, [r3, #0]
 8005e40:	b29b      	uxth	r3, r3
 8005e42:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8005e46:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8005e4a:	81fb      	strh	r3, [r7, #14]
 8005e4c:	89fb      	ldrh	r3, [r7, #14]
 8005e4e:	f483 5380 	eor.w	r3, r3, #4096	; 0x1000
 8005e52:	81fb      	strh	r3, [r7, #14]
 8005e54:	687a      	ldr	r2, [r7, #4]
 8005e56:	683b      	ldr	r3, [r7, #0]
 8005e58:	781b      	ldrb	r3, [r3, #0]
 8005e5a:	009b      	lsls	r3, r3, #2
 8005e5c:	441a      	add	r2, r3
 8005e5e:	89fb      	ldrh	r3, [r7, #14]
 8005e60:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8005e64:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8005e68:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8005e6c:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8005e70:	b29b      	uxth	r3, r3
 8005e72:	8013      	strh	r3, [r2, #0]
  }

  return HAL_OK;
 8005e74:	2300      	movs	r3, #0
}
 8005e76:	4618      	mov	r0, r3
 8005e78:	3714      	adds	r7, #20
 8005e7a:	46bd      	mov	sp, r7
 8005e7c:	bc80      	pop	{r7}
 8005e7e:	4770      	bx	lr

08005e80 <USB_EPClearStall>:
  * @param  USBx Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPClearStall(USB_TypeDef *USBx, USB_EPTypeDef *ep)
{
 8005e80:	b480      	push	{r7}
 8005e82:	b087      	sub	sp, #28
 8005e84:	af00      	add	r7, sp, #0
 8005e86:	6078      	str	r0, [r7, #4]
 8005e88:	6039      	str	r1, [r7, #0]
  if (ep->doublebuffer == 0U)
 8005e8a:	683b      	ldr	r3, [r7, #0]
 8005e8c:	7b1b      	ldrb	r3, [r3, #12]
 8005e8e:	2b00      	cmp	r3, #0
 8005e90:	f040 809d 	bne.w	8005fce <USB_EPClearStall+0x14e>
  {
    if (ep->is_in != 0U)
 8005e94:	683b      	ldr	r3, [r7, #0]
 8005e96:	785b      	ldrb	r3, [r3, #1]
 8005e98:	2b00      	cmp	r3, #0
 8005e9a:	d04c      	beq.n	8005f36 <USB_EPClearStall+0xb6>
    {
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 8005e9c:	687a      	ldr	r2, [r7, #4]
 8005e9e:	683b      	ldr	r3, [r7, #0]
 8005ea0:	781b      	ldrb	r3, [r3, #0]
 8005ea2:	009b      	lsls	r3, r3, #2
 8005ea4:	4413      	add	r3, r2
 8005ea6:	881b      	ldrh	r3, [r3, #0]
 8005ea8:	823b      	strh	r3, [r7, #16]
 8005eaa:	8a3b      	ldrh	r3, [r7, #16]
 8005eac:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005eb0:	2b00      	cmp	r3, #0
 8005eb2:	d01b      	beq.n	8005eec <USB_EPClearStall+0x6c>
 8005eb4:	687a      	ldr	r2, [r7, #4]
 8005eb6:	683b      	ldr	r3, [r7, #0]
 8005eb8:	781b      	ldrb	r3, [r3, #0]
 8005eba:	009b      	lsls	r3, r3, #2
 8005ebc:	4413      	add	r3, r2
 8005ebe:	881b      	ldrh	r3, [r3, #0]
 8005ec0:	b29b      	uxth	r3, r3
 8005ec2:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8005ec6:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8005eca:	81fb      	strh	r3, [r7, #14]
 8005ecc:	687a      	ldr	r2, [r7, #4]
 8005ece:	683b      	ldr	r3, [r7, #0]
 8005ed0:	781b      	ldrb	r3, [r3, #0]
 8005ed2:	009b      	lsls	r3, r3, #2
 8005ed4:	441a      	add	r2, r3
 8005ed6:	89fb      	ldrh	r3, [r7, #14]
 8005ed8:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8005edc:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8005ee0:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8005ee4:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 8005ee8:	b29b      	uxth	r3, r3
 8005eea:	8013      	strh	r3, [r2, #0]

      if (ep->type != EP_TYPE_ISOC)
 8005eec:	683b      	ldr	r3, [r7, #0]
 8005eee:	78db      	ldrb	r3, [r3, #3]
 8005ef0:	2b01      	cmp	r3, #1
 8005ef2:	d06c      	beq.n	8005fce <USB_EPClearStall+0x14e>
      {
        /* Configure NAK status for the Endpoint */
        PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_NAK);
 8005ef4:	687a      	ldr	r2, [r7, #4]
 8005ef6:	683b      	ldr	r3, [r7, #0]
 8005ef8:	781b      	ldrb	r3, [r3, #0]
 8005efa:	009b      	lsls	r3, r3, #2
 8005efc:	4413      	add	r3, r2
 8005efe:	881b      	ldrh	r3, [r3, #0]
 8005f00:	b29b      	uxth	r3, r3
 8005f02:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8005f06:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8005f0a:	81bb      	strh	r3, [r7, #12]
 8005f0c:	89bb      	ldrh	r3, [r7, #12]
 8005f0e:	f083 0320 	eor.w	r3, r3, #32
 8005f12:	81bb      	strh	r3, [r7, #12]
 8005f14:	687a      	ldr	r2, [r7, #4]
 8005f16:	683b      	ldr	r3, [r7, #0]
 8005f18:	781b      	ldrb	r3, [r3, #0]
 8005f1a:	009b      	lsls	r3, r3, #2
 8005f1c:	441a      	add	r2, r3
 8005f1e:	89bb      	ldrh	r3, [r7, #12]
 8005f20:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8005f24:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8005f28:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8005f2c:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8005f30:	b29b      	uxth	r3, r3
 8005f32:	8013      	strh	r3, [r2, #0]
 8005f34:	e04b      	b.n	8005fce <USB_EPClearStall+0x14e>
      }
    }
    else
    {
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 8005f36:	687a      	ldr	r2, [r7, #4]
 8005f38:	683b      	ldr	r3, [r7, #0]
 8005f3a:	781b      	ldrb	r3, [r3, #0]
 8005f3c:	009b      	lsls	r3, r3, #2
 8005f3e:	4413      	add	r3, r2
 8005f40:	881b      	ldrh	r3, [r3, #0]
 8005f42:	82fb      	strh	r3, [r7, #22]
 8005f44:	8afb      	ldrh	r3, [r7, #22]
 8005f46:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8005f4a:	2b00      	cmp	r3, #0
 8005f4c:	d01b      	beq.n	8005f86 <USB_EPClearStall+0x106>
 8005f4e:	687a      	ldr	r2, [r7, #4]
 8005f50:	683b      	ldr	r3, [r7, #0]
 8005f52:	781b      	ldrb	r3, [r3, #0]
 8005f54:	009b      	lsls	r3, r3, #2
 8005f56:	4413      	add	r3, r2
 8005f58:	881b      	ldrh	r3, [r3, #0]
 8005f5a:	b29b      	uxth	r3, r3
 8005f5c:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8005f60:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8005f64:	82bb      	strh	r3, [r7, #20]
 8005f66:	687a      	ldr	r2, [r7, #4]
 8005f68:	683b      	ldr	r3, [r7, #0]
 8005f6a:	781b      	ldrb	r3, [r3, #0]
 8005f6c:	009b      	lsls	r3, r3, #2
 8005f6e:	441a      	add	r2, r3
 8005f70:	8abb      	ldrh	r3, [r7, #20]
 8005f72:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8005f76:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8005f7a:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8005f7e:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8005f82:	b29b      	uxth	r3, r3
 8005f84:	8013      	strh	r3, [r2, #0]

      /* Configure VALID status for the Endpoint */
      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_VALID);
 8005f86:	687a      	ldr	r2, [r7, #4]
 8005f88:	683b      	ldr	r3, [r7, #0]
 8005f8a:	781b      	ldrb	r3, [r3, #0]
 8005f8c:	009b      	lsls	r3, r3, #2
 8005f8e:	4413      	add	r3, r2
 8005f90:	881b      	ldrh	r3, [r3, #0]
 8005f92:	b29b      	uxth	r3, r3
 8005f94:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8005f98:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8005f9c:	827b      	strh	r3, [r7, #18]
 8005f9e:	8a7b      	ldrh	r3, [r7, #18]
 8005fa0:	f483 5380 	eor.w	r3, r3, #4096	; 0x1000
 8005fa4:	827b      	strh	r3, [r7, #18]
 8005fa6:	8a7b      	ldrh	r3, [r7, #18]
 8005fa8:	f483 5300 	eor.w	r3, r3, #8192	; 0x2000
 8005fac:	827b      	strh	r3, [r7, #18]
 8005fae:	687a      	ldr	r2, [r7, #4]
 8005fb0:	683b      	ldr	r3, [r7, #0]
 8005fb2:	781b      	ldrb	r3, [r3, #0]
 8005fb4:	009b      	lsls	r3, r3, #2
 8005fb6:	441a      	add	r2, r3
 8005fb8:	8a7b      	ldrh	r3, [r7, #18]
 8005fba:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8005fbe:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8005fc2:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8005fc6:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8005fca:	b29b      	uxth	r3, r3
 8005fcc:	8013      	strh	r3, [r2, #0]
    }
  }

  return HAL_OK;
 8005fce:	2300      	movs	r3, #0
}
 8005fd0:	4618      	mov	r0, r3
 8005fd2:	371c      	adds	r7, #28
 8005fd4:	46bd      	mov	sp, r7
 8005fd6:	bc80      	pop	{r7}
 8005fd8:	4770      	bx	lr

08005fda <USB_SetDevAddress>:
  * @param  address new device address to be assigned
  *          This parameter can be a value from 0 to 255
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_SetDevAddress(USB_TypeDef *USBx, uint8_t address)
{
 8005fda:	b480      	push	{r7}
 8005fdc:	b083      	sub	sp, #12
 8005fde:	af00      	add	r7, sp, #0
 8005fe0:	6078      	str	r0, [r7, #4]
 8005fe2:	460b      	mov	r3, r1
 8005fe4:	70fb      	strb	r3, [r7, #3]
  if (address == 0U)
 8005fe6:	78fb      	ldrb	r3, [r7, #3]
 8005fe8:	2b00      	cmp	r3, #0
 8005fea:	d103      	bne.n	8005ff4 <USB_SetDevAddress+0x1a>
  {
    /* set device address and enable function */
    USBx->DADDR = (uint16_t)USB_DADDR_EF;
 8005fec:	687b      	ldr	r3, [r7, #4]
 8005fee:	2280      	movs	r2, #128	; 0x80
 8005ff0:	f8a3 204c 	strh.w	r2, [r3, #76]	; 0x4c
  }

  return HAL_OK;
 8005ff4:	2300      	movs	r3, #0
}
 8005ff6:	4618      	mov	r0, r3
 8005ff8:	370c      	adds	r7, #12
 8005ffa:	46bd      	mov	sp, r7
 8005ffc:	bc80      	pop	{r7}
 8005ffe:	4770      	bx	lr

08006000 <USB_DevConnect>:
  * @brief  USB_DevConnect Connect the USB device by enabling the pull-up/pull-down
  * @param  USBx Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_DevConnect(USB_TypeDef *USBx)
{
 8006000:	b480      	push	{r7}
 8006002:	b083      	sub	sp, #12
 8006004:	af00      	add	r7, sp, #0
 8006006:	6078      	str	r0, [r7, #4]
  /* NOTE : - This function is not required by USB Device FS peripheral, it is used
              only by USB OTG FS peripheral.
            - This function is added to ensure compatibility across platforms.
   */

  return HAL_OK;
 8006008:	2300      	movs	r3, #0
}
 800600a:	4618      	mov	r0, r3
 800600c:	370c      	adds	r7, #12
 800600e:	46bd      	mov	sp, r7
 8006010:	bc80      	pop	{r7}
 8006012:	4770      	bx	lr

08006014 <USB_DevDisconnect>:
  * @brief  USB_DevDisconnect Disconnect the USB device by disabling the pull-up/pull-down
  * @param  USBx Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_DevDisconnect(USB_TypeDef *USBx)
{
 8006014:	b480      	push	{r7}
 8006016:	b083      	sub	sp, #12
 8006018:	af00      	add	r7, sp, #0
 800601a:	6078      	str	r0, [r7, #4]
  /* NOTE : - This function is not required by USB Device FS peripheral, it is used
              only by USB OTG FS peripheral.
            - This function is added to ensure compatibility across platforms.
   */

  return HAL_OK;
 800601c:	2300      	movs	r3, #0
}
 800601e:	4618      	mov	r0, r3
 8006020:	370c      	adds	r7, #12
 8006022:	46bd      	mov	sp, r7
 8006024:	bc80      	pop	{r7}
 8006026:	4770      	bx	lr

08006028 <USB_ReadInterrupts>:
  * @brief  USB_ReadInterrupts return the global USB interrupt status
  * @param  USBx Selected device
  * @retval HAL status
  */
uint32_t  USB_ReadInterrupts(USB_TypeDef *USBx)
{
 8006028:	b480      	push	{r7}
 800602a:	b085      	sub	sp, #20
 800602c:	af00      	add	r7, sp, #0
 800602e:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;

  tmpreg = USBx->ISTR;
 8006030:	687b      	ldr	r3, [r7, #4]
 8006032:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 8006036:	b29b      	uxth	r3, r3
 8006038:	60fb      	str	r3, [r7, #12]
  return tmpreg;
 800603a:	68fb      	ldr	r3, [r7, #12]
}
 800603c:	4618      	mov	r0, r3
 800603e:	3714      	adds	r7, #20
 8006040:	46bd      	mov	sp, r7
 8006042:	bc80      	pop	{r7}
 8006044:	4770      	bx	lr

08006046 <USB_EP0_OutStart>:
  * @param  USBx Selected device
  * @param  psetup pointer to setup packet
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EP0_OutStart(USB_TypeDef *USBx, uint8_t *psetup)
{
 8006046:	b480      	push	{r7}
 8006048:	b083      	sub	sp, #12
 800604a:	af00      	add	r7, sp, #0
 800604c:	6078      	str	r0, [r7, #4]
 800604e:	6039      	str	r1, [r7, #0]
  UNUSED(psetup);
  /* NOTE : - This function is not required by USB Device FS peripheral, it is used
              only by USB OTG FS peripheral.
            - This function is added to ensure compatibility across platforms.
   */
  return HAL_OK;
 8006050:	2300      	movs	r3, #0
}
 8006052:	4618      	mov	r0, r3
 8006054:	370c      	adds	r7, #12
 8006056:	46bd      	mov	sp, r7
 8006058:	bc80      	pop	{r7}
 800605a:	4770      	bx	lr

0800605c <USB_WritePMA>:
  * @param   wPMABufAddr address into PMA.
  * @param   wNBytes no. of bytes to be copied.
  * @retval None
  */
void USB_WritePMA(USB_TypeDef *USBx, uint8_t *pbUsrBuf, uint16_t wPMABufAddr, uint16_t wNBytes)
{
 800605c:	b480      	push	{r7}
 800605e:	b08d      	sub	sp, #52	; 0x34
 8006060:	af00      	add	r7, sp, #0
 8006062:	60f8      	str	r0, [r7, #12]
 8006064:	60b9      	str	r1, [r7, #8]
 8006066:	4611      	mov	r1, r2
 8006068:	461a      	mov	r2, r3
 800606a:	460b      	mov	r3, r1
 800606c:	80fb      	strh	r3, [r7, #6]
 800606e:	4613      	mov	r3, r2
 8006070:	80bb      	strh	r3, [r7, #4]
  uint32_t n = ((uint32_t)wNBytes + 1U) >> 1;
 8006072:	88bb      	ldrh	r3, [r7, #4]
 8006074:	3301      	adds	r3, #1
 8006076:	085b      	lsrs	r3, r3, #1
 8006078:	623b      	str	r3, [r7, #32]
  uint32_t BaseAddr = (uint32_t)USBx;
 800607a:	68fb      	ldr	r3, [r7, #12]
 800607c:	61fb      	str	r3, [r7, #28]
  uint32_t i, temp1, temp2;
  __IO uint16_t *pdwVal;
  uint8_t *pBuf = pbUsrBuf;
 800607e:	68bb      	ldr	r3, [r7, #8]
 8006080:	627b      	str	r3, [r7, #36]	; 0x24

  pdwVal = (__IO uint16_t *)(BaseAddr + 0x400U + ((uint32_t)wPMABufAddr * PMA_ACCESS));
 8006082:	88fb      	ldrh	r3, [r7, #6]
 8006084:	005a      	lsls	r2, r3, #1
 8006086:	69fb      	ldr	r3, [r7, #28]
 8006088:	4413      	add	r3, r2
 800608a:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 800608e:	62bb      	str	r3, [r7, #40]	; 0x28

  for (i = n; i != 0U; i--)
 8006090:	6a3b      	ldr	r3, [r7, #32]
 8006092:	62fb      	str	r3, [r7, #44]	; 0x2c
 8006094:	e01e      	b.n	80060d4 <USB_WritePMA+0x78>
  {
    temp1 = *pBuf;
 8006096:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006098:	781b      	ldrb	r3, [r3, #0]
 800609a:	61bb      	str	r3, [r7, #24]
    pBuf++;
 800609c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800609e:	3301      	adds	r3, #1
 80060a0:	627b      	str	r3, [r7, #36]	; 0x24
    temp2 = temp1 | ((uint16_t)((uint16_t) *pBuf << 8));
 80060a2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80060a4:	781b      	ldrb	r3, [r3, #0]
 80060a6:	b29b      	uxth	r3, r3
 80060a8:	021b      	lsls	r3, r3, #8
 80060aa:	b29b      	uxth	r3, r3
 80060ac:	461a      	mov	r2, r3
 80060ae:	69bb      	ldr	r3, [r7, #24]
 80060b0:	4313      	orrs	r3, r2
 80060b2:	617b      	str	r3, [r7, #20]
    *pdwVal = (uint16_t)temp2;
 80060b4:	697b      	ldr	r3, [r7, #20]
 80060b6:	b29a      	uxth	r2, r3
 80060b8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80060ba:	801a      	strh	r2, [r3, #0]
    pdwVal++;
 80060bc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80060be:	3302      	adds	r3, #2
 80060c0:	62bb      	str	r3, [r7, #40]	; 0x28

#if PMA_ACCESS > 1U
    pdwVal++;
 80060c2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80060c4:	3302      	adds	r3, #2
 80060c6:	62bb      	str	r3, [r7, #40]	; 0x28
#endif

    pBuf++;
 80060c8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80060ca:	3301      	adds	r3, #1
 80060cc:	627b      	str	r3, [r7, #36]	; 0x24
  for (i = n; i != 0U; i--)
 80060ce:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80060d0:	3b01      	subs	r3, #1
 80060d2:	62fb      	str	r3, [r7, #44]	; 0x2c
 80060d4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80060d6:	2b00      	cmp	r3, #0
 80060d8:	d1dd      	bne.n	8006096 <USB_WritePMA+0x3a>
  }
}
 80060da:	bf00      	nop
 80060dc:	3734      	adds	r7, #52	; 0x34
 80060de:	46bd      	mov	sp, r7
 80060e0:	bc80      	pop	{r7}
 80060e2:	4770      	bx	lr

080060e4 <USB_ReadPMA>:
  * @param   wPMABufAddr address into PMA.
  * @param   wNBytes no. of bytes to be copied.
  * @retval None
  */
void USB_ReadPMA(USB_TypeDef *USBx, uint8_t *pbUsrBuf, uint16_t wPMABufAddr, uint16_t wNBytes)
{
 80060e4:	b480      	push	{r7}
 80060e6:	b08b      	sub	sp, #44	; 0x2c
 80060e8:	af00      	add	r7, sp, #0
 80060ea:	60f8      	str	r0, [r7, #12]
 80060ec:	60b9      	str	r1, [r7, #8]
 80060ee:	4611      	mov	r1, r2
 80060f0:	461a      	mov	r2, r3
 80060f2:	460b      	mov	r3, r1
 80060f4:	80fb      	strh	r3, [r7, #6]
 80060f6:	4613      	mov	r3, r2
 80060f8:	80bb      	strh	r3, [r7, #4]
  uint32_t n = (uint32_t)wNBytes >> 1;
 80060fa:	88bb      	ldrh	r3, [r7, #4]
 80060fc:	085b      	lsrs	r3, r3, #1
 80060fe:	b29b      	uxth	r3, r3
 8006100:	61bb      	str	r3, [r7, #24]
  uint32_t BaseAddr = (uint32_t)USBx;
 8006102:	68fb      	ldr	r3, [r7, #12]
 8006104:	617b      	str	r3, [r7, #20]
  uint32_t i, temp;
  __IO uint16_t *pdwVal;
  uint8_t *pBuf = pbUsrBuf;
 8006106:	68bb      	ldr	r3, [r7, #8]
 8006108:	61fb      	str	r3, [r7, #28]

  pdwVal = (__IO uint16_t *)(BaseAddr + 0x400U + ((uint32_t)wPMABufAddr * PMA_ACCESS));
 800610a:	88fb      	ldrh	r3, [r7, #6]
 800610c:	005a      	lsls	r2, r3, #1
 800610e:	697b      	ldr	r3, [r7, #20]
 8006110:	4413      	add	r3, r2
 8006112:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8006116:	623b      	str	r3, [r7, #32]

  for (i = n; i != 0U; i--)
 8006118:	69bb      	ldr	r3, [r7, #24]
 800611a:	627b      	str	r3, [r7, #36]	; 0x24
 800611c:	e01b      	b.n	8006156 <USB_ReadPMA+0x72>
  {
    temp = *(__IO uint16_t *)pdwVal;
 800611e:	6a3b      	ldr	r3, [r7, #32]
 8006120:	881b      	ldrh	r3, [r3, #0]
 8006122:	b29b      	uxth	r3, r3
 8006124:	613b      	str	r3, [r7, #16]
    pdwVal++;
 8006126:	6a3b      	ldr	r3, [r7, #32]
 8006128:	3302      	adds	r3, #2
 800612a:	623b      	str	r3, [r7, #32]
    *pBuf = (uint8_t)((temp >> 0) & 0xFFU);
 800612c:	693b      	ldr	r3, [r7, #16]
 800612e:	b2da      	uxtb	r2, r3
 8006130:	69fb      	ldr	r3, [r7, #28]
 8006132:	701a      	strb	r2, [r3, #0]
    pBuf++;
 8006134:	69fb      	ldr	r3, [r7, #28]
 8006136:	3301      	adds	r3, #1
 8006138:	61fb      	str	r3, [r7, #28]
    *pBuf = (uint8_t)((temp >> 8) & 0xFFU);
 800613a:	693b      	ldr	r3, [r7, #16]
 800613c:	0a1b      	lsrs	r3, r3, #8
 800613e:	b2da      	uxtb	r2, r3
 8006140:	69fb      	ldr	r3, [r7, #28]
 8006142:	701a      	strb	r2, [r3, #0]
    pBuf++;
 8006144:	69fb      	ldr	r3, [r7, #28]
 8006146:	3301      	adds	r3, #1
 8006148:	61fb      	str	r3, [r7, #28]

#if PMA_ACCESS > 1U
    pdwVal++;
 800614a:	6a3b      	ldr	r3, [r7, #32]
 800614c:	3302      	adds	r3, #2
 800614e:	623b      	str	r3, [r7, #32]
  for (i = n; i != 0U; i--)
 8006150:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006152:	3b01      	subs	r3, #1
 8006154:	627b      	str	r3, [r7, #36]	; 0x24
 8006156:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006158:	2b00      	cmp	r3, #0
 800615a:	d1e0      	bne.n	800611e <USB_ReadPMA+0x3a>
#endif
  }

  if ((wNBytes % 2U) != 0U)
 800615c:	88bb      	ldrh	r3, [r7, #4]
 800615e:	f003 0301 	and.w	r3, r3, #1
 8006162:	b29b      	uxth	r3, r3
 8006164:	2b00      	cmp	r3, #0
 8006166:	d007      	beq.n	8006178 <USB_ReadPMA+0x94>
  {
    temp = *pdwVal;
 8006168:	6a3b      	ldr	r3, [r7, #32]
 800616a:	881b      	ldrh	r3, [r3, #0]
 800616c:	b29b      	uxth	r3, r3
 800616e:	613b      	str	r3, [r7, #16]
    *pBuf = (uint8_t)((temp >> 0) & 0xFFU);
 8006170:	693b      	ldr	r3, [r7, #16]
 8006172:	b2da      	uxtb	r2, r3
 8006174:	69fb      	ldr	r3, [r7, #28]
 8006176:	701a      	strb	r2, [r3, #0]
  }
}
 8006178:	bf00      	nop
 800617a:	372c      	adds	r7, #44	; 0x2c
 800617c:	46bd      	mov	sp, r7
 800617e:	bc80      	pop	{r7}
 8006180:	4770      	bx	lr

08006182 <USBD_CDC_Init>:
  * @param  pdev: device instance
  * @param  cfgidx: Configuration index
  * @retval status
  */
static uint8_t  USBD_CDC_Init(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 8006182:	b580      	push	{r7, lr}
 8006184:	b084      	sub	sp, #16
 8006186:	af00      	add	r7, sp, #0
 8006188:	6078      	str	r0, [r7, #4]
 800618a:	460b      	mov	r3, r1
 800618c:	70fb      	strb	r3, [r7, #3]
  uint8_t ret = 0U;
 800618e:	2300      	movs	r3, #0
 8006190:	73fb      	strb	r3, [r7, #15]
  USBD_CDC_HandleTypeDef   *hcdc;

  if (pdev->dev_speed == USBD_SPEED_HIGH)
 8006192:	687b      	ldr	r3, [r7, #4]
 8006194:	7c1b      	ldrb	r3, [r3, #16]
 8006196:	2b00      	cmp	r3, #0
 8006198:	d115      	bne.n	80061c6 <USBD_CDC_Init+0x44>
  {
    /* Open EP IN */
    USBD_LL_OpenEP(pdev, CDC_IN_EP, USBD_EP_TYPE_BULK,
 800619a:	f44f 7300 	mov.w	r3, #512	; 0x200
 800619e:	2202      	movs	r2, #2
 80061a0:	2181      	movs	r1, #129	; 0x81
 80061a2:	6878      	ldr	r0, [r7, #4]
 80061a4:	f001 fe75 	bl	8007e92 <USBD_LL_OpenEP>
                   CDC_DATA_HS_IN_PACKET_SIZE);

    pdev->ep_in[CDC_IN_EP & 0xFU].is_used = 1U;
 80061a8:	687b      	ldr	r3, [r7, #4]
 80061aa:	2201      	movs	r2, #1
 80061ac:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Open EP OUT */
    USBD_LL_OpenEP(pdev, CDC_OUT_EP, USBD_EP_TYPE_BULK,
 80061ae:	f44f 7300 	mov.w	r3, #512	; 0x200
 80061b2:	2202      	movs	r2, #2
 80061b4:	2101      	movs	r1, #1
 80061b6:	6878      	ldr	r0, [r7, #4]
 80061b8:	f001 fe6b 	bl	8007e92 <USBD_LL_OpenEP>
                   CDC_DATA_HS_OUT_PACKET_SIZE);

    pdev->ep_out[CDC_OUT_EP & 0xFU].is_used = 1U;
 80061bc:	687b      	ldr	r3, [r7, #4]
 80061be:	2201      	movs	r2, #1
 80061c0:	f8c3 216c 	str.w	r2, [r3, #364]	; 0x16c
 80061c4:	e012      	b.n	80061ec <USBD_CDC_Init+0x6a>

  }
  else
  {
    /* Open EP IN */
    USBD_LL_OpenEP(pdev, CDC_IN_EP, USBD_EP_TYPE_BULK,
 80061c6:	2340      	movs	r3, #64	; 0x40
 80061c8:	2202      	movs	r2, #2
 80061ca:	2181      	movs	r1, #129	; 0x81
 80061cc:	6878      	ldr	r0, [r7, #4]
 80061ce:	f001 fe60 	bl	8007e92 <USBD_LL_OpenEP>
                   CDC_DATA_FS_IN_PACKET_SIZE);

    pdev->ep_in[CDC_IN_EP & 0xFU].is_used = 1U;
 80061d2:	687b      	ldr	r3, [r7, #4]
 80061d4:	2201      	movs	r2, #1
 80061d6:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Open EP OUT */
    USBD_LL_OpenEP(pdev, CDC_OUT_EP, USBD_EP_TYPE_BULK,
 80061d8:	2340      	movs	r3, #64	; 0x40
 80061da:	2202      	movs	r2, #2
 80061dc:	2101      	movs	r1, #1
 80061de:	6878      	ldr	r0, [r7, #4]
 80061e0:	f001 fe57 	bl	8007e92 <USBD_LL_OpenEP>
                   CDC_DATA_FS_OUT_PACKET_SIZE);

    pdev->ep_out[CDC_OUT_EP & 0xFU].is_used = 1U;
 80061e4:	687b      	ldr	r3, [r7, #4]
 80061e6:	2201      	movs	r2, #1
 80061e8:	f8c3 216c 	str.w	r2, [r3, #364]	; 0x16c
  }
  /* Open Command IN EP */
  USBD_LL_OpenEP(pdev, CDC_CMD_EP, USBD_EP_TYPE_INTR, CDC_CMD_PACKET_SIZE);
 80061ec:	2308      	movs	r3, #8
 80061ee:	2203      	movs	r2, #3
 80061f0:	2182      	movs	r1, #130	; 0x82
 80061f2:	6878      	ldr	r0, [r7, #4]
 80061f4:	f001 fe4d 	bl	8007e92 <USBD_LL_OpenEP>
  pdev->ep_in[CDC_CMD_EP & 0xFU].is_used = 1U;
 80061f8:	687b      	ldr	r3, [r7, #4]
 80061fa:	2201      	movs	r2, #1
 80061fc:	641a      	str	r2, [r3, #64]	; 0x40

  pdev->pClassData = USBD_malloc(sizeof(USBD_CDC_HandleTypeDef));
 80061fe:	f44f 7007 	mov.w	r0, #540	; 0x21c
 8006202:	f001 ff6d 	bl	80080e0 <USBD_static_malloc>
 8006206:	4602      	mov	r2, r0
 8006208:	687b      	ldr	r3, [r7, #4]
 800620a:	f8c3 22b8 	str.w	r2, [r3, #696]	; 0x2b8

  if (pdev->pClassData == NULL)
 800620e:	687b      	ldr	r3, [r7, #4]
 8006210:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8006214:	2b00      	cmp	r3, #0
 8006216:	d102      	bne.n	800621e <USBD_CDC_Init+0x9c>
  {
    ret = 1U;
 8006218:	2301      	movs	r3, #1
 800621a:	73fb      	strb	r3, [r7, #15]
 800621c:	e026      	b.n	800626c <USBD_CDC_Init+0xea>
  }
  else
  {
    hcdc = (USBD_CDC_HandleTypeDef *) pdev->pClassData;
 800621e:	687b      	ldr	r3, [r7, #4]
 8006220:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8006224:	60bb      	str	r3, [r7, #8]

    /* Init  physical Interface components */
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Init();
 8006226:	687b      	ldr	r3, [r7, #4]
 8006228:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 800622c:	681b      	ldr	r3, [r3, #0]
 800622e:	4798      	blx	r3

    /* Init Xfer states */
    hcdc->TxState = 0U;
 8006230:	68bb      	ldr	r3, [r7, #8]
 8006232:	2200      	movs	r2, #0
 8006234:	f8c3 2214 	str.w	r2, [r3, #532]	; 0x214
    hcdc->RxState = 0U;
 8006238:	68bb      	ldr	r3, [r7, #8]
 800623a:	2200      	movs	r2, #0
 800623c:	f8c3 2218 	str.w	r2, [r3, #536]	; 0x218

    if (pdev->dev_speed == USBD_SPEED_HIGH)
 8006240:	687b      	ldr	r3, [r7, #4]
 8006242:	7c1b      	ldrb	r3, [r3, #16]
 8006244:	2b00      	cmp	r3, #0
 8006246:	d109      	bne.n	800625c <USBD_CDC_Init+0xda>
    {
      /* Prepare Out endpoint to receive next packet */
      USBD_LL_PrepareReceive(pdev, CDC_OUT_EP, hcdc->RxBuffer,
 8006248:	68bb      	ldr	r3, [r7, #8]
 800624a:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 800624e:	f44f 7300 	mov.w	r3, #512	; 0x200
 8006252:	2101      	movs	r1, #1
 8006254:	6878      	ldr	r0, [r7, #4]
 8006256:	f001 ff0d 	bl	8008074 <USBD_LL_PrepareReceive>
 800625a:	e007      	b.n	800626c <USBD_CDC_Init+0xea>
                             CDC_DATA_HS_OUT_PACKET_SIZE);
    }
    else
    {
      /* Prepare Out endpoint to receive next packet */
      USBD_LL_PrepareReceive(pdev, CDC_OUT_EP, hcdc->RxBuffer,
 800625c:	68bb      	ldr	r3, [r7, #8]
 800625e:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 8006262:	2340      	movs	r3, #64	; 0x40
 8006264:	2101      	movs	r1, #1
 8006266:	6878      	ldr	r0, [r7, #4]
 8006268:	f001 ff04 	bl	8008074 <USBD_LL_PrepareReceive>
                             CDC_DATA_FS_OUT_PACKET_SIZE);
    }
  }
  return ret;
 800626c:	7bfb      	ldrb	r3, [r7, #15]
}
 800626e:	4618      	mov	r0, r3
 8006270:	3710      	adds	r7, #16
 8006272:	46bd      	mov	sp, r7
 8006274:	bd80      	pop	{r7, pc}

08006276 <USBD_CDC_DeInit>:
  * @param  pdev: device instance
  * @param  cfgidx: Configuration index
  * @retval status
  */
static uint8_t  USBD_CDC_DeInit(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 8006276:	b580      	push	{r7, lr}
 8006278:	b084      	sub	sp, #16
 800627a:	af00      	add	r7, sp, #0
 800627c:	6078      	str	r0, [r7, #4]
 800627e:	460b      	mov	r3, r1
 8006280:	70fb      	strb	r3, [r7, #3]
  uint8_t ret = 0U;
 8006282:	2300      	movs	r3, #0
 8006284:	73fb      	strb	r3, [r7, #15]

  /* Close EP IN */
  USBD_LL_CloseEP(pdev, CDC_IN_EP);
 8006286:	2181      	movs	r1, #129	; 0x81
 8006288:	6878      	ldr	r0, [r7, #4]
 800628a:	f001 fe28 	bl	8007ede <USBD_LL_CloseEP>
  pdev->ep_in[CDC_IN_EP & 0xFU].is_used = 0U;
 800628e:	687b      	ldr	r3, [r7, #4]
 8006290:	2200      	movs	r2, #0
 8006292:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Close EP OUT */
  USBD_LL_CloseEP(pdev, CDC_OUT_EP);
 8006294:	2101      	movs	r1, #1
 8006296:	6878      	ldr	r0, [r7, #4]
 8006298:	f001 fe21 	bl	8007ede <USBD_LL_CloseEP>
  pdev->ep_out[CDC_OUT_EP & 0xFU].is_used = 0U;
 800629c:	687b      	ldr	r3, [r7, #4]
 800629e:	2200      	movs	r2, #0
 80062a0:	f8c3 216c 	str.w	r2, [r3, #364]	; 0x16c

  /* Close Command IN EP */
  USBD_LL_CloseEP(pdev, CDC_CMD_EP);
 80062a4:	2182      	movs	r1, #130	; 0x82
 80062a6:	6878      	ldr	r0, [r7, #4]
 80062a8:	f001 fe19 	bl	8007ede <USBD_LL_CloseEP>
  pdev->ep_in[CDC_CMD_EP & 0xFU].is_used = 0U;
 80062ac:	687b      	ldr	r3, [r7, #4]
 80062ae:	2200      	movs	r2, #0
 80062b0:	641a      	str	r2, [r3, #64]	; 0x40

  /* DeInit  physical Interface components */
  if (pdev->pClassData != NULL)
 80062b2:	687b      	ldr	r3, [r7, #4]
 80062b4:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 80062b8:	2b00      	cmp	r3, #0
 80062ba:	d00e      	beq.n	80062da <USBD_CDC_DeInit+0x64>
  {
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->DeInit();
 80062bc:	687b      	ldr	r3, [r7, #4]
 80062be:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 80062c2:	685b      	ldr	r3, [r3, #4]
 80062c4:	4798      	blx	r3
    USBD_free(pdev->pClassData);
 80062c6:	687b      	ldr	r3, [r7, #4]
 80062c8:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 80062cc:	4618      	mov	r0, r3
 80062ce:	f001 ff13 	bl	80080f8 <USBD_static_free>
    pdev->pClassData = NULL;
 80062d2:	687b      	ldr	r3, [r7, #4]
 80062d4:	2200      	movs	r2, #0
 80062d6:	f8c3 22b8 	str.w	r2, [r3, #696]	; 0x2b8
  }

  return ret;
 80062da:	7bfb      	ldrb	r3, [r7, #15]
}
 80062dc:	4618      	mov	r0, r3
 80062de:	3710      	adds	r7, #16
 80062e0:	46bd      	mov	sp, r7
 80062e2:	bd80      	pop	{r7, pc}

080062e4 <USBD_CDC_Setup>:
  * @param  req: usb requests
  * @retval status
  */
static uint8_t  USBD_CDC_Setup(USBD_HandleTypeDef *pdev,
                               USBD_SetupReqTypedef *req)
{
 80062e4:	b580      	push	{r7, lr}
 80062e6:	b086      	sub	sp, #24
 80062e8:	af00      	add	r7, sp, #0
 80062ea:	6078      	str	r0, [r7, #4]
 80062ec:	6039      	str	r1, [r7, #0]
  USBD_CDC_HandleTypeDef   *hcdc = (USBD_CDC_HandleTypeDef *) pdev->pClassData;
 80062ee:	687b      	ldr	r3, [r7, #4]
 80062f0:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 80062f4:	613b      	str	r3, [r7, #16]
  uint8_t ifalt = 0U;
 80062f6:	2300      	movs	r3, #0
 80062f8:	73fb      	strb	r3, [r7, #15]
  uint16_t status_info = 0U;
 80062fa:	2300      	movs	r3, #0
 80062fc:	81bb      	strh	r3, [r7, #12]
  uint8_t ret = USBD_OK;
 80062fe:	2300      	movs	r3, #0
 8006300:	75fb      	strb	r3, [r7, #23]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 8006302:	683b      	ldr	r3, [r7, #0]
 8006304:	781b      	ldrb	r3, [r3, #0]
 8006306:	f003 0360 	and.w	r3, r3, #96	; 0x60
 800630a:	2b00      	cmp	r3, #0
 800630c:	d039      	beq.n	8006382 <USBD_CDC_Setup+0x9e>
 800630e:	2b20      	cmp	r3, #32
 8006310:	d17c      	bne.n	800640c <USBD_CDC_Setup+0x128>
  {
    case USB_REQ_TYPE_CLASS :
      if (req->wLength)
 8006312:	683b      	ldr	r3, [r7, #0]
 8006314:	88db      	ldrh	r3, [r3, #6]
 8006316:	2b00      	cmp	r3, #0
 8006318:	d029      	beq.n	800636e <USBD_CDC_Setup+0x8a>
      {
        if (req->bmRequest & 0x80U)
 800631a:	683b      	ldr	r3, [r7, #0]
 800631c:	781b      	ldrb	r3, [r3, #0]
 800631e:	b25b      	sxtb	r3, r3
 8006320:	2b00      	cmp	r3, #0
 8006322:	da11      	bge.n	8006348 <USBD_CDC_Setup+0x64>
        {
          ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(req->bRequest,
 8006324:	687b      	ldr	r3, [r7, #4]
 8006326:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 800632a:	689b      	ldr	r3, [r3, #8]
 800632c:	683a      	ldr	r2, [r7, #0]
 800632e:	7850      	ldrb	r0, [r2, #1]
                                                            (uint8_t *)(void *)hcdc->data,
 8006330:	6939      	ldr	r1, [r7, #16]
          ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(req->bRequest,
 8006332:	683a      	ldr	r2, [r7, #0]
 8006334:	88d2      	ldrh	r2, [r2, #6]
 8006336:	4798      	blx	r3
                                                            req->wLength);

          USBD_CtlSendData(pdev, (uint8_t *)(void *)hcdc->data, req->wLength);
 8006338:	6939      	ldr	r1, [r7, #16]
 800633a:	683b      	ldr	r3, [r7, #0]
 800633c:	88db      	ldrh	r3, [r3, #6]
 800633e:	461a      	mov	r2, r3
 8006340:	6878      	ldr	r0, [r7, #4]
 8006342:	f001 f9f9 	bl	8007738 <USBD_CtlSendData>
      else
      {
        ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(req->bRequest,
                                                          (uint8_t *)(void *)req, 0U);
      }
      break;
 8006346:	e068      	b.n	800641a <USBD_CDC_Setup+0x136>
          hcdc->CmdOpCode = req->bRequest;
 8006348:	683b      	ldr	r3, [r7, #0]
 800634a:	785a      	ldrb	r2, [r3, #1]
 800634c:	693b      	ldr	r3, [r7, #16]
 800634e:	f883 2200 	strb.w	r2, [r3, #512]	; 0x200
          hcdc->CmdLength = (uint8_t)req->wLength;
 8006352:	683b      	ldr	r3, [r7, #0]
 8006354:	88db      	ldrh	r3, [r3, #6]
 8006356:	b2da      	uxtb	r2, r3
 8006358:	693b      	ldr	r3, [r7, #16]
 800635a:	f883 2201 	strb.w	r2, [r3, #513]	; 0x201
          USBD_CtlPrepareRx(pdev, (uint8_t *)(void *)hcdc->data, req->wLength);
 800635e:	6939      	ldr	r1, [r7, #16]
 8006360:	683b      	ldr	r3, [r7, #0]
 8006362:	88db      	ldrh	r3, [r3, #6]
 8006364:	461a      	mov	r2, r3
 8006366:	6878      	ldr	r0, [r7, #4]
 8006368:	f001 fa14 	bl	8007794 <USBD_CtlPrepareRx>
      break;
 800636c:	e055      	b.n	800641a <USBD_CDC_Setup+0x136>
        ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(req->bRequest,
 800636e:	687b      	ldr	r3, [r7, #4]
 8006370:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 8006374:	689b      	ldr	r3, [r3, #8]
 8006376:	683a      	ldr	r2, [r7, #0]
 8006378:	7850      	ldrb	r0, [r2, #1]
 800637a:	2200      	movs	r2, #0
 800637c:	6839      	ldr	r1, [r7, #0]
 800637e:	4798      	blx	r3
      break;
 8006380:	e04b      	b.n	800641a <USBD_CDC_Setup+0x136>

    case USB_REQ_TYPE_STANDARD:
      switch (req->bRequest)
 8006382:	683b      	ldr	r3, [r7, #0]
 8006384:	785b      	ldrb	r3, [r3, #1]
 8006386:	2b0a      	cmp	r3, #10
 8006388:	d017      	beq.n	80063ba <USBD_CDC_Setup+0xd6>
 800638a:	2b0b      	cmp	r3, #11
 800638c:	d029      	beq.n	80063e2 <USBD_CDC_Setup+0xfe>
 800638e:	2b00      	cmp	r3, #0
 8006390:	d133      	bne.n	80063fa <USBD_CDC_Setup+0x116>
      {
        case USB_REQ_GET_STATUS:
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8006392:	687b      	ldr	r3, [r7, #4]
 8006394:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8006398:	2b03      	cmp	r3, #3
 800639a:	d107      	bne.n	80063ac <USBD_CDC_Setup+0xc8>
          {
            USBD_CtlSendData(pdev, (uint8_t *)(void *)&status_info, 2U);
 800639c:	f107 030c 	add.w	r3, r7, #12
 80063a0:	2202      	movs	r2, #2
 80063a2:	4619      	mov	r1, r3
 80063a4:	6878      	ldr	r0, [r7, #4]
 80063a6:	f001 f9c7 	bl	8007738 <USBD_CtlSendData>
          else
          {
            USBD_CtlError(pdev, req);
            ret = USBD_FAIL;
          }
          break;
 80063aa:	e02e      	b.n	800640a <USBD_CDC_Setup+0x126>
            USBD_CtlError(pdev, req);
 80063ac:	6839      	ldr	r1, [r7, #0]
 80063ae:	6878      	ldr	r0, [r7, #4]
 80063b0:	f001 f958 	bl	8007664 <USBD_CtlError>
            ret = USBD_FAIL;
 80063b4:	2302      	movs	r3, #2
 80063b6:	75fb      	strb	r3, [r7, #23]
          break;
 80063b8:	e027      	b.n	800640a <USBD_CDC_Setup+0x126>

        case USB_REQ_GET_INTERFACE:
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 80063ba:	687b      	ldr	r3, [r7, #4]
 80063bc:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 80063c0:	2b03      	cmp	r3, #3
 80063c2:	d107      	bne.n	80063d4 <USBD_CDC_Setup+0xf0>
          {
            USBD_CtlSendData(pdev, &ifalt, 1U);
 80063c4:	f107 030f 	add.w	r3, r7, #15
 80063c8:	2201      	movs	r2, #1
 80063ca:	4619      	mov	r1, r3
 80063cc:	6878      	ldr	r0, [r7, #4]
 80063ce:	f001 f9b3 	bl	8007738 <USBD_CtlSendData>
          else
          {
            USBD_CtlError(pdev, req);
            ret = USBD_FAIL;
          }
          break;
 80063d2:	e01a      	b.n	800640a <USBD_CDC_Setup+0x126>
            USBD_CtlError(pdev, req);
 80063d4:	6839      	ldr	r1, [r7, #0]
 80063d6:	6878      	ldr	r0, [r7, #4]
 80063d8:	f001 f944 	bl	8007664 <USBD_CtlError>
            ret = USBD_FAIL;
 80063dc:	2302      	movs	r3, #2
 80063de:	75fb      	strb	r3, [r7, #23]
          break;
 80063e0:	e013      	b.n	800640a <USBD_CDC_Setup+0x126>

        case USB_REQ_SET_INTERFACE:
          if (pdev->dev_state != USBD_STATE_CONFIGURED)
 80063e2:	687b      	ldr	r3, [r7, #4]
 80063e4:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 80063e8:	2b03      	cmp	r3, #3
 80063ea:	d00d      	beq.n	8006408 <USBD_CDC_Setup+0x124>
          {
            USBD_CtlError(pdev, req);
 80063ec:	6839      	ldr	r1, [r7, #0]
 80063ee:	6878      	ldr	r0, [r7, #4]
 80063f0:	f001 f938 	bl	8007664 <USBD_CtlError>
            ret = USBD_FAIL;
 80063f4:	2302      	movs	r3, #2
 80063f6:	75fb      	strb	r3, [r7, #23]
          }
          break;
 80063f8:	e006      	b.n	8006408 <USBD_CDC_Setup+0x124>

        default:
          USBD_CtlError(pdev, req);
 80063fa:	6839      	ldr	r1, [r7, #0]
 80063fc:	6878      	ldr	r0, [r7, #4]
 80063fe:	f001 f931 	bl	8007664 <USBD_CtlError>
          ret = USBD_FAIL;
 8006402:	2302      	movs	r3, #2
 8006404:	75fb      	strb	r3, [r7, #23]
          break;
 8006406:	e000      	b.n	800640a <USBD_CDC_Setup+0x126>
          break;
 8006408:	bf00      	nop
      }
      break;
 800640a:	e006      	b.n	800641a <USBD_CDC_Setup+0x136>

    default:
      USBD_CtlError(pdev, req);
 800640c:	6839      	ldr	r1, [r7, #0]
 800640e:	6878      	ldr	r0, [r7, #4]
 8006410:	f001 f928 	bl	8007664 <USBD_CtlError>
      ret = USBD_FAIL;
 8006414:	2302      	movs	r3, #2
 8006416:	75fb      	strb	r3, [r7, #23]
      break;
 8006418:	bf00      	nop
  }

  return ret;
 800641a:	7dfb      	ldrb	r3, [r7, #23]
}
 800641c:	4618      	mov	r0, r3
 800641e:	3718      	adds	r7, #24
 8006420:	46bd      	mov	sp, r7
 8006422:	bd80      	pop	{r7, pc}

08006424 <USBD_CDC_DataIn>:
  * @param  pdev: device instance
  * @param  epnum: endpoint number
  * @retval status
  */
static uint8_t  USBD_CDC_DataIn(USBD_HandleTypeDef *pdev, uint8_t epnum)
{
 8006424:	b580      	push	{r7, lr}
 8006426:	b084      	sub	sp, #16
 8006428:	af00      	add	r7, sp, #0
 800642a:	6078      	str	r0, [r7, #4]
 800642c:	460b      	mov	r3, r1
 800642e:	70fb      	strb	r3, [r7, #3]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassData;
 8006430:	687b      	ldr	r3, [r7, #4]
 8006432:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8006436:	60fb      	str	r3, [r7, #12]
  PCD_HandleTypeDef *hpcd = pdev->pData;
 8006438:	687b      	ldr	r3, [r7, #4]
 800643a:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 800643e:	60bb      	str	r3, [r7, #8]

  if (pdev->pClassData != NULL)
 8006440:	687b      	ldr	r3, [r7, #4]
 8006442:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8006446:	2b00      	cmp	r3, #0
 8006448:	d03a      	beq.n	80064c0 <USBD_CDC_DataIn+0x9c>
  {
    if ((pdev->ep_in[epnum].total_length > 0U) && ((pdev->ep_in[epnum].total_length % hpcd->IN_ep[epnum].maxpacket) == 0U))
 800644a:	78fa      	ldrb	r2, [r7, #3]
 800644c:	6879      	ldr	r1, [r7, #4]
 800644e:	4613      	mov	r3, r2
 8006450:	009b      	lsls	r3, r3, #2
 8006452:	4413      	add	r3, r2
 8006454:	009b      	lsls	r3, r3, #2
 8006456:	440b      	add	r3, r1
 8006458:	331c      	adds	r3, #28
 800645a:	681b      	ldr	r3, [r3, #0]
 800645c:	2b00      	cmp	r3, #0
 800645e:	d029      	beq.n	80064b4 <USBD_CDC_DataIn+0x90>
 8006460:	78fa      	ldrb	r2, [r7, #3]
 8006462:	6879      	ldr	r1, [r7, #4]
 8006464:	4613      	mov	r3, r2
 8006466:	009b      	lsls	r3, r3, #2
 8006468:	4413      	add	r3, r2
 800646a:	009b      	lsls	r3, r3, #2
 800646c:	440b      	add	r3, r1
 800646e:	331c      	adds	r3, #28
 8006470:	681a      	ldr	r2, [r3, #0]
 8006472:	78f9      	ldrb	r1, [r7, #3]
 8006474:	68b8      	ldr	r0, [r7, #8]
 8006476:	460b      	mov	r3, r1
 8006478:	009b      	lsls	r3, r3, #2
 800647a:	440b      	add	r3, r1
 800647c:	00db      	lsls	r3, r3, #3
 800647e:	4403      	add	r3, r0
 8006480:	3338      	adds	r3, #56	; 0x38
 8006482:	681b      	ldr	r3, [r3, #0]
 8006484:	fbb2 f1f3 	udiv	r1, r2, r3
 8006488:	fb03 f301 	mul.w	r3, r3, r1
 800648c:	1ad3      	subs	r3, r2, r3
 800648e:	2b00      	cmp	r3, #0
 8006490:	d110      	bne.n	80064b4 <USBD_CDC_DataIn+0x90>
    {
      /* Update the packet total length */
      pdev->ep_in[epnum].total_length = 0U;
 8006492:	78fa      	ldrb	r2, [r7, #3]
 8006494:	6879      	ldr	r1, [r7, #4]
 8006496:	4613      	mov	r3, r2
 8006498:	009b      	lsls	r3, r3, #2
 800649a:	4413      	add	r3, r2
 800649c:	009b      	lsls	r3, r3, #2
 800649e:	440b      	add	r3, r1
 80064a0:	331c      	adds	r3, #28
 80064a2:	2200      	movs	r2, #0
 80064a4:	601a      	str	r2, [r3, #0]

      /* Send ZLP */
      USBD_LL_Transmit(pdev, epnum, NULL, 0U);
 80064a6:	78f9      	ldrb	r1, [r7, #3]
 80064a8:	2300      	movs	r3, #0
 80064aa:	2200      	movs	r2, #0
 80064ac:	6878      	ldr	r0, [r7, #4]
 80064ae:	f001 fdbe 	bl	800802e <USBD_LL_Transmit>
 80064b2:	e003      	b.n	80064bc <USBD_CDC_DataIn+0x98>
    }
    else
    {
      hcdc->TxState = 0U;
 80064b4:	68fb      	ldr	r3, [r7, #12]
 80064b6:	2200      	movs	r2, #0
 80064b8:	f8c3 2214 	str.w	r2, [r3, #532]	; 0x214
    }
    return USBD_OK;
 80064bc:	2300      	movs	r3, #0
 80064be:	e000      	b.n	80064c2 <USBD_CDC_DataIn+0x9e>
  }
  else
  {
    return USBD_FAIL;
 80064c0:	2302      	movs	r3, #2
  }
}
 80064c2:	4618      	mov	r0, r3
 80064c4:	3710      	adds	r7, #16
 80064c6:	46bd      	mov	sp, r7
 80064c8:	bd80      	pop	{r7, pc}

080064ca <USBD_CDC_DataOut>:
  * @param  pdev: device instance
  * @param  epnum: endpoint number
  * @retval status
  */
static uint8_t  USBD_CDC_DataOut(USBD_HandleTypeDef *pdev, uint8_t epnum)
{
 80064ca:	b580      	push	{r7, lr}
 80064cc:	b084      	sub	sp, #16
 80064ce:	af00      	add	r7, sp, #0
 80064d0:	6078      	str	r0, [r7, #4]
 80064d2:	460b      	mov	r3, r1
 80064d4:	70fb      	strb	r3, [r7, #3]
  USBD_CDC_HandleTypeDef   *hcdc = (USBD_CDC_HandleTypeDef *) pdev->pClassData;
 80064d6:	687b      	ldr	r3, [r7, #4]
 80064d8:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 80064dc:	60fb      	str	r3, [r7, #12]

  /* Get the received data length */
  hcdc->RxLength = USBD_LL_GetRxDataSize(pdev, epnum);
 80064de:	78fb      	ldrb	r3, [r7, #3]
 80064e0:	4619      	mov	r1, r3
 80064e2:	6878      	ldr	r0, [r7, #4]
 80064e4:	f001 fde9 	bl	80080ba <USBD_LL_GetRxDataSize>
 80064e8:	4602      	mov	r2, r0
 80064ea:	68fb      	ldr	r3, [r7, #12]
 80064ec:	f8c3 220c 	str.w	r2, [r3, #524]	; 0x20c

  /* USB data will be immediately processed, this allow next USB traffic being
  NAKed till the end of the application Xfer */
  if (pdev->pClassData != NULL)
 80064f0:	687b      	ldr	r3, [r7, #4]
 80064f2:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 80064f6:	2b00      	cmp	r3, #0
 80064f8:	d00d      	beq.n	8006516 <USBD_CDC_DataOut+0x4c>
  {
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Receive(hcdc->RxBuffer, &hcdc->RxLength);
 80064fa:	687b      	ldr	r3, [r7, #4]
 80064fc:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 8006500:	68db      	ldr	r3, [r3, #12]
 8006502:	68fa      	ldr	r2, [r7, #12]
 8006504:	f8d2 0204 	ldr.w	r0, [r2, #516]	; 0x204
 8006508:	68fa      	ldr	r2, [r7, #12]
 800650a:	f502 7203 	add.w	r2, r2, #524	; 0x20c
 800650e:	4611      	mov	r1, r2
 8006510:	4798      	blx	r3

    return USBD_OK;
 8006512:	2300      	movs	r3, #0
 8006514:	e000      	b.n	8006518 <USBD_CDC_DataOut+0x4e>
  }
  else
  {
    return USBD_FAIL;
 8006516:	2302      	movs	r3, #2
  }
}
 8006518:	4618      	mov	r0, r3
 800651a:	3710      	adds	r7, #16
 800651c:	46bd      	mov	sp, r7
 800651e:	bd80      	pop	{r7, pc}

08006520 <USBD_CDC_EP0_RxReady>:
  *         Handle EP0 Rx Ready event
  * @param  pdev: device instance
  * @retval status
  */
static uint8_t  USBD_CDC_EP0_RxReady(USBD_HandleTypeDef *pdev)
{
 8006520:	b580      	push	{r7, lr}
 8006522:	b084      	sub	sp, #16
 8006524:	af00      	add	r7, sp, #0
 8006526:	6078      	str	r0, [r7, #4]
  USBD_CDC_HandleTypeDef   *hcdc = (USBD_CDC_HandleTypeDef *) pdev->pClassData;
 8006528:	687b      	ldr	r3, [r7, #4]
 800652a:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800652e:	60fb      	str	r3, [r7, #12]

  if ((pdev->pUserData != NULL) && (hcdc->CmdOpCode != 0xFFU))
 8006530:	687b      	ldr	r3, [r7, #4]
 8006532:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 8006536:	2b00      	cmp	r3, #0
 8006538:	d015      	beq.n	8006566 <USBD_CDC_EP0_RxReady+0x46>
 800653a:	68fb      	ldr	r3, [r7, #12]
 800653c:	f893 3200 	ldrb.w	r3, [r3, #512]	; 0x200
 8006540:	2bff      	cmp	r3, #255	; 0xff
 8006542:	d010      	beq.n	8006566 <USBD_CDC_EP0_RxReady+0x46>
  {
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(hcdc->CmdOpCode,
 8006544:	687b      	ldr	r3, [r7, #4]
 8006546:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 800654a:	689b      	ldr	r3, [r3, #8]
 800654c:	68fa      	ldr	r2, [r7, #12]
 800654e:	f892 0200 	ldrb.w	r0, [r2, #512]	; 0x200
                                                      (uint8_t *)(void *)hcdc->data,
 8006552:	68f9      	ldr	r1, [r7, #12]
                                                      (uint16_t)hcdc->CmdLength);
 8006554:	68fa      	ldr	r2, [r7, #12]
 8006556:	f892 2201 	ldrb.w	r2, [r2, #513]	; 0x201
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(hcdc->CmdOpCode,
 800655a:	b292      	uxth	r2, r2
 800655c:	4798      	blx	r3
    hcdc->CmdOpCode = 0xFFU;
 800655e:	68fb      	ldr	r3, [r7, #12]
 8006560:	22ff      	movs	r2, #255	; 0xff
 8006562:	f883 2200 	strb.w	r2, [r3, #512]	; 0x200

  }
  return USBD_OK;
 8006566:	2300      	movs	r3, #0
}
 8006568:	4618      	mov	r0, r3
 800656a:	3710      	adds	r7, #16
 800656c:	46bd      	mov	sp, r7
 800656e:	bd80      	pop	{r7, pc}

08006570 <USBD_CDC_GetFSCfgDesc>:
  * @param  speed : current device speed
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t  *USBD_CDC_GetFSCfgDesc(uint16_t *length)
{
 8006570:	b480      	push	{r7}
 8006572:	b083      	sub	sp, #12
 8006574:	af00      	add	r7, sp, #0
 8006576:	6078      	str	r0, [r7, #4]
  *length = sizeof(USBD_CDC_CfgFSDesc);
 8006578:	687b      	ldr	r3, [r7, #4]
 800657a:	2243      	movs	r2, #67	; 0x43
 800657c:	801a      	strh	r2, [r3, #0]
  return USBD_CDC_CfgFSDesc;
 800657e:	4b03      	ldr	r3, [pc, #12]	; (800658c <USBD_CDC_GetFSCfgDesc+0x1c>)
}
 8006580:	4618      	mov	r0, r3
 8006582:	370c      	adds	r7, #12
 8006584:	46bd      	mov	sp, r7
 8006586:	bc80      	pop	{r7}
 8006588:	4770      	bx	lr
 800658a:	bf00      	nop
 800658c:	20000094 	.word	0x20000094

08006590 <USBD_CDC_GetHSCfgDesc>:
  * @param  speed : current device speed
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t  *USBD_CDC_GetHSCfgDesc(uint16_t *length)
{
 8006590:	b480      	push	{r7}
 8006592:	b083      	sub	sp, #12
 8006594:	af00      	add	r7, sp, #0
 8006596:	6078      	str	r0, [r7, #4]
  *length = sizeof(USBD_CDC_CfgHSDesc);
 8006598:	687b      	ldr	r3, [r7, #4]
 800659a:	2243      	movs	r2, #67	; 0x43
 800659c:	801a      	strh	r2, [r3, #0]
  return USBD_CDC_CfgHSDesc;
 800659e:	4b03      	ldr	r3, [pc, #12]	; (80065ac <USBD_CDC_GetHSCfgDesc+0x1c>)
}
 80065a0:	4618      	mov	r0, r3
 80065a2:	370c      	adds	r7, #12
 80065a4:	46bd      	mov	sp, r7
 80065a6:	bc80      	pop	{r7}
 80065a8:	4770      	bx	lr
 80065aa:	bf00      	nop
 80065ac:	20000050 	.word	0x20000050

080065b0 <USBD_CDC_GetOtherSpeedCfgDesc>:
  * @param  speed : current device speed
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t  *USBD_CDC_GetOtherSpeedCfgDesc(uint16_t *length)
{
 80065b0:	b480      	push	{r7}
 80065b2:	b083      	sub	sp, #12
 80065b4:	af00      	add	r7, sp, #0
 80065b6:	6078      	str	r0, [r7, #4]
  *length = sizeof(USBD_CDC_OtherSpeedCfgDesc);
 80065b8:	687b      	ldr	r3, [r7, #4]
 80065ba:	2243      	movs	r2, #67	; 0x43
 80065bc:	801a      	strh	r2, [r3, #0]
  return USBD_CDC_OtherSpeedCfgDesc;
 80065be:	4b03      	ldr	r3, [pc, #12]	; (80065cc <USBD_CDC_GetOtherSpeedCfgDesc+0x1c>)
}
 80065c0:	4618      	mov	r0, r3
 80065c2:	370c      	adds	r7, #12
 80065c4:	46bd      	mov	sp, r7
 80065c6:	bc80      	pop	{r7}
 80065c8:	4770      	bx	lr
 80065ca:	bf00      	nop
 80065cc:	200000d8 	.word	0x200000d8

080065d0 <USBD_CDC_GetDeviceQualifierDescriptor>:
*         return Device Qualifier descriptor
* @param  length : pointer data length
* @retval pointer to descriptor buffer
*/
uint8_t  *USBD_CDC_GetDeviceQualifierDescriptor(uint16_t *length)
{
 80065d0:	b480      	push	{r7}
 80065d2:	b083      	sub	sp, #12
 80065d4:	af00      	add	r7, sp, #0
 80065d6:	6078      	str	r0, [r7, #4]
  *length = sizeof(USBD_CDC_DeviceQualifierDesc);
 80065d8:	687b      	ldr	r3, [r7, #4]
 80065da:	220a      	movs	r2, #10
 80065dc:	801a      	strh	r2, [r3, #0]
  return USBD_CDC_DeviceQualifierDesc;
 80065de:	4b03      	ldr	r3, [pc, #12]	; (80065ec <USBD_CDC_GetDeviceQualifierDescriptor+0x1c>)
}
 80065e0:	4618      	mov	r0, r3
 80065e2:	370c      	adds	r7, #12
 80065e4:	46bd      	mov	sp, r7
 80065e6:	bc80      	pop	{r7}
 80065e8:	4770      	bx	lr
 80065ea:	bf00      	nop
 80065ec:	2000000c 	.word	0x2000000c

080065f0 <USBD_CDC_RegisterInterface>:
  * @param  fops: CD  Interface callback
  * @retval status
  */
uint8_t  USBD_CDC_RegisterInterface(USBD_HandleTypeDef   *pdev,
                                    USBD_CDC_ItfTypeDef *fops)
{
 80065f0:	b480      	push	{r7}
 80065f2:	b085      	sub	sp, #20
 80065f4:	af00      	add	r7, sp, #0
 80065f6:	6078      	str	r0, [r7, #4]
 80065f8:	6039      	str	r1, [r7, #0]
  uint8_t  ret = USBD_FAIL;
 80065fa:	2302      	movs	r3, #2
 80065fc:	73fb      	strb	r3, [r7, #15]

  if (fops != NULL)
 80065fe:	683b      	ldr	r3, [r7, #0]
 8006600:	2b00      	cmp	r3, #0
 8006602:	d005      	beq.n	8006610 <USBD_CDC_RegisterInterface+0x20>
  {
    pdev->pUserData = fops;
 8006604:	687b      	ldr	r3, [r7, #4]
 8006606:	683a      	ldr	r2, [r7, #0]
 8006608:	f8c3 22bc 	str.w	r2, [r3, #700]	; 0x2bc
    ret = USBD_OK;
 800660c:	2300      	movs	r3, #0
 800660e:	73fb      	strb	r3, [r7, #15]
  }

  return ret;
 8006610:	7bfb      	ldrb	r3, [r7, #15]
}
 8006612:	4618      	mov	r0, r3
 8006614:	3714      	adds	r7, #20
 8006616:	46bd      	mov	sp, r7
 8006618:	bc80      	pop	{r7}
 800661a:	4770      	bx	lr

0800661c <USBD_CDC_SetTxBuffer>:
  * @retval status
  */
uint8_t  USBD_CDC_SetTxBuffer(USBD_HandleTypeDef   *pdev,
                              uint8_t  *pbuff,
                              uint16_t length)
{
 800661c:	b480      	push	{r7}
 800661e:	b087      	sub	sp, #28
 8006620:	af00      	add	r7, sp, #0
 8006622:	60f8      	str	r0, [r7, #12]
 8006624:	60b9      	str	r1, [r7, #8]
 8006626:	4613      	mov	r3, r2
 8006628:	80fb      	strh	r3, [r7, #6]
  USBD_CDC_HandleTypeDef   *hcdc = (USBD_CDC_HandleTypeDef *) pdev->pClassData;
 800662a:	68fb      	ldr	r3, [r7, #12]
 800662c:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8006630:	617b      	str	r3, [r7, #20]

  hcdc->TxBuffer = pbuff;
 8006632:	697b      	ldr	r3, [r7, #20]
 8006634:	68ba      	ldr	r2, [r7, #8]
 8006636:	f8c3 2208 	str.w	r2, [r3, #520]	; 0x208
  hcdc->TxLength = length;
 800663a:	88fa      	ldrh	r2, [r7, #6]
 800663c:	697b      	ldr	r3, [r7, #20]
 800663e:	f8c3 2210 	str.w	r2, [r3, #528]	; 0x210

  return USBD_OK;
 8006642:	2300      	movs	r3, #0
}
 8006644:	4618      	mov	r0, r3
 8006646:	371c      	adds	r7, #28
 8006648:	46bd      	mov	sp, r7
 800664a:	bc80      	pop	{r7}
 800664c:	4770      	bx	lr

0800664e <USBD_CDC_SetRxBuffer>:
  * @param  pbuff: Rx Buffer
  * @retval status
  */
uint8_t  USBD_CDC_SetRxBuffer(USBD_HandleTypeDef   *pdev,
                              uint8_t  *pbuff)
{
 800664e:	b480      	push	{r7}
 8006650:	b085      	sub	sp, #20
 8006652:	af00      	add	r7, sp, #0
 8006654:	6078      	str	r0, [r7, #4]
 8006656:	6039      	str	r1, [r7, #0]
  USBD_CDC_HandleTypeDef   *hcdc = (USBD_CDC_HandleTypeDef *) pdev->pClassData;
 8006658:	687b      	ldr	r3, [r7, #4]
 800665a:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800665e:	60fb      	str	r3, [r7, #12]

  hcdc->RxBuffer = pbuff;
 8006660:	68fb      	ldr	r3, [r7, #12]
 8006662:	683a      	ldr	r2, [r7, #0]
 8006664:	f8c3 2204 	str.w	r2, [r3, #516]	; 0x204

  return USBD_OK;
 8006668:	2300      	movs	r3, #0
}
 800666a:	4618      	mov	r0, r3
 800666c:	3714      	adds	r7, #20
 800666e:	46bd      	mov	sp, r7
 8006670:	bc80      	pop	{r7}
 8006672:	4770      	bx	lr

08006674 <USBD_CDC_TransmitPacket>:
  *         Transmit packet on IN endpoint
  * @param  pdev: device instance
  * @retval status
  */
uint8_t  USBD_CDC_TransmitPacket(USBD_HandleTypeDef *pdev)
{
 8006674:	b580      	push	{r7, lr}
 8006676:	b084      	sub	sp, #16
 8006678:	af00      	add	r7, sp, #0
 800667a:	6078      	str	r0, [r7, #4]
  USBD_CDC_HandleTypeDef   *hcdc = (USBD_CDC_HandleTypeDef *) pdev->pClassData;
 800667c:	687b      	ldr	r3, [r7, #4]
 800667e:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8006682:	60fb      	str	r3, [r7, #12]

  if (pdev->pClassData != NULL)
 8006684:	687b      	ldr	r3, [r7, #4]
 8006686:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800668a:	2b00      	cmp	r3, #0
 800668c:	d01c      	beq.n	80066c8 <USBD_CDC_TransmitPacket+0x54>
  {
    if (hcdc->TxState == 0U)
 800668e:	68fb      	ldr	r3, [r7, #12]
 8006690:	f8d3 3214 	ldr.w	r3, [r3, #532]	; 0x214
 8006694:	2b00      	cmp	r3, #0
 8006696:	d115      	bne.n	80066c4 <USBD_CDC_TransmitPacket+0x50>
    {
      /* Tx Transfer in progress */
      hcdc->TxState = 1U;
 8006698:	68fb      	ldr	r3, [r7, #12]
 800669a:	2201      	movs	r2, #1
 800669c:	f8c3 2214 	str.w	r2, [r3, #532]	; 0x214

      /* Update the packet total length */
      pdev->ep_in[CDC_IN_EP & 0xFU].total_length = hcdc->TxLength;
 80066a0:	68fb      	ldr	r3, [r7, #12]
 80066a2:	f8d3 2210 	ldr.w	r2, [r3, #528]	; 0x210
 80066a6:	687b      	ldr	r3, [r7, #4]
 80066a8:	631a      	str	r2, [r3, #48]	; 0x30

      /* Transmit next packet */
      USBD_LL_Transmit(pdev, CDC_IN_EP, hcdc->TxBuffer,
 80066aa:	68fb      	ldr	r3, [r7, #12]
 80066ac:	f8d3 2208 	ldr.w	r2, [r3, #520]	; 0x208
                       (uint16_t)hcdc->TxLength);
 80066b0:	68fb      	ldr	r3, [r7, #12]
 80066b2:	f8d3 3210 	ldr.w	r3, [r3, #528]	; 0x210
      USBD_LL_Transmit(pdev, CDC_IN_EP, hcdc->TxBuffer,
 80066b6:	b29b      	uxth	r3, r3
 80066b8:	2181      	movs	r1, #129	; 0x81
 80066ba:	6878      	ldr	r0, [r7, #4]
 80066bc:	f001 fcb7 	bl	800802e <USBD_LL_Transmit>

      return USBD_OK;
 80066c0:	2300      	movs	r3, #0
 80066c2:	e002      	b.n	80066ca <USBD_CDC_TransmitPacket+0x56>
    }
    else
    {
      return USBD_BUSY;
 80066c4:	2301      	movs	r3, #1
 80066c6:	e000      	b.n	80066ca <USBD_CDC_TransmitPacket+0x56>
    }
  }
  else
  {
    return USBD_FAIL;
 80066c8:	2302      	movs	r3, #2
  }
}
 80066ca:	4618      	mov	r0, r3
 80066cc:	3710      	adds	r7, #16
 80066ce:	46bd      	mov	sp, r7
 80066d0:	bd80      	pop	{r7, pc}

080066d2 <USBD_CDC_ReceivePacket>:
  *         prepare OUT Endpoint for reception
  * @param  pdev: device instance
  * @retval status
  */
uint8_t  USBD_CDC_ReceivePacket(USBD_HandleTypeDef *pdev)
{
 80066d2:	b580      	push	{r7, lr}
 80066d4:	b084      	sub	sp, #16
 80066d6:	af00      	add	r7, sp, #0
 80066d8:	6078      	str	r0, [r7, #4]
  USBD_CDC_HandleTypeDef   *hcdc = (USBD_CDC_HandleTypeDef *) pdev->pClassData;
 80066da:	687b      	ldr	r3, [r7, #4]
 80066dc:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 80066e0:	60fb      	str	r3, [r7, #12]

  /* Suspend or Resume USB Out process */
  if (pdev->pClassData != NULL)
 80066e2:	687b      	ldr	r3, [r7, #4]
 80066e4:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 80066e8:	2b00      	cmp	r3, #0
 80066ea:	d017      	beq.n	800671c <USBD_CDC_ReceivePacket+0x4a>
  {
    if (pdev->dev_speed == USBD_SPEED_HIGH)
 80066ec:	687b      	ldr	r3, [r7, #4]
 80066ee:	7c1b      	ldrb	r3, [r3, #16]
 80066f0:	2b00      	cmp	r3, #0
 80066f2:	d109      	bne.n	8006708 <USBD_CDC_ReceivePacket+0x36>
    {
      /* Prepare Out endpoint to receive next packet */
      USBD_LL_PrepareReceive(pdev,
 80066f4:	68fb      	ldr	r3, [r7, #12]
 80066f6:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 80066fa:	f44f 7300 	mov.w	r3, #512	; 0x200
 80066fe:	2101      	movs	r1, #1
 8006700:	6878      	ldr	r0, [r7, #4]
 8006702:	f001 fcb7 	bl	8008074 <USBD_LL_PrepareReceive>
 8006706:	e007      	b.n	8006718 <USBD_CDC_ReceivePacket+0x46>
                             CDC_DATA_HS_OUT_PACKET_SIZE);
    }
    else
    {
      /* Prepare Out endpoint to receive next packet */
      USBD_LL_PrepareReceive(pdev,
 8006708:	68fb      	ldr	r3, [r7, #12]
 800670a:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 800670e:	2340      	movs	r3, #64	; 0x40
 8006710:	2101      	movs	r1, #1
 8006712:	6878      	ldr	r0, [r7, #4]
 8006714:	f001 fcae 	bl	8008074 <USBD_LL_PrepareReceive>
                             CDC_OUT_EP,
                             hcdc->RxBuffer,
                             CDC_DATA_FS_OUT_PACKET_SIZE);
    }
    return USBD_OK;
 8006718:	2300      	movs	r3, #0
 800671a:	e000      	b.n	800671e <USBD_CDC_ReceivePacket+0x4c>
  }
  else
  {
    return USBD_FAIL;
 800671c:	2302      	movs	r3, #2
  }
}
 800671e:	4618      	mov	r0, r3
 8006720:	3710      	adds	r7, #16
 8006722:	46bd      	mov	sp, r7
 8006724:	bd80      	pop	{r7, pc}

08006726 <USBD_Init>:
* @param  id: Low level core index
* @retval None
*/
USBD_StatusTypeDef USBD_Init(USBD_HandleTypeDef *pdev,
                             USBD_DescriptorsTypeDef *pdesc, uint8_t id)
{
 8006726:	b580      	push	{r7, lr}
 8006728:	b084      	sub	sp, #16
 800672a:	af00      	add	r7, sp, #0
 800672c:	60f8      	str	r0, [r7, #12]
 800672e:	60b9      	str	r1, [r7, #8]
 8006730:	4613      	mov	r3, r2
 8006732:	71fb      	strb	r3, [r7, #7]
  /* Check whether the USB Host handle is valid */
  if (pdev == NULL)
 8006734:	68fb      	ldr	r3, [r7, #12]
 8006736:	2b00      	cmp	r3, #0
 8006738:	d101      	bne.n	800673e <USBD_Init+0x18>
  {
#if (USBD_DEBUG_LEVEL > 1U)
    USBD_ErrLog("Invalid Device handle");
#endif
    return USBD_FAIL;
 800673a:	2302      	movs	r3, #2
 800673c:	e01a      	b.n	8006774 <USBD_Init+0x4e>
  }

  /* Unlink previous class*/
  if (pdev->pClass != NULL)
 800673e:	68fb      	ldr	r3, [r7, #12]
 8006740:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8006744:	2b00      	cmp	r3, #0
 8006746:	d003      	beq.n	8006750 <USBD_Init+0x2a>
  {
    pdev->pClass = NULL;
 8006748:	68fb      	ldr	r3, [r7, #12]
 800674a:	2200      	movs	r2, #0
 800674c:	f8c3 22b4 	str.w	r2, [r3, #692]	; 0x2b4
  }

  /* Assign USBD Descriptors */
  if (pdesc != NULL)
 8006750:	68bb      	ldr	r3, [r7, #8]
 8006752:	2b00      	cmp	r3, #0
 8006754:	d003      	beq.n	800675e <USBD_Init+0x38>
  {
    pdev->pDesc = pdesc;
 8006756:	68fb      	ldr	r3, [r7, #12]
 8006758:	68ba      	ldr	r2, [r7, #8]
 800675a:	f8c3 22b0 	str.w	r2, [r3, #688]	; 0x2b0
  }

  /* Set Device initial State */
  pdev->dev_state = USBD_STATE_DEFAULT;
 800675e:	68fb      	ldr	r3, [r7, #12]
 8006760:	2201      	movs	r2, #1
 8006762:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
  pdev->id = id;
 8006766:	68fb      	ldr	r3, [r7, #12]
 8006768:	79fa      	ldrb	r2, [r7, #7]
 800676a:	701a      	strb	r2, [r3, #0]
  /* Initialize low level driver */
  USBD_LL_Init(pdev);
 800676c:	68f8      	ldr	r0, [r7, #12]
 800676e:	f001 fb1b 	bl	8007da8 <USBD_LL_Init>

  return USBD_OK;
 8006772:	2300      	movs	r3, #0
}
 8006774:	4618      	mov	r0, r3
 8006776:	3710      	adds	r7, #16
 8006778:	46bd      	mov	sp, r7
 800677a:	bd80      	pop	{r7, pc}

0800677c <USBD_RegisterClass>:
  * @param  pDevice : Device Handle
  * @param  pclass: Class handle
  * @retval USBD Status
  */
USBD_StatusTypeDef  USBD_RegisterClass(USBD_HandleTypeDef *pdev, USBD_ClassTypeDef *pclass)
{
 800677c:	b480      	push	{r7}
 800677e:	b085      	sub	sp, #20
 8006780:	af00      	add	r7, sp, #0
 8006782:	6078      	str	r0, [r7, #4]
 8006784:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef status = USBD_OK;
 8006786:	2300      	movs	r3, #0
 8006788:	73fb      	strb	r3, [r7, #15]
  if (pclass != NULL)
 800678a:	683b      	ldr	r3, [r7, #0]
 800678c:	2b00      	cmp	r3, #0
 800678e:	d006      	beq.n	800679e <USBD_RegisterClass+0x22>
  {
    /* link the class to the USB Device handle */
    pdev->pClass = pclass;
 8006790:	687b      	ldr	r3, [r7, #4]
 8006792:	683a      	ldr	r2, [r7, #0]
 8006794:	f8c3 22b4 	str.w	r2, [r3, #692]	; 0x2b4
    status = USBD_OK;
 8006798:	2300      	movs	r3, #0
 800679a:	73fb      	strb	r3, [r7, #15]
 800679c:	e001      	b.n	80067a2 <USBD_RegisterClass+0x26>
  else
  {
#if (USBD_DEBUG_LEVEL > 1U)
    USBD_ErrLog("Invalid Class handle");
#endif
    status = USBD_FAIL;
 800679e:	2302      	movs	r3, #2
 80067a0:	73fb      	strb	r3, [r7, #15]
  }

  return status;
 80067a2:	7bfb      	ldrb	r3, [r7, #15]
}
 80067a4:	4618      	mov	r0, r3
 80067a6:	3714      	adds	r7, #20
 80067a8:	46bd      	mov	sp, r7
 80067aa:	bc80      	pop	{r7}
 80067ac:	4770      	bx	lr

080067ae <USBD_Start>:
  *         Start the USB Device Core.
  * @param  pdev: Device Handle
  * @retval USBD Status
  */
USBD_StatusTypeDef  USBD_Start(USBD_HandleTypeDef *pdev)
{
 80067ae:	b580      	push	{r7, lr}
 80067b0:	b082      	sub	sp, #8
 80067b2:	af00      	add	r7, sp, #0
 80067b4:	6078      	str	r0, [r7, #4]
  /* Start the low level driver  */
  USBD_LL_Start(pdev);
 80067b6:	6878      	ldr	r0, [r7, #4]
 80067b8:	f001 fb50 	bl	8007e5c <USBD_LL_Start>

  return USBD_OK;
 80067bc:	2300      	movs	r3, #0
}
 80067be:	4618      	mov	r0, r3
 80067c0:	3708      	adds	r7, #8
 80067c2:	46bd      	mov	sp, r7
 80067c4:	bd80      	pop	{r7, pc}

080067c6 <USBD_RunTestMode>:
*         Launch test mode process
* @param  pdev: device instance
* @retval status
*/
USBD_StatusTypeDef  USBD_RunTestMode(USBD_HandleTypeDef  *pdev)
{
 80067c6:	b480      	push	{r7}
 80067c8:	b083      	sub	sp, #12
 80067ca:	af00      	add	r7, sp, #0
 80067cc:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument compilation warning */
  UNUSED(pdev);

  return USBD_OK;
 80067ce:	2300      	movs	r3, #0
}
 80067d0:	4618      	mov	r0, r3
 80067d2:	370c      	adds	r7, #12
 80067d4:	46bd      	mov	sp, r7
 80067d6:	bc80      	pop	{r7}
 80067d8:	4770      	bx	lr

080067da <USBD_SetClassConfig>:
* @param  cfgidx: configuration index
* @retval status
*/

USBD_StatusTypeDef USBD_SetClassConfig(USBD_HandleTypeDef  *pdev, uint8_t cfgidx)
{
 80067da:	b580      	push	{r7, lr}
 80067dc:	b084      	sub	sp, #16
 80067de:	af00      	add	r7, sp, #0
 80067e0:	6078      	str	r0, [r7, #4]
 80067e2:	460b      	mov	r3, r1
 80067e4:	70fb      	strb	r3, [r7, #3]
  USBD_StatusTypeDef ret = USBD_FAIL;
 80067e6:	2302      	movs	r3, #2
 80067e8:	73fb      	strb	r3, [r7, #15]

  if (pdev->pClass != NULL)
 80067ea:	687b      	ldr	r3, [r7, #4]
 80067ec:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 80067f0:	2b00      	cmp	r3, #0
 80067f2:	d00c      	beq.n	800680e <USBD_SetClassConfig+0x34>
  {
    /* Set configuration  and Start the Class*/
    if (pdev->pClass->Init(pdev, cfgidx) == 0U)
 80067f4:	687b      	ldr	r3, [r7, #4]
 80067f6:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 80067fa:	681b      	ldr	r3, [r3, #0]
 80067fc:	78fa      	ldrb	r2, [r7, #3]
 80067fe:	4611      	mov	r1, r2
 8006800:	6878      	ldr	r0, [r7, #4]
 8006802:	4798      	blx	r3
 8006804:	4603      	mov	r3, r0
 8006806:	2b00      	cmp	r3, #0
 8006808:	d101      	bne.n	800680e <USBD_SetClassConfig+0x34>
    {
      ret = USBD_OK;
 800680a:	2300      	movs	r3, #0
 800680c:	73fb      	strb	r3, [r7, #15]
    }
  }

  return ret;
 800680e:	7bfb      	ldrb	r3, [r7, #15]
}
 8006810:	4618      	mov	r0, r3
 8006812:	3710      	adds	r7, #16
 8006814:	46bd      	mov	sp, r7
 8006816:	bd80      	pop	{r7, pc}

08006818 <USBD_ClrClassConfig>:
* @param  pdev: device instance
* @param  cfgidx: configuration index
* @retval status: USBD_StatusTypeDef
*/
USBD_StatusTypeDef USBD_ClrClassConfig(USBD_HandleTypeDef  *pdev, uint8_t cfgidx)
{
 8006818:	b580      	push	{r7, lr}
 800681a:	b082      	sub	sp, #8
 800681c:	af00      	add	r7, sp, #0
 800681e:	6078      	str	r0, [r7, #4]
 8006820:	460b      	mov	r3, r1
 8006822:	70fb      	strb	r3, [r7, #3]
  /* Clear configuration  and De-initialize the Class process*/
  pdev->pClass->DeInit(pdev, cfgidx);
 8006824:	687b      	ldr	r3, [r7, #4]
 8006826:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800682a:	685b      	ldr	r3, [r3, #4]
 800682c:	78fa      	ldrb	r2, [r7, #3]
 800682e:	4611      	mov	r1, r2
 8006830:	6878      	ldr	r0, [r7, #4]
 8006832:	4798      	blx	r3

  return USBD_OK;
 8006834:	2300      	movs	r3, #0
}
 8006836:	4618      	mov	r0, r3
 8006838:	3708      	adds	r7, #8
 800683a:	46bd      	mov	sp, r7
 800683c:	bd80      	pop	{r7, pc}

0800683e <USBD_LL_SetupStage>:
*         Handle the setup stage
* @param  pdev: device instance
* @retval status
*/
USBD_StatusTypeDef USBD_LL_SetupStage(USBD_HandleTypeDef *pdev, uint8_t *psetup)
{
 800683e:	b580      	push	{r7, lr}
 8006840:	b082      	sub	sp, #8
 8006842:	af00      	add	r7, sp, #0
 8006844:	6078      	str	r0, [r7, #4]
 8006846:	6039      	str	r1, [r7, #0]
  USBD_ParseSetupRequest(&pdev->request, psetup);
 8006848:	687b      	ldr	r3, [r7, #4]
 800684a:	f503 732a 	add.w	r3, r3, #680	; 0x2a8
 800684e:	6839      	ldr	r1, [r7, #0]
 8006850:	4618      	mov	r0, r3
 8006852:	f000 fecb 	bl	80075ec <USBD_ParseSetupRequest>

  pdev->ep0_state = USBD_EP0_SETUP;
 8006856:	687b      	ldr	r3, [r7, #4]
 8006858:	2201      	movs	r2, #1
 800685a:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294

  pdev->ep0_data_len = pdev->request.wLength;
 800685e:	687b      	ldr	r3, [r7, #4]
 8006860:	f8b3 32ae 	ldrh.w	r3, [r3, #686]	; 0x2ae
 8006864:	461a      	mov	r2, r3
 8006866:	687b      	ldr	r3, [r7, #4]
 8006868:	f8c3 2298 	str.w	r2, [r3, #664]	; 0x298

  switch (pdev->request.bmRequest & 0x1FU)
 800686c:	687b      	ldr	r3, [r7, #4]
 800686e:	f893 32a8 	ldrb.w	r3, [r3, #680]	; 0x2a8
 8006872:	f003 031f 	and.w	r3, r3, #31
 8006876:	2b01      	cmp	r3, #1
 8006878:	d00c      	beq.n	8006894 <USBD_LL_SetupStage+0x56>
 800687a:	2b01      	cmp	r3, #1
 800687c:	d302      	bcc.n	8006884 <USBD_LL_SetupStage+0x46>
 800687e:	2b02      	cmp	r3, #2
 8006880:	d010      	beq.n	80068a4 <USBD_LL_SetupStage+0x66>
 8006882:	e017      	b.n	80068b4 <USBD_LL_SetupStage+0x76>
  {
    case USB_REQ_RECIPIENT_DEVICE:
      USBD_StdDevReq(pdev, &pdev->request);
 8006884:	687b      	ldr	r3, [r7, #4]
 8006886:	f503 732a 	add.w	r3, r3, #680	; 0x2a8
 800688a:	4619      	mov	r1, r3
 800688c:	6878      	ldr	r0, [r7, #4]
 800688e:	f000 f9cb 	bl	8006c28 <USBD_StdDevReq>
      break;
 8006892:	e01a      	b.n	80068ca <USBD_LL_SetupStage+0x8c>

    case USB_REQ_RECIPIENT_INTERFACE:
      USBD_StdItfReq(pdev, &pdev->request);
 8006894:	687b      	ldr	r3, [r7, #4]
 8006896:	f503 732a 	add.w	r3, r3, #680	; 0x2a8
 800689a:	4619      	mov	r1, r3
 800689c:	6878      	ldr	r0, [r7, #4]
 800689e:	f000 fa2d 	bl	8006cfc <USBD_StdItfReq>
      break;
 80068a2:	e012      	b.n	80068ca <USBD_LL_SetupStage+0x8c>

    case USB_REQ_RECIPIENT_ENDPOINT:
      USBD_StdEPReq(pdev, &pdev->request);
 80068a4:	687b      	ldr	r3, [r7, #4]
 80068a6:	f503 732a 	add.w	r3, r3, #680	; 0x2a8
 80068aa:	4619      	mov	r1, r3
 80068ac:	6878      	ldr	r0, [r7, #4]
 80068ae:	f000 fa6b 	bl	8006d88 <USBD_StdEPReq>
      break;
 80068b2:	e00a      	b.n	80068ca <USBD_LL_SetupStage+0x8c>

    default:
      USBD_LL_StallEP(pdev, (pdev->request.bmRequest & 0x80U));
 80068b4:	687b      	ldr	r3, [r7, #4]
 80068b6:	f893 32a8 	ldrb.w	r3, [r3, #680]	; 0x2a8
 80068ba:	f023 037f 	bic.w	r3, r3, #127	; 0x7f
 80068be:	b2db      	uxtb	r3, r3
 80068c0:	4619      	mov	r1, r3
 80068c2:	6878      	ldr	r0, [r7, #4]
 80068c4:	f001 fb2a 	bl	8007f1c <USBD_LL_StallEP>
      break;
 80068c8:	bf00      	nop
  }

  return USBD_OK;
 80068ca:	2300      	movs	r3, #0
}
 80068cc:	4618      	mov	r0, r3
 80068ce:	3708      	adds	r7, #8
 80068d0:	46bd      	mov	sp, r7
 80068d2:	bd80      	pop	{r7, pc}

080068d4 <USBD_LL_DataOutStage>:
* @param  epnum: endpoint index
* @retval status
*/
USBD_StatusTypeDef USBD_LL_DataOutStage(USBD_HandleTypeDef *pdev,
                                        uint8_t epnum, uint8_t *pdata)
{
 80068d4:	b580      	push	{r7, lr}
 80068d6:	b086      	sub	sp, #24
 80068d8:	af00      	add	r7, sp, #0
 80068da:	60f8      	str	r0, [r7, #12]
 80068dc:	460b      	mov	r3, r1
 80068de:	607a      	str	r2, [r7, #4]
 80068e0:	72fb      	strb	r3, [r7, #11]
  USBD_EndpointTypeDef *pep;

  if (epnum == 0U)
 80068e2:	7afb      	ldrb	r3, [r7, #11]
 80068e4:	2b00      	cmp	r3, #0
 80068e6:	d14b      	bne.n	8006980 <USBD_LL_DataOutStage+0xac>
  {
    pep = &pdev->ep_out[0];
 80068e8:	68fb      	ldr	r3, [r7, #12]
 80068ea:	f503 73aa 	add.w	r3, r3, #340	; 0x154
 80068ee:	617b      	str	r3, [r7, #20]

    if (pdev->ep0_state == USBD_EP0_DATA_OUT)
 80068f0:	68fb      	ldr	r3, [r7, #12]
 80068f2:	f8d3 3294 	ldr.w	r3, [r3, #660]	; 0x294
 80068f6:	2b03      	cmp	r3, #3
 80068f8:	d134      	bne.n	8006964 <USBD_LL_DataOutStage+0x90>
    {
      if (pep->rem_length > pep->maxpacket)
 80068fa:	697b      	ldr	r3, [r7, #20]
 80068fc:	68da      	ldr	r2, [r3, #12]
 80068fe:	697b      	ldr	r3, [r7, #20]
 8006900:	691b      	ldr	r3, [r3, #16]
 8006902:	429a      	cmp	r2, r3
 8006904:	d919      	bls.n	800693a <USBD_LL_DataOutStage+0x66>
      {
        pep->rem_length -= pep->maxpacket;
 8006906:	697b      	ldr	r3, [r7, #20]
 8006908:	68da      	ldr	r2, [r3, #12]
 800690a:	697b      	ldr	r3, [r7, #20]
 800690c:	691b      	ldr	r3, [r3, #16]
 800690e:	1ad2      	subs	r2, r2, r3
 8006910:	697b      	ldr	r3, [r7, #20]
 8006912:	60da      	str	r2, [r3, #12]

        USBD_CtlContinueRx(pdev, pdata,
                           (uint16_t)MIN(pep->rem_length, pep->maxpacket));
 8006914:	697b      	ldr	r3, [r7, #20]
 8006916:	68da      	ldr	r2, [r3, #12]
 8006918:	697b      	ldr	r3, [r7, #20]
 800691a:	691b      	ldr	r3, [r3, #16]
        USBD_CtlContinueRx(pdev, pdata,
 800691c:	429a      	cmp	r2, r3
 800691e:	d203      	bcs.n	8006928 <USBD_LL_DataOutStage+0x54>
                           (uint16_t)MIN(pep->rem_length, pep->maxpacket));
 8006920:	697b      	ldr	r3, [r7, #20]
 8006922:	68db      	ldr	r3, [r3, #12]
        USBD_CtlContinueRx(pdev, pdata,
 8006924:	b29b      	uxth	r3, r3
 8006926:	e002      	b.n	800692e <USBD_LL_DataOutStage+0x5a>
                           (uint16_t)MIN(pep->rem_length, pep->maxpacket));
 8006928:	697b      	ldr	r3, [r7, #20]
 800692a:	691b      	ldr	r3, [r3, #16]
        USBD_CtlContinueRx(pdev, pdata,
 800692c:	b29b      	uxth	r3, r3
 800692e:	461a      	mov	r2, r3
 8006930:	6879      	ldr	r1, [r7, #4]
 8006932:	68f8      	ldr	r0, [r7, #12]
 8006934:	f000 ff4c 	bl	80077d0 <USBD_CtlContinueRx>
 8006938:	e038      	b.n	80069ac <USBD_LL_DataOutStage+0xd8>
      }
      else
      {
        if ((pdev->pClass->EP0_RxReady != NULL) &&
 800693a:	68fb      	ldr	r3, [r7, #12]
 800693c:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8006940:	691b      	ldr	r3, [r3, #16]
 8006942:	2b00      	cmp	r3, #0
 8006944:	d00a      	beq.n	800695c <USBD_LL_DataOutStage+0x88>
            (pdev->dev_state == USBD_STATE_CONFIGURED))
 8006946:	68fb      	ldr	r3, [r7, #12]
 8006948:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
        if ((pdev->pClass->EP0_RxReady != NULL) &&
 800694c:	2b03      	cmp	r3, #3
 800694e:	d105      	bne.n	800695c <USBD_LL_DataOutStage+0x88>
        {
          pdev->pClass->EP0_RxReady(pdev);
 8006950:	68fb      	ldr	r3, [r7, #12]
 8006952:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8006956:	691b      	ldr	r3, [r3, #16]
 8006958:	68f8      	ldr	r0, [r7, #12]
 800695a:	4798      	blx	r3
        }
        USBD_CtlSendStatus(pdev);
 800695c:	68f8      	ldr	r0, [r7, #12]
 800695e:	f000 ff49 	bl	80077f4 <USBD_CtlSendStatus>
 8006962:	e023      	b.n	80069ac <USBD_LL_DataOutStage+0xd8>
      }
    }
    else
    {
      if (pdev->ep0_state == USBD_EP0_STATUS_OUT)
 8006964:	68fb      	ldr	r3, [r7, #12]
 8006966:	f8d3 3294 	ldr.w	r3, [r3, #660]	; 0x294
 800696a:	2b05      	cmp	r3, #5
 800696c:	d11e      	bne.n	80069ac <USBD_LL_DataOutStage+0xd8>
      {
        /*
         * STATUS PHASE completed, update ep0_state to idle
         */
        pdev->ep0_state = USBD_EP0_IDLE;
 800696e:	68fb      	ldr	r3, [r7, #12]
 8006970:	2200      	movs	r2, #0
 8006972:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294
        USBD_LL_StallEP(pdev, 0U);
 8006976:	2100      	movs	r1, #0
 8006978:	68f8      	ldr	r0, [r7, #12]
 800697a:	f001 facf 	bl	8007f1c <USBD_LL_StallEP>
 800697e:	e015      	b.n	80069ac <USBD_LL_DataOutStage+0xd8>
      }
    }
  }
  else if ((pdev->pClass->DataOut != NULL) &&
 8006980:	68fb      	ldr	r3, [r7, #12]
 8006982:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8006986:	699b      	ldr	r3, [r3, #24]
 8006988:	2b00      	cmp	r3, #0
 800698a:	d00d      	beq.n	80069a8 <USBD_LL_DataOutStage+0xd4>
           (pdev->dev_state == USBD_STATE_CONFIGURED))
 800698c:	68fb      	ldr	r3, [r7, #12]
 800698e:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
  else if ((pdev->pClass->DataOut != NULL) &&
 8006992:	2b03      	cmp	r3, #3
 8006994:	d108      	bne.n	80069a8 <USBD_LL_DataOutStage+0xd4>
  {
    pdev->pClass->DataOut(pdev, epnum);
 8006996:	68fb      	ldr	r3, [r7, #12]
 8006998:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800699c:	699b      	ldr	r3, [r3, #24]
 800699e:	7afa      	ldrb	r2, [r7, #11]
 80069a0:	4611      	mov	r1, r2
 80069a2:	68f8      	ldr	r0, [r7, #12]
 80069a4:	4798      	blx	r3
 80069a6:	e001      	b.n	80069ac <USBD_LL_DataOutStage+0xd8>
  }
  else
  {
    /* should never be in this condition */
    return USBD_FAIL;
 80069a8:	2302      	movs	r3, #2
 80069aa:	e000      	b.n	80069ae <USBD_LL_DataOutStage+0xda>
  }

  return USBD_OK;
 80069ac:	2300      	movs	r3, #0
}
 80069ae:	4618      	mov	r0, r3
 80069b0:	3718      	adds	r7, #24
 80069b2:	46bd      	mov	sp, r7
 80069b4:	bd80      	pop	{r7, pc}

080069b6 <USBD_LL_DataInStage>:
* @param  epnum: endpoint index
* @retval status
*/
USBD_StatusTypeDef USBD_LL_DataInStage(USBD_HandleTypeDef *pdev,
                                       uint8_t epnum, uint8_t *pdata)
{
 80069b6:	b580      	push	{r7, lr}
 80069b8:	b086      	sub	sp, #24
 80069ba:	af00      	add	r7, sp, #0
 80069bc:	60f8      	str	r0, [r7, #12]
 80069be:	460b      	mov	r3, r1
 80069c0:	607a      	str	r2, [r7, #4]
 80069c2:	72fb      	strb	r3, [r7, #11]
  USBD_EndpointTypeDef *pep;

  if (epnum == 0U)
 80069c4:	7afb      	ldrb	r3, [r7, #11]
 80069c6:	2b00      	cmp	r3, #0
 80069c8:	d17f      	bne.n	8006aca <USBD_LL_DataInStage+0x114>
  {
    pep = &pdev->ep_in[0];
 80069ca:	68fb      	ldr	r3, [r7, #12]
 80069cc:	3314      	adds	r3, #20
 80069ce:	617b      	str	r3, [r7, #20]

    if (pdev->ep0_state == USBD_EP0_DATA_IN)
 80069d0:	68fb      	ldr	r3, [r7, #12]
 80069d2:	f8d3 3294 	ldr.w	r3, [r3, #660]	; 0x294
 80069d6:	2b02      	cmp	r3, #2
 80069d8:	d15c      	bne.n	8006a94 <USBD_LL_DataInStage+0xde>
    {
      if (pep->rem_length > pep->maxpacket)
 80069da:	697b      	ldr	r3, [r7, #20]
 80069dc:	68da      	ldr	r2, [r3, #12]
 80069de:	697b      	ldr	r3, [r7, #20]
 80069e0:	691b      	ldr	r3, [r3, #16]
 80069e2:	429a      	cmp	r2, r3
 80069e4:	d915      	bls.n	8006a12 <USBD_LL_DataInStage+0x5c>
      {
        pep->rem_length -= pep->maxpacket;
 80069e6:	697b      	ldr	r3, [r7, #20]
 80069e8:	68da      	ldr	r2, [r3, #12]
 80069ea:	697b      	ldr	r3, [r7, #20]
 80069ec:	691b      	ldr	r3, [r3, #16]
 80069ee:	1ad2      	subs	r2, r2, r3
 80069f0:	697b      	ldr	r3, [r7, #20]
 80069f2:	60da      	str	r2, [r3, #12]

        USBD_CtlContinueSendData(pdev, pdata, (uint16_t)pep->rem_length);
 80069f4:	697b      	ldr	r3, [r7, #20]
 80069f6:	68db      	ldr	r3, [r3, #12]
 80069f8:	b29b      	uxth	r3, r3
 80069fa:	461a      	mov	r2, r3
 80069fc:	6879      	ldr	r1, [r7, #4]
 80069fe:	68f8      	ldr	r0, [r7, #12]
 8006a00:	f000 feb6 	bl	8007770 <USBD_CtlContinueSendData>

        /* Prepare endpoint for premature end of transfer */
        USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 8006a04:	2300      	movs	r3, #0
 8006a06:	2200      	movs	r2, #0
 8006a08:	2100      	movs	r1, #0
 8006a0a:	68f8      	ldr	r0, [r7, #12]
 8006a0c:	f001 fb32 	bl	8008074 <USBD_LL_PrepareReceive>
 8006a10:	e04e      	b.n	8006ab0 <USBD_LL_DataInStage+0xfa>
      }
      else
      {
        /* last packet is MPS multiple, so send ZLP packet */
        if ((pep->total_length % pep->maxpacket == 0U) &&
 8006a12:	697b      	ldr	r3, [r7, #20]
 8006a14:	689b      	ldr	r3, [r3, #8]
 8006a16:	697a      	ldr	r2, [r7, #20]
 8006a18:	6912      	ldr	r2, [r2, #16]
 8006a1a:	fbb3 f1f2 	udiv	r1, r3, r2
 8006a1e:	fb02 f201 	mul.w	r2, r2, r1
 8006a22:	1a9b      	subs	r3, r3, r2
 8006a24:	2b00      	cmp	r3, #0
 8006a26:	d11c      	bne.n	8006a62 <USBD_LL_DataInStage+0xac>
            (pep->total_length >= pep->maxpacket) &&
 8006a28:	697b      	ldr	r3, [r7, #20]
 8006a2a:	689a      	ldr	r2, [r3, #8]
 8006a2c:	697b      	ldr	r3, [r7, #20]
 8006a2e:	691b      	ldr	r3, [r3, #16]
        if ((pep->total_length % pep->maxpacket == 0U) &&
 8006a30:	429a      	cmp	r2, r3
 8006a32:	d316      	bcc.n	8006a62 <USBD_LL_DataInStage+0xac>
            (pep->total_length < pdev->ep0_data_len))
 8006a34:	697b      	ldr	r3, [r7, #20]
 8006a36:	689a      	ldr	r2, [r3, #8]
 8006a38:	68fb      	ldr	r3, [r7, #12]
 8006a3a:	f8d3 3298 	ldr.w	r3, [r3, #664]	; 0x298
            (pep->total_length >= pep->maxpacket) &&
 8006a3e:	429a      	cmp	r2, r3
 8006a40:	d20f      	bcs.n	8006a62 <USBD_LL_DataInStage+0xac>
        {
          USBD_CtlContinueSendData(pdev, NULL, 0U);
 8006a42:	2200      	movs	r2, #0
 8006a44:	2100      	movs	r1, #0
 8006a46:	68f8      	ldr	r0, [r7, #12]
 8006a48:	f000 fe92 	bl	8007770 <USBD_CtlContinueSendData>
          pdev->ep0_data_len = 0U;
 8006a4c:	68fb      	ldr	r3, [r7, #12]
 8006a4e:	2200      	movs	r2, #0
 8006a50:	f8c3 2298 	str.w	r2, [r3, #664]	; 0x298

          /* Prepare endpoint for premature end of transfer */
          USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 8006a54:	2300      	movs	r3, #0
 8006a56:	2200      	movs	r2, #0
 8006a58:	2100      	movs	r1, #0
 8006a5a:	68f8      	ldr	r0, [r7, #12]
 8006a5c:	f001 fb0a 	bl	8008074 <USBD_LL_PrepareReceive>
 8006a60:	e026      	b.n	8006ab0 <USBD_LL_DataInStage+0xfa>
        }
        else
        {
          if ((pdev->pClass->EP0_TxSent != NULL) &&
 8006a62:	68fb      	ldr	r3, [r7, #12]
 8006a64:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8006a68:	68db      	ldr	r3, [r3, #12]
 8006a6a:	2b00      	cmp	r3, #0
 8006a6c:	d00a      	beq.n	8006a84 <USBD_LL_DataInStage+0xce>
              (pdev->dev_state == USBD_STATE_CONFIGURED))
 8006a6e:	68fb      	ldr	r3, [r7, #12]
 8006a70:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
          if ((pdev->pClass->EP0_TxSent != NULL) &&
 8006a74:	2b03      	cmp	r3, #3
 8006a76:	d105      	bne.n	8006a84 <USBD_LL_DataInStage+0xce>
          {
            pdev->pClass->EP0_TxSent(pdev);
 8006a78:	68fb      	ldr	r3, [r7, #12]
 8006a7a:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8006a7e:	68db      	ldr	r3, [r3, #12]
 8006a80:	68f8      	ldr	r0, [r7, #12]
 8006a82:	4798      	blx	r3
          }
          USBD_LL_StallEP(pdev, 0x80U);
 8006a84:	2180      	movs	r1, #128	; 0x80
 8006a86:	68f8      	ldr	r0, [r7, #12]
 8006a88:	f001 fa48 	bl	8007f1c <USBD_LL_StallEP>
          USBD_CtlReceiveStatus(pdev);
 8006a8c:	68f8      	ldr	r0, [r7, #12]
 8006a8e:	f000 fec4 	bl	800781a <USBD_CtlReceiveStatus>
 8006a92:	e00d      	b.n	8006ab0 <USBD_LL_DataInStage+0xfa>
        }
      }
    }
    else
    {
      if ((pdev->ep0_state == USBD_EP0_STATUS_IN) ||
 8006a94:	68fb      	ldr	r3, [r7, #12]
 8006a96:	f8d3 3294 	ldr.w	r3, [r3, #660]	; 0x294
 8006a9a:	2b04      	cmp	r3, #4
 8006a9c:	d004      	beq.n	8006aa8 <USBD_LL_DataInStage+0xf2>
          (pdev->ep0_state == USBD_EP0_IDLE))
 8006a9e:	68fb      	ldr	r3, [r7, #12]
 8006aa0:	f8d3 3294 	ldr.w	r3, [r3, #660]	; 0x294
      if ((pdev->ep0_state == USBD_EP0_STATUS_IN) ||
 8006aa4:	2b00      	cmp	r3, #0
 8006aa6:	d103      	bne.n	8006ab0 <USBD_LL_DataInStage+0xfa>
      {
        USBD_LL_StallEP(pdev, 0x80U);
 8006aa8:	2180      	movs	r1, #128	; 0x80
 8006aaa:	68f8      	ldr	r0, [r7, #12]
 8006aac:	f001 fa36 	bl	8007f1c <USBD_LL_StallEP>
      }
    }

    if (pdev->dev_test_mode == 1U)
 8006ab0:	68fb      	ldr	r3, [r7, #12]
 8006ab2:	f893 32a0 	ldrb.w	r3, [r3, #672]	; 0x2a0
 8006ab6:	2b01      	cmp	r3, #1
 8006ab8:	d11d      	bne.n	8006af6 <USBD_LL_DataInStage+0x140>
    {
      USBD_RunTestMode(pdev);
 8006aba:	68f8      	ldr	r0, [r7, #12]
 8006abc:	f7ff fe83 	bl	80067c6 <USBD_RunTestMode>
      pdev->dev_test_mode = 0U;
 8006ac0:	68fb      	ldr	r3, [r7, #12]
 8006ac2:	2200      	movs	r2, #0
 8006ac4:	f883 22a0 	strb.w	r2, [r3, #672]	; 0x2a0
 8006ac8:	e015      	b.n	8006af6 <USBD_LL_DataInStage+0x140>
    }
  }
  else if ((pdev->pClass->DataIn != NULL) &&
 8006aca:	68fb      	ldr	r3, [r7, #12]
 8006acc:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8006ad0:	695b      	ldr	r3, [r3, #20]
 8006ad2:	2b00      	cmp	r3, #0
 8006ad4:	d00d      	beq.n	8006af2 <USBD_LL_DataInStage+0x13c>
           (pdev->dev_state == USBD_STATE_CONFIGURED))
 8006ad6:	68fb      	ldr	r3, [r7, #12]
 8006ad8:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
  else if ((pdev->pClass->DataIn != NULL) &&
 8006adc:	2b03      	cmp	r3, #3
 8006ade:	d108      	bne.n	8006af2 <USBD_LL_DataInStage+0x13c>
  {
    pdev->pClass->DataIn(pdev, epnum);
 8006ae0:	68fb      	ldr	r3, [r7, #12]
 8006ae2:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8006ae6:	695b      	ldr	r3, [r3, #20]
 8006ae8:	7afa      	ldrb	r2, [r7, #11]
 8006aea:	4611      	mov	r1, r2
 8006aec:	68f8      	ldr	r0, [r7, #12]
 8006aee:	4798      	blx	r3
 8006af0:	e001      	b.n	8006af6 <USBD_LL_DataInStage+0x140>
  }
  else
  {
    /* should never be in this condition */
    return USBD_FAIL;
 8006af2:	2302      	movs	r3, #2
 8006af4:	e000      	b.n	8006af8 <USBD_LL_DataInStage+0x142>
  }

  return USBD_OK;
 8006af6:	2300      	movs	r3, #0
}
 8006af8:	4618      	mov	r0, r3
 8006afa:	3718      	adds	r7, #24
 8006afc:	46bd      	mov	sp, r7
 8006afe:	bd80      	pop	{r7, pc}

08006b00 <USBD_LL_Reset>:
* @param  pdev: device instance
* @retval status
*/

USBD_StatusTypeDef USBD_LL_Reset(USBD_HandleTypeDef *pdev)
{
 8006b00:	b580      	push	{r7, lr}
 8006b02:	b082      	sub	sp, #8
 8006b04:	af00      	add	r7, sp, #0
 8006b06:	6078      	str	r0, [r7, #4]
  /* Open EP0 OUT */
  USBD_LL_OpenEP(pdev, 0x00U, USBD_EP_TYPE_CTRL, USB_MAX_EP0_SIZE);
 8006b08:	2340      	movs	r3, #64	; 0x40
 8006b0a:	2200      	movs	r2, #0
 8006b0c:	2100      	movs	r1, #0
 8006b0e:	6878      	ldr	r0, [r7, #4]
 8006b10:	f001 f9bf 	bl	8007e92 <USBD_LL_OpenEP>
  pdev->ep_out[0x00U & 0xFU].is_used = 1U;
 8006b14:	687b      	ldr	r3, [r7, #4]
 8006b16:	2201      	movs	r2, #1
 8006b18:	f8c3 2158 	str.w	r2, [r3, #344]	; 0x158

  pdev->ep_out[0].maxpacket = USB_MAX_EP0_SIZE;
 8006b1c:	687b      	ldr	r3, [r7, #4]
 8006b1e:	2240      	movs	r2, #64	; 0x40
 8006b20:	f8c3 2164 	str.w	r2, [r3, #356]	; 0x164

  /* Open EP0 IN */
  USBD_LL_OpenEP(pdev, 0x80U, USBD_EP_TYPE_CTRL, USB_MAX_EP0_SIZE);
 8006b24:	2340      	movs	r3, #64	; 0x40
 8006b26:	2200      	movs	r2, #0
 8006b28:	2180      	movs	r1, #128	; 0x80
 8006b2a:	6878      	ldr	r0, [r7, #4]
 8006b2c:	f001 f9b1 	bl	8007e92 <USBD_LL_OpenEP>
  pdev->ep_in[0x80U & 0xFU].is_used = 1U;
 8006b30:	687b      	ldr	r3, [r7, #4]
 8006b32:	2201      	movs	r2, #1
 8006b34:	619a      	str	r2, [r3, #24]

  pdev->ep_in[0].maxpacket = USB_MAX_EP0_SIZE;
 8006b36:	687b      	ldr	r3, [r7, #4]
 8006b38:	2240      	movs	r2, #64	; 0x40
 8006b3a:	625a      	str	r2, [r3, #36]	; 0x24

  /* Upon Reset call user call back */
  pdev->dev_state = USBD_STATE_DEFAULT;
 8006b3c:	687b      	ldr	r3, [r7, #4]
 8006b3e:	2201      	movs	r2, #1
 8006b40:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
  pdev->ep0_state = USBD_EP0_IDLE;
 8006b44:	687b      	ldr	r3, [r7, #4]
 8006b46:	2200      	movs	r2, #0
 8006b48:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294
  pdev->dev_config = 0U;
 8006b4c:	687b      	ldr	r3, [r7, #4]
 8006b4e:	2200      	movs	r2, #0
 8006b50:	605a      	str	r2, [r3, #4]
  pdev->dev_remote_wakeup = 0U;
 8006b52:	687b      	ldr	r3, [r7, #4]
 8006b54:	2200      	movs	r2, #0
 8006b56:	f8c3 22a4 	str.w	r2, [r3, #676]	; 0x2a4

  if (pdev->pClassData)
 8006b5a:	687b      	ldr	r3, [r7, #4]
 8006b5c:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8006b60:	2b00      	cmp	r3, #0
 8006b62:	d009      	beq.n	8006b78 <USBD_LL_Reset+0x78>
  {
    pdev->pClass->DeInit(pdev, (uint8_t)pdev->dev_config);
 8006b64:	687b      	ldr	r3, [r7, #4]
 8006b66:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8006b6a:	685b      	ldr	r3, [r3, #4]
 8006b6c:	687a      	ldr	r2, [r7, #4]
 8006b6e:	6852      	ldr	r2, [r2, #4]
 8006b70:	b2d2      	uxtb	r2, r2
 8006b72:	4611      	mov	r1, r2
 8006b74:	6878      	ldr	r0, [r7, #4]
 8006b76:	4798      	blx	r3
  }

  return USBD_OK;
 8006b78:	2300      	movs	r3, #0
}
 8006b7a:	4618      	mov	r0, r3
 8006b7c:	3708      	adds	r7, #8
 8006b7e:	46bd      	mov	sp, r7
 8006b80:	bd80      	pop	{r7, pc}

08006b82 <USBD_LL_SetSpeed>:
* @param  pdev: device instance
* @retval status
*/
USBD_StatusTypeDef USBD_LL_SetSpeed(USBD_HandleTypeDef *pdev,
                                    USBD_SpeedTypeDef speed)
{
 8006b82:	b480      	push	{r7}
 8006b84:	b083      	sub	sp, #12
 8006b86:	af00      	add	r7, sp, #0
 8006b88:	6078      	str	r0, [r7, #4]
 8006b8a:	460b      	mov	r3, r1
 8006b8c:	70fb      	strb	r3, [r7, #3]
  pdev->dev_speed = speed;
 8006b8e:	687b      	ldr	r3, [r7, #4]
 8006b90:	78fa      	ldrb	r2, [r7, #3]
 8006b92:	741a      	strb	r2, [r3, #16]

  return USBD_OK;
 8006b94:	2300      	movs	r3, #0
}
 8006b96:	4618      	mov	r0, r3
 8006b98:	370c      	adds	r7, #12
 8006b9a:	46bd      	mov	sp, r7
 8006b9c:	bc80      	pop	{r7}
 8006b9e:	4770      	bx	lr

08006ba0 <USBD_LL_Suspend>:
* @param  pdev: device instance
* @retval status
*/

USBD_StatusTypeDef USBD_LL_Suspend(USBD_HandleTypeDef *pdev)
{
 8006ba0:	b480      	push	{r7}
 8006ba2:	b083      	sub	sp, #12
 8006ba4:	af00      	add	r7, sp, #0
 8006ba6:	6078      	str	r0, [r7, #4]
  pdev->dev_old_state =  pdev->dev_state;
 8006ba8:	687b      	ldr	r3, [r7, #4]
 8006baa:	f893 229c 	ldrb.w	r2, [r3, #668]	; 0x29c
 8006bae:	687b      	ldr	r3, [r7, #4]
 8006bb0:	f883 229d 	strb.w	r2, [r3, #669]	; 0x29d
  pdev->dev_state  = USBD_STATE_SUSPENDED;
 8006bb4:	687b      	ldr	r3, [r7, #4]
 8006bb6:	2204      	movs	r2, #4
 8006bb8:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c

  return USBD_OK;
 8006bbc:	2300      	movs	r3, #0
}
 8006bbe:	4618      	mov	r0, r3
 8006bc0:	370c      	adds	r7, #12
 8006bc2:	46bd      	mov	sp, r7
 8006bc4:	bc80      	pop	{r7}
 8006bc6:	4770      	bx	lr

08006bc8 <USBD_LL_Resume>:
* @param  pdev: device instance
* @retval status
*/

USBD_StatusTypeDef USBD_LL_Resume(USBD_HandleTypeDef *pdev)
{
 8006bc8:	b480      	push	{r7}
 8006bca:	b083      	sub	sp, #12
 8006bcc:	af00      	add	r7, sp, #0
 8006bce:	6078      	str	r0, [r7, #4]
  if (pdev->dev_state == USBD_STATE_SUSPENDED)
 8006bd0:	687b      	ldr	r3, [r7, #4]
 8006bd2:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8006bd6:	2b04      	cmp	r3, #4
 8006bd8:	d105      	bne.n	8006be6 <USBD_LL_Resume+0x1e>
  {
    pdev->dev_state = pdev->dev_old_state;
 8006bda:	687b      	ldr	r3, [r7, #4]
 8006bdc:	f893 229d 	ldrb.w	r2, [r3, #669]	; 0x29d
 8006be0:	687b      	ldr	r3, [r7, #4]
 8006be2:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
  }

  return USBD_OK;
 8006be6:	2300      	movs	r3, #0
}
 8006be8:	4618      	mov	r0, r3
 8006bea:	370c      	adds	r7, #12
 8006bec:	46bd      	mov	sp, r7
 8006bee:	bc80      	pop	{r7}
 8006bf0:	4770      	bx	lr

08006bf2 <USBD_LL_SOF>:
* @param  pdev: device instance
* @retval status
*/

USBD_StatusTypeDef USBD_LL_SOF(USBD_HandleTypeDef *pdev)
{
 8006bf2:	b580      	push	{r7, lr}
 8006bf4:	b082      	sub	sp, #8
 8006bf6:	af00      	add	r7, sp, #0
 8006bf8:	6078      	str	r0, [r7, #4]
  if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8006bfa:	687b      	ldr	r3, [r7, #4]
 8006bfc:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8006c00:	2b03      	cmp	r3, #3
 8006c02:	d10b      	bne.n	8006c1c <USBD_LL_SOF+0x2a>
  {
    if (pdev->pClass->SOF != NULL)
 8006c04:	687b      	ldr	r3, [r7, #4]
 8006c06:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8006c0a:	69db      	ldr	r3, [r3, #28]
 8006c0c:	2b00      	cmp	r3, #0
 8006c0e:	d005      	beq.n	8006c1c <USBD_LL_SOF+0x2a>
    {
      pdev->pClass->SOF(pdev);
 8006c10:	687b      	ldr	r3, [r7, #4]
 8006c12:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8006c16:	69db      	ldr	r3, [r3, #28]
 8006c18:	6878      	ldr	r0, [r7, #4]
 8006c1a:	4798      	blx	r3
    }
  }

  return USBD_OK;
 8006c1c:	2300      	movs	r3, #0
}
 8006c1e:	4618      	mov	r0, r3
 8006c20:	3708      	adds	r7, #8
 8006c22:	46bd      	mov	sp, r7
 8006c24:	bd80      	pop	{r7, pc}
	...

08006c28 <USBD_StdDevReq>:
* @param  req: usb request
* @retval status
*/
USBD_StatusTypeDef  USBD_StdDevReq(USBD_HandleTypeDef *pdev,
                                   USBD_SetupReqTypedef *req)
{
 8006c28:	b580      	push	{r7, lr}
 8006c2a:	b084      	sub	sp, #16
 8006c2c:	af00      	add	r7, sp, #0
 8006c2e:	6078      	str	r0, [r7, #4]
 8006c30:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 8006c32:	2300      	movs	r3, #0
 8006c34:	73fb      	strb	r3, [r7, #15]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 8006c36:	683b      	ldr	r3, [r7, #0]
 8006c38:	781b      	ldrb	r3, [r3, #0]
 8006c3a:	f003 0360 	and.w	r3, r3, #96	; 0x60
 8006c3e:	2b20      	cmp	r3, #32
 8006c40:	d004      	beq.n	8006c4c <USBD_StdDevReq+0x24>
 8006c42:	2b40      	cmp	r3, #64	; 0x40
 8006c44:	d002      	beq.n	8006c4c <USBD_StdDevReq+0x24>
 8006c46:	2b00      	cmp	r3, #0
 8006c48:	d008      	beq.n	8006c5c <USBD_StdDevReq+0x34>
 8006c4a:	e04c      	b.n	8006ce6 <USBD_StdDevReq+0xbe>
  {
    case USB_REQ_TYPE_CLASS:
    case USB_REQ_TYPE_VENDOR:
      pdev->pClass->Setup(pdev, req);
 8006c4c:	687b      	ldr	r3, [r7, #4]
 8006c4e:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8006c52:	689b      	ldr	r3, [r3, #8]
 8006c54:	6839      	ldr	r1, [r7, #0]
 8006c56:	6878      	ldr	r0, [r7, #4]
 8006c58:	4798      	blx	r3
      break;
 8006c5a:	e049      	b.n	8006cf0 <USBD_StdDevReq+0xc8>

    case USB_REQ_TYPE_STANDARD:
      switch (req->bRequest)
 8006c5c:	683b      	ldr	r3, [r7, #0]
 8006c5e:	785b      	ldrb	r3, [r3, #1]
 8006c60:	2b09      	cmp	r3, #9
 8006c62:	d83a      	bhi.n	8006cda <USBD_StdDevReq+0xb2>
 8006c64:	a201      	add	r2, pc, #4	; (adr r2, 8006c6c <USBD_StdDevReq+0x44>)
 8006c66:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006c6a:	bf00      	nop
 8006c6c:	08006cbd 	.word	0x08006cbd
 8006c70:	08006cd1 	.word	0x08006cd1
 8006c74:	08006cdb 	.word	0x08006cdb
 8006c78:	08006cc7 	.word	0x08006cc7
 8006c7c:	08006cdb 	.word	0x08006cdb
 8006c80:	08006c9f 	.word	0x08006c9f
 8006c84:	08006c95 	.word	0x08006c95
 8006c88:	08006cdb 	.word	0x08006cdb
 8006c8c:	08006cb3 	.word	0x08006cb3
 8006c90:	08006ca9 	.word	0x08006ca9
      {
        case USB_REQ_GET_DESCRIPTOR:
          USBD_GetDescriptor(pdev, req);
 8006c94:	6839      	ldr	r1, [r7, #0]
 8006c96:	6878      	ldr	r0, [r7, #4]
 8006c98:	f000 f9d4 	bl	8007044 <USBD_GetDescriptor>
          break;
 8006c9c:	e022      	b.n	8006ce4 <USBD_StdDevReq+0xbc>

        case USB_REQ_SET_ADDRESS:
          USBD_SetAddress(pdev, req);
 8006c9e:	6839      	ldr	r1, [r7, #0]
 8006ca0:	6878      	ldr	r0, [r7, #4]
 8006ca2:	f000 fb37 	bl	8007314 <USBD_SetAddress>
          break;
 8006ca6:	e01d      	b.n	8006ce4 <USBD_StdDevReq+0xbc>

        case USB_REQ_SET_CONFIGURATION:
          USBD_SetConfig(pdev, req);
 8006ca8:	6839      	ldr	r1, [r7, #0]
 8006caa:	6878      	ldr	r0, [r7, #4]
 8006cac:	f000 fb74 	bl	8007398 <USBD_SetConfig>
          break;
 8006cb0:	e018      	b.n	8006ce4 <USBD_StdDevReq+0xbc>

        case USB_REQ_GET_CONFIGURATION:
          USBD_GetConfig(pdev, req);
 8006cb2:	6839      	ldr	r1, [r7, #0]
 8006cb4:	6878      	ldr	r0, [r7, #4]
 8006cb6:	f000 fbfd 	bl	80074b4 <USBD_GetConfig>
          break;
 8006cba:	e013      	b.n	8006ce4 <USBD_StdDevReq+0xbc>

        case USB_REQ_GET_STATUS:
          USBD_GetStatus(pdev, req);
 8006cbc:	6839      	ldr	r1, [r7, #0]
 8006cbe:	6878      	ldr	r0, [r7, #4]
 8006cc0:	f000 fc2c 	bl	800751c <USBD_GetStatus>
          break;
 8006cc4:	e00e      	b.n	8006ce4 <USBD_StdDevReq+0xbc>

        case USB_REQ_SET_FEATURE:
          USBD_SetFeature(pdev, req);
 8006cc6:	6839      	ldr	r1, [r7, #0]
 8006cc8:	6878      	ldr	r0, [r7, #4]
 8006cca:	f000 fc5a 	bl	8007582 <USBD_SetFeature>
          break;
 8006cce:	e009      	b.n	8006ce4 <USBD_StdDevReq+0xbc>

        case USB_REQ_CLEAR_FEATURE:
          USBD_ClrFeature(pdev, req);
 8006cd0:	6839      	ldr	r1, [r7, #0]
 8006cd2:	6878      	ldr	r0, [r7, #4]
 8006cd4:	f000 fc69 	bl	80075aa <USBD_ClrFeature>
          break;
 8006cd8:	e004      	b.n	8006ce4 <USBD_StdDevReq+0xbc>

        default:
          USBD_CtlError(pdev, req);
 8006cda:	6839      	ldr	r1, [r7, #0]
 8006cdc:	6878      	ldr	r0, [r7, #4]
 8006cde:	f000 fcc1 	bl	8007664 <USBD_CtlError>
          break;
 8006ce2:	bf00      	nop
      }
      break;
 8006ce4:	e004      	b.n	8006cf0 <USBD_StdDevReq+0xc8>

    default:
      USBD_CtlError(pdev, req);
 8006ce6:	6839      	ldr	r1, [r7, #0]
 8006ce8:	6878      	ldr	r0, [r7, #4]
 8006cea:	f000 fcbb 	bl	8007664 <USBD_CtlError>
      break;
 8006cee:	bf00      	nop
  }

  return ret;
 8006cf0:	7bfb      	ldrb	r3, [r7, #15]
}
 8006cf2:	4618      	mov	r0, r3
 8006cf4:	3710      	adds	r7, #16
 8006cf6:	46bd      	mov	sp, r7
 8006cf8:	bd80      	pop	{r7, pc}
 8006cfa:	bf00      	nop

08006cfc <USBD_StdItfReq>:
* @param  req: usb request
* @retval status
*/
USBD_StatusTypeDef  USBD_StdItfReq(USBD_HandleTypeDef *pdev,
                                   USBD_SetupReqTypedef  *req)
{
 8006cfc:	b580      	push	{r7, lr}
 8006cfe:	b084      	sub	sp, #16
 8006d00:	af00      	add	r7, sp, #0
 8006d02:	6078      	str	r0, [r7, #4]
 8006d04:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 8006d06:	2300      	movs	r3, #0
 8006d08:	73fb      	strb	r3, [r7, #15]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 8006d0a:	683b      	ldr	r3, [r7, #0]
 8006d0c:	781b      	ldrb	r3, [r3, #0]
 8006d0e:	f003 0360 	and.w	r3, r3, #96	; 0x60
 8006d12:	2b20      	cmp	r3, #32
 8006d14:	d003      	beq.n	8006d1e <USBD_StdItfReq+0x22>
 8006d16:	2b40      	cmp	r3, #64	; 0x40
 8006d18:	d001      	beq.n	8006d1e <USBD_StdItfReq+0x22>
 8006d1a:	2b00      	cmp	r3, #0
 8006d1c:	d12a      	bne.n	8006d74 <USBD_StdItfReq+0x78>
  {
    case USB_REQ_TYPE_CLASS:
    case USB_REQ_TYPE_VENDOR:
    case USB_REQ_TYPE_STANDARD:
      switch (pdev->dev_state)
 8006d1e:	687b      	ldr	r3, [r7, #4]
 8006d20:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8006d24:	3b01      	subs	r3, #1
 8006d26:	2b02      	cmp	r3, #2
 8006d28:	d81d      	bhi.n	8006d66 <USBD_StdItfReq+0x6a>
      {
        case USBD_STATE_DEFAULT:
        case USBD_STATE_ADDRESSED:
        case USBD_STATE_CONFIGURED:

          if (LOBYTE(req->wIndex) <= USBD_MAX_NUM_INTERFACES)
 8006d2a:	683b      	ldr	r3, [r7, #0]
 8006d2c:	889b      	ldrh	r3, [r3, #4]
 8006d2e:	b2db      	uxtb	r3, r3
 8006d30:	2b01      	cmp	r3, #1
 8006d32:	d813      	bhi.n	8006d5c <USBD_StdItfReq+0x60>
          {
            ret = (USBD_StatusTypeDef)pdev->pClass->Setup(pdev, req);
 8006d34:	687b      	ldr	r3, [r7, #4]
 8006d36:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8006d3a:	689b      	ldr	r3, [r3, #8]
 8006d3c:	6839      	ldr	r1, [r7, #0]
 8006d3e:	6878      	ldr	r0, [r7, #4]
 8006d40:	4798      	blx	r3
 8006d42:	4603      	mov	r3, r0
 8006d44:	73fb      	strb	r3, [r7, #15]

            if ((req->wLength == 0U) && (ret == USBD_OK))
 8006d46:	683b      	ldr	r3, [r7, #0]
 8006d48:	88db      	ldrh	r3, [r3, #6]
 8006d4a:	2b00      	cmp	r3, #0
 8006d4c:	d110      	bne.n	8006d70 <USBD_StdItfReq+0x74>
 8006d4e:	7bfb      	ldrb	r3, [r7, #15]
 8006d50:	2b00      	cmp	r3, #0
 8006d52:	d10d      	bne.n	8006d70 <USBD_StdItfReq+0x74>
            {
              USBD_CtlSendStatus(pdev);
 8006d54:	6878      	ldr	r0, [r7, #4]
 8006d56:	f000 fd4d 	bl	80077f4 <USBD_CtlSendStatus>
          }
          else
          {
            USBD_CtlError(pdev, req);
          }
          break;
 8006d5a:	e009      	b.n	8006d70 <USBD_StdItfReq+0x74>
            USBD_CtlError(pdev, req);
 8006d5c:	6839      	ldr	r1, [r7, #0]
 8006d5e:	6878      	ldr	r0, [r7, #4]
 8006d60:	f000 fc80 	bl	8007664 <USBD_CtlError>
          break;
 8006d64:	e004      	b.n	8006d70 <USBD_StdItfReq+0x74>

        default:
          USBD_CtlError(pdev, req);
 8006d66:	6839      	ldr	r1, [r7, #0]
 8006d68:	6878      	ldr	r0, [r7, #4]
 8006d6a:	f000 fc7b 	bl	8007664 <USBD_CtlError>
          break;
 8006d6e:	e000      	b.n	8006d72 <USBD_StdItfReq+0x76>
          break;
 8006d70:	bf00      	nop
      }
      break;
 8006d72:	e004      	b.n	8006d7e <USBD_StdItfReq+0x82>

    default:
      USBD_CtlError(pdev, req);
 8006d74:	6839      	ldr	r1, [r7, #0]
 8006d76:	6878      	ldr	r0, [r7, #4]
 8006d78:	f000 fc74 	bl	8007664 <USBD_CtlError>
      break;
 8006d7c:	bf00      	nop
  }

  return USBD_OK;
 8006d7e:	2300      	movs	r3, #0
}
 8006d80:	4618      	mov	r0, r3
 8006d82:	3710      	adds	r7, #16
 8006d84:	46bd      	mov	sp, r7
 8006d86:	bd80      	pop	{r7, pc}

08006d88 <USBD_StdEPReq>:
* @param  req: usb request
* @retval status
*/
USBD_StatusTypeDef  USBD_StdEPReq(USBD_HandleTypeDef *pdev,
                                  USBD_SetupReqTypedef  *req)
{
 8006d88:	b580      	push	{r7, lr}
 8006d8a:	b084      	sub	sp, #16
 8006d8c:	af00      	add	r7, sp, #0
 8006d8e:	6078      	str	r0, [r7, #4]
 8006d90:	6039      	str	r1, [r7, #0]
  USBD_EndpointTypeDef *pep;
  uint8_t   ep_addr;
  USBD_StatusTypeDef ret = USBD_OK;
 8006d92:	2300      	movs	r3, #0
 8006d94:	73fb      	strb	r3, [r7, #15]
  ep_addr  = LOBYTE(req->wIndex);
 8006d96:	683b      	ldr	r3, [r7, #0]
 8006d98:	889b      	ldrh	r3, [r3, #4]
 8006d9a:	73bb      	strb	r3, [r7, #14]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 8006d9c:	683b      	ldr	r3, [r7, #0]
 8006d9e:	781b      	ldrb	r3, [r3, #0]
 8006da0:	f003 0360 	and.w	r3, r3, #96	; 0x60
 8006da4:	2b20      	cmp	r3, #32
 8006da6:	d004      	beq.n	8006db2 <USBD_StdEPReq+0x2a>
 8006da8:	2b40      	cmp	r3, #64	; 0x40
 8006daa:	d002      	beq.n	8006db2 <USBD_StdEPReq+0x2a>
 8006dac:	2b00      	cmp	r3, #0
 8006dae:	d008      	beq.n	8006dc2 <USBD_StdEPReq+0x3a>
 8006db0:	e13d      	b.n	800702e <USBD_StdEPReq+0x2a6>
  {
    case USB_REQ_TYPE_CLASS:
    case USB_REQ_TYPE_VENDOR:
      pdev->pClass->Setup(pdev, req);
 8006db2:	687b      	ldr	r3, [r7, #4]
 8006db4:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8006db8:	689b      	ldr	r3, [r3, #8]
 8006dba:	6839      	ldr	r1, [r7, #0]
 8006dbc:	6878      	ldr	r0, [r7, #4]
 8006dbe:	4798      	blx	r3
      break;
 8006dc0:	e13a      	b.n	8007038 <USBD_StdEPReq+0x2b0>

    case USB_REQ_TYPE_STANDARD:
      /* Check if it is a class request */
      if ((req->bmRequest & 0x60U) == 0x20U)
 8006dc2:	683b      	ldr	r3, [r7, #0]
 8006dc4:	781b      	ldrb	r3, [r3, #0]
 8006dc6:	f003 0360 	and.w	r3, r3, #96	; 0x60
 8006dca:	2b20      	cmp	r3, #32
 8006dcc:	d10a      	bne.n	8006de4 <USBD_StdEPReq+0x5c>
      {
        ret = (USBD_StatusTypeDef)pdev->pClass->Setup(pdev, req);
 8006dce:	687b      	ldr	r3, [r7, #4]
 8006dd0:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8006dd4:	689b      	ldr	r3, [r3, #8]
 8006dd6:	6839      	ldr	r1, [r7, #0]
 8006dd8:	6878      	ldr	r0, [r7, #4]
 8006dda:	4798      	blx	r3
 8006ddc:	4603      	mov	r3, r0
 8006dde:	73fb      	strb	r3, [r7, #15]

        return ret;
 8006de0:	7bfb      	ldrb	r3, [r7, #15]
 8006de2:	e12a      	b.n	800703a <USBD_StdEPReq+0x2b2>
      }

      switch (req->bRequest)
 8006de4:	683b      	ldr	r3, [r7, #0]
 8006de6:	785b      	ldrb	r3, [r3, #1]
 8006de8:	2b01      	cmp	r3, #1
 8006dea:	d03e      	beq.n	8006e6a <USBD_StdEPReq+0xe2>
 8006dec:	2b03      	cmp	r3, #3
 8006dee:	d002      	beq.n	8006df6 <USBD_StdEPReq+0x6e>
 8006df0:	2b00      	cmp	r3, #0
 8006df2:	d070      	beq.n	8006ed6 <USBD_StdEPReq+0x14e>
 8006df4:	e115      	b.n	8007022 <USBD_StdEPReq+0x29a>
      {
        case USB_REQ_SET_FEATURE:
          switch (pdev->dev_state)
 8006df6:	687b      	ldr	r3, [r7, #4]
 8006df8:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8006dfc:	2b02      	cmp	r3, #2
 8006dfe:	d002      	beq.n	8006e06 <USBD_StdEPReq+0x7e>
 8006e00:	2b03      	cmp	r3, #3
 8006e02:	d015      	beq.n	8006e30 <USBD_StdEPReq+0xa8>
 8006e04:	e02b      	b.n	8006e5e <USBD_StdEPReq+0xd6>
          {
            case USBD_STATE_ADDRESSED:
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 8006e06:	7bbb      	ldrb	r3, [r7, #14]
 8006e08:	2b00      	cmp	r3, #0
 8006e0a:	d00c      	beq.n	8006e26 <USBD_StdEPReq+0x9e>
 8006e0c:	7bbb      	ldrb	r3, [r7, #14]
 8006e0e:	2b80      	cmp	r3, #128	; 0x80
 8006e10:	d009      	beq.n	8006e26 <USBD_StdEPReq+0x9e>
              {
                USBD_LL_StallEP(pdev, ep_addr);
 8006e12:	7bbb      	ldrb	r3, [r7, #14]
 8006e14:	4619      	mov	r1, r3
 8006e16:	6878      	ldr	r0, [r7, #4]
 8006e18:	f001 f880 	bl	8007f1c <USBD_LL_StallEP>
                USBD_LL_StallEP(pdev, 0x80U);
 8006e1c:	2180      	movs	r1, #128	; 0x80
 8006e1e:	6878      	ldr	r0, [r7, #4]
 8006e20:	f001 f87c 	bl	8007f1c <USBD_LL_StallEP>
              }
              else
              {
                USBD_CtlError(pdev, req);
              }
              break;
 8006e24:	e020      	b.n	8006e68 <USBD_StdEPReq+0xe0>
                USBD_CtlError(pdev, req);
 8006e26:	6839      	ldr	r1, [r7, #0]
 8006e28:	6878      	ldr	r0, [r7, #4]
 8006e2a:	f000 fc1b 	bl	8007664 <USBD_CtlError>
              break;
 8006e2e:	e01b      	b.n	8006e68 <USBD_StdEPReq+0xe0>

            case USBD_STATE_CONFIGURED:
              if (req->wValue == USB_FEATURE_EP_HALT)
 8006e30:	683b      	ldr	r3, [r7, #0]
 8006e32:	885b      	ldrh	r3, [r3, #2]
 8006e34:	2b00      	cmp	r3, #0
 8006e36:	d10e      	bne.n	8006e56 <USBD_StdEPReq+0xce>
              {
                if ((ep_addr != 0x00U) &&
 8006e38:	7bbb      	ldrb	r3, [r7, #14]
 8006e3a:	2b00      	cmp	r3, #0
 8006e3c:	d00b      	beq.n	8006e56 <USBD_StdEPReq+0xce>
 8006e3e:	7bbb      	ldrb	r3, [r7, #14]
 8006e40:	2b80      	cmp	r3, #128	; 0x80
 8006e42:	d008      	beq.n	8006e56 <USBD_StdEPReq+0xce>
                    (ep_addr != 0x80U) && (req->wLength == 0x00U))
 8006e44:	683b      	ldr	r3, [r7, #0]
 8006e46:	88db      	ldrh	r3, [r3, #6]
 8006e48:	2b00      	cmp	r3, #0
 8006e4a:	d104      	bne.n	8006e56 <USBD_StdEPReq+0xce>
                {
                  USBD_LL_StallEP(pdev, ep_addr);
 8006e4c:	7bbb      	ldrb	r3, [r7, #14]
 8006e4e:	4619      	mov	r1, r3
 8006e50:	6878      	ldr	r0, [r7, #4]
 8006e52:	f001 f863 	bl	8007f1c <USBD_LL_StallEP>
                }
              }
              USBD_CtlSendStatus(pdev);
 8006e56:	6878      	ldr	r0, [r7, #4]
 8006e58:	f000 fccc 	bl	80077f4 <USBD_CtlSendStatus>

              break;
 8006e5c:	e004      	b.n	8006e68 <USBD_StdEPReq+0xe0>

            default:
              USBD_CtlError(pdev, req);
 8006e5e:	6839      	ldr	r1, [r7, #0]
 8006e60:	6878      	ldr	r0, [r7, #4]
 8006e62:	f000 fbff 	bl	8007664 <USBD_CtlError>
              break;
 8006e66:	bf00      	nop
          }
          break;
 8006e68:	e0e0      	b.n	800702c <USBD_StdEPReq+0x2a4>

        case USB_REQ_CLEAR_FEATURE:

          switch (pdev->dev_state)
 8006e6a:	687b      	ldr	r3, [r7, #4]
 8006e6c:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8006e70:	2b02      	cmp	r3, #2
 8006e72:	d002      	beq.n	8006e7a <USBD_StdEPReq+0xf2>
 8006e74:	2b03      	cmp	r3, #3
 8006e76:	d015      	beq.n	8006ea4 <USBD_StdEPReq+0x11c>
 8006e78:	e026      	b.n	8006ec8 <USBD_StdEPReq+0x140>
          {
            case USBD_STATE_ADDRESSED:
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 8006e7a:	7bbb      	ldrb	r3, [r7, #14]
 8006e7c:	2b00      	cmp	r3, #0
 8006e7e:	d00c      	beq.n	8006e9a <USBD_StdEPReq+0x112>
 8006e80:	7bbb      	ldrb	r3, [r7, #14]
 8006e82:	2b80      	cmp	r3, #128	; 0x80
 8006e84:	d009      	beq.n	8006e9a <USBD_StdEPReq+0x112>
              {
                USBD_LL_StallEP(pdev, ep_addr);
 8006e86:	7bbb      	ldrb	r3, [r7, #14]
 8006e88:	4619      	mov	r1, r3
 8006e8a:	6878      	ldr	r0, [r7, #4]
 8006e8c:	f001 f846 	bl	8007f1c <USBD_LL_StallEP>
                USBD_LL_StallEP(pdev, 0x80U);
 8006e90:	2180      	movs	r1, #128	; 0x80
 8006e92:	6878      	ldr	r0, [r7, #4]
 8006e94:	f001 f842 	bl	8007f1c <USBD_LL_StallEP>
              }
              else
              {
                USBD_CtlError(pdev, req);
              }
              break;
 8006e98:	e01c      	b.n	8006ed4 <USBD_StdEPReq+0x14c>
                USBD_CtlError(pdev, req);
 8006e9a:	6839      	ldr	r1, [r7, #0]
 8006e9c:	6878      	ldr	r0, [r7, #4]
 8006e9e:	f000 fbe1 	bl	8007664 <USBD_CtlError>
              break;
 8006ea2:	e017      	b.n	8006ed4 <USBD_StdEPReq+0x14c>

            case USBD_STATE_CONFIGURED:
              if (req->wValue == USB_FEATURE_EP_HALT)
 8006ea4:	683b      	ldr	r3, [r7, #0]
 8006ea6:	885b      	ldrh	r3, [r3, #2]
 8006ea8:	2b00      	cmp	r3, #0
 8006eaa:	d112      	bne.n	8006ed2 <USBD_StdEPReq+0x14a>
              {
                if ((ep_addr & 0x7FU) != 0x00U)
 8006eac:	7bbb      	ldrb	r3, [r7, #14]
 8006eae:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8006eb2:	2b00      	cmp	r3, #0
 8006eb4:	d004      	beq.n	8006ec0 <USBD_StdEPReq+0x138>
                {
                  USBD_LL_ClearStallEP(pdev, ep_addr);
 8006eb6:	7bbb      	ldrb	r3, [r7, #14]
 8006eb8:	4619      	mov	r1, r3
 8006eba:	6878      	ldr	r0, [r7, #4]
 8006ebc:	f001 f84d 	bl	8007f5a <USBD_LL_ClearStallEP>
                }
                USBD_CtlSendStatus(pdev);
 8006ec0:	6878      	ldr	r0, [r7, #4]
 8006ec2:	f000 fc97 	bl	80077f4 <USBD_CtlSendStatus>
              }
              break;
 8006ec6:	e004      	b.n	8006ed2 <USBD_StdEPReq+0x14a>

            default:
              USBD_CtlError(pdev, req);
 8006ec8:	6839      	ldr	r1, [r7, #0]
 8006eca:	6878      	ldr	r0, [r7, #4]
 8006ecc:	f000 fbca 	bl	8007664 <USBD_CtlError>
              break;
 8006ed0:	e000      	b.n	8006ed4 <USBD_StdEPReq+0x14c>
              break;
 8006ed2:	bf00      	nop
          }
          break;
 8006ed4:	e0aa      	b.n	800702c <USBD_StdEPReq+0x2a4>

        case USB_REQ_GET_STATUS:
          switch (pdev->dev_state)
 8006ed6:	687b      	ldr	r3, [r7, #4]
 8006ed8:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8006edc:	2b02      	cmp	r3, #2
 8006ede:	d002      	beq.n	8006ee6 <USBD_StdEPReq+0x15e>
 8006ee0:	2b03      	cmp	r3, #3
 8006ee2:	d032      	beq.n	8006f4a <USBD_StdEPReq+0x1c2>
 8006ee4:	e097      	b.n	8007016 <USBD_StdEPReq+0x28e>
          {
            case USBD_STATE_ADDRESSED:
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 8006ee6:	7bbb      	ldrb	r3, [r7, #14]
 8006ee8:	2b00      	cmp	r3, #0
 8006eea:	d007      	beq.n	8006efc <USBD_StdEPReq+0x174>
 8006eec:	7bbb      	ldrb	r3, [r7, #14]
 8006eee:	2b80      	cmp	r3, #128	; 0x80
 8006ef0:	d004      	beq.n	8006efc <USBD_StdEPReq+0x174>
              {
                USBD_CtlError(pdev, req);
 8006ef2:	6839      	ldr	r1, [r7, #0]
 8006ef4:	6878      	ldr	r0, [r7, #4]
 8006ef6:	f000 fbb5 	bl	8007664 <USBD_CtlError>
                break;
 8006efa:	e091      	b.n	8007020 <USBD_StdEPReq+0x298>
              }
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 8006efc:	f997 300e 	ldrsb.w	r3, [r7, #14]
 8006f00:	2b00      	cmp	r3, #0
 8006f02:	da0b      	bge.n	8006f1c <USBD_StdEPReq+0x194>
 8006f04:	7bbb      	ldrb	r3, [r7, #14]
 8006f06:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 8006f0a:	4613      	mov	r3, r2
 8006f0c:	009b      	lsls	r3, r3, #2
 8006f0e:	4413      	add	r3, r2
 8006f10:	009b      	lsls	r3, r3, #2
 8006f12:	3310      	adds	r3, #16
 8006f14:	687a      	ldr	r2, [r7, #4]
 8006f16:	4413      	add	r3, r2
 8006f18:	3304      	adds	r3, #4
 8006f1a:	e00b      	b.n	8006f34 <USBD_StdEPReq+0x1ac>
                    &pdev->ep_out[ep_addr & 0x7FU];
 8006f1c:	7bbb      	ldrb	r3, [r7, #14]
 8006f1e:	f003 027f 	and.w	r2, r3, #127	; 0x7f
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 8006f22:	4613      	mov	r3, r2
 8006f24:	009b      	lsls	r3, r3, #2
 8006f26:	4413      	add	r3, r2
 8006f28:	009b      	lsls	r3, r3, #2
 8006f2a:	f503 73a8 	add.w	r3, r3, #336	; 0x150
 8006f2e:	687a      	ldr	r2, [r7, #4]
 8006f30:	4413      	add	r3, r2
 8006f32:	3304      	adds	r3, #4
 8006f34:	60bb      	str	r3, [r7, #8]

              pep->status = 0x0000U;
 8006f36:	68bb      	ldr	r3, [r7, #8]
 8006f38:	2200      	movs	r2, #0
 8006f3a:	601a      	str	r2, [r3, #0]

              USBD_CtlSendData(pdev, (uint8_t *)(void *)&pep->status, 2U);
 8006f3c:	68bb      	ldr	r3, [r7, #8]
 8006f3e:	2202      	movs	r2, #2
 8006f40:	4619      	mov	r1, r3
 8006f42:	6878      	ldr	r0, [r7, #4]
 8006f44:	f000 fbf8 	bl	8007738 <USBD_CtlSendData>
              break;
 8006f48:	e06a      	b.n	8007020 <USBD_StdEPReq+0x298>

            case USBD_STATE_CONFIGURED:
              if ((ep_addr & 0x80U) == 0x80U)
 8006f4a:	f997 300e 	ldrsb.w	r3, [r7, #14]
 8006f4e:	2b00      	cmp	r3, #0
 8006f50:	da11      	bge.n	8006f76 <USBD_StdEPReq+0x1ee>
              {
                if (pdev->ep_in[ep_addr & 0xFU].is_used == 0U)
 8006f52:	7bbb      	ldrb	r3, [r7, #14]
 8006f54:	f003 020f 	and.w	r2, r3, #15
 8006f58:	6879      	ldr	r1, [r7, #4]
 8006f5a:	4613      	mov	r3, r2
 8006f5c:	009b      	lsls	r3, r3, #2
 8006f5e:	4413      	add	r3, r2
 8006f60:	009b      	lsls	r3, r3, #2
 8006f62:	440b      	add	r3, r1
 8006f64:	3318      	adds	r3, #24
 8006f66:	681b      	ldr	r3, [r3, #0]
 8006f68:	2b00      	cmp	r3, #0
 8006f6a:	d117      	bne.n	8006f9c <USBD_StdEPReq+0x214>
                {
                  USBD_CtlError(pdev, req);
 8006f6c:	6839      	ldr	r1, [r7, #0]
 8006f6e:	6878      	ldr	r0, [r7, #4]
 8006f70:	f000 fb78 	bl	8007664 <USBD_CtlError>
                  break;
 8006f74:	e054      	b.n	8007020 <USBD_StdEPReq+0x298>
                }
              }
              else
              {
                if (pdev->ep_out[ep_addr & 0xFU].is_used == 0U)
 8006f76:	7bbb      	ldrb	r3, [r7, #14]
 8006f78:	f003 020f 	and.w	r2, r3, #15
 8006f7c:	6879      	ldr	r1, [r7, #4]
 8006f7e:	4613      	mov	r3, r2
 8006f80:	009b      	lsls	r3, r3, #2
 8006f82:	4413      	add	r3, r2
 8006f84:	009b      	lsls	r3, r3, #2
 8006f86:	440b      	add	r3, r1
 8006f88:	f503 73ac 	add.w	r3, r3, #344	; 0x158
 8006f8c:	681b      	ldr	r3, [r3, #0]
 8006f8e:	2b00      	cmp	r3, #0
 8006f90:	d104      	bne.n	8006f9c <USBD_StdEPReq+0x214>
                {
                  USBD_CtlError(pdev, req);
 8006f92:	6839      	ldr	r1, [r7, #0]
 8006f94:	6878      	ldr	r0, [r7, #4]
 8006f96:	f000 fb65 	bl	8007664 <USBD_CtlError>
                  break;
 8006f9a:	e041      	b.n	8007020 <USBD_StdEPReq+0x298>
                }
              }

              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 8006f9c:	f997 300e 	ldrsb.w	r3, [r7, #14]
 8006fa0:	2b00      	cmp	r3, #0
 8006fa2:	da0b      	bge.n	8006fbc <USBD_StdEPReq+0x234>
 8006fa4:	7bbb      	ldrb	r3, [r7, #14]
 8006fa6:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 8006faa:	4613      	mov	r3, r2
 8006fac:	009b      	lsls	r3, r3, #2
 8006fae:	4413      	add	r3, r2
 8006fb0:	009b      	lsls	r3, r3, #2
 8006fb2:	3310      	adds	r3, #16
 8006fb4:	687a      	ldr	r2, [r7, #4]
 8006fb6:	4413      	add	r3, r2
 8006fb8:	3304      	adds	r3, #4
 8006fba:	e00b      	b.n	8006fd4 <USBD_StdEPReq+0x24c>
                    &pdev->ep_out[ep_addr & 0x7FU];
 8006fbc:	7bbb      	ldrb	r3, [r7, #14]
 8006fbe:	f003 027f 	and.w	r2, r3, #127	; 0x7f
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 8006fc2:	4613      	mov	r3, r2
 8006fc4:	009b      	lsls	r3, r3, #2
 8006fc6:	4413      	add	r3, r2
 8006fc8:	009b      	lsls	r3, r3, #2
 8006fca:	f503 73a8 	add.w	r3, r3, #336	; 0x150
 8006fce:	687a      	ldr	r2, [r7, #4]
 8006fd0:	4413      	add	r3, r2
 8006fd2:	3304      	adds	r3, #4
 8006fd4:	60bb      	str	r3, [r7, #8]

              if ((ep_addr == 0x00U) || (ep_addr == 0x80U))
 8006fd6:	7bbb      	ldrb	r3, [r7, #14]
 8006fd8:	2b00      	cmp	r3, #0
 8006fda:	d002      	beq.n	8006fe2 <USBD_StdEPReq+0x25a>
 8006fdc:	7bbb      	ldrb	r3, [r7, #14]
 8006fde:	2b80      	cmp	r3, #128	; 0x80
 8006fe0:	d103      	bne.n	8006fea <USBD_StdEPReq+0x262>
              {
                pep->status = 0x0000U;
 8006fe2:	68bb      	ldr	r3, [r7, #8]
 8006fe4:	2200      	movs	r2, #0
 8006fe6:	601a      	str	r2, [r3, #0]
 8006fe8:	e00e      	b.n	8007008 <USBD_StdEPReq+0x280>
              }
              else if (USBD_LL_IsStallEP(pdev, ep_addr))
 8006fea:	7bbb      	ldrb	r3, [r7, #14]
 8006fec:	4619      	mov	r1, r3
 8006fee:	6878      	ldr	r0, [r7, #4]
 8006ff0:	f000 ffd2 	bl	8007f98 <USBD_LL_IsStallEP>
 8006ff4:	4603      	mov	r3, r0
 8006ff6:	2b00      	cmp	r3, #0
 8006ff8:	d003      	beq.n	8007002 <USBD_StdEPReq+0x27a>
              {
                pep->status = 0x0001U;
 8006ffa:	68bb      	ldr	r3, [r7, #8]
 8006ffc:	2201      	movs	r2, #1
 8006ffe:	601a      	str	r2, [r3, #0]
 8007000:	e002      	b.n	8007008 <USBD_StdEPReq+0x280>
              }
              else
              {
                pep->status = 0x0000U;
 8007002:	68bb      	ldr	r3, [r7, #8]
 8007004:	2200      	movs	r2, #0
 8007006:	601a      	str	r2, [r3, #0]
              }

              USBD_CtlSendData(pdev, (uint8_t *)(void *)&pep->status, 2U);
 8007008:	68bb      	ldr	r3, [r7, #8]
 800700a:	2202      	movs	r2, #2
 800700c:	4619      	mov	r1, r3
 800700e:	6878      	ldr	r0, [r7, #4]
 8007010:	f000 fb92 	bl	8007738 <USBD_CtlSendData>
              break;
 8007014:	e004      	b.n	8007020 <USBD_StdEPReq+0x298>

            default:
              USBD_CtlError(pdev, req);
 8007016:	6839      	ldr	r1, [r7, #0]
 8007018:	6878      	ldr	r0, [r7, #4]
 800701a:	f000 fb23 	bl	8007664 <USBD_CtlError>
              break;
 800701e:	bf00      	nop
          }
          break;
 8007020:	e004      	b.n	800702c <USBD_StdEPReq+0x2a4>

        default:
          USBD_CtlError(pdev, req);
 8007022:	6839      	ldr	r1, [r7, #0]
 8007024:	6878      	ldr	r0, [r7, #4]
 8007026:	f000 fb1d 	bl	8007664 <USBD_CtlError>
          break;
 800702a:	bf00      	nop
      }
      break;
 800702c:	e004      	b.n	8007038 <USBD_StdEPReq+0x2b0>

    default:
      USBD_CtlError(pdev, req);
 800702e:	6839      	ldr	r1, [r7, #0]
 8007030:	6878      	ldr	r0, [r7, #4]
 8007032:	f000 fb17 	bl	8007664 <USBD_CtlError>
      break;
 8007036:	bf00      	nop
  }

  return ret;
 8007038:	7bfb      	ldrb	r3, [r7, #15]
}
 800703a:	4618      	mov	r0, r3
 800703c:	3710      	adds	r7, #16
 800703e:	46bd      	mov	sp, r7
 8007040:	bd80      	pop	{r7, pc}
	...

08007044 <USBD_GetDescriptor>:
* @param  req: usb request
* @retval status
*/
static void USBD_GetDescriptor(USBD_HandleTypeDef *pdev,
                               USBD_SetupReqTypedef *req)
{
 8007044:	b580      	push	{r7, lr}
 8007046:	b084      	sub	sp, #16
 8007048:	af00      	add	r7, sp, #0
 800704a:	6078      	str	r0, [r7, #4]
 800704c:	6039      	str	r1, [r7, #0]
  uint16_t len = 0U;
 800704e:	2300      	movs	r3, #0
 8007050:	813b      	strh	r3, [r7, #8]
  uint8_t *pbuf = NULL;
 8007052:	2300      	movs	r3, #0
 8007054:	60fb      	str	r3, [r7, #12]
  uint8_t err = 0U;
 8007056:	2300      	movs	r3, #0
 8007058:	72fb      	strb	r3, [r7, #11]

  switch (req->wValue >> 8)
 800705a:	683b      	ldr	r3, [r7, #0]
 800705c:	885b      	ldrh	r3, [r3, #2]
 800705e:	0a1b      	lsrs	r3, r3, #8
 8007060:	b29b      	uxth	r3, r3
 8007062:	3b01      	subs	r3, #1
 8007064:	2b06      	cmp	r3, #6
 8007066:	f200 8128 	bhi.w	80072ba <USBD_GetDescriptor+0x276>
 800706a:	a201      	add	r2, pc, #4	; (adr r2, 8007070 <USBD_GetDescriptor+0x2c>)
 800706c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007070:	0800708d 	.word	0x0800708d
 8007074:	080070a5 	.word	0x080070a5
 8007078:	080070e5 	.word	0x080070e5
 800707c:	080072bb 	.word	0x080072bb
 8007080:	080072bb 	.word	0x080072bb
 8007084:	0800725b 	.word	0x0800725b
 8007088:	08007287 	.word	0x08007287
        err++;
      }
      break;
#endif
    case USB_DESC_TYPE_DEVICE:
      pbuf = pdev->pDesc->GetDeviceDescriptor(pdev->dev_speed, &len);
 800708c:	687b      	ldr	r3, [r7, #4]
 800708e:	f8d3 32b0 	ldr.w	r3, [r3, #688]	; 0x2b0
 8007092:	681b      	ldr	r3, [r3, #0]
 8007094:	687a      	ldr	r2, [r7, #4]
 8007096:	7c12      	ldrb	r2, [r2, #16]
 8007098:	f107 0108 	add.w	r1, r7, #8
 800709c:	4610      	mov	r0, r2
 800709e:	4798      	blx	r3
 80070a0:	60f8      	str	r0, [r7, #12]
      break;
 80070a2:	e112      	b.n	80072ca <USBD_GetDescriptor+0x286>

    case USB_DESC_TYPE_CONFIGURATION:
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 80070a4:	687b      	ldr	r3, [r7, #4]
 80070a6:	7c1b      	ldrb	r3, [r3, #16]
 80070a8:	2b00      	cmp	r3, #0
 80070aa:	d10d      	bne.n	80070c8 <USBD_GetDescriptor+0x84>
      {
        pbuf = pdev->pClass->GetHSConfigDescriptor(&len);
 80070ac:	687b      	ldr	r3, [r7, #4]
 80070ae:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 80070b2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80070b4:	f107 0208 	add.w	r2, r7, #8
 80070b8:	4610      	mov	r0, r2
 80070ba:	4798      	blx	r3
 80070bc:	60f8      	str	r0, [r7, #12]
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
 80070be:	68fb      	ldr	r3, [r7, #12]
 80070c0:	3301      	adds	r3, #1
 80070c2:	2202      	movs	r2, #2
 80070c4:	701a      	strb	r2, [r3, #0]
      else
      {
        pbuf = pdev->pClass->GetFSConfigDescriptor(&len);
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
      }
      break;
 80070c6:	e100      	b.n	80072ca <USBD_GetDescriptor+0x286>
        pbuf = pdev->pClass->GetFSConfigDescriptor(&len);
 80070c8:	687b      	ldr	r3, [r7, #4]
 80070ca:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 80070ce:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80070d0:	f107 0208 	add.w	r2, r7, #8
 80070d4:	4610      	mov	r0, r2
 80070d6:	4798      	blx	r3
 80070d8:	60f8      	str	r0, [r7, #12]
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
 80070da:	68fb      	ldr	r3, [r7, #12]
 80070dc:	3301      	adds	r3, #1
 80070de:	2202      	movs	r2, #2
 80070e0:	701a      	strb	r2, [r3, #0]
      break;
 80070e2:	e0f2      	b.n	80072ca <USBD_GetDescriptor+0x286>

    case USB_DESC_TYPE_STRING:
      switch ((uint8_t)(req->wValue))
 80070e4:	683b      	ldr	r3, [r7, #0]
 80070e6:	885b      	ldrh	r3, [r3, #2]
 80070e8:	b2db      	uxtb	r3, r3
 80070ea:	2b05      	cmp	r3, #5
 80070ec:	f200 80ac 	bhi.w	8007248 <USBD_GetDescriptor+0x204>
 80070f0:	a201      	add	r2, pc, #4	; (adr r2, 80070f8 <USBD_GetDescriptor+0xb4>)
 80070f2:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80070f6:	bf00      	nop
 80070f8:	08007111 	.word	0x08007111
 80070fc:	08007145 	.word	0x08007145
 8007100:	08007179 	.word	0x08007179
 8007104:	080071ad 	.word	0x080071ad
 8007108:	080071e1 	.word	0x080071e1
 800710c:	08007215 	.word	0x08007215
      {
        case USBD_IDX_LANGID_STR:
          if (pdev->pDesc->GetLangIDStrDescriptor != NULL)
 8007110:	687b      	ldr	r3, [r7, #4]
 8007112:	f8d3 32b0 	ldr.w	r3, [r3, #688]	; 0x2b0
 8007116:	685b      	ldr	r3, [r3, #4]
 8007118:	2b00      	cmp	r3, #0
 800711a:	d00b      	beq.n	8007134 <USBD_GetDescriptor+0xf0>
          {
            pbuf = pdev->pDesc->GetLangIDStrDescriptor(pdev->dev_speed, &len);
 800711c:	687b      	ldr	r3, [r7, #4]
 800711e:	f8d3 32b0 	ldr.w	r3, [r3, #688]	; 0x2b0
 8007122:	685b      	ldr	r3, [r3, #4]
 8007124:	687a      	ldr	r2, [r7, #4]
 8007126:	7c12      	ldrb	r2, [r2, #16]
 8007128:	f107 0108 	add.w	r1, r7, #8
 800712c:	4610      	mov	r0, r2
 800712e:	4798      	blx	r3
 8007130:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 8007132:	e091      	b.n	8007258 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 8007134:	6839      	ldr	r1, [r7, #0]
 8007136:	6878      	ldr	r0, [r7, #4]
 8007138:	f000 fa94 	bl	8007664 <USBD_CtlError>
            err++;
 800713c:	7afb      	ldrb	r3, [r7, #11]
 800713e:	3301      	adds	r3, #1
 8007140:	72fb      	strb	r3, [r7, #11]
          break;
 8007142:	e089      	b.n	8007258 <USBD_GetDescriptor+0x214>

        case USBD_IDX_MFC_STR:
          if (pdev->pDesc->GetManufacturerStrDescriptor != NULL)
 8007144:	687b      	ldr	r3, [r7, #4]
 8007146:	f8d3 32b0 	ldr.w	r3, [r3, #688]	; 0x2b0
 800714a:	689b      	ldr	r3, [r3, #8]
 800714c:	2b00      	cmp	r3, #0
 800714e:	d00b      	beq.n	8007168 <USBD_GetDescriptor+0x124>
          {
            pbuf = pdev->pDesc->GetManufacturerStrDescriptor(pdev->dev_speed, &len);
 8007150:	687b      	ldr	r3, [r7, #4]
 8007152:	f8d3 32b0 	ldr.w	r3, [r3, #688]	; 0x2b0
 8007156:	689b      	ldr	r3, [r3, #8]
 8007158:	687a      	ldr	r2, [r7, #4]
 800715a:	7c12      	ldrb	r2, [r2, #16]
 800715c:	f107 0108 	add.w	r1, r7, #8
 8007160:	4610      	mov	r0, r2
 8007162:	4798      	blx	r3
 8007164:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 8007166:	e077      	b.n	8007258 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 8007168:	6839      	ldr	r1, [r7, #0]
 800716a:	6878      	ldr	r0, [r7, #4]
 800716c:	f000 fa7a 	bl	8007664 <USBD_CtlError>
            err++;
 8007170:	7afb      	ldrb	r3, [r7, #11]
 8007172:	3301      	adds	r3, #1
 8007174:	72fb      	strb	r3, [r7, #11]
          break;
 8007176:	e06f      	b.n	8007258 <USBD_GetDescriptor+0x214>

        case USBD_IDX_PRODUCT_STR:
          if (pdev->pDesc->GetProductStrDescriptor != NULL)
 8007178:	687b      	ldr	r3, [r7, #4]
 800717a:	f8d3 32b0 	ldr.w	r3, [r3, #688]	; 0x2b0
 800717e:	68db      	ldr	r3, [r3, #12]
 8007180:	2b00      	cmp	r3, #0
 8007182:	d00b      	beq.n	800719c <USBD_GetDescriptor+0x158>
          {
            pbuf = pdev->pDesc->GetProductStrDescriptor(pdev->dev_speed, &len);
 8007184:	687b      	ldr	r3, [r7, #4]
 8007186:	f8d3 32b0 	ldr.w	r3, [r3, #688]	; 0x2b0
 800718a:	68db      	ldr	r3, [r3, #12]
 800718c:	687a      	ldr	r2, [r7, #4]
 800718e:	7c12      	ldrb	r2, [r2, #16]
 8007190:	f107 0108 	add.w	r1, r7, #8
 8007194:	4610      	mov	r0, r2
 8007196:	4798      	blx	r3
 8007198:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 800719a:	e05d      	b.n	8007258 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 800719c:	6839      	ldr	r1, [r7, #0]
 800719e:	6878      	ldr	r0, [r7, #4]
 80071a0:	f000 fa60 	bl	8007664 <USBD_CtlError>
            err++;
 80071a4:	7afb      	ldrb	r3, [r7, #11]
 80071a6:	3301      	adds	r3, #1
 80071a8:	72fb      	strb	r3, [r7, #11]
          break;
 80071aa:	e055      	b.n	8007258 <USBD_GetDescriptor+0x214>

        case USBD_IDX_SERIAL_STR:
          if (pdev->pDesc->GetSerialStrDescriptor != NULL)
 80071ac:	687b      	ldr	r3, [r7, #4]
 80071ae:	f8d3 32b0 	ldr.w	r3, [r3, #688]	; 0x2b0
 80071b2:	691b      	ldr	r3, [r3, #16]
 80071b4:	2b00      	cmp	r3, #0
 80071b6:	d00b      	beq.n	80071d0 <USBD_GetDescriptor+0x18c>
          {
            pbuf = pdev->pDesc->GetSerialStrDescriptor(pdev->dev_speed, &len);
 80071b8:	687b      	ldr	r3, [r7, #4]
 80071ba:	f8d3 32b0 	ldr.w	r3, [r3, #688]	; 0x2b0
 80071be:	691b      	ldr	r3, [r3, #16]
 80071c0:	687a      	ldr	r2, [r7, #4]
 80071c2:	7c12      	ldrb	r2, [r2, #16]
 80071c4:	f107 0108 	add.w	r1, r7, #8
 80071c8:	4610      	mov	r0, r2
 80071ca:	4798      	blx	r3
 80071cc:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 80071ce:	e043      	b.n	8007258 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 80071d0:	6839      	ldr	r1, [r7, #0]
 80071d2:	6878      	ldr	r0, [r7, #4]
 80071d4:	f000 fa46 	bl	8007664 <USBD_CtlError>
            err++;
 80071d8:	7afb      	ldrb	r3, [r7, #11]
 80071da:	3301      	adds	r3, #1
 80071dc:	72fb      	strb	r3, [r7, #11]
          break;
 80071de:	e03b      	b.n	8007258 <USBD_GetDescriptor+0x214>

        case USBD_IDX_CONFIG_STR:
          if (pdev->pDesc->GetConfigurationStrDescriptor != NULL)
 80071e0:	687b      	ldr	r3, [r7, #4]
 80071e2:	f8d3 32b0 	ldr.w	r3, [r3, #688]	; 0x2b0
 80071e6:	695b      	ldr	r3, [r3, #20]
 80071e8:	2b00      	cmp	r3, #0
 80071ea:	d00b      	beq.n	8007204 <USBD_GetDescriptor+0x1c0>
          {
            pbuf = pdev->pDesc->GetConfigurationStrDescriptor(pdev->dev_speed, &len);
 80071ec:	687b      	ldr	r3, [r7, #4]
 80071ee:	f8d3 32b0 	ldr.w	r3, [r3, #688]	; 0x2b0
 80071f2:	695b      	ldr	r3, [r3, #20]
 80071f4:	687a      	ldr	r2, [r7, #4]
 80071f6:	7c12      	ldrb	r2, [r2, #16]
 80071f8:	f107 0108 	add.w	r1, r7, #8
 80071fc:	4610      	mov	r0, r2
 80071fe:	4798      	blx	r3
 8007200:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 8007202:	e029      	b.n	8007258 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 8007204:	6839      	ldr	r1, [r7, #0]
 8007206:	6878      	ldr	r0, [r7, #4]
 8007208:	f000 fa2c 	bl	8007664 <USBD_CtlError>
            err++;
 800720c:	7afb      	ldrb	r3, [r7, #11]
 800720e:	3301      	adds	r3, #1
 8007210:	72fb      	strb	r3, [r7, #11]
          break;
 8007212:	e021      	b.n	8007258 <USBD_GetDescriptor+0x214>

        case USBD_IDX_INTERFACE_STR:
          if (pdev->pDesc->GetInterfaceStrDescriptor != NULL)
 8007214:	687b      	ldr	r3, [r7, #4]
 8007216:	f8d3 32b0 	ldr.w	r3, [r3, #688]	; 0x2b0
 800721a:	699b      	ldr	r3, [r3, #24]
 800721c:	2b00      	cmp	r3, #0
 800721e:	d00b      	beq.n	8007238 <USBD_GetDescriptor+0x1f4>
          {
            pbuf = pdev->pDesc->GetInterfaceStrDescriptor(pdev->dev_speed, &len);
 8007220:	687b      	ldr	r3, [r7, #4]
 8007222:	f8d3 32b0 	ldr.w	r3, [r3, #688]	; 0x2b0
 8007226:	699b      	ldr	r3, [r3, #24]
 8007228:	687a      	ldr	r2, [r7, #4]
 800722a:	7c12      	ldrb	r2, [r2, #16]
 800722c:	f107 0108 	add.w	r1, r7, #8
 8007230:	4610      	mov	r0, r2
 8007232:	4798      	blx	r3
 8007234:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 8007236:	e00f      	b.n	8007258 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 8007238:	6839      	ldr	r1, [r7, #0]
 800723a:	6878      	ldr	r0, [r7, #4]
 800723c:	f000 fa12 	bl	8007664 <USBD_CtlError>
            err++;
 8007240:	7afb      	ldrb	r3, [r7, #11]
 8007242:	3301      	adds	r3, #1
 8007244:	72fb      	strb	r3, [r7, #11]
          break;
 8007246:	e007      	b.n	8007258 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
#else
          USBD_CtlError(pdev, req);
 8007248:	6839      	ldr	r1, [r7, #0]
 800724a:	6878      	ldr	r0, [r7, #4]
 800724c:	f000 fa0a 	bl	8007664 <USBD_CtlError>
          err++;
 8007250:	7afb      	ldrb	r3, [r7, #11]
 8007252:	3301      	adds	r3, #1
 8007254:	72fb      	strb	r3, [r7, #11]
#endif
      }
      break;
 8007256:	e038      	b.n	80072ca <USBD_GetDescriptor+0x286>
 8007258:	e037      	b.n	80072ca <USBD_GetDescriptor+0x286>

    case USB_DESC_TYPE_DEVICE_QUALIFIER:
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 800725a:	687b      	ldr	r3, [r7, #4]
 800725c:	7c1b      	ldrb	r3, [r3, #16]
 800725e:	2b00      	cmp	r3, #0
 8007260:	d109      	bne.n	8007276 <USBD_GetDescriptor+0x232>
      {
        pbuf = pdev->pClass->GetDeviceQualifierDescriptor(&len);
 8007262:	687b      	ldr	r3, [r7, #4]
 8007264:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8007268:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800726a:	f107 0208 	add.w	r2, r7, #8
 800726e:	4610      	mov	r0, r2
 8007270:	4798      	blx	r3
 8007272:	60f8      	str	r0, [r7, #12]
      else
      {
        USBD_CtlError(pdev, req);
        err++;
      }
      break;
 8007274:	e029      	b.n	80072ca <USBD_GetDescriptor+0x286>
        USBD_CtlError(pdev, req);
 8007276:	6839      	ldr	r1, [r7, #0]
 8007278:	6878      	ldr	r0, [r7, #4]
 800727a:	f000 f9f3 	bl	8007664 <USBD_CtlError>
        err++;
 800727e:	7afb      	ldrb	r3, [r7, #11]
 8007280:	3301      	adds	r3, #1
 8007282:	72fb      	strb	r3, [r7, #11]
      break;
 8007284:	e021      	b.n	80072ca <USBD_GetDescriptor+0x286>

    case USB_DESC_TYPE_OTHER_SPEED_CONFIGURATION:
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 8007286:	687b      	ldr	r3, [r7, #4]
 8007288:	7c1b      	ldrb	r3, [r3, #16]
 800728a:	2b00      	cmp	r3, #0
 800728c:	d10d      	bne.n	80072aa <USBD_GetDescriptor+0x266>
      {
        pbuf = pdev->pClass->GetOtherSpeedConfigDescriptor(&len);
 800728e:	687b      	ldr	r3, [r7, #4]
 8007290:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8007294:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8007296:	f107 0208 	add.w	r2, r7, #8
 800729a:	4610      	mov	r0, r2
 800729c:	4798      	blx	r3
 800729e:	60f8      	str	r0, [r7, #12]
        pbuf[1] = USB_DESC_TYPE_OTHER_SPEED_CONFIGURATION;
 80072a0:	68fb      	ldr	r3, [r7, #12]
 80072a2:	3301      	adds	r3, #1
 80072a4:	2207      	movs	r2, #7
 80072a6:	701a      	strb	r2, [r3, #0]
      else
      {
        USBD_CtlError(pdev, req);
        err++;
      }
      break;
 80072a8:	e00f      	b.n	80072ca <USBD_GetDescriptor+0x286>
        USBD_CtlError(pdev, req);
 80072aa:	6839      	ldr	r1, [r7, #0]
 80072ac:	6878      	ldr	r0, [r7, #4]
 80072ae:	f000 f9d9 	bl	8007664 <USBD_CtlError>
        err++;
 80072b2:	7afb      	ldrb	r3, [r7, #11]
 80072b4:	3301      	adds	r3, #1
 80072b6:	72fb      	strb	r3, [r7, #11]
      break;
 80072b8:	e007      	b.n	80072ca <USBD_GetDescriptor+0x286>

    default:
      USBD_CtlError(pdev, req);
 80072ba:	6839      	ldr	r1, [r7, #0]
 80072bc:	6878      	ldr	r0, [r7, #4]
 80072be:	f000 f9d1 	bl	8007664 <USBD_CtlError>
      err++;
 80072c2:	7afb      	ldrb	r3, [r7, #11]
 80072c4:	3301      	adds	r3, #1
 80072c6:	72fb      	strb	r3, [r7, #11]
      break;
 80072c8:	bf00      	nop
  }

  if (err != 0U)
 80072ca:	7afb      	ldrb	r3, [r7, #11]
 80072cc:	2b00      	cmp	r3, #0
 80072ce:	d11c      	bne.n	800730a <USBD_GetDescriptor+0x2c6>
  {
    return;
  }
  else
  {
    if ((len != 0U) && (req->wLength != 0U))
 80072d0:	893b      	ldrh	r3, [r7, #8]
 80072d2:	2b00      	cmp	r3, #0
 80072d4:	d011      	beq.n	80072fa <USBD_GetDescriptor+0x2b6>
 80072d6:	683b      	ldr	r3, [r7, #0]
 80072d8:	88db      	ldrh	r3, [r3, #6]
 80072da:	2b00      	cmp	r3, #0
 80072dc:	d00d      	beq.n	80072fa <USBD_GetDescriptor+0x2b6>
    {
      len = MIN(len, req->wLength);
 80072de:	683b      	ldr	r3, [r7, #0]
 80072e0:	88da      	ldrh	r2, [r3, #6]
 80072e2:	893b      	ldrh	r3, [r7, #8]
 80072e4:	4293      	cmp	r3, r2
 80072e6:	bf28      	it	cs
 80072e8:	4613      	movcs	r3, r2
 80072ea:	b29b      	uxth	r3, r3
 80072ec:	813b      	strh	r3, [r7, #8]
      (void)USBD_CtlSendData(pdev, pbuf, len);
 80072ee:	893b      	ldrh	r3, [r7, #8]
 80072f0:	461a      	mov	r2, r3
 80072f2:	68f9      	ldr	r1, [r7, #12]
 80072f4:	6878      	ldr	r0, [r7, #4]
 80072f6:	f000 fa1f 	bl	8007738 <USBD_CtlSendData>
    }

    if (req->wLength == 0U)
 80072fa:	683b      	ldr	r3, [r7, #0]
 80072fc:	88db      	ldrh	r3, [r3, #6]
 80072fe:	2b00      	cmp	r3, #0
 8007300:	d104      	bne.n	800730c <USBD_GetDescriptor+0x2c8>
    {
      (void)USBD_CtlSendStatus(pdev);
 8007302:	6878      	ldr	r0, [r7, #4]
 8007304:	f000 fa76 	bl	80077f4 <USBD_CtlSendStatus>
 8007308:	e000      	b.n	800730c <USBD_GetDescriptor+0x2c8>
    return;
 800730a:	bf00      	nop
    }
  }
}
 800730c:	3710      	adds	r7, #16
 800730e:	46bd      	mov	sp, r7
 8007310:	bd80      	pop	{r7, pc}
 8007312:	bf00      	nop

08007314 <USBD_SetAddress>:
* @param  req: usb request
* @retval status
*/
static void USBD_SetAddress(USBD_HandleTypeDef *pdev,
                            USBD_SetupReqTypedef *req)
{
 8007314:	b580      	push	{r7, lr}
 8007316:	b084      	sub	sp, #16
 8007318:	af00      	add	r7, sp, #0
 800731a:	6078      	str	r0, [r7, #4]
 800731c:	6039      	str	r1, [r7, #0]
  uint8_t  dev_addr;

  if ((req->wIndex == 0U) && (req->wLength == 0U) && (req->wValue < 128U))
 800731e:	683b      	ldr	r3, [r7, #0]
 8007320:	889b      	ldrh	r3, [r3, #4]
 8007322:	2b00      	cmp	r3, #0
 8007324:	d130      	bne.n	8007388 <USBD_SetAddress+0x74>
 8007326:	683b      	ldr	r3, [r7, #0]
 8007328:	88db      	ldrh	r3, [r3, #6]
 800732a:	2b00      	cmp	r3, #0
 800732c:	d12c      	bne.n	8007388 <USBD_SetAddress+0x74>
 800732e:	683b      	ldr	r3, [r7, #0]
 8007330:	885b      	ldrh	r3, [r3, #2]
 8007332:	2b7f      	cmp	r3, #127	; 0x7f
 8007334:	d828      	bhi.n	8007388 <USBD_SetAddress+0x74>
  {
    dev_addr = (uint8_t)(req->wValue) & 0x7FU;
 8007336:	683b      	ldr	r3, [r7, #0]
 8007338:	885b      	ldrh	r3, [r3, #2]
 800733a:	b2db      	uxtb	r3, r3
 800733c:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8007340:	73fb      	strb	r3, [r7, #15]

    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8007342:	687b      	ldr	r3, [r7, #4]
 8007344:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8007348:	2b03      	cmp	r3, #3
 800734a:	d104      	bne.n	8007356 <USBD_SetAddress+0x42>
    {
      USBD_CtlError(pdev, req);
 800734c:	6839      	ldr	r1, [r7, #0]
 800734e:	6878      	ldr	r0, [r7, #4]
 8007350:	f000 f988 	bl	8007664 <USBD_CtlError>
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8007354:	e01c      	b.n	8007390 <USBD_SetAddress+0x7c>
    }
    else
    {
      pdev->dev_address = dev_addr;
 8007356:	687b      	ldr	r3, [r7, #4]
 8007358:	7bfa      	ldrb	r2, [r7, #15]
 800735a:	f883 229e 	strb.w	r2, [r3, #670]	; 0x29e
      USBD_LL_SetUSBAddress(pdev, dev_addr);
 800735e:	7bfb      	ldrb	r3, [r7, #15]
 8007360:	4619      	mov	r1, r3
 8007362:	6878      	ldr	r0, [r7, #4]
 8007364:	f000 fe44 	bl	8007ff0 <USBD_LL_SetUSBAddress>
      USBD_CtlSendStatus(pdev);
 8007368:	6878      	ldr	r0, [r7, #4]
 800736a:	f000 fa43 	bl	80077f4 <USBD_CtlSendStatus>

      if (dev_addr != 0U)
 800736e:	7bfb      	ldrb	r3, [r7, #15]
 8007370:	2b00      	cmp	r3, #0
 8007372:	d004      	beq.n	800737e <USBD_SetAddress+0x6a>
      {
        pdev->dev_state = USBD_STATE_ADDRESSED;
 8007374:	687b      	ldr	r3, [r7, #4]
 8007376:	2202      	movs	r2, #2
 8007378:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800737c:	e008      	b.n	8007390 <USBD_SetAddress+0x7c>
      }
      else
      {
        pdev->dev_state = USBD_STATE_DEFAULT;
 800737e:	687b      	ldr	r3, [r7, #4]
 8007380:	2201      	movs	r2, #1
 8007382:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8007386:	e003      	b.n	8007390 <USBD_SetAddress+0x7c>
      }
    }
  }
  else
  {
    USBD_CtlError(pdev, req);
 8007388:	6839      	ldr	r1, [r7, #0]
 800738a:	6878      	ldr	r0, [r7, #4]
 800738c:	f000 f96a 	bl	8007664 <USBD_CtlError>
  }
}
 8007390:	bf00      	nop
 8007392:	3710      	adds	r7, #16
 8007394:	46bd      	mov	sp, r7
 8007396:	bd80      	pop	{r7, pc}

08007398 <USBD_SetConfig>:
* @param  pdev: device instance
* @param  req: usb request
* @retval status
*/
static void USBD_SetConfig(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8007398:	b580      	push	{r7, lr}
 800739a:	b082      	sub	sp, #8
 800739c:	af00      	add	r7, sp, #0
 800739e:	6078      	str	r0, [r7, #4]
 80073a0:	6039      	str	r1, [r7, #0]
  static uint8_t cfgidx;

  cfgidx = (uint8_t)(req->wValue);
 80073a2:	683b      	ldr	r3, [r7, #0]
 80073a4:	885b      	ldrh	r3, [r3, #2]
 80073a6:	b2da      	uxtb	r2, r3
 80073a8:	4b41      	ldr	r3, [pc, #260]	; (80074b0 <USBD_SetConfig+0x118>)
 80073aa:	701a      	strb	r2, [r3, #0]

  if (cfgidx > USBD_MAX_NUM_CONFIGURATION)
 80073ac:	4b40      	ldr	r3, [pc, #256]	; (80074b0 <USBD_SetConfig+0x118>)
 80073ae:	781b      	ldrb	r3, [r3, #0]
 80073b0:	2b01      	cmp	r3, #1
 80073b2:	d904      	bls.n	80073be <USBD_SetConfig+0x26>
  {
    USBD_CtlError(pdev, req);
 80073b4:	6839      	ldr	r1, [r7, #0]
 80073b6:	6878      	ldr	r0, [r7, #4]
 80073b8:	f000 f954 	bl	8007664 <USBD_CtlError>
 80073bc:	e075      	b.n	80074aa <USBD_SetConfig+0x112>
  }
  else
  {
    switch (pdev->dev_state)
 80073be:	687b      	ldr	r3, [r7, #4]
 80073c0:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 80073c4:	2b02      	cmp	r3, #2
 80073c6:	d002      	beq.n	80073ce <USBD_SetConfig+0x36>
 80073c8:	2b03      	cmp	r3, #3
 80073ca:	d023      	beq.n	8007414 <USBD_SetConfig+0x7c>
 80073cc:	e062      	b.n	8007494 <USBD_SetConfig+0xfc>
    {
      case USBD_STATE_ADDRESSED:
        if (cfgidx)
 80073ce:	4b38      	ldr	r3, [pc, #224]	; (80074b0 <USBD_SetConfig+0x118>)
 80073d0:	781b      	ldrb	r3, [r3, #0]
 80073d2:	2b00      	cmp	r3, #0
 80073d4:	d01a      	beq.n	800740c <USBD_SetConfig+0x74>
        {
          pdev->dev_config = cfgidx;
 80073d6:	4b36      	ldr	r3, [pc, #216]	; (80074b0 <USBD_SetConfig+0x118>)
 80073d8:	781b      	ldrb	r3, [r3, #0]
 80073da:	461a      	mov	r2, r3
 80073dc:	687b      	ldr	r3, [r7, #4]
 80073de:	605a      	str	r2, [r3, #4]
          pdev->dev_state = USBD_STATE_CONFIGURED;
 80073e0:	687b      	ldr	r3, [r7, #4]
 80073e2:	2203      	movs	r2, #3
 80073e4:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
          if (USBD_SetClassConfig(pdev, cfgidx) == USBD_FAIL)
 80073e8:	4b31      	ldr	r3, [pc, #196]	; (80074b0 <USBD_SetConfig+0x118>)
 80073ea:	781b      	ldrb	r3, [r3, #0]
 80073ec:	4619      	mov	r1, r3
 80073ee:	6878      	ldr	r0, [r7, #4]
 80073f0:	f7ff f9f3 	bl	80067da <USBD_SetClassConfig>
 80073f4:	4603      	mov	r3, r0
 80073f6:	2b02      	cmp	r3, #2
 80073f8:	d104      	bne.n	8007404 <USBD_SetConfig+0x6c>
          {
            USBD_CtlError(pdev, req);
 80073fa:	6839      	ldr	r1, [r7, #0]
 80073fc:	6878      	ldr	r0, [r7, #4]
 80073fe:	f000 f931 	bl	8007664 <USBD_CtlError>
            return;
 8007402:	e052      	b.n	80074aa <USBD_SetConfig+0x112>
          }
          USBD_CtlSendStatus(pdev);
 8007404:	6878      	ldr	r0, [r7, #4]
 8007406:	f000 f9f5 	bl	80077f4 <USBD_CtlSendStatus>
        }
        else
        {
          USBD_CtlSendStatus(pdev);
        }
        break;
 800740a:	e04e      	b.n	80074aa <USBD_SetConfig+0x112>
          USBD_CtlSendStatus(pdev);
 800740c:	6878      	ldr	r0, [r7, #4]
 800740e:	f000 f9f1 	bl	80077f4 <USBD_CtlSendStatus>
        break;
 8007412:	e04a      	b.n	80074aa <USBD_SetConfig+0x112>

      case USBD_STATE_CONFIGURED:
        if (cfgidx == 0U)
 8007414:	4b26      	ldr	r3, [pc, #152]	; (80074b0 <USBD_SetConfig+0x118>)
 8007416:	781b      	ldrb	r3, [r3, #0]
 8007418:	2b00      	cmp	r3, #0
 800741a:	d112      	bne.n	8007442 <USBD_SetConfig+0xaa>
        {
          pdev->dev_state = USBD_STATE_ADDRESSED;
 800741c:	687b      	ldr	r3, [r7, #4]
 800741e:	2202      	movs	r2, #2
 8007420:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
          pdev->dev_config = cfgidx;
 8007424:	4b22      	ldr	r3, [pc, #136]	; (80074b0 <USBD_SetConfig+0x118>)
 8007426:	781b      	ldrb	r3, [r3, #0]
 8007428:	461a      	mov	r2, r3
 800742a:	687b      	ldr	r3, [r7, #4]
 800742c:	605a      	str	r2, [r3, #4]
          USBD_ClrClassConfig(pdev, cfgidx);
 800742e:	4b20      	ldr	r3, [pc, #128]	; (80074b0 <USBD_SetConfig+0x118>)
 8007430:	781b      	ldrb	r3, [r3, #0]
 8007432:	4619      	mov	r1, r3
 8007434:	6878      	ldr	r0, [r7, #4]
 8007436:	f7ff f9ef 	bl	8006818 <USBD_ClrClassConfig>
          USBD_CtlSendStatus(pdev);
 800743a:	6878      	ldr	r0, [r7, #4]
 800743c:	f000 f9da 	bl	80077f4 <USBD_CtlSendStatus>
        }
        else
        {
          USBD_CtlSendStatus(pdev);
        }
        break;
 8007440:	e033      	b.n	80074aa <USBD_SetConfig+0x112>
        else if (cfgidx != pdev->dev_config)
 8007442:	4b1b      	ldr	r3, [pc, #108]	; (80074b0 <USBD_SetConfig+0x118>)
 8007444:	781b      	ldrb	r3, [r3, #0]
 8007446:	461a      	mov	r2, r3
 8007448:	687b      	ldr	r3, [r7, #4]
 800744a:	685b      	ldr	r3, [r3, #4]
 800744c:	429a      	cmp	r2, r3
 800744e:	d01d      	beq.n	800748c <USBD_SetConfig+0xf4>
          USBD_ClrClassConfig(pdev, (uint8_t)pdev->dev_config);
 8007450:	687b      	ldr	r3, [r7, #4]
 8007452:	685b      	ldr	r3, [r3, #4]
 8007454:	b2db      	uxtb	r3, r3
 8007456:	4619      	mov	r1, r3
 8007458:	6878      	ldr	r0, [r7, #4]
 800745a:	f7ff f9dd 	bl	8006818 <USBD_ClrClassConfig>
          pdev->dev_config = cfgidx;
 800745e:	4b14      	ldr	r3, [pc, #80]	; (80074b0 <USBD_SetConfig+0x118>)
 8007460:	781b      	ldrb	r3, [r3, #0]
 8007462:	461a      	mov	r2, r3
 8007464:	687b      	ldr	r3, [r7, #4]
 8007466:	605a      	str	r2, [r3, #4]
          if (USBD_SetClassConfig(pdev, cfgidx) == USBD_FAIL)
 8007468:	4b11      	ldr	r3, [pc, #68]	; (80074b0 <USBD_SetConfig+0x118>)
 800746a:	781b      	ldrb	r3, [r3, #0]
 800746c:	4619      	mov	r1, r3
 800746e:	6878      	ldr	r0, [r7, #4]
 8007470:	f7ff f9b3 	bl	80067da <USBD_SetClassConfig>
 8007474:	4603      	mov	r3, r0
 8007476:	2b02      	cmp	r3, #2
 8007478:	d104      	bne.n	8007484 <USBD_SetConfig+0xec>
            USBD_CtlError(pdev, req);
 800747a:	6839      	ldr	r1, [r7, #0]
 800747c:	6878      	ldr	r0, [r7, #4]
 800747e:	f000 f8f1 	bl	8007664 <USBD_CtlError>
            return;
 8007482:	e012      	b.n	80074aa <USBD_SetConfig+0x112>
          USBD_CtlSendStatus(pdev);
 8007484:	6878      	ldr	r0, [r7, #4]
 8007486:	f000 f9b5 	bl	80077f4 <USBD_CtlSendStatus>
        break;
 800748a:	e00e      	b.n	80074aa <USBD_SetConfig+0x112>
          USBD_CtlSendStatus(pdev);
 800748c:	6878      	ldr	r0, [r7, #4]
 800748e:	f000 f9b1 	bl	80077f4 <USBD_CtlSendStatus>
        break;
 8007492:	e00a      	b.n	80074aa <USBD_SetConfig+0x112>

      default:
        USBD_CtlError(pdev, req);
 8007494:	6839      	ldr	r1, [r7, #0]
 8007496:	6878      	ldr	r0, [r7, #4]
 8007498:	f000 f8e4 	bl	8007664 <USBD_CtlError>
        USBD_ClrClassConfig(pdev, cfgidx);
 800749c:	4b04      	ldr	r3, [pc, #16]	; (80074b0 <USBD_SetConfig+0x118>)
 800749e:	781b      	ldrb	r3, [r3, #0]
 80074a0:	4619      	mov	r1, r3
 80074a2:	6878      	ldr	r0, [r7, #4]
 80074a4:	f7ff f9b8 	bl	8006818 <USBD_ClrClassConfig>
        break;
 80074a8:	bf00      	nop
    }
  }
}
 80074aa:	3708      	adds	r7, #8
 80074ac:	46bd      	mov	sp, r7
 80074ae:	bd80      	pop	{r7, pc}
 80074b0:	20000198 	.word	0x20000198

080074b4 <USBD_GetConfig>:
* @param  pdev: device instance
* @param  req: usb request
* @retval status
*/
static void USBD_GetConfig(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 80074b4:	b580      	push	{r7, lr}
 80074b6:	b082      	sub	sp, #8
 80074b8:	af00      	add	r7, sp, #0
 80074ba:	6078      	str	r0, [r7, #4]
 80074bc:	6039      	str	r1, [r7, #0]
  if (req->wLength != 1U)
 80074be:	683b      	ldr	r3, [r7, #0]
 80074c0:	88db      	ldrh	r3, [r3, #6]
 80074c2:	2b01      	cmp	r3, #1
 80074c4:	d004      	beq.n	80074d0 <USBD_GetConfig+0x1c>
  {
    USBD_CtlError(pdev, req);
 80074c6:	6839      	ldr	r1, [r7, #0]
 80074c8:	6878      	ldr	r0, [r7, #4]
 80074ca:	f000 f8cb 	bl	8007664 <USBD_CtlError>
      default:
        USBD_CtlError(pdev, req);
        break;
    }
  }
}
 80074ce:	e021      	b.n	8007514 <USBD_GetConfig+0x60>
    switch (pdev->dev_state)
 80074d0:	687b      	ldr	r3, [r7, #4]
 80074d2:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 80074d6:	2b01      	cmp	r3, #1
 80074d8:	db17      	blt.n	800750a <USBD_GetConfig+0x56>
 80074da:	2b02      	cmp	r3, #2
 80074dc:	dd02      	ble.n	80074e4 <USBD_GetConfig+0x30>
 80074de:	2b03      	cmp	r3, #3
 80074e0:	d00b      	beq.n	80074fa <USBD_GetConfig+0x46>
 80074e2:	e012      	b.n	800750a <USBD_GetConfig+0x56>
        pdev->dev_default_config = 0U;
 80074e4:	687b      	ldr	r3, [r7, #4]
 80074e6:	2200      	movs	r2, #0
 80074e8:	609a      	str	r2, [r3, #8]
        USBD_CtlSendData(pdev, (uint8_t *)(void *)&pdev->dev_default_config, 1U);
 80074ea:	687b      	ldr	r3, [r7, #4]
 80074ec:	3308      	adds	r3, #8
 80074ee:	2201      	movs	r2, #1
 80074f0:	4619      	mov	r1, r3
 80074f2:	6878      	ldr	r0, [r7, #4]
 80074f4:	f000 f920 	bl	8007738 <USBD_CtlSendData>
        break;
 80074f8:	e00c      	b.n	8007514 <USBD_GetConfig+0x60>
        USBD_CtlSendData(pdev, (uint8_t *)(void *)&pdev->dev_config, 1U);
 80074fa:	687b      	ldr	r3, [r7, #4]
 80074fc:	3304      	adds	r3, #4
 80074fe:	2201      	movs	r2, #1
 8007500:	4619      	mov	r1, r3
 8007502:	6878      	ldr	r0, [r7, #4]
 8007504:	f000 f918 	bl	8007738 <USBD_CtlSendData>
        break;
 8007508:	e004      	b.n	8007514 <USBD_GetConfig+0x60>
        USBD_CtlError(pdev, req);
 800750a:	6839      	ldr	r1, [r7, #0]
 800750c:	6878      	ldr	r0, [r7, #4]
 800750e:	f000 f8a9 	bl	8007664 <USBD_CtlError>
        break;
 8007512:	bf00      	nop
}
 8007514:	bf00      	nop
 8007516:	3708      	adds	r7, #8
 8007518:	46bd      	mov	sp, r7
 800751a:	bd80      	pop	{r7, pc}

0800751c <USBD_GetStatus>:
* @param  pdev: device instance
* @param  req: usb request
* @retval status
*/
static void USBD_GetStatus(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800751c:	b580      	push	{r7, lr}
 800751e:	b082      	sub	sp, #8
 8007520:	af00      	add	r7, sp, #0
 8007522:	6078      	str	r0, [r7, #4]
 8007524:	6039      	str	r1, [r7, #0]
  switch (pdev->dev_state)
 8007526:	687b      	ldr	r3, [r7, #4]
 8007528:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800752c:	3b01      	subs	r3, #1
 800752e:	2b02      	cmp	r3, #2
 8007530:	d81e      	bhi.n	8007570 <USBD_GetStatus+0x54>
  {
    case USBD_STATE_DEFAULT:
    case USBD_STATE_ADDRESSED:
    case USBD_STATE_CONFIGURED:
      if (req->wLength != 0x2U)
 8007532:	683b      	ldr	r3, [r7, #0]
 8007534:	88db      	ldrh	r3, [r3, #6]
 8007536:	2b02      	cmp	r3, #2
 8007538:	d004      	beq.n	8007544 <USBD_GetStatus+0x28>
      {
        USBD_CtlError(pdev, req);
 800753a:	6839      	ldr	r1, [r7, #0]
 800753c:	6878      	ldr	r0, [r7, #4]
 800753e:	f000 f891 	bl	8007664 <USBD_CtlError>
        break;
 8007542:	e01a      	b.n	800757a <USBD_GetStatus+0x5e>
      }

#if (USBD_SELF_POWERED == 1U)
      pdev->dev_config_status = USB_CONFIG_SELF_POWERED;
 8007544:	687b      	ldr	r3, [r7, #4]
 8007546:	2201      	movs	r2, #1
 8007548:	60da      	str	r2, [r3, #12]
#else
      pdev->dev_config_status = 0U;
#endif

      if (pdev->dev_remote_wakeup)
 800754a:	687b      	ldr	r3, [r7, #4]
 800754c:	f8d3 32a4 	ldr.w	r3, [r3, #676]	; 0x2a4
 8007550:	2b00      	cmp	r3, #0
 8007552:	d005      	beq.n	8007560 <USBD_GetStatus+0x44>
      {
        pdev->dev_config_status |= USB_CONFIG_REMOTE_WAKEUP;
 8007554:	687b      	ldr	r3, [r7, #4]
 8007556:	68db      	ldr	r3, [r3, #12]
 8007558:	f043 0202 	orr.w	r2, r3, #2
 800755c:	687b      	ldr	r3, [r7, #4]
 800755e:	60da      	str	r2, [r3, #12]
      }

      USBD_CtlSendData(pdev, (uint8_t *)(void *)&pdev->dev_config_status, 2U);
 8007560:	687b      	ldr	r3, [r7, #4]
 8007562:	330c      	adds	r3, #12
 8007564:	2202      	movs	r2, #2
 8007566:	4619      	mov	r1, r3
 8007568:	6878      	ldr	r0, [r7, #4]
 800756a:	f000 f8e5 	bl	8007738 <USBD_CtlSendData>
      break;
 800756e:	e004      	b.n	800757a <USBD_GetStatus+0x5e>

    default:
      USBD_CtlError(pdev, req);
 8007570:	6839      	ldr	r1, [r7, #0]
 8007572:	6878      	ldr	r0, [r7, #4]
 8007574:	f000 f876 	bl	8007664 <USBD_CtlError>
      break;
 8007578:	bf00      	nop
  }
}
 800757a:	bf00      	nop
 800757c:	3708      	adds	r7, #8
 800757e:	46bd      	mov	sp, r7
 8007580:	bd80      	pop	{r7, pc}

08007582 <USBD_SetFeature>:
* @param  req: usb request
* @retval status
*/
static void USBD_SetFeature(USBD_HandleTypeDef *pdev,
                            USBD_SetupReqTypedef *req)
{
 8007582:	b580      	push	{r7, lr}
 8007584:	b082      	sub	sp, #8
 8007586:	af00      	add	r7, sp, #0
 8007588:	6078      	str	r0, [r7, #4]
 800758a:	6039      	str	r1, [r7, #0]
  if (req->wValue == USB_FEATURE_REMOTE_WAKEUP)
 800758c:	683b      	ldr	r3, [r7, #0]
 800758e:	885b      	ldrh	r3, [r3, #2]
 8007590:	2b01      	cmp	r3, #1
 8007592:	d106      	bne.n	80075a2 <USBD_SetFeature+0x20>
  {
    pdev->dev_remote_wakeup = 1U;
 8007594:	687b      	ldr	r3, [r7, #4]
 8007596:	2201      	movs	r2, #1
 8007598:	f8c3 22a4 	str.w	r2, [r3, #676]	; 0x2a4
    USBD_CtlSendStatus(pdev);
 800759c:	6878      	ldr	r0, [r7, #4]
 800759e:	f000 f929 	bl	80077f4 <USBD_CtlSendStatus>
  }
}
 80075a2:	bf00      	nop
 80075a4:	3708      	adds	r7, #8
 80075a6:	46bd      	mov	sp, r7
 80075a8:	bd80      	pop	{r7, pc}

080075aa <USBD_ClrFeature>:
* @param  req: usb request
* @retval status
*/
static void USBD_ClrFeature(USBD_HandleTypeDef *pdev,
                            USBD_SetupReqTypedef *req)
{
 80075aa:	b580      	push	{r7, lr}
 80075ac:	b082      	sub	sp, #8
 80075ae:	af00      	add	r7, sp, #0
 80075b0:	6078      	str	r0, [r7, #4]
 80075b2:	6039      	str	r1, [r7, #0]
  switch (pdev->dev_state)
 80075b4:	687b      	ldr	r3, [r7, #4]
 80075b6:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 80075ba:	3b01      	subs	r3, #1
 80075bc:	2b02      	cmp	r3, #2
 80075be:	d80b      	bhi.n	80075d8 <USBD_ClrFeature+0x2e>
  {
    case USBD_STATE_DEFAULT:
    case USBD_STATE_ADDRESSED:
    case USBD_STATE_CONFIGURED:
      if (req->wValue == USB_FEATURE_REMOTE_WAKEUP)
 80075c0:	683b      	ldr	r3, [r7, #0]
 80075c2:	885b      	ldrh	r3, [r3, #2]
 80075c4:	2b01      	cmp	r3, #1
 80075c6:	d10c      	bne.n	80075e2 <USBD_ClrFeature+0x38>
      {
        pdev->dev_remote_wakeup = 0U;
 80075c8:	687b      	ldr	r3, [r7, #4]
 80075ca:	2200      	movs	r2, #0
 80075cc:	f8c3 22a4 	str.w	r2, [r3, #676]	; 0x2a4
        USBD_CtlSendStatus(pdev);
 80075d0:	6878      	ldr	r0, [r7, #4]
 80075d2:	f000 f90f 	bl	80077f4 <USBD_CtlSendStatus>
      }
      break;
 80075d6:	e004      	b.n	80075e2 <USBD_ClrFeature+0x38>

    default:
      USBD_CtlError(pdev, req);
 80075d8:	6839      	ldr	r1, [r7, #0]
 80075da:	6878      	ldr	r0, [r7, #4]
 80075dc:	f000 f842 	bl	8007664 <USBD_CtlError>
      break;
 80075e0:	e000      	b.n	80075e4 <USBD_ClrFeature+0x3a>
      break;
 80075e2:	bf00      	nop
  }
}
 80075e4:	bf00      	nop
 80075e6:	3708      	adds	r7, #8
 80075e8:	46bd      	mov	sp, r7
 80075ea:	bd80      	pop	{r7, pc}

080075ec <USBD_ParseSetupRequest>:
* @param  req: usb request
* @retval None
*/

void USBD_ParseSetupRequest(USBD_SetupReqTypedef *req, uint8_t *pdata)
{
 80075ec:	b480      	push	{r7}
 80075ee:	b083      	sub	sp, #12
 80075f0:	af00      	add	r7, sp, #0
 80075f2:	6078      	str	r0, [r7, #4]
 80075f4:	6039      	str	r1, [r7, #0]
  req->bmRequest = *(uint8_t *)(pdata);
 80075f6:	683b      	ldr	r3, [r7, #0]
 80075f8:	781a      	ldrb	r2, [r3, #0]
 80075fa:	687b      	ldr	r3, [r7, #4]
 80075fc:	701a      	strb	r2, [r3, #0]
  req->bRequest = *(uint8_t *)(pdata + 1U);
 80075fe:	683b      	ldr	r3, [r7, #0]
 8007600:	785a      	ldrb	r2, [r3, #1]
 8007602:	687b      	ldr	r3, [r7, #4]
 8007604:	705a      	strb	r2, [r3, #1]
  req->wValue = SWAPBYTE(pdata + 2U);
 8007606:	683b      	ldr	r3, [r7, #0]
 8007608:	3302      	adds	r3, #2
 800760a:	781b      	ldrb	r3, [r3, #0]
 800760c:	b29a      	uxth	r2, r3
 800760e:	683b      	ldr	r3, [r7, #0]
 8007610:	3303      	adds	r3, #3
 8007612:	781b      	ldrb	r3, [r3, #0]
 8007614:	b29b      	uxth	r3, r3
 8007616:	021b      	lsls	r3, r3, #8
 8007618:	b29b      	uxth	r3, r3
 800761a:	4413      	add	r3, r2
 800761c:	b29a      	uxth	r2, r3
 800761e:	687b      	ldr	r3, [r7, #4]
 8007620:	805a      	strh	r2, [r3, #2]
  req->wIndex = SWAPBYTE(pdata + 4U);
 8007622:	683b      	ldr	r3, [r7, #0]
 8007624:	3304      	adds	r3, #4
 8007626:	781b      	ldrb	r3, [r3, #0]
 8007628:	b29a      	uxth	r2, r3
 800762a:	683b      	ldr	r3, [r7, #0]
 800762c:	3305      	adds	r3, #5
 800762e:	781b      	ldrb	r3, [r3, #0]
 8007630:	b29b      	uxth	r3, r3
 8007632:	021b      	lsls	r3, r3, #8
 8007634:	b29b      	uxth	r3, r3
 8007636:	4413      	add	r3, r2
 8007638:	b29a      	uxth	r2, r3
 800763a:	687b      	ldr	r3, [r7, #4]
 800763c:	809a      	strh	r2, [r3, #4]
  req->wLength = SWAPBYTE(pdata + 6U);
 800763e:	683b      	ldr	r3, [r7, #0]
 8007640:	3306      	adds	r3, #6
 8007642:	781b      	ldrb	r3, [r3, #0]
 8007644:	b29a      	uxth	r2, r3
 8007646:	683b      	ldr	r3, [r7, #0]
 8007648:	3307      	adds	r3, #7
 800764a:	781b      	ldrb	r3, [r3, #0]
 800764c:	b29b      	uxth	r3, r3
 800764e:	021b      	lsls	r3, r3, #8
 8007650:	b29b      	uxth	r3, r3
 8007652:	4413      	add	r3, r2
 8007654:	b29a      	uxth	r2, r3
 8007656:	687b      	ldr	r3, [r7, #4]
 8007658:	80da      	strh	r2, [r3, #6]

}
 800765a:	bf00      	nop
 800765c:	370c      	adds	r7, #12
 800765e:	46bd      	mov	sp, r7
 8007660:	bc80      	pop	{r7}
 8007662:	4770      	bx	lr

08007664 <USBD_CtlError>:
* @retval None
*/

void USBD_CtlError(USBD_HandleTypeDef *pdev,
                   USBD_SetupReqTypedef *req)
{
 8007664:	b580      	push	{r7, lr}
 8007666:	b082      	sub	sp, #8
 8007668:	af00      	add	r7, sp, #0
 800766a:	6078      	str	r0, [r7, #4]
 800766c:	6039      	str	r1, [r7, #0]
  USBD_LL_StallEP(pdev, 0x80U);
 800766e:	2180      	movs	r1, #128	; 0x80
 8007670:	6878      	ldr	r0, [r7, #4]
 8007672:	f000 fc53 	bl	8007f1c <USBD_LL_StallEP>
  USBD_LL_StallEP(pdev, 0U);
 8007676:	2100      	movs	r1, #0
 8007678:	6878      	ldr	r0, [r7, #4]
 800767a:	f000 fc4f 	bl	8007f1c <USBD_LL_StallEP>
}
 800767e:	bf00      	nop
 8007680:	3708      	adds	r7, #8
 8007682:	46bd      	mov	sp, r7
 8007684:	bd80      	pop	{r7, pc}

08007686 <USBD_GetString>:
  * @param  unicode : Formatted string buffer (unicode)
  * @param  len : descriptor length
  * @retval None
  */
void USBD_GetString(uint8_t *desc, uint8_t *unicode, uint16_t *len)
{
 8007686:	b580      	push	{r7, lr}
 8007688:	b086      	sub	sp, #24
 800768a:	af00      	add	r7, sp, #0
 800768c:	60f8      	str	r0, [r7, #12]
 800768e:	60b9      	str	r1, [r7, #8]
 8007690:	607a      	str	r2, [r7, #4]
  uint8_t idx = 0U;
 8007692:	2300      	movs	r3, #0
 8007694:	75fb      	strb	r3, [r7, #23]

  if (desc != NULL)
 8007696:	68fb      	ldr	r3, [r7, #12]
 8007698:	2b00      	cmp	r3, #0
 800769a:	d032      	beq.n	8007702 <USBD_GetString+0x7c>
  {
    *len = (uint16_t)USBD_GetLen(desc) * 2U + 2U;
 800769c:	68f8      	ldr	r0, [r7, #12]
 800769e:	f000 f834 	bl	800770a <USBD_GetLen>
 80076a2:	4603      	mov	r3, r0
 80076a4:	3301      	adds	r3, #1
 80076a6:	b29b      	uxth	r3, r3
 80076a8:	005b      	lsls	r3, r3, #1
 80076aa:	b29a      	uxth	r2, r3
 80076ac:	687b      	ldr	r3, [r7, #4]
 80076ae:	801a      	strh	r2, [r3, #0]
    unicode[idx++] = *(uint8_t *)(void *)len;
 80076b0:	7dfb      	ldrb	r3, [r7, #23]
 80076b2:	1c5a      	adds	r2, r3, #1
 80076b4:	75fa      	strb	r2, [r7, #23]
 80076b6:	461a      	mov	r2, r3
 80076b8:	68bb      	ldr	r3, [r7, #8]
 80076ba:	4413      	add	r3, r2
 80076bc:	687a      	ldr	r2, [r7, #4]
 80076be:	7812      	ldrb	r2, [r2, #0]
 80076c0:	701a      	strb	r2, [r3, #0]
    unicode[idx++] = USB_DESC_TYPE_STRING;
 80076c2:	7dfb      	ldrb	r3, [r7, #23]
 80076c4:	1c5a      	adds	r2, r3, #1
 80076c6:	75fa      	strb	r2, [r7, #23]
 80076c8:	461a      	mov	r2, r3
 80076ca:	68bb      	ldr	r3, [r7, #8]
 80076cc:	4413      	add	r3, r2
 80076ce:	2203      	movs	r2, #3
 80076d0:	701a      	strb	r2, [r3, #0]

    while (*desc != '\0')
 80076d2:	e012      	b.n	80076fa <USBD_GetString+0x74>
    {
      unicode[idx++] = *desc++;
 80076d4:	68fb      	ldr	r3, [r7, #12]
 80076d6:	1c5a      	adds	r2, r3, #1
 80076d8:	60fa      	str	r2, [r7, #12]
 80076da:	7dfa      	ldrb	r2, [r7, #23]
 80076dc:	1c51      	adds	r1, r2, #1
 80076de:	75f9      	strb	r1, [r7, #23]
 80076e0:	4611      	mov	r1, r2
 80076e2:	68ba      	ldr	r2, [r7, #8]
 80076e4:	440a      	add	r2, r1
 80076e6:	781b      	ldrb	r3, [r3, #0]
 80076e8:	7013      	strb	r3, [r2, #0]
      unicode[idx++] =  0U;
 80076ea:	7dfb      	ldrb	r3, [r7, #23]
 80076ec:	1c5a      	adds	r2, r3, #1
 80076ee:	75fa      	strb	r2, [r7, #23]
 80076f0:	461a      	mov	r2, r3
 80076f2:	68bb      	ldr	r3, [r7, #8]
 80076f4:	4413      	add	r3, r2
 80076f6:	2200      	movs	r2, #0
 80076f8:	701a      	strb	r2, [r3, #0]
    while (*desc != '\0')
 80076fa:	68fb      	ldr	r3, [r7, #12]
 80076fc:	781b      	ldrb	r3, [r3, #0]
 80076fe:	2b00      	cmp	r3, #0
 8007700:	d1e8      	bne.n	80076d4 <USBD_GetString+0x4e>
    }
  }
}
 8007702:	bf00      	nop
 8007704:	3718      	adds	r7, #24
 8007706:	46bd      	mov	sp, r7
 8007708:	bd80      	pop	{r7, pc}

0800770a <USBD_GetLen>:
  *         return the string length
   * @param  buf : pointer to the ascii string buffer
  * @retval string length
  */
static uint8_t USBD_GetLen(uint8_t *buf)
{
 800770a:	b480      	push	{r7}
 800770c:	b085      	sub	sp, #20
 800770e:	af00      	add	r7, sp, #0
 8007710:	6078      	str	r0, [r7, #4]
  uint8_t  len = 0U;
 8007712:	2300      	movs	r3, #0
 8007714:	73fb      	strb	r3, [r7, #15]

  while (*buf != '\0')
 8007716:	e005      	b.n	8007724 <USBD_GetLen+0x1a>
  {
    len++;
 8007718:	7bfb      	ldrb	r3, [r7, #15]
 800771a:	3301      	adds	r3, #1
 800771c:	73fb      	strb	r3, [r7, #15]
    buf++;
 800771e:	687b      	ldr	r3, [r7, #4]
 8007720:	3301      	adds	r3, #1
 8007722:	607b      	str	r3, [r7, #4]
  while (*buf != '\0')
 8007724:	687b      	ldr	r3, [r7, #4]
 8007726:	781b      	ldrb	r3, [r3, #0]
 8007728:	2b00      	cmp	r3, #0
 800772a:	d1f5      	bne.n	8007718 <USBD_GetLen+0xe>
  }

  return len;
 800772c:	7bfb      	ldrb	r3, [r7, #15]
}
 800772e:	4618      	mov	r0, r3
 8007730:	3714      	adds	r7, #20
 8007732:	46bd      	mov	sp, r7
 8007734:	bc80      	pop	{r7}
 8007736:	4770      	bx	lr

08007738 <USBD_CtlSendData>:
* @param  len: length of data to be sent
* @retval status
*/
USBD_StatusTypeDef USBD_CtlSendData(USBD_HandleTypeDef *pdev,
                                    uint8_t *pbuf, uint16_t len)
{
 8007738:	b580      	push	{r7, lr}
 800773a:	b084      	sub	sp, #16
 800773c:	af00      	add	r7, sp, #0
 800773e:	60f8      	str	r0, [r7, #12]
 8007740:	60b9      	str	r1, [r7, #8]
 8007742:	4613      	mov	r3, r2
 8007744:	80fb      	strh	r3, [r7, #6]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_DATA_IN;
 8007746:	68fb      	ldr	r3, [r7, #12]
 8007748:	2202      	movs	r2, #2
 800774a:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294
  pdev->ep_in[0].total_length = len;
 800774e:	88fa      	ldrh	r2, [r7, #6]
 8007750:	68fb      	ldr	r3, [r7, #12]
 8007752:	61da      	str	r2, [r3, #28]
  pdev->ep_in[0].rem_length   = len;
 8007754:	88fa      	ldrh	r2, [r7, #6]
 8007756:	68fb      	ldr	r3, [r7, #12]
 8007758:	621a      	str	r2, [r3, #32]

  /* Start the transfer */
  USBD_LL_Transmit(pdev, 0x00U, pbuf, len);
 800775a:	88fb      	ldrh	r3, [r7, #6]
 800775c:	68ba      	ldr	r2, [r7, #8]
 800775e:	2100      	movs	r1, #0
 8007760:	68f8      	ldr	r0, [r7, #12]
 8007762:	f000 fc64 	bl	800802e <USBD_LL_Transmit>

  return USBD_OK;
 8007766:	2300      	movs	r3, #0
}
 8007768:	4618      	mov	r0, r3
 800776a:	3710      	adds	r7, #16
 800776c:	46bd      	mov	sp, r7
 800776e:	bd80      	pop	{r7, pc}

08007770 <USBD_CtlContinueSendData>:
* @param  len: length of data to be sent
* @retval status
*/
USBD_StatusTypeDef USBD_CtlContinueSendData(USBD_HandleTypeDef *pdev,
                                            uint8_t *pbuf, uint16_t len)
{
 8007770:	b580      	push	{r7, lr}
 8007772:	b084      	sub	sp, #16
 8007774:	af00      	add	r7, sp, #0
 8007776:	60f8      	str	r0, [r7, #12]
 8007778:	60b9      	str	r1, [r7, #8]
 800777a:	4613      	mov	r3, r2
 800777c:	80fb      	strh	r3, [r7, #6]
  /* Start the next transfer */
  USBD_LL_Transmit(pdev, 0x00U, pbuf, len);
 800777e:	88fb      	ldrh	r3, [r7, #6]
 8007780:	68ba      	ldr	r2, [r7, #8]
 8007782:	2100      	movs	r1, #0
 8007784:	68f8      	ldr	r0, [r7, #12]
 8007786:	f000 fc52 	bl	800802e <USBD_LL_Transmit>

  return USBD_OK;
 800778a:	2300      	movs	r3, #0
}
 800778c:	4618      	mov	r0, r3
 800778e:	3710      	adds	r7, #16
 8007790:	46bd      	mov	sp, r7
 8007792:	bd80      	pop	{r7, pc}

08007794 <USBD_CtlPrepareRx>:
* @param  len: length of data to be received
* @retval status
*/
USBD_StatusTypeDef USBD_CtlPrepareRx(USBD_HandleTypeDef *pdev,
                                     uint8_t *pbuf, uint16_t len)
{
 8007794:	b580      	push	{r7, lr}
 8007796:	b084      	sub	sp, #16
 8007798:	af00      	add	r7, sp, #0
 800779a:	60f8      	str	r0, [r7, #12]
 800779c:	60b9      	str	r1, [r7, #8]
 800779e:	4613      	mov	r3, r2
 80077a0:	80fb      	strh	r3, [r7, #6]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_DATA_OUT;
 80077a2:	68fb      	ldr	r3, [r7, #12]
 80077a4:	2203      	movs	r2, #3
 80077a6:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294
  pdev->ep_out[0].total_length = len;
 80077aa:	88fa      	ldrh	r2, [r7, #6]
 80077ac:	68fb      	ldr	r3, [r7, #12]
 80077ae:	f8c3 215c 	str.w	r2, [r3, #348]	; 0x15c
  pdev->ep_out[0].rem_length   = len;
 80077b2:	88fa      	ldrh	r2, [r7, #6]
 80077b4:	68fb      	ldr	r3, [r7, #12]
 80077b6:	f8c3 2160 	str.w	r2, [r3, #352]	; 0x160

  /* Start the transfer */
  USBD_LL_PrepareReceive(pdev, 0U, pbuf, len);
 80077ba:	88fb      	ldrh	r3, [r7, #6]
 80077bc:	68ba      	ldr	r2, [r7, #8]
 80077be:	2100      	movs	r1, #0
 80077c0:	68f8      	ldr	r0, [r7, #12]
 80077c2:	f000 fc57 	bl	8008074 <USBD_LL_PrepareReceive>

  return USBD_OK;
 80077c6:	2300      	movs	r3, #0
}
 80077c8:	4618      	mov	r0, r3
 80077ca:	3710      	adds	r7, #16
 80077cc:	46bd      	mov	sp, r7
 80077ce:	bd80      	pop	{r7, pc}

080077d0 <USBD_CtlContinueRx>:
* @param  len: length of data to be received
* @retval status
*/
USBD_StatusTypeDef USBD_CtlContinueRx(USBD_HandleTypeDef *pdev,
                                      uint8_t *pbuf, uint16_t len)
{
 80077d0:	b580      	push	{r7, lr}
 80077d2:	b084      	sub	sp, #16
 80077d4:	af00      	add	r7, sp, #0
 80077d6:	60f8      	str	r0, [r7, #12]
 80077d8:	60b9      	str	r1, [r7, #8]
 80077da:	4613      	mov	r3, r2
 80077dc:	80fb      	strh	r3, [r7, #6]
  USBD_LL_PrepareReceive(pdev, 0U, pbuf, len);
 80077de:	88fb      	ldrh	r3, [r7, #6]
 80077e0:	68ba      	ldr	r2, [r7, #8]
 80077e2:	2100      	movs	r1, #0
 80077e4:	68f8      	ldr	r0, [r7, #12]
 80077e6:	f000 fc45 	bl	8008074 <USBD_LL_PrepareReceive>

  return USBD_OK;
 80077ea:	2300      	movs	r3, #0
}
 80077ec:	4618      	mov	r0, r3
 80077ee:	3710      	adds	r7, #16
 80077f0:	46bd      	mov	sp, r7
 80077f2:	bd80      	pop	{r7, pc}

080077f4 <USBD_CtlSendStatus>:
*         send zero lzngth packet on the ctl pipe
* @param  pdev: device instance
* @retval status
*/
USBD_StatusTypeDef USBD_CtlSendStatus(USBD_HandleTypeDef *pdev)
{
 80077f4:	b580      	push	{r7, lr}
 80077f6:	b082      	sub	sp, #8
 80077f8:	af00      	add	r7, sp, #0
 80077fa:	6078      	str	r0, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_STATUS_IN;
 80077fc:	687b      	ldr	r3, [r7, #4]
 80077fe:	2204      	movs	r2, #4
 8007800:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294

  /* Start the transfer */
  USBD_LL_Transmit(pdev, 0x00U, NULL, 0U);
 8007804:	2300      	movs	r3, #0
 8007806:	2200      	movs	r2, #0
 8007808:	2100      	movs	r1, #0
 800780a:	6878      	ldr	r0, [r7, #4]
 800780c:	f000 fc0f 	bl	800802e <USBD_LL_Transmit>

  return USBD_OK;
 8007810:	2300      	movs	r3, #0
}
 8007812:	4618      	mov	r0, r3
 8007814:	3708      	adds	r7, #8
 8007816:	46bd      	mov	sp, r7
 8007818:	bd80      	pop	{r7, pc}

0800781a <USBD_CtlReceiveStatus>:
*         receive zero lzngth packet on the ctl pipe
* @param  pdev: device instance
* @retval status
*/
USBD_StatusTypeDef USBD_CtlReceiveStatus(USBD_HandleTypeDef *pdev)
{
 800781a:	b580      	push	{r7, lr}
 800781c:	b082      	sub	sp, #8
 800781e:	af00      	add	r7, sp, #0
 8007820:	6078      	str	r0, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_STATUS_OUT;
 8007822:	687b      	ldr	r3, [r7, #4]
 8007824:	2205      	movs	r2, #5
 8007826:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294

  /* Start the transfer */
  USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 800782a:	2300      	movs	r3, #0
 800782c:	2200      	movs	r2, #0
 800782e:	2100      	movs	r1, #0
 8007830:	6878      	ldr	r0, [r7, #4]
 8007832:	f000 fc1f 	bl	8008074 <USBD_LL_PrepareReceive>

  return USBD_OK;
 8007836:	2300      	movs	r3, #0
}
 8007838:	4618      	mov	r0, r3
 800783a:	3708      	adds	r7, #8
 800783c:	46bd      	mov	sp, r7
 800783e:	bd80      	pop	{r7, pc}

08007840 <MX_USB_DEVICE_Init>:
/**
  * Init USB device Library, add supported class and start the library
  * @retval None
  */
void MX_USB_DEVICE_Init(void)
{
 8007840:	b580      	push	{r7, lr}
 8007842:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USB_DEVICE_Init_PreTreatment */

  /* USER CODE END USB_DEVICE_Init_PreTreatment */

  /* Init Device Library, add supported class and start the library. */
  if (USBD_Init(&hUsbDeviceFS, &FS_Desc, DEVICE_FS) != USBD_OK)
 8007844:	2200      	movs	r2, #0
 8007846:	4912      	ldr	r1, [pc, #72]	; (8007890 <MX_USB_DEVICE_Init+0x50>)
 8007848:	4812      	ldr	r0, [pc, #72]	; (8007894 <MX_USB_DEVICE_Init+0x54>)
 800784a:	f7fe ff6c 	bl	8006726 <USBD_Init>
 800784e:	4603      	mov	r3, r0
 8007850:	2b00      	cmp	r3, #0
 8007852:	d001      	beq.n	8007858 <MX_USB_DEVICE_Init+0x18>
  {
    Error_Handler();
 8007854:	f7f8 fe10 	bl	8000478 <Error_Handler>
  }
  if (USBD_RegisterClass(&hUsbDeviceFS, &USBD_CDC) != USBD_OK)
 8007858:	490f      	ldr	r1, [pc, #60]	; (8007898 <MX_USB_DEVICE_Init+0x58>)
 800785a:	480e      	ldr	r0, [pc, #56]	; (8007894 <MX_USB_DEVICE_Init+0x54>)
 800785c:	f7fe ff8e 	bl	800677c <USBD_RegisterClass>
 8007860:	4603      	mov	r3, r0
 8007862:	2b00      	cmp	r3, #0
 8007864:	d001      	beq.n	800786a <MX_USB_DEVICE_Init+0x2a>
  {
    Error_Handler();
 8007866:	f7f8 fe07 	bl	8000478 <Error_Handler>
  }
  if (USBD_CDC_RegisterInterface(&hUsbDeviceFS, &USBD_Interface_fops_FS) != USBD_OK)
 800786a:	490c      	ldr	r1, [pc, #48]	; (800789c <MX_USB_DEVICE_Init+0x5c>)
 800786c:	4809      	ldr	r0, [pc, #36]	; (8007894 <MX_USB_DEVICE_Init+0x54>)
 800786e:	f7fe febf 	bl	80065f0 <USBD_CDC_RegisterInterface>
 8007872:	4603      	mov	r3, r0
 8007874:	2b00      	cmp	r3, #0
 8007876:	d001      	beq.n	800787c <MX_USB_DEVICE_Init+0x3c>
  {
    Error_Handler();
 8007878:	f7f8 fdfe 	bl	8000478 <Error_Handler>
  }
  if (USBD_Start(&hUsbDeviceFS) != USBD_OK)
 800787c:	4805      	ldr	r0, [pc, #20]	; (8007894 <MX_USB_DEVICE_Init+0x54>)
 800787e:	f7fe ff96 	bl	80067ae <USBD_Start>
 8007882:	4603      	mov	r3, r0
 8007884:	2b00      	cmp	r3, #0
 8007886:	d001      	beq.n	800788c <MX_USB_DEVICE_Init+0x4c>
  {
    Error_Handler();
 8007888:	f7f8 fdf6 	bl	8000478 <Error_Handler>
  }

  /* USER CODE BEGIN USB_DEVICE_Init_PostTreatment */

  /* USER CODE END USB_DEVICE_Init_PostTreatment */
}
 800788c:	bf00      	nop
 800788e:	bd80      	pop	{r7, pc}
 8007890:	2000012c 	.word	0x2000012c
 8007894:	20002b90 	.word	0x20002b90
 8007898:	20000018 	.word	0x20000018
 800789c:	2000011c 	.word	0x2000011c

080078a0 <CDC_Init_FS>:
/**
  * @brief  Initializes the CDC media low layer over the FS USB IP
  * @retval USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_Init_FS(void)
{
 80078a0:	b580      	push	{r7, lr}
 80078a2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN 3 */
  /* Set Application Buffers */
  USBD_CDC_SetTxBuffer(&hUsbDeviceFS, UserTxBufferFS, 0);
 80078a4:	2200      	movs	r2, #0
 80078a6:	4905      	ldr	r1, [pc, #20]	; (80078bc <CDC_Init_FS+0x1c>)
 80078a8:	4805      	ldr	r0, [pc, #20]	; (80078c0 <CDC_Init_FS+0x20>)
 80078aa:	f7fe feb7 	bl	800661c <USBD_CDC_SetTxBuffer>
  USBD_CDC_SetRxBuffer(&hUsbDeviceFS, UserRxBufferFS);
 80078ae:	4905      	ldr	r1, [pc, #20]	; (80078c4 <CDC_Init_FS+0x24>)
 80078b0:	4803      	ldr	r0, [pc, #12]	; (80078c0 <CDC_Init_FS+0x20>)
 80078b2:	f7fe fecc 	bl	800664e <USBD_CDC_SetRxBuffer>
  return (USBD_OK);
 80078b6:	2300      	movs	r3, #0
  /* USER CODE END 3 */
}
 80078b8:	4618      	mov	r0, r3
 80078ba:	bd80      	pop	{r7, pc}
 80078bc:	2000323c 	.word	0x2000323c
 80078c0:	20002b90 	.word	0x20002b90
 80078c4:	20002e54 	.word	0x20002e54

080078c8 <CDC_DeInit_FS>:
/**
  * @brief  DeInitializes the CDC media low layer
  * @retval USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_DeInit_FS(void)
{
 80078c8:	b480      	push	{r7}
 80078ca:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN 4 */
  return (USBD_OK);
 80078cc:	2300      	movs	r3, #0
  /* USER CODE END 4 */
}
 80078ce:	4618      	mov	r0, r3
 80078d0:	46bd      	mov	sp, r7
 80078d2:	bc80      	pop	{r7}
 80078d4:	4770      	bx	lr
	...

080078d8 <CDC_Control_FS>:
  * @param  pbuf: Buffer containing command data (request parameters)
  * @param  length: Number of data to be sent (in bytes)
  * @retval Result of the operation: USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_Control_FS(uint8_t cmd, uint8_t* pbuf, uint16_t length)
{
 80078d8:	b480      	push	{r7}
 80078da:	b083      	sub	sp, #12
 80078dc:	af00      	add	r7, sp, #0
 80078de:	4603      	mov	r3, r0
 80078e0:	6039      	str	r1, [r7, #0]
 80078e2:	71fb      	strb	r3, [r7, #7]
 80078e4:	4613      	mov	r3, r2
 80078e6:	80bb      	strh	r3, [r7, #4]
  /* USER CODE BEGIN 5 */
  switch(cmd)
 80078e8:	79fb      	ldrb	r3, [r7, #7]
 80078ea:	2b23      	cmp	r3, #35	; 0x23
 80078ec:	d84a      	bhi.n	8007984 <CDC_Control_FS+0xac>
 80078ee:	a201      	add	r2, pc, #4	; (adr r2, 80078f4 <CDC_Control_FS+0x1c>)
 80078f0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80078f4:	08007985 	.word	0x08007985
 80078f8:	08007985 	.word	0x08007985
 80078fc:	08007985 	.word	0x08007985
 8007900:	08007985 	.word	0x08007985
 8007904:	08007985 	.word	0x08007985
 8007908:	08007985 	.word	0x08007985
 800790c:	08007985 	.word	0x08007985
 8007910:	08007985 	.word	0x08007985
 8007914:	08007985 	.word	0x08007985
 8007918:	08007985 	.word	0x08007985
 800791c:	08007985 	.word	0x08007985
 8007920:	08007985 	.word	0x08007985
 8007924:	08007985 	.word	0x08007985
 8007928:	08007985 	.word	0x08007985
 800792c:	08007985 	.word	0x08007985
 8007930:	08007985 	.word	0x08007985
 8007934:	08007985 	.word	0x08007985
 8007938:	08007985 	.word	0x08007985
 800793c:	08007985 	.word	0x08007985
 8007940:	08007985 	.word	0x08007985
 8007944:	08007985 	.word	0x08007985
 8007948:	08007985 	.word	0x08007985
 800794c:	08007985 	.word	0x08007985
 8007950:	08007985 	.word	0x08007985
 8007954:	08007985 	.word	0x08007985
 8007958:	08007985 	.word	0x08007985
 800795c:	08007985 	.word	0x08007985
 8007960:	08007985 	.word	0x08007985
 8007964:	08007985 	.word	0x08007985
 8007968:	08007985 	.word	0x08007985
 800796c:	08007985 	.word	0x08007985
 8007970:	08007985 	.word	0x08007985
 8007974:	08007985 	.word	0x08007985
 8007978:	08007985 	.word	0x08007985
 800797c:	08007985 	.word	0x08007985
 8007980:	08007985 	.word	0x08007985
    case CDC_SEND_BREAK:

    break;

  default:
    break;
 8007984:	bf00      	nop
  }

  return (USBD_OK);
 8007986:	2300      	movs	r3, #0
  /* USER CODE END 5 */
}
 8007988:	4618      	mov	r0, r3
 800798a:	370c      	adds	r7, #12
 800798c:	46bd      	mov	sp, r7
 800798e:	bc80      	pop	{r7}
 8007990:	4770      	bx	lr
 8007992:	bf00      	nop

08007994 <CDC_Receive_FS>:
  * @param  Buf: Buffer of data to be received
  * @param  Len: Number of data received (in bytes)
  * @retval Result of the operation: USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_Receive_FS(uint8_t* Buf, uint32_t *Len)
{
 8007994:	b580      	push	{r7, lr}
 8007996:	b082      	sub	sp, #8
 8007998:	af00      	add	r7, sp, #0
 800799a:	6078      	str	r0, [r7, #4]
 800799c:	6039      	str	r1, [r7, #0]
  /* USER CODE BEGIN 6 */
  USBD_CDC_SetRxBuffer(&hUsbDeviceFS, &Buf[0]);
 800799e:	6879      	ldr	r1, [r7, #4]
 80079a0:	4805      	ldr	r0, [pc, #20]	; (80079b8 <CDC_Receive_FS+0x24>)
 80079a2:	f7fe fe54 	bl	800664e <USBD_CDC_SetRxBuffer>
  USBD_CDC_ReceivePacket(&hUsbDeviceFS);
 80079a6:	4804      	ldr	r0, [pc, #16]	; (80079b8 <CDC_Receive_FS+0x24>)
 80079a8:	f7fe fe93 	bl	80066d2 <USBD_CDC_ReceivePacket>
  return (USBD_OK);
 80079ac:	2300      	movs	r3, #0
  /* USER CODE END 6 */
}
 80079ae:	4618      	mov	r0, r3
 80079b0:	3708      	adds	r7, #8
 80079b2:	46bd      	mov	sp, r7
 80079b4:	bd80      	pop	{r7, pc}
 80079b6:	bf00      	nop
 80079b8:	20002b90 	.word	0x20002b90

080079bc <CDC_Transmit_FS>:
  * @param  Buf: Buffer of data to be sent
  * @param  Len: Number of data to be sent (in bytes)
  * @retval USBD_OK if all operations are OK else USBD_FAIL or USBD_BUSY
  */
uint8_t CDC_Transmit_FS(uint8_t* Buf, uint16_t Len)
{
 80079bc:	b580      	push	{r7, lr}
 80079be:	b084      	sub	sp, #16
 80079c0:	af00      	add	r7, sp, #0
 80079c2:	6078      	str	r0, [r7, #4]
 80079c4:	460b      	mov	r3, r1
 80079c6:	807b      	strh	r3, [r7, #2]
  uint8_t result = USBD_OK;
 80079c8:	2300      	movs	r3, #0
 80079ca:	73fb      	strb	r3, [r7, #15]
  /* USER CODE BEGIN 7 */
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef*)hUsbDeviceFS.pClassData;
 80079cc:	4b0d      	ldr	r3, [pc, #52]	; (8007a04 <CDC_Transmit_FS+0x48>)
 80079ce:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 80079d2:	60bb      	str	r3, [r7, #8]
  if (hcdc->TxState != 0){
 80079d4:	68bb      	ldr	r3, [r7, #8]
 80079d6:	f8d3 3214 	ldr.w	r3, [r3, #532]	; 0x214
 80079da:	2b00      	cmp	r3, #0
 80079dc:	d001      	beq.n	80079e2 <CDC_Transmit_FS+0x26>
    return USBD_BUSY;
 80079de:	2301      	movs	r3, #1
 80079e0:	e00b      	b.n	80079fa <CDC_Transmit_FS+0x3e>
  }
  USBD_CDC_SetTxBuffer(&hUsbDeviceFS, Buf, Len);
 80079e2:	887b      	ldrh	r3, [r7, #2]
 80079e4:	461a      	mov	r2, r3
 80079e6:	6879      	ldr	r1, [r7, #4]
 80079e8:	4806      	ldr	r0, [pc, #24]	; (8007a04 <CDC_Transmit_FS+0x48>)
 80079ea:	f7fe fe17 	bl	800661c <USBD_CDC_SetTxBuffer>
  result = USBD_CDC_TransmitPacket(&hUsbDeviceFS);
 80079ee:	4805      	ldr	r0, [pc, #20]	; (8007a04 <CDC_Transmit_FS+0x48>)
 80079f0:	f7fe fe40 	bl	8006674 <USBD_CDC_TransmitPacket>
 80079f4:	4603      	mov	r3, r0
 80079f6:	73fb      	strb	r3, [r7, #15]
  /* USER CODE END 7 */
  return result;
 80079f8:	7bfb      	ldrb	r3, [r7, #15]
}
 80079fa:	4618      	mov	r0, r3
 80079fc:	3710      	adds	r7, #16
 80079fe:	46bd      	mov	sp, r7
 8007a00:	bd80      	pop	{r7, pc}
 8007a02:	bf00      	nop
 8007a04:	20002b90 	.word	0x20002b90

08007a08 <USBD_FS_DeviceDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_DeviceDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8007a08:	b480      	push	{r7}
 8007a0a:	b083      	sub	sp, #12
 8007a0c:	af00      	add	r7, sp, #0
 8007a0e:	4603      	mov	r3, r0
 8007a10:	6039      	str	r1, [r7, #0]
 8007a12:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = sizeof(USBD_FS_DeviceDesc);
 8007a14:	683b      	ldr	r3, [r7, #0]
 8007a16:	2212      	movs	r2, #18
 8007a18:	801a      	strh	r2, [r3, #0]
  return USBD_FS_DeviceDesc;
 8007a1a:	4b03      	ldr	r3, [pc, #12]	; (8007a28 <USBD_FS_DeviceDescriptor+0x20>)
}
 8007a1c:	4618      	mov	r0, r3
 8007a1e:	370c      	adds	r7, #12
 8007a20:	46bd      	mov	sp, r7
 8007a22:	bc80      	pop	{r7}
 8007a24:	4770      	bx	lr
 8007a26:	bf00      	nop
 8007a28:	20000148 	.word	0x20000148

08007a2c <USBD_FS_LangIDStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_LangIDStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8007a2c:	b480      	push	{r7}
 8007a2e:	b083      	sub	sp, #12
 8007a30:	af00      	add	r7, sp, #0
 8007a32:	4603      	mov	r3, r0
 8007a34:	6039      	str	r1, [r7, #0]
 8007a36:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = sizeof(USBD_LangIDDesc);
 8007a38:	683b      	ldr	r3, [r7, #0]
 8007a3a:	2204      	movs	r2, #4
 8007a3c:	801a      	strh	r2, [r3, #0]
  return USBD_LangIDDesc;
 8007a3e:	4b03      	ldr	r3, [pc, #12]	; (8007a4c <USBD_FS_LangIDStrDescriptor+0x20>)
}
 8007a40:	4618      	mov	r0, r3
 8007a42:	370c      	adds	r7, #12
 8007a44:	46bd      	mov	sp, r7
 8007a46:	bc80      	pop	{r7}
 8007a48:	4770      	bx	lr
 8007a4a:	bf00      	nop
 8007a4c:	2000015c 	.word	0x2000015c

08007a50 <USBD_FS_ProductStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_ProductStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8007a50:	b580      	push	{r7, lr}
 8007a52:	b082      	sub	sp, #8
 8007a54:	af00      	add	r7, sp, #0
 8007a56:	4603      	mov	r3, r0
 8007a58:	6039      	str	r1, [r7, #0]
 8007a5a:	71fb      	strb	r3, [r7, #7]
  if(speed == 0)
 8007a5c:	79fb      	ldrb	r3, [r7, #7]
 8007a5e:	2b00      	cmp	r3, #0
 8007a60:	d105      	bne.n	8007a6e <USBD_FS_ProductStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_PRODUCT_STRING_FS, USBD_StrDesc, length);
 8007a62:	683a      	ldr	r2, [r7, #0]
 8007a64:	4907      	ldr	r1, [pc, #28]	; (8007a84 <USBD_FS_ProductStrDescriptor+0x34>)
 8007a66:	4808      	ldr	r0, [pc, #32]	; (8007a88 <USBD_FS_ProductStrDescriptor+0x38>)
 8007a68:	f7ff fe0d 	bl	8007686 <USBD_GetString>
 8007a6c:	e004      	b.n	8007a78 <USBD_FS_ProductStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_PRODUCT_STRING_FS, USBD_StrDesc, length);
 8007a6e:	683a      	ldr	r2, [r7, #0]
 8007a70:	4904      	ldr	r1, [pc, #16]	; (8007a84 <USBD_FS_ProductStrDescriptor+0x34>)
 8007a72:	4805      	ldr	r0, [pc, #20]	; (8007a88 <USBD_FS_ProductStrDescriptor+0x38>)
 8007a74:	f7ff fe07 	bl	8007686 <USBD_GetString>
  }
  return USBD_StrDesc;
 8007a78:	4b02      	ldr	r3, [pc, #8]	; (8007a84 <USBD_FS_ProductStrDescriptor+0x34>)
}
 8007a7a:	4618      	mov	r0, r3
 8007a7c:	3708      	adds	r7, #8
 8007a7e:	46bd      	mov	sp, r7
 8007a80:	bd80      	pop	{r7, pc}
 8007a82:	bf00      	nop
 8007a84:	20003624 	.word	0x20003624
 8007a88:	080081fc 	.word	0x080081fc

08007a8c <USBD_FS_ManufacturerStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_ManufacturerStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8007a8c:	b580      	push	{r7, lr}
 8007a8e:	b082      	sub	sp, #8
 8007a90:	af00      	add	r7, sp, #0
 8007a92:	4603      	mov	r3, r0
 8007a94:	6039      	str	r1, [r7, #0]
 8007a96:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  USBD_GetString((uint8_t *)USBD_MANUFACTURER_STRING, USBD_StrDesc, length);
 8007a98:	683a      	ldr	r2, [r7, #0]
 8007a9a:	4904      	ldr	r1, [pc, #16]	; (8007aac <USBD_FS_ManufacturerStrDescriptor+0x20>)
 8007a9c:	4804      	ldr	r0, [pc, #16]	; (8007ab0 <USBD_FS_ManufacturerStrDescriptor+0x24>)
 8007a9e:	f7ff fdf2 	bl	8007686 <USBD_GetString>
  return USBD_StrDesc;
 8007aa2:	4b02      	ldr	r3, [pc, #8]	; (8007aac <USBD_FS_ManufacturerStrDescriptor+0x20>)
}
 8007aa4:	4618      	mov	r0, r3
 8007aa6:	3708      	adds	r7, #8
 8007aa8:	46bd      	mov	sp, r7
 8007aaa:	bd80      	pop	{r7, pc}
 8007aac:	20003624 	.word	0x20003624
 8007ab0:	08008214 	.word	0x08008214

08007ab4 <USBD_FS_SerialStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_SerialStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8007ab4:	b580      	push	{r7, lr}
 8007ab6:	b082      	sub	sp, #8
 8007ab8:	af00      	add	r7, sp, #0
 8007aba:	4603      	mov	r3, r0
 8007abc:	6039      	str	r1, [r7, #0]
 8007abe:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = USB_SIZ_STRING_SERIAL;
 8007ac0:	683b      	ldr	r3, [r7, #0]
 8007ac2:	221a      	movs	r2, #26
 8007ac4:	801a      	strh	r2, [r3, #0]

  /* Update the serial number string descriptor with the data from the unique
   * ID */
  Get_SerialNum();
 8007ac6:	f000 f843 	bl	8007b50 <Get_SerialNum>
  /* USER CODE BEGIN USBD_FS_SerialStrDescriptor */

  /* USER CODE END USBD_FS_SerialStrDescriptor */
  return (uint8_t *) USBD_StringSerial;
 8007aca:	4b02      	ldr	r3, [pc, #8]	; (8007ad4 <USBD_FS_SerialStrDescriptor+0x20>)
}
 8007acc:	4618      	mov	r0, r3
 8007ace:	3708      	adds	r7, #8
 8007ad0:	46bd      	mov	sp, r7
 8007ad2:	bd80      	pop	{r7, pc}
 8007ad4:	20000160 	.word	0x20000160

08007ad8 <USBD_FS_ConfigStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_ConfigStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8007ad8:	b580      	push	{r7, lr}
 8007ada:	b082      	sub	sp, #8
 8007adc:	af00      	add	r7, sp, #0
 8007ade:	4603      	mov	r3, r0
 8007ae0:	6039      	str	r1, [r7, #0]
 8007ae2:	71fb      	strb	r3, [r7, #7]
  if(speed == USBD_SPEED_HIGH)
 8007ae4:	79fb      	ldrb	r3, [r7, #7]
 8007ae6:	2b00      	cmp	r3, #0
 8007ae8:	d105      	bne.n	8007af6 <USBD_FS_ConfigStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_CONFIGURATION_STRING_FS, USBD_StrDesc, length);
 8007aea:	683a      	ldr	r2, [r7, #0]
 8007aec:	4907      	ldr	r1, [pc, #28]	; (8007b0c <USBD_FS_ConfigStrDescriptor+0x34>)
 8007aee:	4808      	ldr	r0, [pc, #32]	; (8007b10 <USBD_FS_ConfigStrDescriptor+0x38>)
 8007af0:	f7ff fdc9 	bl	8007686 <USBD_GetString>
 8007af4:	e004      	b.n	8007b00 <USBD_FS_ConfigStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_CONFIGURATION_STRING_FS, USBD_StrDesc, length);
 8007af6:	683a      	ldr	r2, [r7, #0]
 8007af8:	4904      	ldr	r1, [pc, #16]	; (8007b0c <USBD_FS_ConfigStrDescriptor+0x34>)
 8007afa:	4805      	ldr	r0, [pc, #20]	; (8007b10 <USBD_FS_ConfigStrDescriptor+0x38>)
 8007afc:	f7ff fdc3 	bl	8007686 <USBD_GetString>
  }
  return USBD_StrDesc;
 8007b00:	4b02      	ldr	r3, [pc, #8]	; (8007b0c <USBD_FS_ConfigStrDescriptor+0x34>)
}
 8007b02:	4618      	mov	r0, r3
 8007b04:	3708      	adds	r7, #8
 8007b06:	46bd      	mov	sp, r7
 8007b08:	bd80      	pop	{r7, pc}
 8007b0a:	bf00      	nop
 8007b0c:	20003624 	.word	0x20003624
 8007b10:	08008228 	.word	0x08008228

08007b14 <USBD_FS_InterfaceStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_InterfaceStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8007b14:	b580      	push	{r7, lr}
 8007b16:	b082      	sub	sp, #8
 8007b18:	af00      	add	r7, sp, #0
 8007b1a:	4603      	mov	r3, r0
 8007b1c:	6039      	str	r1, [r7, #0]
 8007b1e:	71fb      	strb	r3, [r7, #7]
  if(speed == 0)
 8007b20:	79fb      	ldrb	r3, [r7, #7]
 8007b22:	2b00      	cmp	r3, #0
 8007b24:	d105      	bne.n	8007b32 <USBD_FS_InterfaceStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_INTERFACE_STRING_FS, USBD_StrDesc, length);
 8007b26:	683a      	ldr	r2, [r7, #0]
 8007b28:	4907      	ldr	r1, [pc, #28]	; (8007b48 <USBD_FS_InterfaceStrDescriptor+0x34>)
 8007b2a:	4808      	ldr	r0, [pc, #32]	; (8007b4c <USBD_FS_InterfaceStrDescriptor+0x38>)
 8007b2c:	f7ff fdab 	bl	8007686 <USBD_GetString>
 8007b30:	e004      	b.n	8007b3c <USBD_FS_InterfaceStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_INTERFACE_STRING_FS, USBD_StrDesc, length);
 8007b32:	683a      	ldr	r2, [r7, #0]
 8007b34:	4904      	ldr	r1, [pc, #16]	; (8007b48 <USBD_FS_InterfaceStrDescriptor+0x34>)
 8007b36:	4805      	ldr	r0, [pc, #20]	; (8007b4c <USBD_FS_InterfaceStrDescriptor+0x38>)
 8007b38:	f7ff fda5 	bl	8007686 <USBD_GetString>
  }
  return USBD_StrDesc;
 8007b3c:	4b02      	ldr	r3, [pc, #8]	; (8007b48 <USBD_FS_InterfaceStrDescriptor+0x34>)
}
 8007b3e:	4618      	mov	r0, r3
 8007b40:	3708      	adds	r7, #8
 8007b42:	46bd      	mov	sp, r7
 8007b44:	bd80      	pop	{r7, pc}
 8007b46:	bf00      	nop
 8007b48:	20003624 	.word	0x20003624
 8007b4c:	08008234 	.word	0x08008234

08007b50 <Get_SerialNum>:
  * @brief  Create the serial number string descriptor
  * @param  None
  * @retval None
  */
static void Get_SerialNum(void)
{
 8007b50:	b580      	push	{r7, lr}
 8007b52:	b084      	sub	sp, #16
 8007b54:	af00      	add	r7, sp, #0
  uint32_t deviceserial0, deviceserial1, deviceserial2;

  deviceserial0 = *(uint32_t *) DEVICE_ID1;
 8007b56:	4b0f      	ldr	r3, [pc, #60]	; (8007b94 <Get_SerialNum+0x44>)
 8007b58:	681b      	ldr	r3, [r3, #0]
 8007b5a:	60fb      	str	r3, [r7, #12]
  deviceserial1 = *(uint32_t *) DEVICE_ID2;
 8007b5c:	4b0e      	ldr	r3, [pc, #56]	; (8007b98 <Get_SerialNum+0x48>)
 8007b5e:	681b      	ldr	r3, [r3, #0]
 8007b60:	60bb      	str	r3, [r7, #8]
  deviceserial2 = *(uint32_t *) DEVICE_ID3;
 8007b62:	4b0e      	ldr	r3, [pc, #56]	; (8007b9c <Get_SerialNum+0x4c>)
 8007b64:	681b      	ldr	r3, [r3, #0]
 8007b66:	607b      	str	r3, [r7, #4]

  deviceserial0 += deviceserial2;
 8007b68:	68fa      	ldr	r2, [r7, #12]
 8007b6a:	687b      	ldr	r3, [r7, #4]
 8007b6c:	4413      	add	r3, r2
 8007b6e:	60fb      	str	r3, [r7, #12]

  if (deviceserial0 != 0)
 8007b70:	68fb      	ldr	r3, [r7, #12]
 8007b72:	2b00      	cmp	r3, #0
 8007b74:	d009      	beq.n	8007b8a <Get_SerialNum+0x3a>
  {
    IntToUnicode(deviceserial0, &USBD_StringSerial[2], 8);
 8007b76:	2208      	movs	r2, #8
 8007b78:	4909      	ldr	r1, [pc, #36]	; (8007ba0 <Get_SerialNum+0x50>)
 8007b7a:	68f8      	ldr	r0, [r7, #12]
 8007b7c:	f000 f814 	bl	8007ba8 <IntToUnicode>
    IntToUnicode(deviceserial1, &USBD_StringSerial[18], 4);
 8007b80:	2204      	movs	r2, #4
 8007b82:	4908      	ldr	r1, [pc, #32]	; (8007ba4 <Get_SerialNum+0x54>)
 8007b84:	68b8      	ldr	r0, [r7, #8]
 8007b86:	f000 f80f 	bl	8007ba8 <IntToUnicode>
  }
}
 8007b8a:	bf00      	nop
 8007b8c:	3710      	adds	r7, #16
 8007b8e:	46bd      	mov	sp, r7
 8007b90:	bd80      	pop	{r7, pc}
 8007b92:	bf00      	nop
 8007b94:	1ffff7e8 	.word	0x1ffff7e8
 8007b98:	1ffff7ec 	.word	0x1ffff7ec
 8007b9c:	1ffff7f0 	.word	0x1ffff7f0
 8007ba0:	20000162 	.word	0x20000162
 8007ba4:	20000172 	.word	0x20000172

08007ba8 <IntToUnicode>:
  * @param  pbuf: pointer to the buffer
  * @param  len: buffer length
  * @retval None
  */
static void IntToUnicode(uint32_t value, uint8_t * pbuf, uint8_t len)
{
 8007ba8:	b480      	push	{r7}
 8007baa:	b087      	sub	sp, #28
 8007bac:	af00      	add	r7, sp, #0
 8007bae:	60f8      	str	r0, [r7, #12]
 8007bb0:	60b9      	str	r1, [r7, #8]
 8007bb2:	4613      	mov	r3, r2
 8007bb4:	71fb      	strb	r3, [r7, #7]
  uint8_t idx = 0;
 8007bb6:	2300      	movs	r3, #0
 8007bb8:	75fb      	strb	r3, [r7, #23]

  for (idx = 0; idx < len; idx++)
 8007bba:	2300      	movs	r3, #0
 8007bbc:	75fb      	strb	r3, [r7, #23]
 8007bbe:	e027      	b.n	8007c10 <IntToUnicode+0x68>
  {
    if (((value >> 28)) < 0xA)
 8007bc0:	68fb      	ldr	r3, [r7, #12]
 8007bc2:	0f1b      	lsrs	r3, r3, #28
 8007bc4:	2b09      	cmp	r3, #9
 8007bc6:	d80b      	bhi.n	8007be0 <IntToUnicode+0x38>
    {
      pbuf[2 * idx] = (value >> 28) + '0';
 8007bc8:	68fb      	ldr	r3, [r7, #12]
 8007bca:	0f1b      	lsrs	r3, r3, #28
 8007bcc:	b2da      	uxtb	r2, r3
 8007bce:	7dfb      	ldrb	r3, [r7, #23]
 8007bd0:	005b      	lsls	r3, r3, #1
 8007bd2:	4619      	mov	r1, r3
 8007bd4:	68bb      	ldr	r3, [r7, #8]
 8007bd6:	440b      	add	r3, r1
 8007bd8:	3230      	adds	r2, #48	; 0x30
 8007bda:	b2d2      	uxtb	r2, r2
 8007bdc:	701a      	strb	r2, [r3, #0]
 8007bde:	e00a      	b.n	8007bf6 <IntToUnicode+0x4e>
    }
    else
    {
      pbuf[2 * idx] = (value >> 28) + 'A' - 10;
 8007be0:	68fb      	ldr	r3, [r7, #12]
 8007be2:	0f1b      	lsrs	r3, r3, #28
 8007be4:	b2da      	uxtb	r2, r3
 8007be6:	7dfb      	ldrb	r3, [r7, #23]
 8007be8:	005b      	lsls	r3, r3, #1
 8007bea:	4619      	mov	r1, r3
 8007bec:	68bb      	ldr	r3, [r7, #8]
 8007bee:	440b      	add	r3, r1
 8007bf0:	3237      	adds	r2, #55	; 0x37
 8007bf2:	b2d2      	uxtb	r2, r2
 8007bf4:	701a      	strb	r2, [r3, #0]
    }

    value = value << 4;
 8007bf6:	68fb      	ldr	r3, [r7, #12]
 8007bf8:	011b      	lsls	r3, r3, #4
 8007bfa:	60fb      	str	r3, [r7, #12]

    pbuf[2 * idx + 1] = 0;
 8007bfc:	7dfb      	ldrb	r3, [r7, #23]
 8007bfe:	005b      	lsls	r3, r3, #1
 8007c00:	3301      	adds	r3, #1
 8007c02:	68ba      	ldr	r2, [r7, #8]
 8007c04:	4413      	add	r3, r2
 8007c06:	2200      	movs	r2, #0
 8007c08:	701a      	strb	r2, [r3, #0]
  for (idx = 0; idx < len; idx++)
 8007c0a:	7dfb      	ldrb	r3, [r7, #23]
 8007c0c:	3301      	adds	r3, #1
 8007c0e:	75fb      	strb	r3, [r7, #23]
 8007c10:	7dfa      	ldrb	r2, [r7, #23]
 8007c12:	79fb      	ldrb	r3, [r7, #7]
 8007c14:	429a      	cmp	r2, r3
 8007c16:	d3d3      	bcc.n	8007bc0 <IntToUnicode+0x18>
  }
}
 8007c18:	bf00      	nop
 8007c1a:	371c      	adds	r7, #28
 8007c1c:	46bd      	mov	sp, r7
 8007c1e:	bc80      	pop	{r7}
 8007c20:	4770      	bx	lr
	...

08007c24 <HAL_PCD_MspInit>:
                       LL Driver Callbacks (PCD -> USB Device Library)
*******************************************************************************/
/* MSP Init */

void HAL_PCD_MspInit(PCD_HandleTypeDef* pcdHandle)
{
 8007c24:	b580      	push	{r7, lr}
 8007c26:	b084      	sub	sp, #16
 8007c28:	af00      	add	r7, sp, #0
 8007c2a:	6078      	str	r0, [r7, #4]
  if(pcdHandle->Instance==USB)
 8007c2c:	687b      	ldr	r3, [r7, #4]
 8007c2e:	681b      	ldr	r3, [r3, #0]
 8007c30:	4a0d      	ldr	r2, [pc, #52]	; (8007c68 <HAL_PCD_MspInit+0x44>)
 8007c32:	4293      	cmp	r3, r2
 8007c34:	d113      	bne.n	8007c5e <HAL_PCD_MspInit+0x3a>
  {
  /* USER CODE BEGIN USB_MspInit 0 */

  /* USER CODE END USB_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USB_CLK_ENABLE();
 8007c36:	4b0d      	ldr	r3, [pc, #52]	; (8007c6c <HAL_PCD_MspInit+0x48>)
 8007c38:	69db      	ldr	r3, [r3, #28]
 8007c3a:	4a0c      	ldr	r2, [pc, #48]	; (8007c6c <HAL_PCD_MspInit+0x48>)
 8007c3c:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 8007c40:	61d3      	str	r3, [r2, #28]
 8007c42:	4b0a      	ldr	r3, [pc, #40]	; (8007c6c <HAL_PCD_MspInit+0x48>)
 8007c44:	69db      	ldr	r3, [r3, #28]
 8007c46:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8007c4a:	60fb      	str	r3, [r7, #12]
 8007c4c:	68fb      	ldr	r3, [r7, #12]

    /* Peripheral interrupt init */
    HAL_NVIC_SetPriority(USB_LP_CAN1_RX0_IRQn, 0, 0);
 8007c4e:	2200      	movs	r2, #0
 8007c50:	2100      	movs	r1, #0
 8007c52:	2014      	movs	r0, #20
 8007c54:	f7f9 fa39 	bl	80010ca <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USB_LP_CAN1_RX0_IRQn);
 8007c58:	2014      	movs	r0, #20
 8007c5a:	f7f9 fa52 	bl	8001102 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USB_MspInit 1 */

  /* USER CODE END USB_MspInit 1 */
  }
}
 8007c5e:	bf00      	nop
 8007c60:	3710      	adds	r7, #16
 8007c62:	46bd      	mov	sp, r7
 8007c64:	bd80      	pop	{r7, pc}
 8007c66:	bf00      	nop
 8007c68:	40005c00 	.word	0x40005c00
 8007c6c:	40021000 	.word	0x40021000

08007c70 <HAL_PCD_SetupStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SetupStageCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SetupStageCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8007c70:	b580      	push	{r7, lr}
 8007c72:	b082      	sub	sp, #8
 8007c74:	af00      	add	r7, sp, #0
 8007c76:	6078      	str	r0, [r7, #4]
  USBD_LL_SetupStage((USBD_HandleTypeDef*)hpcd->pData, (uint8_t *)hpcd->Setup);
 8007c78:	687b      	ldr	r3, [r7, #4]
 8007c7a:	f8d3 22e8 	ldr.w	r2, [r3, #744]	; 0x2e8
 8007c7e:	687b      	ldr	r3, [r7, #4]
 8007c80:	f503 732c 	add.w	r3, r3, #688	; 0x2b0
 8007c84:	4619      	mov	r1, r3
 8007c86:	4610      	mov	r0, r2
 8007c88:	f7fe fdd9 	bl	800683e <USBD_LL_SetupStage>
}
 8007c8c:	bf00      	nop
 8007c8e:	3708      	adds	r7, #8
 8007c90:	46bd      	mov	sp, r7
 8007c92:	bd80      	pop	{r7, pc}

08007c94 <HAL_PCD_DataOutStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_DataOutStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_DataOutStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8007c94:	b580      	push	{r7, lr}
 8007c96:	b082      	sub	sp, #8
 8007c98:	af00      	add	r7, sp, #0
 8007c9a:	6078      	str	r0, [r7, #4]
 8007c9c:	460b      	mov	r3, r1
 8007c9e:	70fb      	strb	r3, [r7, #3]
  USBD_LL_DataOutStage((USBD_HandleTypeDef*)hpcd->pData, epnum, hpcd->OUT_ep[epnum].xfer_buff);
 8007ca0:	687b      	ldr	r3, [r7, #4]
 8007ca2:	f8d3 02e8 	ldr.w	r0, [r3, #744]	; 0x2e8
 8007ca6:	78fa      	ldrb	r2, [r7, #3]
 8007ca8:	6879      	ldr	r1, [r7, #4]
 8007caa:	4613      	mov	r3, r2
 8007cac:	009b      	lsls	r3, r3, #2
 8007cae:	4413      	add	r3, r2
 8007cb0:	00db      	lsls	r3, r3, #3
 8007cb2:	440b      	add	r3, r1
 8007cb4:	f503 73be 	add.w	r3, r3, #380	; 0x17c
 8007cb8:	681a      	ldr	r2, [r3, #0]
 8007cba:	78fb      	ldrb	r3, [r7, #3]
 8007cbc:	4619      	mov	r1, r3
 8007cbe:	f7fe fe09 	bl	80068d4 <USBD_LL_DataOutStage>
}
 8007cc2:	bf00      	nop
 8007cc4:	3708      	adds	r7, #8
 8007cc6:	46bd      	mov	sp, r7
 8007cc8:	bd80      	pop	{r7, pc}

08007cca <HAL_PCD_DataInStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_DataInStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_DataInStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8007cca:	b580      	push	{r7, lr}
 8007ccc:	b082      	sub	sp, #8
 8007cce:	af00      	add	r7, sp, #0
 8007cd0:	6078      	str	r0, [r7, #4]
 8007cd2:	460b      	mov	r3, r1
 8007cd4:	70fb      	strb	r3, [r7, #3]
  USBD_LL_DataInStage((USBD_HandleTypeDef*)hpcd->pData, epnum, hpcd->IN_ep[epnum].xfer_buff);
 8007cd6:	687b      	ldr	r3, [r7, #4]
 8007cd8:	f8d3 02e8 	ldr.w	r0, [r3, #744]	; 0x2e8
 8007cdc:	78fa      	ldrb	r2, [r7, #3]
 8007cde:	6879      	ldr	r1, [r7, #4]
 8007ce0:	4613      	mov	r3, r2
 8007ce2:	009b      	lsls	r3, r3, #2
 8007ce4:	4413      	add	r3, r2
 8007ce6:	00db      	lsls	r3, r3, #3
 8007ce8:	440b      	add	r3, r1
 8007cea:	333c      	adds	r3, #60	; 0x3c
 8007cec:	681a      	ldr	r2, [r3, #0]
 8007cee:	78fb      	ldrb	r3, [r7, #3]
 8007cf0:	4619      	mov	r1, r3
 8007cf2:	f7fe fe60 	bl	80069b6 <USBD_LL_DataInStage>
}
 8007cf6:	bf00      	nop
 8007cf8:	3708      	adds	r7, #8
 8007cfa:	46bd      	mov	sp, r7
 8007cfc:	bd80      	pop	{r7, pc}

08007cfe <HAL_PCD_SOFCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SOFCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SOFCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8007cfe:	b580      	push	{r7, lr}
 8007d00:	b082      	sub	sp, #8
 8007d02:	af00      	add	r7, sp, #0
 8007d04:	6078      	str	r0, [r7, #4]
  USBD_LL_SOF((USBD_HandleTypeDef*)hpcd->pData);
 8007d06:	687b      	ldr	r3, [r7, #4]
 8007d08:	f8d3 32e8 	ldr.w	r3, [r3, #744]	; 0x2e8
 8007d0c:	4618      	mov	r0, r3
 8007d0e:	f7fe ff70 	bl	8006bf2 <USBD_LL_SOF>
}
 8007d12:	bf00      	nop
 8007d14:	3708      	adds	r7, #8
 8007d16:	46bd      	mov	sp, r7
 8007d18:	bd80      	pop	{r7, pc}

08007d1a <HAL_PCD_ResetCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ResetCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_ResetCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8007d1a:	b580      	push	{r7, lr}
 8007d1c:	b084      	sub	sp, #16
 8007d1e:	af00      	add	r7, sp, #0
 8007d20:	6078      	str	r0, [r7, #4]
  USBD_SpeedTypeDef speed = USBD_SPEED_FULL;
 8007d22:	2301      	movs	r3, #1
 8007d24:	73fb      	strb	r3, [r7, #15]

  if ( hpcd->Init.speed != PCD_SPEED_FULL)
 8007d26:	687b      	ldr	r3, [r7, #4]
 8007d28:	689b      	ldr	r3, [r3, #8]
 8007d2a:	2b02      	cmp	r3, #2
 8007d2c:	d001      	beq.n	8007d32 <HAL_PCD_ResetCallback+0x18>
  {
    Error_Handler();
 8007d2e:	f7f8 fba3 	bl	8000478 <Error_Handler>
  }
    /* Set Speed. */
  USBD_LL_SetSpeed((USBD_HandleTypeDef*)hpcd->pData, speed);
 8007d32:	687b      	ldr	r3, [r7, #4]
 8007d34:	f8d3 32e8 	ldr.w	r3, [r3, #744]	; 0x2e8
 8007d38:	7bfa      	ldrb	r2, [r7, #15]
 8007d3a:	4611      	mov	r1, r2
 8007d3c:	4618      	mov	r0, r3
 8007d3e:	f7fe ff20 	bl	8006b82 <USBD_LL_SetSpeed>

  /* Reset Device. */
  USBD_LL_Reset((USBD_HandleTypeDef*)hpcd->pData);
 8007d42:	687b      	ldr	r3, [r7, #4]
 8007d44:	f8d3 32e8 	ldr.w	r3, [r3, #744]	; 0x2e8
 8007d48:	4618      	mov	r0, r3
 8007d4a:	f7fe fed9 	bl	8006b00 <USBD_LL_Reset>
}
 8007d4e:	bf00      	nop
 8007d50:	3710      	adds	r7, #16
 8007d52:	46bd      	mov	sp, r7
 8007d54:	bd80      	pop	{r7, pc}
	...

08007d58 <HAL_PCD_SuspendCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SuspendCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SuspendCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8007d58:	b580      	push	{r7, lr}
 8007d5a:	b082      	sub	sp, #8
 8007d5c:	af00      	add	r7, sp, #0
 8007d5e:	6078      	str	r0, [r7, #4]
  /* Inform USB library that core enters in suspend Mode. */
  USBD_LL_Suspend((USBD_HandleTypeDef*)hpcd->pData);
 8007d60:	687b      	ldr	r3, [r7, #4]
 8007d62:	f8d3 32e8 	ldr.w	r3, [r3, #744]	; 0x2e8
 8007d66:	4618      	mov	r0, r3
 8007d68:	f7fe ff1a 	bl	8006ba0 <USBD_LL_Suspend>
  /* Enter in STOP mode. */
  /* USER CODE BEGIN 2 */
  if (hpcd->Init.low_power_enable)
 8007d6c:	687b      	ldr	r3, [r7, #4]
 8007d6e:	699b      	ldr	r3, [r3, #24]
 8007d70:	2b00      	cmp	r3, #0
 8007d72:	d005      	beq.n	8007d80 <HAL_PCD_SuspendCallback+0x28>
  {
    /* Set SLEEPDEEP bit and SleepOnExit of Cortex System Control Register. */
    SCB->SCR |= (uint32_t)((uint32_t)(SCB_SCR_SLEEPDEEP_Msk | SCB_SCR_SLEEPONEXIT_Msk));
 8007d74:	4b04      	ldr	r3, [pc, #16]	; (8007d88 <HAL_PCD_SuspendCallback+0x30>)
 8007d76:	691b      	ldr	r3, [r3, #16]
 8007d78:	4a03      	ldr	r2, [pc, #12]	; (8007d88 <HAL_PCD_SuspendCallback+0x30>)
 8007d7a:	f043 0306 	orr.w	r3, r3, #6
 8007d7e:	6113      	str	r3, [r2, #16]
  }
  /* USER CODE END 2 */
}
 8007d80:	bf00      	nop
 8007d82:	3708      	adds	r7, #8
 8007d84:	46bd      	mov	sp, r7
 8007d86:	bd80      	pop	{r7, pc}
 8007d88:	e000ed00 	.word	0xe000ed00

08007d8c <HAL_PCD_ResumeCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ResumeCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_ResumeCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8007d8c:	b580      	push	{r7, lr}
 8007d8e:	b082      	sub	sp, #8
 8007d90:	af00      	add	r7, sp, #0
 8007d92:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN 3 */

  /* USER CODE END 3 */
  USBD_LL_Resume((USBD_HandleTypeDef*)hpcd->pData);
 8007d94:	687b      	ldr	r3, [r7, #4]
 8007d96:	f8d3 32e8 	ldr.w	r3, [r3, #744]	; 0x2e8
 8007d9a:	4618      	mov	r0, r3
 8007d9c:	f7fe ff14 	bl	8006bc8 <USBD_LL_Resume>
}
 8007da0:	bf00      	nop
 8007da2:	3708      	adds	r7, #8
 8007da4:	46bd      	mov	sp, r7
 8007da6:	bd80      	pop	{r7, pc}

08007da8 <USBD_LL_Init>:
  * @brief  Initializes the low level portion of the device driver.
  * @param  pdev: Device handle
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Init(USBD_HandleTypeDef *pdev)
{
 8007da8:	b580      	push	{r7, lr}
 8007daa:	b082      	sub	sp, #8
 8007dac:	af00      	add	r7, sp, #0
 8007dae:	6078      	str	r0, [r7, #4]
  /* Init USB Ip. */
  /* Link the driver to the stack. */
  hpcd_USB_FS.pData = pdev;
 8007db0:	4a28      	ldr	r2, [pc, #160]	; (8007e54 <USBD_LL_Init+0xac>)
 8007db2:	687b      	ldr	r3, [r7, #4]
 8007db4:	f8c2 32e8 	str.w	r3, [r2, #744]	; 0x2e8
  pdev->pData = &hpcd_USB_FS;
 8007db8:	687b      	ldr	r3, [r7, #4]
 8007dba:	4a26      	ldr	r2, [pc, #152]	; (8007e54 <USBD_LL_Init+0xac>)
 8007dbc:	f8c3 22c0 	str.w	r2, [r3, #704]	; 0x2c0

  hpcd_USB_FS.Instance = USB;
 8007dc0:	4b24      	ldr	r3, [pc, #144]	; (8007e54 <USBD_LL_Init+0xac>)
 8007dc2:	4a25      	ldr	r2, [pc, #148]	; (8007e58 <USBD_LL_Init+0xb0>)
 8007dc4:	601a      	str	r2, [r3, #0]
  hpcd_USB_FS.Init.dev_endpoints = 8;
 8007dc6:	4b23      	ldr	r3, [pc, #140]	; (8007e54 <USBD_LL_Init+0xac>)
 8007dc8:	2208      	movs	r2, #8
 8007dca:	605a      	str	r2, [r3, #4]
  hpcd_USB_FS.Init.speed = PCD_SPEED_FULL;
 8007dcc:	4b21      	ldr	r3, [pc, #132]	; (8007e54 <USBD_LL_Init+0xac>)
 8007dce:	2202      	movs	r2, #2
 8007dd0:	609a      	str	r2, [r3, #8]
  hpcd_USB_FS.Init.low_power_enable = DISABLE;
 8007dd2:	4b20      	ldr	r3, [pc, #128]	; (8007e54 <USBD_LL_Init+0xac>)
 8007dd4:	2200      	movs	r2, #0
 8007dd6:	619a      	str	r2, [r3, #24]
  hpcd_USB_FS.Init.lpm_enable = DISABLE;
 8007dd8:	4b1e      	ldr	r3, [pc, #120]	; (8007e54 <USBD_LL_Init+0xac>)
 8007dda:	2200      	movs	r2, #0
 8007ddc:	61da      	str	r2, [r3, #28]
  hpcd_USB_FS.Init.battery_charging_enable = DISABLE;
 8007dde:	4b1d      	ldr	r3, [pc, #116]	; (8007e54 <USBD_LL_Init+0xac>)
 8007de0:	2200      	movs	r2, #0
 8007de2:	621a      	str	r2, [r3, #32]
  if (HAL_PCD_Init(&hpcd_USB_FS) != HAL_OK)
 8007de4:	481b      	ldr	r0, [pc, #108]	; (8007e54 <USBD_LL_Init+0xac>)
 8007de6:	f7f9 fd07 	bl	80017f8 <HAL_PCD_Init>
 8007dea:	4603      	mov	r3, r0
 8007dec:	2b00      	cmp	r3, #0
 8007dee:	d001      	beq.n	8007df4 <USBD_LL_Init+0x4c>
  {
    Error_Handler( );
 8007df0:	f7f8 fb42 	bl	8000478 <Error_Handler>
  HAL_PCD_RegisterDataInStageCallback(&hpcd_USB_FS, PCD_DataInStageCallback);
  HAL_PCD_RegisterIsoOutIncpltCallback(&hpcd_USB_FS, PCD_ISOOUTIncompleteCallback);
  HAL_PCD_RegisterIsoInIncpltCallback(&hpcd_USB_FS, PCD_ISOINIncompleteCallback);
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
  /* USER CODE BEGIN EndPoint_Configuration */
  HAL_PCDEx_PMAConfig((PCD_HandleTypeDef*)pdev->pData , 0x00 , PCD_SNG_BUF, 0x18);
 8007df4:	687b      	ldr	r3, [r7, #4]
 8007df6:	f8d3 02c0 	ldr.w	r0, [r3, #704]	; 0x2c0
 8007dfa:	2318      	movs	r3, #24
 8007dfc:	2200      	movs	r2, #0
 8007dfe:	2100      	movs	r1, #0
 8007e00:	f7fb f83b 	bl	8002e7a <HAL_PCDEx_PMAConfig>
  HAL_PCDEx_PMAConfig((PCD_HandleTypeDef*)pdev->pData , 0x80 , PCD_SNG_BUF, 0x58);
 8007e04:	687b      	ldr	r3, [r7, #4]
 8007e06:	f8d3 02c0 	ldr.w	r0, [r3, #704]	; 0x2c0
 8007e0a:	2358      	movs	r3, #88	; 0x58
 8007e0c:	2200      	movs	r2, #0
 8007e0e:	2180      	movs	r1, #128	; 0x80
 8007e10:	f7fb f833 	bl	8002e7a <HAL_PCDEx_PMAConfig>
  /* USER CODE END EndPoint_Configuration */
  /* USER CODE BEGIN EndPoint_Configuration_CDC */
  HAL_PCDEx_PMAConfig((PCD_HandleTypeDef*)pdev->pData , 0x81 , PCD_SNG_BUF, 0xC0);
 8007e14:	687b      	ldr	r3, [r7, #4]
 8007e16:	f8d3 02c0 	ldr.w	r0, [r3, #704]	; 0x2c0
 8007e1a:	23c0      	movs	r3, #192	; 0xc0
 8007e1c:	2200      	movs	r2, #0
 8007e1e:	2181      	movs	r1, #129	; 0x81
 8007e20:	f7fb f82b 	bl	8002e7a <HAL_PCDEx_PMAConfig>
  HAL_PCDEx_PMAConfig((PCD_HandleTypeDef*)pdev->pData , 0x01 , PCD_SNG_BUF, 0x110);
 8007e24:	687b      	ldr	r3, [r7, #4]
 8007e26:	f8d3 02c0 	ldr.w	r0, [r3, #704]	; 0x2c0
 8007e2a:	f44f 7388 	mov.w	r3, #272	; 0x110
 8007e2e:	2200      	movs	r2, #0
 8007e30:	2101      	movs	r1, #1
 8007e32:	f7fb f822 	bl	8002e7a <HAL_PCDEx_PMAConfig>
  HAL_PCDEx_PMAConfig((PCD_HandleTypeDef*)pdev->pData , 0x82 , PCD_SNG_BUF, 0x100);
 8007e36:	687b      	ldr	r3, [r7, #4]
 8007e38:	f8d3 02c0 	ldr.w	r0, [r3, #704]	; 0x2c0
 8007e3c:	f44f 7380 	mov.w	r3, #256	; 0x100
 8007e40:	2200      	movs	r2, #0
 8007e42:	2182      	movs	r1, #130	; 0x82
 8007e44:	f7fb f819 	bl	8002e7a <HAL_PCDEx_PMAConfig>
  /* USER CODE END EndPoint_Configuration_CDC */
  return USBD_OK;
 8007e48:	2300      	movs	r3, #0
}
 8007e4a:	4618      	mov	r0, r3
 8007e4c:	3708      	adds	r7, #8
 8007e4e:	46bd      	mov	sp, r7
 8007e50:	bd80      	pop	{r7, pc}
 8007e52:	bf00      	nop
 8007e54:	20003824 	.word	0x20003824
 8007e58:	40005c00 	.word	0x40005c00

08007e5c <USBD_LL_Start>:
  * @brief  Starts the low level portion of the device driver.
  * @param  pdev: Device handle
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Start(USBD_HandleTypeDef *pdev)
{
 8007e5c:	b580      	push	{r7, lr}
 8007e5e:	b084      	sub	sp, #16
 8007e60:	af00      	add	r7, sp, #0
 8007e62:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8007e64:	2300      	movs	r3, #0
 8007e66:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8007e68:	2300      	movs	r3, #0
 8007e6a:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_Start(pdev->pData);
 8007e6c:	687b      	ldr	r3, [r7, #4]
 8007e6e:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 8007e72:	4618      	mov	r0, r3
 8007e74:	f7f9 fdcb 	bl	8001a0e <HAL_PCD_Start>
 8007e78:	4603      	mov	r3, r0
 8007e7a:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 8007e7c:	7bfb      	ldrb	r3, [r7, #15]
 8007e7e:	4618      	mov	r0, r3
 8007e80:	f000 f94e 	bl	8008120 <USBD_Get_USB_Status>
 8007e84:	4603      	mov	r3, r0
 8007e86:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 8007e88:	7bbb      	ldrb	r3, [r7, #14]
}
 8007e8a:	4618      	mov	r0, r3
 8007e8c:	3710      	adds	r7, #16
 8007e8e:	46bd      	mov	sp, r7
 8007e90:	bd80      	pop	{r7, pc}

08007e92 <USBD_LL_OpenEP>:
  * @param  ep_type: Endpoint type
  * @param  ep_mps: Endpoint max packet size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_OpenEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t ep_type, uint16_t ep_mps)
{
 8007e92:	b580      	push	{r7, lr}
 8007e94:	b084      	sub	sp, #16
 8007e96:	af00      	add	r7, sp, #0
 8007e98:	6078      	str	r0, [r7, #4]
 8007e9a:	4608      	mov	r0, r1
 8007e9c:	4611      	mov	r1, r2
 8007e9e:	461a      	mov	r2, r3
 8007ea0:	4603      	mov	r3, r0
 8007ea2:	70fb      	strb	r3, [r7, #3]
 8007ea4:	460b      	mov	r3, r1
 8007ea6:	70bb      	strb	r3, [r7, #2]
 8007ea8:	4613      	mov	r3, r2
 8007eaa:	803b      	strh	r3, [r7, #0]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8007eac:	2300      	movs	r3, #0
 8007eae:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8007eb0:	2300      	movs	r3, #0
 8007eb2:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_Open(pdev->pData, ep_addr, ep_mps, ep_type);
 8007eb4:	687b      	ldr	r3, [r7, #4]
 8007eb6:	f8d3 02c0 	ldr.w	r0, [r3, #704]	; 0x2c0
 8007eba:	78bb      	ldrb	r3, [r7, #2]
 8007ebc:	883a      	ldrh	r2, [r7, #0]
 8007ebe:	78f9      	ldrb	r1, [r7, #3]
 8007ec0:	f7f9 ff45 	bl	8001d4e <HAL_PCD_EP_Open>
 8007ec4:	4603      	mov	r3, r0
 8007ec6:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 8007ec8:	7bfb      	ldrb	r3, [r7, #15]
 8007eca:	4618      	mov	r0, r3
 8007ecc:	f000 f928 	bl	8008120 <USBD_Get_USB_Status>
 8007ed0:	4603      	mov	r3, r0
 8007ed2:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 8007ed4:	7bbb      	ldrb	r3, [r7, #14]
}
 8007ed6:	4618      	mov	r0, r3
 8007ed8:	3710      	adds	r7, #16
 8007eda:	46bd      	mov	sp, r7
 8007edc:	bd80      	pop	{r7, pc}

08007ede <USBD_LL_CloseEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_CloseEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 8007ede:	b580      	push	{r7, lr}
 8007ee0:	b084      	sub	sp, #16
 8007ee2:	af00      	add	r7, sp, #0
 8007ee4:	6078      	str	r0, [r7, #4]
 8007ee6:	460b      	mov	r3, r1
 8007ee8:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8007eea:	2300      	movs	r3, #0
 8007eec:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8007eee:	2300      	movs	r3, #0
 8007ef0:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_Close(pdev->pData, ep_addr);
 8007ef2:	687b      	ldr	r3, [r7, #4]
 8007ef4:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 8007ef8:	78fa      	ldrb	r2, [r7, #3]
 8007efa:	4611      	mov	r1, r2
 8007efc:	4618      	mov	r0, r3
 8007efe:	f7f9 ff8c 	bl	8001e1a <HAL_PCD_EP_Close>
 8007f02:	4603      	mov	r3, r0
 8007f04:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 8007f06:	7bfb      	ldrb	r3, [r7, #15]
 8007f08:	4618      	mov	r0, r3
 8007f0a:	f000 f909 	bl	8008120 <USBD_Get_USB_Status>
 8007f0e:	4603      	mov	r3, r0
 8007f10:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 8007f12:	7bbb      	ldrb	r3, [r7, #14]
}
 8007f14:	4618      	mov	r0, r3
 8007f16:	3710      	adds	r7, #16
 8007f18:	46bd      	mov	sp, r7
 8007f1a:	bd80      	pop	{r7, pc}

08007f1c <USBD_LL_StallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_StallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 8007f1c:	b580      	push	{r7, lr}
 8007f1e:	b084      	sub	sp, #16
 8007f20:	af00      	add	r7, sp, #0
 8007f22:	6078      	str	r0, [r7, #4]
 8007f24:	460b      	mov	r3, r1
 8007f26:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8007f28:	2300      	movs	r3, #0
 8007f2a:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8007f2c:	2300      	movs	r3, #0
 8007f2e:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_SetStall(pdev->pData, ep_addr);
 8007f30:	687b      	ldr	r3, [r7, #4]
 8007f32:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 8007f36:	78fa      	ldrb	r2, [r7, #3]
 8007f38:	4611      	mov	r1, r2
 8007f3a:	4618      	mov	r0, r3
 8007f3c:	f7fa f84c 	bl	8001fd8 <HAL_PCD_EP_SetStall>
 8007f40:	4603      	mov	r3, r0
 8007f42:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 8007f44:	7bfb      	ldrb	r3, [r7, #15]
 8007f46:	4618      	mov	r0, r3
 8007f48:	f000 f8ea 	bl	8008120 <USBD_Get_USB_Status>
 8007f4c:	4603      	mov	r3, r0
 8007f4e:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 8007f50:	7bbb      	ldrb	r3, [r7, #14]
}
 8007f52:	4618      	mov	r0, r3
 8007f54:	3710      	adds	r7, #16
 8007f56:	46bd      	mov	sp, r7
 8007f58:	bd80      	pop	{r7, pc}

08007f5a <USBD_LL_ClearStallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_ClearStallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 8007f5a:	b580      	push	{r7, lr}
 8007f5c:	b084      	sub	sp, #16
 8007f5e:	af00      	add	r7, sp, #0
 8007f60:	6078      	str	r0, [r7, #4]
 8007f62:	460b      	mov	r3, r1
 8007f64:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8007f66:	2300      	movs	r3, #0
 8007f68:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8007f6a:	2300      	movs	r3, #0
 8007f6c:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_ClrStall(pdev->pData, ep_addr);
 8007f6e:	687b      	ldr	r3, [r7, #4]
 8007f70:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 8007f74:	78fa      	ldrb	r2, [r7, #3]
 8007f76:	4611      	mov	r1, r2
 8007f78:	4618      	mov	r0, r3
 8007f7a:	f7fa f88d 	bl	8002098 <HAL_PCD_EP_ClrStall>
 8007f7e:	4603      	mov	r3, r0
 8007f80:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 8007f82:	7bfb      	ldrb	r3, [r7, #15]
 8007f84:	4618      	mov	r0, r3
 8007f86:	f000 f8cb 	bl	8008120 <USBD_Get_USB_Status>
 8007f8a:	4603      	mov	r3, r0
 8007f8c:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 8007f8e:	7bbb      	ldrb	r3, [r7, #14]
}
 8007f90:	4618      	mov	r0, r3
 8007f92:	3710      	adds	r7, #16
 8007f94:	46bd      	mov	sp, r7
 8007f96:	bd80      	pop	{r7, pc}

08007f98 <USBD_LL_IsStallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval Stall (1: Yes, 0: No)
  */
uint8_t USBD_LL_IsStallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 8007f98:	b480      	push	{r7}
 8007f9a:	b085      	sub	sp, #20
 8007f9c:	af00      	add	r7, sp, #0
 8007f9e:	6078      	str	r0, [r7, #4]
 8007fa0:	460b      	mov	r3, r1
 8007fa2:	70fb      	strb	r3, [r7, #3]
  PCD_HandleTypeDef *hpcd = (PCD_HandleTypeDef*) pdev->pData;
 8007fa4:	687b      	ldr	r3, [r7, #4]
 8007fa6:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 8007faa:	60fb      	str	r3, [r7, #12]

  if((ep_addr & 0x80) == 0x80)
 8007fac:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8007fb0:	2b00      	cmp	r3, #0
 8007fb2:	da0c      	bge.n	8007fce <USBD_LL_IsStallEP+0x36>
  {
    return hpcd->IN_ep[ep_addr & 0x7F].is_stall;
 8007fb4:	78fb      	ldrb	r3, [r7, #3]
 8007fb6:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8007fba:	68f9      	ldr	r1, [r7, #12]
 8007fbc:	1c5a      	adds	r2, r3, #1
 8007fbe:	4613      	mov	r3, r2
 8007fc0:	009b      	lsls	r3, r3, #2
 8007fc2:	4413      	add	r3, r2
 8007fc4:	00db      	lsls	r3, r3, #3
 8007fc6:	440b      	add	r3, r1
 8007fc8:	3302      	adds	r3, #2
 8007fca:	781b      	ldrb	r3, [r3, #0]
 8007fcc:	e00b      	b.n	8007fe6 <USBD_LL_IsStallEP+0x4e>
  }
  else
  {
    return hpcd->OUT_ep[ep_addr & 0x7F].is_stall;
 8007fce:	78fb      	ldrb	r3, [r7, #3]
 8007fd0:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 8007fd4:	68f9      	ldr	r1, [r7, #12]
 8007fd6:	4613      	mov	r3, r2
 8007fd8:	009b      	lsls	r3, r3, #2
 8007fda:	4413      	add	r3, r2
 8007fdc:	00db      	lsls	r3, r3, #3
 8007fde:	440b      	add	r3, r1
 8007fe0:	f503 73b5 	add.w	r3, r3, #362	; 0x16a
 8007fe4:	781b      	ldrb	r3, [r3, #0]
  }
}
 8007fe6:	4618      	mov	r0, r3
 8007fe8:	3714      	adds	r7, #20
 8007fea:	46bd      	mov	sp, r7
 8007fec:	bc80      	pop	{r7}
 8007fee:	4770      	bx	lr

08007ff0 <USBD_LL_SetUSBAddress>:
  * @param  pdev: Device handle
  * @param  dev_addr: Device address
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_SetUSBAddress(USBD_HandleTypeDef *pdev, uint8_t dev_addr)
{
 8007ff0:	b580      	push	{r7, lr}
 8007ff2:	b084      	sub	sp, #16
 8007ff4:	af00      	add	r7, sp, #0
 8007ff6:	6078      	str	r0, [r7, #4]
 8007ff8:	460b      	mov	r3, r1
 8007ffa:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8007ffc:	2300      	movs	r3, #0
 8007ffe:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8008000:	2300      	movs	r3, #0
 8008002:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_SetAddress(pdev->pData, dev_addr);
 8008004:	687b      	ldr	r3, [r7, #4]
 8008006:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 800800a:	78fa      	ldrb	r2, [r7, #3]
 800800c:	4611      	mov	r1, r2
 800800e:	4618      	mov	r0, r3
 8008010:	f7f9 fe78 	bl	8001d04 <HAL_PCD_SetAddress>
 8008014:	4603      	mov	r3, r0
 8008016:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 8008018:	7bfb      	ldrb	r3, [r7, #15]
 800801a:	4618      	mov	r0, r3
 800801c:	f000 f880 	bl	8008120 <USBD_Get_USB_Status>
 8008020:	4603      	mov	r3, r0
 8008022:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 8008024:	7bbb      	ldrb	r3, [r7, #14]
}
 8008026:	4618      	mov	r0, r3
 8008028:	3710      	adds	r7, #16
 800802a:	46bd      	mov	sp, r7
 800802c:	bd80      	pop	{r7, pc}

0800802e <USBD_LL_Transmit>:
  * @param  pbuf: Pointer to data to be sent
  * @param  size: Data size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Transmit(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t *pbuf, uint16_t size)
{
 800802e:	b580      	push	{r7, lr}
 8008030:	b086      	sub	sp, #24
 8008032:	af00      	add	r7, sp, #0
 8008034:	60f8      	str	r0, [r7, #12]
 8008036:	607a      	str	r2, [r7, #4]
 8008038:	461a      	mov	r2, r3
 800803a:	460b      	mov	r3, r1
 800803c:	72fb      	strb	r3, [r7, #11]
 800803e:	4613      	mov	r3, r2
 8008040:	813b      	strh	r3, [r7, #8]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8008042:	2300      	movs	r3, #0
 8008044:	75fb      	strb	r3, [r7, #23]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8008046:	2300      	movs	r3, #0
 8008048:	75bb      	strb	r3, [r7, #22]

  hal_status = HAL_PCD_EP_Transmit(pdev->pData, ep_addr, pbuf, size);
 800804a:	68fb      	ldr	r3, [r7, #12]
 800804c:	f8d3 02c0 	ldr.w	r0, [r3, #704]	; 0x2c0
 8008050:	893b      	ldrh	r3, [r7, #8]
 8008052:	7af9      	ldrb	r1, [r7, #11]
 8008054:	687a      	ldr	r2, [r7, #4]
 8008056:	f7f9 ff7c 	bl	8001f52 <HAL_PCD_EP_Transmit>
 800805a:	4603      	mov	r3, r0
 800805c:	75fb      	strb	r3, [r7, #23]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800805e:	7dfb      	ldrb	r3, [r7, #23]
 8008060:	4618      	mov	r0, r3
 8008062:	f000 f85d 	bl	8008120 <USBD_Get_USB_Status>
 8008066:	4603      	mov	r3, r0
 8008068:	75bb      	strb	r3, [r7, #22]

  return usb_status;
 800806a:	7dbb      	ldrb	r3, [r7, #22]
}
 800806c:	4618      	mov	r0, r3
 800806e:	3718      	adds	r7, #24
 8008070:	46bd      	mov	sp, r7
 8008072:	bd80      	pop	{r7, pc}

08008074 <USBD_LL_PrepareReceive>:
  * @param  pbuf: Pointer to data to be received
  * @param  size: Data size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_PrepareReceive(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t *pbuf, uint16_t size)
{
 8008074:	b580      	push	{r7, lr}
 8008076:	b086      	sub	sp, #24
 8008078:	af00      	add	r7, sp, #0
 800807a:	60f8      	str	r0, [r7, #12]
 800807c:	607a      	str	r2, [r7, #4]
 800807e:	461a      	mov	r2, r3
 8008080:	460b      	mov	r3, r1
 8008082:	72fb      	strb	r3, [r7, #11]
 8008084:	4613      	mov	r3, r2
 8008086:	813b      	strh	r3, [r7, #8]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8008088:	2300      	movs	r3, #0
 800808a:	75fb      	strb	r3, [r7, #23]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800808c:	2300      	movs	r3, #0
 800808e:	75bb      	strb	r3, [r7, #22]

  hal_status = HAL_PCD_EP_Receive(pdev->pData, ep_addr, pbuf, size);
 8008090:	68fb      	ldr	r3, [r7, #12]
 8008092:	f8d3 02c0 	ldr.w	r0, [r3, #704]	; 0x2c0
 8008096:	893b      	ldrh	r3, [r7, #8]
 8008098:	7af9      	ldrb	r1, [r7, #11]
 800809a:	687a      	ldr	r2, [r7, #4]
 800809c:	f7f9 ff05 	bl	8001eaa <HAL_PCD_EP_Receive>
 80080a0:	4603      	mov	r3, r0
 80080a2:	75fb      	strb	r3, [r7, #23]

  usb_status =  USBD_Get_USB_Status(hal_status);
 80080a4:	7dfb      	ldrb	r3, [r7, #23]
 80080a6:	4618      	mov	r0, r3
 80080a8:	f000 f83a 	bl	8008120 <USBD_Get_USB_Status>
 80080ac:	4603      	mov	r3, r0
 80080ae:	75bb      	strb	r3, [r7, #22]

  return usb_status;
 80080b0:	7dbb      	ldrb	r3, [r7, #22]
}
 80080b2:	4618      	mov	r0, r3
 80080b4:	3718      	adds	r7, #24
 80080b6:	46bd      	mov	sp, r7
 80080b8:	bd80      	pop	{r7, pc}

080080ba <USBD_LL_GetRxDataSize>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval Recived Data Size
  */
uint32_t USBD_LL_GetRxDataSize(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 80080ba:	b580      	push	{r7, lr}
 80080bc:	b082      	sub	sp, #8
 80080be:	af00      	add	r7, sp, #0
 80080c0:	6078      	str	r0, [r7, #4]
 80080c2:	460b      	mov	r3, r1
 80080c4:	70fb      	strb	r3, [r7, #3]
  return HAL_PCD_EP_GetRxCount((PCD_HandleTypeDef*) pdev->pData, ep_addr);
 80080c6:	687b      	ldr	r3, [r7, #4]
 80080c8:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 80080cc:	78fa      	ldrb	r2, [r7, #3]
 80080ce:	4611      	mov	r1, r2
 80080d0:	4618      	mov	r0, r3
 80080d2:	f7f9 ff27 	bl	8001f24 <HAL_PCD_EP_GetRxCount>
 80080d6:	4603      	mov	r3, r0
}
 80080d8:	4618      	mov	r0, r3
 80080da:	3708      	adds	r7, #8
 80080dc:	46bd      	mov	sp, r7
 80080de:	bd80      	pop	{r7, pc}

080080e0 <USBD_static_malloc>:
  * @brief  Static single allocation.
  * @param  size: Size of allocated memory
  * @retval None
  */
void *USBD_static_malloc(uint32_t size)
{
 80080e0:	b480      	push	{r7}
 80080e2:	b083      	sub	sp, #12
 80080e4:	af00      	add	r7, sp, #0
 80080e6:	6078      	str	r0, [r7, #4]
  static uint32_t mem[(sizeof(USBD_CDC_HandleTypeDef)/4)+1];/* On 32-bit boundary */
  return mem;
 80080e8:	4b02      	ldr	r3, [pc, #8]	; (80080f4 <USBD_static_malloc+0x14>)
}
 80080ea:	4618      	mov	r0, r3
 80080ec:	370c      	adds	r7, #12
 80080ee:	46bd      	mov	sp, r7
 80080f0:	bc80      	pop	{r7}
 80080f2:	4770      	bx	lr
 80080f4:	2000019c 	.word	0x2000019c

080080f8 <USBD_static_free>:
  * @brief  Dummy memory free
  * @param  p: Pointer to allocated  memory address
  * @retval None
  */
void USBD_static_free(void *p)
{
 80080f8:	b480      	push	{r7}
 80080fa:	b083      	sub	sp, #12
 80080fc:	af00      	add	r7, sp, #0
 80080fe:	6078      	str	r0, [r7, #4]

}
 8008100:	bf00      	nop
 8008102:	370c      	adds	r7, #12
 8008104:	46bd      	mov	sp, r7
 8008106:	bc80      	pop	{r7}
 8008108:	4770      	bx	lr

0800810a <HAL_PCDEx_SetConnectionState>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCDEx_SetConnectionState(PCD_HandleTypeDef *hpcd, uint8_t state)
#else
void HAL_PCDEx_SetConnectionState(PCD_HandleTypeDef *hpcd, uint8_t state)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800810a:	b480      	push	{r7}
 800810c:	b083      	sub	sp, #12
 800810e:	af00      	add	r7, sp, #0
 8008110:	6078      	str	r0, [r7, #4]
 8008112:	460b      	mov	r3, r1
 8008114:	70fb      	strb	r3, [r7, #3]
  {
    /* Configure High connection state. */

  }
  /* USER CODE END 6 */
}
 8008116:	bf00      	nop
 8008118:	370c      	adds	r7, #12
 800811a:	46bd      	mov	sp, r7
 800811c:	bc80      	pop	{r7}
 800811e:	4770      	bx	lr

08008120 <USBD_Get_USB_Status>:
  * @brief  Retuns the USB status depending on the HAL status:
  * @param  hal_status: HAL status
  * @retval USB status
  */
USBD_StatusTypeDef USBD_Get_USB_Status(HAL_StatusTypeDef hal_status)
{
 8008120:	b480      	push	{r7}
 8008122:	b085      	sub	sp, #20
 8008124:	af00      	add	r7, sp, #0
 8008126:	4603      	mov	r3, r0
 8008128:	71fb      	strb	r3, [r7, #7]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800812a:	2300      	movs	r3, #0
 800812c:	73fb      	strb	r3, [r7, #15]

  switch (hal_status)
 800812e:	79fb      	ldrb	r3, [r7, #7]
 8008130:	2b03      	cmp	r3, #3
 8008132:	d817      	bhi.n	8008164 <USBD_Get_USB_Status+0x44>
 8008134:	a201      	add	r2, pc, #4	; (adr r2, 800813c <USBD_Get_USB_Status+0x1c>)
 8008136:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800813a:	bf00      	nop
 800813c:	0800814d 	.word	0x0800814d
 8008140:	08008153 	.word	0x08008153
 8008144:	08008159 	.word	0x08008159
 8008148:	0800815f 	.word	0x0800815f
  {
    case HAL_OK :
      usb_status = USBD_OK;
 800814c:	2300      	movs	r3, #0
 800814e:	73fb      	strb	r3, [r7, #15]
    break;
 8008150:	e00b      	b.n	800816a <USBD_Get_USB_Status+0x4a>
    case HAL_ERROR :
      usb_status = USBD_FAIL;
 8008152:	2302      	movs	r3, #2
 8008154:	73fb      	strb	r3, [r7, #15]
    break;
 8008156:	e008      	b.n	800816a <USBD_Get_USB_Status+0x4a>
    case HAL_BUSY :
      usb_status = USBD_BUSY;
 8008158:	2301      	movs	r3, #1
 800815a:	73fb      	strb	r3, [r7, #15]
    break;
 800815c:	e005      	b.n	800816a <USBD_Get_USB_Status+0x4a>
    case HAL_TIMEOUT :
      usb_status = USBD_FAIL;
 800815e:	2302      	movs	r3, #2
 8008160:	73fb      	strb	r3, [r7, #15]
    break;
 8008162:	e002      	b.n	800816a <USBD_Get_USB_Status+0x4a>
    default :
      usb_status = USBD_FAIL;
 8008164:	2302      	movs	r3, #2
 8008166:	73fb      	strb	r3, [r7, #15]
    break;
 8008168:	bf00      	nop
  }
  return usb_status;
 800816a:	7bfb      	ldrb	r3, [r7, #15]
}
 800816c:	4618      	mov	r0, r3
 800816e:	3714      	adds	r7, #20
 8008170:	46bd      	mov	sp, r7
 8008172:	bc80      	pop	{r7}
 8008174:	4770      	bx	lr
 8008176:	bf00      	nop

08008178 <__libc_init_array>:
 8008178:	b570      	push	{r4, r5, r6, lr}
 800817a:	2500      	movs	r5, #0
 800817c:	4e0c      	ldr	r6, [pc, #48]	; (80081b0 <__libc_init_array+0x38>)
 800817e:	4c0d      	ldr	r4, [pc, #52]	; (80081b4 <__libc_init_array+0x3c>)
 8008180:	1ba4      	subs	r4, r4, r6
 8008182:	10a4      	asrs	r4, r4, #2
 8008184:	42a5      	cmp	r5, r4
 8008186:	d109      	bne.n	800819c <__libc_init_array+0x24>
 8008188:	f000 f822 	bl	80081d0 <_init>
 800818c:	2500      	movs	r5, #0
 800818e:	4e0a      	ldr	r6, [pc, #40]	; (80081b8 <__libc_init_array+0x40>)
 8008190:	4c0a      	ldr	r4, [pc, #40]	; (80081bc <__libc_init_array+0x44>)
 8008192:	1ba4      	subs	r4, r4, r6
 8008194:	10a4      	asrs	r4, r4, #2
 8008196:	42a5      	cmp	r5, r4
 8008198:	d105      	bne.n	80081a6 <__libc_init_array+0x2e>
 800819a:	bd70      	pop	{r4, r5, r6, pc}
 800819c:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 80081a0:	4798      	blx	r3
 80081a2:	3501      	adds	r5, #1
 80081a4:	e7ee      	b.n	8008184 <__libc_init_array+0xc>
 80081a6:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 80081aa:	4798      	blx	r3
 80081ac:	3501      	adds	r5, #1
 80081ae:	e7f2      	b.n	8008196 <__libc_init_array+0x1e>
 80081b0:	08008254 	.word	0x08008254
 80081b4:	08008254 	.word	0x08008254
 80081b8:	08008254 	.word	0x08008254
 80081bc:	08008258 	.word	0x08008258

080081c0 <memset>:
 80081c0:	4603      	mov	r3, r0
 80081c2:	4402      	add	r2, r0
 80081c4:	4293      	cmp	r3, r2
 80081c6:	d100      	bne.n	80081ca <memset+0xa>
 80081c8:	4770      	bx	lr
 80081ca:	f803 1b01 	strb.w	r1, [r3], #1
 80081ce:	e7f9      	b.n	80081c4 <memset+0x4>

080081d0 <_init>:
 80081d0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80081d2:	bf00      	nop
 80081d4:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80081d6:	bc08      	pop	{r3}
 80081d8:	469e      	mov	lr, r3
 80081da:	4770      	bx	lr

080081dc <_fini>:
 80081dc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80081de:	bf00      	nop
 80081e0:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80081e2:	bc08      	pop	{r3}
 80081e4:	469e      	mov	lr, r3
 80081e6:	4770      	bx	lr
